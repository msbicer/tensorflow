<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Library installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterLibrary extends JAdapterInstance{	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path where to find language files.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent->setPath('source', JPATH_PLATFORM . '/' . $this->parent->extension->element);		}		$this->manifest = $this->parent->getManifest();		$extension = 'lib_' . strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		$name = strtolower((string) $this->manifest->libraryname);		$lang = JFactory::getLanguage();		$source = $path ? $path : JPATH_PLATFORM . "/$name";		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension's name		$name = JFilterInput::getInstance()->clean((string) $this->manifest->name, 'string');		$element = str_replace('.xml', '', basename($this->parent->getPath('manifest')));		$this->set('name', $name);		$this->set('element', $element);		$db = $this->parent->getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('library'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		$result = $db->loadResult();		if ($result)		{			// Already installed, can we upgrade?			if ($this->parent->isOverwrite() || $this->parent->isUpgrade())			{				// We can upgrade, so uninstall the old one				$installer = new JInstaller; // we don't want to compromise this instance!				$installer->uninstall('library', $result);			}			else			{				// Abort the install, no upgrade possible				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_LIB_INSTALL_ALREADY_INSTALLED'));				return false;			}		}		// Get the library's description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Set the installation path		$group = (string) $this->manifest->libraryname;		if (!$group)		{			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_LIB_INSTALL_NOFILE'));			return false;		}		else		{			$this->parent->setPath('extension_root', JPATH_PLATFORM . '/' . implode(DIRECTORY_SEPARATOR, explode('/', $group)));		}		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// If the library directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_root')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_root')))			{				$this->parent->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_LIB_INSTALL_FAILED_TO_CREATE_DIRECTORY', $this->parent->getPath('extension_root'))				);				return false;			}		}		/*		 * If we created the library directory and will want to remove it if we		 * have to roll back the installation, let's add it to the installation		 * step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_root')));		}		// Copy all necessary files		if ($this->parent->parseFiles($this->manifest->files, -1) === false)		{			// Install failed, roll back changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseLanguages($this->manifest->languages);		$this->parent->parseMedia($this->manifest->media);		// Extension Registration		$row = JTable::getInstance('extension');		$row->name = $this->get('name');		$row->type = 'library';		$row->element = $this->get('element');		// There is no folder for libraries		$row->folder = '';		$row->enabled = 1;		$row->protected = 0;		$row->access = 1;		$row->client_id = 0;		$row->params = $this->parent->getParams();		// Custom data		$row->custom_data = '';		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_LIB_INSTALL_ROLLBACK', $db->stderr(true)));			return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $this->parent->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/libraries/' . basename($this->parent->getPath('manifest'));		if (!$this->parent->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_LIB_INSTALL_COPY_SETUP'));			return false;		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		// Since this is just files, an update removes old files		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extensions name		$name = (string) $this->manifest->name;		$name = JFilterInput::getInstance()->clean($name, 'string');		$element = str_replace('.xml', '', basename($this->parent->getPath('manifest')));		$this->set('name', $name);		$this->set('element', $element);		// We don't want to compromise this instance!		$installer = new JInstaller;		$db = $this->parent->getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('library'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		$result = $db->loadResult();		if ($result)		{			// Already installed, which would make sense			$installer->uninstall('library', $result);		}		// Now create the new files		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   string  $id  The id of the library to uninstall.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$retval = true;		// First order of business will be to load the module object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id) || !strlen($row->element))		{			JLog::add(JText::_('ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the library we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_WARNCORELIBRARY'), JLog::WARNING, 'jerror');			return false;		}		$manifestFile = JPATH_MANIFESTS . '/libraries/' . $row->element . '.xml';		// Because libraries may not have their own folders we cannot use the standard method of finding an installation manifest		if (file_exists($manifestFile))		{			$manifest = new JInstallerManifestLibrary($manifestFile);			// Set the library root path			$this->parent->setPath('extension_root', JPATH_PLATFORM . '/' . $manifest->libraryname);			$xml = simplexml_load_file($manifestFile);			// If we cannot load the XML file return null			if (!$xml)			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_LOAD_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			// Check for a valid XML root tag.			if ($xml->getName() != 'extension')			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_INVALID_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			$this->parent->removeFiles($xml->files, -1);			JFile::delete($manifestFile);		}		else		{			// Remove this row entry since its invalid			$row->delete($row->extension_id);			unset($row);			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_INVALID_NOTFOUND_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// TODO: Change this so it walked up the path backwards so we clobber multiple empties		// If the folder is empty, let's delete it		if (JFolder::exists($this->parent->getPath('extension_root')))		{			if (is_dir($this->parent->getPath('extension_root')))			{				$files = JFolder::files($this->parent->getPath('extension_root'));				if (!count($files))				{					JFolder::delete($this->parent->getPath('extension_root'));				}			}		}		$this->parent->removeFiles($xml->media);		$this->parent->removeFiles($xml->languages);		$row->delete($row->extension_id);		unset($row);		return $retval;	}	/**	 * Custom discover method	 *	 * @return  array  JExtension  list of extensions available	 *	 * @since   3.1	 */	public function discover()	{		$results = array();		$file_list = JFolder::files(JPATH_MANIFESTS . '/libraries', '\.xml$');		foreach ($file_list as $file)		{			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_MANIFESTS . '/libraries/' . $file);			$file = JFile::stripExt($file);			$extension = JTable::getInstance('extension');			$extension->set('type', 'library');			$extension->set('client_id', 0);			$extension->set('element', $file);			$extension->set('folder', '');			$extension->set('name', $file);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = $extension;		}		return $results;	}	/**	 * Custom discover_install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function discover_install()	{		/* Libraries are a strange beast; they are actually references to files		 * There are two parts to a library which are disjunct in their locations		 * 1) The manifest file (stored in /JPATH_MANIFESTS/libraries)		 * 2) The actual files (stored in /JPATH_PLATFORM/libraryname)		 * Thus installation of a library is the process of dumping files		 * in two different places. As such it is impossible to perform		 * any operation beyond mere registration of a library under the presumption		 * that the files exist in the appropriate location so that come uninstall		 * time they can be adequately removed.		 */		$manifestPath = JPATH_MANIFESTS . '/libraries/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		$this->parent->extension->params = $this->parent->getParams();		if ($this->parent->extension->store())		{			return true;		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$manifestPath = JPATH_MANIFESTS . '/libraries/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterLibrary instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerLibrary extends JInstallerAdapterLibrary{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_checkin');?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<div id="filter-bar" class="btn-toolbar">  		<div class="filter-search btn-group pull-left">  			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CHECKIN_FILTER_SEARCH_DESC'); ?>" />  		</div>  		<div class="btn-group pull-left">  			<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>  			<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>  		</div>  	</div>  	<div class="clearfix"> </div>  	<table id="global-checkin" class="table table-striped">  		<thead>  			<tr>  				<th width="1%">  					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />  				</th>  				<th class="left"><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_DATABASE_TABLE', 'table', $listDirn, $listOrder); ?></th>  				<th><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_ITEMS_TO_CHECK_IN', 'count', $listDirn, $listOrder); ?></th>  			</tr>  		</thead>  		<tbody>  		<?php foreach ($this->items as $table => $count): $i = 0;?>  			<tr class="row<?php echo $i % 2; ?>">  				<td class="center"><?php echo JHtml::_('grid.id', $i, $table); ?></td>  				<td><?php echo JText::sprintf('COM_CHECKIN_TABLE', $table); ?></td>  				<td width="200" class="center"><span class="label label-info"><?php echo $count; ?></span></td>  			</tr>  		<?php endforeach;?>  		</tbody>  		<tfoot>  			<tr>  				<td colspan="15">  					<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  	</table>  	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Implements a combo box field. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldCombo extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Combo';	/**	 * Method to get the field input markup for a combo box field.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="combobox ' . (string) $this->element['class'] . '"' : ' class="combobox"';		$attr .= ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field options.		$options = $this->getOptions();		// Load the combobox behavior.		JHtml::_('behavior.combobox');		// Build the input for the combo box.		$html[] = '<input type="text" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $attr . '/>';		// Build the list for the combo box.		$html[] = '<ul id="combobox-' . $this->id . '" style="display:none;">';		foreach ($options as $option)		{			$html[] = '<li>' . $option->text . '</li>';		}		$html[] = '</ul>';		return implode($html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tag Model * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsModelTag extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  3.1	 */	protected $text_prefix = 'COM_TAGS';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 *	 * @since   3.1	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return parent::canDelete($record);		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 *	 * @since   3.1	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return parent::canEditState($record);	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   3.1	*/	public function getTable($type = 'Tag', $prefix = 'TagsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		$parentId = $app->input->getInt('parent_id');		$this->setState('tag.parent_id', $parentId);		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState($this->getName() . '.id', $pk);		// Load the parameters.		$params = JComponentHelper::getParams('com_tags');		$this->setState('params', $params);	}	/**	 * Method to get a tag.	 *	 * @param   integer  $pk  An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Tag data object on success, false on failure.	 *	 * @since   3.1	 */	public function getItem($pk = null)	{		if ($result = parent::getItem($pk))		{			// Prime required properties.			if (empty($result->id))			{				$result->parent_id = $this->getState('tag.parent_id');			}			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($result->metadata);			$result->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($result->images);			$result->images = $registry->toArray();			// Convert the urls field to an array.			$registry = new JRegistry;			$registry->loadString($result->urls);			$result->urls = $registry->toArray();			// Convert the created and modified dates to local user time for display in the form.			$tz = new DateTimeZone(JFactory::getApplication()->getCfg('offset'));			if ((int) $result->created_time)			{				$date = new JDate($result->created_time);				$date->setTimezone($tz);				$result->created_time = $date->toSql(true);			}			else			{				$result->created_time = null;			}			if ((int) $result->modified_time)			{				$date = new JDate($result->modified_time);				$date->setTimezone($tz);				$result->modified_time = $date->toSql(true);			}			else			{				$result->modified_time = null;			}		}		return $result;	}	/**	 * Method to get the row form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   3.1	 */	public function getForm($data = array(), $loadData = true)	{		$extension = $this->getState('tag');		$jinput = JFactory::getApplication()->input;		// Get the form.		$form = $this->loadForm('com_tags.tag', 'tag', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$user = JFactory::getUser();		if (!$user->authorise('core.edit.state', 'com_tags' . $jinput->get('id')))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   3.1	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_tags.edit.tag.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_tags.tag', $data);		return $data;	}	/**	 * Method to preprocess the form.	 *	 * @param   JForm   $form    A JForm object.	 * @param   mixed   $data    The data expected for the form.	 * @param   string  $group  The name of the plugin group to import.	 *	 * @return  void	 *	 * @see     JFormField	 * @since   3.1	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$input = JFactory::getApplication()->input;		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Load the row if saving an existing tag.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		// Set the new parent id if parent id not matched OR while New/Save as Copy .		if ($table->parent_id != $data['parent_id'] || $data['id'] == 0)		{			$table->setLocation($data['parent_id'], 'last-child');		}		if (isset($data['images']) && is_array($data['images']))		{			$registry = new JRegistry;			$registry->loadArray($data['images']);			$data['images'] = (string) $registry;		}		if (isset($data['urls']) && is_array($data['urls']))		{			$registry = new JRegistry;			$registry->loadArray($data['urls']);			$data['urls'] = (string) $registry;		}		// Alter the title for save as copy		if ($input->get('task') == 'save2copy')		{			list($title, $alias) = $this->generateNewTitle($data['parent_id'], $data['alias'], $data['title']);			$data['title'] = $title;			$data['alias'] = $alias;		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Bind the rules.		if (isset($data['rules']))		{			$rules = new JAccessRules($data['rules']);			$table->setRules($rules);		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentBeforeSave event.		$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentAfterSave event.		$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, &$table, $isNew));		// Rebuild the path for the tag:		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Rebuild the paths of the tag's children:		if (!$table->rebuild($table->id, $table->lft, $table->level, $table->path))		{			$this->setError($table->getError());			return false;		}		$this->setState($this->getName() . '.id', $table->id);		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   3.1	 */	public function rebuild()	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array    $idArray    An array of primary key ids.	 * @param   integer  $lft_array  The lft value	 *	 * @return  boolean  False on failure or error, True otherwise	 *	 * @since   3.1	*/	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			$title = ($table->title != $title) ? $title : JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Adapter Instance Class * * @package     Joomla.Platform * @subpackage  Base * @since       11.1 */class JAdapterInstance extends JObject{	/**	 * Parent	 *	 * @var    JInstaller	 * @since  11.1	 */	protected $parent = null;	/**	 * Database	 *	 * @var    JDatabaseDriver	 * @since  11.1	 */	protected $db = null;	/**	 * Constructor	 *	 * @param   JAdapter         $parent   Parent object	 * @param   JDatabaseDriver  $db       Database object	 * @param   array            $options  Configuration Options	 *	 * @since   11.1	 */	public function __construct($parent, $db, $options = array())	{		// Set the properties from the options array that is passed in		$this->setProperties($options);		// Set the parent and db in case $options for some reason overrides it.		$this->parent = $parent;		// Pull in the global dbo in case something happened to it.		$this->db = $db ? $db : JFactory::getDbo();	}	/**	 * Retrieves the parent object	 *	 * @return  object parent	 *	 * @since   11.1	 */	public function getParent()	{		return $this->parent;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds list controller class. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsControllerNewsfeeds extends JControllerAdmin{	/**	 * Proxy for getModel.	 */	public function getModel($name = 'Newsfeed', $prefix = 'NewsfeedsModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}	protected function postDeleteHook(JModelLegacy $model, $ids = null)	{	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Adsense data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataAdsense extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/adsense');		}	}	/**	 * Method to get an Adsense account's settings from Google	 *	 * @param   string   $accountID    ID of account to get	 * @param   boolean  $subaccounts  Include list of subaccounts	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getAccount($accountID, $subaccounts = true)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . ($subaccounts ? '?tree=true' : '');			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense accounts from Google	 *	 * @param   array  $options   Search settings	 * @param   int    $maxpages  Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listAccounts($options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense clients from Google	 *	 * @param   string  $accountID  ID of account to list the clients from	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listClients($accountID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an AdSense AdUnit	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $adunitID    ID of adunit to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getUnit($accountID, $adclientID, $adunitID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels for a specific Adunit	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $adunitID    ID of adunit to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUnitChannels($accountID, $adclientID, $adunitID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID) . '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an Adsense Channel	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $channelID   ID of channel to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getChannel($accountID, $adclientID, $channelID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/';			$url .= urlencode($adclientID) . '/customchannels/' . urlencode($channelID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Adunits for a specific Custom Channel	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $channelID   ID of channel to list units from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannelUnits($accountID, $adclientID, $channelID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels/' . urlencode($channelID) . '/adunits?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to generate a report from Google AdSense	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUrlChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/urlchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Channel URLs	 *	 * @param   string  $accountID  ID of account	 * @param   mixed   $start      Start day	 * @param   mixed   $end        End day	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function generateReport($accountID, $start, $end = false, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			if (is_int($start))			{				$startobj = new DateTime;				$startobj->setTimestamp($start);			}			elseif (is_string($start))			{				$startobj = new DateTime($start);			}			elseif (is_a($start, 'DateTime'))			{				$startobj = $start;			}			else			{				throw new InvalidArgumentException('Invalid start time.');			}			if (!$end)			{				$endobj = new DateTime;			}			elseif (is_int($end))			{				$endobj = new DateTime;				$endobj->setTimestamp($end);			}			elseif (is_string($end))			{				$endobj = new DateTime($end);			}			elseif (is_a($end, 'DateTime'))			{				$endobj = $end;			}			else			{				throw new InvalidArgumentException('Invalid end time.');			}			$options['startDate'] = $startobj->format('Y-m-d');			$options['endDate'] = $endobj->format('Y-m-d');			$begin = array_key_exists('startIndex', $options) ? $options['startIndex'] : 0;			unset($options['startIndex']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/reports?' . http_build_query($options);			if (strpos($url, '&'))			{				$url .= '&';			}			$i = 0;			$data['rows'] = array();			do			{				$jdata = $this->query($url . 'startIndex=' . count($data['rows']));				$newdata = json_decode($jdata->body, true);				if ($newdata && array_key_exists('rows', $newdata))				{					$newdata['rows'] = array_merge($data['rows'], $newdata['rows']);					$data = $newdata;				}				else				{					throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");				}				$i++;			}			while (count($data['rows']) < $data['totalMatchedRows'] && $i < $maxpages);			return $data;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Statistics model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelStatistics extends JModelLegacy{	/**	 * Method to get the component statistics	 *	 * @return  object  The component statistics	 *	 * @since   2.5	 */	public function getData()	{		// Initialise		$db = $this->getDbo();		$query = $db->getQuery(true);		$data = new JObject;		$query->select('COUNT(term_id)')			->from($db->quoteName('#__finder_terms'));		$db->setQuery($query);		$data->term_count = $db->loadResult();		$query->clear()			->select('COUNT(link_id)')			->from($db->quoteName('#__finder_links'));		$db->setQuery($query);		$data->link_count = $db->loadResult();		$query->clear()			->select('COUNT(id)')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' = 1');		$db->setQuery($query);		$data->taxonomy_branch_count = $db->loadResult();		$query->clear()			->select('COUNT(id)')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' > 1');		$db->setQuery($query);		$data->taxonomy_node_count = $db->loadResult();		$query->clear()			->select('t.title AS type_title, COUNT(a.link_id) AS link_count')			->from($db->quoteName('#__finder_links') . ' AS a')			->join('INNER', $db->quoteName('#__finder_types') . ' AS t ON t.id = a.type_id')			->group('a.type_id, t.title')			->order($db->quoteName('type_title'), 'ASC');		$db->setQuery($query);		$data->type_list = $db->loadObjectList();		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');/** * File Media Controller * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.6 */class MediaControllerFile extends JControllerLegacy{	/**	 * Upload a file	 *	 * @return  void	 *	 * @since   1.5	 */	function upload()	{		$params = JComponentHelper::getParams('com_media');		// Check for request forgeries		if (!JSession::checkToken('request'))		{			$response = array(				'status' => '0',				'error' => JText::_('JINVALID_TOKEN')			);			echo json_encode($response);			return;		}		// Get the user		$user  = JFactory::getUser();		JLog::addLogger(array('text_file' => 'upload.error.php'), JLog::ALL, array('upload'));		// Get some data from the request		$file   = $this->input->files->get('Filedata', '', 'array');		$folder = $this->input->get('folder', '', 'path');		if (			$_SERVER['CONTENT_LENGTH']>($params->get('upload_maxsize', 0) * 1024 * 1024) ||			$_SERVER['CONTENT_LENGTH']>(int)(ini_get('upload_max_filesize'))* 1024 * 1024 ||			$_SERVER['CONTENT_LENGTH']>(int)(ini_get('post_max_size'))* 1024 * 1024 ||			$_SERVER['CONTENT_LENGTH']>(int)(ini_get('memory_limit'))* 1024 * 1024		)		{			$response = array(					'status' => '0',					'error' => JText::_('COM_MEDIA_ERROR_WARNFILETOOLARGE')			);			echo json_encode($response);			return;		}		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		// Make the filename safe		$file['name'] = JFile::makeSafe($file['name']);		if (isset($file['name']))		{			// The request is valid			$err = null;			$filepath = JPath::clean(COM_MEDIA_BASE . '/' . $folder . '/' . strtolower($file['name']));			if (!MediaHelper::canUpload($file, $err))			{				JLog::add('Invalid: ' . $filepath . ': ' . $err, JLog::INFO, 'upload');				$response = array(					'status' => '0',					'error' => JText::_($err)				);				echo json_encode($response);				return;			}			// Trigger the onContentBeforeSave event.			JPluginHelper::importPlugin('content');			$dispatcher	= JEventDispatcher::getInstance();			$object_file = new JObject($file);			$object_file->filepath = $filepath;			$result = $dispatcher->trigger('onContentBeforeSave', array('com_media.file', &$object_file));			if (in_array(false, $result, true))			{				// There are some errors in the plugins				JLog::add('Errors before save: ' . $object_file->filepath . ' : ' . implode(', ', $object_file->getErrors()), JLog::INFO, 'upload');				$response = array(					'status' => '0',					'error' => JText::plural('COM_MEDIA_ERROR_BEFORE_SAVE', count($errors = $object_file->getErrors()), implode('<br />', $errors))				);				echo json_encode($response);				return;			}			if (JFile::exists($object_file->filepath))			{				// File exists				JLog::add('File exists: ' . $object_file->filepath . ' by user_id ' . $user->id, JLog::INFO, 'upload');				$response = array(					'status' => '0',					'error' => JText::_('COM_MEDIA_ERROR_FILE_EXISTS')				);				echo json_encode($response);				return;			}			elseif (!$user->authorise('core.create', 'com_media'))			{				// File does not exist and user is not authorised to create				JLog::add('Create not permitted: ' . $object_file->filepath . ' by user_id ' . $user->id, JLog::INFO, 'upload');				$response = array(					'status' => '0',					'error' => JText::_('COM_MEDIA_ERROR_CREATE_NOT_PERMITTED')				);				echo json_encode($response);				return;			}			if (!JFile::upload($object_file->tmp_name, $object_file->filepath))			{				// Error in upload				JLog::add('Error on upload: ' . $object_file->filepath, JLog::INFO, 'upload');				$response = array(					'status' => '0',					'error' => JText::_('COM_MEDIA_ERROR_UNABLE_TO_UPLOAD_FILE')				);				echo json_encode($response);				return;			}			else			{				// Trigger the onContentAfterSave event.				$dispatcher->trigger('onContentAfterSave', array('com_media.file', &$object_file, true));				JLog::add($folder, JLog::INFO, 'upload');				$response = array(					'status' => '1',					'error' => JText::sprintf('COM_MEDIA_UPLOAD_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE)))				);				echo json_encode($response);				return;			}		}		else		{			$response = array(				'status' => '0',				'error' => JText::_('COM_MEDIA_ERROR_BAD_REQUEST')			);			echo json_encode($response);			return;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Remind model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersModelRemind extends JModelForm{	/**	 * Method to get the username remind request form.	 *	 * @param   array      $data        An optional array of data for the form to interogate.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.remind', 'remind', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object    A form object.	 * @param   mixed     The data expected for the form.	 * @throws    Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, 'user');	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$app = JFactory::getApplication();		$params = $app->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * @since   1.6	 */	public function processRemindRequest($data)	{		// Get the form.		$form = $this->getForm();		// Check for an error.		if (empty($form))		{			return false;		}		// Validate the data.		$data = $this->validate($form, $data);		// Check for an error.		if ($data instanceof Exception)		{			return $return;		}		// Check the validation results.		if ($data === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $formError)			{				$this->setError($formError->getMessage());			}			return false;		}		// Find the user id for the given email address.		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('*')			->from($db->quoteName('#__users'))			->where($db->quoteName('email') . ' = ' . $db->quote($data['email']));		// Get the user id.		$db->setQuery($query);		try		{			$user = $db->loadObject();		}		catch (RuntimeException $e)		{			$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);			return false;		}		// Check for a user.		if (empty($user))		{			$this->setError(JText::_('COM_USERS_USER_NOT_FOUND'));			return false;		}		// Make sure the user isn't blocked.		if ($user->block)		{			$this->setError(JText::_('COM_USERS_USER_BLOCKED'));			return false;		}		$config = JFactory::getConfig();		// Assemble the login link.		$itemid = UsersHelperRoute::getLoginRoute();		$itemid = $itemid !== null ? '&Itemid=' . $itemid : '';		$link = 'index.php?option=com_users&view=login' . $itemid;		$mode = $config->get('force_ssl', 0) == 2 ? 1 : -1;		// Put together the email template data.		$data = JArrayHelper::fromObject($user);		$data['fromname'] = $config->get('fromname');		$data['mailfrom'] = $config->get('mailfrom');		$data['sitename'] = $config->get('sitename');		$data['link_text'] = JRoute::_($link, false, $mode);		$data['link_html'] = JRoute::_($link, true, $mode);		$subject = JText::sprintf(			'COM_USERS_EMAIL_USERNAME_REMINDER_SUBJECT',			$data['sitename']		);		$body = JText::sprintf(			'COM_USERS_EMAIL_USERNAME_REMINDER_BODY',			$data['sitename'],			$data['username'],			$data['link_text']		);		// Send the password reset request email.		$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $user->email, $subject, $body);		// Check for an error.		if ($return !== true)		{			$this->setError(JText::_('COM_USERS_MAIL_FAILED'), 500);			return false;		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Database session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @since       11.1 */class JSessionStorageDatabase extends JSessionStorage{	/**	 * Read the data for a particular session identifier from the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		try		{			// Get the session data from the database table.			$query = $db->getQuery(true)				->select($db->quoteName('data'))			->from($db->quoteName('#__session'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($id));			$db->setQuery($query);			$result = (string) $db->loadResult();			$result = str_replace('\0\0\0', chr(0) . '*' . chr(0), $result);			return $result;		}		catch (Exception $e)		{			return false;		}	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id    The session identifier.	 * @param   string  $data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $data)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		$data = str_replace(chr(0) . '*' . chr(0), '\0\0\0', $data);		try		{			$query = $db->getQuery(true)				->update($db->quoteName('#__session'))			->set($db->quoteName('data') . ' = ' . $db->quote($data))			->set($db->quoteName('time') . ' = ' . $db->quote((int) time()))			->where($db->quoteName('session_id') . ' = ' . $db->quote($id));			// Try to update the session data in the database table.			$db->setQuery($query);			if (!$db->execute())			{				return false;			}			/* Since $db->execute did not throw an exception, so the query was successful.			Either the data changed, or the data was identical.			In either case we are done.			*/			return true;		}		catch (Exception $e)		{			return false;		}	}	/**	 * Destroy the data for a particular session identifier in the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		try		{			$query = $db->getQuery(true)				->delete($db->quoteName('#__session'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($id));			// Remove a session from the database.			$db->setQuery($query);			return (boolean) $db->execute();		}		catch (Exception $e)		{			return false;		}	}	/**	 * Garbage collect stale sessions from the SessionHandler backend.	 *	 * @param   integer  $lifetime  The maximum age of a session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc($lifetime = 1440)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		// Determine the timestamp threshold with which to purge old sessions.		$past = time() - $lifetime;		try		{			$query = $db->getQuery(true)				->delete($db->quoteName('#__session'))			->where($db->quoteName('time') . ' < ' . $db->quote((int) $past));			// Remove expired sessions from the database.			$db->setQuery($query);			return (boolean) $db->execute();		}		catch (Exception $e)		{			return false;		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Authentication.joomla * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla Authentication plugin * * @package     Joomla.Plugin * @subpackage  Authentication.joomla * @since       1.5 */class PlgAuthenticationJoomla extends JPlugin{	/**	 * This method should handle any authentication and report back to the subject	 *	 * @access	public	 * @param   array  Array holding the user credentials	 * @param   array  Array of extra options	 * @param   object	Authentication response object	 * @return  boolean	 * @since 1.5	 */	public function onUserAuthenticate($credentials, $options, &$response)	{		$response->type = 'Joomla';		// Joomla does not like blank passwords		if (empty($credentials['password']))		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_EMPTY_PASS_NOT_ALLOWED');			return false;		}		// Get a database object		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('id, password')			->from('#__users')			->where('username=' . $db->quote($credentials['username']));		$db->setQuery($query);		$result = $db->loadObject();		if ($result)		{			$parts	= explode(':', $result->password);			$crypt	= $parts[0];			$salt	= @$parts[1];			$testcrypt = JUserHelper::getCryptedPassword($credentials['password'], $salt);			if ($crypt == $testcrypt)			{				$user = JUser::getInstance($result->id); // Bring this in line with the rest of the system				$response->email = $user->email;				$response->fullname = $user->name;				if (JFactory::getApplication()->isAdmin())				{					$response->language = $user->getParam('admin_language');				}				else {					$response->language = $user->getParam('language');				}				$response->status = JAuthentication::STATUS_SUCCESS;				$response->error_message = '';			} else {				$response->status = JAuthentication::STATUS_FAILURE;				$response->error_message = JText::_('JGLOBAL_AUTH_INVALID_PASS');			}		}		else		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_NO_USER');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_users');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_users&view=levels');?>" method="post" id="adminForm" name="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_TITLE_LEVELS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_RESET'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LEVEL_NAME', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'levels.saveorder'); ?>					<?php endif; ?>				</th>				<th class="nowrap id-col">					<?php echo JText::_('JGRID_HEADING_ID'); ?>				</th>				<th class="width-40">					&#160;				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering  = ($listOrder == 'a.ordering');			$canCreate = $user->authorise('core.create',     'com_users');			$canEdit   = $user->authorise('core.edit',       'com_users');			$canChange = $user->authorise('core.edit.state', 'com_users');			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_users&task=level.edit&id='.$item->id);?>">						<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'levels.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'levels.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>				<td>					&#160;				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Content.loadmodule * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plug-in to enable loading modules into content (e.g. articles) * This uses the {loadmodule} syntax * * @package     Joomla.Plugin * @subpackage  Content.loadmodule * @since       1.5 */class PlgContentLoadmodule extends JPlugin{	protected static $modules = array();	protected static $mods = array();	/**	 * Plugin that loads module positions within content	 *	 * @param   string	The context of the content being passed to the plugin.	 * @param   object	The article object.  Note $article->text is also available	 * @param   object	The article params	 * @param   integer  The 'page' number	 */	public function onContentPrepare($context, &$article, &$params, $page = 0)	{		// Don't run this plugin when the content is being indexed		if ($context == 'com_finder.indexer')		{			return true;		}		// simple performance check to determine whether bot should process further		if (strpos($article->text, 'loadposition') === false && strpos($article->text, 'loadmodule') === false)		{			return true;		}		// expression to search for (positions)		$regex		= '/{loadposition\s+(.*?)}/i';		$style		= $this->params->def('style', 'none');		// expression to search for(modules)		$regexmod	= '/{loadmodule\s+(.*?)}/i';		$stylemod	= $this->params->def('style', 'none');		// Find all instances of plugin and put in $matches for loadposition		// $matches[0] is full pattern match, $matches[1] is the position		preg_match_all($regex, $article->text, $matches, PREG_SET_ORDER);		// No matches, skip this		if ($matches)		{			foreach ($matches as $match) {			$matcheslist = explode(',', $match[1]);			// We may not have a module style so fall back to the plugin default.			if (!array_key_exists(1, $matcheslist))			{				$matcheslist[1] = $style;			}			$position = trim($matcheslist[0]);			$style    = trim($matcheslist[1]);				$output = $this->_load($position, $style);				// We should replace only first occurrence in order to allow positions with the same name to regenerate their content:				$article->text = preg_replace("|$match[0]|", addcslashes($output, '\\$'), $article->text, 1);			}		}		// Find all instances of plugin and put in $matchesmod for loadmodule		preg_match_all($regexmod, $article->text, $matchesmod, PREG_SET_ORDER);		// If no matches, skip this		if ($matchesmod){			foreach ($matchesmod as $matchmod) {				$matchesmodlist = explode(',', $matchmod[1]);				//We may not have a specific module so set to null				if (!array_key_exists(1, $matchesmodlist))				{					$matchesmodlist[1] = null;				}				// We may not have a module style so fall back to the plugin default.				if (!array_key_exists(2, $matchesmodlist))				{					$matchesmodlist[2] = $stylemod;				}				$module = trim($matchesmodlist[0]);				$name   = trim($matchesmodlist[1]);				$style  = trim($matchesmodlist[2]);				// $match[0] is full pattern match, $match[1] is the module,$match[2] is the title				$output = $this->_loadmod($module, $name, $style);				// We should replace only first occurrence in order to allow positions with the same name to regenerate their content:				$article->text = preg_replace("|$matchmod[0]|", addcslashes($output, '\\$'), $article->text, 1);			}		}	}	protected function _load($position, $style = 'none')	{		if (!isset(self::$modules[$position]))		{			self::$modules[$position] = '';			$document	= JFactory::getDocument();			$renderer	= $document->loadRenderer('module');			$modules	= JModuleHelper::getModules($position);			$params		= array('style' => $style);			ob_start();			foreach ($modules as $module)			{				echo $renderer->render($module, $params);			}			self::$modules[$position] = ob_get_clean();		}		return self::$modules[$position];	}	// This is always going to get the first instance of the module type unless	// there is a title.	protected function _loadmod($module, $title, $style = 'none')	{		if (!isset(self::$mods[$module]))		{			self::$mods[$module] = '';			$document	= JFactory::getDocument();			$renderer	= $document->loadRenderer('module');			$mod		= JModuleHelper::getModule($module, $title);			// If the module without the mod_ isn't found, try it with mod_.			// This allows people to enter it either way in the content			if (!isset($mod)){				$name = 'mod_'.$module;				$mod  = JModuleHelper::getModule($name, $title);			}			$params = array('style' => $style);			ob_start();			echo $renderer->render($mod, $params);			self::$mods[$module] = ob_get_clean();		}		return self::$mods[$module];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink Table class * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksTableWeblink extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__weblinks', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_weblinks.weblink';	}	/**	 * Overloaded bind function to pre-process the params.	 *	 * @param   array  Named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see     JTable:bind	 * @since   1.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overload the store method for the Weblinks table.	 *	 * @param   boolean	Toggle whether null values should be updated.	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified		= $date->toSql();			$this->modified_by	= $user->get('id');		}		else		{			// New weblink. A weblink created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Set publish_up to null date if not set		if (!$this->publish_up)		{			$this->publish_up = $this->_db->getNullDate();		}		// Set publish_down to null date if not set		if (!$this->publish_down)		{			$this->publish_down = $this->_db->getNullDate();		}		// Verify that the alias is unique		$table = JTable::getInstance('Weblink', 'WeblinksTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_WEBLINKS_ERROR_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 */	public function check()	{		if (JFilterInput::checkAttribute(array ('href', $this->url)))		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_PROVIDE_URL'));			return false;		}		// check for valid name		if (trim($this->title) == '')		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_TITLE'));			return false;		}		// check for existing name		$query = 'SELECT id FROM #__weblinks WHERE title = '.$this->_db->quote($this->title).' AND catid = '.(int) $this->catid;		$this->_db->setQuery($query);		$xid = (int) $this->_db->loadResult();		if ($xid && $xid != (int) $this->id)		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_NAME'));			return false;		}		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		// clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// only process if not empty			$bad_characters = array("\n", "\r", "\"", "<", ">"); // array of characters to remove			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey); // remove bad characters			$keys = explode(',', $after_clean); // create array using commas as delimiter			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key)) {  // ignore blank keywords					$clean_keys[] = trim($key);				}			}			$this->metakey = implode(", ", $clean_keys); // put array back together delimited by ", "		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.0.4	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.'='.implode(' OR '.$k.'=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = '.(int) $userId.')';		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl) .			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')' .			$checkin		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of contacts. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactViewContacts extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		ContactHelper::addSubmenu('contacts');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Preprocess the list of items to find ordering divisions.		// TODO: Complete the ordering stuff with nested sets		foreach ($this->items as &$item)		{			$item->order_up = true;			$item->order_dn = true;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/contact.php';		$canDo	= ContactHelper::getActions($this->state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_CONTACT_MANAGER_CONTACTS'), 'contact.png');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories('com_contact', 'core.create'))) > 0)		{			JToolbarHelper::addNew('contact.add');		}		if (($canDo->get('core.edit')) || ($canDo->get('core.edit.own')))		{			JToolbarHelper::editList('contact.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('contacts.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('contacts.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('contacts.archive');			JToolbarHelper::checkin('contacts.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'contacts.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('contacts.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_contact');		}		JToolbarHelper::help('JHELP_COMPONENTS_CONTACTS_CONTACTS');		JHtmlSidebar::setAction('index.php?option=com_contact');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.name' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'ul.name' => JText::_('COM_CONTACT_FIELD_LINKED_USER_LABEL'),			'a.featured' => JText::_('JFEATURED'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_NEWSFEEDS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_NEWSFEEDS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_newsfeeds');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('newsfeed.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */abstract class JFeedParser{	/**	 * @var    string  The feed element name for the entry elements.	 * @since  12.3	 */	protected $entryElementName = 'entry';	/**	 * @var    array	 * @since  12.3	 */	protected $namespaces = array();	/**	 * @var    XMLReader	 * @since  12.3	 */	protected $stream;	/**	 * Constructor.	 *	 * @param   XMLReader  $stream  The XMLReader stream object for the feed.	 *	 * @since   12.3	 */	public function __construct(XMLReader $stream)	{		$this->stream  = $stream;	}	/**	 * Method to parse the feed into a JFeed object.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function parse()	{		$feed = new JFeed;		// Detect the feed version.		$this->initialise();		// Let's get this party started...		do		{			// Expand the element for processing.			$el = new SimpleXMLElement($this->stream->readOuterXml());			// Get the list of namespaces used within this element.			$ns = $el->getNamespaces(true);			// Get an array of available namespace objects for the element.			$namespaces = array();			foreach ($ns as $prefix => $uri)			{				// Ignore the empty namespace prefix.				if (empty($prefix))				{					continue;				}				// Get the necessary namespace objects for the element.				$namespace = $this->fetchNamespace($prefix);				if ($namespace)				{					$namespaces[] = $namespace;				}			}			// Process the element.			$this->processElement($feed, $el, $namespaces);			// Skip over this element's children since it has been processed.			$this->moveToClosingElement();		}		while ($this->moveToNextElement());		return $feed;	}	/**	 * Method to register a namespace handler object.	 *	 * @param   string                $prefix     The XML namespace prefix for which to register the namespace object.	 * @param   JFeedParserNamespace  $namespace  The namespace object to register.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function registerNamespace($prefix, JFeedParserNamespace $namespace)	{		$this->namespaces[$prefix] = $namespace;		return $this;	}	/**	 * Method to initialise the feed for parsing.  If child parsers need to detect versions or other	 * such things this is where you'll want to implement that logic.	 *	 * @return  void	 *	 * @since   12.3	 */	abstract protected function initialise();	/**	 * Method to parse a specific feed element.	 *	 * @param   JFeed             $feed        The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el          The current XML element object to handle.	 * @param   array             $namespaces  The array of relevant namespace objects to process for the element.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processElement(JFeed $feed, SimpleXMLElement $el, array $namespaces)	{		// Build the internal method name.		$method = 'handle' . ucfirst($el->getName());		// If we are dealing with an item then it is feed entry time.		if ($el->getName() == $this->entryElementName)		{			// Create a new feed entry for the item.			$entry = new JFeedEntry;			// First call the internal method.			$this->processFeedEntry($entry, $el);			foreach ($namespaces as $namespace)			{				if ($namespace instanceof JFeedParserNamespace)				{					$namespace->processElementForFeedEntry($entry, $el);				}			}			// Add the new entry to the feed.			$feed->addEntry($entry);		}		// Otherwise we treat it like any other element.		else		{			// First call the internal method.			if (is_callable(array($this, $method)))			{				$this->$method($feed, $el);			}			foreach ($namespaces as $namespace)			{				if ($namespace instanceof JFeedParserNamespace)				{					$namespace->processElementForFeed($feed, $el);				}			}		}	}	/**	 * Method to get a namespace object for a given namespace prefix.	 *	 * @param   string  $prefix  The XML prefix for which to fetch the namespace object.	 *	 * @return  mixed  JFeedParserNamespace or false if none exists.	 *	 * @since   12.3	 */	protected function fetchNamespace($prefix)	{		if (isset($this->namespaces[$prefix]))		{			return $this->namespaces[$prefix];		}		$className = get_class($this) . ucfirst($prefix);		if (class_exists($className))		{			$this->namespaces[$prefix] = new $className;			return $this->namespaces[$prefix];		}		return false;	}	/**	 * Method to move the stream parser to the next XML element node.	 *	 * @param   string  $name  The name of the element for which to move the stream forward until is found.	 *	 * @return  boolean  True if the stream parser is on an XML element node.	 *	 * @since   12.3	 */	protected function moveToNextElement($name = null)	{		// Only keep looking until the end of the stream.		while ($this->stream->read())		{			// As soon as we get to the next ELEMENT node we are done.			if ($this->stream->nodeType == XMLReader::ELEMENT)			{				// If we are looking for a specific name make sure we have it.				if (isset($name) && ($this->stream->name != $name))				{					continue;				}				return true;			}		}		return false;	}	/**	 * Method to move the stream parser to the closing XML node of the current element.	 *	 * @return  void	 *	 * @since   12.3	 * @throws  RuntimeException  If the closing tag cannot be found.	 */	protected function moveToClosingElement()	{		// If we are on a self-closing tag then there is nothing to do.		if ($this->stream->isEmptyElement)		{			return;		}		// Get the name and depth for the current node so that we can match the closing node.		$name  = $this->stream->name;		$depth = $this->stream->depth;		// Only keep looking until the end of the stream.		while ($this->stream->read())		{			// If we have an END_ELEMENT node with the same name and depth as the node we started with we have a bingo. :-)			if (($this->stream->name == $name) && ($this->stream->depth == $depth) && ($this->stream->nodeType == XMLReader::END_ELEMENT))			{				return;			}		}		throw new RuntimeException('Unable to find the closing XML node.');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_newsfeeds.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_newsfeeds&task=newsfeeds.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="5%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES_HEADING', 'numarticles', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_CACHE_TIME_HEADING', 'a.cache_time', $listDirn, $listOrder); ?>					</th>					<?php if ($assoc) : ?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="11">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'a.ordering');				$canCreate  = $user->authorise('core.create',     'com_newsfeeds.category.' . $item->catid);				$canEdit    = $user->authorise('core.edit',       'com_newsfeeds.category.' . $item->catid);				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_newsfeeds.category.' . $item->catid) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order" />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'newsfeeds.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'newsfeeds.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_newsfeeds&task=newsfeed.edit&id='.(int) $item->id); ?>">									<?php echo $this->escape($item->name); ?></a>							<?php else : ?>									<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<span class="small">								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							</span>							<div class="small">								<?php echo $this->escape($item->category_title); ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'newsfeed.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'newsfeeds.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'newsfeeds.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'newsfeeds.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'newsfeeds.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');								?>						</div>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->numarticles; ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->cache_time; ?>					</td>					<?php if ($assoc) : ?>					<td class="hidden-phone">						<?php if ($item->association) : ?>							<?php echo JHtml::_('newsfeed.association', $item->id); ?>						<?php endif; ?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Mediawiki * @since       12.3 */abstract class JMediawikiObject{	/**	 * @var    JRegistry  Options for the MediaWiki object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JMediawikiHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $client;	/**     * Constructor.     *     * @param   JRegistry       $options  Mediawiki options object.     * @param   JMediawikiHttp  $client   The HTTP client object.     *     * @since   12.3     */	public function __construct(JRegistry $options = null, JMediawikiHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JMediawikiHttp($this->options);	}	/**     * Method to build and return a full request URL for the request.     *     * @param   string  $path  URL to inflect     *     * @return  string   The request URL.     *     * @since   12.3     */	protected function fetchUrl($path)	{		// Append the path with output format		$path .= '&format=xml';		$uri = new JUri($this->options->get('api.url') . '/api.php' . $path);		if ($this->options->get('api.username', false))		{			$uri->setUser($this->options->get('api.username'));		}		if ($this->options->get('api.password', false))		{			$uri->setPass($this->options->get('api.password'));		}		return (string) $uri;	}	/**     * Method to build request parameters from a string array.     *     * @param   array  $params  string array that contains the parameters     *     * @return  string   request parameter     *     * @since   12.3     */	public function buildParameter(array $params)	{		$path = '';		foreach ($params as $param)		{			$path .= $param;			if (next($params) == true)			{				$path .= '|';			}		}		return $path;	}	/**     * Method to validate response for errors     *     * @param   JHttpresponse  $response  reponse from the mediawiki server     *     * @return  Object     *     * @since   12.3     */	public function validateResponse($response)	{		$xml = simplexml_load_string($response->body);		if (isset($xml->warnings))		{			throw new DomainException($xml->warnings->info);		}		if (isset($xml->error))		{			throw new DomainException($xml->error['info']);		}		return $xml;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'contact.cancel' || document.formvalidator.isValid(document.id('contact-form')))		{			<?php echo $this->form->getField('misc')->save(); ?>			Joomla.submitform(task, document.getElementById('contact-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_contact&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="contact-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo empty($this->item->id) ? JText::_('COM_CONTACT_NEW_CONTACT') : JText::sprintf('COM_CONTACT_EDIT_CONTACT', $this->item->id); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('name'); ?>				<?php echo $this->form->getInput('name'); ?></li>				<li><?php echo $this->form->getLabel('alias'); ?>				<?php echo $this->form->getInput('alias'); ?></li>				<li><?php echo $this->form->getLabel('user_id'); ?>				<?php echo $this->form->getInput('user_id'); ?></li>				<li><?php echo $this->form->getLabel('catid'); ?>				<?php echo $this->form->getInput('catid'); ?></li>				<li><?php echo $this->form->getLabel('published'); ?>				<?php echo $this->form->getInput('published'); ?></li>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<li><?php echo $this->form->getLabel('ordering'); ?>				<?php echo $this->form->getInput('ordering'); ?></li>				<li><?php echo $this->form->getLabel('featured'); ?>				<?php echo $this->form->getInput('featured'); ?></li>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<!-- Tag field -->				<?php foreach ($this->get('form')->getFieldset('jmetadata') as $field) : ?>					<?php if ($field->name == 'jform[metadata][tags][]') :?>						<li>							<?php echo $field->label; ?>							<?php echo $field->input; ?>						</li>					<?php endif; ?>				<?php endforeach; ?>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>			</ul>			<div class="clr"></div>			<?php echo $this->form->getLabel('misc'); ?>			<div class="clr"></div>			<?php echo $this->form->getInput('misc'); ?>		</fieldset>	</div>    <div class="col options-section">		<?php echo  JHtml::_('sliders.start', 'contact-slider'); ?>			<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_PUBLISHING'), 'publishing-details'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_PUBLISHING'); ?></legend>				<ul class="adminformlist">					<li><?php echo $this->form->getLabel('created_by'); ?>					<?php echo $this->form->getInput('created_by'); ?></li>					<li><?php echo $this->form->getLabel('created_by_alias'); ?>					<?php echo $this->form->getInput('created_by_alias'); ?></li>					<li><?php echo $this->form->getLabel('created'); ?>					<?php echo $this->form->getInput('created'); ?></li>					<li><?php echo $this->form->getLabel('publish_up'); ?>					<?php echo $this->form->getInput('publish_up'); ?></li>					<li><?php echo $this->form->getLabel('publish_down'); ?>					<?php echo $this->form->getInput('publish_down'); ?></li>					<?php if ($this->item->modified_by) : ?>						<li><?php echo $this->form->getLabel('modified_by'); ?>						<?php echo $this->form->getInput('modified_by'); ?></li>						<li><?php echo $this->form->getLabel('modified'); ?>						<?php echo $this->form->getInput('modified'); ?></li>					<?php endif; ?>				</ul>			</fieldset>			<?php echo JHtml::_('sliders.panel', JText::_('COM_CONTACT_CONTACT_DETAILS'), 'basic-options'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('COM_CONTACT_CONTACT_DETAILS'); ?></legend>				<p><?php echo empty($this->item->id) ? JText::_('COM_CONTACT_DETAILS') : JText::sprintf('COM_CONTACT_EDIT_DETAILS', $this->item->id); ?></p>				<ul class="adminformlist">					<li><?php echo $this->form->getLabel('image'); ?>					<?php echo $this->form->getInput('image'); ?></li>					<li><?php echo $this->form->getLabel('con_position'); ?>					<?php echo $this->form->getInput('con_position'); ?></li>					<li><?php echo $this->form->getLabel('email_to'); ?>					<?php echo $this->form->getInput('email_to'); ?></li>					<li><?php echo $this->form->getLabel('address'); ?>					<?php echo $this->form->getInput('address'); ?></li>					<li><?php echo $this->form->getLabel('suburb'); ?>					<?php echo $this->form->getInput('suburb'); ?></li>					<li><?php echo $this->form->getLabel('state'); ?>					<?php echo $this->form->getInput('state'); ?></li>					<li><?php echo $this->form->getLabel('postcode'); ?>					<?php echo $this->form->getInput('postcode'); ?></li>					<li><?php echo $this->form->getLabel('country'); ?>					<?php echo $this->form->getInput('country'); ?></li>					<li><?php echo $this->form->getLabel('telephone'); ?>					<?php echo $this->form->getInput('telephone'); ?></li>					<li><?php echo $this->form->getLabel('mobile'); ?>					<?php echo $this->form->getInput('mobile'); ?></li>					<li><?php echo $this->form->getLabel('fax'); ?>					<?php echo $this->form->getInput('fax'); ?></li>					<li><?php echo $this->form->getLabel('webpage'); ?>					<?php echo $this->form->getInput('webpage'); ?></li>					<li><?php echo $this->form->getLabel('sortname1'); ?>					<?php echo $this->form->getInput('sortname1'); ?></li>					<li><?php echo $this->form->getLabel('sortname2'); ?>					<?php echo $this->form->getInput('sortname2'); ?></li>					<li><?php echo $this->form->getLabel('sortname3'); ?>					<?php echo $this->form->getInput('sortname3'); ?></li>				</ul>			</fieldset>			<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'), 'meta-options'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'); ?></legend>				<?php echo $this->loadTemplate('metadata'); ?>			</fieldset>			<?php if ($assoc) : ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php endif; ?>		<?php echo JHtml::_('sliders.end'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Item View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewMenu extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form	 = $this->get('Form');		$this->item	 = $this->get('Item');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$input = JFactory::getApplication()->input;		$input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = MenusHelper::getActions($this->state->get('filter.parent_id'));		JToolbarHelper::title(JText::_($isNew ? 'COM_MENUS_VIEW_NEW_MENU_TITLE' : 'COM_MENUS_VIEW_EDIT_MENU_TITLE'), 'menu.png');		// If a new item, can save the item.  Allow users with edit permissions to apply changes to prevent returning to grid.		if ($isNew && $canDo->get('core.create'))		{			if ($canDo->get('core.edit'))			{				JToolbarHelper::apply('menu.apply');			}			JToolbarHelper::save('menu.save');		}		// If user can edit, can save the item.		if (!$isNew && $canDo->get('core.edit'))		{			JToolbarHelper::apply('menu.apply');			JToolbarHelper::save('menu.save');		}		// If the user can create new items, allow them to see Save & New		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('menu.save2new');		}		if ($isNew)		{			JToolbarHelper::cancel('menu.cancel');		}		else		{			JToolbarHelper::cancel('menu.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_MENUS_MENU_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'message.cancel' || document.formvalidator.isValid(document.id('message-form')))		{			Joomla.submitform(task, document.getElementById('message-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_messages'); ?>" method="post" name="adminForm" id="message-form" class="form-validate form-horizontal">	<fieldset class="adminform">		<ul class="adminformlist">			<li><?php echo $this->form->getLabel('user_id_to'); ?>				<?php echo $this->form->getInput('user_id_to'); ?></li>			<li><?php echo $this->form->getLabel('subject'); ?>				<?php echo $this->form->getInput('subject'); ?></li>		</ul>	</fieldset>	<fieldset class="adminform">		<legend><?php echo $this->form->getLabel('message'); ?></legend>		<ul class="adminformlist">			<li><?php echo $this->form->getInput('message'); ?> </li>		</ul>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('text');/** * Form Field class for the Joomla Platform. * Supports a text field telephone numbers. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.tel.html * @see         JFormRuleTel for telephone number validation * @see         JHtmlTel for rendering of telephone numbers * @since       11.1 */class JFormFieldTel extends JFormFieldText{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Tel';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Index view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewIndex extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load plug-in language files.		FinderHelperLanguage::loadPluginLanguage();		$this->items		= $this->get('Items');		$this->total		= $this->get('Total');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->pluginState  = $this->get('pluginState');		FinderHelper::addSubmenu('index');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Configure the toolbar.		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Method to configure the toolbar for this view.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		$canDo	= FinderHelper::getActions();		JToolbarHelper::title(JText::_('COM_FINDER_INDEX_TOOLBAR_TITLE'), 'finder');		$toolbar = JToolbar::getInstance('toolbar');		$toolbar->appendButton('Popup', 'archive', 'COM_FINDER_INDEX', 'index.php?option=com_finder&view=indexer&tmpl=component', 500, 210, 0, 0, 'window.parent.location.reload()', 'COM_FINDER_HEADING_INDEXER');		JToolbarHelper::divider();		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publishList('index.publish');			JToolbarHelper::unpublishList('index.unpublish');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'index.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('index.purge', 'COM_FINDER_INDEX_TOOLBAR_PURGE', false);			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_finder');		}		JToolbarHelper::divider();		$toolbar->appendButton('Popup', 'stats', 'COM_FINDER_STATISTICS', 'index.php?option=com_finder&view=statistics&tmpl=component', 550, 350);		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_FINDER_MANAGE_INDEXED_CONTENT');		JHtmlSidebar::setAction('index.php?option=com_finder&view=index');		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'),			'filter_state',			JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'))		);		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_TYPE_FILTER'),			'filter_type',			JHtml::_('select.options', JHtml::_('finder.typeslist'), 'value', 'text', $this->state->get('filter.type'))		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class JFormFieldCategoryEdit extends JFormFieldList{	/**	 * A flexible category list that respects access controls	 *	 * @var        string	 * @since   1.6	 */	public $type = 'CategoryEdit';	/**	 * Method to get a list of categories that respects access controls and can be used for	 * either category assignment or parent category assignment in edit screens.	 * Use the parent element to indicate that the field will be used for assigning parent categories.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$published = $this->element['published'] ? $this->element['published'] : array(0, 1);		$name = (string) $this->element['name'];		// Let's get the id for the current item, either category or content item.		$jinput = JFactory::getApplication()->input;		// Load the category options for a given extension.		// For categories the old category is the category id or 0 for new category.		if ($this->element['parent'] || $jinput->get('option') == 'com_categories')		{			$oldCat = $jinput->get('id', 0);			$oldParent = $this->form->getValue($name, 0);			$extension = $this->element['extension'] ? (string) $this->element['extension'] : (string) $jinput->get('extension', 'com_content');		}		else			// For items the old category is the category they are in when opened or 0 if new.		{			$thisItem = $jinput->get('id', 0);			$oldCat = $this->form->getValue($name, 0);			$extension = $this->element['extension'] ? (string) $this->element['extension'] : (string) $jinput->get('option', 'com_content');		}		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level, a.published')			->from('#__categories AS a')			->join('LEFT', $db->quoteName('#__categories') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Filter by the extension type		if ($this->element['parent'] == true || $jinput->get('option') == 'com_categories')		{			$query->where('(a.extension = ' . $db->quote($extension) . ' OR a.parent_id = 0)');		}		else		{			$query->where('(a.extension = ' . $db->quote($extension) . ')');		}		// If parent isn't explicitly stated but we are in com_categories assume we want parents		if ($oldCat != 0 && ($this->element['parent'] == true || $jinput->get('option') == 'com_categories'))		{			// Prevent parenting to children of this item.			// To rearrange parents and children move the children up, not the parents down.			$query->join('LEFT', $db->quoteName('#__categories') . ' AS p ON p.id = ' . (int) $oldCat)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');			$rowQuery = $db->getQuery(true);			$rowQuery->select('a.id AS value, a.title AS text, a.level, a.parent_id')				->from('#__categories AS a')				->where('a.id = ' . (int) $oldCat);			$db->setQuery($rowQuery);			$row = $db->loadObject();		}		// Filter language		if (!empty($this->element['language']))		{			$query->where('a.language = ' . $db->quote($this->element['language']));		}		// Filter on the published state		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif (is_array($published))		{			JArrayHelper::toInteger($published);			$query->where('a.published IN (' . implode(',', $published) . ')');		}		$query->group('a.id, a.title, a.level, a.lft, a.rgt, a.extension, a.parent_id, a.published')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage);		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			// Translate ROOT			if ($this->element['parent'] == true || $jinput->get('option') == 'com_categories')			{				if ($options[$i]->level == 0)				{					$options[$i]->text = JText::_('JGLOBAL_ROOT_PARENT');				}			}			if ($options[$i]->published == 1)			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;			}			else			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . '[' . $options[$i]->text . ']';			}		}		// Get the current user object.		$user = JFactory::getUser();		// For new items we want a list of categories you are allowed to create in.		if ($oldCat == 0)		{			foreach ($options as $i => $option)			{				// To take save or create in a category you need to have create rights for that category				// unless the item is already in that category.				// Unset the option if the user isn't authorised for it. In this field assets are always categories.				if ($user->authorise('core.create', $extension . '.category.' . $option->value) != true)				{					unset($options[$i]);				}			}		}		// If you have an existing category id things are more complex.		else		{			// If you are only allowed to edit in this category but not edit.state, you should not get any			// option to change the category parent for a category or the category for a content item,			// but you should be able to save in that category.			foreach ($options as $i => $option)			{				if ($user->authorise('core.edit.state', $extension . '.category.' . $oldCat) != true && !isset($oldParent))				{					if ($option->value != $oldCat)					{						unset($options[$i]);					}				}				if ($user->authorise('core.edit.state', $extension . '.category.' . $oldCat) != true					&& (isset($oldParent))					&& $option->value != $oldParent				)				{					unset($options[$i]);				}				// However, if you can edit.state you can also move this to another category for which you have				// create permission and you should also still be able to save in the current category.				if (($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					&& ($option->value != $oldCat && !isset($oldParent))				)				{					{						unset($options[$i]);					}				}				if (($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					&& (isset($oldParent))					&& $option->value != $oldParent				)				{					{						unset($options[$i]);					}				}			}		}		if (($this->element['parent'] == true || $jinput->get('option') == 'com_categories')			&& (isset($row) && !isset($options[0]))			&& isset($this->element['show_root'])		)		{			if ($row->parent_id == '1')			{				$parent = new stdClass;				$parent->text = JText::_('JGLOBAL_ROOT_PARENT');				array_unshift($options, $parent);			}			array_unshift($options, JHtml::_('select.option', '0', JText::_('JGLOBAL_ROOT')));		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?><div class="row-fluid">	<div class="span2">		<div class="sidebar-nav">			<ul class="nav nav-list">				<li class="nav-header"><?php echo JText::_('COM_CPANEL_HEADER_SUBMENU'); ?></li>				<li class="active"><a href="<?php echo $this->baseurl; ?>"><?php echo JText::_('COM_CPANEL_LINK_DASHBOARD'); ?></a></li>				<li class="nav-header"><?php echo JText::_('COM_CPANEL_HEADER_SYSTEM'); ?></li>			<?php if ($user->authorise('core.admin')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_config"><?php echo JText::_('COM_CPANEL_LINK_GLOBAL_CONFIG'); ?></a></li>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_admin&view=sysinfo"><?php echo JText::_('COM_CPANEL_LINK_SYSINFO'); ?></a></li>			<?php endif;?>			<?php if ($user->authorise('core.manage', 'com_cache')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_cache"><?php echo JText::_('COM_CPANEL_LINK_CLEAR_CACHE'); ?></a></li>			<?php endif;?>			<?php if ($user->authorise('core.admin', 'com_checkin')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_checkin"><?php echo JText::_('COM_CPANEL_LINK_CHECKIN'); ?></a></li>			<?php endif;?>			<?php if ($user->authorise('core.manage', 'com_installer')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_installer"><?php echo JText::_('COM_CPANEL_LINK_EXTENSIONS'); ?></a></li>			<?php endif;?>			</ul>		</div>	</div>	<div class="span6">		<?php		foreach ($this->modules as $module)		{			$output = JModuleHelper::renderModule($module, array('style' => 'well'));			$params = new JRegistry;			$params->loadString($module->params);			echo $output;		}		?>	</div>	<div class="span4">		<?php		// Display the submenu position modules		$this->iconmodules = JModuleHelper::getModules('icon');		foreach ($this->iconmodules as $iconmodule)		{			$output = JModuleHelper::renderModule($iconmodule, array('style' => 'well'));			$params = new JRegistry;			$params->loadString($iconmodule->params);			echo $output;		}		?>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocumentJSON class, provides an easy interface to parse and display JSON output * * @package     Joomla.Platform * @subpackage  Document * @see         http://www.json.org/ * @since       11.1 */class JDocumentJSON extends JDocument{	/**	 * Document name	 *	 * @var    string	 * @since  11.1	 */	protected $_name = 'joomla';	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since  11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'application/json';		// Set document type		$this->_type = 'json';	}	/**	 * Render the document.	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since  11.1	 */	public function render($cache = false, $params = array())	{		JResponse::allowCache(false);		JResponse::setHeader('Content-disposition', 'attachment; filename="' . $this->getName() . '.json"', true);		parent::render();		return $this->getBuffer();	}	/**	 * Returns the document name	 *	 * @return  string	 *	 * @since  11.1	 */	public function getName()	{		return $this->_name;	}	/**	 * Sets the document name	 *	 * @param   string  $name  Document name	 *	 * @return  JDocumentJSON instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setName($name = 'joomla')	{		$this->_name = $name;		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Database connector class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 * @deprecated  13.1 */abstract class JDatabase{	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function query()	{		JLog::add('JDatabase::query() is deprecated, use JDatabaseDriver::execute() instead.', JLog::WARNING, 'deprecated');		return $this->execute();	}	/**	 * Get a list of available database connectors.  The list will only be populated with connectors that both	 * the class exists and the static test method returns true.  This gives us the ability to have a multitude	 * of connector classes that are self-aware as to whether or not they are able to be used on a given system.	 *	 * @return  array  An array of available database connectors.	 *	 * @since   11.1	 * @deprecated  13.1	 */	public static function getConnectors()	{		JLog::add('JDatabase::getConnectors() is deprecated, use JDatabaseDriver::getConnectors() instead.', JLog::WARNING, 'deprecated');		return JDatabaseDriver::getConnectors();	}	/**	 * Gets the error message from the database connection.	 *	 * @param   boolean  $escaped  True to escape the message string for use in JavaScript.	 *	 * @return  string  The error message for the most recent query.	 *	 * @deprecated  12.1	 * @since   11.1	 */	public function getErrorMsg($escaped = false)	{		JLog::add('JDatabase::getErrorMsg() is deprecated, use exception handling instead.', JLog::WARNING, 'deprecated');		if ($escaped)		{			return addslashes($this->errorMsg);		}		else		{			return $this->errorMsg;		}	}	/**	 * Gets the error number from the database connection.	 *	 * @return      integer  The error number for the most recent query.	 *	 * @since       11.1	 * @deprecated  12.1	 */	public function getErrorNum()	{		JLog::add('JDatabase::getErrorNum() is deprecated, use exception handling instead.', JLog::WARNING, 'deprecated');		return $this->errorNum;	}	/**	 * Method to return a JDatabaseDriver instance based on the given options.  There are three global options and then	 * the rest are specific to the database driver.  The 'driver' option defines which JDatabaseDriver class is	 * used for the connection -- the default is 'mysqli'.  The 'database' option determines which database is to	 * be used for the connection.  The 'select' option determines whether the connector should automatically select	 * the chosen database.	 *	 * Instances are unique to the given options and new objects are only created when a unique options array is	 * passed into the method.  This ensures that we don't end up with unnecessary database connection resources.	 *	 * @param   array  $options  Parameters to be passed to the database driver.	 *	 * @return  JDatabaseDriver  A database object.	 *	 * @since       11.1	 * @deprecated  13.1	 */	public static function getInstance($options = array())	{		JLog::add('JDatabase::getInstance() is deprecated, use JDatabaseDriver::getInstance() instead.', JLog::WARNING, 'deprecated');		return JDatabaseDriver::getInstance($options);	}	/**	 * Splits a string of multiple queries into an array of individual queries.	 *	 * @param   string  $query  Input SQL string with which to split into individual queries.	 *	 * @return  array  The queries from the input string separated into an array.	 *	 * @since   11.1	 * @deprecated  13.1	 */	public static function splitSql($query)	{		JLog::add('JDatabase::splitSql() is deprecated, use JDatabaseDriver::splitSql() instead.', JLog::WARNING, 'deprecated');		return JDatabaseDriver::splitSql($query);	}	/**	 * Return the most recent error message for the database connector.	 *	 * @param   boolean  $showSQL  True to display the SQL statement sent to the database as well as the error.	 *	 * @return  string  The error message for the most recent query.	 *	 * @since   11.1	 * @deprecated  12.1	 */	public function stderr($showSQL = false)	{		JLog::add('JDatabase::stderr() is deprecated.', JLog::WARNING, 'deprecated');		if ($this->errorNum != 0)		{			return JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $this->errorNum, $this->errorMsg)			. ($showSQL ? "<br />SQL = <pre>$this->sql</pre>" : '');		}		else		{			return JText::_('JLIB_DATABASE_FUNCTION_NOERROR');		}	}	/**	 * Test to see if the connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 * @deprecated  12.3 Use JDatabaseDriver::isSupported() instead.	 */	public static function test()	{		JLog::add('JDatabase::test() is deprecated. Use JDatabaseDriver::isSupported() instead.', JLog::WARNING, 'deprecated');		return static::isSupported();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewArchive extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	protected $pagination = null;	public function display($tpl = null)	{		$app = JFactory::getApplication();		$user		= JFactory::getUser();		$state 		= $this->get('State');		$items 		= $this->get('Items');		$pagination	= $this->get('Pagination');		$pathway	= $app->getPathway();		$document	= JFactory::getDocument();		// Get the page/component configuration		$params = &$state->params;		foreach ($items as $item)		{			$item->catslug = ($item->category_alias) ? ($item->catid . ':' . $item->category_alias) : $item->catid;			$item->parent_slug = ($item->parent_alias) ? ($item->parent_id . ':' . $item->parent_alias) : $item->parent_id;			// No link for ROOT category			if ($item->parent_alias == 'root')			{				$item->parent_slug = null;			}		}		$form = new stdClass;		// Month Field		$months = array(			'' => JText::_('COM_CONTENT_MONTH'),			'01' => JText::_('JANUARY_SHORT'),			'02' => JText::_('FEBRUARY_SHORT'),			'03' => JText::_('MARCH_SHORT'),			'04' => JText::_('APRIL_SHORT'),			'05' => JText::_('MAY_SHORT'),			'06' => JText::_('JUNE_SHORT'),			'07' => JText::_('JULY_SHORT'),			'08' => JText::_('AUGUST_SHORT'),			'09' => JText::_('SEPTEMBER_SHORT'),			'10' => JText::_('OCTOBER_SHORT'),			'11' => JText::_('NOVEMBER_SHORT'),			'12' => JText::_('DECEMBER_SHORT')		);		$form->monthField = JHtml::_(			'select.genericlist',			$months,			'month',			array(				'list.attr' => 'size="1" class="inputbox"',				'list.select' => $state->get('filter.month'),				'option.key' => null			)		);		// Year Field		$years = array();		$years[] = JHtml::_('select.option', null, JText::_('JYEAR'));		for ($i = 2000; $i <= 2020; $i++)		{			$years[] = JHtml::_('select.option', $i, $i);		}		$form->yearField = JHtml::_(			'select.genericlist',			$years,			'year',			array('list.attr' => 'size="1" class="inputbox"', 'list.select' => $state->get('filter.year'))		);		$form->limitField = $pagination->getLimitBox();		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->filter     = $state->get('list.filter');		$this->form       = &$form;		$this->items      = &$items;		$this->params     = &$params;		$this->user       = &$user;		$this->pagination = &$pagination;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'contact.cancel' || document.formvalidator.isValid(document.id('contact-form')))		{			<?php echo $this->form->getField('misc')->save(); ?>			Joomla.submitform(task, document.getElementById('contact-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_contact&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="contact-form" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin contact -->		<div class="span10 form-horizontal">		<fieldset>			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_CONTACT_NEW_CONTACT', true) : JText::sprintf('COM_CONTACT_EDIT_CONTACT', $this->item->id, true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('name'); ?></div>					<div class="controls"><?php echo $this->form->getInput('name'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('user_id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('user_id'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>					<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>					<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('id'); ?></div>				</div>				<div class="control-group form-inline">					<?php echo $this->form->getLabel('misc'); ?>				</div>					<?php echo $this->form->getInput('misc'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>				</div>					<?php if ($this->item->modified_by) : ?>						<div class="control-group">							<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>							<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>						</div>						<div class="control-group">							<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>							<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>						</div>					<?php endif; ?>				<?php if ($this->item->version) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('version'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('version'); ?>						</div>					</div>				<?php endif; ?>				<?php if ($this->item->hits) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('hits'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('hits'); ?>						</div>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic', JText::_('COM_CONTACT_CONTACT_DETAILS', true)); ?>				<p><?php echo empty($this->item->id) ? JText::_('COM_CONTACT_DETAILS', true) : JText::sprintf('COM_CONTACT_EDIT_DETAILS', $this->item->id, true); ?></p>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('image'); ?></div>					<div class="controls"><?php echo $this->form->getInput('image'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('con_position'); ?></div>					<div class="controls"><?php echo $this->form->getInput('con_position'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('email_to'); ?></div>					<div class="controls"><?php echo $this->form->getInput('email_to'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('address'); ?></div>					<div class="controls"><?php echo $this->form->getInput('address'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('suburb'); ?></div>					<div class="controls"><?php echo $this->form->getInput('suburb'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('state'); ?></div>					<div class="controls"><?php echo $this->form->getInput('state'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('postcode'); ?></div>					<div class="controls"><?php echo $this->form->getInput('postcode'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('country'); ?></div>					<div class="controls"><?php echo $this->form->getInput('country'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('telephone'); ?></div>					<div class="controls"><?php echo $this->form->getInput('telephone'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('mobile'); ?></div>					<div class="controls"><?php echo $this->form->getInput('mobile'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('fax'); ?></div>					<div class="controls"><?php echo $this->form->getInput('fax'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('webpage'); ?></div>					<div class="controls"><?php echo $this->form->getInput('webpage'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname1'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname1'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname2'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname2'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname3'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname3'); ?></div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>					<?php echo $this->loadTemplate('metadata'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php if ($assoc) : ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>					<?php echo $this->loadTemplate('associations'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>		</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<!-- End content -->	<!-- Begin Sidebar -->		<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>	<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Oracle database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/pdo * @since       12.1 */class JDatabaseDriverOracle extends JDatabaseDriverPdo{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'oracle';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = '"';	/**	 * Returns the current dateformat	 *	 * @var   string	 * @since 12.1	 */	protected $dateformat;	/**	 * Returns the current character set	 *	 * @var   string	 * @since 12.1	 */	protected $charset;	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		$options['driver'] = 'oci';		$options['charset']    = (isset($options['charset'])) ? $options['charset']   : 'AL32UTF8';		$options['dateformat'] = (isset($options['dateformat'])) ? $options['dateformat'] : 'RRRR-MM-DD HH24:MI:SS';		$this->charset = $options['charset'];		$this->dateformat = $options['dateformat'];		// Finalize initialisation		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		parent::connect();		if (isset($this->options['schema']))		{			$this->setQuery('ALTER SESSION SET CURRENT_SCHEMA = ' . $this->quoteName($this->options['schema']))->execute();		}		$this->setDateFormat($this->dateformat);	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		$this->freeResult();		unset($this->connection);	}	/**	 * Drops a table from the database.	 *	 * Note: The IF EXISTS flag is unused in the Oracle driver.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true)			->setQuery('DROP TABLE :tableName');		$query->bind(':tableName', $tableName);		$this->setQuery($query);		$this->execute();		return $this;	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 */	public function getCollation()	{		return $this->charset;	}	/**	 * Get a query to run and verify the database is operational.	 *	 * @return  string  The query to check the health of the DB.	 *	 * @since   12.2	 */	public function getConnectedQuery()	{		return 'SELECT 1 FROM dual';	}	/**     * Returns the current date format     * This method should be useful in the case that     * somebody actually wants to use a different     * date format and needs to check what the current     * one is to see if it needs to be changed.     *     * @return string The current date format     *     * @since 12.1     */	public function getDateFormat()	{		return $this->dateformat;	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * Note: You must have the correct privileges before this method	 * will return usable results!	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		$result = array();		$query = $this->getQuery(true)			->select('dbms_metadata.get_ddl(:type, :tableName)')			->from('dual')			->bind(':type', 'TABLE');		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		foreach ($tables as $table)		{			$query->bind(':tableName', $table);			$this->setQuery($query);			$statement = (string) $this->loadResult();			$result[$table] = $statement;		}		return $result;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$columns = array();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->select('*')			->from('ALL_TAB_COLUMNS')			->where('table_name = :tableName');		$prefixedTable = str_replace('#__', strtoupper($this->tablePrefix), $table);		$query->bind(':tableName', $prefixedTable);		$this->setQuery($query);		$fields = $this->loadObjectList();		if ($typeOnly)		{			foreach ($fields as $field)			{				$columns[$field->COLUMN_NAME] = $field->DATA_TYPE;			}		}		else		{			foreach ($fields as $field)			{				$columns[$field->COLUMN_NAME] = $field;				$columns[$field->COLUMN_NAME]->Default = null;			}		}		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $columns;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->select('*')			->from('ALL_CONSTRAINTS')			->where('table_name = :tableName')			->bind(':tableName', $table);		$this->setQuery($query);		$keys = $this->loadObjectList();		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $keys;	}	/**	 * Method to get an array of all tables in the database (schema).	 *	 * @param   string   $databaseName         The database (schema) name	 * @param   boolean  $includeDatabaseName  Whether to include the schema name in the results	 *	 * @return  array    An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList($databaseName = null, $includeDatabaseName = false)	{		$this->connect();		$query = $this->getQuery(true);		$tables = array();		if ($includeDatabaseName)		{			$query->select('owner, table_name');		}		else		{			$query->select('table_name');		}		$query->from('all_tables');		if ($databaseName)		{			$query->where('owner = :database')				->bind(':database', $databaseName);		}		$query->order('table_name');		$this->setQuery($query);		if ($includeDatabaseName)		{			$tables = $this->loadAssocList();		}		else		{			$tables = $this->loadResultArray();		}		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$this->setQuery("select value from nls_database_parameters where parameter = 'NLS_RDBMS_VERSION'");		return $this->loadResult();	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		return true;	}	/**     * Sets the Oracle Date Format for the session     * Default date format for Oracle is = DD-MON-RR     * The default date format for this driver is:     * 'RRRR-MM-DD HH24:MI:SS' since it is the format     * that matches the MySQL one used within most Joomla     * tables.     *     * @param   string  $dateFormat  Oracle Date Format String     *     * @return boolean     *     * @since  12.1     */	public function setDateFormat($dateFormat = 'DD-MON-RR')	{		$this->connect();		$this->setQuery("ALTER SESSION SET NLS_DATE_FORMAT = '$dateFormat'");		$this->setQuery("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = '$dateFormat'");		if (!$this->execute())		{			return false;		}		$this->dateformat = $dateFormat;		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * Returns false automatically for the Oracle driver since	 * you can only set the character set when the connection	 * is created.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		return false;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function lockTable($table)	{		$this->setQuery('LOCK TABLE ' . $this->quoteName($table) . ' IN EXCLUSIVE MODE')->execute();		return $this;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by Oracle.	 * @param   string  $prefix    Not used by Oracle.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('RENAME ' . $oldTable . ' TO ' . $newTable)->execute();		return $this;	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->setQuery('COMMIT')->execute();		return $this;	}	/**	 * Test to see if the PDO ODBC connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return class_exists('PDO') && in_array('oci', PDO::getAvailableDrivers());	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   11.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = "'";		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "'", $startPos);			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of template style records. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesModelStyles extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'client_id', 'a.client_id',				'template', 'a.template',				'home', 'a.home',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$template = $this->getUserStateFromRequest($this->context . '.filter.template', 'filter_template');		$this->setState('filter.template', $template);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', null);		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_templates');		$this->setState('params', $params);		// List state information.		parent::populateState('a.template', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.template');		$id .= ':' . $this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.template, a.title, a.home, a.client_id, l.title AS language_title, l.image as image'			)		);		$query->from($db->quoteName('#__template_styles') . ' AS a');		// Join on menus.		$query->select('COUNT(m.template_style_id) AS assigned')			->join('LEFT', '#__menu AS m ON m.template_style_id = a.id')			->group('a.id, a.template, a.title, a.home, a.client_id, l.title, l.image, e.extension_id');		// Join over the language		$query->join('LEFT', '#__languages AS l ON l.lang_code = a.home');		// Filter by extension enabled		$query->select('extension_id AS e_id')			->join('LEFT', '#__extensions AS e ON e.element = a.template')			->where('e.enabled = 1')			->where('e.type=' . $db->quote('template'));		// Filter by template.		if ($template = $this->getState('filter.template'))		{			$query->where('a.template = ' . $db->quote($template));		}		// Filter by client.		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('a.client_id = ' . (int) $clientId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.template LIKE ' . $search . ' OR a.title LIKE ' . $search);			}		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.title')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentViewFeatured extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		ContentHelper::addSubmenu('featured');		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		$this->authors    = $this->get('Authors');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= ContentHelper::getActions($this->state->get('filter.category_id'));		JToolbarHelper::title(JText::_('COM_CONTENT_FEATURED_TITLE'), 'featured.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('article.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('article.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('articles.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('articles.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::custom('featured.delete', 'remove.png', 'remove_f2.png', 'JTOOLBAR_REMOVE', true);			JToolbarHelper::archiveList('articles.archive');			JToolbarHelper::checkin('articles.checkin');		}		if ($state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'articles.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('articles.trash');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_content');		}		JToolbarHelper::help('JHELP_CONTENT_FEATURED_ARTICLES');		JHtmlSidebar::setAction('index.php?option=com_content&view=featured');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_AUTHOR'),			'filter_author_id',			JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'fp.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'access_level' => JText::_('JGRID_HEADING_ACCESS'),			'a.created_by' => JText::_('JAUTHOR'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.created' => JText::_('JDATE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Groups class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinGroups extends JLinkedinObject{	/**	 * Method to get a group.	 *	 * @param   string   $id      The unique identifier for a group.	 * @param   string   $fields  Request fields beyond the default ones.	 * @param   integer  $start   Starting location within the result set for paginated returns.	 * @param   integer  $count   The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getGroup($id, $fields = null, $start = 0, $count = 5)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/groups/' . $id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to find the groups a member belongs to.	 *	 * @param   string   $id                The unique identifier for a user.	 * @param   string   $fields            Request fields beyond the default ones.	 * @param   integer  $start             Starting location within the result set for paginated returns.	 * @param   integer  $count             The number of results returned.	 * @param   string   $membership_state  The state of the callers membership to the specified group.	 * 										Values are: non-member, awaiting-confirmation, awaiting-parent-group-confirmation, member, moderator, manager, owner.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getMemberships($id = null, $fields = null, $start = 0, $count = 5, $membership_state = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if id is specified.		if ($id)		{			$base .= $id . '/group-memberships';		}		else		{			$base .= '~/group-memberships';		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Check if membership_state is specified.		if ($membership_state)		{			$data['membership-state'] = $membership_state;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to find the groups a member belongs to.	 *	 * @param   string   $person_id  The unique identifier for a user.	 * @param   string   $group_id   The unique identifier for a group.	 * @param   string   $fields     Request fields beyond the default ones.	 * @param   integer  $start      Starting location within the result set for paginated returns.	 * @param   integer  $count      The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSettings($person_id = null, $group_id = null, $fields = null, $start = 0, $count = 5)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/group-memberships';		}		else		{			$base .= '~/group-memberships';		}		// Check if group_id is specified.		if ($group_id)		{			$base .= '/' . $group_id;		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to change a groups settings.	 *	 * @param   string   $group_id          The unique identifier for a group.	 * @param   boolean  $show_logo         Show group logo in profile.	 * @param   string   $digest_frequency  E-mail digest frequency.	 * @param   boolean  $announcements     E-mail announcements from managers.	 * @param   boolean  $allow_messages    Allow messages from members.	 * @param   boolean  $new_post          E-mail for every new post.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function changeSettings($group_id, $show_logo = null, $digest_frequency = null, $announcements = null,		$allow_messages = null, $new_post = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/group-memberships/' . $group_id;		// Build xml.		$xml = '<group-membership>';		if (!is_null($show_logo))		{			$xml .= '<show-group-logo-in-profile>' . $this->booleanToString($show_logo) . '</show-group-logo-in-profile>';		}		if ($digest_frequency)		{			$xml .= '<email-digest-frequency><code>' . $digest_frequency . '</code></email-digest-frequency>';		}		if (!is_null($announcements))		{			$xml .= '<email-announcements-from-managers>' . $this->booleanToString($announcements) . '</email-announcements-from-managers>';		}		if (!is_null($allow_messages))		{			$xml .= '<allow-messages-from-members>' . $this->booleanToString($allow_messages) . '</allow-messages-from-members>';		}		if (!is_null($new_post))		{			$xml .= '<email-for-every-new-post>' . $this->booleanToString($new_post) . '</email-for-every-new-post>';		}		$xml .= '</group-membership>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method to join a group.	 *	 * @param   string   $group_id          The unique identifier for a group.	 * @param   boolean  $show_logo         Show group logo in profile.	 * @param   string   $digest_frequency  E-mail digest frequency.	 * @param   boolean  $announcements     E-mail announcements from managers.	 * @param   boolean  $allow_messages    Allow messages from members.	 * @param   boolean  $new_post          E-mail for every new post.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function joinGroup($group_id, $show_logo = null, $digest_frequency = null, $announcements = null,		$allow_messages = null, $new_post = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/group-memberships';		// Build xml.		$xml = '<group-membership><group><id>' . $group_id . '</id></group>';		if (!is_null($show_logo))		{			$xml .= '<show-group-logo-in-profile>' . $this->booleanToString($show_logo) . '</show-group-logo-in-profile>';		}		if ($digest_frequency)		{			$xml .= '<email-digest-frequency><code>' . $digest_frequency . '</code></email-digest-frequency>';		}		if (!is_null($announcements))		{			$xml .= '<email-announcements-from-managers>' . $this->booleanToString($announcements) . '</email-announcements-from-managers>';		}		if (!is_null($allow_messages))		{			$xml .= '<allow-messages-from-members>' . $this->booleanToString($allow_messages) . '</allow-messages-from-members>';		}		if (!is_null($new_post))		{			$xml .= '<email-for-every-new-post>' . $this->booleanToString($new_post) . '</email-for-every-new-post>';		}		$xml .= '<membership-state><code>member</code></membership-state></group-membership>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to leave a group.	 *	 * @param   string  $group_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function leaveGroup($group_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/group-memberships/' . $group_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to get dicussions for a group.	 *	 * @param   string   $id              The unique identifier for a group.	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $order           Sort order for posts. Valid for: recency, popularity.	 * @param   string   $category        Category of posts. Valid for: discussion	 * @param   string   $modified_since  Timestamp filter for posts created after the specified value.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getDiscussions($id, $fields = null, $start = 0, $count = 0, $order = null, $category = 'discussion', $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/groups/' . $id . '/posts';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if order is specified.		if ($order)		{			$data['order'] = $order;		}		// Check if category is specified.		if ($category)		{			$data['category'] = $category;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get posts a user started / participated in / follows for a group.	 *	 * @param   string   $group_id        The unique identifier for a group.	 * @param   string   $role            Filter for posts related to the caller. Valid for: creator, commenter, follower.	 * @param   string   $person_id       The unique identifier for a user.	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $order           Sort order for posts. Valid for: recency, popularity.	 * @param   string   $category        Category of posts. Valid for: discussion	 * @param   string   $modified_since  Timestamp filter for posts created after the specified value.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getUserPosts($group_id, $role, $person_id = null, $fields = null, $start = 0, $count = 0,		$order = null, $category = 'discussion', $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id;		}		else		{			$base .= '~';		}		$base .= '/group-memberships/' . $group_id . '/posts';		$data['format'] = 'json';		$data['role'] = $role;		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if order is specified.		if ($order)		{			$data['order'] = $order;		}		// Check if category is specified.		if ($category)		{			$data['category'] = $category;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve details about a post.	 *	 * @param   string  $post_id  The unique identifier for a post.	 * @param   string  $fields   Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getPost($post_id, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/posts/' . $post_id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve all comments of a post.	 *	 * @param   string   $post_id  The unique identifier for a post.	 * @param   string   $fields   Request fields beyond the default ones.	 * @param   integer  $start    Starting location within the result set for paginated returns.	 * @param   integer  $count    The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getPostComments($post_id, $fields = null, $start = 0, $count = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/posts/' . $post_id . '/comments';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve all comments of a post.	 *	 * @param   string  $group_id  The unique identifier for a group.	 * @param   string  $title     Post title.	 * @param   string  $summary   Post summary.	 *	 * @return  string  The created post's id.	 *	 * @since   13.1	 */	public function createPost($group_id, $title, $summary)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/groups/' . $group_id . '/posts';		// Build xml.		$xml = '<post><title>' . $title . '</title><summary>' . $summary . '</summary></post>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		// Return the post id.		$response = explode('posts/', $response->headers['Location']);		return $response[1];	}	/**	 * Method to like or unlike a post.	 *	 * @param   string   $post_id  The unique identifier for a group.	 * @param   boolean  $like     True to like post, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _likeUnlike($post_id, $like)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/relation-to-viewer/is-liked';		// Build xml.		$xml = '<is-liked>' . $this->booleanToString($like) . '</is-liked>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to like a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function likePost($post_id)	{		return $this->_likeUnlike($post_id, true);	}	/**	 * Method used to unlike a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unlikePost($post_id)	{		return $this->_likeUnlike($post_id, false);	}	/**	 * Method to follow or unfollow a post.	 *	 * @param   string   $post_id  The unique identifier for a group.	 * @param   boolean  $follow   True to like post, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _followUnfollow($post_id, $follow)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/relation-to-viewer/is-following';		// Build xml.		$xml = '<is-following>' . $this->booleanToString($follow) . '</is-following>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to follow a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function followPost($post_id)	{		return $this->_followUnfollow($post_id, true);	}	/**	 * Method used to unfollow a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unfollowPost($post_id)	{		return $this->_followUnfollow($post_id, false);	}	/**	 * Method to flag a post as a Promotion or Job.	 *	 * @param   string  $post_id  The unique identifier for a group.	 * @param   string  $flag     Flag as a 'promotion' or 'job'.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function flagPost($post_id, $flag)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/category/code';		// Build xml.		$xml = '<code>' . $flag . '</code>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method to delete a post if the current user is the creator or flag it as inappropriate otherwise.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deletePost($post_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to access the comments resource.	 *	 * @param   string  $comment_id  The unique identifier for a comment.	 * @param   string  $fields      Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getComment($comment_id, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/comments/' . $comment_id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to add a comment to a post	 *	 * @param   string  $post_id  The unique identifier for a group.	 * @param   string  $comment  The post comment's text.	 *	 * @return  string   The created comment's id.	 *	 * @since   13.1	 */	public function addComment($post_id, $comment)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/posts/' . $post_id . '/comments';		// Build xml.		$xml = '<comment><text>' . $comment . '</text></comment>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		// Return the comment id.		$response = explode('comments/', $response->headers['Location']);		return $response[1];	}	/**	 * Method to delete a comment if the current user is the creator or flag it as inappropriate otherwise.	 *	 * @param   string  $comment_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deleteComment($comment_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/comments/' . $comment_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to get suggested groups for a user.	 *	 * @param   string  $person_id  The unique identifier for a user.	 * @param   string  $fields     Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSuggested($person_id = null, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/suggestions/groups';		}		else		{			$base .= '~/suggestions/groups';		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to delete a group suggestion for a user.	 *	 * @param   string  $suggestion_id  The unique identifier for a suggestion.	 * @param   string  $person_id      The unique identifier for a user.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deleteSuggestion($suggestion_id, $person_id = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/suggestions/groups/' . $suggestion_id;		}		else		{			$base .= '~/suggestions/groups/' . $suggestion_id;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_contact component * * @param   array  &$query  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. */function ContactBuildRoute(&$query){	$segments = array();	// get a menu item based on Itemid or currently active	$app = JFactory::getApplication();	$menu = $app->getMenu();	$params = JComponentHelper::getParams('com_contact');	$advanced = $params->get('sef_advanced_link', 0);	if (empty($query['Itemid']))	{		$menuItem = $menu->getActive();	}	else	{		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mCatid = (empty($menuItem->query['catid'])) ? null : $menuItem->query['catid'];	$mId = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (isset($query['view']))	{		$view = $query['view'];		if (empty($query['Itemid']) || empty($menuItem) || $menuItem->component != 'com_contact')		{			$segments[] = $query['view'];		}		unset($query['view']);	}	// are we dealing with a contact that is attached to a menu item?	if (isset($view) && ($mView == $view) and (isset($query['id'])) and ($mId == (int) $query['id']))	{		unset($query['view']);		unset($query['catid']);		unset($query['id']);		return $segments;	}	if (isset($view) and ($view == 'category' or $view == 'contact'))	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'contact' && isset($query['catid']))			{				$catid = $query['catid'];			}			elseif (isset($query['id']))			{				$catid = $query['id'];			}			$menuCatid = $mId;			$categories = JCategories::getInstance('Contact');			$category = $categories->get($catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$path = array_reverse($category->getPath());				$array = array();				foreach ($path as $id)				{					if ((int) $id == (int) $menuCatid)					{						break;					}					if ($advanced)					{						list($tmp, $id) = explode(':', $id, 2);					}					$array[] = $id;				}				$segments = array_merge($segments, array_reverse($array));			}			if ($view == 'contact')			{				if ($advanced)				{					list($tmp, $id) = explode(':', $query['id'], 2);				}				else				{					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);		unset($query['catid']);	}	if (isset($query['layout']))	{		if (!empty($query['Itemid']) && isset($menuItem->query['layout']))		{			if ($query['layout'] == $menuItem->query['layout'])			{				unset($query['layout']);			}		}		else		{			if ($query['layout'] == 'default')			{				unset($query['layout']);			}		}	}	return $segments;}/** * Parse the segments of a URL. * * @param   array  $segments  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. */function ContactParseRoute($segments){	$vars = array();	//Get the active menu item.	$app = JFactory::getApplication();	$menu = $app->getMenu();	$item = $menu->getActive();	$params = JComponentHelper::getParams('com_contact');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for newsfeeds.	if (!isset($item))	{		$vars['view'] = $segments[0];		$vars['id'] = $segments[$count - 1];		return $vars;	}	// From the categories view, we can only jump to a category.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$contactCategory = JCategories::getInstance('Contact')->get($id);	$categories = ($contactCategory) ? $contactCategory->getChildren() : array();	$vars['catid'] = $id;	$vars['id'] = $id;	$found = 0;	foreach ($segments as $segment)	{		$segment = $advanced ? str_replace(':', '-', $segment) : $segment;		foreach ($categories as $category)		{			if ($category->slug == $segment || $category->alias == $segment)			{				$vars['id'] = $category->id;				$vars['catid'] = $category->id;				$vars['view'] = 'category';				$categories = $category->getChildren();				$found = 1;				break;			}		}		if ($found == 0)		{			if ($advanced)			{				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('id'))					->from('#__contact_details')					->where($db->quoteName('catid') . ' = ' . (int) $vars['catid'])					->where($db->quoteName('alias') . ' = ' . $db->quote($db->quote($segment)));				$db->setQuery($query);				$nid = $db->loadResult();			}			else			{				$nid = $segment;			}			$vars['id'] = $nid;			$vars['view'] = 'contact';		}		$found = 0;	}	return $vars;}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelRegistration extends JModelForm{	/**	 * @var    object  The user registration data.	 * @since  1.6	 */	protected $data;	/**	 * Method to activate a user account.	 *	 * @param   string  $token  The activation token.	 *	 * @return  mixed    False on failure, user object on success.	 *	 * @since   1.6	 */	public function activate($token)	{		$config = JFactory::getConfig();		$userParams = JComponentHelper::getParams('com_users');		$db = $this->getDbo();		// Get the user id based on the token.		$query = $db->getQuery(true);		$query->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('activation') . ' = ' . $db->quote($token))			->where($db->quoteName('block') . ' = ' . 1)			->where($db->quoteName('lastvisitDate') . ' = ' . $db->quote($db->getNullDate()));		$db->setQuery($query);		try		{			$userId = (int) $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);			return false;		}		// Check for a valid user id.		if (!$userId)		{			$this->setError(JText::_('COM_USERS_ACTIVATION_TOKEN_NOT_FOUND'));			return false;		}		// Load the users plugin group.		JPluginHelper::importPlugin('user');		// Activate the user.		$user = JFactory::getUser($userId);		// Admin activation is on and user is verifying their email		if (($userParams->get('useractivation') == 2) && !$user->getParam('activate', 0))		{			$uri = JUri::getInstance();			// Compile the admin notification mail values.			$data = $user->getProperties();			$data['activation'] = JApplication::getHash(JUserHelper::genRandomPassword());			$user->set('activation', $data['activation']);			$data['siteurl'] = JUri::base();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$data['fromname'] = $config->get('fromname');			$data['mailfrom'] = $config->get('mailfrom');			$data['sitename'] = $config->get('sitename');			$user->setParam('activate', 1);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATE_WITH_ADMIN_ACTIVATION_SUBJECT',				$data['name'],				$data['sitename']			);			$emailBody = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATE_WITH_ADMIN_ACTIVATION_BODY',				$data['sitename'],				$data['name'],				$data['email'],				$data['username'],				$data['activate']			);			// get all admin users			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail', 'id')))				->from($db->quoteName('#__users')				->where($db->quoteName('sendEmail') . ' = ' . 1));			$db->setQuery($query);			try			{				$rows = $db->loadObjectList();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			// Send mail to all users with users creating permissions and receiving system emails			foreach ($rows as $row)			{				$usercreator = JFactory::getUser($row->id);				if ($usercreator->authorise('core.create', 'com_users'))				{					$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $row->email, $emailSubject, $emailBody);					// Check for an error.					if ($return !== true)					{						$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));						return false;					}				}			}		}		// Admin activation is on and admin is activating the account		elseif (($userParams->get('useractivation') == 2) && $user->getParam('activate', 0))		{			$user->set('activation', '');			$user->set('block', '0');			// Compile the user activated notification mail values.			$data = $user->getProperties();			$user->setParam('activate', 0);			$data['fromname'] = $config->get('fromname');			$data['mailfrom'] = $config->get('mailfrom');			$data['sitename'] = $config->get('sitename');			$data['siteurl'] = JUri::base();			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATED_BY_ADMIN_ACTIVATION_SUBJECT',				$data['name'],				$data['sitename']			);			$emailBody = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATED_BY_ADMIN_ACTIVATION_BODY',				$data['name'],				$data['siteurl'],				$data['username']			);			$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $data['email'], $emailSubject, $emailBody);			// Check for an error.			if ($return !== true)			{				$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));				return false;			}		}		else		{			$user->set('activation', '');			$user->set('block', '0');		}		// Store the user object.		if (!$user->save())		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_ACTIVATION_SAVE_FAILED', $user->getError()));			return false;		}		return $user;	}	/**	 * Method to get the registration form data.	 *	 * The base form data is loaded and then an event is fired	 * for users plugins to extend the data.	 *	 * @return  mixed  Data object on success, false on failure.	 *	 * @since   1.6	 */	public function getData()	{		if ($this->data === null)		{			$this->data = new stdClass;			$app = JFactory::getApplication();			$params = JComponentHelper::getParams('com_users');			// Override the base user data with any data in the session.			$temp = (array) $app->getUserState('com_users.registration.data', array());			foreach ($temp as $k => $v)			{				$this->data->$k = $v;			}			// Get the groups the user should be added to after registration.			$this->data->groups = array();			// Get the default new user group, Registered if not specified.			$system = $params->get('new_usertype', 2);			$this->data->groups[] = $system;			// Unset the passwords.			unset($this->data->password1);			unset($this->data->password2);			// Get the dispatcher and load the users plugins.			$dispatcher = JEventDispatcher::getInstance();			JPluginHelper::importPlugin('user');			// Trigger the data preparation event.			$results = $dispatcher->trigger('onContentPrepareData', array('com_users.registration', $this->data));			// Check for errors encountered while preparing the data.			if (count($results) && in_array(false, $results, true))			{				$this->setError($dispatcher->getError());				$this->data = false;			}		}		return $this->data;	}	/**	 * Method to get the registration form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array    $data      An optional array of data for the form to interogate.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  JForm  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.registration', 'registration', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		$data = $this->getData();		$this->preprocessData('com_users.registration', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		$userParams = JComponentHelper::getParams('com_users');		//Add the choice for site language at registration time		if ($userParams->get('site_language') == 1 && $userParams->get('frontend_userparams') == 1)		{			$form->loadFile('sitelang', false);		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$app = JFactory::getApplication();		$params = $app->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to save the form data.	 *	 * @param   array  $temp  The form data.	 *	 * @return  mixed  The user id on success, false on failure.	 *	 * @since   1.6	 */	public function register($temp)	{		$config = JFactory::getConfig();		$db = $this->getDbo();		$params = JComponentHelper::getParams('com_users');		// Initialise the table with JUser.		$user = new JUser;		$data = (array) $this->getData();		// Merge in the registration data.		foreach ($temp as $k => $v)		{			$data[$k] = $v;		}		// Prepare the data for the user object.		$data['email'] = $data['email1'];		$data['password'] = $data['password1'];		$useractivation = $params->get('useractivation');		$sendpassword = $params->get('sendpassword', 1);		// Check if the user needs to activate their account.		if (($useractivation == 1) || ($useractivation == 2))		{			$data['activation'] = JApplication::getHash(JUserHelper::genRandomPassword());			$data['block'] = 1;		}		// Bind the data.		if (!$user->bind($data))		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_BIND_FAILED', $user->getError()));			return false;		}		// Load the users plugin group.		JPluginHelper::importPlugin('user');		// Store the data.		if (!$user->save())		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $user->getError()));			return false;		}		// Compile the notification mail values.		$data = $user->getProperties();		$data['fromname'] = $config->get('fromname');		$data['mailfrom'] = $config->get('mailfrom');		$data['sitename'] = $config->get('sitename');		$data['siteurl'] = JUri::root();		// Handle account activation/confirmation emails.		if ($useractivation == 2)		{			// Set the link to confirm the user email.			$uri = JUri::getInstance();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ADMIN_ACTIVATION_BODY',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ADMIN_ACTIVATION_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username']				);			}		}		elseif ($useractivation == 1)		{			// Set the link to activate the user account.			$uri = JUri::getInstance();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ACTIVATION_BODY',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ACTIVATION_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username']				);			}		}		else		{			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_BODY',					$data['name'],					$data['sitename'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['siteurl']				);			}		}		// Send the registration email.		$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $data['email'], $emailSubject, $emailBody);		// Send Notification mail to administrators		if (($params->get('useractivation') < 2) && ($params->get('mail_to_admin') == 1))		{			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			$emailBodyAdmin = JText::sprintf(				'COM_USERS_EMAIL_REGISTERED_NOTIFICATION_TO_ADMIN_BODY',				$data['name'],				$data['username'],				$data['siteurl']			);			// Get all admin users			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail')))				->from($db->quoteName('#__users')				->where($db->quoteName('sendEmail') . ' = ' . 1));			$db->setQuery($query);			try			{				$rows = $db->loadObjectList();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			// Send mail to all superadministrators id			foreach ($rows as $row)			{				$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $row->email, $emailSubject, $emailBodyAdmin);				// Check for an error.				if ($return !== true)				{					$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));					return false;				}			}		}		// Check for an error.		if ($return !== true)		{			$this->setError(JText::_('COM_USERS_REGISTRATION_SEND_MAIL_FAILED'));			// Send a system message to administrators receiving system mails			$db = JFactory::getDbo();			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail', 'id')))				->from($db->quoteName('#__users'))				->where($db->quoteName('block') . ' = ' . (int) 0)				->where($db->quoteName('sendEmail') . ' = ' . (int) 1);			$db->setQuery($query);			try			{				$sendEmail = $db->loadColumn();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			if (count($sendEmail) > 0)			{				$jdate = new JDate;				// Build the query to add the messages				foreach ($sendEmail as $userid)				{					$values = array($db->quote($userid), $db->quote($userid), $db->quote($jdate->toSql()), $db->quote(JText::_('COM_USERS_MAIL_SEND_FAILURE_SUBJECT')), $db->quote(JText::sprintf('COM_USERS_MAIL_SEND_FAILURE_BODY', $return, $data['username'])));					$query = $db->getQuery(true);					$query->insert($db->quoteName('#__messages'))						->columns($db->quoteName(array('user_id_from', 'user_id_to', 'date_time', 'subject', 'message')))						->values(implode(',', $values));					$db->setQuery($query);					try					{						$db->execute();					}					catch (RuntimeException $e)					{						$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);						return false;					}				}			}			return false;		}		if ($useractivation == 1)		{			return "useractivate";		}		elseif ($useractivation == 2)		{			return "adminactivate";		}		else		{			return $user->id;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of banners. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewBanners extends JViewLegacy{	protected $categories;	protected $items;	protected $pagination;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$this->categories	= $this->get('CategoryOrders');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		BannersHelper::addSubmenu('banners');		$this->addToolbar();		require_once JPATH_COMPONENT . '/models/fields/bannerclient.php';		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		$canDo = BannersHelper::getActions($this->state->get('filter.category_id'));		$user = JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_BANNERS_MANAGER_BANNERS'), 'banners.png');		if (count($user->getAuthorisedCategories('com_banners', 'core.create')) > 0)		{			JToolbarHelper::addNew('banner.add');		}		if (($canDo->get('core.edit')))		{			JToolbarHelper::editList('banner.edit');		}		if ($canDo->get('core.edit.state'))		{			if ($this->state->get('filter.state') != 2)			{				JToolbarHelper::publish('banners.publish', 'JTOOLBAR_PUBLISH', true);				JToolbarHelper::unpublish('banners.unpublish', 'JTOOLBAR_UNPUBLISH', true);			}			if ($this->state->get('filter.state') != -1)			{				if ($this->state->get('filter.state') != 2)				{					JToolbarHelper::archiveList('banners.archive');				}				elseif ($this->state->get('filter.state') == 2)				{					JToolbarHelper::unarchiveList('banners.publish');				}			}		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::checkin('banners.checkin');		}		if ($this->state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'banners.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('banners.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_banners');		}		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_BANNERS');		JHtmlSidebar::setAction('index.php?option=com_banners&view=banners');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_BANNERS_SELECT_CLIENT'),			'filter_client_id',			JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.name' => JText::_('COM_BANNERS_HEADING_NAME'),			'a.sticky' => JText::_('COM_BANNERS_HEADING_STICKY'),			'client_name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'impmade' => JText::_('COM_BANNERS_HEADING_IMPRESSIONS'),			'clicks' => JText::_('COM_BANNERS_HEADING_CLICKS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi export driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseExporterMysqli extends JDatabaseExporter{	/**	 * An array of cached data.	 *	 * @var    array	 * @since  11.1	 */	protected $cache = array();	/**	 * The database connector to use for exporting structure and/or data.	 *	 * @var    JDatabaseDriverMysql	 * @since  11.1	 */	protected $db = null;	/**	 * An array input sources (table names).	 *	 * @var    array	 * @since  11.1	 */	protected $from = array();	/**	 * The type of output format (xml).	 *	 * @var    string	 * @since  11.1	 */	protected $asFormat = 'xml';	/**	 * An array of options for the exporter.	 *	 * @var    object	 * @since  11.1	 */	protected $options = null;	/**	 * Constructor.	 *	 * Sets up the default options for the exporter.	 *	 * @since   11.1	 */	public function __construct()	{		$this->options = new stdClass;		$this->cache = array('columns' => array(), 'keys' => array());		// Set up the class defaults:		// Export with only structure		$this->withStructure();		// Export as xml.		$this->asXml();		// Default destination is a string using $output = (string) $exporter;	}	/**	 * Magic function to exports the data to a string.	 *	 * @return  string	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function __toString()	{		// Check everything is ok to run first.		$this->check();		$buffer = '';		// Get the format.		switch ($this->asFormat)		{			case 'xml':			default:				$buffer = $this->buildXml();				break;		}		return $buffer;	}	/**	 * Set the output option for the exporter to XML format.	 *	 * @return  JDatabaseExporterMySQL  Method supports chaining.	 *	 * @since   11.1	 */	public function asXml()	{		$this->asFormat = 'xml';		return $this;	}	/**	 * Builds the XML data for the tables to export.	 *	 * @return  string  An XML string	 *	 * @since   11.1	 * @throws  Exception if an error occurs.	 */	protected function buildXml()	{		$buffer = array();		$buffer[] = '<?xml version="1.0"?>';		$buffer[] = '<mysqldump xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">';		$buffer[] = ' <database name="">';		$buffer = array_merge($buffer, $this->buildXmlStructure());		$buffer[] = ' </database>';		$buffer[] = '</mysqldump>';		return implode("\n", $buffer);	}	/**	 * Builds the XML structure to export.	 *	 * @return  array  An array of XML lines (strings).	 *	 * @since   11.1	 * @throws  Exception if an error occurs.	 */	protected function buildXmlStructure()	{		$buffer = array();		foreach ($this->from as $table)		{			// Replace the magic prefix if found.			$table = $this->getGenericTableName($table);			// Get the details columns information.			$fields = $this->db->getTableColumns($table, false);			$keys = $this->db->getTableKeys($table);			$buffer[] = '  <table_structure name="' . $table . '">';			foreach ($fields as $field)			{				$buffer[] = '   <field Field="' . $field->Field . '" Type="' . $field->Type . '" Null="' . $field->Null . '" Key="' .					$field->Key . '"' . (isset($field->Default) ? ' Default="' . $field->Default . '"' : '') . ' Extra="' . $field->Extra . '"' .					' />';			}			foreach ($keys as $key)			{				$buffer[] = '   <key Table="' . $table . '" Non_unique="' . $key->Non_unique . '" Key_name="' . $key->Key_name . '"' .					' Seq_in_index="' . $key->Seq_in_index . '" Column_name="' . $key->Column_name . '" Collation="' . $key->Collation . '"' .					' Null="' . $key->Null . '" Index_type="' . $key->Index_type . '" Comment="' . htmlspecialchars($key->Comment) . '"' .					' />';			}			$buffer[] = '  </table_structure>';		}		return $buffer;	}	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseExporterMysqli  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysqli))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Get the generic name of the table, converting the database prefix to the wildcard string.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  string  The name of the table with the database prefix replaced with #__.	 *	 * @since   11.1	 */	protected function getGenericTableName($table)	{		// TODO Incorporate into parent class and use $this.		$prefix = $this->db->getPrefix();		// Replace the magic prefix if found.		$table = preg_replace("|^$prefix|", '#__', $table);		return $table;	}	/**	 * Specifies a list of table names to export.	 *	 * @param   mixed  $from  The name of a single table, or an array of the table names to export.	 *	 * @return  JDatabaseExporterMysql  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if input is not a string or array.	 */	public function from($from)	{		if (is_string($from))		{			$this->from = array($from);		}		elseif (is_array($from))		{			$this->from = $from;		}		else		{			throw new Exception('JPLATFORM_ERROR_INPUT_REQUIRES_STRING_OR_ARRAY');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysqli  $db  The database connector.	 *	 * @return  JDatabaseExporterMysqli  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysqli $db)	{		$this->db = $db;		return $this;	}	/**	 * Sets an internal option to export the structure of the input table(s).	 *	 * @param   boolean  $setting  True to export the structure, false to not.	 *	 * @return  JDatabaseExporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function withStructure($setting = true)	{		$this->options->withStructure = (boolean) $setting;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_status * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$config	= JFactory::getConfig();$user   = JFactory::getUser();$db     = JFactory::getDbo();$lang   = JFactory::getLanguage();$input  = JFactory::getApplication()->input;// Get the number of unread messages in your inbox.$query	= $db->getQuery(true)	->select('COUNT(*)')	->from('#__messages')	->where('state = 0 AND user_id_to = '.(int) $user->get('id'));$db->setQuery($query);$unread = (int) $db->loadResult();// Get the number of back-end logged in users.$query->clear()	->select('COUNT(session_id)')	->from('#__session')	->where('guest = 0 AND client_id = 1');$db->setQuery($query);$count = '<span class="badge">' . (int) $db->loadResult() . '</span>';// Set the inbox link.if ($input->getBool('hidemainmenu')){	$inboxLink = '';}else{	$inboxLink = JRoute::_('index.php?option=com_messages');}// Set the inbox class.if ($unread){	$inboxClass = 'unread-messages';} else {	$inboxClass = 'no-unread-messages';}// Get the number of frontend logged in users.$query->clear()	->select('COUNT(session_id)')	->from('#__session')	->where('guest = 0 AND client_id = 0');$db->setQuery($query);$online_num = '<span class="badge">' . (int) $db->loadResult() . '</span>';require JModuleHelper::getLayoutPath('mod_status', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelUser extends JModelAdmin{	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   string  $type    The table type to instantiate	 * @param   string  $prefix  A prefix for the table class name. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A database object	 *	 * @since   1.6	*/	public function getTable($type = 'User', $prefix = 'JTable', $config = array())	{		$table = JTable::getInstance($type, $prefix, $config);		return $table;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   1.6	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		$result->tags = new JHelperTags;		$result->tags->getTagIds($result->id, 'com_users.user');		// Get the dispatcher and load the users plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		// Trigger the data preparation event.		$results = $dispatcher->trigger('onContentPrepareData', array('com_users.user', $result));		return $result;	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      An optional array of data for the form to interogate.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		$plugin = JPluginHelper::getPlugin('user', 'joomla');		$pluginParams = new JRegistry($plugin->params);		// Get the form.		$form = $this->loadForm('com_users.user', 'user', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Passwords fields are required when mail to user is set to No in joomla user plugin		$userId = $form->getValue('id');		if ($userId === 0 && $pluginParams->get('mail_to_user') === "0")		{			$form->setFieldAttribute('password', 'required', 'true');			$form->setFieldAttribute('password2', 'required', 'true');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.edit.user.data', array());		if (empty($data))		{			$data = $this->getItem();		}		JPluginHelper::importPlugin('user');		$this->preprocessData('com_users.profile', $data);		return $data;	}	/**	 * Override JModelAdmin::preprocessForm to ensure the correct plugin group is loaded.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function save($data)	{		$pk			= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('user.id');		$user		= JUser::getInstance($pk);		$my = JFactory::getUser();		if ($data['block'] && $pk == $my->id && !$my->block)		{			$this->setError(JText::_('COM_USERS_USERS_ERROR_CANNOT_BLOCK_SELF'));			return false;		}		// Make sure that we are not removing ourself from Super Admin group		$iAmSuperAdmin = $my->authorise('core.admin');		if ($iAmSuperAdmin && $my->get('id') == $pk)		{			// Check that at least one of our new groups is Super Admin			$stillSuperAdmin = false;			$myNewGroups = $data['groups'];			foreach ($myNewGroups as $group)			{				$stillSuperAdmin = ($stillSuperAdmin) ? ($stillSuperAdmin) : JAccess::checkGroup($group, 'core.admin');			}			if (!$stillSuperAdmin)			{				$this->setError(JText::_('COM_USERS_USERS_ERROR_CANNOT_DEMOTE_SELF'));				return false;			}		}		// Bind the data.		if (!$user->bind($data))		{			$this->setError($user->getError());			return false;		}		// Store the data.		if (!$user->save())		{			$this->setError($user->getError());			return false;		}		$this->setState('user.id', $user->id);		return true;	}	/**	 * Method to delete rows.	 *	 * @param   array  &$pks  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.6	 */	public function delete(&$pks)	{		$user	= JFactory::getUser();		$table	= $this->getTable();		$pks	= (array) $pks;		// Check if I am a Super Admin		$iAmSuperAdmin	= $user->authorise('core.admin');		// Trigger the onUserBeforeSave event.		JPluginHelper::importPlugin('user');		$dispatcher = JEventDispatcher::getInstance();		if (in_array($user->id, $pks))		{			$this->setError(JText::_('COM_USERS_USERS_ERROR_CANNOT_DELETE_SELF'));			return false;		}		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				// Access checks.				$allow = $user->authorise('core.delete', 'com_users');				// Don't allow non-super-admin to delete a super admin				$allow = (!$iAmSuperAdmin && JAccess::check($pk, 'core.admin')) ? false : $allow;				if ($allow)				{					// Get users data for the users to delete.					$user_to_delete = JFactory::getUser($pk);					// Fire the onUserBeforeDelete event.					$dispatcher->trigger('onUserBeforeDelete', array($table->getProperties()));					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					else					{						// Trigger the onUserAfterDelete event.						$dispatcher->trigger('onUserAfterDelete', array($user_to_delete->getProperties(), true, $this->getError()));					}				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return true;	}	/**	 * Method to block user records.	 *	 * @param   array    &$pks   The ids of the items to publish.	 * @param   integer  $value  The value of the published state	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function block(&$pks, $value = 1)	{		$app		= JFactory::getApplication();		$dispatcher	= JEventDispatcher::getInstance();		$user		= JFactory::getUser();		// Check if I am a Super Admin		$iAmSuperAdmin	= $user->authorise('core.admin');		$table		= $this->getTable();		$pks		= (array) $pks;		JPluginHelper::importPlugin('user');		// Access checks.		foreach ($pks as $i => $pk)		{			if ($value == 1 && $pk == $user->get('id'))			{				// Cannot block yourself.				unset($pks[$i]);				JError::raiseWarning(403, JText::_('COM_USERS_USERS_ERROR_CANNOT_BLOCK_SELF'));			}			elseif ($table->load($pk))			{				$old	= $table->getProperties();				$allow	= $user->authorise('core.edit.state', 'com_users');				// Don't allow non-super-admin to delete a super admin				$allow = (!$iAmSuperAdmin && JAccess::check($pk, 'core.admin')) ? false : $allow;				// Prepare the logout options.				$options = array(					'clientid' => 0				);				if ($allow)				{					// Skip changing of same state					if ($table->block == $value)					{						unset($pks[$i]);						continue;					}					$table->block = (int) $value;				// If unblocking, also change password reset count to zero to unblock reset					if ($table->block === 0)					{						$table->resetCount = 0;					}					// Allow an exception to be thrown.					try					{						if (!$table->check())						{							$this->setError($table->getError());							return false;						}						// Trigger the onUserBeforeSave event.						$result = $dispatcher->trigger('onUserBeforeSave', array($old, false, $table->getProperties()));						if (in_array(false, $result, true))						{							// Plugin will have to raise it's own error or throw an exception.							return false;						}						// Store the table.						if (!$table->store())						{							$this->setError($table->getError());							return false;						}						// Trigger the onAftereStoreUser event						$dispatcher->trigger('onUserAfterSave', array($table->getProperties(), false, true, null));					}					catch (Exception $e)					{						$this->setError($e->getMessage());						return false;					}					// Log the user out.					if ($value)					{						$app->logout($table->id, $options);					}				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}			}		}		return true;	}	/**	 * Method to activate user records.	 *	 * @param   array  &$pks  The ids of the items to activate.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function activate(&$pks)	{		$dispatcher	= JEventDispatcher::getInstance();		$user		= JFactory::getUser();		// Check if I am a Super Admin		$iAmSuperAdmin	= $user->authorise('core.admin');		$table		= $this->getTable();		$pks		= (array) $pks;		JPluginHelper::importPlugin('user');		// Access checks.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				$old	= $table->getProperties();				$allow	= $user->authorise('core.edit.state', 'com_users');				// Don't allow non-super-admin to delete a super admin				$allow = (!$iAmSuperAdmin && JAccess::check($pk, 'core.admin')) ? false : $allow;				if (empty($table->activation))				{					// Ignore activated accounts.					unset($pks[$i]);				}				elseif ($allow)				{					$table->block		= 0;					$table->activation	= '';					// Allow an exception to be thrown.					try					{						if (!$table->check())						{							$this->setError($table->getError());							return false;						}						// Trigger the onUserBeforeSave event.						$result = $dispatcher->trigger('onUserBeforeSave', array($old, false, $table->getProperties()));						if (in_array(false, $result, true))						{							// Plugin will have to raise it's own error or throw an exception.							return false;						}						// Store the table.						if (!$table->store())						{							$this->setError($table->getError());							return false;						}						// Fire the onAftereStoreUser event						$dispatcher->trigger('onUserAfterSave', array($table->getProperties(), false, true, null));					}					catch (Exception $e)					{						$this->setError($e->getMessage());						return false;					}				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}			}		}		return true;	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   2.5	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('COM_USERS_USERS_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['group_id']))		{			$cmd = JArrayHelper::getValue($commands, 'group_action', 'add');			if (!$this->batchUser((int) $commands['group_id'], $pks, $cmd))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Perform batch operations	 *	 * @param   integer  $group_id  The group ID which assignments are being edited	 * @param   array    $user_ids  An array of user IDs on which to operate	 * @param   string   $action    The action to perform	 *	 * @return  boolean  True on success, false on failure	 *	 * @since   1.6	 */	public function batchUser($group_id, $user_ids, $action)	{		// Get the DB object		$db = $this->getDbo();		JArrayHelper::toInteger($user_ids);		// Non-super admin cannot work with super-admin group		if ((!JFactory::getUser()->get('isRoot') && JAccess::checkGroup($group_id, 'core.admin')) || $group_id < 1)		{			$this->setError(JText::_('COM_USERS_ERROR_INVALID_GROUP'));			return false;		}		switch ($action)		{			// Sets users to a selected group			case 'set':				$doDelete	= 'all';				$doAssign	= true;				break;			// Remove users from a selected group			case 'del':				$doDelete	= 'group';				break;			// Add users to a selected group			case 'add':			default:				$doAssign	= true;				break;		}		// Remove the users from the group if requested.		if (isset($doDelete))		{			$query = $db->getQuery(true);			// Remove users from the group			$query->delete($db->quoteName('#__user_usergroup_map'))				->where($db->quoteName('user_id') . ' IN (' . implode(',', $user_ids) . ')');			// Only remove users from selected group			if ($doDelete == 'group')			{				$query->where($db->quoteName('group_id') . ' = ' . (int) $group_id);			}			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		// Assign the users to the group if requested.		if (isset($doAssign))		{			$query = $db->getQuery(true);			// First, we need to check if the user is already assigned to a group			$query->select($db->quoteName('user_id'))				->from($db->quoteName('#__user_usergroup_map'))				->where($db->quoteName('group_id') . ' = ' . (int) $group_id);			$db->setQuery($query);			$users = $db->loadColumn();			// Build the values clause for the assignment query.			$query->clear();			$groups = false;			foreach ($user_ids as $id)			{				if (!in_array($id, $users))				{					$query->values($id . ',' . $group_id);					$groups = true;				}			}			// If we have no users to process, throw an error to notify the user			if (!$groups)			{				$this->setError(JText::_('COM_USERS_ERROR_NO_ADDITIONS'));				return false;			}			$query->insert($db->quoteName('#__user_usergroup_map'))				->columns(array($db->quoteName('user_id'), $db->quoteName('group_id')));			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}	/**	 * Gets the available groups.	 *	 * @return  array  An array of groups	 *	 * @since   1.6	 */	public function getGroups()	{		$user = JFactory::getUser();		if ($user->authorise('core.edit', 'com_users') && $user->authorise('core.manage', 'com_users'))		{			$model = JModelLegacy::getInstance('Groups', 'UsersModel', array('ignore_request' => true));			return $model->getItems();		}		else		{			return null;		}	}	/**	 * Gets the groups this object is assigned to	 *	 * @param   integer  $userId  The user ID to retrieve the groups for	 *	 * @return  array  An array of assigned groups	 *	 * @since   1.6	 */	public function getAssignedGroups($userId = null)	{		$userId = (!empty($userId)) ? $userId : (int) $this->getState('user.id');		if (empty($userId))		{			$result = array();			$config = JComponentHelper::getParams('com_users');			if ($groupId = $config->get('new_usertype'))			{				$result[] = $groupId;			}		}		else		{			$result = JUserHelper::getUserGroups($userId);		}		return $result;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Utitlity class for multilang * * @package     Joomla.Libraries * @subpackage  Language * @since       2.5.4 */class JLanguageMultilang{	/**	 * Method to determine if the language filter plugin is enabled.	 * This works for both site and administrator.	 *	 * @return  boolean  True if site is supporting multiple languages; false otherwise.	 *	 * @since   2.5.4	 */	public static function isEnabled()	{		// Flag to avoid doing multiple database queries.		static $tested = false;		// Status of language filter plugin.		static $enabled = false;		// Get application object.		$app = JFactory::getApplication();		// If being called from the front-end, we can avoid the database query.		if ($app->isSite())		{			$enabled = $app->getLanguageFilter();			return $enabled;		}		// If already tested, don't test again.		if (!$tested)		{			// Determine status of language filter plug-in.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('enabled')				->from($db->quoteName('#__extensions'))				->where($db->quoteName('type') . ' = ' . $db->quote('plugin'))				->where($db->quoteName('folder') . ' = ' . $db->quote('system'))				->where($db->quoteName('element') . ' = ' . $db->quote('languagefilter'));			$db->setQuery($query);			$enabled = $db->loadResult();			$tested = true;		}		return $enabled;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$input = JFactory::getApplication()->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'category.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><div class="category-edit"><form action="<?php echo JRoute::_('index.php?option=com_categories&extension=' . $input->getCmd('extension', 'com_content') . '&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('COM_CATEGORIES_FIELDSET_DETAILS');?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<li><?php echo $this->form->getLabel('alias'); ?>				<?php echo $this->form->getInput('alias'); ?></li>				<li><?php echo $this->form->getLabel('extension'); ?>				<?php echo $this->form->getInput('extension'); ?></li>				<li><?php echo $this->form->getLabel('parent_id'); ?>				<?php echo $this->form->getInput('parent_id'); ?></li>				<li><?php echo $this->form->getLabel('published'); ?>				<?php echo $this->form->getInput('published'); ?></li>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<?php if ($this->canDo->get('core.admin')) : ?>					<li><span class="faux-label"><?php echo JText::_('JGLOBAL_ACTION_PERMISSIONS_LABEL'); ?></span>      					<button type="button" onclick="document.location.href='#access-rules';">      					<?php echo JText::_('JGLOBAL_PERMISSIONS_ANCHOR'); ?></button>    				</li>    			<?php endif; ?>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<!-- Tag field -->				<?php foreach ($this->get('form')->getFieldset('jmetadata') as $field) : ?>					<?php if ($field->name == 'jform[metadata][tags][]') :?>						<li>							<?php echo $field->label; ?>							<?php echo $field->input; ?>						</li>					<?php endif; ?>				<?php endforeach; ?>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>				<li><?php echo $this->form->getLabel('hits'); ?>				<?php echo $this->form->getInput('hits'); ?></li>			</ul>			<div class="clr"></div>			<?php echo $this->form->getLabel('description'); ?>			<div class="clr"></div>			<?php echo $this->form->getInput('description'); ?>			<div class="clr"></div>		</fieldset>	</div>	<div class="col options-section">		<?php echo JHtml::_('sliders.start', 'categories-sliders-' . $this->item->id, array('useCookie' => 1)); ?>			<?php echo $this->loadTemplate('options'); ?>			<div class="clr"></div>			<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'), 'meta-options'); ?>			<fieldset class="panelform">				<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'); ?></legend>				<?php echo $this->loadTemplate('metadata'); ?>			</fieldset>			<?php				$fieldSets = $this->form->getFieldsets('attribs');					foreach ($fieldSets as $name => $fieldSet) :						if ($name != 'editorConfig' && $name != 'basic-limited') :							$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL';							echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');							if (isset($fieldSet->description) && trim($fieldSet->description)) :								echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';							endif;					?>						<div class="clr"></div>						<fieldset class="panelform">							<ul class="adminformlist">								<?php foreach ($this->form->getFieldset($name) as $field) : ?>									<li><?php echo $field->label; ?>									<?php echo $field->input; ?></li>								<?php endforeach; ?>							</ul>						</fieldset>						<?php endif; ?>					<?php endforeach;?>			<?php				$fieldSets = $this->form->getFieldsets('associations');				foreach ($fieldSets as $name => $fieldSet) :					$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL';					echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');						if (isset($fieldSet->description) && trim($fieldSet->description)) :							echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';						endif;						?>					<div class="clr"></div>					<fieldset class="panelform">						<ul class="adminformlist">							<?php foreach ($this->form->getFieldset($name) as $field) : ?>								<li><?php echo $field->label; ?>								<?php echo $field->input; ?></li>							<?php endforeach; ?>						</ul>					</fieldset>				<?php endforeach;?>		<?php echo JHtml::_('sliders.end'); ?>	</div>	<div class="clr"></div>	<?php if ($this->canDo->get('core.admin')) : ?>		<div  class="col rules-section">			<?php echo JHtml::_('sliders.start', 'permissions-sliders-' . $this->item->id, array('useCookie' => 1)); ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_CATEGORIES_FIELDSET_RULES'), 'access-rules'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('COM_CATEGORIES_FIELDSET_RULES'); ?></legend>				<?php echo $this->form->getLabel('rules'); ?>				<?php echo $this->form->getInput('rules'); ?>			</fieldset>			<?php echo JHtml::_('sliders.end'); ?>		</div>	<?php endif; ?>	<div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form><div class="clr"></div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><div class="row-striped">	<?php if (count($list)) : ?>		<?php foreach ($list as $i => $item) :			// Calculate popular items			$hits = (int) $item->hits;			$hits_class = $hits >= 100 ? 'important' : $hits >= 25 ? 'warning' : $hits >= 10 ? 'info' : '';		?>			<div class="row-fluid">				<div class="span9">					<span class="badge badge-<?php echo $hits_class;?> hasTooltip" title="<?php echo JText::_('JGLOBAL_HITS');?>"><?php echo $item->hits;?></span>					<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time); ?>					<?php endif; ?>					<strong class="row-title">						<?php if ($item->link) :?>							<a href="<?php echo $item->link; ?>">								<?php echo htmlspecialchars($item->title, ENT_QUOTES, 'UTF-8');?></a>						<?php else :							echo htmlspecialchars($item->title, ENT_QUOTES, 'UTF-8');						endif; ?>					</strong>				</div>				<div class="span3">					<span class="small"><i class="icon-calendar"></i> <?php echo JHtml::_('date', $item->created, 'Y-m-d'); ?></span>				</div>			</div>		<?php endforeach; ?>	<?php else : ?>		<div class="row-fluid">			<div class="span12">				<div class="alert"><?php echo JText::_('MOD_POPULAR_NO_MATCHING_RESULTS');?></div>			</div>		</div>	<?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component all tags view * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsViewTags extends JViewLegacy{	public function display($tpl = null)	{		$app      = JFactory::getApplication();		$document = JFactory::getDocument();		$document->link = JRoute::_('index.php?option=com_tags&view=tags');		$app->input->set('limit', $app->getCfg('feed_limit'));		$params = $app->getParams();		$siteEmail = $app->getCfg('mailfrom');		$fromName  = $app->getCfg('fromname');		$feedEmail = $app->getCfg('feed_email', 'author');		$document->editor = $fromName;		if ($feedEmail != "none")		{			$document->editorEmail = $siteEmail;		}		// Get some data from the model		$items    = $this->get('Items');		$tag = $this->get('Item');		foreach ($items as $item)		{			// Strip HTML from feed item title			$title = $this->escape($item->title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// URL link to tagged item			// Change to new routing once it is merged			$link = JRoute::_($item->link);			// Strip HTML from feed item description text			$description = $item->description;			$author			= $item->created_by_alias ? $item->created_by_alias : $item->author;			$date = ($item->displayDate ? date('r', strtotime($item->displayDate)) : '');			// Load individual item creator class			$feeditem = new JFeedItem;			$feeditem->title       = $title;			$feeditem->link        = '/index.php?option=com_tags&view=tag&id=' . (int) $item->id;			$feeditem->description = $description;			$feeditem->date        = $date;			$feeditem->category    = 'All Tags';			$feeditem->author      = $author;			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$item->authorEmail = $row->author_email;			}			// Loads item info into RSS array			$document->addItem($feeditem);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// no direct accessdefined('_JEXEC') or die;echo JHtml::_('sliders.start', 'panel-sliders', array('useCookie' => '1'));foreach ($this->modules as $module){	$output = JModuleHelper::renderModule($module);	$params = new JRegistry;	$params->loadString($module->params);	if ($params->get('automatic_title', '0') == '0')	{		echo JHtml::_('sliders.panel', $module->title, 'cpanel-panel-' . $module->name);	}	elseif (method_exists('mod'.$module->name.'Helper', 'getTitle'))	{		echo JHtml::_('sliders.panel', call_user_func_array(array('mod' . $module->name . 'Helper', 'getTitle'), array($params)), 'cpanel-panel-' . $module->name);	}	else	{		echo JHtml::_('sliders.panel', JText::_('MOD_' . $module->name . '_TITLE'), 'cpanel-panel-' . $module->name);	}	echo $output;}echo JHtml::_('sliders.end');
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Jobs class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinJobs extends JLinkedinObject{	/**	 * Method to retrieve detailed information about a job.	 *	 * @param   integer  $id      The unique identifier for a job.	 * @param   string   $fields  Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getJob($id, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/jobs/' . $id;		// Set request parameters.		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get a list of bookmarked jobs for the current member.	 *	 * @param   string  $fields  Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getBookmarked($fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/job-bookmarks';		// Set request parameters.		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to bookmark a job to the current user's account.	 *	 * @param   integer  $id  The unique identifier for a job.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function bookmark($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/job-bookmarks';		// Build xml.		$xml = '<job-bookmark><job><id>' . $id . '</id></job></job-bookmark>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to delete a bookmark.	 *	 * @param   integer  $id  The unique identifier for a job.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deleteBookmark($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/job-bookmarks/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to retrieve job suggestions for the current user.	 *	 * @param   string   $fields  Request fields beyond the default ones.	 * @param   integer  $start   Starting location within the result set for paginated returns.	 * @param   integer  $count   The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSuggested($fields = null, $start = 0, $count = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/suggestions/job-suggestions';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to search across LinkedIn's job postings.	 *	 * @param   string   $fields        Request fields beyond the default ones.	 * @param   string   $keywords      Members who have all the keywords anywhere in their profile.	 * @param   string   $company_name  Jobs with a matching company name.	 * @param   string   $job_title     Matches jobs with the same job title.	 * @param   string   $country_code  Matches members with a location in a specific country. Values are defined in by ISO 3166 standard.	 * 									Country codes must be in all lower case.	 * @param   integer  $postal_code   Matches members centered around a Postal Code. Must be combined with the country-code parameter.	 * 									Not supported for all countries.	 * @param   integer  $distance      Matches members within a distance from a central point. This is measured in miles.	 * @param   string   $facets        Facet buckets to return, e.g. location.	 * @param   array    $facet         Array of facet values to search over. Contains values for company, date-posted, location, job-function,	 * 									industry, and salary, in exactly this order, null must be specified for an element if no value.	 * @param   integer  $start         Starting location within the result set for paginated returns.	 * @param   integer  $count         The number of results returned.	 * @param   string   $sort          Controls the search result order. There are four options: R (relationship), DA (date-posted-asc),	 * 									DD (date-posted-desc).	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function search($fields = null, $keywords = null, $company_name = null, $job_title = null, $country_code = null, $postal_code = null,		$distance = null, $facets = null, $facet = null, $start = 0, $count = 0, $sort = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/job-search';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if keywords is specified.		if ($keywords)		{			$data['keywords'] = $keywords;		}		// Check if company-name is specified.		if ($company_name)		{			$data['company-name'] = $company_name;		}		// Check if job-title is specified.		if ($job_title)		{			$data['job-title'] = $job_title;		}		// Check if country_code is specified.		if ($country_code)		{			$data['country-code'] = $country_code;		}		// Check if postal_code is specified.		if ($postal_code)		{			$data['postal-code'] = $postal_code;		}		// Check if distance is specified.		if ($distance)		{			$data['distance'] = $distance;		}		// Check if facets is specified.		if ($facets)		{			$data['facets'] = $facets;		}		// Check if facet is specified.		if ($facet)		{			$data['facet'] = array();			for ($i = 0; $i < count($facet); $i++)			{				if ($facet[$i])				{					if ($i == 0)					{						$data['facet'][] = 'company,' . $this->oauth->safeEncode($facet[$i]);					}					if ($i == 1)					{						$data['facet'][] = 'date-posted,' . $facet[$i];					}					if ($i == 2)					{						$data['facet'][] = 'location,' . $facet[$i];					}					if ($i == 3)					{						$data['facet'][] = 'job-function,' . $this->oauth->safeEncode($facet[$i]);					}					if ($i == 4)					{						$data['facet'][] = 'industry,' . $facet[$i];					}					if ($i == 5)					{						$data['facet'][] = 'salary,' . $facet[$i];					}				}			}		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if sort is specified.		if ($sort)		{			$data['sort'] = $sort;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Photo class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/photo/ * @since       13.1 */class JFacebookPhoto extends JFacebookObject{	/**	 * Method to get a photo. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo  The photo id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPhoto($photo)	{		return $this->get($photo);	}	/**	 * Method to get a photo's comments. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo   The photo id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($photo, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($photo, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a photo. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo    The photo id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($photo, $message)	{		// Set POST request parameters.		$data['message'] = $message;		return $this->createConnection($photo, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get photo's likes. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo   The photo id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($photo, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($photo, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a photo. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo  The photo id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($photo)	{		return $this->createConnection($photo, 'likes');	}	/**	 * Method to unlike a photo. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo  The photo id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($photo)	{		return $this->deleteConnection($photo, 'likes');	}	/**	 * Method to get the Users tagged in the photo. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo   The photo id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getTags($photo, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($photo, 'tags', '', $limit, $offset, $until, $since);	}	/**	 * Method to tag one or more Users in a photo. $to or $tag_text required.	 * Requires authentication and publish_stream permission, user_photos permission for private photos.	 *	 * @param   string   $photo     The photo id.	 * @param   mixed    $to        ID of the User or an array of Users to tag in the photo: [{"id":"1234"}, {"id":"12345"}].	 * @param   string   $tag_text  A text string to tag.	 * @param   integer  $x         x coordinate of tag, as a percentage offset from the left edge of the picture.	 * @param   integer  $y         y coordinate of tag, as a percentage offset from the top edge of the picture.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createTag($photo, $to = null, $tag_text = null, $x = null, $y = null)	{		// Set POST request parameters.		if (is_array($to))		{			$data['tags'] = $to;		}		else		{			$data['to'] = $to;		}		if ($tag_text)		{			$data['tag_text'] = $tag_text;		}		if ($x)		{			$data['x'] = $x;		}		if ($y)		{			$data['y'] = $y;		}		return $this->createConnection($photo, 'tags', $data);	}	/**	 * Method to update the position of the tag for a particular Users in a photo.	 * Requires authentication and publish_stream permission, user_photos permission for private photos.	 *	 * @param   string   $photo  The photo id.	 * @param   string   $to     ID of the User to update tag in the photo.	 * @param   integer  $x      x coordinate of tag, as a percentage offset from the left edge of the picture.	 * @param   integer  $y      y coordinate of tag, as a percentage offset from the top edge of the picture.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function updateTag($photo, $to, $x = null, $y = null)	{		// Set POST request parameters.		$data['to'] = $to;		if ($x)		{			$data['x'] = $x;		}		if ($y)		{			$data['y'] = $y;		}		return $this->createConnection($photo, 'tags', $data);	}	/**	 * Method to get the album-sized view of the photo. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo     The photo id.	 * @param   boolean  $redirect  If false this will return the URL of the picture without a 302 redirect.	 *	 * @return  string  URL of the picture.	 *	 * @since   13.1	 */	public function getPicture($photo, $redirect = true)	{		$extra_fields = '';		if ($redirect == false)		{			$extra_fields = '?redirect=false';		}		return $this->getConnection($photo, 'picture', $extra_fields);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();// This checks if the config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params['show_publishing_options']);$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;if (!$editoroptions){	$params['show_publishing_options'] = '1';	$params['show_article_options'] = '1';	$params['show_urls_images_backend'] = '0';	$params['show_urls_images_frontend'] = '0';}// Check if the article uses configuration settings besides global. If so, use them.if (!empty($this->item->attribs['show_publishing_options'])){	$params['show_publishing_options'] = $this->item->attribs['show_publishing_options'];}if (!empty($this->item->attribs['show_article_options'])){	$params['show_article_options'] = $this->item->attribs['show_article_options'];}if (!empty($this->item->attribs['show_urls_images_backend'])){	$params['show_urls_images_backend'] = $this->item->attribs['show_urls_images_backend'];}?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_content&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate">	<div class="row-fluid">		<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_CONTENT_ARTICLE_DETAILS', true)); ?>					<fieldset class="adminform">						<div class="control-group form-inline">							<?php echo $this->form->getLabel('title'); ?> <?php echo $this->form->getInput('title'); ?> <?php echo $this->form->getLabel('catid'); ?> <?php echo $this->form->getInput('catid'); ?>						</div>						<?php echo $this->form->getInput('articletext'); ?>					</fieldset>					<?php						// The url and images fields only show if the configuration is set to allow them. This is for legacy reasons.					?>					<?php if ($params['show_urls_images_backend']) : ?>						<div class="row-fluid">							<div class="span6">								<h4><?php echo JText::_('COM_CONTENT_FIELDSET_URLS_AND_IMAGES');?></h4>								<div class="control-group">									<?php echo $this->form->getLabel('images'); ?>									<div class="controls">										<?php echo $this->form->getInput('images'); ?>									</div>								</div>								<?php foreach ($this->form->getGroup('images') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>											<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>							<div class="span6">								<?php foreach ($this->form->getGroup('urls') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>												<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>						</div>					<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php // Do not show the publishing options if the edit form is configured not to. ?>					<?php  if ($params['show_publishing_options'] || ( $params['show_publishing_options'] = '' && !empty($editoroptions)) ) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_CONTENT_FIELDSET_PUBLISHING', true)); ?>							<div class="row-fluid">								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('alias'); ?>										</div>									</div>									<div class="control-group">										<div class="control-label">											<?php echo $this->form->getLabel('id'); ?>										</div>										<div class="controls">											<?php echo $this->form->getInput('id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by_alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by_alias'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created'); ?>										<div class="controls">											<?php echo $this->form->getInput('created'); ?>										</div>									</div>								</div>								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('publish_up'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_up'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('publish_down'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_down'); ?>										</div>									</div>									<?php if ($this->item->modified_by) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('modified_by'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_by'); ?>											</div>										</div>										<div class="control-group">											<?php echo $this->form->getLabel('modified'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->version) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('version'); ?>											<div class="controls">												<?php echo $this->form->getInput('version'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->hits) : ?>										<div class="control-group">											<div class="control-label">												<?php echo $this->form->getLabel('hits'); ?>											</div>											<div class="controls">												<?php echo $this->form->getInput('hits'); ?>											</div>										</div>									<?php endif; ?>								</div>							</div>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php  endif; ?>					<?php if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))) : ?>							<?php $fieldSets = $this->form->getFieldsets('attribs'); ?>							<?php foreach ($fieldSets as $name => $fieldSet) : ?>								<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>									<?php $attribtabs = 'attrib-' . $name; ?>									<?php echo JHtml::_('bootstrap.addTab', 'myTab', $attribtabs, JText::_($fieldSet->label, true)); ?>								<?php endif; ?>							<?php								// If the parameter says to show the article options or if the parameters have never been set, we will								// show the article options.								if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))) : ?>								<?php	// Go through all the fieldsets except the configuration and basic-limited, which are									// handled separately below.								?>									<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>										<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>											<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>										<?php endif; ?>										<?php foreach ($this->form->getFieldset($name) as $field) : ?>											<div class="control-group">												<?php echo $field->label; ?>												<div class="controls">													<?php echo $field->input; ?>												</div>											</div>										<?php endforeach; ?>									<?php endif; ?>								<?php // If we are not showing the options we need to use the hidden fields so the values are not lost.								?>								<?php elseif ($name == 'basic-limited'):									foreach ($this->form->getFieldset('basic-limited') as $field) :										echo $field->input;									endforeach;								endif;							?>						<?php endforeach; ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>					<?php // We need to make a separate space for the configuration						// so that those fields always show to those wih permissions					?>					<?php if ($this->canDo->get('core.admin')):  ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'editor', JText::_('COM_CONTENT_SLIDER_EDITOR_CONFIG', true)); ?>							<?php foreach ($this->form->getFieldset('editorConfig') as $field) : ?>								<div class="control-group">									<?php echo $field->label; ?>									<div class="controls">										<?php echo $field->input; ?>									</div>								</div>							<?php endforeach; ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>							<?php echo $this->loadTemplate('metadata'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php if ($assoc) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>							<?php echo $this->loadTemplate('associations'); ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>					<?php if ($this->canDo->get('core.admin')) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'permissions', JText::_('COM_CONTENT_FIELDSET_RULES', true)); ?>							<fieldset>								<?php echo $this->form->getInput('rules'); ?>							</fieldset>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="return" value="<?php echo $input->getCmd('return');?>" />			<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Date * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDate is a class that stores a date and provides logic to manipulate * and render that date in a variety of formats. * * @property-read  string   $daysinmonth   t - Number of days in the given month. * @property-read  string   $dayofweek     N - ISO-8601 numeric representation of the day of the week. * @property-read  string   $dayofyear     z - The day of the year (starting from 0). * @property-read  boolean  $isleapyear    L - Whether it's a leap year. * @property-read  string   $day           d - Day of the month, 2 digits with leading zeros. * @property-read  string   $hour          H - 24-hour format of an hour with leading zeros. * @property-read  string   $minute        i - Minutes with leading zeros. * @property-read  string   $second        s - Seconds with leading zeros. * @property-read  string   $month         m - Numeric representation of a month, with leading zeros. * @property-read  string   $ordinal       S - English ordinal suffix for the day of the month, 2 characters. * @property-read  string   $week          W - Numeric representation of the day of the week. * @property-read  string   $year          Y - A full numeric representation of a year, 4 digits. * * @package     Joomla.Platform * @subpackage  Date * @since       11.1 */class JDate extends DateTime{	const DAY_ABBR = "\x021\x03";	const DAY_NAME = "\x022\x03";	const MONTH_ABBR = "\x023\x03";	const MONTH_NAME = "\x024\x03";	/**	 * The format string to be applied when using the __toString() magic method.	 *	 * @var    string	 * @since  11.1	 */	public static $format = 'Y-m-d H:i:s';	/**	 * Placeholder for a DateTimeZone object with GMT as the time zone.	 *	 * @var    object	 * @since  11.1	 */	protected static $gmt;	/**	 * Placeholder for a DateTimeZone object with the default server	 * time zone as the time zone.	 *	 * @var    object	 * @since  11.1	 */	protected static $stz;	/**	 * The DateTimeZone object for usage in rending dates as strings.	 *	 * @var    DateTimeZone	 * @since  12.1	 */	protected $tz;	/**	 * Constructor.	 *	 * @param   string  $date  String in a format accepted by strtotime(), defaults to "now".	 * @param   mixed   $tz    Time zone to be used for the date. Might be a string or a DateTimeZone object.	 *	 * @since   11.1	 */	public function __construct($date = 'now', $tz = null)	{		// Create the base GMT and server time zone objects.		if (empty(self::$gmt) || empty(self::$stz))		{			self::$gmt = new DateTimeZone('GMT');			self::$stz = new DateTimeZone(@date_default_timezone_get());		}		// If the time zone object is not set, attempt to build it.		if (!($tz instanceof DateTimeZone))		{			if ($tz === null)			{				$tz = self::$gmt;			}			elseif (is_string($tz))			{				$tz = new DateTimeZone($tz);			}		}		// If the date is numeric assume a unix timestamp and convert it.		date_default_timezone_set('UTC');		$date = is_numeric($date) ? date('c', $date) : $date;		// Call the DateTime constructor.		parent::__construct($date, $tz);		// Reset the timezone for 3rd party libraries/extension that does not use JDate		date_default_timezone_set(self::$stz->getName());		// Set the timezone object for access later.		$this->tz = $tz;	}	/**	 * Magic method to access properties of the date given by class to the format method.	 *	 * @param   string  $name  The name of the property.	 *	 * @return  mixed   A value if the property name is valid, null otherwise.	 *	 * @since   11.1	 */	public function __get($name)	{		$value = null;		switch ($name)		{			case 'daysinmonth':				$value = $this->format('t', true);				break;			case 'dayofweek':				$value = $this->format('N', true);				break;			case 'dayofyear':				$value = $this->format('z', true);				break;			case 'isleapyear':				$value = (boolean) $this->format('L', true);				break;			case 'day':				$value = $this->format('d', true);				break;			case 'hour':				$value = $this->format('H', true);				break;			case 'minute':				$value = $this->format('i', true);				break;			case 'second':				$value = $this->format('s', true);				break;			case 'month':				$value = $this->format('m', true);				break;			case 'ordinal':				$value = $this->format('S', true);				break;			case 'week':				$value = $this->format('W', true);				break;			case 'year':				$value = $this->format('Y', true);				break;			default:				$trace = debug_backtrace();				trigger_error(					'Undefined property via __get(): ' . $name . ' in ' . $trace[0]['file'] . ' on line ' . $trace[0]['line'],					E_USER_NOTICE				);		}		return $value;	}	/**	 * Magic method to render the date object in the format specified in the public	 * static member JDate::$format.	 *	 * @return  string  The date as a formatted string.	 *	 * @since   11.1	 */	public function __toString()	{		return (string) parent::format(self::$format);	}	/**	 * Proxy for new JDate().	 *	 * @param   string  $date  String in a format accepted by strtotime(), defaults to "now".	 * @param   mixed   $tz    Time zone to be used for the date.	 *	 * @return  JDate	 *	 * @since   11.3	 */	public static function getInstance($date = 'now', $tz = null)	{		return new JDate($date, $tz);	}	/**	 * Translates day of week number to a string.	 *	 * @param   integer  $day   The numeric day of the week.	 * @param   boolean  $abbr  Return the abbreviated day string?	 *	 * @return  string  The day of the week.	 *	 * @since   11.1	 */	public function dayToString($day, $abbr = false)	{		switch ($day)		{			case 0:				return $abbr ? JText::_('SUN') : JText::_('SUNDAY');			case 1:				return $abbr ? JText::_('MON') : JText::_('MONDAY');			case 2:				return $abbr ? JText::_('TUE') : JText::_('TUESDAY');			case 3:				return $abbr ? JText::_('WED') : JText::_('WEDNESDAY');			case 4:				return $abbr ? JText::_('THU') : JText::_('THURSDAY');			case 5:				return $abbr ? JText::_('FRI') : JText::_('FRIDAY');			case 6:				return $abbr ? JText::_('SAT') : JText::_('SATURDAY');		}	}	/**	 * Gets the date as a formatted string in a local calendar.	 *	 * @param   string   $format     The date format specification string (see {@link PHP_MANUAL#date})	 * @param   boolean  $local      True to return the date string in the local time zone, false to return it in GMT.	 * @param   boolean  $translate  True to translate localised strings	 *	 * @return  string   The date string in the specified format format.	 *	 * @since   11.1	 */	public function calendar($format, $local = false, $translate = true)	{		return $this->format($format, $local, $translate);	}	/**	 * Gets the date as a formatted string.	 *	 * @param   string   $format     The date format specification string (see {@link PHP_MANUAL#date})	 * @param   boolean  $local      True to return the date string in the local time zone, false to return it in GMT.	 * @param   boolean  $translate  True to translate localised strings	 *	 * @return  string   The date string in the specified format format.	 *	 * @since   11.1	 */	public function format($format, $local = false, $translate = true)	{		if ($translate)		{			// Do string replacements for date format options that can be translated.			$format = preg_replace('/(^|[^\\\])D/', "\\1" . self::DAY_ABBR, $format);			$format = preg_replace('/(^|[^\\\])l/', "\\1" . self::DAY_NAME, $format);			$format = preg_replace('/(^|[^\\\])M/', "\\1" . self::MONTH_ABBR, $format);			$format = preg_replace('/(^|[^\\\])F/', "\\1" . self::MONTH_NAME, $format);		}		// If the returned time should not be local use GMT.		if ($local == false)		{			parent::setTimezone(self::$gmt);		}		// Format the date.		$return = parent::format($format);		if ($translate)		{			// Manually modify the month and day strings in the formatted time.			if (strpos($return, self::DAY_ABBR) !== false)			{				$return = str_replace(self::DAY_ABBR, $this->dayToString(parent::format('w'), true), $return);			}			if (strpos($return, self::DAY_NAME) !== false)			{				$return = str_replace(self::DAY_NAME, $this->dayToString(parent::format('w')), $return);			}			if (strpos($return, self::MONTH_ABBR) !== false)			{				$return = str_replace(self::MONTH_ABBR, $this->monthToString(parent::format('n'), true), $return);			}			if (strpos($return, self::MONTH_NAME) !== false)			{				$return = str_replace(self::MONTH_NAME, $this->monthToString(parent::format('n')), $return);			}		}		if ($local == false)		{			parent::setTimezone($this->tz);		}		return $return;	}	/**	 * Get the time offset from GMT in hours or seconds.	 *	 * @param   boolean  $hours  True to return the value in hours.	 *	 * @return  float  The time offset from GMT either in hours or in seconds.	 *	 * @since   11.1	 */	public function getOffsetFromGMT($hours = false)	{		return (float) $hours ? ($this->tz->getOffset($this) / 3600) : $this->tz->getOffset($this);	}	/**	 * Translates month number to a string.	 *	 * @param   integer  $month  The numeric month of the year.	 * @param   boolean  $abbr   If true, return the abbreviated month string	 *	 * @return  string  The month of the year.	 *	 * @since   11.1	 */	public function monthToString($month, $abbr = false)	{		switch ($month)		{			case 1:				return $abbr ? JText::_('JANUARY_SHORT') : JText::_('JANUARY');			case 2:				return $abbr ? JText::_('FEBRUARY_SHORT') : JText::_('FEBRUARY');			case 3:				return $abbr ? JText::_('MARCH_SHORT') : JText::_('MARCH');			case 4:				return $abbr ? JText::_('APRIL_SHORT') : JText::_('APRIL');			case 5:				return $abbr ? JText::_('MAY_SHORT') : JText::_('MAY');			case 6:				return $abbr ? JText::_('JUNE_SHORT') : JText::_('JUNE');			case 7:				return $abbr ? JText::_('JULY_SHORT') : JText::_('JULY');			case 8:				return $abbr ? JText::_('AUGUST_SHORT') : JText::_('AUGUST');			case 9:				return $abbr ? JText::_('SEPTEMBER_SHORT') : JText::_('SEPTEMBER');			case 10:				return $abbr ? JText::_('OCTOBER_SHORT') : JText::_('OCTOBER');			case 11:				return $abbr ? JText::_('NOVEMBER_SHORT') : JText::_('NOVEMBER');			case 12:				return $abbr ? JText::_('DECEMBER_SHORT') : JText::_('DECEMBER');		}	}	/**	 * Method to wrap the setTimezone() function and set the internal time zone object.	 *	 * @param   DateTimeZone  $tz  The new DateTimeZone object.	 *	 * @return  JDate	 *	 * @since   11.1	 */	public function setTimezone($tz)	{		$this->tz = $tz;		return parent::setTimezone($tz);	}	/**	 * Gets the date as an ISO 8601 string.  IETF RFC 3339 defines the ISO 8601 format	 * and it can be found at the IETF Web site.	 *	 * @param   boolean  $local  True to return the date string in the local time zone, false to return it in GMT.	 *	 * @return  string  The date string in ISO 8601 format.	 *	 * @link    http://www.ietf.org/rfc/rfc3339.txt	 * @since   11.1	 */	public function toISO8601($local = false)	{		return $this->format(DateTime::RFC3339, $local, false);	}	/**	 * Gets the date as an SQL datetime string.	 *	 * @param   boolean          $local  True to return the date string in the local time zone, false to return it in GMT.	 * @param   JDatabaseDriver  $db     The database driver or null to use JFactory::getDbo()	 *	 * @return  string     The date string in SQL datetime format.	 *	 * @link http://dev.mysql.com/doc/refman/5.0/en/datetime.html	 * @since   11.4	 */	public function toSql($local = false, JDatabaseDriver $db = null)	{		if ($db === null)		{			$db = JFactory::getDbo();		}		return $this->format($db->getDateFormat(), $local, false);	}	/**	 * Gets the date as an RFC 822 string.  IETF RFC 2822 supercedes RFC 822 and its definition	 * can be found at the IETF Web site.	 *	 * @param   boolean  $local  True to return the date string in the local time zone, false to return it in GMT.	 *	 * @return  string   The date string in RFC 822 format.	 *	 * @link    http://www.ietf.org/rfc/rfc2822.txt	 * @since   11.1	 */	public function toRFC822($local = false)	{		return $this->format(DateTime::RFC2822, $local, false);	}	/**	 * Gets the date as UNIX time stamp.	 *	 * @return  integer  The date as a UNIX timestamp.	 *	 * @since   11.1	 */	public function toUnix()	{		return (int) parent::format('U');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'source.cancel' || document.formvalidator.isValid(document.id('source-form')))		{			<?php echo $this->form->getField('source')->save(); ?>			Joomla.submitform(task, document.getElementById('source-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_templates&layout=edit'); ?>" method="post" name="adminForm" id="source-form" class="form-validate">	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<fieldset class="adminform">		<legend><?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_FILENAME', $this->source->filename, $this->template->element); ?></legend>		<?php echo $this->form->getLabel('source'); ?>		<div class="clr"></div>		<div class="editor-border">		<?php echo $this->form->getInput('source'); ?>		</div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</fieldset>	<?php echo $this->form->getInput('extension_id'); ?>	<?php echo $this->form->getInput('filename'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Rest model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersModelReset extends JModelForm{	/**	 * Method to get the password reset request form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.reset_request', 'reset_request', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the password reset complete form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getResetCompleteForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.reset_complete', 'reset_complete', $options = array('control' => 'jform'));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the password reset confirm form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getResetConfirmForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.reset_confirm', 'reset_confirm', $options = array('control' => 'jform'));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object    A form object.	 * @param   mixed     The data expected for the form.	 * @throws    Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$params = JFactory::getApplication()->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * @since   1.6	 */	function processResetComplete($data)	{		// Get the form.		$form = $this->getResetCompleteForm();		// Check for an error.		if ($form instanceof Exception)		{			return $form;		}		// Filter and validate the form data.		$data = $form->filter($data);		$return = $form->validate($data);		// Check for an error.		if ($return instanceof Exception)		{			return $return;		}		// Check the validation results.		if ($return === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $formError)			{				$this->setError($formError->getMessage());			}			return false;		}		// Get the token and user id from the confirmation process.		$app = JFactory::getApplication();		$token = $app->getUserState('com_users.reset.token', null);		$userId = $app->getUserState('com_users.reset.user', null);		// Check the token and user id.		if (empty($token) || empty($userId))		{			return new JException(JText::_('COM_USERS_RESET_COMPLETE_TOKENS_MISSING'), 403);		}		// Get the user object.		$user = JUser::getInstance($userId);		// Check for a user and that the tokens match.		if (empty($user) || $user->activation !== $token)		{			$this->setError(JText::_('COM_USERS_USER_NOT_FOUND'));			return false;		}		// Make sure the user isn't blocked.		if ($user->block)		{			$this->setError(JText::_('COM_USERS_USER_BLOCKED'));			return false;		}		// Generate the new password hash.		$salt = JUserHelper::genRandomPassword(32);		$crypted = JUserHelper::getCryptedPassword($data['password1'], $salt);		$password = $crypted . ':' . $salt;		// Update the user object.		$user->password = $password;		$user->activation = '';		$user->password_clear = $data['password1'];		// Save the user to the database.		if (!$user->save(true))		{			return new JException(JText::sprintf('COM_USERS_USER_SAVE_FAILED', $user->getError()), 500);		}		// Flush the user data from the session.		$app->setUserState('com_users.reset.token', null);		$app->setUserState('com_users.reset.user', null);		return true;	}	/**	 * @since   1.6	 */	function processResetConfirm($data)	{		// Get the form.		$form = $this->getResetConfirmForm();		// Check for an error.		if ($form instanceof Exception)		{			return $form;		}		// Filter and validate the form data.		$data = $form->filter($data);		$return = $form->validate($data);		// Check for an error.		if ($return instanceof Exception)		{			return $return;		}		// Check the validation results.		if ($return === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $formError)			{				$this->setError($formError->getMessage());			}			return false;		}		// Find the user id for the given token.		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('activation')			->select('id')			->select('block')			->from($db->quoteName('#__users'))			->where($db->quoteName('username') . ' = ' . $db->quote($data['username']));		// Get the user id.		$db->setQuery($query);		try		{			$user = $db->loadObject();		}		catch (RuntimeException $e)		{			return new JException(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);		}		// Check for a user.		if (empty($user))		{			$this->setError(JText::_('COM_USERS_USER_NOT_FOUND'));			return false;		}		$parts = explode(':', $user->activation);		$crypt = $parts[0];		if (!isset($parts[1]))		{			$this->setError(JText::_('COM_USERS_USER_NOT_FOUND'));			return false;		}		$salt = $parts[1];		$testcrypt = JUserHelper::getCryptedPassword($data['token'], $salt);		// Verify the token		if (!($crypt == $testcrypt))		{			$this->setError(JText::_('COM_USERS_USER_NOT_FOUND'));			return false;		}		// Make sure the user isn't blocked.		if ($user->block)		{			$this->setError(JText::_('COM_USERS_USER_BLOCKED'));			return false;		}		// Push the user data into the session.		$app = JFactory::getApplication();		$app->setUserState('com_users.reset.token', $crypt . ':' . $salt);		$app->setUserState('com_users.reset.user', $user->id);		return true;	}	/**	 * Method to start the password reset process.	 *	 * @since   1.6	 */	public function processResetRequest($data)	{		$config = JFactory::getConfig();		// Get the form.		$form = $this->getForm();		// Check for an error.		if ($form instanceof Exception)		{			return $form;		}		// Filter and validate the form data.		$data = $form->filter($data);		$return = $form->validate($data);		// Check for an error.		if ($return instanceof Exception)		{			return $return;		}		// Check the validation results.		if ($return === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $formError)			{				$this->setError($formError->getMessage());			}			return false;		}		// Find the user id for the given email address.		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('id')			->from($db->quoteName('#__users'))			->where($db->quoteName('email') . ' = ' . $db->quote($data['email']));		// Get the user object.		$db->setQuery($query);		try		{			$userId = $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);			return false;		}		// Check for a user.		if (empty($userId))		{			$this->setError(JText::_('COM_USERS_INVALID_EMAIL'));			return false;		}		// Get the user object.		$user = JUser::getInstance($userId);		// Make sure the user isn't blocked.		if ($user->block)		{			$this->setError(JText::_('COM_USERS_USER_BLOCKED'));			return false;		}		// Make sure the user isn't a Super Admin.		if ($user->authorise('core.admin'))		{			$this->setError(JText::_('COM_USERS_REMIND_SUPERADMIN_ERROR'));			return false;		}		// Make sure the user has not exceeded the reset limit		if (!$this->checkResetLimit($user))		{			$resetLimit = (int) JFactory::getApplication()->getParams()->get('reset_time');			$this->setError(JText::plural('COM_USERS_REMIND_LIMIT_ERROR_N_HOURS', $resetLimit));			return false;		}		// Set the confirmation token.		$token = JApplication::getHash(JUserHelper::genRandomPassword());		$salt = JUserHelper::getSalt('crypt-md5');		$hashedToken = md5($token . $salt) . ':' . $salt;		$user->activation = $hashedToken;		// Save the user to the database.		if (!$user->save(true))		{			return new JException(JText::sprintf('COM_USERS_USER_SAVE_FAILED', $user->getError()), 500);		}		// Assemble the password reset confirmation link.		$mode = $config->get('force_ssl', 0) == 2 ? 1 : -1;		$itemid = UsersHelperRoute::getLoginRoute();		$itemid = $itemid !== null ? '&Itemid=' . $itemid : '';		$link = 'index.php?option=com_users&view=reset&layout=confirm' . $itemid;		// Put together the email template data.		$data = $user->getProperties();		$data['fromname'] = $config->get('fromname');		$data['mailfrom'] = $config->get('mailfrom');		$data['sitename'] = $config->get('sitename');		$data['link_text'] = JRoute::_($link, false, $mode);		$data['link_html'] = JRoute::_($link, true, $mode);		$data['token'] = $token;		$subject = JText::sprintf(			'COM_USERS_EMAIL_PASSWORD_RESET_SUBJECT',			$data['sitename']		);		$body = JText::sprintf(			'COM_USERS_EMAIL_PASSWORD_RESET_BODY',			$data['sitename'],			$data['token'],			$data['link_text']		);		// Send the password reset request email.		$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $user->email, $subject, $body);		// Check for an error.		if ($return !== true)		{			return new JException(JText::_('COM_USERS_MAIL_FAILED'), 500);		}		return true;	}	/**	 * Method to check if user reset limit has been exceeded within the allowed time period.	 *	 * @param   JUser  the user doing the password reset	 *	 * @return  boolean true if user can do the reset, false if limit exceeded	 *	 * @since    2.5	 */	public function checkResetLimit($user)	{		$params = JFactory::getApplication()->getParams();		$maxCount = (int) $params->get('reset_count');		$resetHours = (int) $params->get('reset_time');		$result = true;		$lastResetTime = strtotime($user->lastResetTime) ? strtotime($user->lastResetTime) : 0;		$hoursSinceLastReset = (strtotime(JFactory::getDate()->toSql()) - $lastResetTime) / 3600;		// If it's been long enough, start a new reset count		if ($hoursSinceLastReset > $resetHours)		{			$user->lastResetTime = JFactory::getDate()->toSql();			$user->resetCount = 1;		}		// If we are under the max count, just increment the counter		elseif ($user->resetCount < $maxCount)		{			$user->resetCount;		}		// At this point, we know we have exceeded the maximum resets for the time period		else		{			$result = false;		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$doc = JFactory::getDocument();$lang = JFactory::getLanguage();// Add JavaScript FrameworksJHtml::_('bootstrap.framework');JHtml::_('bootstrap.tooltip');// Add Stylesheets$doc->addStyleSheet('templates/' .$this->template. '/css/template.css');// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Detecting Active Variables$option   = $app->input->getCmd('option', '');$view     = $app->input->getCmd('view', '');$layout   = $app->input->getCmd('layout', '');$task     = $app->input->getCmd('task', '');$itemid   = $app->input->getCmd('Itemid', '');$sitename = $app->getCfg('sitename');// Check if debug is on$config = JFactory::getConfig();$debug  = (boolean) $config->get('debug');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" ><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<meta http-equiv="X-UA-Compatible" content="IE=edge" />	<jdoc:include type="head" />	<script type="text/javascript">		window.addEvent('domready', function ()		{			document.getElementById('form-login').username.select();			document.getElementById('form-login').username.focus();		});	</script>	<style type="text/css">		/* Responsive Styles */		@media (max-width: 480px) {			.view-login .container {				margin-top: -170px;			}			.btn {				font-size: 13px;				padding: 4px 10px 4px;			}		}		<?php if ($debug) : ?>			.view-login .container {				position: static;				margin-top: 20px;				margin-left: auto;				margin-right: auto;			}			.view-login .navbar-fixed-bottom {				display: none;			}		<?php endif; ?>	</style>	<!--[if lt IE 9]>		<script src="../media/jui/js/html5.js"></script>	<![endif]--></head><body class="site <?php echo $option . " view-" . $view . " layout-" . $layout . " task-" . $task . " itemid-" . $itemid . " ";?>">	<!-- Container -->	<div class="container">		<div id="content">			<!-- Begin Content -->			<div id="element-box" class="login well">				<img src="<?php echo $this->baseurl; ?>/templates/<?php echo $this->template ?>/images/joomla.png" alt="Joomla!" />				<hr />				<jdoc:include type="message" />				<jdoc:include type="component" />			</div>			<noscript>				<?php echo JText::_('JGLOBAL_WARNJAVASCRIPT') ?>			</noscript>			<!-- End Content -->		</div>	</div>	<div class="navbar navbar-fixed-bottom hidden-phone">		<p class="pull-right">&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>		<a class="login-joomla" href="http://www.joomla.org" class="hasTooltip" title="<?php echo JText::_('TPL_ISIS_ISFREESOFTWARE');?>">Joomla!&#174;</a>		<a href="<?php echo JURI::root(); ?>" class="pull-left"><i class="icon-share icon-white"></i> <?php echo JText::_('COM_LOGIN_RETURN_TO_SITE_HOME_PAGE') ?></a>	</div>	<jdoc:include type="modules" name="debug" style="none" /></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Abstract Extension Model * * @abstract * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerModel extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'name',				'client_id',				'enabled',				'type',				'folder',				'extension_id',			);		}		parent::__construct($config);	}	/**	 * Returns an object list	 *	 * @param   string  $query       The query	 * @param   int     $limitstart  Offset	 * @param   int     $limit       The number of records	 *	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$ordering	= $this->getState('list.ordering');		$search		= $this->getState('filter.search');		// Replace slashes so preg_match will work		$search 	= str_replace('/', ' ', $search);		$db			= $this->getDbo();		if ($ordering == 'name' || (!empty($search) && stripos($search, 'id:') !== 0))		{			$db->setQuery($query);			$result = $db->loadObjectList();			$lang = JFactory::getLanguage();			$this->translate($result);			if (!empty($search))			{				foreach ($result as $i => $item)				{					if (!preg_match("/$search/i", $item->name))					{						unset($result[$i]);					}				}			}			JArrayHelper::sortObjects($result, $this->getState('list.ordering'), $this->getState('list.direction') == 'desc' ? -1 : 1, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			$query->order($db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array  &$items  The array of objects	 *	 * @return  array The array of translated objects	 */	private function translate(&$items)	{		$lang = JFactory::getLanguage();		foreach ($items as &$item)		{			if (strlen($item->manifest_cache))			{				$data = json_decode($item->manifest_cache);				if ($data)				{					foreach ($data as $key => $value)					{						if ($key == 'type')						{							// Ignore the type field							continue;						}						$item->$key = $value;					}				}			}			$item->author_info = @$item->authorEmail . '<br />' . @$item->authorUrl;			$item->client = $item->client_id ? JText::_('JADMINISTRATOR') : JText::_('JSITE');			$path = $item->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE;			switch ($item->type)			{				case 'component':					$extension = $item->element;					$source = JPATH_ADMINISTRATOR . '/components/' . $extension;						$lang->load("$extension.sys", JPATH_ADMINISTRATOR, null, false, false)					||	$lang->load("$extension.sys", $source, null, false, false)					||	$lang->load("$extension.sys", JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					||	$lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				break;				case 'file':					$extension = 'files_' . $item->element;						$lang->load("$extension.sys", JPATH_SITE, null, false, false)					||	$lang->load("$extension.sys", JPATH_SITE, $lang->getDefault(), false, false);				break;				case 'library':					$extension = 'lib_' . $item->element;						$lang->load("$extension.sys", JPATH_SITE, null, false, false)					||	$lang->load("$extension.sys", JPATH_SITE, $lang->getDefault(), false, false);				break;				case 'module':					$extension = $item->element;					$source = $path . '/modules/' . $extension;						$lang->load("$extension.sys", $path, null, false, false)					||	$lang->load("$extension.sys", $source, null, false, false)					||	$lang->load("$extension.sys", $path, $lang->getDefault(), false, false)					||	$lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				break;				case 'package':					$extension = $item->element;						$lang->load("$extension.sys", JPATH_SITE, null, false, false)					||	$lang->load("$extension.sys", JPATH_SITE, $lang->getDefault(), false, false);				break;				case 'plugin':					$extension = 'plg_' . $item->folder . '_' . $item->element;					$source = JPATH_PLUGINS . '/' . $item->folder . '/' . $item->element;						$lang->load("$extension.sys", JPATH_ADMINISTRATOR, null, false, false)					||	$lang->load("$extension.sys", $source, null, false, false)					||	$lang->load("$extension.sys", JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					||	$lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				break;				case 'template':					$extension = 'tpl_' . $item->element;					$source = $path . '/templates/' . $item->element;						$lang->load("$extension.sys", $path, null, false, false)					||	$lang->load("$extension.sys", $source, null, false, false)					||	$lang->load("$extension.sys", $path, $lang->getDefault(), false, false)					||	$lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				break;			}			if (!in_array($item->type, array('language', 'template', 'library')))			{				$item->name = JText::_($item->name);			}			settype($item->description, 'string');			if (!in_array($item->type, array('language')))			{				$item->description = JText::_($item->description);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Model for the global configuration * * @package     Joomla.Administrator * @subpackage  com_config */class ConfigModelApplication extends JModelForm{	/**	 * Method to get a form object.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_config.application', 'application', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the configuration data.	 *	 * This method will load the global configuration data straight from	 * JConfig. If configuration data has been saved in the session, that	 * data will be merged into the original data, overwriting it.	 *	 * @return  array  	An array containg all global config data.	 *	 * @since   1.6	 */	public function getData()	{		// Get the config data.		$config	= new JConfig;		$data	= JArrayHelper::fromObject($config);		// Prime the asset_id for the rules.		$data['asset_id'] = 1;		// Get the text filter data		$params = JComponentHelper::getParams('com_config');		$data['filters'] = JArrayHelper::fromObject($params->get('filters'));		// If no filter data found, get from com_content (update of 1.6/1.7 site)		if (empty($data['filters']))		{			$contentParams = JComponentHelper::getParams('com_content');			$data['filters'] = JArrayHelper::fromObject($contentParams->get('filters'));		}		// Check for data in the session.		$temp = JFactory::getApplication()->getUserState('com_config.config.global.data');		// Merge in the session data.		if (!empty($temp))		{			$data = array_merge($data, $temp);		}		$this->preprocessData('com_config.application', $data);		return $data;	}	/**	 * Method to save the configuration data.	 *	 * @param   array  An array containing all global config data.	 *	 * @return  bool	True on success, false on failure.	 *	 * @since   1.6	 */	public function save($data)	{		// Save the rules		if (isset($data['rules']))		{			$rules	= new JAccessRules($data['rules']);			// Check that we aren't removing our Super User permission			// Need to get groups from database, since they might have changed			$myGroups = JAccess::getGroupsByUser(JFactory::getUser()->get('id'));			$myRules = $rules->getData();			$hasSuperAdmin = $myRules['core.admin']->allow($myGroups);			if (!$hasSuperAdmin)			{				$this->setError(JText::_('COM_CONFIG_ERROR_REMOVING_SUPER_ADMIN'));				return false;			}			$asset = JTable::getInstance('asset');			if ($asset->loadByName('root.1'))			{				$asset->rules = (string) $rules;				if (!$asset->check() || !$asset->store())				{					JError::raiseNotice('SOME_ERROR_CODE', $asset->getError());				}			}			else			{				$this->setError(JText::_('COM_CONFIG_ERROR_ROOT_ASSET_NOT_FOUND'));				return false;			}			unset($data['rules']);		}		// Save the text filters		if (isset($data['filters']))		{			$registry = new JRegistry;			$registry->loadArray(array('filters' => $data['filters']));			$extension = JTable::getInstance('extension');			// Get extension_id			$extension_id = $extension->find(array('name' => 'com_config'));			if ($extension->load((int) $extension_id))			{				$extension->params = (string) $registry;				if (!$extension->check() || !$extension->store())				{					JError::raiseNotice('SOME_ERROR_CODE', $extension->getError());				}			}			else			{				$this->setError(JText::_('COM_CONFIG_ERROR_CONFIG_EXTENSION_NOT_FOUND'));				return false;			}			unset($data['filters']);		}		// Get the previous configuration.		$prev = new JConfig;		$prev = JArrayHelper::fromObject($prev);		// Merge the new data in. We do this to preserve values that were not in the form.		$data = array_merge($prev, $data);		/*		 * Perform miscellaneous options based on configuration settings/changes.		 */		// Escape the offline message if present.		if (isset($data['offline_message']))		{			$data['offline_message'] = JFilterOutput::ampReplace($data['offline_message']);		}		// Purge the database session table if we are changing to the database handler.		if ($prev['session_handler'] != 'database' && $data['session_handler'] == 'database')		{			$table = JTable::getInstance('session');			$table->purge(-1);		}		if (empty($data['cache_handler']))		{			$data['caching'] = 0;		}		// Clean the cache if disabled but previously enabled.		if (!$data['caching'] && $prev['caching'])		{			$cache = JFactory::getCache();			$cache->clean();		}		// Create the new configuration object.		$config = new JRegistry('config');		$config->loadArray($data);		// Overwrite the old FTP credentials with the new ones.		$temp = JFactory::getConfig();		$temp->set('ftp_enable', $data['ftp_enable']);		$temp->set('ftp_host', $data['ftp_host']);		$temp->set('ftp_port', $data['ftp_port']);		$temp->set('ftp_user', $data['ftp_user']);		$temp->set('ftp_pass', $data['ftp_pass']);		$temp->set('ftp_root', $data['ftp_root']);		// Clear cache of com_config component.		$this->cleanCache('_system');		// Write the configuration file.		return $this->writeConfigFile($config);	}	/**	 * Method to unset the root_user value from configuration data.	 *	 * This method will load the global configuration data straight from	 * JConfig and remove the root_user value for security, then save the configuration.	 *	 * @since   1.6	 */	public function removeroot()	{		// Get the previous configuration.		$prev = new JConfig;		$prev = JArrayHelper::fromObject($prev);		// Create the new configuration object, and unset the root_user property		$config = new JRegistry('config');		unset($prev['root_user']);		$config->loadArray($prev);		// Write the configuration file.		return $this->writeConfigFile($config);	}	/**	 * Method to write the configuration to a file.	 *	 * @param   JRegistry  $config	A JRegistry object containing all global config data.	 *	 * @return  bool	   True on success, false on failure.	 *	 * @since	2.5.4	 */	private function writeConfigFile(JRegistry $config)	{		jimport('joomla.filesystem.path');		jimport('joomla.filesystem.file');		// Set the configuration file path.		$file = JPATH_CONFIGURATION . '/configuration.php';		// Get the new FTP credentials.		$ftp = JClientHelper::getCredentials('ftp', true);		// Attempt to make the file writeable if using FTP.		if (!$ftp['enabled'] && JPath::isOwner($file) && !JPath::setPermissions($file, '0644'))		{			JError::raiseNotice('SOME_ERROR_CODE', JText::_('COM_CONFIG_ERROR_CONFIGURATION_PHP_NOTWRITABLE'));		}		// Attempt to write the configuration file as a PHP class named JConfig.		$configuration = $config->toString('PHP', array('class' => 'JConfig', 'closingtag' => false));		if (!JFile::write($file, $configuration))		{			$this->setError(JText::_('COM_CONFIG_ERROR_WRITE_FAILED'));			return false;		}		// Attempt to make the file unwriteable if using FTP.		if (!$ftp['enabled'] && JPath::isOwner($file) && !JPath::setPermissions($file, '0444'))		{			JError::raiseNotice('SOME_ERROR_CODE', JText::_('COM_CONFIG_ERROR_CONFIGURATION_PHP_NOTUNWRITABLE'));		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$langs  = ModLoginHelper::getLanguageList();$return = ModLoginHelper::getReturnURI();require JModuleHelper::getLayoutPath('mod_login', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><div id="installer-discover"><form action="<?php echo JRoute::_('index.php?option=com_installer&view=discover');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<?php if ($this->showMessage) : ?>		<?php echo $this->loadTemplate('message'); ?>	<?php endif; ?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<?php if (count($this->items)) : ?>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col"><input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" /></th>				<th class="title nowrap"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?></th>				<th class="center"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_TYPE', 'type', $listDirn, $listOrder); ?></th>				<th class="width-10 center"><?php echo JText::_('JVERSION'); ?></th>				<th class="width-10 center"><?php echo JText::_('JDATE'); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_FOLDER', 'folder', $listDirn, $listOrder); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_CLIENT', 'client_id', $listDirn, $listOrder); ?></th>				<th class="width-15 center"><?php echo JText::_('JAUTHOR'); ?></th>				<th class="nowrap id-col"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'extension_id', $listDirn, $listOrder); ?></th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2;?>">				<td><?php echo JHtml::_('grid.id', $i, $item->extension_id); ?></td>				<td><span class="bold hasTip" title="<?php echo htmlspecialchars($item->name.'::'.$item->description); ?>"><?php echo $item->name; ?></span></td>				<td class="center"><?php echo JText::_('COM_INSTALLER_TYPE_' . $item->type); ?></td>				<td class="center"><?php echo @$item->version != '' ? $item->version : '&#160;'; ?></td>				<td class="center"><?php echo @$item->creationDate != '' ? $item->creationDate : '&#160;'; ?></td>				<td class="center"><?php echo @$item->folder != '' ? $item->folder : JText::_('COM_INSTALLER_TYPE_NONAPPLICABLE'); ?></td>				<td class="center"><?php echo $item->client; ?></td>				<td class="center">					<span class="editlinktip hasTip" title="<?php echo addslashes(htmlspecialchars(JText::_('COM_INSTALLER_AUTHOR_INFORMATION').'::'.$item->author_info)); ?>">						<?php echo @$item->author != '' ? $item->author : '&#160;'; ?>					</span>				</td>				<td><?php echo $item->extension_id ?></td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<?php echo JText::_('COM_INSTALLER_MSG_DISCOVER_DESCRIPTION'); ?>	<?php else : ?>		<p class="nowarning">			<?php echo JText::_('COM_INSTALLER_MSG_DISCOVER_DESCRIPTION'); ?>		</p>		<p class="nowarning">			<?php echo JText::_('COM_INSTALLER_MSG_DISCOVER_NOEXTENSION'); ?>		</p>	<?php endif; ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Cache lite storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://pear.php.net/package/Cache_Lite/ * @since       11.1 */class JCacheStorageCachelite extends JCacheStorage{	/**	 * @var    object	 * @since  11.1	 */	protected static $CacheLiteInstance = null;	/**	 * @var	 * @since   11.1	 */	protected $_root;	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		$this->_root = $options['cachebase'];		$cloptions = array(			'cacheDir' => $this->_root . '/',			'lifeTime' => $this->_lifetime,			'fileLocking' => $this->_locking,			'automaticCleaningFactor' => isset($options['autoclean']) ? $options['autoclean'] : 200,			'fileNameProtection' => false,			'hashedDirectoryLevel' => 0,			'caching' => $options['caching']);		if (self::$CacheLiteInstance === null)		{			$this->initCache($cloptions);		}	}	/**	 * Instantiates the appropriate CacheLite object.	 * Only initializes the engine if it does not already exist.	 * Note this is a protected method	 *	 * @param   array  $cloptions  optional parameters	 *	 * @return  object	 *	 * @since   11.1	 */	protected function initCache($cloptions)	{		require_once 'Cache/Lite.php';		self::$CacheLiteInstance = new Cache_Lite($cloptions);		return self::$CacheLiteInstance;	}	/**	 * Get cached data from a file by id and group	 *	 * @param   string   $id         The cache data id.	 * @param   string   $group      The cache data group.	 * @param   boolean  $checkTime  True to verify cache time expiration threshold.	 *	 * @return  mixed  Boolean false on failure or a cached data string.	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		self::$CacheLiteInstance->setOption('cacheDir', $this->_root . '/' . $group . '/');		$this->_getCacheId($id, $group);		$data = self::$CacheLiteInstance->get($this->rawname, $group);		return $data;	}	/**	 * Get all cached data	 *	 * @return  array	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$path = $this->_root;		$folders = new DirectoryIterator($path);		$data = array();		foreach ($folders as $folder)		{			if (!$folder->isDir() || $folder->isDot())			{				continue;			}			$foldername = $folder->getFilename();			$files = new DirectoryIterator($path . '/' . $foldername);			$item  = new JCacheStorageHelper($foldername);			foreach ($files as $file)			{				if (!$file->isFile())				{					continue;				}				$filename = $file->getFilename();				$item->updateSize(filesize($path . '/' . $foldername . '/' . $filename) / 1024);			}			$data[$foldername] = $item;		}		return $data;	}	/**	 * Store the data to a file by id and group	 *	 * @param   string  $id     The cache data id.	 * @param   string  $group  The cache data group.	 * @param   string  $data   The data to store in cache.	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$dir = $this->_root . '/' . $group;		// If the folder doesn't exist try to create it		if (!is_dir($dir))		{			// Make sure the index file is there			$indexFile = $dir . '/index.html';			@mkdir($dir) && file_put_contents($indexFile, '<!DOCTYPE html><title></title>');		}		// Make sure the folder exists		if (!is_dir($dir))		{			return false;		}		self::$CacheLiteInstance->setOption('cacheDir', $this->_root . '/' . $group . '/');		$this->_getCacheId($id, $group);		$success = self::$CacheLiteInstance->save($data, $this->rawname, $group);		if ($success == true)		{			return $success;		}		else		{			return false;		}	}	/**	 * Remove a cached data file by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		self::$CacheLiteInstance->setOption('cacheDir', $this->_root . '/' . $group . '/');		$this->_getCacheId($id, $group);		$success = self::$CacheLiteInstance->remove($this->rawname, $group);		if ($success == true)		{			return $success;		}		else		{			return false;		}	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group.	 * @param   string  $mode   The mode for cleaning cache [group|notgroup].	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		jimport('joomla.filesystem.folder');		if (trim($group) == '')		{			$clmode = 'notgroup';		}		if ($mode == null)		{			$clmode = 'group';		}		switch ($mode)		{			case 'notgroup':				$clmode = 'notingroup';				$success = self::$CacheLiteInstance->clean($group, $clmode);				break;			case 'group':				if (is_dir($this->_root . '/' . $group))				{					$clmode = $group;					self::$CacheLiteInstance->setOption('cacheDir', $this->_root . '/' . $group . '/');					$success = self::$CacheLiteInstance->clean($group, $clmode);					JFolder::delete($this->_root . '/' . $group);				}				else				{					$success = true;				}				break;			default:				if (is_dir($this->_root . '/' . $group))				{					$clmode = $group;					self::$CacheLiteInstance->setOption('cacheDir', $this->_root . '/' . $group . '/');					$success = self::$CacheLiteInstance->clean($group, $clmode);				}				else				{					$success = true;				}				break;		}		if ($success == true)		{			return $success;		}		else		{			return false;		}	}	/**	 * Garbage collect expired cache data	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		$result = true;		self::$CacheLiteInstance->setOption('automaticCleaningFactor', 1);		self::$CacheLiteInstance->setOption('hashedDirectoryLevel', 1);		$success1 = self::$CacheLiteInstance->_cleanDir($this->_root . '/', false, 'old');		if (!($dh = opendir($this->_root . '/')))		{			return false;		}		while ($file = readdir($dh))		{			if (($file != '.') && ($file != '..') && ($file != '.svn'))			{				$file2 = $this->_root . '/' . $file;				if (is_dir($file2))				{					$result = ($result && (self::$CacheLiteInstance->_cleanDir($file2 . '/', false, 'old')));				}			}		}		$success = ($success1 && $result);		return $success;	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		@include_once 'Cache/Lite.php';		if (class_exists('Cache_Lite'))		{			return true;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');$user = JFactory::getUser();$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_doc, &$params));?>		<tr>			<td>				<a  title="<?php echo $this->_tmp_doc->name; ?>">					<?php  echo JHtml::_('image', $this->_tmp_doc->icon_16, $this->_tmp_doc->title, null, true, true) ? JHtml::_('image', $this->_tmp_doc->icon_16, $this->_tmp_doc->title, array('width' => 16, 'height' => 16), true) : JHtml::_('image', 'media/con_info.png', $this->_tmp_doc->title, array('width' => 16, 'height' => 16), true);?> </a>			</td>			<td class="description"  title="<?php echo $this->_tmp_doc->name; ?>">				<?php echo $this->_tmp_doc->title; ?>			</td>			<td>&#160;			</td>			<td class="filesize">				<?php echo JHtml::_('number.bytes', $this->_tmp_doc->size); ?>			</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>				<a class="delete-item" target="_top" href="index.php?option=com_media&amp;task=file.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_doc->name; ?>" rel="<?php echo $this->_tmp_doc->name; ?>"><i class="icon-remove hasTooltip" title="<?php echo JText::_('JACTION_DELETE');?>"></i></a>				<input type="checkbox" name="rm[]" value="<?php echo $this->_tmp_doc->name; ?>" />			</td>		<?php endif;?>		</tr><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_doc, &$params));?>
<?php/** * @package     Joomla.Platform * @subpackage  Profiler * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class to assist in the process of benchmarking the execution * of sections of code to understand where time is being spent. * * @package     Joomla.Platform * @subpackage  Profiler * @since       11.1 */class JProfiler{	/**	 * @var    integer  The start time.	 * @since  12.1	 */	protected $start = 0;	/**	 * @var    string  The prefix to use in the output	 * @since  12.1	 */	protected $prefix = '';	/**	 * @var    array  The buffer of profiling messages.	 * @since  12.1	 */	protected $buffer = null;	/**	 * @var    float	 * @since  12.1	 */	protected $previousTime = 0.0;	/**	 * @var    float	 * @since  12.1	 */	protected $previousMem = 0.0;	/**	 * @var    array  JProfiler instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   string  $prefix  Prefix for mark messages	 *	 * @since  11.1	 */	public function __construct($prefix = '')	{		$this->start = $this->getmicrotime();		$this->prefix = $prefix;		$this->buffer = array();	}	/**	 * Returns the global Profiler object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $prefix  Prefix used to distinguish profiler objects.	 *	 * @return  JProfiler  The Profiler object.	 *	 * @since   11.1	 */	public static function getInstance($prefix = '')	{		if (empty(self::$instances[$prefix]))		{			self::$instances[$prefix] = new JProfiler($prefix);		}		return self::$instances[$prefix];	}	/**	 * Output a time mark	 *	 * The mark is returned as text enclosed in <div> tags	 * with a CSS class of 'profiler'.	 *	 * @param   string  $label  A label for the time mark	 *	 * @return  string  Mark enclosed in <div> tags	 *	 * @since   11.1	 */	public function mark($label)	{		$current = self::getmicrotime() - $this->start;		$currentMem = 0;		$currentMem = memory_get_usage() / 1048576;		$mark = sprintf(			'<code>%s %.3f seconds (+%.3f); %0.2f MB (%s%0.3f) - %s</code>',			$this->prefix,			$current,			$current - $this->previousTime,			$currentMem,			($currentMem > $this->previousMem) ? '+' : '', $currentMem - $this->previousMem,			$label		);		$this->previousTime = $current;		$this->previousMem = $currentMem;		$this->buffer[] = $mark;		return $mark;	}	/**	 * Get the current time.	 *	 * @return  float The current time	 *	 * @since   11.1	 */	public static function getmicrotime()	{		list ($usec, $sec) = explode(' ', microtime());		return ((float) $usec + (float) $sec);	}	/**	 * Get information about current memory usage.	 *	 * @return  integer  The memory usage	 *	 * @link    PHP_MANUAL#memory_get_usage	 * @since   11.1	 * @deprecated  12.3  Use PHP's native memory_get_usage()	 */	public function getMemory()	{		return memory_get_usage();	}	/**	 * Get all profiler marks.	 *	 * Returns an array of all marks created since the Profiler object	 * was instantiated.  Marks are strings as per {@link JProfiler::mark()}.	 *	 * @return  array  Array of profiler marks	 */	public function getBuffer()	{		return $this->buffer;	}}
<?php/** * Akeeba Restore * A JSON-powered JPA, JPS and ZIP archive extraction library *  * @copyright 2010-2012 Nicholas K. Dionysopoulos / AkeebaBackup.com * @license GNU GPL v2 or - at your option - any later version * @package akeebabackup * @subpackage kickstart */define('_AKEEBA_RESTORATION', 1);defined('DS') or define('DS', DIRECTORY_SEPARATOR);// Unarchiver run statesdefine('AK_STATE_NOFILE',	0); // File header not read yetdefine('AK_STATE_HEADER',	1); // File header read; ready to process datadefine('AK_STATE_DATA',		2); // Processing file datadefine('AK_STATE_DATAREAD',	3); // Finished processing file data; ready to post-processdefine('AK_STATE_POSTPROC',	4); // Post-processingdefine('AK_STATE_DONE',		5); // Done with post-processing/* Windows system detection */if(!defined('_AKEEBA_IS_WINDOWS')){	if (function_exists('php_uname'))		define('_AKEEBA_IS_WINDOWS', stristr(php_uname(), 'windows'));	else		define('_AKEEBA_IS_WINDOWS', DIRECTORY_SEPARATOR == '\\');}// Make sure the locale is correct for basename() to workif(function_exists('setlocale')){	@setlocale(LC_ALL, 'en_US.UTF8');}// fnmatch not available on non-POSIX systems// Thanks to soywiz@php.net for this usefull alternative function [http://gr2.php.net/fnmatch]if (!function_exists('fnmatch')) {	function fnmatch($pattern, $string) {		return @preg_match(			'/^' . strtr(addcslashes($pattern, '/\\.+^$(){}=!<>|'),		array('*' => '.*', '?' => '.?')) . '$/i', $string		);	}}// Unicode-safe binary data length functionif(function_exists('mb_strlen')) {	function akstringlen($string) { return mb_strlen($string,'8bit'); }} else {	function akstringlen($string) { return strlen($string); }}/** * Gets a query parameter from GET or POST data * @param $key * @param $default */function getQueryParam( $key, $default = null ){	$value = null;	if(array_key_exists($key, $_REQUEST)) {		$value = $_REQUEST[$key];	} elseif(array_key_exists($key, $_POST)) {		$value = $_POST[$key];	} elseif(array_key_exists($key, $_GET)) {		$value = $_GET[$key];	} else {		return $default;	}	if(get_magic_quotes_gpc() && !is_null($value)) $value=stripslashes($value);	return $value;}/** * Akeeba Backup's JSON compatibility layer * * On systems where json_encode and json_decode are not available, Akeeba * Backup will attempt to use PEAR's Services_JSON library to emulate them. * A copy of this library is included in this file and will be used if and * only if it isn't already loaded, e.g. due to PEAR's auto-loading, or a * 3PD extension loading it for its own purposes. *//** * Converts to and from JSON format. * * JSON (JavaScript Object Notation) is a lightweight data-interchange * format. It is easy for humans to read and write. It is easy for machines * to parse and generate. It is based on a subset of the JavaScript * Programming Language, Standard ECMA-262 3rd Edition - December 1999. * This feature can also be found in  Python. JSON is a text format that is * completely language independent but uses conventions that are familiar * to programmers of the C-family of languages, including C, C++, C#, Java, * JavaScript, Perl, TCL, and many others. These properties make JSON an * ideal data-interchange language. * * This package provides a simple encoder and decoder for JSON notation. It * is intended for use with client-side Javascript applications that make * use of HTTPRequest to perform server communication functions - data can * be encoded into JSON notation for use in a client-side javascript, or * decoded from incoming Javascript requests. JSON format is native to * Javascript, and can be directly eval()'ed with no further parsing * overhead * * All strings should be in ASCII or UTF-8 format! * * LICENSE: Redistribution and use in source and binary forms, with or * without modification, are permitted provided that the following * conditions are met: Redistributions of source code must retain the * above copyright notice, this list of conditions and the following * disclaimer. Redistributions in binary form must reproduce the above * copyright notice, this list of conditions and the following disclaimer * in the documentation and/or other materials provided with the * distribution. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN * NO EVENT SHALL CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH * DAMAGE. * * @category * @package     Services_JSON * @author      Michal Migurski <mike-json@teczno.com> * @author      Matt Knapp <mdknapp[at]gmail[dot]com> * @author      Brett Stimmerman <brettstimmerman[at]gmail[dot]com> * @copyright   2005 Michal Migurski * @version     CVS: $Id: restore.php 612 2011-05-19 08:26:26Z nikosdion $ * @license     http://www.opensource.org/licenses/bsd-license.php * @link        http://pear.php.net/pepr/pepr-proposal-show.php?id=198 */if(!defined('JSON_FORCE_OBJECT')){	define('JSON_FORCE_OBJECT', 1);}if(!defined('SERVICES_JSON_SLICE')){	/**	 * Marker constant for Services_JSON::decode(), used to flag stack state	 */	define('SERVICES_JSON_SLICE',   1);	/**	 * Marker constant for Services_JSON::decode(), used to flag stack state	 */	define('SERVICES_JSON_IN_STR',  2);	/**	 * Marker constant for Services_JSON::decode(), used to flag stack state	 */	define('SERVICES_JSON_IN_ARR',  3);	/**	 * Marker constant for Services_JSON::decode(), used to flag stack state	 */	define('SERVICES_JSON_IN_OBJ',  4);	/**	 * Marker constant for Services_JSON::decode(), used to flag stack state	 */	define('SERVICES_JSON_IN_CMT', 5);	/**	 * Behavior switch for Services_JSON::decode()	 */	define('SERVICES_JSON_LOOSE_TYPE', 16);	/**	 * Behavior switch for Services_JSON::decode()	 */	define('SERVICES_JSON_SUPPRESS_ERRORS', 32);}/** * Converts to and from JSON format. * * Brief example of use: * * <code> * // create a new instance of Services_JSON * $json = new Services_JSON(); * * // convert a complexe value to JSON notation, and send it to the browser * $value = array('foo', 'bar', array(1, 2, 'baz'), array(3, array(4))); * $output = $json->encode($value); * * print($output); * // prints: ["foo","bar",[1,2,"baz"],[3,[4]]] * * // accept incoming POST data, assumed to be in JSON notation * $input = file_get_contents('php://input', 1000000); * $value = $json->decode($input); * </code> */if(!class_exists('Akeeba_Services_JSON')){	class Akeeba_Services_JSON	{	   /**	    * constructs a new JSON instance	    *	    * @param    int     $use    object behavior flags; combine with boolean-OR	    *	    *                           possible values:	    *                           - SERVICES_JSON_LOOSE_TYPE:  loose typing.	    *                                   "{...}" syntax creates associative arrays	    *                                   instead of objects in decode().	    *                           - SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.	    *                                   Values which can't be encoded (e.g. resources)	    *                                   appear as NULL instead of throwing errors.	    *                                   By default, a deeply-nested resource will	    *                                   bubble up with an error, so all return values	    *                                   from encode() should be checked with isError()	    */	    function Akeeba_Services_JSON($use = 0)	    {	        $this->use = $use;	    }	   /**	    * convert a string from one UTF-16 char to one UTF-8 char	    *	    * Normally should be handled by mb_convert_encoding, but	    * provides a slower PHP-only method for installations	    * that lack the multibye string extension.	    *	    * @param    string  $utf16  UTF-16 character	    * @return   string  UTF-8 character	    * @access   private	    */	    function utf162utf8($utf16)	    {	        // oh please oh please oh please oh please oh please	        if(function_exists('mb_convert_encoding')) {	            return mb_convert_encoding($utf16, 'UTF-8', 'UTF-16');	        }	        $bytes = (ord($utf16{0}) << 8) | ord($utf16{1});	        switch(true) {	            case ((0x7F & $bytes) == $bytes):	                // this case should never be reached, because we are in ASCII range	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return chr(0x7F & $bytes);	            case (0x07FF & $bytes) == $bytes:	                // return a 2-byte UTF-8 character	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return chr(0xC0 | (($bytes >> 6) & 0x1F))	                     . chr(0x80 | ($bytes & 0x3F));	            case (0xFFFF & $bytes) == $bytes:	                // return a 3-byte UTF-8 character	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return chr(0xE0 | (($bytes >> 12) & 0x0F))	                     . chr(0x80 | (($bytes >> 6) & 0x3F))	                     . chr(0x80 | ($bytes & 0x3F));	        }	        // ignoring UTF-32 for now, sorry	        return '';	    }	   /**	    * convert a string from one UTF-8 char to one UTF-16 char	    *	    * Normally should be handled by mb_convert_encoding, but	    * provides a slower PHP-only method for installations	    * that lack the multibye string extension.	    *	    * @param    string  $utf8   UTF-8 character	    * @return   string  UTF-16 character	    * @access   private	    */	    function utf82utf16($utf8)	    {	        // oh please oh please oh please oh please oh please	        if(function_exists('mb_convert_encoding')) {	            return mb_convert_encoding($utf8, 'UTF-16', 'UTF-8');	        }	        switch(strlen($utf8)) {	            case 1:	                // this case should never be reached, because we are in ASCII range	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return $utf8;	            case 2:	                // return a UTF-16 character from a 2-byte UTF-8 char	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return chr(0x07 & (ord($utf8{0}) >> 2))	                     . chr((0xC0 & (ord($utf8{0}) << 6))	                         | (0x3F & ord($utf8{1})));	            case 3:	                // return a UTF-16 character from a 3-byte UTF-8 char	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return chr((0xF0 & (ord($utf8{0}) << 4))	                         | (0x0F & (ord($utf8{1}) >> 2)))	                     . chr((0xC0 & (ord($utf8{1}) << 6))	                         | (0x7F & ord($utf8{2})));	        }	        // ignoring UTF-32 for now, sorry	        return '';	    }	   /**	    * encodes an arbitrary variable into JSON format	    *	    * @param    mixed   $var    any number, boolean, string, array, or object to be encoded.	    *                           see argument 1 to Services_JSON() above for array-parsing behavior.	    *                           if var is a strng, note that encode() always expects it	    *                           to be in ASCII or UTF-8 format!	    *	    * @return   mixed   JSON string representation of input var or an error if a problem occurs	    * @access   public	    */	    function encode($var)	    {	        switch (gettype($var)) {	            case 'boolean':	                return $var ? 'true' : 'false';	            case 'NULL':	                return 'null';	            case 'integer':	                return (int) $var;	            case 'double':	            case 'float':	                return (float) $var;	            case 'string':	                // STRINGS ARE EXPECTED TO BE IN ASCII OR UTF-8 FORMAT	                $ascii = '';	                $strlen_var = strlen($var);	               /*	                * Iterate over every character in the string,	                * escaping with a slash or encoding to UTF-8 where necessary	                */	                for ($c = 0; $c < $strlen_var; ++$c) {	                    $ord_var_c = ord($var{$c});	                    switch (true) {	                        case $ord_var_c == 0x08:	                            $ascii .= '\b';	                            break;	                        case $ord_var_c == 0x09:	                            $ascii .= '\t';	                            break;	                        case $ord_var_c == 0x0A:	                            $ascii .= '\n';	                            break;	                        case $ord_var_c == 0x0C:	                            $ascii .= '\f';	                            break;	                        case $ord_var_c == 0x0D:	                            $ascii .= '\r';	                            break;	                        case $ord_var_c == 0x22:	                        case $ord_var_c == 0x2F:	                        case $ord_var_c == 0x5C:	                            // double quote, slash, slosh	                            $ascii .= '\\'.$var{$c};	                            break;	                        case (($ord_var_c >= 0x20) && ($ord_var_c <= 0x7F)):	                            // characters U-00000000 - U-0000007F (same as ASCII)	                            $ascii .= $var{$c};	                            break;	                        case (($ord_var_c & 0xE0) == 0xC0):	                            // characters U-00000080 - U-000007FF, mask 110XXXXX	                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                            $char = pack('C*', $ord_var_c, ord($var{$c + 1}));	                            $c += 1;	                            $utf16 = $this->utf82utf16($char);	                            $ascii .= sprintf('\u%04s', bin2hex($utf16));	                            break;	                        case (($ord_var_c & 0xF0) == 0xE0):	                            // characters U-00000800 - U-0000FFFF, mask 1110XXXX	                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                            $char = pack('C*', $ord_var_c,	                                         ord($var{$c + 1}),	                                         ord($var{$c + 2}));	                            $c += 2;	                            $utf16 = $this->utf82utf16($char);	                            $ascii .= sprintf('\u%04s', bin2hex($utf16));	                            break;	                        case (($ord_var_c & 0xF8) == 0xF0):	                            // characters U-00010000 - U-001FFFFF, mask 11110XXX	                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                            $char = pack('C*', $ord_var_c,	                                         ord($var{$c + 1}),	                                         ord($var{$c + 2}),	                                         ord($var{$c + 3}));	                            $c += 3;	                            $utf16 = $this->utf82utf16($char);	                            $ascii .= sprintf('\u%04s', bin2hex($utf16));	                            break;	                        case (($ord_var_c & 0xFC) == 0xF8):	                            // characters U-00200000 - U-03FFFFFF, mask 111110XX	                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                            $char = pack('C*', $ord_var_c,	                                         ord($var{$c + 1}),	                                         ord($var{$c + 2}),	                                         ord($var{$c + 3}),	                                         ord($var{$c + 4}));	                            $c += 4;	                            $utf16 = $this->utf82utf16($char);	                            $ascii .= sprintf('\u%04s', bin2hex($utf16));	                            break;	                        case (($ord_var_c & 0xFE) == 0xFC):	                            // characters U-04000000 - U-7FFFFFFF, mask 1111110X	                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                            $char = pack('C*', $ord_var_c,	                                         ord($var{$c + 1}),	                                         ord($var{$c + 2}),	                                         ord($var{$c + 3}),	                                         ord($var{$c + 4}),	                                         ord($var{$c + 5}));	                            $c += 5;	                            $utf16 = $this->utf82utf16($char);	                            $ascii .= sprintf('\u%04s', bin2hex($utf16));	                            break;	                    }	                }	                return '"'.$ascii.'"';	            case 'array':	               /*	                * As per JSON spec if any array key is not an integer	                * we must treat the the whole array as an object. We	                * also try to catch a sparsely populated associative	                * array with numeric keys here because some JS engines	                * will create an array with empty indexes up to	                * max_index which can cause memory issues and because	                * the keys, which may be relevant, will be remapped	                * otherwise.	                *	                * As per the ECMA and JSON specification an object may	                * have any string as a property. Unfortunately due to	                * a hole in the ECMA specification if the key is a	                * ECMA reserved word or starts with a digit the	                * parameter is only accessible using ECMAScript's	                * bracket notation.	                */	                // treat as a JSON object	                if (is_array($var) && count($var) && (array_keys($var) !== range(0, sizeof($var) - 1))) {	                    $properties = array_map(array($this, 'name_value'),	                                            array_keys($var),	                                            array_values($var));	                    foreach($properties as $property) {	                        if(Akeeba_Services_JSON::isError($property)) {	                            return $property;	                        }	                    }	                    return '{' . join(',', $properties) . '}';	                }	                // treat it like a regular array	                $elements = array_map(array($this, 'encode'), $var);	                foreach($elements as $element) {	                    if(Akeeba_Services_JSON::isError($element)) {	                        return $element;	                    }	                }	                return '[' . join(',', $elements) . ']';	            case 'object':	                $vars = get_object_vars($var);	                $properties = array_map(array($this, 'name_value'),	                                        array_keys($vars),	                                        array_values($vars));	                foreach($properties as $property) {	                    if(Akeeba_Services_JSON::isError($property)) {	                        return $property;	                    }	                }	                return '{' . join(',', $properties) . '}';	            default:	                return ($this->use & SERVICES_JSON_SUPPRESS_ERRORS)	                    ? 'null'	                    : new Akeeba_Services_JSON_Error(gettype($var)." can not be encoded as JSON string");	        }	    }	   /**	    * array-walking function for use in generating JSON-formatted name-value pairs	    *	    * @param    string  $name   name of key to use	    * @param    mixed   $value  reference to an array element to be encoded	    *	    * @return   string  JSON-formatted name-value pair, like '"name":value'	    * @access   private	    */	    function name_value($name, $value)	    {	        $encoded_value = $this->encode($value);	        if(Akeeba_Services_JSON::isError($encoded_value)) {	            return $encoded_value;	        }	        return $this->encode(strval($name)) . ':' . $encoded_value;	    }	   /**	    * reduce a string by removing leading and trailing comments and whitespace	    *	    * @param    $str    string      string value to strip of comments and whitespace	    *	    * @return   string  string value stripped of comments and whitespace	    * @access   private	    */	    function reduce_string($str)	    {	        $str = preg_replace(array(	                // eliminate single line comments in '// ...' form	                '#^\s*//(.+)$#m',	                // eliminate multi-line comments in '/* ... */' form, at start of string	                '#^\s*/\*(.+)\*/#Us',	                // eliminate multi-line comments in '/* ... */' form, at end of string	                '#/\*(.+)\*/\s*$#Us'	            ), '', $str);	        // eliminate extraneous space	        return trim($str);	    }	   /**	    * decodes a JSON string into appropriate variable	    *	    * @param    string  $str    JSON-formatted string	    *	    * @return   mixed   number, boolean, string, array, or object	    *                   corresponding to given JSON input string.	    *                   See argument 1 to Akeeba_Services_JSON() above for object-output behavior.	    *                   Note that decode() always returns strings	    *                   in ASCII or UTF-8 format!	    * @access   public	    */	    function decode($str)	    {	        $str = $this->reduce_string($str);	        switch (strtolower($str)) {	            case 'true':	                return true;	            case 'false':	                return false;	            case 'null':	                return null;	            default:	                $m = array();	                if (is_numeric($str)) {	                    // Lookie-loo, it's a number	                    // This would work on its own, but I'm trying to be	                    // good about returning integers where appropriate:	                    // return (float)$str;	                    // Return float or int, as appropriate	                    return ((float)$str == (integer)$str)	                        ? (integer)$str	                        : (float)$str;	                } elseif (preg_match('/^("|\').*(\1)$/s', $str, $m) && $m[1] == $m[2]) {	                    // STRINGS RETURNED IN UTF-8 FORMAT	                    $delim = substr($str, 0, 1);	                    $chrs = substr($str, 1, -1);	                    $utf8 = '';	                    $strlen_chrs = strlen($chrs);	                    for ($c = 0; $c < $strlen_chrs; ++$c) {	                        $substr_chrs_c_2 = substr($chrs, $c, 2);	                        $ord_chrs_c = ord($chrs{$c});	                        switch (true) {	                            case $substr_chrs_c_2 == '\b':	                                $utf8 .= chr(0x08);	                                ++$c;	                                break;	                            case $substr_chrs_c_2 == '\t':	                                $utf8 .= chr(0x09);	                                ++$c;	                                break;	                            case $substr_chrs_c_2 == '\n':	                                $utf8 .= chr(0x0A);	                                ++$c;	                                break;	                            case $substr_chrs_c_2 == '\f':	                                $utf8 .= chr(0x0C);	                                ++$c;	                                break;	                            case $substr_chrs_c_2 == '\r':	                                $utf8 .= chr(0x0D);	                                ++$c;	                                break;	                            case $substr_chrs_c_2 == '\\"':	                            case $substr_chrs_c_2 == '\\\'':	                            case $substr_chrs_c_2 == '\\\\':	                            case $substr_chrs_c_2 == '\\/':	                                if (($delim == '"' && $substr_chrs_c_2 != '\\\'') ||	                                   ($delim == "'" && $substr_chrs_c_2 != '\\"')) {	                                    $utf8 .= $chrs{++$c};	                                }	                                break;	                            case preg_match('/\\\u[0-9A-F]{4}/i', substr($chrs, $c, 6)):	                                // single, escaped unicode character	                                $utf16 = chr(hexdec(substr($chrs, ($c + 2), 2)))	                                       . chr(hexdec(substr($chrs, ($c + 4), 2)));	                                $utf8 .= $this->utf162utf8($utf16);	                                $c += 5;	                                break;	                            case ($ord_chrs_c >= 0x20) && ($ord_chrs_c <= 0x7F):	                                $utf8 .= $chrs{$c};	                                break;	                            case ($ord_chrs_c & 0xE0) == 0xC0:	                                // characters U-00000080 - U-000007FF, mask 110XXXXX	                                //see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                                $utf8 .= substr($chrs, $c, 2);	                                ++$c;	                                break;	                            case ($ord_chrs_c & 0xF0) == 0xE0:	                                // characters U-00000800 - U-0000FFFF, mask 1110XXXX	                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                                $utf8 .= substr($chrs, $c, 3);	                                $c += 2;	                                break;	                            case ($ord_chrs_c & 0xF8) == 0xF0:	                                // characters U-00010000 - U-001FFFFF, mask 11110XXX	                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                                $utf8 .= substr($chrs, $c, 4);	                                $c += 3;	                                break;	                            case ($ord_chrs_c & 0xFC) == 0xF8:	                                // characters U-00200000 - U-03FFFFFF, mask 111110XX	                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                                $utf8 .= substr($chrs, $c, 5);	                                $c += 4;	                                break;	                            case ($ord_chrs_c & 0xFE) == 0xFC:	                                // characters U-04000000 - U-7FFFFFFF, mask 1111110X	                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                                $utf8 .= substr($chrs, $c, 6);	                                $c += 5;	                                break;	                        }	                    }	                    return $utf8;	                } elseif (preg_match('/^\[.*\]$/s', $str) || preg_match('/^\{.*\}$/s', $str)) {	                    // array, or object notation	                    if ($str{0} == '[') {	                        $stk = array(SERVICES_JSON_IN_ARR);	                        $arr = array();	                    } else {	                        if ($this->use & SERVICES_JSON_LOOSE_TYPE) {	                            $stk = array(SERVICES_JSON_IN_OBJ);	                            $obj = array();	                        } else {	                            $stk = array(SERVICES_JSON_IN_OBJ);	                            $obj = new stdClass();	                        }	                    }	                    array_push($stk, array('what'  => SERVICES_JSON_SLICE,	                                           'where' => 0,	                                           'delim' => false));	                    $chrs = substr($str, 1, -1);	                    $chrs = $this->reduce_string($chrs);	                    if ($chrs == '') {	                        if (reset($stk) == SERVICES_JSON_IN_ARR) {	                            return $arr;	                        } else {	                            return $obj;	                        }	                    }	                    //print("\nparsing {$chrs}\n");	                    $strlen_chrs = strlen($chrs);	                    for ($c = 0; $c <= $strlen_chrs; ++$c) {	                        $top = end($stk);	                        $substr_chrs_c_2 = substr($chrs, $c, 2);	                        if (($c == $strlen_chrs) || (($chrs{$c} == ',') && ($top['what'] == SERVICES_JSON_SLICE))) {	                            // found a comma that is not inside a string, array, etc.,	                            // OR we've reached the end of the character list	                            $slice = substr($chrs, $top['where'], ($c - $top['where']));	                            array_push($stk, array('what' => SERVICES_JSON_SLICE, 'where' => ($c + 1), 'delim' => false));	                            //print("Found split at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");	                            if (reset($stk) == SERVICES_JSON_IN_ARR) {	                                // we are in an array, so just push an element onto the stack	                                array_push($arr, $this->decode($slice));	                            } elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {	                                // we are in an object, so figure	                                // out the property name and set an	                                // element in an associative array,	                                // for now	                                $parts = array();	                                if (preg_match('/^\s*(["\'].*[^\\\]["\'])\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {	                                    // "name":value pair	                                    $key = $this->decode($parts[1]);	                                    $val = $this->decode($parts[2]);	                                    if ($this->use & SERVICES_JSON_LOOSE_TYPE) {	                                        $obj[$key] = $val;	                                    } else {	                                        $obj->$key = $val;	                                    }	                                } elseif (preg_match('/^\s*(\w+)\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {	                                    // name:value pair, where name is unquoted	                                    $key = $parts[1];	                                    $val = $this->decode($parts[2]);	                                    if ($this->use & SERVICES_JSON_LOOSE_TYPE) {	                                        $obj[$key] = $val;	                                    } else {	                                        $obj->$key = $val;	                                    }	                                }	                            }	                        } elseif ((($chrs{$c} == '"') || ($chrs{$c} == "'")) && ($top['what'] != SERVICES_JSON_IN_STR)) {	                            // found a quote, and we are not inside a string	                            array_push($stk, array('what' => SERVICES_JSON_IN_STR, 'where' => $c, 'delim' => $chrs{$c}));	                            //print("Found start of string at {$c}\n");	                        } elseif (($chrs{$c} == $top['delim']) &&	                                 ($top['what'] == SERVICES_JSON_IN_STR) &&	                                 ((strlen(substr($chrs, 0, $c)) - strlen(rtrim(substr($chrs, 0, $c), '\\'))) % 2 != 1)) {	                            // found a quote, we're in a string, and it's not escaped	                            // we know that it's not escaped becase there is _not_ an	                            // odd number of backslashes at the end of the string so far	                            array_pop($stk);	                            //print("Found end of string at {$c}: ".substr($chrs, $top['where'], (1 + 1 + $c - $top['where']))."\n");	                        } elseif (($chrs{$c} == '[') &&	                                 in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {	                            // found a left-bracket, and we are in an array, object, or slice	                            array_push($stk, array('what' => SERVICES_JSON_IN_ARR, 'where' => $c, 'delim' => false));	                            //print("Found start of array at {$c}\n");	                        } elseif (($chrs{$c} == ']') && ($top['what'] == SERVICES_JSON_IN_ARR)) {	                            // found a right-bracket, and we're in an array	                            array_pop($stk);	                            //print("Found end of array at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");	                        } elseif (($chrs{$c} == '{') &&	                                 in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {	                            // found a left-brace, and we are in an array, object, or slice	                            array_push($stk, array('what' => SERVICES_JSON_IN_OBJ, 'where' => $c, 'delim' => false));	                            //print("Found start of object at {$c}\n");	                        } elseif (($chrs{$c} == '}') && ($top['what'] == SERVICES_JSON_IN_OBJ)) {	                            // found a right-brace, and we're in an object	                            array_pop($stk);	                            //print("Found end of object at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");	                        } elseif (($substr_chrs_c_2 == '/*') &&	                                 in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {	                            // found a comment start, and we are in an array, object, or slice	                            array_push($stk, array('what' => SERVICES_JSON_IN_CMT, 'where' => $c, 'delim' => false));	                            $c++;	                            //print("Found start of comment at {$c}\n");	                        } elseif (($substr_chrs_c_2 == '*/') && ($top['what'] == SERVICES_JSON_IN_CMT)) {	                            // found a comment end, and we're in one now	                            array_pop($stk);	                            $c++;	                            for ($i = $top['where']; $i <= $c; ++$i)	                                $chrs = substr_replace($chrs, ' ', $i, 1);	                            //print("Found end of comment at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");	                        }	                    }	                    if (reset($stk) == SERVICES_JSON_IN_ARR) {	                        return $arr;	                    } elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {	                        return $obj;	                    }	                }	        }	    }	    function isError($data, $code = null)	    {	        if (class_exists('pear')) {	            return PEAR::isError($data, $code);	        } elseif (is_object($data) && (get_class($data) == 'services_json_error' ||	                                 is_subclass_of($data, 'services_json_error'))) {	            return true;	        }	        return false;	    }	}    class Akeeba_Services_JSON_Error    {        function Akeeba_Services_JSON_Error($message = 'unknown error', $code = null,                                     $mode = null, $options = null, $userinfo = null)        {        }    }}if(!function_exists('json_encode')){	function json_encode($value, $options = 0) {		$flags = SERVICES_JSON_LOOSE_TYPE;		if( $options & JSON_FORCE_OBJECT ) $flags = 0;		$encoder = new Akeeba_Services_JSON($flags);		return $encoder->encode($value);	}}if(!function_exists('json_decode')){	function json_decode($value, $assoc = false)	{		$flags = 0;		if($assoc) $flags = SERVICES_JSON_LOOSE_TYPE;		$decoder = new Akeeba_Services_JSON($flags);		return $decoder->decode($value);	}}/** * The base class of Akeeba Engine objects. Allows for error and warnings logging * and propagation. Largely based on the Joomla! 1.5 JObject class. */abstract class AKAbstractObject{	/** @var	array	An array of errors */	private $_errors = array();	/** @var	array	The queue size of the $_errors array. Set to 0 for infinite size. */	protected $_errors_queue_size = 0;	/** @var	array	An array of warnings */	private $_warnings = array();	/** @var	array	The queue size of the $_warnings array. Set to 0 for infinite size. */	protected $_warnings_queue_size = 0;	/**	 * Public constructor, makes sure we are instanciated only by the factory class	 */	public function __construct()	{		/*		// Assisted Singleton pattern		if(function_exists('debug_backtrace'))		{			$caller=debug_backtrace();			if(				($caller[1]['class'] != 'AKFactory') &&				($caller[2]['class'] != 'AKFactory') &&				($caller[3]['class'] != 'AKFactory') &&				($caller[4]['class'] != 'AKFactory')			) {				var_dump(debug_backtrace());				trigger_error("You can't create direct descendants of ".__CLASS__, E_USER_ERROR);			}		}		*/	}	/**	 * Get the most recent error message	 * @param	integer	$i Optional error index	 * @return	string	Error message	 */	public function getError($i = null)	{		return $this->getItemFromArray($this->_errors, $i);	}	/**	 * Return all errors, if any	 * @return	array	Array of error messages	 */	public function getErrors()	{		return $this->_errors;	}	/**	 * Add an error message	 * @param	string $error Error message	 */	public function setError($error)	{		if($this->_errors_queue_size > 0)		{			if(count($this->_errors) >= $this->_errors_queue_size)			{				array_shift($this->_errors);			}		}		array_push($this->_errors, $error);	}	/**	 * Resets all error messages	 */	public function resetErrors()	{		$this->_errors = array();	}	/**	 * Get the most recent warning message	 * @param	integer	$i Optional warning index	 * @return	string	Error message	 */	public function getWarning($i = null)	{		return $this->getItemFromArray($this->_warnings, $i);	}	/**	 * Return all warnings, if any	 * @return	array	Array of error messages	 */	public function getWarnings()	{		return $this->_warnings;	}	/**	 * Add an error message	 * @param	string $error Error message	 */	public function setWarning($warning)	{		if($this->_warnings_queue_size > 0)		{			if(count($this->_warnings) >= $this->_warnings_queue_size)			{				array_shift($this->_warnings);			}		}		array_push($this->_warnings, $warning);	}	/**	 * Resets all warning messages	 */	public function resetWarnings()	{		$this->_warnings = array();	}	/**	 * Propagates errors and warnings to a foreign object. The foreign object SHOULD	 * implement the setError() and/or setWarning() methods but DOESN'T HAVE TO be of	 * AKAbstractObject type. For example, this can even be used to propagate to a	 * JObject instance in Joomla!. Propagated items will be removed from ourself.	 * @param object $object The object to propagate errors and warnings to.	 */	public function propagateToObject(&$object)	{		// Skip non-objects		if(!is_object($object)) return;		if( method_exists($object,'setError') )		{			if(!empty($this->_errors))			{				foreach($this->_errors as $error)				{					$object->setError($error);				}				$this->_errors = array();			}		}		if( method_exists($object,'setWarning') )		{			if(!empty($this->_warnings))			{				foreach($this->_warnings as $warning)				{					$object->setWarning($warning);				}				$this->_warnings = array();			}		}	}	/**	 * Propagates errors and warnings from a foreign object. Each propagated list is	 * then cleared on the foreign object, as long as it implements resetErrors() and/or	 * resetWarnings() methods.	 * @param object $object The object to propagate errors and warnings from	 */	public function propagateFromObject(&$object)	{		if( method_exists($object,'getErrors') )		{			$errors = $object->getErrors();			if(!empty($errors))			{				foreach($errors as $error)				{					$this->setError($error);				}			}			if(method_exists($object,'resetErrors'))			{				$object->resetErrors();			}		}		if( method_exists($object,'getWarnings') )		{			$warnings = $object->getWarnings();			if(!empty($warnings))			{				foreach($warnings as $warning)				{					$this->setWarning($warning);				}			}			if(method_exists($object,'resetWarnings'))			{				$object->resetWarnings();			}		}	}	/**	 * Sets the size of the error queue (acts like a LIFO buffer)	 * @param int $newSize The new queue size. Set to 0 for infinite length.	 */	protected function setErrorsQueueSize($newSize = 0)	{		$this->_errors_queue_size = (int)$newSize;	}	/**	 * Sets the size of the warnings queue (acts like a LIFO buffer)	 * @param int $newSize The new queue size. Set to 0 for infinite length.	 */	protected function setWarningsQueueSize($newSize = 0)	{		$this->_warnings_queue_size = (int)$newSize;	}	/**	 * Returns the last item of a LIFO string message queue, or a specific item	 * if so specified.	 * @param array $array An array of strings, holding messages	 * @param int $i Optional message index	 * @return mixed The message string, or false if the key doesn't exist	 */	private function getItemFromArray($array, $i = null)	{		// Find the item		if ( $i === null) {			// Default, return the last item			$item = end($array);		}		else		if ( ! array_key_exists($i, $array) ) {			// If $i has been specified but does not exist, return false			return false;		}		else		{			$item	= $array[$i];		}		return $item;	}}/** * File post processor engines base class */abstract class AKAbstractPostproc extends AKAbstractObject{	/** @var string The current (real) file path we'll have to process */	protected $filename = null;	/** @var int The requested permissions */	protected $perms = 0755;	/** @var string The temporary file path we gave to the unarchiver engine */	protected $tempFilename = null;	/** @var int The UNIX timestamp of the file's desired modification date */	public $timestamp = 0;	/**	 * Processes the current file, e.g. moves it from temp to final location by FTP	 */	abstract public function process();	/**	 * The unarchiver tells us the path to the filename it wants to extract and we give it	 * a different path instead.	 * @param string $filename The path to the real file	 * @param int $perms The permissions we need the file to have	 * @return string The path to the temporary file	 */	abstract public function processFilename($filename, $perms = 0755);	/**	 * Recursively creates a directory if it doesn't exist	 * @param string $dirName The directory to create	 * @param int $perms The permissions to give to that directory	 */	abstract public function createDirRecursive( $dirName, $perms );	abstract public function chmod( $file, $perms );	abstract public function unlink( $file );	abstract public function rmdir( $directory );	abstract public function rename( $from, $to );}/** * The base class of unarchiver classes */abstract class AKAbstractUnarchiver extends AKAbstractPart{	/** @var string Archive filename */	protected $filename = null;	/** @var array List of the names of all archive parts */	public $archiveList = array();	/** @var int The total size of all archive parts */	public $totalSize = array();	/** @var integer Current archive part number */	protected $currentPartNumber = -1;	/** @var integer The offset inside the current part */	protected $currentPartOffset = 0;	/** @var bool Should I restore permissions? */	protected $flagRestorePermissions = false;	/** @var AKAbstractPostproc Post processing class */	protected $postProcEngine = null;	/** @var string Absolute path to prepend to extracted files */	protected $addPath = '';	/** @var array Which files to rename */	public $renameFiles = array();	/** @var array Which directories to rename */	public $renameDirs = array();	/** @var array Which files to skip */	public $skipFiles = array();	/** @var integer Chunk size for processing */	protected $chunkSize = 524288;	/** @var resource File pointer to the current archive part file */	protected $fp = null;	/** @var int Run state when processing the current archive file */	protected $runState = null;	/** @var stdClass File header data, as read by the readFileHeader() method */	protected $fileHeader = null;	/** @var int How much of the uncompressed data we've read so far */	protected $dataReadLength = 0;	/**	 * Public constructor	 */	public function __construct()	{		parent::__construct();	}	/**	 * Wakeup function, called whenever the class is unserialized	 */	public function __wakeup()	{		if($this->currentPartNumber >= 0)		{			$this->fp = @fopen($this->archiveList[$this->currentPartNumber], 'rb');			if( (is_resource($this->fp)) && ($this->currentPartOffset > 0) )			{				@fseek($this->fp, $this->currentPartOffset);			}		}	}	/**	 * Sleep function, called whenever the class is serialized	 */	public function shutdown()	{		if(is_resource($this->fp))		{			$this->currentPartOffset = @ftell($this->fp);			@fclose($this->fp);		}	}	/**	 * Implements the abstract _prepare() method	 */	final protected function _prepare()	{		parent::__construct();		if( count($this->_parametersArray) > 0 )		{			foreach($this->_parametersArray as $key => $value)			{				switch($key)				{					case 'filename': // Archive's absolute filename						$this->filename = $value;						break;					case 'restore_permissions': // Should I restore permissions?						$this->flagRestorePermissions = $value;						break;					case 'post_proc': // Should I use FTP?						$this->postProcEngine = AKFactory::getpostProc($value);						break;					case 'add_path': // Path to prepend						$this->addPath = $value;						$this->addPath = str_replace('\\','/',$this->addPath);						$this->addPath = rtrim($this->addPath,'/');						if(!empty($this->addPath)) $this->addPath .= '/';						break;					case 'rename_files': // Which files to rename (hash array)						$this->renameFiles = $value;						break;										case 'rename_dirs': // Which files to rename (hash array)						$this->renameDirs = $value;						break;					case 'skip_files': // Which files to skip (indexed array)						$this->skipFiles = $value;						break;				}			}		}		$this->scanArchives();		$this->readArchiveHeader();		$errMessage = $this->getError();		if(!empty($errMessage))		{			$this->setState('error', $errMessage);		}		else		{			$this->runState = AK_STATE_NOFILE;			$this->setState('prepared');		}	}	protected function _run()	{		if($this->getState() == 'postrun') return;		$this->setState('running');		$timer = AKFactory::getTimer();		$status = true;		while( $status && ($timer->getTimeLeft() > 0) )		{			switch( $this->runState )			{				case AK_STATE_NOFILE:					$status = $this->readFileHeader();					if($status)					{						// Send start of file notification						$message = new stdClass;						$message->type = 'startfile';						$message->content = new stdClass;						if( array_key_exists('realfile', get_object_vars($this->fileHeader)) ) {							$message->content->realfile = $this->fileHeader->realFile;						} else {							$message->content->realfile = $this->fileHeader->file;						}						$message->content->file = $this->fileHeader->file;						if( array_key_exists('compressed', get_object_vars($this->fileHeader)) ) {							$message->content->compressed = $this->fileHeader->compressed;						} else {							$message->content->compressed = 0;						}						$message->content->uncompressed = $this->fileHeader->uncompressed;						$this->notify($message);					}					break;				case AK_STATE_HEADER:				case AK_STATE_DATA:					$status = $this->processFileData();					break;				case AK_STATE_DATAREAD:				case AK_STATE_POSTPROC:					$this->postProcEngine->timestamp = $this->fileHeader->timestamp;					$status = $this->postProcEngine->process();					$this->propagateFromObject( $this->postProcEngine );					$this->runState = AK_STATE_DONE;					break;				case AK_STATE_DONE:				default:					if($status)					{						// Send end of file notification						$message = new stdClass;						$message->type = 'endfile';						$message->content = new stdClass;						if( array_key_exists('realfile', get_object_vars($this->fileHeader)) ) {							$message->content->realfile = $this->fileHeader->realFile;						} else {							$message->content->realfile = $this->fileHeader->file;						}						$message->content->file = $this->fileHeader->file;						if( array_key_exists('compressed', get_object_vars($this->fileHeader)) ) {							$message->content->compressed = $this->fileHeader->compressed;						} else {							$message->content->compressed = 0;						}						$message->content->uncompressed = $this->fileHeader->uncompressed;						$this->notify($message);					}					$this->runState = AK_STATE_NOFILE;					continue;			}		}		$error = $this->getError();		if( !$status && ($this->runState == AK_STATE_NOFILE) && empty( $error ) )		{			// We just finished			$this->setState('postrun');		}		elseif( !empty($error) )		{			$this->setState( 'error', $error );		}	}	protected function _finalize()	{		// Nothing to do		$this->setState('finished');	}	/**	 * Returns the base extension of the file, e.g. '.jpa'	 * @return string	 */	private function getBaseExtension()	{		static $baseextension;		if(empty($baseextension))		{			$basename = basename($this->filename);			$lastdot = strrpos($basename,'.');			$baseextension = substr($basename, $lastdot);		}		return $baseextension;	}	/**	 * Scans for archive parts	 */	private function scanArchives()	{		$privateArchiveList = array();		// Get the components of the archive filename		$dirname = dirname($this->filename);		$base_extension = $this->getBaseExtension();		$basename = basename($this->filename, $base_extension);		$this->totalSize = 0;		// Scan for multiple parts until we don't find any more of them		$count = 0;		$found = true;		$this->archiveList = array();		while($found)		{			++$count;			$extension = substr($base_extension, 0, 2).sprintf('%02d', $count);			$filename = $dirname.DIRECTORY_SEPARATOR.$basename.$extension;			$found = file_exists($filename);			if($found)			{				// Add yet another part, with a numeric-appended filename				$this->archiveList[] = $filename;				$filesize = @filesize($filename);				$this->totalSize += $filesize;				$privateArchiveList[] = array($filename, $filesize);			}			else			{				// Add the last part, with the regular extension				$this->archiveList[] = $this->filename;				$filename = $this->filename;				$filesize = @filesize($filename);				$this->totalSize += $filesize;				$privateArchiveList[] = array($filename, $filesize);			}		}		$this->currentPartNumber = -1;		$this->currentPartOffset = 0;		$this->runState = AK_STATE_NOFILE;		// Send start of file notification		$message = new stdClass;		$message->type = 'totalsize';		$message->content = new stdClass;		$message->content->totalsize = $this->totalSize;		$message->content->filelist = $privateArchiveList;		$this->notify($message);	}	/**	 * Opens the next part file for reading	 */	protected function nextFile()	{		++$this->currentPartNumber;		if( $this->currentPartNumber > (count($this->archiveList) - 1) )		{			$this->setState('postrun');			return false;		}		else		{			if( is_resource($this->fp) ) @fclose($this->fp);			$this->fp = @fopen( $this->archiveList[$this->currentPartNumber], 'rb' );			fseek($this->fp, 0);			$this->currentPartOffset = 0;			return true;		}	}	/**	 * Returns true if we have reached the end of file	 * @param $local bool True to return EOF of the local file, false (default) to return if we have reached the end of the archive set	 * @return bool True if we have reached End Of File	 */	protected function isEOF($local = false)	{		$eof = @feof($this->fp);		if(!$eof)		{			// Border case: right at the part's end (eeeek!!!). For the life of me, I don't understand why			// feof() doesn't report true. It expects the fp to be positioned *beyond* the EOF to report			// true. Incredible! :(			$position = @ftell($this->fp);			$filesize = @filesize( $this->archiveList[$this->currentPartNumber] );			if( $position >= $filesize  ) $eof = true;		}		if($local)		{			return $eof;		}		else		{			return $eof && ($this->currentPartNumber >= (count($this->archiveList)-1) );		}	}	/**	 * Tries to make a directory user-writable so that we can write a file to it	 * @param $path string A path to a file	 */	protected function setCorrectPermissions($path)	{		static $rootDir = null;				if(is_null($rootDir)) {			$rootDir = rtrim(AKFactory::get('kickstart.setup.destdir',''),'/\\');		}				$directory = rtrim(dirname($path),'/\\');		if($directory != $rootDir) {			// Is this an unwritable directory?			if(!is_writeable($directory)) {				$this->postProcEngine->chmod( $directory, 0755 );			}		}		$this->postProcEngine->chmod( $path, 0644 );	}	/**	 * Concrete classes are supposed to use this method in order to read the archive's header and	 * prepare themselves to the point of being ready to extract the first file.	 */	protected abstract function readArchiveHeader();	/**	 * Concrete classes must use this method to read the file header	 * @return bool True if reading the file was successful, false if an error occured or we reached end of archive	 */	protected abstract function readFileHeader();	/**	 * Concrete classes must use this method to process file data. It must set $runState to AK_STATE_DATAREAD when	 * it's finished processing the file data.	 * @return bool True if processing the file data was successful, false if an error occured	 */	protected abstract function processFileData();	/**	 * Reads data from the archive and notifies the observer with the 'reading' message	 * @param $fp	 * @param $length	 */	protected function fread($fp, $length = null)	{		if(is_numeric($length))		{			if($length > 0) {				$data = fread($fp, $length);			} else {				$data = fread($fp);			}		}		else		{			$data = fread($fp);		}		if($data === false) $data = '';		// Send start of file notification		$message = new stdClass;		$message->type = 'reading';		$message->content = new stdClass;		$message->content->length = strlen($data);		$this->notify($message);		return $data;	}}/** * The superclass of all Akeeba Kickstart parts. The "parts" are intelligent stateful * classes which perform a single procedure and have preparation, running and * finalization phases. The transition between phases is handled automatically by * this superclass' tick() final public method, which should be the ONLY public API * exposed to the rest of the Akeeba Engine. */abstract class AKAbstractPart extends AKAbstractObject{	/**	 * Indicates whether this part has finished its initialisation cycle	 * @var boolean	 */	protected $isPrepared = false;	/**	 * Indicates whether this part has more work to do (it's in running state)	 * @var boolean	 */	protected $isRunning = false;	/**	 * Indicates whether this part has finished its finalization cycle	 * @var boolean	 */	protected $isFinished = false;	/**	 * Indicates whether this part has finished its run cycle	 * @var boolean	 */	protected $hasRan = false;	/**	 * The name of the engine part (a.k.a. Domain), used in return table	 * generation.	 * @var string	 */	protected $active_domain = "";	/**	 * The step this engine part is in. Used verbatim in return table and	 * should be set by the code in the _run() method.	 * @var string	 */	protected $active_step = "";	/**	 * A more detailed description of the step this engine part is in. Used	 * verbatim in return table and should be set by the code in the _run()	 * method.	 * @var string	 */	protected $active_substep = "";	/**	 * Any configuration variables, in the form of an array.	 * @var array	 */	protected $_parametersArray = array();	/** @var string The database root key */	protected $databaseRoot = array();	/** @var int Last reported warnings's position in array */	private $warnings_pointer = -1;	/** @var array An array of observers */	protected $observers = array();	/**	 * Runs the preparation for this part. Should set _isPrepared	 * to true	 */	abstract protected function _prepare();	/**	 * Runs the finalisation process for this part. Should set	 * _isFinished to true.	 */	abstract protected function _finalize();	/**	 * Runs the main functionality loop for this part. Upon calling,	 * should set the _isRunning to true. When it finished, should set	 * the _hasRan to true. If an error is encountered, setError should	 * be used.	 */	abstract protected function _run();	/**	 * Sets the BREAKFLAG, which instructs this engine part that the current step must break immediately,	 * in fear of timing out.	 */	protected function setBreakFlag()	{		AKFactory::set('volatile.breakflag', true);	}	/**	 * Sets the engine part's internal state, in an easy to use manner	 *	 * @param	string	$state			One of init, prepared, running, postrun, finished, error	 * @param	string	$errorMessage	The reported error message, should the state be set to error	 */	protected function setState($state = 'init', $errorMessage='Invalid setState argument')	{		switch($state)		{			case 'init':				$this->isPrepared = false;				$this->isRunning  = false;				$this->isFinished = false;				$this->hasRun     = false;				break;			case 'prepared':				$this->isPrepared = true;				$this->isRunning  = false;				$this->isFinished = false;				$this->hasRun     = false;				break;			case 'running':				$this->isPrepared = true;				$this->isRunning  = true;				$this->isFinished = false;				$this->hasRun     = false;				break;			case 'postrun':				$this->isPrepared = true;				$this->isRunning  = false;				$this->isFinished = false;				$this->hasRun     = true;				break;			case 'finished':				$this->isPrepared = true;				$this->isRunning  = false;				$this->isFinished = true;				$this->hasRun     = false;				break;			case 'error':			default:				$this->setError($errorMessage);				break;		}	}	/**	 * The public interface to an engine part. This method takes care for	 * calling the correct method in order to perform the initialisation -	 * run - finalisation cycle of operation and return a proper reponse array.	 * @return	array	A Reponse Array	 */	final public function tick()	{		// Call the right action method, depending on engine part state		switch( $this->getState() )		{			case "init":				$this->_prepare();				break;			case "prepared":				$this->_run();				break;			case "running":				$this->_run();				break;			case "postrun":				$this->_finalize();				break;		}		// Send a Return Table back to the caller		$out = $this->_makeReturnTable();		return $out;	}	/**	 * Returns a copy of the class's status array	 * @return array	 */	public function getStatusArray()	{		return $this->_makeReturnTable();	}	/**	 * Sends any kind of setup information to the engine part. Using this,	 * we avoid passing parameters to the constructor of the class. These	 * parameters should be passed as an indexed array and should be taken	 * into account during the preparation process only. This function will	 * set the error flag if it's called after the engine part is prepared.	 *	 * @param array $parametersArray The parameters to be passed to the	 * engine part.	 */	final public function setup( $parametersArray )	{		if( $this->isPrepared )		{			$this->setState('error', "Can't modify configuration after the preparation of " . $this->active_domain);		}		else		{			$this->_parametersArray = $parametersArray;			if(array_key_exists('root', $parametersArray))			{				$this->databaseRoot = $parametersArray['root'];			}		}	}	/**	 * Returns the state of this engine part.	 *	 * @return string The state of this engine part. It can be one of	 * error, init, prepared, running, postrun, finished.	 */	final public function getState()	{		if( $this->getError() )		{			return "error";		}		if( !($this->isPrepared) )		{			return "init";		}		if( !($this->isFinished) && !($this->isRunning) && !( $this->hasRun ) && ($this->isPrepared) )		{			return "prepared";		}		if ( !($this->isFinished) && $this->isRunning && !( $this->hasRun ) )		{			return "running";		}		if ( !($this->isFinished) && !($this->isRunning) && $this->hasRun )		{			return "postrun";		}		if ( $this->isFinished )		{			return "finished";		}	}	/**	 * Constructs a Response Array based on the engine part's state.	 * @return array The Response Array for the current state	 */	final protected function _makeReturnTable()	{		// Get a list of warnings		$warnings = $this->getWarnings();		// Report only new warnings if there is no warnings queue size		if( $this->_warnings_queue_size == 0 )		{			if( ($this->warnings_pointer > 0) && ($this->warnings_pointer < (count($warnings)) ) )			{				$warnings = array_slice($warnings, $this->warnings_pointer + 1);				$this->warnings_pointer += count($warnings);			}			else			{				$this->warnings_pointer = count($warnings);			}		}		$out =  array(			'HasRun'	=> (!($this->isFinished)),			'Domain'	=> $this->active_domain,			'Step'		=> $this->active_step,			'Substep'	=> $this->active_substep,			'Error'		=> $this->getError(),			'Warnings'	=> $warnings		);		return $out;	}	final protected function setDomain($new_domain)	{		$this->active_domain = $new_domain;	}	final public function getDomain()	{		return $this->active_domain;	}	final protected function setStep($new_step)	{		$this->active_step = $new_step;	}	final public function getStep()	{		return $this->active_step;	}	final protected function setSubstep($new_substep)	{		$this->active_substep = $new_substep;	}	final public function getSubstep()	{		return $this->active_substep;	}	/**	 * Attaches an observer object	 * @param AKAbstractPartObserver $obs	 */	function attach(AKAbstractPartObserver $obs) {        $this->observers["$obs"] = $obs;    }	/**	 * Dettaches an observer object	 * @param AKAbstractPartObserver $obs	 */    function detach(AKAbstractPartObserver $obs) {        delete($this->observers["$obs"]);    }    /**     * Notifies observers each time something interesting happened to the part     * @param mixed $message The event object     */	protected function notify($message) {        foreach ($this->observers as $obs) {            $obs->update($this, $message);        }    }}/** * Descendants of this class can be used in the unarchiver's observer methods (attach, detach and notify) * @author Nicholas * */abstract class AKAbstractPartObserver{	abstract public function update($object, $message);}/** * Direct file writer */class AKPostprocDirect extends AKAbstractPostproc{	public function process()	{		$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);		if($restorePerms)		{			@chmod($this->filename, $this->perms);		}		else		{			if(@is_file($this->filename))			{				@chmod($this->filename, 0644);			}			else			{				@chmod($this->filename, 0755);			}		}		if($this->timestamp > 0)		{			@touch($this->filename, $this->timestamp);		}		return true;	}	public function processFilename($filename, $perms = 0755)	{		$this->perms = $perms;		$this->filename = $filename;		return $filename;	}	public function createDirRecursive( $dirName, $perms )	{		if( AKFactory::get('kickstart.setup.dryrun','0') ) return true;		if (@mkdir($dirName, 0755, true)) {			@chmod($dirName, 0755);			return true;		}		$root = AKFactory::get('kickstart.setup.destdir');		$root = rtrim(str_replace('\\','/',$root),'/');		$dir = rtrim(str_replace('\\','/',$dirName),'/');		if(strpos($dir, $root) === 0) {			$dir = ltrim(substr($dir, strlen($root)), '/');			$root .= '/';		} else {			$root = '';		}				if(empty($dir)) return true;		$dirArray = explode('/', $dir);		$path = '';		foreach( $dirArray as $dir )		{			$path .= $dir . '/';			$ret = is_dir($root.$path) ? true : @mkdir($root.$path);			if( !$ret ) {				// Is this a file instead of a directory?				if(is_file($root.$path) )				{					@unlink($root.$path);					$ret = @mkdir($root.$path);				}				if( !$ret ) {					$this->setError( AKText::sprintf('COULDNT_CREATE_DIR',$path) );					return false;				}			}			// Try to set new directory permissions to 0755			@chmod($root.$path, $perms);		}		return true;	}	public function chmod( $file, $perms )	{		if( AKFactory::get('kickstart.setup.dryrun','0') ) return true;		return @chmod( $file, $perms );	}	public function unlink( $file )	{		return @unlink( $file );	}	public function rmdir( $directory )	{		return @rmdir( $directory );	}	public function rename( $from, $to )	{		return @rename($from, $to);	}}/** * FTP file writer */class AKPostprocFTP extends AKAbstractPostproc{	/** @var bool Should I use FTP over implicit SSL? */	public $useSSL = false;	/** @var bool use Passive mode? */	public $passive = true;	/** @var string FTP host name */	public $host = '';	/** @var int FTP port */	public $port = 21;	/** @var string FTP user name */	public $user = '';	/** @var string FTP password */	public $pass = '';	/** @var string FTP initial directory */	public $dir = '';	/** @var resource The FTP handle */	private $handle = null;	/** @var string The temporary directory where the data will be stored */	private $tempDir = '';	public function __construct()	{		parent::__construct();		$this->useSSL = AKFactory::get('kickstart.ftp.ssl', false);		$this->passive = AKFactory::get('kickstart.ftp.passive', true);		$this->host = AKFactory::get('kickstart.ftp.host', '');		$this->port = AKFactory::get('kickstart.ftp.port', 21);		if(trim($this->port) == '') $this->port = 21;		$this->user = AKFactory::get('kickstart.ftp.user', '');		$this->pass = AKFactory::get('kickstart.ftp.pass', '');		$this->dir = AKFactory::get('kickstart.ftp.dir', '');		$this->tempDir = AKFactory::get('kickstart.ftp.tempdir', '');		$connected = $this->connect();		if($connected)		{			if(!empty($this->tempDir))			{				$tempDir = rtrim($this->tempDir, '/\\').'/';				$writable = $this->isDirWritable($tempDir);			}			else			{				$tempDir = '';				$writable = false;			}			if(!$writable) {				// Default temporary directory is the current root				$tempDir = function_exists('getcwd') ? getcwd() : dirname(__FILE__);				if(empty($tempDir))				{					// Oh, we have no directory reported!					$tempDir = '.';				}				$absoluteDirToHere = $tempDir;				$tempDir = rtrim(str_replace('\\','/',$tempDir),'/');				if(!empty($tempDir)) $tempDir .= '/';				$this->tempDir = $tempDir;				// Is this directory writable?				$writable = $this->isDirWritable($tempDir);			}			if(!$writable)			{				// Nope. Let's try creating a temporary directory in the site's root.				$tempDir = $absoluteDirToHere.'/kicktemp';				$this->createDirRecursive($tempDir, 0777);				// Try making it writable...				$this->fixPermissions($tempDir);				$writable = $this->isDirWritable($tempDir);			}			// Was the new directory writable?			if(!$writable)			{				// Let's see if the user has specified one				$userdir = AKFactory::get('kickstart.ftp.tempdir', '');				if(!empty($userdir))				{					// Is it an absolute or a relative directory?					$absolute = false;					$absolute = $absolute || ( substr($userdir,0,1) == '/' );					$absolute = $absolute || ( substr($userdir,1,1) == ':' );					$absolute = $absolute || ( substr($userdir,2,1) == ':' );					if(!$absolute)					{						// Make absolute						$tempDir = $absoluteDirToHere.$userdir;					}					else					{						// it's already absolute						$tempDir = $userdir;					}					// Does the directory exist?					if( is_dir($tempDir) )					{						// Yeah. Is it writable?						$writable = $this->isDirWritable($tempDir);					}				}			}			$this->tempDir = $tempDir;			if(!$writable)			{				// No writable directory found!!!				$this->setError(AKText::_('FTP_TEMPDIR_NOT_WRITABLE'));			}			else			{				AKFactory::set('kickstart.ftp.tempdir', $tempDir);				$this->tempDir = $tempDir;			}		}	}	function __wakeup()	{		$this->connect();	}	public function connect()	{		// Connect to server, using SSL if so required		if($this->useSSL) {			$this->handle = @ftp_ssl_connect($this->host, $this->port);		} else {			$this->handle = @ftp_connect($this->host, $this->port);		}		if($this->handle === false)		{			$this->setError(AKText::_('WRONG_FTP_HOST'));			return false;		}		// Login		if(! @ftp_login($this->handle, $this->user, $this->pass))		{			$this->setError(AKText::_('WRONG_FTP_USER'));			@ftp_close($this->handle);			return false;		}		// Change to initial directory		if(! @ftp_chdir($this->handle, $this->dir))		{			$this->setError(AKText::_('WRONG_FTP_PATH1'));			@ftp_close($this->handle);			return false;		}		// Enable passive mode if the user requested it		if( $this->passive )		{			@ftp_pasv($this->handle, true);		}		else		{			@ftp_pasv($this->handle, false);		}		return true;	}	public function process()	{		if( is_null($this->tempFilename) )		{			// If an empty filename is passed, it means that we shouldn't do any post processing, i.e.			// the entity was a directory or symlink			return true;		}		$remotePath = dirname($this->filename);		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			$removePath = ltrim($removePath, "/");			$remotePath = ltrim($remotePath, "/");			$left = substr($remotePath, 0, strlen($removePath));			if($left == $removePath)			{				$remotePath = substr($remotePath, strlen($removePath));			}		}		$absoluteFSPath = dirname($this->filename);		$relativeFTPPath = trim($remotePath, '/');		$absoluteFTPPath = '/'.trim( $this->dir, '/' ).'/'.trim($remotePath, '/');		$onlyFilename = basename($this->filename);		$remoteName = $absoluteFTPPath.'/'.$onlyFilename;		$ret = @ftp_chdir($this->handle, $absoluteFTPPath);		if($ret === false)		{			$ret = $this->createDirRecursive( $absoluteFSPath, 0755);			if($ret === false) {				$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));				return false;			}			$ret = @ftp_chdir($this->handle, $absoluteFTPPath);			if($ret === false) {				$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));				return false;			}		}		$ret = @ftp_put($this->handle, $remoteName, $this->tempFilename, FTP_BINARY);		if($ret === false)		{			// If we couldn't create the file, attempt to fix the permissions in the PHP level and retry!			$this->fixPermissions($this->filename);			$this->unlink($this->filename);			$fp = @fopen($this->tempFilename);			if($fp !== false)			{				$ret = @ftp_fput($this->handle, $remoteName, $fp, FTP_BINARY);				@fclose($fp);			}			else			{				$ret = false;			}		}		@unlink($this->tempFilename);		if($ret === false)		{			$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));			return false;		}		$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);		if($restorePerms)		{			@ftp_chmod($this->_handle, $perms, $remoteName);		}		else		{			@ftp_chmod($this->_handle, 0644, $remoteName);		}		return true;	}	public function processFilename($filename, $perms = 0755)	{		// Catch some error conditions...		if($this->getError())		{			return false;		}		// If a null filename is passed, it means that we shouldn't do any post processing, i.e.		// the entity was a directory or symlink		if(is_null($filename))		{			$this->filename = null;			$this->tempFilename = null;			return null;		}		// Strip absolute filesystem path to website's root		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			$left = substr($filename, 0, strlen($removePath));			if($left == $removePath)			{				$filename = substr($filename, strlen($removePath));			}		}		// Trim slash on the left		$filename = ltrim($filename, '/');		$this->filename = $filename;		$this->tempFilename = tempnam($this->tempDir, 'kickstart-');		$this->perms = $perms;		if( empty($this->tempFilename) )		{			// Oops! Let's try something different			$this->tempFilename = $this->tempDir.'/kickstart-'.time().'.dat';		}		return $this->tempFilename;	}	private function isDirWritable($dir)	{		$fp = @fopen($dir.'/kickstart.dat', 'wb');		if($fp === false)		{			return false;		}		else		{			@fclose($fp);			unlink($dir.'/kickstart.dat');			return true;		}	}	public function createDirRecursive( $dirName, $perms )	{		// Strip absolute filesystem path to website's root		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			// UNIXize the paths			$removePath = str_replace('\\','/',$removePath);			$dirName = str_replace('\\','/',$dirName);			// Make sure they both end in a slash			$removePath = rtrim($removePath,'/\\').'/';			$dirName = rtrim($dirName,'/\\').'/';			// Process the path removal			$left = substr($dirName, 0, strlen($removePath));			if($left == $removePath)			{				$dirName = substr($dirName, strlen($removePath));			}		}		if(empty($dirName)) $dirName = ''; // 'cause the substr() above may return FALSE.				$check = '/'.trim($this->dir,'/').'/'.trim($dirName, '/');		if($this->is_dir($check)) return true;		$alldirs = explode('/', $dirName);		$previousDir = '/'.trim($this->dir);		foreach($alldirs as $curdir)		{			$check = $previousDir.'/'.$curdir;			if(!$this->is_dir($check))			{				// Proactively try to delete a file by the same name				@ftp_delete($this->handle, $check);				if(@ftp_mkdir($this->handle, $check) === false)				{					// If we couldn't create the directory, attempt to fix the permissions in the PHP level and retry!					$this->fixPermissions($removePath.$check);					if(@ftp_mkdir($this->handle, $check) === false)					{						// Can we fall back to pure PHP mode, sire?						if(!@mkdir($check))						{							$this->setError(AKText::sprintf('FTP_CANT_CREATE_DIR',$dir));							return false;						}						else						{							// Since the directory was built by PHP, change its permissions							@chmod($check, "0777");							return true;						}					}				}				@ftp_chmod($this->handle, $perms, $check);			}			$previousDir = $check;		}		return true;	}	public function close()	{		@ftp_close($this->handle);	}	/*	 * Tries to fix directory/file permissions in the PHP level, so that	 * the FTP operation doesn't fail.	 * @param $path string The full path to a directory or file	 */	private function fixPermissions( $path )	{		// Turn off error reporting		if(!defined('KSDEBUG')) {			$oldErrorReporting = @error_reporting(E_NONE);		}		// Get UNIX style paths		$relPath = str_replace('\\','/',$path);		$basePath = rtrim(str_replace('\\','/',dirname(__FILE__)),'/');		$basePath = rtrim($basePath,'/');		if(!empty($basePath)) $basePath .= '/';		// Remove the leading relative root		if( substr($relPath,0,strlen($basePath)) == $basePath )			$relPath = substr($relPath,strlen($basePath));		$dirArray = explode('/', $relPath);		$pathBuilt = rtrim($basePath,'/');		foreach( $dirArray as $dir )		{			if(empty($dir)) continue;			$oldPath = $pathBuilt;			$pathBuilt .= '/'.$dir;			if(is_dir($oldPath.$dir))			{				@chmod($oldPath.$dir, 0777);			}			else			{				if(@chmod($oldPath.$dir, 0777) === false)				{					@unlink($oldPath.$dir);				}			}		}		// Restore error reporting		if(!defined('KSDEBUG')) {			@error_reporting($oldErrorReporting);		}	}	public function chmod( $file, $perms )	{		return @ftp_chmod($this->handle, $perms, $path);	}	private function is_dir( $dir )	{		return @ftp_chdir( $this->handle, $dir );	}	public function unlink( $file )	{		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			$left = substr($file, 0, strlen($removePath));			if($left == $removePath)			{				$file = substr($file, strlen($removePath));			}		}		$check = '/'.trim($this->dir,'/').'/'.trim($file, '/');		return @ftp_delete( $this->handle, $check );	}	public function rmdir( $directory )	{		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			$left = substr($directory, 0, strlen($removePath));			if($left == $removePath)			{				$directory = substr($directory, strlen($removePath));			}		}		$check = '/'.trim($this->dir,'/').'/'.trim($directory, '/');		return @ftp_rmdir( $this->handle, $check );	}	public function rename( $from, $to )	{		$originalFrom = $from;		$originalTo = $to;		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			$left = substr($from, 0, strlen($removePath));			if($left == $removePath)			{				$from = substr($from, strlen($removePath));			}		}		$from = '/'.trim($this->dir,'/').'/'.trim($from, '/');		if(!empty($removePath))		{			$left = substr($to, 0, strlen($removePath));			if($left == $removePath)			{				$to = substr($to, strlen($removePath));			}		}		$to = '/'.trim($this->dir,'/').'/'.trim($to, '/');		$result = @ftp_rename( $this->handle, $from, $to );		if($result !== true)		{			return @rename($from, $to);		}		else		{			return true;		}	}}/** * JPA archive extraction class */class AKUnarchiverJPA extends AKAbstractUnarchiver{	private $archiveHeaderData = array();	protected function readArchiveHeader()	{		// Initialize header data array		$this->archiveHeaderData = new stdClass();		// Open the first part		$this->nextFile();		// Fail for unreadable files		if( $this->fp === false ) return false;		// Read the signature		$sig = fread( $this->fp, 3 );		if ($sig != 'JPA')		{			// Not a JPA file			$this->setError( AKText::_('ERR_NOT_A_JPA_FILE') );			return false;		}		// Read and parse header length		$header_length_array = unpack( 'v', fread( $this->fp, 2 ) );		$header_length = $header_length_array[1];		// Read and parse the known portion of header data (14 bytes)		$bin_data = fread($this->fp, 14);		$header_data = unpack('Cmajor/Cminor/Vcount/Vuncsize/Vcsize', $bin_data);		// Load any remaining header data (forward compatibility)		$rest_length = $header_length - 19;		if( $rest_length > 0 )			$junk = fread($this->fp, $rest_length);		else			$junk = '';		// Temporary array with all the data we read		$temp = array(			'signature' => 			$sig,			'length' => 			$header_length,			'major' => 				$header_data['major'],			'minor' => 				$header_data['minor'],			'filecount' => 			$header_data['count'],			'uncompressedsize' => 	$header_data['uncsize'],			'compressedsize' => 	$header_data['csize'],			'unknowndata' => 		$junk		);		// Array-to-object conversion		foreach($temp as $key => $value)		{			$this->archiveHeaderData->{$key} = $value;		}		$this->currentPartOffset = @ftell($this->fp);		$this->dataReadLength = 0;		return true;	}	/**	 * Concrete classes must use this method to read the file header	 * @return bool True if reading the file was successful, false if an error occured or we reached end of archive	 */	protected function readFileHeader()	{		// If the current part is over, proceed to the next part please		if( $this->isEOF(true) ) {			$this->nextFile();		}		// Get and decode Entity Description Block		$signature = fread($this->fp, 3);		$this->fileHeader = new stdClass();		$this->fileHeader->timestamp = 0;		// Check signature		if( $signature != 'JPF' )		{			if($this->isEOF(true))			{				// This file is finished; make sure it's the last one				$this->nextFile();				if(!$this->isEOF(false))				{					$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));					return false;				}				// We're just finished				return false;			}			else			{				// This is not a file block! The archive is corrupt.				$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));				return false;			}		}		// This a JPA Entity Block. Process the header.		$isBannedFile = false;		// Read length of EDB and of the Entity Path Data		$length_array = unpack('vblocksize/vpathsize', fread($this->fp, 4));		// Read the path data		if($length_array['pathsize'] > 0) {			$file = fread( $this->fp, $length_array['pathsize'] );		} else {			$file = '';		}		// Handle file renaming		$isRenamed = false;		if(is_array($this->renameFiles) && (count($this->renameFiles) > 0) )		{			if(array_key_exists($file, $this->renameFiles))			{				$file = $this->renameFiles[$file];				$isRenamed = true;			}		}				// Handle directory renaming		$isDirRenamed = false;		if(is_array($this->renameDirs) && (count($this->renameDirs) > 0)) {			if(array_key_exists(dirname($file), $this->renameDirs)) {				$file = rtrim($this->renameDirs[dirname($file)],'/').'/'.basename($file);				$isRenamed = true;				$isDirRenamed = true;			}		}		// Read and parse the known data portion		$bin_data = fread( $this->fp, 14 );		$header_data = unpack('Ctype/Ccompression/Vcompsize/Vuncompsize/Vperms', $bin_data);		// Read any unknown data		$restBytes = $length_array['blocksize'] - (21 + $length_array['pathsize']);		if( $restBytes > 0 )		{			// Start reading the extra fields			while($restBytes >= 4)			{				$extra_header_data = fread($this->fp, 4);				$extra_header = unpack('vsignature/vlength', $extra_header_data);				$restBytes -= 4;				$extra_header['length'] -= 4;				switch($extra_header['signature'])				{					case 256:						// File modified timestamp						if($extra_header['length'] > 0)						{							$bindata = fread($this->fp, $extra_header['length']);							$restBytes -= $extra_header['length'];							$timestamps = unpack('Vmodified', substr($bindata,0,4));							$filectime = $timestamps['modified'];							$this->fileHeader->timestamp = $filectime;						}						break;					default:						// Unknown field						if($extra_header['length']>0) {							$junk = fread($this->fp, $extra_header['length']);							$restBytes -= $extra_header['length'];						}						break;				}			}			if($restBytes > 0) $junk = fread($this->fp, $restBytes);		}		$compressionType = $header_data['compression'];		// Populate the return array		$this->fileHeader->file = $file;		$this->fileHeader->compressed = $header_data['compsize'];		$this->fileHeader->uncompressed = $header_data['uncompsize'];		switch($header_data['type'])		{			case 0:				$this->fileHeader->type = 'dir';				break;			case 1:				$this->fileHeader->type = 'file';				break;			case 2:				$this->fileHeader->type = 'link';				break;		}		switch( $compressionType )		{			case 0:				$this->fileHeader->compression = 'none';				break;			case 1:				$this->fileHeader->compression = 'gzip';				break;			case 2:				$this->fileHeader->compression = 'bzip2';				break;		}		$this->fileHeader->permissions = $header_data['perms'];		// Find hard-coded banned files		if( (basename($this->fileHeader->file) == ".") || (basename($this->fileHeader->file) == "..") )		{			$isBannedFile = true;		}		// Also try to find banned files passed in class configuration		if((count($this->skipFiles) > 0) && (!$isRenamed) )		{			if(in_array($this->fileHeader->file, $this->skipFiles))			{				$isBannedFile = true;			}		}		// If we have a banned file, let's skip it		if($isBannedFile)		{			// Advance the file pointer, skipping exactly the size of the compressed data			$seekleft = $this->fileHeader->compressed;			while($seekleft > 0)			{				// Ensure that we can seek past archive part boundaries				$curSize = @filesize($this->archiveList[$this->currentPartNumber]);				$curPos = @ftell($this->fp);				$canSeek = $curSize - $curPos;				if($canSeek > $seekleft) $canSeek = $seekleft;				@fseek( $this->fp, $canSeek, SEEK_CUR );				$seekleft -= $canSeek;				if($seekleft) $this->nextFile();			}			$this->currentPartOffset = @ftell($this->fp);			$this->runState = AK_STATE_DONE;			return true;		}		// Last chance to prepend a path to the filename		if(!empty($this->addPath) && !$isDirRenamed)		{			$this->fileHeader->file = $this->addPath.$this->fileHeader->file;		}		// Get the translated path name		$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);		if($this->fileHeader->type == 'file')		{			// Regular file; ask the postproc engine to process its filename			if($restorePerms)			{				$this->fileHeader->realFile = $this->postProcEngine->processFilename( $this->fileHeader->file, $this->fileHeader->permissions );			}			else			{				$this->fileHeader->realFile = $this->postProcEngine->processFilename( $this->fileHeader->file );			}		}		elseif($this->fileHeader->type == 'dir')		{			$dir = $this->fileHeader->file;			// Directory; just create it			if($restorePerms)			{				$this->postProcEngine->createDirRecursive( $this->fileHeader->file, $this->fileHeader->permissions );			}			else			{				$this->postProcEngine->createDirRecursive( $this->fileHeader->file, 0755 );			}			$this->postProcEngine->processFilename(null);		}		else		{			// Symlink; do not post-process			$this->postProcEngine->processFilename(null);		}		$this->createDirectory();		// Header is read		$this->runState = AK_STATE_HEADER;		$this->dataReadLength = 0;		return true;	}	/**	 * Concrete classes must use this method to process file data. It must set $runState to AK_STATE_DATAREAD when	 * it's finished processing the file data.	 * @return bool True if processing the file data was successful, false if an error occured	 */	protected function processFileData()	{		switch( $this->fileHeader->type )		{			case 'dir':				return $this->processTypeDir();				break;			case 'link':				return $this->processTypeLink();				break;			case 'file':				switch($this->fileHeader->compression)				{					case 'none':						return $this->processTypeFileUncompressed();						break;					case 'gzip':					case 'bzip2':						return $this->processTypeFileCompressedSimple();						break;				}				break;		}	}	private function processTypeFileUncompressed()	{		// Uncompressed files are being processed in small chunks, to avoid timeouts		if( ($this->dataReadLength == 0) && !AKFactory::get('kickstart.setup.dryrun','0') )		{			// Before processing file data, ensure permissions are adequate			$this->setCorrectPermissions( $this->fileHeader->file );		}		// Open the output file		if( !AKFactory::get('kickstart.setup.dryrun','0') )		{			$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);			if ($this->dataReadLength == 0) {				$outfp = @fopen( $this->fileHeader->realFile, 'wb' );			} else {				$outfp = @fopen( $this->fileHeader->realFile, 'ab' );			}			// Can we write to the file?			if( ($outfp === false) && (!$ignore) ) {				// An error occured				$this->setError( AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile) );				return false;			}		}		// Does the file have any data, at all?		if( $this->fileHeader->compressed == 0 )		{			// No file data!			if( !AKFactory::get('kickstart.setup.dryrun','0') && is_resource($outfp) ) @fclose($outfp);			$this->runState = AK_STATE_DATAREAD;			return true;		}		// Reference to the global timer		$timer = AKFactory::getTimer();		$toReadBytes = 0;		$leftBytes = $this->fileHeader->compressed - $this->dataReadLength;		// Loop while there's data to read and enough time to do it		while( ($leftBytes > 0) && ($timer->getTimeLeft() > 0) )		{			$toReadBytes = ($leftBytes > $this->chunkSize) ? $this->chunkSize : $leftBytes;			$data = $this->fread( $this->fp, $toReadBytes );			$reallyReadBytes = akstringlen($data);			$leftBytes -= $reallyReadBytes;			$this->dataReadLength += $reallyReadBytes;			if($reallyReadBytes < $toReadBytes)			{				// We read less than requested! Why? Did we hit local EOF?				if( $this->isEOF(true) && !$this->isEOF(false) )				{					// Yeap. Let's go to the next file					$this->nextFile();				}				else				{					// Nope. The archive is corrupt					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}			}			if( !AKFactory::get('kickstart.setup.dryrun','0') )				if(is_resource($outfp)) @fwrite( $outfp, $data );		}		// Close the file pointer		if( !AKFactory::get('kickstart.setup.dryrun','0') )			if(is_resource($outfp)) @fclose($outfp);		// Was this a pre-timeout bail out?		if( $leftBytes > 0 )		{			$this->runState = AK_STATE_DATA;		}		else		{			// Oh! We just finished!			$this->runState = AK_STATE_DATAREAD;			$this->dataReadLength = 0;		}		return true;	}	private function processTypeFileCompressedSimple()	{		if( !AKFactory::get('kickstart.setup.dryrun','0') )		{			// Before processing file data, ensure permissions are adequate			$this->setCorrectPermissions( $this->fileHeader->file );			// Open the output file			$outfp = @fopen( $this->fileHeader->realFile, 'wb' );			// Can we write to the file?			$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);			if( ($outfp === false) && (!$ignore) ) {				// An error occured				$this->setError( AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile) );				return false;			}		}		// Does the file have any data, at all?		if( $this->fileHeader->compressed == 0 )		{			// No file data!			if( !AKFactory::get('kickstart.setup.dryrun','0') )				if(is_resource($outfp)) @fclose($outfp);			$this->runState = AK_STATE_DATAREAD;			return true;		}		// Simple compressed files are processed as a whole; we can't do chunk processing		$zipData = $this->fread( $this->fp, $this->fileHeader->compressed );		while( akstringlen($zipData) < $this->fileHeader->compressed )		{			// End of local file before reading all data, but have more archive parts?			if($this->isEOF(true) && !$this->isEOF(false))			{				// Yeap. Read from the next file				$this->nextFile();				$bytes_left = $this->fileHeader->compressed - akstringlen($zipData);				$zipData .= $this->fread( $this->fp, $bytes_left );			}			else			{				$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );				return false;			}		}		if($this->fileHeader->compression == 'gzip')		{			$unzipData = gzinflate( $zipData );		}		elseif($this->fileHeader->compression == 'bzip2')		{			$unzipData = bzdecompress( $zipData );		}		unset($zipData);		// Write to the file.		if( !AKFactory::get('kickstart.setup.dryrun','0') && is_resource($outfp) )		{			@fwrite( $outfp, $unzipData, $this->fileHeader->uncompressed );			@fclose( $outfp );		}		unset($unzipData);		$this->runState = AK_STATE_DATAREAD;		return true;	}	/**	 * Process the file data of a link entry	 * @return bool	 */	private function processTypeLink()	{		$readBytes = 0;		$toReadBytes = 0;		$leftBytes = $this->fileHeader->compressed;		$data = '';		while( $leftBytes > 0)		{			$toReadBytes = ($leftBytes > $this->chunkSize) ? $this->chunkSize : $leftBytes;			$mydata = $this->fread( $this->fp, $toReadBytes );			$reallyReadBytes = akstringlen($mydata);			$data .= $mydata;			$leftBytes -= $reallyReadBytes;			if($reallyReadBytes < $toReadBytes)			{				// We read less than requested! Why? Did we hit local EOF?				if( $this->isEOF(true) && !$this->isEOF(false) )				{					// Yeap. Let's go to the next file					$this->nextFile();				}				else				{					// Nope. The archive is corrupt					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}			}		}		// Try to remove an existing file or directory by the same name		if(file_exists($this->fileHeader->realFile)) { @unlink($this->fileHeader->realFile); @rmdir($this->fileHeader->realFile); }		// Remove any trailing slash		if(substr($this->fileHeader->realFile, -1) == '/') $this->fileHeader->realFile = substr($this->fileHeader->realFile, 0, -1);		// Create the symlink - only possible within PHP context. There's no support built in the FTP protocol, so no postproc use is possible here :(		if( !AKFactory::get('kickstart.setup.dryrun','0') )			@symlink($data, $this->fileHeader->realFile);		$this->runState = AK_STATE_DATAREAD;		return true; // No matter if the link was created!	}	/**	 * Process the file data of a directory entry	 * @return bool	 */	private function processTypeDir()	{		// Directory entries in the JPA do not have file data, therefore we're done processing the entry		$this->runState = AK_STATE_DATAREAD;		return true;	}	/**	 * Creates the directory this file points to	 */	protected function createDirectory()	{		if( AKFactory::get('kickstart.setup.dryrun','0') ) return true;		// Do we need to create a directory?		if(empty($this->fileHeader->realFile)) $this->fileHeader->realFile = $this->fileHeader->file;		$lastSlash = strrpos($this->fileHeader->realFile, '/');		$dirName = substr( $this->fileHeader->realFile, 0, $lastSlash);		$perms = $this->flagRestorePermissions ? $retArray['permissions'] : 0755;		$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);		if( ($this->postProcEngine->createDirRecursive($dirName, $perms) == false) && (!$ignore) ) {			$this->setError( AKText::sprintf('COULDNT_CREATE_DIR', $dirName) );			return false;		}		else		{			return true;		}	}}/** * ZIP archive extraction class * * Since the file data portion of ZIP and JPA are similarly structured (it's empty for dirs, * linked node name for symlinks, dumped binary data for no compressions and dumped gzipped * binary data for gzip compression) we just have to subclass AKUnarchiverJPA and change the * header reading bits. Reusable code ;) */class AKUnarchiverZIP extends AKUnarchiverJPA{	var $expectDataDescriptor = false;	protected function readArchiveHeader()	{		// Initialize header data array		$this->archiveHeaderData = new stdClass();		// Open the first part		$this->nextFile();		// Fail for unreadable files		if( $this->fp === false ) return false;		// Read a possible multipart signature		$sigBinary = fread( $this->fp, 4 );		$headerData = unpack('Vsig', $sigBinary);		// Roll back if it's not a multipart archive		if( $headerData['sig'] == 0x04034b50 ) fseek($this->fp, -4, SEEK_CUR);		$multiPartSigs = array(			0x08074b50,		// Multi-part ZIP			0x30304b50,		// Multi-part ZIP (alternate)			0x04034b50		// Single file		);		if( !in_array($headerData['sig'], $multiPartSigs) )		{			$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));			return false;		}		$this->currentPartOffset = @ftell($this->fp);		$this->dataReadLength = 0;		return true;	}	/**	 * Concrete classes must use this method to read the file header	 * @return bool True if reading the file was successful, false if an error occured or we reached end of archive	 */	protected function readFileHeader()	{		// If the current part is over, proceed to the next part please		if( $this->isEOF(true) ) {			$this->nextFile();		}		if($this->expectDataDescriptor)		{			// The last file had bit 3 of the general purpose bit flag set. This means that we have a			// 12 byte data descriptor we need to skip. To make things worse, there might also be a 4			// byte optional data descriptor header (0x08074b50).			$junk = @fread($this->fp, 4);			$junk = unpack('Vsig', $junk);			if($junk['sig'] == 0x08074b50) {				// Yes, there was a signature				$junk = @fread($this->fp, 12);				if(defined('KSDEBUG')) {					debugMsg('Data descriptor (w/ header) skipped at '.(ftell($this->fp)-12));				}			} else {				// No, there was no signature, just read another 8 bytes				$junk = @fread($this->fp, 8);				if(defined('KSDEBUG')) {					debugMsg('Data descriptor (w/out header) skipped at '.(ftell($this->fp)-8));				}			}			// And check for EOF, too			if( $this->isEOF(true) ) {				if(defined('KSDEBUG')) {					debugMsg('EOF before reading header');				}								$this->nextFile();			}		}		// Get and decode Local File Header		$headerBinary = fread($this->fp, 30);		$headerData = unpack('Vsig/C2ver/vbitflag/vcompmethod/vlastmodtime/vlastmoddate/Vcrc/Vcompsize/Vuncomp/vfnamelen/veflen', $headerBinary);		// Check signature		if(!( $headerData['sig'] == 0x04034b50 ))		{			if(defined('KSDEBUG')) {				debugMsg('Not a file signature at '.(ftell($this->fp)-4));			}						// The signature is not the one used for files. Is this a central directory record (i.e. we're done)?			if($headerData['sig'] == 0x02014b50)			{				if(defined('KSDEBUG')) {					debugMsg('EOCD signature at '.(ftell($this->fp)-4));				}				// End of ZIP file detected. We'll just skip to the end of file...				while( $this->nextFile() ) {};				@fseek($this->fp, 0, SEEK_END); // Go to EOF				return false;			}			else			{				if(defined('KSDEBUG')) {					debugMsg( 'Invalid signature ' . dechex($headerData['sig']) . ' at '.ftell($this->fp) );				}				$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));				return false;			}		}		// If bit 3 of the bitflag is set, expectDataDescriptor is true		$this->expectDataDescriptor = ($headerData['bitflag'] & 4) == 4;		$this->fileHeader = new stdClass();		$this->fileHeader->timestamp = 0;		// Read the last modified data and time		$lastmodtime = $headerData['lastmodtime'];		$lastmoddate = $headerData['lastmoddate'];				if($lastmoddate && $lastmodtime)		{			// ----- Extract time			$v_hour = ($lastmodtime & 0xF800) >> 11;			$v_minute = ($lastmodtime & 0x07E0) >> 5;			$v_seconde = ($lastmodtime & 0x001F)*2;						// ----- Extract date			$v_year = (($lastmoddate & 0xFE00) >> 9) + 1980;			$v_month = ($lastmoddate & 0x01E0) >> 5;			$v_day = $lastmoddate & 0x001F;						// ----- Get UNIX date format			$this->fileHeader->timestamp = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);		}				$isBannedFile = false;		$this->fileHeader->compressed	= $headerData['compsize'];		$this->fileHeader->uncompressed	= $headerData['uncomp'];		$nameFieldLength				= $headerData['fnamelen'];		$extraFieldLength				= $headerData['eflen'];		// Read filename field		$this->fileHeader->file			= fread( $this->fp, $nameFieldLength );		// Handle file renaming		$isRenamed = false;		if(is_array($this->renameFiles) && (count($this->renameFiles) > 0) )		{			if(array_key_exists($this->fileHeader->file, $this->renameFiles))			{				$this->fileHeader->file = $this->renameFiles[$this->fileHeader->file];				$isRenamed = true;			}		}				// Handle directory renaming		$isDirRenamed = false;		if(is_array($this->renameDirs) && (count($this->renameDirs) > 0)) {			if(array_key_exists(dirname($file), $this->renameDirs)) {				$file = rtrim($this->renameDirs[dirname($file)],'/').'/'.basename($file);				$isRenamed = true;				$isDirRenamed = true;			}		}		// Read extra field if present		if($extraFieldLength > 0) {			$extrafield = fread( $this->fp, $extraFieldLength );		}				if(defined('KSDEBUG')) {			debugMsg( '*'.ftell($this->fp).' IS START OF '.$this->fileHeader->file. ' ('.$this->fileHeader->compressed.' bytes)' );		}				// Decide filetype -- Check for directories		$this->fileHeader->type = 'file';		if( strrpos($this->fileHeader->file, '/') == strlen($this->fileHeader->file) - 1 ) $this->fileHeader->type = 'dir';		// Decide filetype -- Check for symbolic links		if( ($headerData['ver1'] == 10) && ($headerData['ver2'] == 3) )$this->fileHeader->type = 'link';		switch( $headerData['compmethod'] )		{			case 0:				$this->fileHeader->compression = 'none';				break;			case 8:				$this->fileHeader->compression = 'gzip';				break;		}		// Find hard-coded banned files		if( (basename($this->fileHeader->file) == ".") || (basename($this->fileHeader->file) == "..") )		{			$isBannedFile = true;		}		// Also try to find banned files passed in class configuration		if((count($this->skipFiles) > 0) && (!$isRenamed))		{			if(in_array($this->fileHeader->file, $this->skipFiles))			{				$isBannedFile = true;			}		}		// If we have a banned file, let's skip it		if($isBannedFile)		{			// Advance the file pointer, skipping exactly the size of the compressed data			$seekleft = $this->fileHeader->compressed;			while($seekleft > 0)			{				// Ensure that we can seek past archive part boundaries				$curSize = @filesize($this->archiveList[$this->currentPartNumber]);				$curPos = @ftell($this->fp);				$canSeek = $curSize - $curPos;				if($canSeek > $seekleft) $canSeek = $seekleft;				@fseek( $this->fp, $canSeek, SEEK_CUR );				$seekleft -= $canSeek;				if($seekleft) $this->nextFile();			}			$this->currentPartOffset = @ftell($this->fp);			$this->runState = AK_STATE_DONE;			return true;		}		// Last chance to prepend a path to the filename		if(!empty($this->addPath) && !$isDirRenamed)		{			$this->fileHeader->file = $this->addPath.$this->fileHeader->file;		}		// Get the translated path name		if($this->fileHeader->type == 'file')		{			$this->fileHeader->realFile = $this->postProcEngine->processFilename( $this->fileHeader->file );		}		elseif($this->fileHeader->type == 'dir')		{			$this->fileHeader->timestamp = 0;			$dir = $this->fileHeader->file;			$this->postProcEngine->createDirRecursive( $this->fileHeader->file, 0755 );			$this->postProcEngine->processFilename(null);		}		else		{			// Symlink; do not post-process			$this->fileHeader->timestamp = 0;			$this->postProcEngine->processFilename(null);		}		$this->createDirectory();		// Header is read		$this->runState = AK_STATE_HEADER;		return true;	}}/** * Timer class */class AKCoreTimer extends AKAbstractObject{	/** @var int Maximum execution time allowance per step */	private $max_exec_time = null;	/** @var int Timestamp of execution start */	private $start_time = null;	/**	 * Public constructor, creates the timer object and calculates the execution time limits	 * @return AECoreTimer	 */	public function __construct()	{		parent::__construct();		// Initialize start time		$this->start_time = $this->microtime_float();		// Get configured max time per step and bias		$config_max_exec_time	= AKFactory::get('kickstart.tuning.max_exec_time', 14);		$bias					= AKFactory::get('kickstart.tuning.run_time_bias', 75)/100;		// Get PHP's maximum execution time (our upper limit)		if(@function_exists('ini_get'))		{			$php_max_exec_time = @ini_get("maximum_execution_time");			if ( (!is_numeric($php_max_exec_time)) || ($php_max_exec_time == 0) ) {				// If we have no time limit, set a hard limit of about 10 seconds				// (safe for Apache and IIS timeouts, verbose enough for users)				$php_max_exec_time = 14;			}		}		else		{			// If ini_get is not available, use a rough default			$php_max_exec_time = 14;		}		// Apply an arbitrary correction to counter CMS load time		$php_max_exec_time--;		// Apply bias		$php_max_exec_time = $php_max_exec_time * $bias;		$config_max_exec_time = $config_max_exec_time * $bias;		// Use the most appropriate time limit value		if( $config_max_exec_time > $php_max_exec_time )		{			$this->max_exec_time = $php_max_exec_time;		}		else		{			$this->max_exec_time = $config_max_exec_time;		}	}	/**	 * Wake-up function to reset internal timer when we get unserialized	 */	public function __wakeup()	{		// Re-initialize start time on wake-up		$this->start_time = $this->microtime_float();	}	/**	 * Gets the number of seconds left, before we hit the "must break" threshold	 * @return float	 */	public function getTimeLeft()	{		return $this->max_exec_time - $this->getRunningTime();	}	/**	 * Gets the time elapsed since object creation/unserialization, effectively how	 * long Akeeba Engine has been processing data	 * @return float	 */	public function getRunningTime()	{		return $this->microtime_float() - $this->start_time;	}	/**	 * Returns the current timestampt in decimal seconds	 */	private function microtime_float()	{		list($usec, $sec) = explode(" ", microtime());		return ((float)$usec + (float)$sec);	}	/**	 * Enforce the minimum execution time	 */	public function enforce_min_exec_time()	{		// Try to get a sane value for PHP's maximum_execution_time INI parameter		if(@function_exists('ini_get'))		{			$php_max_exec = @ini_get("maximum_execution_time");		}		else		{			$php_max_exec = 10;		}		if ( ($php_max_exec == "") || ($php_max_exec == 0) ) {			$php_max_exec = 10;		}		// Decrease $php_max_exec time by 500 msec we need (approx.) to tear down		// the application, as well as another 500msec added for rounding		// error purposes. Also make sure this is never gonna be less than 0.		$php_max_exec = max($php_max_exec * 1000 - 1000, 0);		// Get the "minimum execution time per step" Akeeba Backup configuration variable		$minexectime = AKFactory::get('kickstart.tuning.min_exec_time',0);		if(!is_numeric($minexectime)) $minexectime = 0;		// Make sure we are not over PHP's time limit!		if($minexectime > $php_max_exec) $minexectime = $php_max_exec;		// Get current running time		$elapsed_time = $this->getRunningTime() * 1000;			// Only run a sleep delay if we haven't reached the minexectime execution time		if( ($minexectime > $elapsed_time) && ($elapsed_time > 0) )		{			$sleep_msec = $minexectime - $elapsed_time;			if(function_exists('usleep'))			{				usleep(1000 * $sleep_msec);			}			elseif(function_exists('time_nanosleep'))			{				$sleep_sec = floor($sleep_msec / 1000);				$sleep_nsec = 1000000 * ($sleep_msec - ($sleep_sec * 1000));				time_nanosleep($sleep_sec, $sleep_nsec);			}			elseif(function_exists('time_sleep_until'))			{				$until_timestamp = time() + $sleep_msec / 1000;				time_sleep_until($until_timestamp);			}			elseif(function_exists('sleep'))			{				$sleep_sec = ceil($sleep_msec/1000);				sleep( $sleep_sec );			}		}		elseif( $elapsed_time > 0 )		{			// No sleep required, even if user configured us to be able to do so.		}	}	/**	 * Reset the timer. It should only be used in CLI mode!	 */	public function resetTime()	{		$this->start_time = $this->microtime_float();	}}/** * JPS archive extraction class */class AKUnarchiverJPS extends AKUnarchiverJPA{	private $archiveHeaderData = array();	private $password = '';	public function __construct()	{		parent::__construct();		$this->password = AKFactory::get('kickstart.jps.password','');	}	protected function readArchiveHeader()	{		// Initialize header data array		$this->archiveHeaderData = new stdClass();		// Open the first part		$this->nextFile();		// Fail for unreadable files		if( $this->fp === false ) return false;		// Read the signature		$sig = fread( $this->fp, 3 );		if ($sig != 'JPS')		{			// Not a JPA file			$this->setError( AKText::_('ERR_NOT_A_JPS_FILE') );			return false;		}		// Read and parse the known portion of header data (5 bytes)		$bin_data = fread($this->fp, 5);		$header_data = unpack('Cmajor/Cminor/cspanned/vextra', $bin_data);		// Load any remaining header data (forward compatibility)		$rest_length = $header_data['extra'];		if( $rest_length > 0 )			$junk = fread($this->fp, $rest_length);		else			$junk = '';		// Temporary array with all the data we read		$temp = array(			'signature' => 			$sig,			'major' => 				$header_data['major'],			'minor' => 				$header_data['minor'],			'spanned' => 			$header_data['spanned']		);		// Array-to-object conversion		foreach($temp as $key => $value)		{			$this->archiveHeaderData->{$key} = $value;		}		$this->currentPartOffset = @ftell($this->fp);		$this->dataReadLength = 0;		return true;	}	/**	 * Concrete classes must use this method to read the file header	 * @return bool True if reading the file was successful, false if an error occured or we reached end of archive	 */	protected function readFileHeader()	{		// If the current part is over, proceed to the next part please		if( $this->isEOF(true) ) {			$this->nextFile();		}		// Get and decode Entity Description Block		$signature = fread($this->fp, 3);		// Check for end-of-archive siganture		if($signature == 'JPE')		{			$this->setState('postrun');			return true;		}		$this->fileHeader = new stdClass();		$this->fileHeader->timestamp = 0;		// Check signature		if( $signature != 'JPF' )		{			if($this->isEOF(true))			{				// This file is finished; make sure it's the last one				$this->nextFile();				if(!$this->isEOF(false))				{					$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));					return false;				}				// We're just finished				return false;			}			else			{				fseek($this->fp, -6, SEEK_CUR);				$signature = fread($this->fp, 3);				if($signature == 'JPE')				{					return false;				}				$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));				return false;			}		}		// This a JPA Entity Block. Process the header.		$isBannedFile = false;		// Read and decrypt the header		$edbhData = fread($this->fp, 4);		$edbh = unpack('vencsize/vdecsize', $edbhData);		$bin_data = fread($this->fp, $edbh['encsize']);		// Decrypt and truncate		$bin_data = AKEncryptionAES::AESDecryptCBC($bin_data, $this->password, 128);		$bin_data = substr($bin_data,0,$edbh['decsize']);		// Read length of EDB and of the Entity Path Data		$length_array = unpack('vpathsize', substr($bin_data,0,2) );		// Read the path data		$file = substr($bin_data,2,$length_array['pathsize']);		// Handle file renaming		$isRenamed = false;		if(is_array($this->renameFiles) && (count($this->renameFiles) > 0) )		{			if(array_key_exists($file, $this->renameFiles))			{				$file = $this->renameFiles[$file];				$isRenamed = true;			}		}				// Handle directory renaming		$isDirRenamed = false;		if(is_array($this->renameDirs) && (count($this->renameDirs) > 0)) {			if(array_key_exists(dirname($file), $this->renameDirs)) {				$file = rtrim($this->renameDirs[dirname($file)],'/').'/'.basename($file);				$isRenamed = true;				$isDirRenamed = true;			}		}		// Read and parse the known data portion		$bin_data = substr($bin_data, 2 + $length_array['pathsize']);		$header_data = unpack('Ctype/Ccompression/Vuncompsize/Vperms/Vfilectime', $bin_data);		$this->fileHeader->timestamp = $header_data['filectime'];		$compressionType = $header_data['compression'];		// Populate the return array		$this->fileHeader->file = $file;		$this->fileHeader->uncompressed = $header_data['uncompsize'];		switch($header_data['type'])		{			case 0:				$this->fileHeader->type = 'dir';				break;			case 1:				$this->fileHeader->type = 'file';				break;			case 2:				$this->fileHeader->type = 'link';				break;		}		switch( $compressionType )		{			case 0:				$this->fileHeader->compression = 'none';				break;			case 1:				$this->fileHeader->compression = 'gzip';				break;			case 2:				$this->fileHeader->compression = 'bzip2';				break;		}		$this->fileHeader->permissions = $header_data['perms'];		// Find hard-coded banned files		if( (basename($this->fileHeader->file) == ".") || (basename($this->fileHeader->file) == "..") )		{			$isBannedFile = true;		}		// Also try to find banned files passed in class configuration		if((count($this->skipFiles) > 0) && (!$isRenamed) )		{			if(in_array($this->fileHeader->file, $this->skipFiles))			{				$isBannedFile = true;			}		}		// If we have a banned file, let's skip it		if($isBannedFile)		{			$done = false;			while(!$done)			{				// Read the Data Chunk Block header				$binMiniHead = fread($this->fp, 8);				if( in_array( substr($binMiniHead,0,3), array('JPF','JPE') ) )				{					// Not a Data Chunk Block header, I am done skipping the file					@fseek($this->fp,-8,SEEK_CUR); // Roll back the file pointer					$done = true; // Mark as done					continue; // Exit loop				}				else				{					// Skip forward by the amount of compressed data					$miniHead = unpack('Vencsize/Vdecsize');					@fseek($this->fp, $miniHead['encsize'], SEEK_CUR);				}			}			$this->currentPartOffset = @ftell($this->fp);			$this->runState = AK_STATE_DONE;			return true;		}		// Last chance to prepend a path to the filename		if(!empty($this->addPath) && !$isDirRenamed)		{			$this->fileHeader->file = $this->addPath.$this->fileHeader->file;		}		// Get the translated path name		$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);		if($this->fileHeader->type == 'file')		{			// Regular file; ask the postproc engine to process its filename			if($restorePerms)			{				$this->fileHeader->realFile = $this->postProcEngine->processFilename( $this->fileHeader->file, $this->fileHeader->permissions );			}			else			{				$this->fileHeader->realFile = $this->postProcEngine->processFilename( $this->fileHeader->file );			}		}		elseif($this->fileHeader->type == 'dir')		{			$dir = $this->fileHeader->file;			$this->fileHeader->realFile = $dir;			// Directory; just create it			if($restorePerms)			{				$this->postProcEngine->createDirRecursive( $this->fileHeader->file, $this->fileHeader->permissions );			}			else			{				$this->postProcEngine->createDirRecursive( $this->fileHeader->file, 0755 );			}			$this->postProcEngine->processFilename(null);		}		else		{			// Symlink; do not post-process			$this->postProcEngine->processFilename(null);		}		$this->createDirectory();		// Header is read		$this->runState = AK_STATE_HEADER;		$this->dataReadLength = 0;		return true;	}	/**	 * Concrete classes must use this method to process file data. It must set $runState to AK_STATE_DATAREAD when	 * it's finished processing the file data.	 * @return bool True if processing the file data was successful, false if an error occured	 */	protected function processFileData()	{		switch( $this->fileHeader->type )		{			case 'dir':				return $this->processTypeDir();				break;			case 'link':				return $this->processTypeLink();				break;			case 'file':				switch($this->fileHeader->compression)				{					case 'none':						return $this->processTypeFileUncompressed();						break;					case 'gzip':					case 'bzip2':						return $this->processTypeFileCompressedSimple();						break;				}				break;		}	}	private function processTypeFileUncompressed()	{		// Uncompressed files are being processed in small chunks, to avoid timeouts		if( ($this->dataReadLength == 0) && !AKFactory::get('kickstart.setup.dryrun','0') )		{			// Before processing file data, ensure permissions are adequate			$this->setCorrectPermissions( $this->fileHeader->file );		}		// Open the output file		if( !AKFactory::get('kickstart.setup.dryrun','0') )		{			$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);			if ($this->dataReadLength == 0) {				$outfp = @fopen( $this->fileHeader->realFile, 'wb' );			} else {				$outfp = @fopen( $this->fileHeader->realFile, 'ab' );			}			// Can we write to the file?			if( ($outfp === false) && (!$ignore) ) {				// An error occured				$this->setError( AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile) );				return false;			}		}		// Does the file have any data, at all?		if( $this->fileHeader->uncompressed == 0 )		{			// No file data!			if( !AKFactory::get('kickstart.setup.dryrun','0') && is_resource($outfp) ) @fclose($outfp);			$this->runState = AK_STATE_DATAREAD;			return true;		}		else		{			$this->setError('An uncompressed file was detected; this is not supported by this archive extraction utility');			return false;		}		return true;	}	private function processTypeFileCompressedSimple()	{		$timer = AKFactory::getTimer();		// Files are being processed in small chunks, to avoid timeouts		if( ($this->dataReadLength == 0) && !AKFactory::get('kickstart.setup.dryrun','0') )		{			// Before processing file data, ensure permissions are adequate			$this->setCorrectPermissions( $this->fileHeader->file );		}		// Open the output file		if( !AKFactory::get('kickstart.setup.dryrun','0') )		{			// Open the output file			$outfp = @fopen( $this->fileHeader->realFile, 'wb' );			// Can we write to the file?			$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);			if( ($outfp === false) && (!$ignore) ) {				// An error occured				$this->setError( AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile) );				return false;			}		}		// Does the file have any data, at all?		if( $this->fileHeader->uncompressed == 0 )		{			// No file data!			if( !AKFactory::get('kickstart.setup.dryrun','0') )				if(is_resource($outfp)) @fclose($outfp);			$this->runState = AK_STATE_DATAREAD;			return true;		}		$leftBytes = $this->fileHeader->uncompressed - $this->dataReadLength;		// Loop while there's data to write and enough time to do it		while( ($leftBytes > 0) && ($timer->getTimeLeft() > 0) )		{			// Read the mini header			$binMiniHeader = fread($this->fp, 8);			$reallyReadBytes = akstringlen($binMiniHeader);			if($reallyReadBytes < 8)			{				// We read less than requested! Why? Did we hit local EOF?				if( $this->isEOF(true) && !$this->isEOF(false) )				{					// Yeap. Let's go to the next file					$this->nextFile();					// Retry reading the header					$binMiniHeader = fread($this->fp, 8);					$reallyReadBytes = akstringlen($binMiniHeader);					// Still not enough data? If so, the archive is corrupt or missing parts.					if($reallyReadBytes < 8) {						$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );						return false;					}				}				else				{					// Nope. The archive is corrupt					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}			}			// Read the encrypted data			$miniHeader = unpack('Vencsize/Vdecsize', $binMiniHeader);			$toReadBytes = $miniHeader['encsize'];			$data = $this->fread( $this->fp, $toReadBytes );			$reallyReadBytes = akstringlen($data);			if($reallyReadBytes < $toReadBytes)			{				// We read less than requested! Why? Did we hit local EOF?				if( $this->isEOF(true) && !$this->isEOF(false) )				{					// Yeap. Let's go to the next file					$this->nextFile();					// Read the rest of the data					$toReadBytes -= $reallyReadBytes;					$restData = $this->fread( $this->fp, $toReadBytes );					$reallyReadBytes = akstringlen($restData);					if($reallyReadBytes < $toReadBytes) {						$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );						return false;					}					if(akstringlen($data) == 0) {						$data = $restData;					} else {						$data .= $restData;					}				}				else				{					// Nope. The archive is corrupt					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}			}			// Decrypt the data			$data = AKEncryptionAES::AESDecryptCBC($data, $this->password, 128);			// Is the length of the decrypted data less than expected?			$data_length = akstringlen($data);			if($data_length < $miniHeader['decsize']) {				$this->setError(AKText::_('ERR_INVALID_JPS_PASSWORD'));				return false;			}			// Trim the data			$data = substr($data,0,$miniHeader['decsize']);			// Decompress			$data = gzinflate($data);			$unc_len = akstringlen($data);			// Write the decrypted data			if( !AKFactory::get('kickstart.setup.dryrun','0') )				if(is_resource($outfp)) @fwrite( $outfp, $data, akstringlen($data) );			// Update the read length			$this->dataReadLength += $unc_len;			$leftBytes = $this->fileHeader->uncompressed - $this->dataReadLength;		}		// Close the file pointer		if( !AKFactory::get('kickstart.setup.dryrun','0') )			if(is_resource($outfp)) @fclose($outfp);		// Was this a pre-timeout bail out?		if( $leftBytes > 0 )		{			$this->runState = AK_STATE_DATA;		}		else		{			// Oh! We just finished!			$this->runState = AK_STATE_DATAREAD;			$this->dataReadLength = 0;		}	}	/**	 * Process the file data of a link entry	 * @return bool	 */	private function processTypeLink()	{		// Does the file have any data, at all?		if( $this->fileHeader->uncompressed == 0 )		{			// No file data!			$this->runState = AK_STATE_DATAREAD;			return true;		}		// Read the mini header		$binMiniHeader = fread($this->fp, 8);		$reallyReadBytes = akstringlen($binMiniHeader);		if($reallyReadBytes < 8)		{			// We read less than requested! Why? Did we hit local EOF?			if( $this->isEOF(true) && !$this->isEOF(false) )			{				// Yeap. Let's go to the next file				$this->nextFile();				// Retry reading the header				$binMiniHeader = fread($this->fp, 8);				$reallyReadBytes = akstringlen($binMiniHeader);				// Still not enough data? If so, the archive is corrupt or missing parts.				if($reallyReadBytes < 8) {					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}			}			else			{				// Nope. The archive is corrupt				$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );				return false;			}		}		// Read the encrypted data		$miniHeader = unpack('Vencsize/Vdecsize', $binMiniHeader);		$toReadBytes = $miniHeader['encsize'];		$data = $this->fread( $this->fp, $toReadBytes );		$reallyReadBytes = akstringlen($data);		if($reallyReadBytes < $toReadBytes)		{			// We read less than requested! Why? Did we hit local EOF?			if( $this->isEOF(true) && !$this->isEOF(false) )			{				// Yeap. Let's go to the next file				$this->nextFile();				// Read the rest of the data				$toReadBytes -= $reallyReadBytes;				$restData = $this->fread( $this->fp, $toReadBytes );				$reallyReadBytes = akstringlen($data);				if($reallyReadBytes < $toReadBytes) {					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}				$data .= $restData;			}			else			{				// Nope. The archive is corrupt				$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );				return false;			}		}		// Decrypt the data		$data = AKEncryptionAES::AESDecryptCBC($data, $this->password, 128);		// Is the length of the decrypted data less than expected?		$data_length = akstringlen($data);		if($data_length < $miniHeader['decsize']) {			$this->setError(AKText::_('ERR_INVALID_JPS_PASSWORD'));			return false;		}		// Trim the data		$data = substr($data,0,$miniHeader['decsize']);		// Try to remove an existing file or directory by the same name		if(file_exists($this->fileHeader->realFile)) { @unlink($this->fileHeader->realFile); @rmdir($this->fileHeader->realFile); }		// Remove any trailing slash		if(substr($this->fileHeader->realFile, -1) == '/') $this->fileHeader->realFile = substr($this->fileHeader->realFile, 0, -1);		// Create the symlink - only possible within PHP context. There's no support built in the FTP protocol, so no postproc use is possible here :(		if( !AKFactory::get('kickstart.setup.dryrun','0') )			@symlink($data, $this->fileHeader->realFile);		$this->runState = AK_STATE_DATAREAD;		return true; // No matter if the link was created!	}	/**	 * Process the file data of a directory entry	 * @return bool	 */	private function processTypeDir()	{		// Directory entries in the JPA do not have file data, therefore we're done processing the entry		$this->runState = AK_STATE_DATAREAD;		return true;	}	/**	 * Creates the directory this file points to	 */	protected function createDirectory()	{		if( AKFactory::get('kickstart.setup.dryrun','0') ) return true;		// Do we need to create a directory?		$lastSlash = strrpos($this->fileHeader->realFile, '/');		$dirName = substr( $this->fileHeader->realFile, 0, $lastSlash);		$perms = $this->flagRestorePermissions ? $retArray['permissions'] : 0755;		$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);		if( ($this->postProcEngine->createDirRecursive($dirName, $perms) == false) && (!$ignore) ) {			$this->setError( AKText::sprintf('COULDNT_CREATE_DIR', $dirName) );			return false;		}		else		{			return true;		}	}}/** * A filesystem scanner which uses opendir() */class AKUtilsLister extends AKAbstractObject{	public function &getFiles($folder, $pattern = '*')	{		// Initialize variables		$arr = array();		$false = false;		if(!is_dir($folder)) return $false;		$handle = @opendir($folder);		// If directory is not accessible, just return FALSE		if ($handle === FALSE) {			$this->setWarning( 'Unreadable directory '.$folder);			return $false;		}		while (($file = @readdir($handle)) !== false)		{			if( !fnmatch($pattern, $file) ) continue;			if (($file != '.') && ($file != '..'))			{				$ds = ($folder == '') || ($folder == '/') || (@substr($folder, -1) == '/') || (@substr($folder, -1) == DIRECTORY_SEPARATOR) ? '' : DIRECTORY_SEPARATOR;				$dir = $folder . $ds . $file;				$isDir = is_dir($dir);				if (!$isDir) {					$arr[] = $dir;				}			}		}		@closedir($handle);		return $arr;	}	public function &getFolders($folder, $pattern = '*')	{		// Initialize variables		$arr = array();		$false = false;		if(!is_dir($folder)) return $false;		$handle = @opendir($folder);		// If directory is not accessible, just return FALSE		if ($handle === FALSE) {			$this->setWarning( 'Unreadable directory '.$folder);			return $false;		}		while (($file = @readdir($handle)) !== false)		{			if( !fnmatch($pattern, $file) ) continue;			if (($file != '.') && ($file != '..'))			{				$ds = ($folder == '') || ($folder == '/') || (@substr($folder, -1) == '/') || (@substr($folder, -1) == DIRECTORY_SEPARATOR) ? '' : DIRECTORY_SEPARATOR;				$dir = $folder . $ds . $file;				$isDir = is_dir($dir);				if ($isDir) {					$arr[] = $dir;				}			}		}		@closedir($handle);		return $arr;	}}/** * A simple INI-based i18n engine */class AKText extends AKAbstractObject{	/**	 * The default (en_GB) translation used when no other translation is available	 * @var array	 */	private $default_translation = array(		'AUTOMODEON' => 'Auto-mode enabled',		'ERR_NOT_A_JPA_FILE' => 'The file is not a JPA archive',		'ERR_CORRUPT_ARCHIVE' => 'The archive file is corrupt, truncated or archive parts are missing',		'ERR_INVALID_LOGIN' => 'Invalid login',		'COULDNT_CREATE_DIR' => 'Could not create %s folder',		'COULDNT_WRITE_FILE' => 'Could not open %s for writing.',		'WRONG_FTP_HOST' => 'Wrong FTP host or port',		'WRONG_FTP_USER' => 'Wrong FTP username or password',		'WRONG_FTP_PATH1' => 'Wrong FTP initial directory - the directory doesn\'t exist',		'FTP_CANT_CREATE_DIR' => 'Could not create directory %s',		'FTP_TEMPDIR_NOT_WRITABLE' => 'Could not find or create a writable temporary directory',		'FTP_COULDNT_UPLOAD' => 'Could not upload %s',		'THINGS_HEADER' => 'Things you should know about Akeeba Kickstart',		'THINGS_01' => 'Kickstart is not an installer. It is an archive extraction tool. The actual installer was put inside the archive file at backup time.',		'THINGS_02' => 'Kickstart is not the only way to extract the backup archive. You can use Akeeba eXtract Wizard and upload the extracted files using FTP instead.',		'THINGS_03' => 'Kickstart is bound by your server\'s configuration. As such, it may not work at all.',		'THINGS_04' => 'You should download and upload your archive files using FTP in Binary transfer mode. Any other method could lead to a corrupt backup archive and restoration failure.',		'THINGS_05' => 'Post-restoration site load errors are usually caused by .htaccess or php.ini directives. You should understand that blank pages, 404 and 500 errors can usually be worked around by editing the aforementioned files. It is not our job to mess with your configuration files, because this could be dangerous for your site.',		'THINGS_06' => 'Kickstart overwrites files without a warning. If you are not sure that you are OK with that do not continue.',		'THINGS_07' => 'Trying to restore to the temporary URL of a cPanel host (e.g. http://1.2.3.4/~username) will lead to restoration failure and your site will appear to be not working. This is normal and it\'s just how your server and CMS software work.',		'THINGS_08' => 'You are supposed to read the documentation before using this software. Most issues can be avoided, or easily worked around, by understanding how this software works.',		'THINGS_09' => 'This text does not imply that there is a problem detected. It is standard text displayed every time you launch Kickstart.',		'CLOSE_LIGHTBOX' => 'Click here or press ESC to close this message',		'SELECT_ARCHIVE' => 'Select a backup archive',		'ARCHIVE_FILE' => 'Archive file:',		'SELECT_EXTRACTION' => 'Select an extraction method',		'WRITE_TO_FILES' => 'Write to files:',		'WRITE_DIRECTLY' => 'Directly',		'WRITE_FTP' => 'Use FTP',		'FTP_HOST' => 'FTP host name:',		'FTP_PORT' => 'FTP port:',		'FTP_FTPS' => 'Use FTP over SSL (FTPS)',		'FTP_PASSIVE' => 'Use FTP Passive Mode',		'FTP_USER' => 'FTP user name:',		'FTP_PASS' => 'FTP password:',		'FTP_DIR' => 'FTP directory:',		'FTP_TEMPDIR' => 'Temporary directory:',		'FTP_CONNECTION_OK' => 'FTP Connection Established',		'FTP_CONNECTION_FAILURE' => 'The FTP Connection Failed',		'FTP_TEMPDIR_WRITABLE' => 'The temporary directory is writable.',		'FTP_TEMPDIR_UNWRITABLE' => 'The temporary directory is not writable. Please check the permissions.',		'BTN_CHECK' => 'Check',		'BTN_RESET' => 'Reset',		'BTN_TESTFTPCON' => 'Test FTP connection',		'BTN_GOTOSTART' => 'Start over',		'FINE_TUNE' => 'Fine tune',		'MIN_EXEC_TIME' => 'Minimum execution time:',		'MAX_EXEC_TIME' => 'Maximum execution time:',		'SECONDS_PER_STEP' => 'seconds per step',		'EXTRACT_FILES' => 'Extract files',		'BTN_START' => 'Start',		'EXTRACTING' => 'Extracting',		'DO_NOT_CLOSE_EXTRACT' => 'Do not close this window while the extraction is in progress',		'RESTACLEANUP' => 'Restoration and Clean Up',		'BTN_RUNINSTALLER' => 'Run the Installer',		'BTN_CLEANUP' => 'Clean Up',		'BTN_SITEFE' => 'Visit your site\'s front-end',		'BTN_SITEBE' => 'Visit your site\'s back-end',		'WARNINGS' => 'Extraction Warnings',		'ERROR_OCCURED' => 'An error occured',		'STEALTH_MODE' => 'Stealth mode',		'STEALTH_URL' => 'HTML file to show to web visitors',		'ERR_NOT_A_JPS_FILE' => 'The file is not a JPA archive',		'ERR_INVALID_JPS_PASSWORD' => 'The password you gave is wrong or the archive is corrupt',		'JPS_PASSWORD' => 'Archive Password (for JPS files)',		'INVALID_FILE_HEADER' => 'Invalid header in archive file, part %s, offset %s',		'NEEDSOMEHELPKS' => 'Want some help to use this tool? Read this first:',		'QUICKSTART' => 'Quick Start Guide',		'CANTGETITTOWORK' => 'Can\'t get it to work? Click me!',		'NOARCHIVESCLICKHERE' => 'No archives detected. Click here for troubleshooting instructions.',		'POSTRESTORATIONTROUBLESHOOTING' => 'Something not working after the restoration? Click here for troubleshooting instructions.',		'UPDATE_HEADER' => 'An updated version of Akeeba Kickstart (<span id="update-version">unknown</span>) is available!',		'UPDATE_NOTICE' => 'You are advised to always use the latest version of Akeeba Kickstart available. Older versions may be subject to bugs and will not be supported.',		'UPDATE_DLNOW' => 'Download now',		'UPDATE_MOREINFO' => 'More information'	);	/**	 * The array holding the translation keys	 * @var array	 */	private $strings;	/**	 * The currently detected language (ISO code)	 * @var string	 */	private $language;	/*	 * Initializes the translation engine	 * @return AKText	 */	public function __construct()	{		// Start with the default translation		$this->strings = $this->default_translation;		// Try loading the translation file in English, if it exists		$this->loadTranslation('en-GB');		// Try loading the translation file in the browser's preferred language, if it exists		$this->getBrowserLanguage();		if(!is_null($this->language))		{			$this->loadTranslation();		}	}	/**	 * Singleton pattern for Language	 * @return Language The global Language instance	 */	public static function &getInstance()	{		static $instance;		if(!is_object($instance))		{			$instance = new AKText();		}		return $instance;	}	public static function _($string)	{		$text = self::getInstance();		$key = strtoupper($string);		$key = substr($key, 0, 1) == '_' ? substr($key, 1) : $key;		if (isset ($text->strings[$key]))		{			$string = $text->strings[$key];		}		else		{			if (defined($string))			{				$string = constant($string);			}		}		return $string;	}	public static function sprintf($key)	{		$text = self::getInstance();		$args = func_get_args();		if (count($args) > 0) {			$args[0] = $text->_($args[0]);			return @call_user_func_array('sprintf', $args);		}		return '';	}	public function dumpLanguage()	{		$out = '';		foreach($this->strings as $key => $value)		{			$out .= "$key=$value\n";		}		return $out;	}	public function asJavascript()	{		$out = '';		foreach($this->strings as $key => $value)		{			$key = addcslashes($key, '\\\'"');			$value = addcslashes($value, '\\\'"');			if(!empty($out)) $out .= ",\n";			$out .= "'$key':\t'$value'";		}		return $out;	}	public function resetTranslation()	{		$this->strings = $this->default_translation;	}	public function getBrowserLanguage()	{		// Detection code from Full Operating system language detection, by Harald Hope		// Retrieved from http://techpatterns.com/downloads/php_language_detection.php		$user_languages = array();		//check to see if language is set		if ( isset( $_SERVER["HTTP_ACCEPT_LANGUAGE"] ) )		{			$languages = strtolower( $_SERVER["HTTP_ACCEPT_LANGUAGE"] );			// $languages = ' fr-ch;q=0.3, da, en-us;q=0.8, en;q=0.5, fr;q=0.3';			// need to remove spaces from strings to avoid error			$languages = str_replace( ' ', '', $languages );			$languages = explode( ",", $languages );			foreach ( $languages as $language_list )			{				// pull out the language, place languages into array of full and primary				// string structure:				$temp_array = array();				// slice out the part before ; on first step, the part before - on second, place into array				$temp_array[0] = substr( $language_list, 0, strcspn( $language_list, ';' ) );//full language				$temp_array[1] = substr( $language_list, 0, 2 );// cut out primary language				if( (strlen($temp_array[0]) == 5) && ( (substr($temp_array[0],2,1) == '-') || (substr($temp_array[0],2,1) == '_') ) )				{					$langLocation = strtoupper(substr($temp_array[0],3,2));					$temp_array[0] = $temp_array[1].'-'.$langLocation;				}				//place this array into main $user_languages language array				$user_languages[] = $temp_array;			}		}		else// if no languages found		{			$user_languages[0] = array( '','' ); //return blank array.		}		$this->language = null;		$basename=basename(__FILE__, '.php') . '.ini';				// Try to match main language part of the filename, irrespective of the location, e.g. de_DE will do if de_CH doesn't exist.		$fs = new AKUtilsLister();		$iniFiles = $fs->getFiles( dirname(__FILE__), '*.'.$basename );		if(empty($iniFiles) && ($basename != 'kickstart.ini')) {			$basename = 'kickstart.ini';			$iniFiles = $fs->getFiles( dirname(__FILE__), '*.'.$basename );		}		if (is_array($iniFiles)) {			foreach($user_languages as $languageStruct)			{				if(is_null($this->language))				{					// Get files matching the main lang part					$iniFiles = $fs->getFiles( dirname(__FILE__), $languageStruct[1].'-??.'.$basename );					if (count($iniFiles) > 0) {						$filename = $iniFiles[0];						$filename = substr($filename, strlen(dirname(__FILE__))+1);						$this->language = substr($filename, 0, 5);					} else {						$this->language = null;					}				}			}		}				if(is_null($this->language)) {			// Try to find a full language match			foreach($user_languages as $languageStruct)			{				if (@file_exists($languageStruct[0].'.'.$basename) && is_null($this->language)) {					$this->language = $languageStruct[0];				} else {				}			}		} else {			// Do we have an exact match?			foreach($user_languages as $languageStruct)			{				if(substr($this->language,0,strlen($languageStruct[1])) == $languageStruct[1]) {					if(file_exists($languageStruct[0].'.'.$basename)) {						$this->language = $languageStruct[0];					}				}			}		}				// Now, scan for full language based on the partial match			}	private function loadTranslation( $lang = null )	{		$dirname = function_exists('getcwd') ? getcwd() : dirname(__FILE__);		$basename=basename(__FILE__, '.php') . '.ini';		if( empty($lang) ) $lang = $this->language;		$translationFilename = $dirname.DIRECTORY_SEPARATOR.$lang.'.'.$basename;		if(!@file_exists($translationFilename) && ($basename != 'kickstart.ini')) {			$basename = 'kickstart.ini';			$translationFilename = $dirname.DIRECTORY_SEPARATOR.$lang.'.'.$basename;		}		if(!@file_exists($translationFilename)) return;		$temp = self::parse_ini_file($translationFilename, false);		if(!is_array($this->strings)) $this->strings = array();		if(empty($temp)) {			$this->strings = array_merge($this->default_translation, $this->strings);		} else {			$this->strings = array_merge($this->strings, $temp);		}	}	/**	 * A PHP based INI file parser.	 *	 * Thanks to asohn ~at~ aircanopy ~dot~ net for posting this handy function on	 * the parse_ini_file page on http://gr.php.net/parse_ini_file	 *	 * @param string $file Filename to process	 * @param bool $process_sections True to also process INI sections	 * @return array An associative array of sections, keys and values	 * @access private	 */	public static function parse_ini_file($file, $process_sections = false, $raw_data = false)	{		$process_sections = ($process_sections !== true) ? false : true;		if(!$raw_data)		{			$ini = @file($file);		}		else		{			$ini = $file;		}		if (count($ini) == 0) {return array();}		$sections = array();		$values = array();		$result = array();		$globals = array();		$i = 0;		if(!empty($ini)) foreach ($ini as $line) {			$line = trim($line);			$line = str_replace("\t", " ", $line);			// Comments			if (!preg_match('/^[a-zA-Z0-9[]/', $line)) {continue;}			// Sections			if ($line{0} == '[') {				$tmp = explode(']', $line);				$sections[] = trim(substr($tmp[0], 1));				$i++;				continue;			}			// Key-value pair			list($key, $value) = explode('=', $line, 2);			$key = trim($key);			$value = trim($value);			if (strstr($value, ";")) {				$tmp = explode(';', $value);				if (count($tmp) == 2) {					if ((($value{0} != '"') && ($value{0} != "'")) ||					preg_match('/^".*"\s*;/', $value) || preg_match('/^".*;[^"]*$/', $value) ||					preg_match("/^'.*'\s*;/", $value) || preg_match("/^'.*;[^']*$/", $value) ){						$value = $tmp[0];					}				} else {					if ($value{0} == '"') {						$value = preg_replace('/^"(.*)".*/', '$1', $value);					} elseif ($value{0} == "'") {						$value = preg_replace("/^'(.*)'.*/", '$1', $value);					} else {						$value = $tmp[0];					}				}			}			$value = trim($value);			$value = trim($value, "'\"");			if ($i == 0) {				if (substr($line, -1, 2) == '[]') {					$globals[$key][] = $value;				} else {					$globals[$key] = $value;				}			} else {				if (substr($line, -1, 2) == '[]') {					$values[$i-1][$key][] = $value;				} else {					$values[$i-1][$key] = $value;				}			}		}		for($j = 0; $j < $i; $j++) {			if ($process_sections === true) {				$result[$sections[$j]] = $values[$j];			} else {				$result[] = $values[$j];			}		}		return $result + $globals;	}}/** * The Akeeba Kickstart Factory class * This class is reponssible for instanciating all Akeeba Kicsktart classes */class AKFactory {	/** @var array A list of instanciated objects */	private $objectlist = array();	/** @var array Simple hash data storage */	private $varlist = array();	/** Private constructor makes sure we can't directly instanciate the class */	private function __construct() {}	/**	 * Gets a single, internally used instance of the Factory	 * @param string $serialized_data [optional] Serialized data to spawn the instance from	 * @return AKFactory A reference to the unique Factory object instance	 */	protected static function &getInstance( $serialized_data = null ) {		static $myInstance;		if(!is_object($myInstance) || !is_null($serialized_data))			if(!is_null($serialized_data))			{				$myInstance = unserialize($serialized_data);			}			else			{				$myInstance = new self();			}		return $myInstance;	}	/**	 * Internal function which instanciates a class named $class_name.	 * The autoloader	 * @param object $class_name	 * @return	 */	protected static function &getClassInstance($class_name) {		$self = self::getInstance();		if(!isset($self->objectlist[$class_name]))		{			$self->objectlist[$class_name] = new $class_name;		}		return $self->objectlist[$class_name];	}	// ========================================================================	// Public factory interface	// ========================================================================	/**	 * Gets a serialized snapshot of the Factory for safekeeping (hibernate)	 * @return string The serialized snapshot of the Factory	 */	public static function serialize() {		$engine = self::getUnarchiver();		$engine->shutdown();		$serialized = serialize(self::getInstance());		if(function_exists('base64_encode') && function_exists('base64_decode'))		{			$serialized = base64_encode($serialized);		}		return $serialized;	}	/**	 * Regenerates the full Factory state from a serialized snapshot (resume)	 * @param string $serialized_data The serialized snapshot to resume from	 */	public static function unserialize($serialized_data) {		if(function_exists('base64_encode') && function_exists('base64_decode'))		{			$serialized_data = base64_decode($serialized_data);		}		self::getInstance($serialized_data);	}	/**	 * Reset the internal factory state, freeing all previously created objects	 */	public static function nuke()	{		$self = self::getInstance();		foreach($self->objectlist as $key => $object)		{			$self->objectlist[$key] = null;		}		$self->objectlist = array();	}	// ========================================================================	// Public hash data storage interface	// ========================================================================	public static function set($key, $value)	{		$self = self::getInstance();		$self->varlist[$key] = $value;	}	public static function get($key, $default = null)	{		$self = self::getInstance();		if( array_key_exists($key, $self->varlist) )		{			return $self->varlist[$key];		}		else		{			return $default;		}	}	// ========================================================================	// Akeeba Kickstart classes	// ========================================================================	/**	 * Gets the post processing engine	 * @param string $proc_engine	 */	public static function &getPostProc($proc_engine = null)	{		static $class_name;		if( empty($class_name) )		{			if(empty($proc_engine))			{				$proc_engine = self::get('kickstart.procengine','direct');			}			$class_name = 'AKPostproc'.ucfirst($proc_engine);		}		return self::getClassInstance($class_name);	}	/**	 * Gets the unarchiver engine	 */	public static function &getUnarchiver( $configOverride = null )	{		static $class_name;		if(!empty($configOverride))		{			if($configOverride['reset']) {				$class_name = null;			}		}		if( empty($class_name) )		{			$filetype = self::get('kickstart.setup.filetype', null);			if(empty($filetype))			{				$filename = self::get('kickstart.setup.sourcefile', null);				$basename = basename($filename);				$baseextension = strtoupper(substr($basename,-3));				switch($baseextension)				{					case 'JPA':						$filetype = 'JPA';						break;					case 'JPS':						$filetype = 'JPS';						break;					case 'ZIP':						$filetype = 'ZIP';						break;					default:						die('Invalid archive type or extension in file '.$filename);						break;				}			}			$class_name = 'AKUnarchiver'.ucfirst($filetype);		}		$destdir = self::get('kickstart.setup.destdir', null);		if(empty($destdir))		{			$destdir = function_exists('getcwd') ? getcwd() : dirname(__FILE__);		}		$object = self::getClassInstance($class_name);		if( $object->getState() == 'init')		{			// Initialize the object			$config = array(				'filename'				=> self::get('kickstart.setup.sourcefile', ''),				'restore_permissions'	=> self::get('kickstart.setup.restoreperms', 0),				'post_proc'				=> self::get('kickstart.procengine', 'direct'),				'add_path'				=> $destdir,				'rename_files'			=> array( '.htaccess' => 'htaccess.bak', 'php.ini' => 'php.ini.bak' ),				'skip_files'			=> array( basename(__FILE__), 'kickstart.php', 'abiautomation.ini', 'htaccess.bak', 'php.ini.bak' )			);			if(!defined('KICKSTART'))			{				// In restore.php mode we have to exclude some more files				$config['skip_files'][] = 'administrator/components/com_akeeba/restore.php';				$config['skip_files'][] = 'administrator/components/com_akeeba/restoration.php';			}			if(!empty($configOverride))			{				foreach($configOverride as $key => $value)				{					$config[$key] = $value;				}			}			$object->setup($config);		}		return $object;	}	/**	 * Get the a reference to the Akeeba Engine's timer	 * @return AKCoreTimer	 */	public static function &getTimer()	{		return self::getClassInstance('AKCoreTimer');	}}/** * AES implementation in PHP (c) Chris Veness 2005-2011 * (http://www.movable-type.co.uk/scripts/aes-php.html) * I offer these formul & scripts for free use and adaptation as my contribution to the  * open-source info-sphere from which I have received so much. You are welcome to re-use these  * scripts [under a simple attribution license or a GPL licence, without any warranty express or implied]  * provided solely that you retain my copyright notice and a link to this page. * licence. No warranty of any form is offered. * * Modified for Akeeba Backup by Nicholas K. Dionysopoulos */class AKEncryptionAES{	// Sbox is pre-computed multiplicative inverse in GF(2^8) used in SubBytes and KeyExpansion [5.1.1]	protected static $Sbox =			 array(0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,	               0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,	               0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,	               0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,	               0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,	               0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,	               0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,	               0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,	               0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,	               0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,	               0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,	               0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,	               0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,	               0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,	               0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,	               0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16);	// Rcon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [5.2]	protected static $Rcon = array(				   array(0x00, 0x00, 0x00, 0x00),	               array(0x01, 0x00, 0x00, 0x00),	               array(0x02, 0x00, 0x00, 0x00),	               array(0x04, 0x00, 0x00, 0x00),	               array(0x08, 0x00, 0x00, 0x00),	               array(0x10, 0x00, 0x00, 0x00),	               array(0x20, 0x00, 0x00, 0x00),	               array(0x40, 0x00, 0x00, 0x00),	               array(0x80, 0x00, 0x00, 0x00),	               array(0x1b, 0x00, 0x00, 0x00),	               array(0x36, 0x00, 0x00, 0x00) );	protected static $passwords = array();	/**	 * AES Cipher function: encrypt 'input' with Rijndael algorithm	 *	 * @param input message as byte-array (16 bytes)	 * @param w     key schedule as 2D byte-array (Nr+1 x Nb bytes) -	 *              generated from the cipher key by KeyExpansion()	 * @return      ciphertext as byte-array (16 bytes)	 */	protected static function Cipher($input, $w) {    // main Cipher function [5.1]	  $Nb = 4;                 // block size (in words): no of columns in state (fixed at 4 for AES)	  $Nr = count($w)/$Nb - 1; // no of rounds: 10/12/14 for 128/192/256-bit keys	  $state = array();  // initialise 4xNb byte-array 'state' with input [3.4]	  for ($i=0; $i<4*$Nb; $i++) $state[$i%4][floor($i/4)] = $input[$i];	  $state = self::AddRoundKey($state, $w, 0, $Nb);	  for ($round=1; $round<$Nr; $round++) {  // apply Nr rounds	    $state = self::SubBytes($state, $Nb);	    $state = self::ShiftRows($state, $Nb);	    $state = self::MixColumns($state, $Nb);	    $state = self::AddRoundKey($state, $w, $round, $Nb);	  }	  $state = self::SubBytes($state, $Nb);	  $state = self::ShiftRows($state, $Nb);	  $state = self::AddRoundKey($state, $w, $Nr, $Nb);	  $output = array(4*$Nb);  // convert state to 1-d array before returning [3.4]	  for ($i=0; $i<4*$Nb; $i++) $output[$i] = $state[$i%4][floor($i/4)];	  return $output;	}	protected static function AddRoundKey($state, $w, $rnd, $Nb) {  // xor Round Key into state S [5.1.4]	  for ($r=0; $r<4; $r++) {	    for ($c=0; $c<$Nb; $c++) $state[$r][$c] ^= $w[$rnd*4+$c][$r];	  }	  return $state;	}	protected static function SubBytes($s, $Nb) {    // apply SBox to state S [5.1.1]	  for ($r=0; $r<4; $r++) {	    for ($c=0; $c<$Nb; $c++) $s[$r][$c] = self::$Sbox[$s[$r][$c]];	  }	  return $s;	}	protected static function ShiftRows($s, $Nb) {    // shift row r of state S left by r bytes [5.1.2]	  $t = array(4);	  for ($r=1; $r<4; $r++) {	    for ($c=0; $c<4; $c++) $t[$c] = $s[$r][($c+$r)%$Nb];  // shift into temp copy	    for ($c=0; $c<4; $c++) $s[$r][$c] = $t[$c];         // and copy back	  }          // note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES):	  return $s;  // see fp.gladman.plus.com/cryptography_technology/rijndael/aes.spec.311.pdf	}	protected static function MixColumns($s, $Nb) {   // combine bytes of each col of state S [5.1.3]	  for ($c=0; $c<4; $c++) {	    $a = array(4);  // 'a' is a copy of the current column from 's'	    $b = array(4);  // 'b' is a{02} in GF(2^8)	    for ($i=0; $i<4; $i++) {	      $a[$i] = $s[$i][$c];	      $b[$i] = $s[$i][$c]&0x80 ? $s[$i][$c]<<1 ^ 0x011b : $s[$i][$c]<<1;	    }	    // a[n] ^ b[n] is a{03} in GF(2^8)	    $s[0][$c] = $b[0] ^ $a[1] ^ $b[1] ^ $a[2] ^ $a[3]; // 2*a0 + 3*a1 + a2 + a3	    $s[1][$c] = $a[0] ^ $b[1] ^ $a[2] ^ $b[2] ^ $a[3]; // a0 * 2*a1 + 3*a2 + a3	    $s[2][$c] = $a[0] ^ $a[1] ^ $b[2] ^ $a[3] ^ $b[3]; // a0 + a1 + 2*a2 + 3*a3	    $s[3][$c] = $a[0] ^ $b[0] ^ $a[1] ^ $a[2] ^ $b[3]; // 3*a0 + a1 + a2 + 2*a3	  }	  return $s;	}	/**	 * Key expansion for Rijndael Cipher(): performs key expansion on cipher key	 * to generate a key schedule	 *	 * @param key cipher key byte-array (16 bytes)	 * @return    key schedule as 2D byte-array (Nr+1 x Nb bytes)	 */	protected static function KeyExpansion($key) {  // generate Key Schedule from Cipher Key [5.2]	  $Nb = 4;              // block size (in words): no of columns in state (fixed at 4 for AES)	  $Nk = count($key)/4;  // key length (in words): 4/6/8 for 128/192/256-bit keys	  $Nr = $Nk + 6;        // no of rounds: 10/12/14 for 128/192/256-bit keys	  $w = array();	  $temp = array();	  for ($i=0; $i<$Nk; $i++) {	    $r = array($key[4*$i], $key[4*$i+1], $key[4*$i+2], $key[4*$i+3]);	    $w[$i] = $r;	  }	  for ($i=$Nk; $i<($Nb*($Nr+1)); $i++) {	    $w[$i] = array();	    for ($t=0; $t<4; $t++) $temp[$t] = $w[$i-1][$t];	    if ($i % $Nk == 0) {	      $temp = self::SubWord(self::RotWord($temp));	      for ($t=0; $t<4; $t++) $temp[$t] ^= self::$Rcon[$i/$Nk][$t];	    } else if ($Nk > 6 && $i%$Nk == 4) {	      $temp = self::SubWord($temp);	    }	    for ($t=0; $t<4; $t++) $w[$i][$t] = $w[$i-$Nk][$t] ^ $temp[$t];	  }	  return $w;	}	protected static function SubWord($w) {    // apply SBox to 4-byte word w	  for ($i=0; $i<4; $i++) $w[$i] = self::$Sbox[$w[$i]];	  return $w;	}	protected static function RotWord($w) {    // rotate 4-byte word w left by one byte	  $tmp = $w[0];	  for ($i=0; $i<3; $i++) $w[$i] = $w[$i+1];	  $w[3] = $tmp;	  return $w;	}	/*	 * Unsigned right shift function, since PHP has neither >>> operator nor unsigned ints	 *	 * @param a  number to be shifted (32-bit integer)	 * @param b  number of bits to shift a to the right (0..31)	 * @return   a right-shifted and zero-filled by b bits	 */	protected static function urs($a, $b) {	  $a &= 0xffffffff; $b &= 0x1f;  // (bounds check)	  if ($a&0x80000000 && $b>0) {   // if left-most bit set	    $a = ($a>>1) & 0x7fffffff;   //   right-shift one bit & clear left-most bit	    $a = $a >> ($b-1);           //   remaining right-shifts	  } else {                       // otherwise	    $a = ($a>>$b);               //   use normal right-shift	  }	  return $a;	}	/**	 * Encrypt a text using AES encryption in Counter mode of operation	 *  - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf	 *	 * Unicode multi-byte character safe	 *	 * @param plaintext source text to be encrypted	 * @param password  the password to use to generate a key	 * @param nBits     number of bits to be used in the key (128, 192, or 256)	 * @return          encrypted text	 */	public static function AESEncryptCtr($plaintext, $password, $nBits) {	  $blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES	  if (!($nBits==128 || $nBits==192 || $nBits==256)) return '';  // standard allows 128/192/256 bit keys	  // note PHP (5) gives us plaintext and password in UTF8 encoding!	  // use AES itself to encrypt password to get cipher key (using plain password as source for	  // key expansion) - gives us well encrypted key	  $nBytes = $nBits/8;  // no bytes in key	  $pwBytes = array();	  for ($i=0; $i<$nBytes; $i++) $pwBytes[$i] = ord(substr($password,$i,1)) & 0xff;	  $key = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));	  $key = array_merge($key, array_slice($key, 0, $nBytes-16));  // expand key to 16/24/32 bytes long	  // initialise counter block (NIST SP800-38A B.2): millisecond time-stamp for nonce in	  // 1st 8 bytes, block counter in 2nd 8 bytes	  $counterBlock = array();	  $nonce = floor(microtime(true)*1000);   // timestamp: milliseconds since 1-Jan-1970	  $nonceSec = floor($nonce/1000);	  $nonceMs = $nonce%1000;	  // encode nonce with seconds in 1st 4 bytes, and (repeated) ms part filling 2nd 4 bytes	  for ($i=0; $i<4; $i++) $counterBlock[$i] = self::urs($nonceSec, $i*8) & 0xff;	  for ($i=0; $i<4; $i++) $counterBlock[$i+4] = $nonceMs & 0xff;	  // and convert it to a string to go on the front of the ciphertext	  $ctrTxt = '';	  for ($i=0; $i<8; $i++) $ctrTxt .= chr($counterBlock[$i]);	  // generate key schedule - an expansion of the key into distinct Key Rounds for each round	  $keySchedule = self::KeyExpansion($key);	  $blockCount = ceil(strlen($plaintext)/$blockSize);	  $ciphertxt = array();  // ciphertext as array of strings	  for ($b=0; $b<$blockCount; $b++) {	    // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)	    // done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)	    for ($c=0; $c<4; $c++) $counterBlock[15-$c] = self::urs($b, $c*8) & 0xff;	    for ($c=0; $c<4; $c++) $counterBlock[15-$c-4] = self::urs($b/0x100000000, $c*8);	    $cipherCntr = self::Cipher($counterBlock, $keySchedule);  // -- encrypt counter block --	    // block size is reduced on final block	    $blockLength = $b<$blockCount-1 ? $blockSize : (strlen($plaintext)-1)%$blockSize+1;	    $cipherByte = array();	    for ($i=0; $i<$blockLength; $i++) {  // -- xor plaintext with ciphered counter byte-by-byte --	      $cipherByte[$i] = $cipherCntr[$i] ^ ord(substr($plaintext, $b*$blockSize+$i, 1));	      $cipherByte[$i] = chr($cipherByte[$i]);	    }	    $ciphertxt[$b] = implode('', $cipherByte);  // escape troublesome characters in ciphertext	  }	  // implode is more efficient than repeated string concatenation	  $ciphertext = $ctrTxt . implode('', $ciphertxt);	  $ciphertext = base64_encode($ciphertext);	  return $ciphertext;	}	/**	 * Decrypt a text encrypted by AES in counter mode of operation	 *	 * @param ciphertext source text to be decrypted	 * @param password   the password to use to generate a key	 * @param nBits      number of bits to be used in the key (128, 192, or 256)	 * @return           decrypted text	 */	public static function AESDecryptCtr($ciphertext, $password, $nBits) {	  $blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES	  if (!($nBits==128 || $nBits==192 || $nBits==256)) return '';  // standard allows 128/192/256 bit keys	  $ciphertext = base64_decode($ciphertext);	  // use AES to encrypt password (mirroring encrypt routine)	  $nBytes = $nBits/8;  // no bytes in key	  $pwBytes = array();	  for ($i=0; $i<$nBytes; $i++) $pwBytes[$i] = ord(substr($password,$i,1)) & 0xff;	  $key = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));	  $key = array_merge($key, array_slice($key, 0, $nBytes-16));  // expand key to 16/24/32 bytes long	  // recover nonce from 1st element of ciphertext	  $counterBlock = array();	  $ctrTxt = substr($ciphertext, 0, 8);	  for ($i=0; $i<8; $i++) $counterBlock[$i] = ord(substr($ctrTxt,$i,1));	  // generate key schedule	  $keySchedule = self::KeyExpansion($key);	  // separate ciphertext into blocks (skipping past initial 8 bytes)	  $nBlocks = ceil((strlen($ciphertext)-8) / $blockSize);	  $ct = array();	  for ($b=0; $b<$nBlocks; $b++) $ct[$b] = substr($ciphertext, 8+$b*$blockSize, 16);	  $ciphertext = $ct;  // ciphertext is now array of block-length strings	  // plaintext will get generated block-by-block into array of block-length strings	  $plaintxt = array();	  for ($b=0; $b<$nBlocks; $b++) {	    // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)	    for ($c=0; $c<4; $c++) $counterBlock[15-$c] = self::urs($b, $c*8) & 0xff;	    for ($c=0; $c<4; $c++) $counterBlock[15-$c-4] = self::urs(($b+1)/0x100000000-1, $c*8) & 0xff;	    $cipherCntr = self::Cipher($counterBlock, $keySchedule);  // encrypt counter block	    $plaintxtByte = array();	    for ($i=0; $i<strlen($ciphertext[$b]); $i++) {	      // -- xor plaintext with ciphered counter byte-by-byte --	      $plaintxtByte[$i] = $cipherCntr[$i] ^ ord(substr($ciphertext[$b],$i,1));	      $plaintxtByte[$i] = chr($plaintxtByte[$i]);	    }	    $plaintxt[$b] = implode('', $plaintxtByte);	  }	  // join array of blocks into single plaintext string	  $plaintext = implode('',$plaintxt);	  return $plaintext;	}	/**	 * AES decryption in CBC mode. This is the standard mode (the CTR methods	 * actually use Rijndael-128 in CTR mode, which - technically - isn't AES).	 *	 * Supports AES-128, AES-192 and AES-256. It supposes that the last 4 bytes	 * contained a little-endian unsigned long integer representing the unpadded	 * data length.	 *	 * @since 3.0.1	 * @author Nicholas K. Dionysopoulos	 *	 * @param string $ciphertext The data to encrypt	 * @param string $password Encryption password	 * @param int $nBits Encryption key size. Can be 128, 192 or 256	 * @return string The plaintext	 */	public static function AESDecryptCBC($ciphertext, $password, $nBits = 128)	{		if (!($nBits==128 || $nBits==192 || $nBits==256)) return false;  // standard allows 128/192/256 bit keys		if(!function_exists('mcrypt_module_open')) return false;		// Try to fetch cached key/iv or create them if they do not exist		$lookupKey = $password.'-'.$nBits;		if(array_key_exists($lookupKey, self::$passwords))		{			$key	= self::$passwords[$lookupKey]['key'];			$iv		= self::$passwords[$lookupKey]['iv'];		}		else		{			// use AES itself to encrypt password to get cipher key (using plain password as source for			// key expansion) - gives us well encrypted key			$nBytes = $nBits/8;  // no bytes in key			$pwBytes = array();			for ($i=0; $i<$nBytes; $i++) $pwBytes[$i] = ord(substr($password,$i,1)) & 0xff;			$key = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));			$key = array_merge($key, array_slice($key, 0, $nBytes-16));  // expand key to 16/24/32 bytes long			$newKey = '';			foreach($key as $int) { $newKey .= chr($int); }			$key = $newKey;			// Create an Initialization Vector (IV) based on the password, using the same technique as for the key			$nBytes = 16;  // AES uses a 128 -bit (16 byte) block size, hence the IV size is always 16 bytes			$pwBytes = array();			for ($i=0; $i<$nBytes; $i++) $pwBytes[$i] = ord(substr($password,$i,1)) & 0xff;			$iv = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));			$newIV = '';			foreach($iv as $int) { $newIV .= chr($int); }			$iv = $newIV;			self::$passwords[$lookupKey]['key'] = $key;			self::$passwords[$lookupKey]['iv'] = $iv;		}		// Read the data size		$data_size = unpack('V', substr($ciphertext,-4) );		// Decrypt		$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_CBC, '');		mcrypt_generic_init($td, $key, $iv);		$plaintext = mdecrypt_generic($td, substr($ciphertext,0,-4));		mcrypt_generic_deinit($td);		// Trim padding, if necessary		if(strlen($plaintext) > $data_size)		{			$plaintext = substr($plaintext, 0, $data_size);		}		return $plaintext;	}}/** * The Master Setup will read the configuration parameters from restoration.php, abiautomation.ini, or * the JSON-encoded "configuration" input variable and return the status. * @return bool True if the master configuration was applied to the Factory object */function masterSetup(){	// ------------------------------------------------------------	// 1. Import basic setup parameters	// ------------------------------------------------------------	$ini_data = null;	// In restore.php mode, require restoration.php or fail	if(!defined('KICKSTART'))	{		// This is the standalone mode, used by Akeeba Backup Professional. It looks for a restoration.php		// file to perform its magic. If the file is not there, we will abort.		$setupFile = 'restoration.php';		if( !file_exists($setupFile) )		{			// Uh oh... Somebody tried to pooh on our back yard. Lock the gates! Don't let the traitor inside!			AKFactory::set('kickstart.enabled', false);			return false;		}		// Load restoration.php. It creates a global variable named $restoration_setup		require_once $setupFile;		$ini_data = $restoration_setup;		if(empty($ini_data))		{			// No parameters fetched. Darn, how am I supposed to work like that?!			AKFactory::set('kickstart.enabled', false);			return false;		}		AKFactory::set('kickstart.enabled', true);	}	else	{		// Maybe we have $restoration_setup defined in the head of kickstart.php		global $restoration_setup;		if(!empty($restoration_setup) && !is_array($restoration_setup)) {			$ini_data = AKText::parse_ini_file($restoration_setup, false, true);		} elseif(is_array($restoration_setup)) {			$ini_data = $restoration_setup;		}	}	// Import any data from $restoration_setup	if(!empty($ini_data))	{		foreach($ini_data as $key => $value)		{			AKFactory::set($key, $value);		}		AKFactory::set('kickstart.enabled', true);	}	// Reinitialize $ini_data	$ini_data = null;	// ------------------------------------------------------------	// 2. Explode JSON parameters into $_REQUEST scope	// ------------------------------------------------------------	// Detect a JSON string in the request variable and store it.	$json = getQueryParam('json', null);	// Remove everything from the request array	if(!empty($_REQUEST))	{		foreach($_REQUEST as $key => $value)		{			unset($_REQUEST[$key]);		}	}	// Decrypt a possibly encrypted JSON string	if(!empty($json))	{		$password = AKFactory::get('kickstart.security.password', null);		if(!empty($password))		{			$json = AKEncryptionAES::AESDecryptCtr($json, $password, 128);		}		// Get the raw data		$raw = json_decode( $json, true );		// Pass all JSON data to the request array		if(!empty($raw))		{			foreach($raw as $key => $value)			{				$_REQUEST[$key] = $value;			}		}	}	// ------------------------------------------------------------	// 3. Try the "factory" variable	// ------------------------------------------------------------	// A "factory" variable will override all other settings.	$serialized = getQueryParam('factory', null);	if( !is_null($serialized) )	{		// Get the serialized factory		AKFactory::unserialize($serialized);		AKFactory::set('kickstart.enabled', true);		return true;	}	// ------------------------------------------------------------	// 4. Try abiautomation.ini and the configuration variable for Kickstart	// ------------------------------------------------------------	if(defined('KICKSTART'))	{		// We are in Kickstart mode. abiautomation.ini has precedence.		$setupFile = 'abiautomation.ini';		if( file_exists($setupFile) )		{			// abiautomation.ini was found			$ini_data = AKText::parse_ini_file('restoration.ini', false);		}		else		{			// abiautomation.ini was not found. Let's try input parameters.			$configuration = getQueryParam('configuration');			if( !is_null($configuration) )			{				// Let's decode the configuration from JSON to array				$ini_data = json_decode($configuration, true);			}			else			{				// Neither exists. Enable Kickstart's interface anyway.				$ini_data = array('kickstart.enabled'=>true);			}		}		// Import any INI data we might have from other sources		if(!empty($ini_data))		{			foreach($ini_data as $key => $value)			{				AKFactory::set($key, $value);			}			AKFactory::set('kickstart.enabled', true);			return true;		}	}}// Mini-controller for restore.phpif(!defined('KICKSTART')){	// The observer class, used to report number of files and bytes processed	class RestorationObserver extends AKAbstractPartObserver	{		public $compressedTotal = 0;		public $uncompressedTotal = 0;		public $filesProcessed = 0;		public function update($object, $message)		{			if(!is_object($message)) return;			if( !array_key_exists('type', get_object_vars($message)) ) return;			if( $message->type == 'startfile' )			{				$this->filesProcessed++;				$this->compressedTotal += $message->content->compressed;				$this->uncompressedTotal += $message->content->uncompressed;			}		}		public function __toString()		{			return __CLASS__;		}	}	// Import configuration	masterSetup();	$retArray = array(		'status'	=> true,		'message'	=> null	);	$enabled = AKFactory::get('kickstart.enabled', false);	if($enabled)	{		$task = getQueryParam('task');		switch($task)		{			case 'ping':				// ping task - realy does nothing!				$timer = AKFactory::getTimer();				$timer->enforce_min_exec_time();				break;			case 'startRestore':				AKFactory::nuke(); // Reset the factory				// Let the control flow to the next step (the rest of the code is common!!)			case 'stepRestore':				$engine = AKFactory::getUnarchiver(); // Get the engine				$observer = new RestorationObserver(); // Create a new observer				$engine->attach($observer); // Attach the observer				$engine->tick();				$ret = $engine->getStatusArray();				if( $ret['Error'] != '' )				{					$retArray['status'] = false;					$retArray['done'] = true;					$retArray['message'] = $ret['Error'];				}				elseif( !$ret['HasRun'] )				{					$retArray['files'] = $observer->filesProcessed;					$retArray['bytesIn'] = $observer->compressedTotal;					$retArray['bytesOut'] = $observer->uncompressedTotal;					$retArray['status'] = true;					$retArray['done'] = true;				}				else				{					$retArray['files'] = $observer->filesProcessed;					$retArray['bytesIn'] = $observer->compressedTotal;					$retArray['bytesOut'] = $observer->uncompressedTotal;					$retArray['status'] = true;					$retArray['done'] = false;					$retArray['factory'] = AKFactory::serialize();				}				break;			case 'finalizeRestore':				$root = AKFactory::get('kickstart.setup.destdir');				// Remove the installation directory				recursive_remove_directory( $root.'/installation' );				$postproc = AKFactory::getPostProc();				// Rename htaccess.bak to .htaccess				if(file_exists($root.'/htaccess.bak'))				{					if( file_exists($root.'/.htaccess')  )					{						$postproc->unlink($root.'/.htaccess');					}					$postproc->rename( $root.'/htaccess.bak', $root.'/.htaccess' );				}				// Remove restoration.php				$basepath = dirname(__FILE__);				$basepath = rtrim( str_replace('\\','/',$basepath), '/' );				if(!empty($basepath)) $basepath .= '/';				$postproc->unlink( $basepath.'restoration.php' );				break;			default:				// Invalid task!				$enabled = false;				break;		}	}	// Maybe we weren't authorized or the task was invalid?	if(!$enabled)	{		// Maybe the user failed to enter any information		$retArray['status'] = false;		$retArray['message'] = AKText::_('ERR_INVALID_LOGIN');	}	// JSON encode the message	$json = json_encode($retArray);	// Do I have to encrypt?	$password = AKFactory::get('kickstart.security.password', null);	if(!empty($password))	{		$json = AKEncryptionAES::AESEncryptCtr($json, $password, 128);	}	// Return the message	echo "###$json###";}// ------------ lixlpixel recursive PHP functions -------------// recursive_remove_directory( directory to delete, empty )// expects path to directory and optional TRUE / FALSE to empty// of course PHP has to have the rights to delete the directory// you specify and all files and folders inside the directory// ------------------------------------------------------------function recursive_remove_directory($directory){	// if the path has a slash at the end we remove it here	if(substr($directory,-1) == '/')	{		$directory = substr($directory,0,-1);	}	// if the path is not valid or is not a directory ...	if(!file_exists($directory) || !is_dir($directory))	{		// ... we return false and exit the function		return FALSE;	// ... if the path is not readable	}elseif(!is_readable($directory))	{		// ... we return false and exit the function		return FALSE;	// ... else if the path is readable	}else{		// we open the directory		$handle = opendir($directory);		$postproc = AKFactory::getPostProc();		// and scan through the items inside		while (FALSE !== ($item = readdir($handle)))		{			// if the filepointer is not the current directory			// or the parent directory			if($item != '.' && $item != '..')			{				// we build the new path to delete				$path = $directory.'/'.$item;				// if the new path is a directory				if(is_dir($path))				{					// we call this function with the new path					recursive_remove_directory($path);				// if the new path is a file				}else{					// we remove the file					$postproc->unlink($path);				}			}		}		// close the directory		closedir($handle);		// try to delete the now empty directory		if(!$postproc->rmdir($directory))		{			// return false if not possible			return FALSE;		}		// return success		return TRUE;	}}?>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$lang = JFactory::getLanguage();JText::script('COM_FINDER_INDEX_CONFIRM_PURGE_PROMPT');JText::script('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'index.purge')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_PURGE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	if (pressbutton == 'index.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=index');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_ITEMS')); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_ITEMS')); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_type"><?php echo JText::_('COM_FINDER_INDEX_TYPE_FILTER'); ?></label>			<select name="filter_type" class="inputbox" id="filter_type">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_TYPE_FILTER'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.typeslist'), 'value', 'text', $this->state->get('filter.type'));?>			</select>			<label class="selectlabel" for="filter_state"><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'); ?></label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'l.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'l.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_INDEX_TYPE', 'l.type_id', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-20">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_LINK_URL', 'l.url', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_INDEX_DATE', 'l.indexdate', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php if (count($this->items) == 0) : ?>			<tr class="row0">				<td align="center" colspan="7">					<?php					if ($this->total == 0)					{						echo JText::_('COM_FINDER_INDEX_NO_DATA') . '  ' . JText::_('COM_FINDER_INDEX_TIP');					} else {						echo JText::_('COM_FINDER_INDEX_NO_CONTENT');					}					?>				</td>			</tr>		<?php endif; ?>		<?php $canChange	= JFactory::getUser()->authorise('core.manage',	'com_finder'); ?>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->link_id); ?>				</th>				<td>					<?php if ((int) $item->publish_start_date or (int) $item->publish_end_date or (int) $item->start_date or (int) $item->end_date) : ?>					<img src="<?php echo JURI::root();?>/media/system/images/calendar.png" style="border:1px;float:right" class="hasTip" title="<?php echo JText::sprintf('COM_FINDER_INDEX_DATE_INFO', $item->publish_start_date, $item->publish_end_date, $item->start_date, $item->end_date);?>" />					<?php endif; ?>					<?php echo $this->escape($item->title); ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'index.', $canChange, 'cb'); ?>				</td>				<td class="center nowrap">					<?php					$key = FinderHelperLanguage::branchSingular($item->t_title);					echo $lang->hasKey($key) ? JText::_($key) : $item->t_title;					?>				</td>				<td class="nowrap">					<?php					if (strlen($item->url) > 80)					{						echo substr($item->url, 0, 70) . '...';					} else {						echo $item->url;					}					?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->indexdate, JText::_('DATE_FORMAT_LC4')); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="display" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $this UsersViewNotes */JHtml::_('behavior.tooltip');JHtml::_('formbehavior.chosen', 'select');$user = JFactory::getUser();$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn = $this->escape($this->state->get('list.direction'));$canEdit = $user->authorise('core.edit', 'com_users');?><form action="<?php echo JRoute::_('index.php?option=com_users&view=notes');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_IN_NOTE_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_NOTE_TITLE'); ?>" />			</div>			<div class="btn-group">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="clearfix"> </div>		</div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%" class="nowrap center">						<input type="checkbox" name="toggle" value="" class="checklist-toggle" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="left" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_USERS_USER_HEADING', 'u.name', $listDirn, $listOrder); ?>					</th>					<th class="left" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_USERS_SUBJECT_HEADING', 'a.subject', $listDirn, $listOrder); ?>					</th>					<th width="20%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'COM_USERS_CATEGORY_HEADING', 'c.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'COM_USERS_REVIEW_HEADING', 'a.review_time', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) : ?>				<?php $canChange = $user->authorise('core.edit.state', 'com_users'); ?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center checklist">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time); ?>						<?php endif; ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_users&task=note.edit&id='.$item->id);?>">								<?php echo $this->escape($item->user_name); ?></a>						<?php else : ?>							<?php echo $this->escape($item->user_name); ?>						<?php endif; ?>					</td>					<td>						<?php if ($item->subject) : ?>							<?php echo $this->escape($item->subject); ?>						<?php else : ?>							<?php echo JText::_('COM_USERS_EMPTY_SUBJECT'); ?>						<?php endif; ?>					</td>					<td class="center">						<?php if ($item->catid && $item->cparams->get('image')) : ?>							<?php echo JHtml::_('users.image', $item->cparams->get('image')); ?>						<?php endif; ?>						<?php echo $this->escape($item->category_title); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->state, $i, 'notes.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="center">						<?php if (intval($item->review_time)) : ?>							<?php echo $this->escape($item->review_time); ?>						<?php else : ?>							<?php echo JText::_('COM_USERS_EMPTY_REVIEW'); ?>						<?php endif; ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Base class for rendering a display layout * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.0 */class JLayoutBase implements JLayout{	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @since   3.0	 */	public function escape($output)	{		return htmlspecialchars($output, ENT_COMPAT, 'UTF-8');	}	/**	 * Method to render the layout.	 *	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 *	 * @return  string  The necessary HTML to display the layout	 *	 * @since   3.0	 */	public function render($displayData)	{		return '';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseQuerySqlite extends JDatabaseQueryPdo implements JDatabaseQueryPreparable, JDatabaseQueryLimitable{	/**	 * @var integer	 * @since 12.1	 */	protected $limit;	/**	 * @var integer	 * @since 12.1	 */	protected $offset;	/**	 * @var mixed	 * @since 12.1	 */	protected $bounded = array();	/**	 * Method to add a variable to an internal array that will be bound to a prepared SQL statement before query execution. Also	 * removes a variable that has been bounded from the internal bounded array when the passed in value is null.	 *	 * @param   string|integer  $key            The key that will be used in your SQL query to reference the value. Usually of	 *                                          the form ':key', but can also be an integer.	 * @param   mixed           &$value         The value that will be bound. The value is passed by reference to support output	 *                                          parameters such as those possible with stored procedures.	 * @param   integer         $dataType       Constant corresponding to a SQL datatype.	 * @param   integer         $length         The length of the variable. Usually required for OUTPUT parameters.	 * @param   array           $driverOptions  Optional driver options to be used.	 *	 * @return  JDatabaseQuery	 *	 * @since   12.1	 */	public function bind($key = null, &$value = null, $dataType = PDO::PARAM_STR, $length = 0, $driverOptions = array())	{		// Case 1: Empty Key (reset $bounded array)		if (empty($key))		{			$this->bounded = array();			return $this;		}		// Case 2: Key Provided, null value (unset key from $bounded array)		if (is_null($value))		{			if (isset($this->bounded[$key]))			{				unset($this->bounded[$key]);			}			return $this;		}		$obj = new stdClass;		$obj->value = &$value;		$obj->dataType = $dataType;		$obj->length = $length;		$obj->driverOptions = $driverOptions;		// Case 3: Simply add the Key/Value into the bounded array		$this->bounded[$key] = $obj;		return $this;	}	/**	 * Retrieves the bound parameters array when key is null and returns it by reference. If a key is provided then that item is	 * returned.	 *	 * @param   mixed  $key  The bounded variable key to retrieve.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function &getBounded($key = null)	{		if (empty($key))		{			return $this->bounded;		}		else		{			if (isset($this->bounded[$key]))			{				return $this->bounded[$key];			}		}	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function clear($clause = null)	{		switch ($clause)		{			case null:				$this->bounded = array();				break;		}		parent::clear($clause);		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0 || $offset > 0)		{			$query .= ' LIMIT ' . $offset . ', ' . $limit;		}		return $query;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit = (int) $limit;		$this->offset = (int) $offset;		return $this;	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date or datetime to add to	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @link http://www.sqlite.org/lang_datefunc.html	 */	public function dateAdd($date, $interval, $datePart)	{		// SQLite does not support microseconds as a separate unit. Convert the interval to seconds		if (strcasecmp($datePart, 'microseconds') == 0)		{			$interval = .001 * $interval;			$datePart = 'seconds';		}		if (substr($interval, 0, 1) != '-')		{			return "datetime('" . $date . "', '+" . $interval . " " . $datePart . "')";		}		else		{			return "datetime('" . $date . "', '" . $interval . " " . $datePart . "')";		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules Component Positions Model * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesModelPositions extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'value',				'templates',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context.'.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context.'.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$clientId = $app->input->getInt('client_id', 0);		$this->setState('filter.client_id', $clientId);		$template = $this->getUserStateFromRequest($this->context.'.filter.template', 'filter_template', '', 'string');		$this->setState('filter.template', $template);		$type = $this->getUserStateFromRequest($this->context.'.filter.type', 'filter_type', '', 'string');		$this->setState('filter.type', $type);		// Load the parameters.		$params = JComponentHelper::getParams('com_modules');		$this->setState('params', $params);		// List state information.		parent::populateState('value', 'asc');	}	/**	 * Method to get an array of data items.	 *	 * @return  mixed  An array of data items on success, false on failure.	 * @since   1.6	 */	public function getItems()	{		if (!isset($this->items))		{			$lang            = JFactory::getLanguage();			$search          = $this->getState('filter.search');			$state           = $this->getState('filter.state');			$clientId        = $this->getState('filter.client_id');			$filter_template = $this->getState('filter.template');			$type            = $this->getState('filter.type');			$ordering        = $this->getState('list.ordering');			$direction       = $this->getState('list.direction');			$limitstart      = $this->getState('list.start');			$limit           = $this->getState('list.limit');			$client          = JApplicationHelper::getClientInfo($clientId);			if ($type != 'template')			{				// Get the database object and a new query object.				$query	= $this->_db->getQuery(true)					->select('DISTINCT(position) as value')					->from('#__modules')					->where($this->_db->quoteName('client_id').' = '.(int) $clientId);				if ($search)				{					$query->where('position LIKE '.$this->_db->quote('%'.$this->_db->escape($search, true).'%'));				}				$this->_db->setQuery($query);				try				{					$positions = $this->_db->loadObjectList('value');				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}				foreach ($positions as $value => $position)				{					$positions[$value] = array();				}			}			else			{				$positions = array();			}			// Load the positions from the installed templates.			foreach (ModulesHelper::getTemplates($clientId) as $template)			{				$path = JPath::clean($client->path.'/templates/'.$template->element.'/templateDetails.xml');				if (file_exists($path))				{					$xml = simplexml_load_file($path);					if (isset($xml->positions[0]))					{						$lang->load('tpl_'.$template->element.'.sys', $client->path, null, false, false)					||	$lang->load('tpl_'.$template->element.'.sys', $client->path.'/templates/'.$template->element, null, false, false)					||	$lang->load('tpl_'.$template->element.'.sys', $client->path, $lang->getDefault(), false, false)					||	$lang->load('tpl_'.$template->element.'.sys', $client->path.'/templates/'.$template->element, $lang->getDefault(), false, false);						foreach ($xml->positions[0] as $position)						{							$value = (string) $position['value'];							$label = (string) $position;							if (!$value)							{								$value = $label;								$label = preg_replace('/[^a-zA-Z0-9_\-]/', '_', 'TPL_'.$template->element.'_POSITION_'.$value);								$altlabel = preg_replace('/[^a-zA-Z0-9_\-]/', '_', 'COM_MODULES_POSITION_'.$value);								if (!$lang->hasKey($label) && $lang->hasKey($altlabel))								{									$label = $altlabel;								}							}							if ($type == 'user' || ($state != '' && $state != $template->enabled))							{								unset($positions[$value]);							}							elseif (preg_match(chr(1) . $search . chr(1) . 'i', $value) && ($filter_template == '' || $filter_template == $template->element))							{								if (!isset($positions[$value]))								{									$positions[$value] = array();								}								$positions[$value][$template->name] = $label;							}						}					}				}			}			$this->total = count($positions);			if ($limitstart >= $this->total)			{				$limitstart = $limitstart < $limit ? 0 : $limitstart - $limit;				$this->setState('list.start', $limitstart);			}			if ($ordering == 'value')			{				if ($direction == 'asc')				{					ksort($positions);				}				else {					krsort($positions);				}			}			else {				if ($direction == 'asc')				{					asort($positions);				}				else {					arsort($positions);				}			}			$this->items = array_slice($positions, $limitstart, $limit ? $limit : null);		}		return $this->items;	}	/**	 * Method to get the total number of items.	 *	 * @return  int	The total number of items.	 * @since   1.6	 */	public function getTotal()	{		if (!isset($this->total))		{			$this->getItems();		}		return $this->total;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentControllerFeatured extends ContentControllerArticles{	/**	 * Removes an item	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user = JFactory::getUser();		$ids  = $this->input->get('cid', array(), 'array');		// Access checks.		foreach ($ids as $i => $id)		{			if (!$user->authorise('core.delete', 'com_content.article.'.(int) $id))			{				// Prune items that you can't delete.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Remove the items.			if (!$model->featured($ids, 0))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_content&view=featured');	}	/**	 * Method to publish a list of articles.	 *	 * @return  void	 * @since   1.0	 */	public function publish()	{		parent::publish();		$this->setRedirect('index.php?option=com_content&view=featured');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Feature', $prefix = 'ContentModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';$lang	= JFactory::getLanguage();JHtml::_('bootstrap.tooltip');?><?php if (count($this->children[$this->category->id]) > 0) : ?>	<?php foreach ($this->children[$this->category->id] as $id => $child) : ?>		<?php		if ($this->params->get('show_empty_categories') || $child->getNumItems(true) || count($child->getChildren())) :			if (!isset($this->children[$this->category->id][$id + 1])) :				$class = ' class="last"';			endif;		?>		<div<?php echo $class; ?>>			<?php $class = ''; ?>			<?php if ($lang->isRTL()) : ?>			<h3 class="page-header item-title">				<?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>					<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>">						<?php echo $child->getNumItems(true); ?>					</span>				<?php endif; ?>				<a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>				<?php if (count($child->getChildren()) > 0) : ?>					<a href="#category-<?php echo $child->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>				<?php endif;?>			<?php else : ?>			<h3 class="page-header item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>				<?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>					<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>">						<?php echo $child->getNumItems(true); ?>					</span>				<?php endif; ?>				<?php if (count($child->getChildren()) > 0) : ?>					<a href="#category-<?php echo $child->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>				<?php endif;?>			<?php endif;?>			</h3>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>				<?php if ($child->description) : ?>					<div class="category-desc">						<?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>					</div>				<?php endif; ?>			<?php endif; ?>			<?php if (count($child->getChildren()) > 0) :?>			<div class="collapse fade" id="category-<?php echo $child->id;?>">				<?php				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				if ($this->maxLevel != 0) :					echo $this->loadTemplate('children');				endif;				$this->category = $child->getParent();				$this->maxLevel++;				?>			</div>			<?php endif; ?>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_login * * @package     Joomla.Administrator * @subpackage  mod_login * @since       1.6 */abstract class ModLoginHelper{	/**	 * Get an HTML select list of the available languages.	 *	 * @return  string	 */	public static function getLanguageList()	{		$languages = JLanguageHelper::createLanguageList(null, JPATH_ADMINISTRATOR, false, true);		array_unshift($languages, JHtml::_('select.option', '', JText::_('JDEFAULTLANGUAGE')));		return JHtml::_('select.genericlist', $languages, 'lang', ' class="inputbox advancedSelect"', 'value', 'text', null);	}	/**	 * Get the redirect URI after login.	 *	 * @return  string	 */	public static function getReturnURI()	{		$uri    = JUri::getInstance();		$return = 'index.php' . $uri->toString(array('query'));		if ($return != 'index.php?option=com_login')		{			return base64_encode($return);		}		else		{			return base64_encode('index.php');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=templates'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('Filters'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TEMPLATES_TEMPLATES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value="*"><?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?></option>				<?php echo JHtml::_('select.options', TemplatesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist" id="template-mgr">		<thead>			<tr>				<th class="checkmark-col">					&#160;				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_TEMPLATE', 'a.element', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'JCLIENT', 'a.client_id', $listDirn, $listOrder); ?>				</th>				<th class="center width-10">					<?php echo JText::_('JVERSION'); ?>				</th>				<th class="width-15">					<?php echo JText::_('JDATE'); ?>				</th>				<th class="width-25">					<?php echo JText::_('JAUTHOR'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('templates.thumb', $item->element, $item->client_id); ?>				</td>				<td class="template-name">					<a href="<?php echo JRoute::_('index.php?option=com_templates&view=template&id='.(int) $item->extension_id); ?>">						<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_DETAILS', $item->name); ?></a>					<p>					<?php if ($this->preview && $item->client_id == '0') : ?>						<a href="<?php echo JURI::root().'index.php?tp=1&template='.$item->element; ?>" target="_blank">							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_PREVIEW'); ?></a>					<?php elseif ($item->client_id == '1') : ?>						<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN'); ?>					<?php else: ?>						<span class="hasTip" title="<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?>::<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_DESC'); ?>">							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?></span>					<?php endif; ?>					</p>				</td>				<td class="center">					<?php echo $item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>				</td>				<td class="center">					<?php echo $this->escape($item->xmldata->get('version')); ?>				</td>				<td class="center">					<?php echo $this->escape($item->xmldata->get('creationDate')); ?>				</td>				<td>					<?php if ($author = $item->xmldata->get('author')) : ?>						<p><?php echo $this->escape($author); ?></p>					<?php else : ?>						&mdash;					<?php endif; ?>					<?php if ($email = $item->xmldata->get('authorEmail')) : ?>						<p><?php echo $this->escape($email); ?></p>					<?php endif; ?>					<?php if ($url = $item->xmldata->get('authorUrl')) : ?>						<p><a href="<?php echo $this->escape($url); ?>">							<?php echo $this->escape($url); ?></a></p>					<?php endif; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller for global configuration * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.5 */class ConfigControllerApplication extends JControllerLegacy{	/**	 * Class Constructor	 *	 * @param   array  $config		An optional associative array of configuration settings.	 * @return  void	 * @since   1.5	 */	public function __construct($config = array())	{		parent::__construct($config);		// Map the apply task to the save method.		$this->registerTask('apply', 'save');	}	/**	 * Method to save the configuration.	 *	 * @return  bool	True on success, false on failure.	 * @since   1.5	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Check if the user is authorized to do this.		if (!JFactory::getUser()->authorise('core.admin'))		{			JFactory::getApplication()->redirect('index.php', JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Set FTP credentials, if given.		JClientHelper::setCredentialsFromRequest('ftp');		$app   = JFactory::getApplication();		$model = $this->getModel('Application');		$form  = $model->getForm();		$data  = $this->input->post->get('jform', array(), 'array');		// Validate the posted data.		$return = $model->validate($form, $data);		// Check for validation errors.		if ($return === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_config.config.global.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_config&view=application', false));			return false;		}		// Attempt to save the configuration.		$data	= $return;		$return = $model->save($data);		// Check the return value.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('com_config.config.global.data', $data);			// Save failed, go back to the screen and display a notice.			$message = JText::sprintf('JERROR_SAVE_FAILED', $model->getError());			$this->setRedirect('index.php?option=com_config&view=application', $message, 'error');			return false;		}		// Set the success message.		$message = JText::_('COM_CONFIG_SAVE_SUCCESS');		// Set the redirect based on the task.		switch ($this->getTask())		{			case 'apply':				$this->setRedirect('index.php?option=com_config', $message);				break;			case 'save':			default:				$this->setRedirect('index.php', $message);				break;		}		return true;	}	/**	 * Cancel operation	 */	public function cancel()	{		// Check if the user is authorized to do this.		if (!JFactory::getUser()->authorise('core.admin', 'com_config'))		{			JFactory::getApplication()->redirect('index.php', JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		// Clean the session data.		$app = JFactory::getApplication();		$app->setUserState('com_config.config.global.data',	null);		$this->setRedirect('index.php');	}	public function refreshHelp()	{		jimport('joomla.filesystem.file');		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		if (($data = file_get_contents('http://help.joomla.org/helpsites.xml')) === false)		{			$this->setRedirect('index.php?option=com_config', JText::_('COM_CONFIG_ERROR_HELPREFRESH_FETCH'), 'error');		} elseif (!JFile::write(JPATH_BASE . '/help/helpsites.xml', $data))		{			$this->setRedirect('index.php?option=com_config', JText::_('COM_CONFIG_ERROR_HELPREFRESH_ERROR_STORE'), 'error');		}		else		{			$this->setRedirect('index.php?option=com_config', JText::_('COM_CONFIG_HELPREFRESH_SUCCESS'));		}	}	/**	 * Method to remove the root property from the configuration.	 *	 * @return  bool	True on success, false on failure.	 * @since   1.5	 */	public function removeroot()	{		// Check for request forgeries.		JSession::checkToken('get') or die('Invalid Token');		// Check if the user is authorized to do this.		if (!JFactory::getUser()->authorise('core.admin'))		{			JFactory::getApplication()->redirect('index.php', JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Initialise model.		$model	= $this->getModel('Application');		// Attempt to save the configuration and remove root.		$return = $model->removeroot();		// Check the return value.		if ($return === false)		{			// Save failed, go back to the screen and display a notice.			$this->setMessage(JText::sprintf('JERROR_SAVE_FAILED', $model->getError()), 'error');			$this->setRedirect('index.php');			return false;		}		// Set the success message.		$message = JText::_('COM_CONFIG_SAVE_SUCCESS');		// Set the redirect based on the task.		$this->setRedirect('index.php', $message);		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeed controller class. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsControllerNewsfeed extends JControllerForm{	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow = $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absence of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user = JFactory::getUser();		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return $user->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Newsfeed', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'banner.cancel' || document.formvalidator.isValid(document.id('banner-form')))		{			Joomla.submitform(task, document.getElementById('banner-form'));		}	}	window.addEvent('domready', function()	{		document.id('jform_type0').addEvent('click', function(e){			document.id('image').setStyle('display', 'block');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'none');		});		document.id('jform_type1').addEvent('click', function(e){			document.id('image').setStyle('display', 'none');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'block');		});		if (document.id('jform_type0').checked==true)		{			document.id('jform_type0').fireEvent('click');		}		else		{			document.id('jform_type1').fireEvent('click');		}	});</script><form action="<?php echo JRoute::_('index.php?option=com_banners&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="banner-form" class="form-validate form-horizontal"><!-- Begin Banner --><div class="span10 form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('COM_BANNERS_BANNER_DETAILS', true)); ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('name'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('name'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('alias'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('alias'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('catid'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('catid'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('type'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('type'); ?>					</div>				</div>				<div id="image">						<?php foreach ($this->form->getFieldset('image') as $field) : ?>							<div class="control-group">								<div class="control-label">									<?php echo $field->label; ?>								</div>								<div class="controls">									<?php echo $field->input; ?>								</div>							</div>						<?php endforeach; ?>				</div>				<div class="control-group" id="custom">					<div class="control-label">						<?php echo $this->form->getLabel('custombannercode'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('custombannercode'); ?>					</div>				</div>				<div class="control-group" id="url">					<div class="control-label">						<?php echo $this->form->getLabel('clickurl'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('clickurl'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('description'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('description'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('id'); ?>					</div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_BANNERS_GROUP_LABEL_PUBLISHING_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('publish') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'otherparams', JText::_('COM_BANNERS_GROUP_LABEL_BANNER_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('otherparams') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>				<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?>	</div>	<!-- End Newsfeed -->	<!-- Begin Sidebar -->	<div class="span2">		<h4><?php echo JText::_('JDETAILS');?></h4>		<hr />		<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('name'); ?>					</div>				</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('sticky'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('sticky'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('language'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('language'); ?>				</div>			</div>		</fieldset>	</div>	<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_users * @since       1.5 */class UsersViewUser extends JViewLegacy{	protected $form;	protected $item;	protected $grouplist;	protected $groups;	protected $state;	/**	 * Display the view	 *	 * @since  1.5	 */	public function display($tpl = null)	{		$this->form			= $this->get('Form');		$this->item			= $this->get('Item');		$this->grouplist	= $this->get('Groups');		$this->groups		= $this->get('AssignedGroups');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->form->setValue('password', null);		$this->form->setValue('password2',	null);		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = UsersHelper::getActions();		$isNew	= ($this->item->id == 0);		$isProfile = $this->item->id == $user->id;		JToolbarHelper::title(JText::_($isNew ? 'COM_USERS_VIEW_NEW_USER_TITLE' : ($isProfile ? 'COM_USERS_VIEW_EDIT_PROFILE_TITLE' : 'COM_USERS_VIEW_EDIT_USER_TITLE')), $isNew ? 'user-add' : ($isProfile ? 'user-profile' : 'user-edit'));		if ($canDo->get('core.edit')||$canDo->get('core.create'))		{			JToolbarHelper::apply('user.apply');			JToolbarHelper::save('user.save');		}		if ($canDo->get('core.create')&&$canDo->get('core.manage'))		{			JToolbarHelper::save2new('user.save2new');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('user.cancel');		}		else		{			JToolbarHelper::cancel('user.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_USER_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/debug.php';/** * Methods supporting a list of user records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelDebugGroup extends JModelList{	/**	 * Get a list of the actions.	 *	 * @return  array	 * @since   1.6	 */	public function getDebugActions()	{		$component = $this->getState('filter.component');		return UsersHelperDebug::getDebugActions($component);	}	/**	 * Override getItems method.	 *	 * @return  array	 * @since   1.6	 */	public function getItems()	{		$groupId = $this->getState('filter.group_id');		if (($assets = parent::getItems()) && $groupId)		{			$actions = $this->getDebugActions();			foreach ($assets as &$asset)			{				$asset->checks = array();				foreach ($actions as $action)				{					$name = $action[0];					$level = $action[1];					// Check that we check this action for the level of the asset.					if ($action[1] === null || $action[1] >= $asset->level)					{						// We need to test this action.						$asset->checks[$name] = JAccess::checkGroup($groupId, $action[0], $asset->name);					}					else					{						// We ignore this action.						$asset->checks[$name] = 'skip';					}				}			}		}		return $assets;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Adjust the context to support modal layouts.		$layout = $app->input->get('layout', 'default');		if ($layout)		{			$this->context .= '.' . $layout;		}		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$value = $this->getUserStateFromRequest($this->context . '.filter.group_id', 'group_id', 0, 'int', false);		$this->setState('filter.group_id', $value);		$levelStart = $this->getUserStateFromRequest($this->context . '.filter.level_start', 'filter_level_start', 0, 'int');		$this->setState('filter.level_start', $levelStart);		$value = $this->getUserStateFromRequest($this->context . '.filter.level_end', 'filter_level_end', 0, 'int');		if ($value > 0 && $value < $levelStart)		{			$value = $levelStart;		}		$this->setState('filter.level_end', $value);		$component = $this->getUserStateFromRequest($this->context . '.filter.component', 'filter_component');		$this->setState('filter.component', $component);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.level_start');		$id .= ':' . $this->getState('filter.level_end');		$id .= ':' . $this->getState('filter.component');		return parent::getStoreId($id);	}	/**	 * Get the group being debugged.	 *	 * @return  JObject	 * @since   1.6	 */	public function getGroup()	{		$groupId = (int) $this->getState('filter.group_id');		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('id, title')			->from('#__usergroups')			->where('id = ' . $groupId);		$db->setQuery($query);		try		{			$group = $db->loadObject();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return $group;	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.name, a.title, a.level, a.lft, a.rgt'			)		);		$query->from($db->quoteName('#__assets') . ' AS a');		// Filter the items over the search string if set.		if ($this->getState('filter.search'))		{			// Escape the search token.			$token = $db->quote('%' . $db->escape($this->getState('filter.search')) . '%');			// Compile the different search clauses.			$searches = array();			$searches[] = 'a.name LIKE ' . $token;			$searches[] = 'a.title LIKE ' . $token;			// Add the clauses to the query.			$query->where('(' . implode(' OR ', $searches) . ')');		}		// Filter on the start and end levels.		$levelStart = (int) $this->getState('filter.level_start');		$levelEnd = (int) $this->getState('filter.level_end');		if ($levelEnd > 0 && $levelEnd < $levelStart)		{			$levelEnd = $levelStart;		}		if ($levelStart > 0)		{			$query->where('a.level >= ' . $levelStart);		}		if ($levelEnd > 0)		{			$query->where('a.level <= ' . $levelEnd);		}		// Filter the items over the component if set.		if ($this->getState('filter.component'))		{			$component = $this->getState('filter.component');			$query->where('(a.name = ' . $db->quote($component) . ' OR a.name LIKE ' . $db->quote($component . '.%') . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :			if (!isset($this->items[$this->parent->id][$id + 1]))			{				$class = ' class="last"';			}			?>			<div <?php echo $class; ?> >			<?php $class = ''; ?>				<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($item->id));?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_items_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_NEWSFEEDS_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">					<?php echo JHtml::_('content.prepare', $item->description, '', 'com_newsfeeds.categories'); ?>							<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">					<?php					$this->items[$item->id] = $item->getChildren();					$this->parent = $item;					$this->maxLevelcat--;					echo $this->loadTemplate('items');					$this->parent = $item->getParent();					$this->maxLevelcat++;					?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'menuOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet):		if (!($this->item->link == 'index.php?option=com_wrapper&view=wrapper' && $fieldSet->name == 'request')):			$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$name.'_FIELDSET_LABEL';			echo JHtml::_('bootstrap.addSlide', 'menuOptions', JText::_($label), 'collapse' . $i++);				if (isset($fieldSet->description) && trim($fieldSet->description)) :					echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';				endif;				?>					<?php foreach ($this->form->getFieldset($name) as $field) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $field->label; ?>							</div>							<div class="controls">								<?php echo $field->input; ?>							</div>						</div>					<?php endforeach;			echo JHtml::_('bootstrap.endSlide');		endif;	endforeach;?><?phpecho JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create a shortcut for params.$params = $displayData->params;$canEdit = $displayData->params->get('access-edit');JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');?>	<?php if ($params->get('show_title') || $displayData->state == 0 || ($params->get('show_author') && !empty($displayData->author ))) : ?>		<div class="page-header">			<?php if ($params->get('show_title')) : ?>				<h2>					<?php if ($params->get('link_titles') && $params->get('access-view')) : ?>						<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($displayData->slug, $displayData->catid)); ?>">						<?php echo $this->escape($displayData->title); ?></a>					<?php else : ?>						<?php echo $this->escape($displayData->title); ?>					<?php endif; ?>				</h2>			<?php endif; ?>			<?php if ($displayData->state == 0) : ?>				<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>			<?php endif; ?>		</div>	<?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Languages View class for the Languages component * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesViewLanguages extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		LanguagesHelper::addSubmenu('languages');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_LANGUAGES_TITLE'), 'langmanager.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('language.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('language.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit.state'))		{			if ($this->state->get('filter.published') != 2)			{				JToolbarHelper::publishList('languages.publish');				JToolbarHelper::unpublishList('languages.unpublish');			}		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'languages.delete', 'JTOOLBAR_EMPTY_TRASH');			JToolbarHelper::divider();		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('languages.trash');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			// Add install languages link to the lang installer component			$bar = JToolbar::getInstance('toolbar');			$bar->appendButton('Link', 'upload', 'COM_LANGUAGES_INSTALL', 'index.php?option=com_installer&view=languages');			JToolbarHelper::divider();			JToolbarHelper::preferences('com_languages');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_CONTENT');		JHtmlSidebar::setAction('index.php?option=com_languages&view=languages');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for interacting with a Linkedin API instance. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedin{	/**	 * @var    JRegistry  Options for the Linkedin object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var JLinkedinOAuth The OAuth client.	 * @since 13.1	 */	protected $oauth;	/**	 * @var    JLinkedinPeople  Linkedin API object for people.	 * @since  13.1	 */	protected $people;	/**	 * @var    JLinkedinGroups  Linkedin API object for groups.	 * @since  13.1	 */	protected $groups;	/**	 * @var    JLinkedinCompanies  Linkedin API object for companies.	 * @since  13.1	 */	protected $companies;	/**	 * @var    JLinkedinJobs  Linkedin API object for jobs.	 * @since  13.1	 */	protected $jobs;	/**	 * @var    JLinkedinStream  Linkedin API object for social stream.	 * @since  13.1	 */	protected $stream;	/**	 * @var    JLinkedinCommunications  Linkedin API object for communications.	 * @since  13.1	 */	protected $communications;	/**	 * Constructor.	 *	 * @param   JLinkedinOauth  $oauth    OAuth object	 * @param   JRegistry       $options  Linkedin options object.	 * @param   JHttp           $client   The HTTP client object.	 *	 * @since   13.1	 */	public function __construct(JLinkedinOauth $oauth = null, JRegistry $options = null, JHttp $client = null)	{		$this->oauth = $oauth;		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'https://api.linkedin.com');	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JLinkedinObject  Linkedin API object (statuses, users, favorites, etc.).	 *	 * @since   13.1	 */	public function __get($name)	{		switch ($name)		{			case 'people':				if ($this->people == null)				{					$this->people = new JLinkedinPeople($this->options, $this->client, $this->oauth);				}				return $this->people;			case 'groups':				if ($this->groups == null)				{					$this->groups = new JLinkedinGroups($this->options, $this->client, $this->oauth);				}				return $this->groups;			case 'companies':				if ($this->companies == null)				{					$this->companies = new JLinkedinCompanies($this->options, $this->client, $this->oauth);				}				return $this->companies;			case 'jobs':				if ($this->jobs == null)				{					$this->jobs = new JLinkedinJobs($this->options, $this->client, $this->oauth);				}				return $this->jobs;			case 'stream':				if ($this->stream == null)				{					$this->stream = new JLinkedinStream($this->options, $this->client, $this->oauth);				}				return $this->stream;			case 'communications':				if ($this->communications == null)				{					$this->communications = new JLinkedinCommunications($this->options, $this->client, $this->oauth);				}				return $this->communications;		}	}	/**	 * Get an option from the JLinkedin instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the Linkedin instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JLinkedin  This object for method chaining.	 *	 * @since   13.1	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5 */abstract class InstallerHtmlManage{	/**	 * Returns a published state on a grid	 *	 * @param   integer       $value			The state value.	 * @param   integer       $i				The row index	 * @param   boolean       $enabled			An optional setting for access control on the action.	 * @param   string        $checkbox			An optional prefix for checkboxes.	 *	 * @return  string        The Html code	 *	 * @see JHtmlJGrid::state	 *	 * @since   2.5	 */	public static function state($value, $i, $enabled = true, $checkbox = 'cb')	{		$states	= array(			2	=> array(				'',				'COM_INSTALLER_EXTENSION_PROTECTED',				'',				'COM_INSTALLER_EXTENSION_PROTECTED',				false,				'protected',				'protected'			),			1	=> array(				'unpublish',				'COM_INSTALLER_EXTENSION_ENABLED',				'COM_INSTALLER_EXTENSION_DISABLE',				'COM_INSTALLER_EXTENSION_ENABLED',				false,				'publish',				'publish'			),			0	=> array(				'publish',				'COM_INSTALLER_EXTENSION_DISABLED',				'COM_INSTALLER_EXTENSION_ENABLE',				'COM_INSTALLER_EXTENSION_DISABLED',				false,				'unpublish',				'unpublish'			),		);		return JHtml::_('jgrid.state', $states, $value, $i, 'manage.', $enabled, true, $checkbox);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User note model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersModelNote extends JModelAdmin{	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   2.5	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.note', 'note', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   2.5	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		// Get the dispatcher and load the users plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		// Trigger the data preparation event.		$results = $dispatcher->trigger('onContentPrepareData', array('com_users.note', $result));		return $result;	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $name     The table name. Optional.	 * @param   string  $prefix   The class prefix. Optional.	 * @param   array   $options  Configuration array for model. Optional.	 *	 * @return  JTable  The table object	 *	 * @since   2.5	 */	public function getTable($name = 'Note', $prefix = 'UsersTable', $options = array())	{		return JTable::getInstance($name, $prefix, $options);	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Get the application		$app = JFactory::getApplication();		// Check the session for previously entered form data.		$data = $app->getUserState('com_users.edit.note.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('note.id') == 0)			{				$data->set('catid', $app->input->get('catid', $app->getUserState('com_users.notes.filter.category_id'), 'int'));			}			$userId = $app->input->get('u_id', 0, 'int');			if ($userId != 0)			{				$data->user_id = $userId;			}		}		$this->preprocessData('com_users.note', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState()	{		parent::populateState();		$userId = JFactory::getApplication()->input->get('u_id', 0, 'int');		$this->setState('note.user_id', $userId);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	/*public function save($data)	{		$pk		= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('note.id');		$table	= $this->getTable();		$isNew	= empty($pk);		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// JTableCategory doesn't bind the params, so we need to do that by hand.		if (isset($data['params']) && is_array($data['params']))		{			$registry = new JRegistry();			$registry->loadArray($data['params']);			$table->params = $registry->toString();			// This will give us INI format.		}		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		$this->setState('note.id', $table->id);		return true;	}*/}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Components helper for com_config * * @package     Joomla.Administrator * @subpackage  com_config * @since       3.0 */class ConfigHelperComponent{	/**	 * Get an array of all enabled components.	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getAllComponents()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('element')			->from('#__extensions')			->where('type = ' . $db->quote('component'))			->where('enabled = 1');		$db->setQuery($query);		$result = $db->loadColumn();		return $result;	}	/**	 * Returns true if the component has configuration options.	 *	 * @param   string  $components	 *	 * @return  boolean	 *	 * @since   3.0	 */	public static function hasComponentConfig($component)	{		return is_file(JPATH_ADMINISTRATOR . '/components/' . $component . '/config.xml');	}	/**	 * Returns an array of all components with configuration options. By only	 * components for which the current user has 'core.manage' rights are returned.	 *	 * @param   boolean  $authCheck	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getComponentsWithConfig($authCheck = true)	{		$result = array();		$components = self::getAllComponents();		$user = JFactory::getUser();		// Remove com_config from the array as that may have weird side effects		$components = array_diff($components, array('com_config'));		foreach ($components as $component)		{			if (self::hasComponentConfig($component) && (!$authCheck || $user->authorise('core.manage', $component)))			{				$result[] = $component;			}		}		return $result;	}	/**	 * Load the sys language for the given component.	 *	 * @param   string  $components	 *	 * @return  void	 *	 * @since   3.0	 */	public static function loadLanguageForComponents($components)	{		$lang = JFactory::getLanguage();		foreach ($components as $component)		{			if (!empty($component))				{					// Load the core file then					// Load extension-local file.					$lang->load($component . '.sys', JPATH_BASE, null, false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, null, false, false)				||	$lang->load($component . '.sys', JPATH_BASE, $lang->getDefault(), false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, $lang->getDefault(), false, false);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Templates component helper. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string    The name of the active view.	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_TEMPLATES_SUBMENU_STYLES'),			'index.php?option=com_templates&view=styles',			$vName == 'styles'		);		JHtmlSidebar::addEntry(			JText::_('COM_TEMPLATES_SUBMENU_TEMPLATES'),			'index.php?option=com_templates&view=templates',			$vName == 'templates'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user = JFactory::getUser();		$result = new JObject;		$actions = JAccess::getActions('com_templates');		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, 'com_templates'));		}		return $result;	}	/**	 * Get a list of filter options for the application clients.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getClientOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('JSITE'));		$options[] = JHtml::_('select.option', '1', JText::_('JADMINISTRATOR'));		return $options;	}	/**	 * Get a list of filter options for the templates with styles.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getTemplateOptions($clientId = '*')	{		// Build the filter options.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		if ($clientId != '*')		{			$query->where('client_id=' . (int) $clientId);		}		$query->select('element as value, name as text, extension_id as e_id')			->from('#__extensions')			->where('type = ' . $db->quote('template'))			->where('enabled = 1')			->order('client_id')			->order('name');		$db->setQuery($query);		$options = $db->loadObjectList();		return $options;	}	public static function parseXMLTemplateFile($templateBaseDir, $templateDir)	{		$data = new JObject;		// Check of the xml file exists		$filePath = JPath::clean($templateBaseDir . '/templates/' . $templateDir . '/templateDetails.xml');		if (is_file($filePath))		{			$xml = JInstaller::parseXMLInstallFile($filePath);			if ($xml['type'] != 'template')			{				return false;			}			foreach ($xml as $key => $value)			{				$data->set($key, $value);			}		}		return $data;	}	/**	 * @since   3.0	 */	public static function getPositions($clientId, $templateDir)	{		$positions = array();		$templateBaseDir = $clientId ? JPATH_ADMINISTRATOR : JPATH_SITE;		$filePath = JPath::clean($templateBaseDir . '/templates/' . $templateDir . '/templateDetails.xml');		if (is_file($filePath))		{			// Read the file to see if it's a valid component XML file			$xml = simplexml_load_file($filePath);			if (!$xml)			{				return false;			}			// Check for a valid XML root tag.			// Extensions use 'extension' as the root tag.  Languages use 'metafile' instead			if ($xml->getName() != 'extension' && $xml->getName() != 'metafile')			{				unset($xml);				return false;			}			$positions = (array) $xml->positions;			if (isset($positions['position']))			{				$positions = $positions['position'];			}			else			{				$positions = array();			}		}		return $positions;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Manage View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewDatabase extends InstallerViewDefault{	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		// Get data from the model		$this->state = $this->get('State');		$this->changeSet = $this->get('Items');		$this->errors = $this->changeSet->check();		$this->results = $this->changeSet->getStatus();		$this->schemaVersion = $this->get('SchemaVersion');		$this->updateVersion = $this->get('UpdateVersion');		$this->filterParams  = $this->get('DefaultTextFilters');		$this->schemaVersion = ($this->schemaVersion) ?  $this->schemaVersion : JText::_('JNONE');		$this->updateVersion = ($this->updateVersion) ?  $this->updateVersion : JText::_('JNONE');		$this->pagination = $this->get('Pagination');		$this->errorCount = count($this->errors);		$errors = count($this->errors);		if (!(strncmp($this->schemaVersion, JVERSION, 5) === 0))		{			$this->errorCount++;		}		if (!$this->filterParams)		{			$this->errorCount++;		}		if (($this->updateVersion != JVERSION))		{			$this->errorCount++;		}		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= InstallerHelper::getActions();		/*		 * Set toolbar items for the page		 */		JToolbarHelper::custom('database.fix', 'refresh', 'refresh', 'COM_INSTALLER_TOOLBAR_DATABASE_FIX', false, false);		JToolbarHelper::divider();		parent::addToolbar();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_DATABASE');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$showhelp = $params->get('showhelp', 1);//// Site SubMenu//$menu->addChild(new JMenuNode(JText::_('MOD_MENU_SYSTEM'), null, 'disabled'));//// Users Submenu//if ($user->authorise('core.manage', 'com_users')){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COM_USERS'), null, 'disabled'));}//// Menus Submenu//if ($user->authorise('core.manage', 'com_menus')){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_MENUS'), null, 'disabled'));}//// Content Submenu//if ($user->authorise('core.manage', 'com_content')){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COM_CONTENT'), null, 'disabled'));}//// Components Submenu//// Get the authorised components and sub-menus.$components = ModMenuHelper::getComponents(true);// Check if there are any components, otherwise, don't display the components menu itemif ($components){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COMPONENTS'), null, 'disabled'));}//// Extensions Submenu//$im = $user->authorise('core.manage', 'com_installer');$mm = $user->authorise('core.manage', 'com_modules');$pm = $user->authorise('core.manage', 'com_plugins');$tm = $user->authorise('core.manage', 'com_templates');$lm = $user->authorise('core.manage', 'com_languages');if ($im || $mm || $pm || $tm || $lm){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSIONS'), null, 'disabled'));}//// Help Submenu//if ($showhelp == 1) {$menu->addChild(new JMenuNode(JText::_('MOD_MENU_HELP'), null, 'disabled'));}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Groups view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewMaps extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load plug-in language files.		FinderHelperLanguage::loadPluginLanguage();		// Load the view data.		$this->items		= $this->get('Items');		$this->total		= $this->get('Total');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		FinderHelper::addSubmenu('maps');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Prepare the view.		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Method to configure the toolbar for this view.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		// For whatever reason, the helper isn't being found		include_once JPATH_COMPONENT . '/helpers/finder.php';		$canDo	= FinderHelper::getActions();		JToolbarHelper::title(JText::_('COM_FINDER_MAPS_TOOLBAR_TITLE'), 'finder');		$toolbar = JToolbar::getInstance('toolbar');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publishList('maps.publish');			JToolbarHelper::unpublishList('maps.unpublish');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'maps.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_finder');		}		JToolbarHelper::divider();		$toolbar->appendButton('Popup', 'stats', 'COM_FINDER_STATISTICS', 'index.php?option=com_finder&view=statistics&tmpl=component', 550, 350);		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_FINDER_MANAGE_CONTENT_MAPS');		JHtmlSidebar::setAction('index.php?option=com_finder&view=maps');		JHtmlSidebar::addFilter(			'',			'filter_branch',			JHtml::_('select.options', JHtml::_('finder.mapslist'), 'value', 'text', $this->state->get('filter.branch')),			true		);		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'),			'filter_state',			JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'))		);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Base class for rendering a display layout * loaded from from a layout file * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.0 */class JLayoutFile extends JLayoutBase{	/**	 * @var    string  Dot separated path to the layout file, relative to base path	 * @since  3.0	 */	protected $layoutId = '';	/**	 * @var    string  Base path to use when loading layout files	 * @since  3.0	 */	protected $basePath = null;	/**	 * @var    string  Full path to actual layout files, after possible template override check	 * @since  3.0.3	 */	protected $fullPath = null;	/**	 * Method to instantiate the file-based layout.	 *	 * @param   string  $layoutId  Dot separated path to the layout file, relative to base path	 * @param   string  $basePath  Base path to use when loading layout files	 *	 * @since   3.0	 */	public function __construct($layoutId, $basePath = null)	{		$this->layoutId = $layoutId;		$this->basePath = is_null($basePath) ? JPATH_ROOT . '/layouts' : rtrim($basePath, DIRECTORY_SEPARATOR);	}	/**	 * Method to render the layout.	 *	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 *	 * @return  string  The necessary HTML to display the layout	 *	 * @since   3.0	 */	public function render($displayData)	{		$layoutOutput = '';		// Check possible overrides, and build the full path to layout file		$path = $this->getPath();		// If there exists such a layout file, include it and collect its output		if (!empty($path))		{			ob_start();			include $path;			$layoutOutput = ob_get_contents();			ob_end_clean();		}		return $layoutOutput;	}	/**	 * Method to finds the full real file path, checking possible overrides	 *	 * @return  string  The full path to the layout file	 *	 * @since   3.0	 */	protected function getPath()	{		if (is_null($this->fullPath) && !empty($this->layoutId))		{			$rawPath = str_replace('.', '/', $this->layoutId) . '.php';			$fileName = basename($rawPath);			$filePath = dirname($rawPath);			$possiblePaths = array(				JPATH_THEMES . '/' . JFactory::getApplication()->getTemplate() . '/html/layouts/' . $filePath,				$this->basePath . '/' . $filePath			);			$this->fullPath = JPath::find($possiblePaths, $fileName);		}		return $this->fullPath;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JModelLegacy::addIncludePath(JPATH_ADMINISTRATOR.'/components/com_content/models', 'ContentModel');/** * Helper for mod_popular * * @package     Joomla.Administrator * @subpackage  mod_popular * @since       1.6 */abstract class ModPopularHelper{	/**	 * Get a list of the most popular articles	 *	 * @param   JObject		The module parameters.	 *	 * @return  array	 */	public static function getList($params)	{		$user = JFactory::getuser();		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set List SELECT		$model->setState('list.select', 'a.id, a.title, a.checked_out, a.checked_out_time, ' .				' a.created, a.hits');		// Set Ordering filter		$model->setState('list.ordering', 'a.hits');		$model->setState('list.direction', 'DESC');		// Set Category Filter		$categoryId = $params->get('catid');		if (is_numeric($categoryId)){			$model->setState('filter.category_id', $categoryId);		}		// Set User Filter.		$userId = $user->get('id');		switch ($params->get('user_id'))		{			case 'by_me':				$model->setState('filter.author_id', $userId);				break;			case 'not_me':				$model->setState('filter.author_id', $userId);				$model->setState('filter.author_id.include', false);				break;		}		// Set the Start and Limit		$model->setState('list.start', 0);		$model->setState('list.limit', $params->get('count', 5));		$items = $model->getItems();		if ($error = $model->getError())		{			JError::raiseError(500, $error);			return false;		}		// Set the links		foreach ($items as &$item)		{			if ($user->authorise('core.edit', 'com_content.article.'.$item->id)){				$item->link = JRoute::_('index.php?option=com_content&task=article.edit&id='.$item->id);			} else {				$item->link = '';			}		}		return $items;	}	/**	 * Get the alternate title for the module	 *	 * @param   JObject	The module parameters.	 * @return  string	The alternate title for the module.	 */	public static function getTitle($params)	{		$who = $params->get('user_id');		$catid = (int) $params->get('catid');		if ($catid)		{			$category = JCategories::getInstance('Content')->get($catid);			if ($category)			{				$title = $category->title;			}			else {				$title = JText::_('MOD_POPULAR_UNEXISTING');			}		}		else		{			$title = '';		}		return JText::plural('MOD_POPULAR_TITLE' . ($catid ? "_CATEGORY" : '') . ($who != '0' ? "_$who" : ''), (int) $params->get('count'), $title);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Script file of Joomla CMS * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6.4 */class JoomlaInstallerScript{	/**	 * Method to update Joomla!	 *	 * @param   JInstallerFile    $installer    The class calling this method	 *	 * @return void	 */	public function update($installer)	{		$this->deleteUnexistingFiles();		$this->updateManifestCaches();		$this->updateDatabase();	}	protected function updateDatabase()	{		$db = JFactory::getDbo();		if (substr($db->name, 0, 5) == 'mysql')		{			$query = 'SHOW ENGINES';			$db->setQuery($query);			$results = $db->loadObjectList();			if ($db->getErrorNum())			{				echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';				return;			}			foreach ($results as $result)			{				if ($result->Support == 'DEFAULT')				{					$query = 'ALTER TABLE #__update_sites_extensions ENGINE = ' . $result->Engine;					$db->setQuery($query);					$db->execute();					if ($db->getErrorNum())					{						echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';						return;					}					break;				}			}		}	}	protected function updateManifestCaches()	{		$extensions = array();		// Components		//`type`, `element`, `folder`, `client_id`		$extensions[] = array('component', 'com_mailto', '', 0);		$extensions[] = array('component', 'com_wrapper', '', 0);		$extensions[] = array('component', 'com_admin', '', 1);		$extensions[] = array('component', 'com_banners', '', 1);		$extensions[] = array('component', 'com_cache', '', 1);		$extensions[] = array('component', 'com_categories', '', 1);		$extensions[] = array('component', 'com_checkin', '', 1);		$extensions[] = array('component', 'com_contact', '', 1);		$extensions[] = array('component', 'com_cpanel', '', 1);		$extensions[] = array('component', 'com_installer', '', 1);		$extensions[] = array('component', 'com_languages', '', 1);		$extensions[] = array('component', 'com_login', '', 1);		$extensions[] = array('component', 'com_media', '', 1);		$extensions[] = array('component', 'com_menus', '', 1);		$extensions[] = array('component', 'com_messages', '', 1);		$extensions[] = array('component', 'com_modules', '', 1);		$extensions[] = array('component', 'com_newsfeeds', '', 1);		$extensions[] = array('component', 'com_plugins', '', 1);		$extensions[] = array('component', 'com_search', '', 1);		$extensions[] = array('component', 'com_templates', '', 1);		$extensions[] = array('component', 'com_weblinks', '', 1);		$extensions[] = array('component', 'com_content', '', 1);		$extensions[] = array('component', 'com_config', '', 1);		$extensions[] = array('component', 'com_redirect', '', 1);		$extensions[] = array('component', 'com_users', '', 1);		$extensions[] = array('component', 'com_tags', '', 1);		// Libraries		$extensions[] = array('library', 'phpmailer', '', 0);		$extensions[] = array('library', 'simplepie', '', 0);		$extensions[] = array('library', 'phputf8', '', 0);		$extensions[] = array('library', 'joomla', '', 0);		// Modules site		// Site		$extensions[] = array('module', 'mod_articles_archive', '', 0);		$extensions[] = array('module', 'mod_articles_latest', '', 0);		$extensions[] = array('module', 'mod_articles_popular', '', 0);		$extensions[] = array('module', 'mod_banners', '', 0);		$extensions[] = array('module', 'mod_breadcrumbs', '', 0);		$extensions[] = array('module', 'mod_custom', '', 0);		$extensions[] = array('module', 'mod_feed', '', 0);		$extensions[] = array('module', 'mod_footer', '', 0);		$extensions[] = array('module', 'mod_login', '', 0);		$extensions[] = array('module', 'mod_menu', '', 0);		$extensions[] = array('module', 'mod_articles_news', '', 0);		$extensions[] = array('module', 'mod_random_image', '', 0);		$extensions[] = array('module', 'mod_related_items', '', 0);		$extensions[] = array('module', 'mod_search', '', 0);		$extensions[] = array('module', 'mod_stats', '', 0);		$extensions[] = array('module', 'mod_syndicate', '', 0);		$extensions[] = array('module', 'mod_users_latest', '', 0);		$extensions[] = array('module', 'mod_weblinks', '', 0);		$extensions[] = array('module', 'mod_whosonline', '', 0);		$extensions[] = array('module', 'mod_wrapper', '', 0);		$extensions[] = array('module', 'mod_articles_category', '', 0);		$extensions[] = array('module', 'mod_articles_categories', '', 0);		$extensions[] = array('module', 'mod_languages', '', 0);		$extensions[] = array('module', 'mod_tags_popular', '', 0);		$extensions[] = array('module', 'mod_tags_similar', '', 0);		// Administrator		$extensions[] = array('module', 'mod_custom', '', 1);		$extensions[] = array('module', 'mod_feed', '', 1);		$extensions[] = array('module', 'mod_latest', '', 1);		$extensions[] = array('module', 'mod_logged', '', 1);		$extensions[] = array('module', 'mod_login', '', 1);		$extensions[] = array('module', 'mod_menu', '', 1);		$extensions[] = array('module', 'mod_popular', '', 1);		$extensions[] = array('module', 'mod_quickicon', '', 1);		$extensions[] = array('module', 'mod_stats_admin', '', 1);		$extensions[] = array('module', 'mod_status', '', 1);		$extensions[] = array('module', 'mod_submenu', '', 1);		$extensions[] = array('module', 'mod_title', '', 1);		$extensions[] = array('module', 'mod_toolbar', '', 1);		$extensions[] = array('module', 'mod_multilangstatus', '', 1);		// Plug-ins		$extensions[] = array('plugin', 'gmail', 'authentication', 0);		$extensions[] = array('plugin', 'joomla', 'authentication', 0);		$extensions[] = array('plugin', 'ldap', 'authentication', 0);		$extensions[] = array('plugin', 'emailcloak', 'content', 0);		$extensions[] = array('plugin', 'loadmodule', 'content', 0);		$extensions[] = array('plugin', 'pagebreak', 'content', 0);		$extensions[] = array('plugin', 'pagenavigation', 'content', 0);		$extensions[] = array('plugin', 'vote', 'content', 0);		$extensions[] = array('plugin', 'codemirror', 'editors', 0);		$extensions[] = array('plugin', 'none', 'editors', 0);		$extensions[] = array('plugin', 'tinymce', 'editors', 0);		$extensions[] = array('plugin', 'article', 'editors-xtd', 0);		$extensions[] = array('plugin', 'image', 'editors-xtd', 0);		$extensions[] = array('plugin', 'pagebreak', 'editors-xtd', 0);		$extensions[] = array('plugin', 'readmore', 'editors-xtd', 0);		$extensions[] = array('plugin', 'categories', 'search', 0);		$extensions[] = array('plugin', 'contacts', 'search', 0);		$extensions[] = array('plugin', 'content', 'search', 0);		$extensions[] = array('plugin', 'newsfeeds', 'search', 0);		$extensions[] = array('plugin', 'weblinks', 'search', 0);		$extensions[] = array('plugin', 'languagefilter', 'system', 0);		$extensions[] = array('plugin', 'p3p', 'system', 0);		$extensions[] = array('plugin', 'cache', 'system', 0);		$extensions[] = array('plugin', 'debug', 'system', 0);		$extensions[] = array('plugin', 'log', 'system', 0);		$extensions[] = array('plugin', 'redirect', 'system', 0);		$extensions[] = array('plugin', 'remember', 'system', 0);		$extensions[] = array('plugin', 'sef', 'system', 0);		$extensions[] = array('plugin', 'logout', 'system', 0);		$extensions[] = array('plugin', 'contactcreator', 'user', 0);		$extensions[] = array('plugin', 'joomla', 'user', 0);		$extensions[] = array('plugin', 'profile', 'user', 0);		$extensions[] = array('plugin', 'joomla', 'extension', 0);		$extensions[] = array('plugin', 'joomla', 'content', 0);		$extensions[] = array('plugin', 'languagecode', 'system', 0);		$extensions[] = array('plugin', 'joomlaupdate', 'quickicon', 0);		$extensions[] = array('plugin', 'extensionupdate', 'quickicon', 0);		$extensions[] = array('plugin', 'recaptcha', 'captcha', 0);		$extensions[] = array('plugin', 'categories', 'finder', 0);		$extensions[] = array('plugin', 'contacts', 'finder', 0);		$extensions[] = array('plugin', 'content', 'finder', 0);		$extensions[] = array('plugin', 'newsfeeds', 'finder', 0);		$extensions[] = array('plugin', 'weblinks', 'finder', 0);		$extensions[] = array('plugin', 'tags', 'finder', 0);		// Templates		$extensions[] = array('template', 'beez3', '', 0);		$extensions[] = array('template', 'hathor', '', 1);		$extensions[] = array('template', 'protostar', '', 0);		$extensions[] = array('template', 'isis', '', 1);		// Languages		$extensions[] = array('language', 'en-GB', '', 0);		$extensions[] = array('language', 'en-GB', '', 1);		// Files		$extensions[] = array('file', 'joomla', '', 0);		// Packages		// None in core at this time		// Attempt to refresh manifest caches		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('*')			->from('#__extensions');		foreach ($extensions as $extension)		{			$query->where('type=' . $db->quote($extension[0]) . ' AND element=' . $db->quote($extension[1]) . ' AND folder=' . $db->quote($extension[2]) . ' AND client_id=' . $extension[3], 'OR');		}		$db->setQuery($query);		$extensions = $db->loadObjectList();		$installer = new JInstaller;		// Check for a database error.		if ($db->getErrorNum())		{			echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';			return;		}		foreach ($extensions as $extension)		{			if (!$installer->refreshManifestCache($extension->extension_id))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_MANIFEST', $extension->type, $extension->element, $extension->name, $extension->client_id) . '<br />';			}		}	}	public function deleteUnexistingFiles()	{		$files = array(			'/libraries/cms/cmsloader.php',			'/libraries/joomla/form/fields/templatestyle.php',			'/libraries/joomla/form/fields/user.php',			'/libraries/joomla/form/fields/menu.php',			'/libraries/joomla/form/fields/helpsite.php',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/2.5.2-2012-03-05.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/2.5.3-2012-03-13.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/index.html',			'/administrator/components/com_users/controllers/config.php',			'/administrator/language/en-GB/en-GB.plg_system_finder.ini',			'/administrator/language/en-GB/en-GB.plg_system_finder.sys.ini',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advhr/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advimage/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advlink/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advlist/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autolink/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autoresize/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autosave/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/bbcode/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/contextmenu/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/directionality/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/emotions/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/fullpage/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/fullscreen/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/iespell/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/inlinepopups/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/insertdatetime/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/layer/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/lists/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/media/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/nonbreaking/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/noneditable/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/pagebreak/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/paste/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/preview/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/print/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/save/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/searchreplace/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/spellchecker/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/style/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/tabfocus/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/table/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/template/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/visualchars/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/wordcount/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/xhtmlxtras/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/themes/advanced/editor_template_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/themes/simple/editor_template_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/tiny_mce_src.js',			'/media/com_finder/images/calendar.png',			'/media/com_finder/images/mime/index.html',			'/media/com_finder/images/mime/pdf.png',			'/components/com_media/controller.php',			'/components/com_media/helpers/index.html',			'/components/com_media/helpers/media.php',			// Joomla 3.0			'/administrator/components/com_admin/sql/updates/mysql/1.7.0-2011-06-06-2.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0-2011-06-06.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-2.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-3.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-4.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-17.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-20.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-10-15.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-10-19.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-11-10.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-11-19.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-11-23.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-12-12.sql',			'/administrator/components/com_admin/views/sysinfo/tmpl/default_navigation.php',			'/administrator/components/com_categories/config.xml',			'/administrator/components/com_categories/helpers/categoriesadministrator.php',			'/administrator/components/com_contact/elements/contact.php',			'/administrator/components/com_contact/elements/index.html',			'/administrator/components/com_content/elements/article.php',			'/administrator/components/com_content/elements/author.php',			'/administrator/components/com_content/elements/index.html',			'/administrator/components/com_installer/models/fields/client.php',			'/administrator/components/com_installer/models/fields/group.php',			'/administrator/components/com_installer/models/fields/index.html',			'/administrator/components/com_installer/models/fields/search.php',			'/administrator/components/com_installer/models/fields/type.php',			'/administrator/components/com_installer/models/forms/index.html',			'/administrator/components/com_installer/models/forms/manage.xml',			'/administrator/components/com_installer/views/install/tmpl/default_form.php',			'/administrator/components/com_installer/views/manage/tmpl/default_filter.php',			'/administrator/components/com_languages/views/installed/tmpl/default_ftp.php',			'/administrator/components/com_languages/views/installed/tmpl/default_navigation.php',			'/administrator/components/com_modules/models/fields/index.html',			'/administrator/components/com_modules/models/fields/moduleorder.php',			'/administrator/components/com_modules/models/fields/moduleposition.php',			'/administrator/components/com_newsfeeds/elements/index.html',			'/administrator/components/com_newsfeeds/elements/newsfeed.php',			'/administrator/components/com_templates/views/prevuuw/index.html',			'/administrator/components/com_templates/views/prevuuw/tmpl/default.php',			'/administrator/components/com_templates/views/prevuuw/tmpl/index.html',			'/administrator/components/com_templates/views/prevuuw/view.html.php',			'/administrator/includes/menu.php',			'/administrator/includes/router.php',			'/administrator/manifests/packages/pkg_joomla.xml',			'/administrator/modules/mod_submenu/helper.php',			'/administrator/templates/hathor/css/ie6.css',			'/administrator/templates/hathor/html/mod_submenu/index.html',			'/administrator/templates/hathor/html/mod_submenu/default.php',			'/components/com_media/controller.php',			'/components/com_media/helpers/index.html',			'/components/com_media/helpers/media.php',			'/includes/menu.php',			'/includes/pathway.php',			'/includes/router.php',			'/language/en-GB/en-GB.pkg_joomla.sys.ini',			'/libraries/cms/controller/index.html',			'/libraries/cms/controller/legacy.php',			'/libraries/cms/model/index.html',			'/libraries/cms/model/legacy.php',			'/libraries/cms/schema/changeitemmysql.php',			'/libraries/cms/schema/changeitemsqlazure.php',			'/libraries/cms/schema/changeitemsqlsrv.php',			'/libraries/cms/view/index.html',			'/libraries/cms/view/legacy.php',			'/libraries/joomla/application/application.php',			'/libraries/joomla/application/categories.php',			'/libraries/joomla/application/cli/daemon.php',			'/libraries/joomla/application/cli/index.html',			'/libraries/joomla/application/component/controller.php',			'/libraries/joomla/application/component/controlleradmin.php',			'/libraries/joomla/application/component/controllerform.php',			'/libraries/joomla/application/component/helper.php',			'/libraries/joomla/application/component/index.html',			'/libraries/joomla/application/component/model.php',			'/libraries/joomla/application/component/modeladmin.php',			'/libraries/joomla/application/component/modelform.php',			'/libraries/joomla/application/component/modelitem.php',			'/libraries/joomla/application/component/modellist.php',			'/libraries/joomla/application/component/view.php',			'/libraries/joomla/application/helper.php',			'/libraries/joomla/application/input.php',			'/libraries/joomla/application/input/cli.php',			'/libraries/joomla/application/input/cookie.php',			'/libraries/joomla/application/input/files.php',			'/libraries/joomla/application/input/index.html',			'/libraries/joomla/application/menu.php',			'/libraries/joomla/application/module/helper.php',			'/libraries/joomla/application/module/index.html',			'/libraries/joomla/application/pathway.php',			'/libraries/joomla/application/web/webclient.php',			'/libraries/joomla/base/node.php',			'/libraries/joomla/base/object.php',			'/libraries/joomla/base/observable.php',			'/libraries/joomla/base/observer.php',			'/libraries/joomla/base/tree.php',			'/libraries/joomla/cache/storage/eaccelerator.php',			'/libraries/joomla/cache/storage/helpers/helper.php',			'/libraries/joomla/cache/storage/helpers/index.html',			'/libraries/joomla/database/database/index.html',			'/libraries/joomla/database/database/mysql.php',			'/libraries/joomla/database/database/mysqlexporter.php',			'/libraries/joomla/database/database/mysqli.php',			'/libraries/joomla/database/database/mysqliexporter.php',			'/libraries/joomla/database/database/mysqliimporter.php',			'/libraries/joomla/database/database/mysqlimporter.php',			'/libraries/joomla/database/database/mysqliquery.php',			'/libraries/joomla/database/database/mysqlquery.php',			'/libraries/joomla/database/database/sqlazure.php',			'/libraries/joomla/database/database/sqlazurequery.php',			'/libraries/joomla/database/database/sqlsrv.php',			'/libraries/joomla/database/database/sqlsrvquery.php',			'/libraries/joomla/database/exception.php',			'/libraries/joomla/database/table.php',			'/libraries/joomla/database/table/asset.php',			'/libraries/joomla/database/table/category.php',			'/libraries/joomla/database/table/content.php',			'/libraries/joomla/database/table/extension.php',			'/libraries/joomla/database/table/index.html',			'/libraries/joomla/database/table/language.php',			'/libraries/joomla/database/table/menu.php',			'/libraries/joomla/database/table/menutype.php',			'/libraries/joomla/database/table/module.php',			'/libraries/joomla/database/table/session.php',			'/libraries/joomla/database/table/update.php',			'/libraries/joomla/database/table/user.php',			'/libraries/joomla/database/table/usergroup.php',			'/libraries/joomla/database/table/viewlevel.php',			'/libraries/joomla/database/tablenested.php',			'/libraries/joomla/environment/request.php',			'/libraries/joomla/environment/uri.php',			'/libraries/joomla/error/error.php',			'/libraries/joomla/error/exception.php',			'/libraries/joomla/error/index.html',			'/libraries/joomla/error/log.php',			'/libraries/joomla/error/profiler.php',			'/libraries/joomla/filesystem/archive.php',			'/libraries/joomla/filesystem/archive/bzip2.php',			'/libraries/joomla/filesystem/archive/gzip.php',			'/libraries/joomla/filesystem/archive/index.html',			'/libraries/joomla/filesystem/archive/tar.php',			'/libraries/joomla/filesystem/archive/zip.php',			'/libraries/joomla/form/fields/category.php',			'/libraries/joomla/form/fields/componentlayout.php',			'/libraries/joomla/form/fields/contentlanguage.php',			'/libraries/joomla/form/fields/editor.php',			'/libraries/joomla/form/fields/editors.php',			'/libraries/joomla/form/fields/media.php',			'/libraries/joomla/form/fields/menuitem.php',			'/libraries/joomla/form/fields/modulelayout.php',			'/libraries/joomla/html/editor.php',			'/libraries/joomla/html/html/access.php',			'/libraries/joomla/html/html/batch.php',			'/libraries/joomla/html/html/behavior.php',			'/libraries/joomla/html/html/category.php',			'/libraries/joomla/html/html/content.php',			'/libraries/joomla/html/html/contentlanguage.php',			'/libraries/joomla/html/html/date.php',			'/libraries/joomla/html/html/email.php',			'/libraries/joomla/html/html/form.php',			'/libraries/joomla/html/html/grid.php',			'/libraries/joomla/html/html/image.php',			'/libraries/joomla/html/html/index.html',			'/libraries/joomla/html/html/jgrid.php',			'/libraries/joomla/html/html/list.php',			'/libraries/joomla/html/html/menu.php',			'/libraries/joomla/html/html/number.php',			'/libraries/joomla/html/html/rules.php',			'/libraries/joomla/html/html/select.php',			'/libraries/joomla/html/html/sliders.php',			'/libraries/joomla/html/html/string.php',			'/libraries/joomla/html/html/tabs.php',			'/libraries/joomla/html/html/tel.php',			'/libraries/joomla/html/html/user.php',			'/libraries/joomla/html/pagination.php',			'/libraries/joomla/html/pane.php',			'/libraries/joomla/html/parameter.php',			'/libraries/joomla/html/parameter/element.php',			'/libraries/joomla/html/parameter/element/calendar.php',			'/libraries/joomla/html/parameter/element/category.php',			'/libraries/joomla/html/parameter/element/componentlayouts.php',			'/libraries/joomla/html/parameter/element/contentlanguages.php',			'/libraries/joomla/html/parameter/element/editors.php',			'/libraries/joomla/html/parameter/element/filelist.php',			'/libraries/joomla/html/parameter/element/folderlist.php',			'/libraries/joomla/html/parameter/element/helpsites.php',			'/libraries/joomla/html/parameter/element/hidden.php',			'/libraries/joomla/html/parameter/element/imagelist.php',			'/libraries/joomla/html/parameter/element/index.html',			'/libraries/joomla/html/parameter/element/languages.php',			'/libraries/joomla/html/parameter/element/list.php',			'/libraries/joomla/html/parameter/element/menu.php',			'/libraries/joomla/html/parameter/element/menuitem.php',			'/libraries/joomla/html/parameter/element/modulelayouts.php',			'/libraries/joomla/html/parameter/element/password.php',			'/libraries/joomla/html/parameter/element/radio.php',			'/libraries/joomla/html/parameter/element/spacer.php',			'/libraries/joomla/html/parameter/element/sql.php',			'/libraries/joomla/html/parameter/element/templatestyle.php',			'/libraries/joomla/html/parameter/element/text.php',			'/libraries/joomla/html/parameter/element/textarea.php',			'/libraries/joomla/html/parameter/element/timezones.php',			'/libraries/joomla/html/parameter/element/usergroup.php',			'/libraries/joomla/html/parameter/index.html',			'/libraries/joomla/html/toolbar.php',			'/libraries/joomla/html/toolbar/button.php',			'/libraries/joomla/html/toolbar/button/confirm.php',			'/libraries/joomla/html/toolbar/button/custom.php',			'/libraries/joomla/html/toolbar/button/help.php',			'/libraries/joomla/html/toolbar/button/index.html',			'/libraries/joomla/html/toolbar/button/link.php',			'/libraries/joomla/html/toolbar/button/popup.php',			'/libraries/joomla/html/toolbar/button/separator.php',			'/libraries/joomla/html/toolbar/button/standard.php',			'/libraries/joomla/html/toolbar/index.html',			'/libraries/joomla/image/filters/brightness.php',			'/libraries/joomla/image/filters/contrast.php',			'/libraries/joomla/image/filters/edgedetect.php',			'/libraries/joomla/image/filters/emboss.php',			'/libraries/joomla/image/filters/grayscale.php',			'/libraries/joomla/image/filters/index.html',			'/libraries/joomla/image/filters/negate.php',			'/libraries/joomla/image/filters/sketchy.php',			'/libraries/joomla/image/filters/smooth.php',			'/libraries/joomla/language/help.php',			'/libraries/joomla/language/latin_transliterate.php',			'/libraries/joomla/log/logexception.php',			'/libraries/joomla/log/loggers/database.php',			'/libraries/joomla/log/loggers/echo.php',			'/libraries/joomla/log/loggers/formattedtext.php',			'/libraries/joomla/log/loggers/index.html',			'/libraries/joomla/log/loggers/messagequeue.php',			'/libraries/joomla/log/loggers/syslog.php',			'/libraries/joomla/log/loggers/w3c.php',			'/libraries/joomla/methods.php',			'/libraries/joomla/session/storage/eaccelerator.php',			'/libraries/joomla/string/stringnormalize.php',			'/libraries/joomla/utilities/date.php',			'/libraries/joomla/utilities/simplecrypt.php',			'/libraries/joomla/utilities/simplexml.php',			'/libraries/joomla/utilities/string.php',			'/libraries/joomla/utilities/xmlelement.php',			'/media/plg_quickicon_extensionupdate/extensionupdatecheck.js',			'/media/plg_quickicon_joomlaupdate/jupdatecheck.js',			// Joomla! 3.1			'/libraries/joomla/form/rules/boolean.php',			'/libraries/joomla/form/rules/color.php',			'/libraries/joomla/form/rules/email.php',			'/libraries/joomla/form/rules/equals.php',			'/libraries/joomla/form/rules/index.html',			'/libraries/joomla/form/rules/options.php',			'/libraries/joomla/form/rules/rules.php',			'/libraries/joomla/form/rules/tel.php',			'/libraries/joomla/form/rules/url.php',			'/libraries/joomla/form/rules/username.php',			'/libraries/joomla/installer/adapters/component.php',			'/libraries/joomla/installer/adapters/file.php',			'/libraries/joomla/installer/adapters/index.html',			'/libraries/joomla/installer/adapters/language.php',			'/libraries/joomla/installer/adapters/library.php',			'/libraries/joomla/installer/adapters/module.php',			'/libraries/joomla/installer/adapters/package.php',			'/libraries/joomla/installer/adapters/plugin.php',			'/libraries/joomla/installer/adapters/template.php',			'/libraries/joomla/installer/extension.php',			'/libraries/joomla/installer/helper.php',			'/libraries/joomla/installer/index.html',			'/libraries/joomla/installer/librarymanifest.php',			'/libraries/joomla/installer/packagemanifest.php',			'/media/system/css/mooRainbow.css',			'/media/system/js/mooRainbow-uncompressed.js',			'/media/system/js/mooRainbow.js',			'/media/system/js/swf-uncompressed.js',			'/media/system/js/swf.js',			'/media/system/js/uploader-uncompressed.js',			'/media/system/js/uploader.js',			'/media/system/swf/index.html',			'/media/system/swf/uploader.swf',		);		// TODO There is an issue while deleting folders using the ftp mode		$folders = array(			'/administrator/components/com_admin/sql/updates/sqlsrv',			'/media/com_finder/images/mime',			'/media/com_finder/images',			'/components/com_media/helpers',			// Joomla 3.0			'/administrator/components/com_contact/elements',			'/administrator/components/com_content/elements',			'/administrator/components/com_installer/models/fields',			'/administrator/components/com_installer/models/forms',			'/administrator/components/com_modules/models/fields',			'/administrator/components/com_newsfeeds/elements',			'/administrator/components/com_templates/views/prevuuw/tmpl',			'/administrator/components/com_templates/views/prevuuw',			'/libraries/cms/controller',			'/libraries/cms/model',			'/libraries/cms/view',			'/libraries/joomla/application/cli',			'/libraries/joomla/application/component',			'/libraries/joomla/application/input',			'/libraries/joomla/application/module',			'/libraries/joomla/cache/storage/helpers',			'/libraries/joomla/database/table',			'/libraries/joomla/database/database',			'/libraries/joomla/error',			'/libraries/joomla/filesystem/archive',			'/libraries/joomla/html/html',			'/libraries/joomla/html/toolbar',			'/libraries/joomla/html/toolbar/button',			'/libraries/joomla/html/parameter',			'/libraries/joomla/html/parameter/element',			'/libraries/joomla/image/filters',			'/libraries/joomla/log/loggers',			// Joomla! 3.1			'/libraries/joomla/form/rules',			'/libraries/joomla/installer/adapters',			'/libraries/joomla/installer',			'/media/system/swf/',		);		jimport('joomla.filesystem.file');		foreach ($files as $file)		{			if (JFile::exists(JPATH_ROOT . $file) && !JFile::delete(JPATH_ROOT . $file))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_FILE_FOLDER', $file) . '<br />';			}		}		jimport('joomla.filesystem.folder');		foreach ($folders as $folder)		{			if (JFolder::exists(JPATH_ROOT . $folder) && !JFolder::delete(JPATH_ROOT . $folder))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_FILE_FOLDER', $folder) . '<br />';			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a contact. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactViewContact extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Initialise variables.		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Since we don't track these assets at the item level, use the category id.		$canDo		= ContactHelper::getActions($this->item->catid, 0);		JToolbarHelper::title(JText::_('COM_CONTACT_MANAGER_CONTACT'), 'contact.png');		// Build the actions for new and existing records.		if ($isNew)		{			// For new records, check the create permission.			if ($isNew && (count($user->getAuthorisedCategories('com_contact', 'core.create')) > 0))			{				JToolbarHelper::apply('contact.apply');				JToolbarHelper::save('contact.save');				JToolbarHelper::save2new('contact.save2new');			}			JToolbarHelper::cancel('contact.cancel');		}		else		{			// Can't save the record if it's checked out.			if (!$checkedOut)			{				// Since it's an existing record, check the edit permission, or fall back to edit own if the owner.				if ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_by == $userId))				{					JToolbarHelper::apply('contact.apply');					JToolbarHelper::save('contact.save');					// We can save this record, but check the create permission to see if we can return to make a new one.					if ($canDo->get('core.create'))					{						JToolbarHelper::save2new('contact.save2new');					}				}			}			// If checked out, we can still save			if ($canDo->get('core.create'))			{				JToolbarHelper::save2copy('contact.save2copy');			}			JToolbarHelper::cancel('contact.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_CONTACTS_CONTACTS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');$canDo = UsersHelper::getActions();// Get the form fieldsets.$fieldsets = $this->form->getFieldsets();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'user.cancel' || document.formvalidator.isValid(document.id('user-form')))		{			Joomla.submitform(task, document.getElementById('user-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_users&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="user-form" class="form-validate" enctype="multipart/form-data">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('COM_USERS_USER_ACCOUNT_DETAILS'); ?></legend>			<ul class="adminformlist">			<?php foreach ($this->form->getFieldset('user_details') as $field) : ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endforeach; ?>			</ul>		</fieldset>	</div>	<div class="col options-section">		<?php echo  JHtml::_('sliders.start', 'user-slider', array('useCookie' => 1)); ?>		<?php if ($this->grouplist) : ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_USERS_ASSIGNED_GROUPS'), 'groups'); ?>			<fieldset class="panelform">				<legend class="element-invisible"><?php echo JText::_('COM_USERS_ASSIGNED_GROUPS'); ?></legend>				<?php echo $this->loadTemplate('groups'); ?>			</fieldset>		<?php endif; ?>		<?php		foreach ($fieldsets as $fieldset) :			if ($fieldset->name == 'user_details') :				continue;			endif;			echo JHtml::_('sliders.panel', JText::_($fieldset->label), $fieldset->name);		?>		<fieldset class="panelform">			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset($fieldset->name) as $field) : ?>					<?php if ($field->hidden) : ?>						<?php echo $field->input; ?>					<?php else : ?>						<li><?php echo $field->label; ?>						<?php echo $field->input; ?></li>					<?php endif; ?>				<?php endforeach; ?>			</ul>		</fieldset>		<?php endforeach; ?>		<?php echo JHtml::_('sliders.end'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Legacy * @subpackage  Component * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Component helper class * * @package     Joomla.Legacy * @subpackage  Component * @since       11.1 */class JComponentHelper{	/**	 * The component list cache	 *	 * @var    array	 * @since  11.1	 */	protected static $components = array();	/**	 * Get the component information.	 *	 * @param   string   $option  The component option.	 * @param   boolean  $strict  If set and the component does not exist, the enabled attribute will be set to false.	 *	 * @return  object   An object with the information for the component.	 *	 * @since   11.1	 */	public static function getComponent($option, $strict = false)	{		if (!isset(self::$components[$option]))		{			if (self::_load($option))			{				$result = self::$components[$option];			}			else			{				$result = new stdClass;				$result->enabled = $strict ? false : true;				$result->params = new JRegistry;			}		}		else		{			$result = self::$components[$option];		}		return $result;	}	/**	 * Checks if the component is enabled	 *	 * @param   string  $option  The component option.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public static function isEnabled($option)	{		$result = self::getComponent($option, true);		return $result->enabled;	}	/**	 * Gets the parameter object for the component	 *	 * @param   string   $option  The option for the component.	 * @param   boolean  $strict  If set and the component does not exist, false will be returned	 *	 * @return  JRegistry  A JRegistry object.	 *	 * @see     JRegistry	 * @since   11.1	 */	public static function getParams($option, $strict = false)	{		$component = self::getComponent($option, $strict);		return $component->params;	}	/**	 * Applies the global text filters to arbitrary text as per settings for current user groups	 *	 * @param   string  $text  The string to filter	 *	 * @return  string  The filtered string	 *	 * @since   11.4	 */	public static function filterText($text)	{		// Filter settings		$config		= self::getParams('com_config');		$user		= JFactory::getUser();		$userGroups	= JAccess::getGroupsByUser($user->get('id'));		$filters = $config->get('filters');		$blackListTags			= array();		$blackListAttributes	= array();		$customListTags			= array();		$customListAttributes	= array();		$whiteListTags			= array();		$whiteListAttributes	= array();		$noHtml		= false;		$whiteList	= false;		$blackList	= false;		$customList	= false;		$unfiltered	= false;		// Cycle through each of the user groups the user is in.		// Remember they are included in the Public group as well.		foreach ($userGroups as $groupId)		{			// May have added a group by not saved the filters.			if (!isset($filters->$groupId))			{				continue;			}			// Each group the user is in could have different filtering properties.			$filterData = $filters->$groupId;			$filterType	= strtoupper($filterData->filter_type);			if ($filterType == 'NH')			{				// Maximum HTML filtering.				$noHtml = true;			}			elseif ($filterType == 'NONE')			{				// No HTML filtering.				$unfiltered = true;			}			else			{				// Black or white list.				// Preprocess the tags and attributes.				$tags			= explode(',', $filterData->filter_tags);				$attributes		= explode(',', $filterData->filter_attributes);				$tempTags		= array();				$tempAttributes	= array();				foreach ($tags as $tag)				{					$tag = trim($tag);					if ($tag)					{						$tempTags[] = $tag;					}				}				foreach ($attributes as $attribute)				{					$attribute = trim($attribute);					if ($attribute)					{						$tempAttributes[] = $attribute;					}				}				// Collect the black or white list tags and attributes.				// Each list is cummulative.				if ($filterType == 'BL')				{					$blackList				= true;					$blackListTags			= array_merge($blackListTags, $tempTags);					$blackListAttributes	= array_merge($blackListAttributes, $tempAttributes);				}				elseif ($filterType == 'CBL')				{					// Only set to true if Tags or Attributes were added					if ($tempTags || $tempAttributes)					{						$customList				= true;						$customListTags			= array_merge($customListTags, $tempTags);						$customListAttributes	= array_merge($customListAttributes, $tempAttributes);					}				}				elseif ($filterType == 'WL')				{					$whiteList				= true;					$whiteListTags			= array_merge($whiteListTags, $tempTags);					$whiteListAttributes	= array_merge($whiteListAttributes, $tempAttributes);				}			}		}		// Remove duplicates before processing (because the black list uses both sets of arrays).		$blackListTags			= array_unique($blackListTags);		$blackListAttributes	= array_unique($blackListAttributes);		$customListTags			= array_unique($customListTags);		$customListAttributes	= array_unique($customListAttributes);		$whiteListTags			= array_unique($whiteListTags);		$whiteListAttributes	= array_unique($whiteListAttributes);		// Unfiltered assumes first priority.		if ($unfiltered)		{			// Dont apply filtering.		}		else		{			// Custom blacklist precedes Default blacklist			if ($customList)			{				$filter = JFilterInput::getInstance(array(), array(), 1, 1);				// Override filter's default blacklist tags and attributes				if ($customListTags)				{					$filter->tagBlacklist = $customListTags;				}				if ($customListAttributes)				{					$filter->attrBlacklist = $customListAttributes;				}			}			// Black lists take second precedence.			elseif ($blackList)			{				// Remove the white-listed tags and attributes from the black-list.				$blackListTags			= array_diff($blackListTags, $whiteListTags);				$blackListAttributes	= array_diff($blackListAttributes, $whiteListAttributes);				$filter = JFilterInput::getInstance($blackListTags, $blackListAttributes, 1, 1);				// Remove white listed tags from filter's default blacklist				if ($whiteListTags)				{					$filter->tagBlacklist = array_diff($filter->tagBlacklist, $whiteListTags);				}				// Remove white listed attributes from filter's default blacklist				if ($whiteListAttributes)				{					$filter->attrBlacklist = array_diff($filter->attrBlacklist);				}			}			// White lists take third precedence.			elseif ($whiteList)			{				// Turn off XSS auto clean				$filter	= JFilterInput::getInstance($whiteListTags, $whiteListAttributes, 0, 0, 0);			}			// No HTML takes last place.			else			{				$filter = JFilterInput::getInstance();			}			$text = $filter->clean($text, 'html');		}		return $text;	}	/**	 * Render the component.	 *	 * @param   string  $option  The component option.	 * @param   array   $params  The component parameters	 *	 * @return  object	 *	 * @since   11.1	 * @throws  Exception	 */	public static function renderComponent($option, $params = array())	{		$app = JFactory::getApplication();		// Load template language files.		$template = $app->getTemplate(true)->template;		$lang = JFactory::getLanguage();		$lang->load('tpl_' . $template, JPATH_BASE, null, false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", null, false, false)			|| $lang->load('tpl_' . $template, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", $lang->getDefault(), false, false);		if (empty($option))		{			throw new Exception(JText::_('JLIB_APPLICATION_ERROR_COMPONENT_NOT_FOUND'), 404);		}		// Record the scope		$scope = $app->scope;		// Set scope to component name		$app->scope = $option;		// Build the component path.		$option = preg_replace('/[^A-Z0-9_\.-]/i', '', $option);		$file = substr($option, 4);		// Define component path.		define('JPATH_COMPONENT', JPATH_BASE . '/components/' . $option);		define('JPATH_COMPONENT_SITE', JPATH_SITE . '/components/' . $option);		define('JPATH_COMPONENT_ADMINISTRATOR', JPATH_ADMINISTRATOR . '/components/' . $option);		$path = JPATH_COMPONENT . '/' . $file . '.php';		// If component is disabled throw error		if (!self::isEnabled($option) || !file_exists($path))		{			throw new Exception(JText::_('JLIB_APPLICATION_ERROR_COMPONENT_NOT_FOUND'), 404);		}		$task = $app->input->getString('task');		// Load common and local language files.		$lang->load($option, JPATH_BASE, null, false, false) || $lang->load($option, JPATH_COMPONENT, null, false, false)			|| $lang->load($option, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load($option, JPATH_COMPONENT, $lang->getDefault(), false, false);		// Handle template preview outlining.		$contents = null;		// Execute the component.		$contents = self::executeComponent($path);		// Revert the scope		$app->scope = $scope;		return $contents;	}	/**	 * Execute the component.	 *	 * @param   string  $path  The component path.	 *	 * @return  string  The component output	 *	 * @since   11.3	 */	protected static function executeComponent($path)	{		ob_start();		require_once $path;		$contents = ob_get_contents();		ob_end_clean();		return $contents;	}	/**	 * Load the installed components into the components property.	 *	 * @param   string  $option  The element value for the extension	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected static function _load($option)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('extension_id AS id, element AS "option", params, enabled')			->from('#__extensions')			->where($db->quoteName('type') . ' = ' . $db->quote('component'))			->where($db->quoteName('element') . ' = ' . $db->quote($option));		$db->setQuery($query);		$cache = JFactory::getCache('_system', 'callback');		try		{			self::$components[$option] = $cache->get(array($db, 'loadObject'), null, $option, false);		}		catch (RuntimeException $e)		{			// Fatal error.			JLog::add(JText::sprintf('JLIB_APPLICATION_ERROR_COMPONENT_NOT_LOADING', $option, $error), JLog::WARNING, 'jerror');			return false;		}		if (empty(self::$components[$option]))		{			// Fatal error.			$error = JText::_('JLIB_APPLICATION_ERROR_COMPONENT_NOT_FOUND');			JLog::add(JText::sprintf('JLIB_APPLICATION_ERROR_COMPONENT_NOT_LOADING', $option, $error), JLog::WARNING, 'jerror');			return false;		}		// Convert the params to an object.		if (is_string(self::$components[$option]->params))		{			$temp = new JRegistry;			$temp->loadString(self::$components[$option]->params);			self::$components[$option]->params = $temp;		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Person class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedPerson{	/**	 * @var    string	 * @since  12.3	 */	public $email;	/**	 * @var    string	 * @since  12.3	 */	public $name;	/**	 * @var    string	 * @since  12.3	 */	public $type;	/**	 * @var    string	 * @since  12.3	 */	public $uri;	/**	 * Constructor.	 *	 * @param   string  $name   The full name of the person.	 * @param   string  $email  The email address of the person.	 * @param   string  $uri    The URI for the person.	 * @param   string  $type   The type of person.	 *	 * @since   12.3	 */	public function __construct($name = null, $email = null, $uri = null, $type = null)	{		$this->name = $name;		$this->email = $email;		$this->uri = $uri;		$this->type = $type;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.response');/** * Document class, provides an easy interface to parse and display a document * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocument{	/**	 * Document title	 *	 * @var    string	 * @since  11.1	 */	public $title = '';	/**	 * Document description	 *	 * @var    string	 * @since  11.1	 */	public $description = '';	/**	 * Document full URL	 *	 * @var    string	 * @since  11.1	 */	public $link = '';	/**	 * Document base URL	 *	 * @var    string	 * @since  11.1	 */	public $base = '';	/**	 * Contains the document language setting	 *	 * @var    string	 * @since  11.1	 */	public $language = 'en-gb';	/**	 * Contains the document direction setting	 *	 * @var    string	 * @since  11.1	 */	public $direction = 'ltr';	/**	 * Document generator	 *	 * @var    string	 */	public $_generator = 'Joomla! - Open Source Content Management';	/**	 * Document modified date	 *	 * @var    string	 * @since  11.1	 */	public $_mdate = '';	/**	 * Tab string	 *	 * @var    string	 * @since  11.1	 */	public $_tab = "\11";	/**	 * Contains the line end string	 *	 * @var    string	 * @since  11.1	 */	public $_lineEnd = "\12";	/**	 * Contains the character encoding string	 *	 * @var    string	 * @since  11.1	 */	public $_charset = 'utf-8';	/**	 * Document mime type	 *	 * @var    string	 * @since  11.1	 */	public $_mime = '';	/**	 * Document namespace	 *	 * @var    string	 * @since  11.1	 */	public $_namespace = '';	/**	 * Document profile	 *	 * @var    string	 * @since  11.1	 */	public $_profile = '';	/**	 * Array of linked scripts	 *	 * @var    array	 * @since  11.1	 */	public $_scripts = array();	/**	 * Array of scripts placed in the header	 *	 * @var    array	 * @since  11.1	 */	public $_script = array();	/**	 * Array of linked style sheets	 *	 * @var    array	 * @since  11.1	 */	public $_styleSheets = array();	/**	 * Array of included style declarations	 *	 * @var    array	 * @since  11.1	 */	public $_style = array();	/**	 * Array of meta tags	 *	 * @var    array	 * @since  11.1	 */	public $_metaTags = array();	/**	 * The rendering engine	 *	 * @var    object	 * @since  11.1	 */	public $_engine = null;	/**	 * The document type	 *	 * @var    string	 * @since  11.1	 */	public $_type = null;	/**	 * Array of buffered output	 *	 * @var    mixed (depends on the renderer)	 * @since  11.1	 */	public static $_buffer = null;	/**	 * @var    array  JDocument instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor.	 *	 * @param   array  $options  Associative array of options	 *	 * @since   11.1	 */	public function __construct($options = array())	{		if (array_key_exists('lineend', $options))		{			$this->setLineEnd($options['lineend']);		}		if (array_key_exists('charset', $options))		{			$this->setCharset($options['charset']);		}		if (array_key_exists('language', $options))		{			$this->setLanguage($options['language']);		}		if (array_key_exists('direction', $options))		{			$this->setDirection($options['direction']);		}		if (array_key_exists('tab', $options))		{			$this->setTab($options['tab']);		}		if (array_key_exists('link', $options))		{			$this->setLink($options['link']);		}		if (array_key_exists('base', $options))		{			$this->setBase($options['base']);		}	}	/**	 * Returns the global JDocument object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $type        The document type to instantiate	 * @param   array   $attributes  Array of attributes	 *	 * @return  object  The document object.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($type = 'html', $attributes = array())	{		$signature = serialize(array($type, $attributes));		if (empty(self::$instances[$signature]))		{			$type = preg_replace('/[^A-Z0-9_\.-]/i', '', $type);			$path = __DIR__ . '/' . $type . '/' . $type . '.php';			$ntype = null;			// Check if the document type exists			if (!file_exists($path))			{				// Default to the raw format				$ntype = $type;				$type = 'raw';			}			// Determine the path and class			$class = 'JDocument' . $type;			if (!class_exists($class))			{				$path = __DIR__ . '/' . $type . '/' . $type . '.php';				if (file_exists($path))				{					require_once $path;				}				else				{					throw new RuntimeException('Invalid JDocument Class', 500);				}			}			$instance = new $class($attributes);			self::$instances[$signature] = $instance;			if (!is_null($ntype))			{				// Set the type to the Document type originally requested				$instance->setType($ntype);			}		}		return self::$instances[$signature];	}	/**	 * Set the document type	 *	 * @param   string  $type  Type document is to set to	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setType($type)	{		$this->_type = $type;		return $this;	}	/**	 * Returns the document type	 *	 * @return  string	 *	 * @since   11.1	 */	public function getType()	{		return $this->_type;	}	/**	 * Get the contents of the document buffer	 *	 * @return  The contents of the document buffer	 *	 * @since   11.1	 */	public function getBuffer()	{		return self::$_buffer;	}	/**	 * Set the contents of the document buffer	 *	 * @param   string  $content  The content to be set in the buffer.	 * @param   array   $options  Array of optional elements.	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setBuffer($content, $options = array())	{		self::$_buffer = $content;		return $this;	}	/**	 * Gets a meta tag.	 *	 * @param   string   $name       Value of name or http-equiv tag	 * @param   boolean  $httpEquiv  META type "http-equiv" defaults to null	 *	 * @return  string	 *	 * @since   11.1	 */	public function getMetaData($name, $httpEquiv = false)	{		$result = '';		$name = strtolower($name);		if ($name == 'generator')		{			$result = $this->getGenerator();		}		elseif ($name == 'description')		{			$result = $this->getDescription();		}		else		{			if ($httpEquiv == true)			{				$result = @$this->_metaTags['http-equiv'][$name];			}			else			{				$result = @$this->_metaTags['standard'][$name];			}		}		return $result;	}	/**	 * Sets or alters a meta tag.	 *	 * @param   string   $name        Value of name or http-equiv tag	 * @param   string   $content     Value of the content tag	 * @param   boolean  $http_equiv  META type "http-equiv" defaults to null	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setMetaData($name, $content, $http_equiv = false)	{		$name = strtolower($name);		if ($name == 'generator')		{			$this->setGenerator($content);		}		elseif ($name == 'description')		{			$this->setDescription($content);		}		else		{			if ($http_equiv == true)			{				$this->_metaTags['http-equiv'][$name] = $content;			}			else			{				$this->_metaTags['standard'][$name] = $content;			}		}		return $this;	}	/**	 * Adds a linked script to the page	 *	 * @param   string   $url    URL to the linked script	 * @param   string   $type   Type of script. Defaults to 'text/javascript'	 * @param   boolean  $defer  Adds the defer attribute.	 * @param   boolean  $async  Adds the async attribute.	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addScript($url, $type = "text/javascript", $defer = false, $async = false)	{		$this->_scripts[$url]['mime'] = $type;		$this->_scripts[$url]['defer'] = $defer;		$this->_scripts[$url]['async'] = $async;		return $this;	}	/**	 * Adds a script to the page	 *	 * @param   string  $content  Script	 * @param   string  $type     Scripting mime (defaults to 'text/javascript')	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addScriptDeclaration($content, $type = 'text/javascript')	{		if (!isset($this->_script[strtolower($type)]))		{			$this->_script[strtolower($type)] = $content;		}		else		{			$this->_script[strtolower($type)] .= chr(13) . $content;		}		return $this;	}	/**	 * Adds a linked stylesheet to the page	 *	 * @param   string  $url      URL to the linked style sheet	 * @param   string  $type     Mime encoding type	 * @param   string  $media    Media type that this stylesheet applies to	 * @param   array   $attribs  Array of attributes	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addStyleSheet($url, $type = 'text/css', $media = null, $attribs = array())	{		$this->_styleSheets[$url]['mime'] = $type;		$this->_styleSheets[$url]['media'] = $media;		$this->_styleSheets[$url]['attribs'] = $attribs;		return $this;	}	/**	 * Adds a stylesheet declaration to the page	 *	 * @param   string  $content  Style declarations	 * @param   string  $type     Type of stylesheet (defaults to 'text/css')	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addStyleDeclaration($content, $type = 'text/css')	{		if (!isset($this->_style[strtolower($type)]))		{			$this->_style[strtolower($type)] = $content;		}		else		{			$this->_style[strtolower($type)] .= chr(13) . $content;		}		return $this;	}	/**	 * Sets the document charset	 *	 * @param   string  $type  Charset encoding string	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setCharset($type = 'utf-8')	{		$this->_charset = $type;		return $this;	}	/**	 * Returns the document charset encoding.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getCharset()	{		return $this->_charset;	}	/**	 * Sets the global document language declaration. Default is English (en-gb).	 *	 * @param   string  $lang  The language to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setLanguage($lang = "en-gb")	{		$this->language = strtolower($lang);		return $this;	}	/**	 * Returns the document language.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getLanguage()	{		return $this->language;	}	/**	 * Sets the global document direction declaration. Default is left-to-right (ltr).	 *	 * @param   string  $dir  The language direction to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setDirection($dir = "ltr")	{		$this->direction = strtolower($dir);		return $this;	}	/**	 * Returns the document direction declaration.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getDirection()	{		return $this->direction;	}	/**	 * Sets the title of the document	 *	 * @param   string  $title  The title to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setTitle($title)	{		$this->title = $title;		return $this;	}	/**	 * Return the title of the document.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getTitle()	{		return $this->title;	}	/**	 * Sets the base URI of the document	 *	 * @param   string  $base  The base URI to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setBase($base)	{		$this->base = $base;		return $this;	}	/**	 * Return the base URI of the document.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getBase()	{		return $this->base;	}	/**	 * Sets the description of the document	 *	 * @param   string  $description  The description to set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setDescription($description)	{		$this->description = $description;		return $this;	}	/**	 * Return the title of the page.	 *	 * @return  string	 *	 * @since    11.1	 */	public function getDescription()	{		return $this->description;	}	/**	 * Sets the document link	 *	 * @param   string  $url  A url	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setLink($url)	{		$this->link = $url;		return $this;	}	/**	 * Returns the document base url	 *	 * @return string	 *	 * @since   11.1	 */	public function getLink()	{		return $this->link;	}	/**	 * Sets the document generator	 *	 * @param   string  $generator  The generator to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setGenerator($generator)	{		$this->_generator = $generator;		return $this;	}	/**	 * Returns the document generator	 *	 * @return  string	 *	 * @since   11.1	 */	public function getGenerator()	{		return $this->_generator;	}	/**	 * Sets the document modified date	 *	 * @param   string  $date  The date to be set	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setModifiedDate($date)	{		$this->_mdate = $date;		return $this;	}	/**	 * Returns the document modified date	 *	 * @return  string	 *	 * @since   11.1	 */	public function getModifiedDate()	{		return $this->_mdate;	}	/**	 * Sets the document MIME encoding that is sent to the browser.	 *	 * This usually will be text/html because most browsers cannot yet	 * accept the proper mime settings for XHTML: application/xhtml+xml	 * and to a lesser extent application/xml and text/xml. See the W3C note	 * ({@link http://www.w3.org/TR/xhtml-media-types/	 * http://www.w3.org/TR/xhtml-media-types/}) for more details.	 *	 * @param   string   $type  The document type to be sent	 * @param   boolean  $sync  Should the type be synced with HTML?	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 *	 * @link    http://www.w3.org/TR/xhtml-media-types	 */	public function setMimeEncoding($type = 'text/html', $sync = true)	{		$this->_mime = strtolower($type);		// Syncing with meta-data		if ($sync)		{			$this->setMetaData('content-type', $type . '; charset=' . $this->_charset, true);		}		return $this;	}	/**	 * Return the document MIME encoding that is sent to the browser.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getMimeEncoding()	{		return $this->_mime;	}	/**	 * Sets the line end style to Windows, Mac, Unix or a custom string.	 *	 * @param   string  $style  "win", "mac", "unix" or custom string.	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setLineEnd($style)	{		switch ($style)		{			case 'win':				$this->_lineEnd = "\15\12";				break;			case 'unix':				$this->_lineEnd = "\12";				break;			case 'mac':				$this->_lineEnd = "\15";				break;			default:				$this->_lineEnd = $style;		}		return $this;	}	/**	 * Returns the lineEnd	 *	 * @return  string	 *	 * @since   11.1	 */	public function _getLineEnd()	{		return $this->_lineEnd;	}	/**	 * Sets the string used to indent HTML	 *	 * @param   string  $string  String used to indent ("\11", "\t", '  ', etc.).	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setTab($string)	{		$this->_tab = $string;		return $this;	}	/**	 * Returns a string containing the unit for indenting HTML	 *	 * @return  string	 *	 * @since   11.1	 */	public function _getTab()	{		return $this->_tab;	}	/**	 * Load a renderer	 *	 * @param   string  $type  The renderer type	 *	 * @return  JDocumentRenderer  Object or null if class does not exist	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRenderer($type)	{		$class = 'JDocumentRenderer' . $type;		if (!class_exists($class))		{			$path = __DIR__ . '/' . $this->_type . '/renderer/' . $type . '.php';			if (file_exists($path))			{				require_once $path;			}			else			{				throw new RuntimeException('Unable to load renderer class', 500);			}		}		if (!class_exists($class))		{			return null;		}		$instance = new $class($this);		return $instance;	}	/**	 * Parses the document and prepares the buffers	 *	 * @param   array  $params  The array of parameters	 *	 * @return  JDocument instance of $this to allow chaining	 *	 * @since   11.1	 */	public function parse($params = array())	{		return $this;	}	/**	 * Outputs the document	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   11.1	 */	public function render($cache = false, $params = array())	{		if ($mdate = $this->getModifiedDate())		{			JResponse::setHeader('Last-Modified', $mdate /* gmdate('D, d M Y H:i:s', time() + 900) . ' GMT' */);		}		JResponse::setHeader('Content-Type', $this->_mime . ($this->_charset ? '; charset=' . $this->_charset : ''));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$this->fieldsets = $this->form->getFieldsets('params');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'plugin.cancel' || document.formvalidator.isValid(document.id('style-form')))		{			Joomla.submitform(task, document.getElementById('style-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_plugins&layout=edit&extension_id='.(int) $this->item->extension_id); ?>" method="post" name="adminForm" id="style-form" class="form-validate form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('JDETAILS', true)); ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('name'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('name'); ?>						<span class="readonly plg-name"><?php echo JText::_($this->item->name);?></span>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('enabled'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('enabled'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('ordering'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('ordering'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('folder'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('folder'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('element'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('element'); ?>					</div>				</div>				<?php if ($this->item->extension_id) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('extension_id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('extension_id'); ?>						</div>					</div>				<?php endif; ?>				<!-- Plugin metadata -->				<?php if ($this->item->xml) : ?>					<?php if ($text = trim($this->item->xml->description)) : ?>						<div class="control-group">							<label id="jform_extdescription-lbl" class="control-label">								<?php echo JText::_('JGLOBAL_DESCRIPTION'); ?>							</label>							<div class="controls disabled">								<?php echo JText::_($text); ?>							</div>						</div>					<?php endif; ?>				<?php else : ?>					<div class="alert alert-error">						<?php echo JText::_('COM_PLUGINS_XML_ERR'); ?>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo $this->loadTemplate('options'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'menu.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><div class="menu-edit"><form action="<?php echo JRoute::_('index.php?option=com_menus&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form"><div class="col main-section">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_MENUS_MENU_DETAILS');?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<li><?php echo $this->form->getLabel('menutype'); ?>				<?php echo $this->form->getInput('menutype'); ?></li>				<li><?php echo $this->form->getLabel('description'); ?>				<?php echo $this->form->getInput('description'); ?></li>			</ul>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?>	</div></form><div class="clr"></div></div>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_weblinks component * * @return  array  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. */function WeblinksBuildRoute(&$query){	$segments = array();	// get a menu item based on Itemid or currently active	$app = JFactory::getApplication();	$menu = $app->getMenu();	$params = JComponentHelper::getParams('com_weblinks');	$advanced = $params->get('sef_advanced_link', 0);	// we need a menu item.  Either the one specified in the query, or the current active one if none specified	if (empty($query['Itemid']))	{		$menuItem = $menu->getActive();	}	else	{		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mId = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (isset($query['view']))	{		$view = $query['view'];		if (empty($query['Itemid']) || empty($menuItem) || $menuItem->component != 'com_weblinks')		{			$segments[] = $query['view'];		}		// We need to keep the view for forms since they never have their own menu item		if ($view != 'form')		{			unset($query['view']);		}	}	// are we dealing with an weblink that is attached to a menu item?	if (isset($query['view']) && ($mView == $query['view']) and (isset($query['id'])) and ($mId == (int) $query['id']))	{		unset($query['view']);		unset($query['catid']);		unset($query['id']);		return $segments;	}	if (isset($view) and ($view == 'category' or $view == 'weblink'))	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'weblink' && isset($query['catid']))			{				$catid = $query['catid'];			}			elseif (isset($query['id']))			{				$catid = $query['id'];			}			$menuCatid = $mId;			$categories = JCategories::getInstance('Weblinks');			$category = $categories->get($catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$path = $category->getPath();				$path = array_reverse($path);				$array = array();				foreach ($path as $id)				{					if ((int) $id == (int) $menuCatid)					{						break;					}					if ($advanced)					{						list($tmp, $id) = explode(':', $id, 2);					}					$array[] = $id;				}				$segments = array_merge($segments, array_reverse($array));			}			if ($view == 'weblink')			{				if ($advanced)				{					list($tmp, $id) = explode(':', $query['id'], 2);				}				else				{					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);		unset($query['catid']);	}	if (isset($query['layout']))	{		if (!empty($query['Itemid']) && isset($menuItem->query['layout']))		{			if ($query['layout'] == $menuItem->query['layout'])			{				unset($query['layout']);			}		}		else		{			if ($query['layout'] == 'default')			{				unset($query['layout']);			}		}	}	return $segments;}/** * Parse the segments of a URL. * * @return  array  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. */function WeblinksParseRoute($segments){	$vars = array();	//Get the active menu item.	$app = JFactory::getApplication();	$menu = $app->getMenu();	$item = $menu->getActive();	$params = JComponentHelper::getParams('com_weblinks');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for weblinks.	if (!isset($item))	{		$vars['view'] = $segments[0];		$vars['id'] = $segments[$count - 1];		return $vars;	}	// From the categories view, we can only jump to a category.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$category = JCategories::getInstance('Weblinks')->get($id);	$categories = $category->getChildren();	$found = 0;	foreach ($segments as $segment)	{		foreach ($categories as $category)		{			if (($category->slug == $segment) || ($advanced && $category->alias == str_replace(':', '-', $segment)))			{				$vars['id'] = $category->id;				$vars['view'] = 'category';				$categories = $category->getChildren();				$found = 1;				break;			}		}		if ($found == 0)		{			if ($advanced)			{				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('id'))					->from('#__weblinks')					->where($db->quoteName('catid') . ' = ' . (int) $vars['catid'])					->where($db->quoteName('alias') . ' = ' . $db->quote($db->quote(str_replace(':', '-', $segment))));				$db->setQuery($query);				$id = $db->loadResult();			}			else			{				$id = $segment;			}			$vars['id'] = $id;			$vars['view'] = 'weblink';			break;		}		$found = 0;	}	return $vars;}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the WebLinks component * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblink extends JViewLegacy{	protected $state;	protected $item;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$item		= $this->get('Item');		$category	= $this->get('Category');		if ($this->getLayout() == 'edit')		{			$this->_displayEdit($tpl);			return;		}		if ($item->url)		{			// redirects to url if matching id found			$app->redirect($item->url);		}		else		{			//TODO create proper error handling			$app->redirect(JRoute::_('index.php'), JText::_('COM_WEBLINKS_ERROR_WEBLINK_NOT_FOUND'), 'notice');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Manage View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewDiscover extends InstallerViewDefault{	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		// Get data from the model		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= InstallerHelper::getActions();		/*		 * Set toolbar items for the page		 */		JToolbarHelper::custom('discover.install', 'upload', 'upload', 'JTOOLBAR_INSTALL', true, false);		JToolbarHelper::custom('discover.refresh', 'refresh', 'refresh', 'COM_INSTALLER_TOOLBAR_DISCOVER', false, false);		JToolbarHelper::divider();		parent::addToolbar();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_DISCOVER');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Message configuration model. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesModelConfig extends JModelForm{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app	= JFactory::getApplication('administrator');		$user	= JFactory::getUser();		$this->setState('user.id', $user->get('id'));		// Load the parameters.		$params	= JComponentHelper::getParams('com_messages');		$this->setState('params', $params);	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function &getItem()	{		$item = new JObject;		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('cfg_name, cfg_value')			->from('#__messages_cfg')			->where('user_id = '.(int) $this->getState('user.id'));		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		foreach ($rows as $row)		{			$item->set($row->cfg_name, $row->cfg_value);		}		$this->preprocessData('com_messages.config', $item);		return $item;	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_messages.config', 'config', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 */	public function save($data)	{		$db = $this->getDbo();		if ($userId = (int) $this->getState('user.id'))		{			$db->setQuery(				'DELETE FROM #__messages_cfg'.				' WHERE user_id = '. $userId			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}			$tuples = array();			foreach ($data as $k => $v)			{				$tuples[] = '(' . $userId.', ' . $db->quote($k) . ', ' . $db->quote($v) . ')';			}			if ($tuples)			{				$db->setQuery(					'INSERT INTO #__messages_cfg'.					' (user_id, cfg_name, cfg_value)'.					' VALUES '.implode(',', $tuples)				);				try				{				$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}			return true;		}		else		{			$this->setError('COM_MESSAGES_ERR_INVALID_USER');			return false;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for Bootstrap elements. * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlBootstrap{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Add javascript support for Bootstrap alerts	 *	 * @param   string  $selector  Common class for the alerts	 *	 * @return  void	 *	 * @since   3.0	 */	public static function alert($selector = 'alert')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include Bootstrap framework		self::framework();		// Attach the alerts to the document		JFactory::getDocument()->addScriptDeclaration(			"(function($){				$('.$selector').alert();				})(jQuery);"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Add javascript support for Bootstrap carousels	 *	 * @param   string  $selector  Common class for the carousels.	 * @param   array   $params    An array of options for the modal.	 *                             Options for the modal can be:	 *                             - interval  number  The amount of time to delay between automatically cycling an item.	 *                                                 If false, carousel will not automatically cycle.	 *                             - pause     string  Pauses the cycling of the carousel on mouseenter and resumes the cycling	 *                                                 of the carousel on mouseleave.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function carousel($selector = 'carousel', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['interval'] = (isset($params['interval']) && ($params['interval'])) ? (int) $params['interval'] : 5000;			$opt['pause'] = (isset($params['pause']) && ($params['pause'])) ? $params['pause'] : 'hover';			$options = JHtml::getJSObject($opt);			// Attach the carousel to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('.$selector').carousel($options);					})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;		}		return;	}	/**	 * Add javascript support for Bootstrap dropdowns	 *	 * @param   string  $selector  Common class for the dropdowns	 *	 * @return  void	 *	 * @since   3.0	 */	public static function dropdown($selector = 'dropdown-toggle')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include Bootstrap framework		self::framework();		// Attach the dropdown to the document		JFactory::getDocument()->addScriptDeclaration(			"(function($){				$('.$selector').dropdown();				})(jQuery);"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Method to load the Bootstrap JavaScript framework into the document head	 *	 * If debugging mode is on an uncompressed version of Bootstrap is included for easier debugging.	 *	 * @param   mixed  $debug  Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function framework($debug = null)	{		// Only load once		if (!empty(self::$loaded[__METHOD__]))		{			return;		}		// Load jQuery		JHtml::_('jquery.framework');		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug = (boolean) $config->get('debug');		}		JHtml::_('script', 'jui/bootstrap.min.js', false, true, false, false, $debug);		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Add javascript support for Bootstrap modals	 *	 * @param   string  $selector  The ID selector for the modal.	 * @param   array   $params    An array of options for the modal.	 *                             Options for the modal can be:	 *                             - backdrop  boolean  Includes a modal-backdrop element.	 *                             - keyboard  boolean  Closes the modal when escape key is pressed.	 *                             - show      boolean  Shows the modal when initialized.	 *                             - remote    string   An optional remote URL to load	 *	 * @return  void	 *	 * @since   3.0	 */	public static function modal($selector = 'modal', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['backdrop'] = (isset($params['backdrop']) && ($params['backdrop'])) ? (boolean) $params['backdrop'] : true;			$opt['keyboard'] = (isset($params['keyboard']) && ($params['keyboard'])) ? (boolean) $params['keyboard'] : true;			$opt['show'] = (isset($params['show']) && ($params['show'])) ? (boolean) $params['show'] : true;			$opt['remote'] = (isset($params['remote']) && ($params['remote'])) ? (boolean) $params['remote'] : '';			$options = JHtml::getJSObject($opt);			// Attach the modal to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('#$selector').modal($options);					})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;		}		return;	}	/**	 * Method to render a Bootstrap modal	 *	 * @param   string  $selector  The ID selector for the modal.	 * @param   array   $params    An array of options for the modal.	 * @param   string  $footer    Optional markup for the modal footer	 *	 * @return  string  HTML markup for a modal	 *	 * @since   3.0	 */	public static function renderModal($selector = 'modal', $params = array(), $footer = '')	{		// Ensure the behavior is loaded		self::modal($selector, $params);		$html = "<div class=\"modal hide fade\" id=\"" . $selector . "\">\n";		$html .= "<div class=\"modal-header\">\n";		$html .= "<button type=\"button\" class=\"close\" data-dismiss=\"modal\"></button>\n";		$html .= "<h3>" . $params['title'] . "</h3>\n";		$html .= "</div>\n";		$html .= "<div id=\"" . $selector . "-container\">\n";		$html .= "</div>\n";		$html .= "</div>\n";		$html .= "<script>";		$html .= "jQuery('#" . $selector . "').on('show', function () {\n";		$html .= "document.getElementById('" . $selector . "-container').innerHTML = '<div class=\"modal-body\"><iframe class=\"iframe\" src=\""			. $params['url'] . "\" height=\"" . $params['height'] . "\" width=\"" . $params['width'] . "\"></iframe></div>" . $footer . "';\n";		$html .= "});\n";		$html .= "</script>";		return $html;	}	/**	 * Add javascript support for Bootstrap popovers	 *	 * Use element's Title as popover content	 *	 * @param   string  $selector  Selector for the tooltip	 * @param   array   $params    An array of options for the tooltip.	 *                  Options for the tooltip can be:	 *                      animation  boolean          apply a css fade transition to the tooltip	 *                      html       boolean          Insert HTML into the tooltip. If false, jQuery's text method will be used to insert	 *                                                  content into the dom.	 *                      placement  string|function  how to position the tooltip - top | bottom | left | right	 *                      selector   string           If a selector is provided, tooltip objects will be delegated to the specified targets.	 *                      title      string|function  default title value if `title` tag isn't present	 *                      trigger    string           how tooltip is triggered - hover | focus | manual	 *                      content    string|function  default content value if `data-content` attribute isn't present	 *                      delay      number|object    delay showing and hiding the tooltip (ms) - does not apply to manual trigger type	 *                                                  If a number is supplied, delay is applied to both hide/show	 *                                                  Object structure is: delay: { show: 500, hide: 100 }	 *	 * @return  void	 *	 * @since   3.0	 */	public static function popover($selector = '.hasPopover', $params = array())	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include Bootstrap framework		self::framework();		$opt['animation'] = isset($params['animation']) ? $params['animation'] : null;		$opt['html'] = isset($params['html']) ? $params['html'] : null;		$opt['placement'] = isset($params['placement']) ? $params['placement'] : null;		$opt['selector'] = isset($params['selector']) ? $params['selector'] : null;		$opt['title'] = isset($params['title']) ? $params['title'] : null;		$opt['trigger'] = isset($params['trigger']) ? $params['trigger'] : 'hover';		$opt['content'] = isset($params['content']) ? $params['content'] : null;		$opt['delay'] = isset($params['delay']) ? $params['delay'] : null;		$options = JHtml::getJSObject($opt);		// Attach the popover to the document		JFactory::getDocument()->addScriptDeclaration(			"jQuery(document).ready(function()			{				jQuery('" . $selector . "').popover(" . $options . ");			});"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Add javascript support for Bootstrap ScrollSpy	 *	 * @param   string  $selector  The ID selector for the ScrollSpy element.	 * @param   array   $params    An array of options for the ScrollSpy.	 *                             Options for the modal can be:	 *                             - offset  number  Pixels to offset from top when calculating position of scroll.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function scrollspy($selector = 'navbar', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['offset'] = (isset($params['offset']) && ($params['offset'])) ? (int) $params['offset'] : 10;			$options = JHtml::getJSObject($opt);			// Attach ScrollSpy to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('#$selector').scrollspy($options);					})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;		}		return;	}	/**	 * Add javascript support for Bootstrap tooltips	 *	 * Add a title attribute to any element in the form	 * title="title::text"	 *	 * @param   string  $selector  The ID selector for the tooltip.	 * @param   array   $params    An array of options for the tooltip.	 *                             Options for the tooltip can be:	 *                             - animation  boolean          Apply a CSS fade transition to the tooltip	 *                             - html       boolean          Insert HTML into the tooltip. If false, jQuery's text method will be used to insert	 *                                                           content into the dom.	 *                             - placement  string|function  How to position the tooltip - top | bottom | left | right	 *                             - selector   string           If a selector is provided, tooltip objects will be delegated to the specified targets.	 *                             - title      string|function  Default title value if `title` tag isn't present	 *                             - trigger    string           How tooltip is triggered - hover | focus | manual	 *                             - delay      number           Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type	 *                                                           If a number is supplied, delay is applied to both hide/show	 *                                                           Object structure is: delay: { show: 500, hide: 100 }	 *	 * @return  void	 *	 * @since   3.0	 */	public static function tooltip($selector = '.hasTooltip', $params = array())	{		if (!isset(self::$loaded[__METHOD__][$selector]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['animation'] = (isset($params['animation']) && ($params['animation'])) ? (boolean) $params['animation'] : null;			$opt['html'] = (isset($params['html']) && ($params['html'])) ? (boolean) $params['html'] : null;			$opt['placement'] = (isset($params['placement']) && ($params['placement'])) ? (string) $params['placement'] : null;			$opt['selector'] = (isset($params['selector']) && ($params['selector'])) ? (string) $params['selector'] : null;			$opt['title'] = (isset($params['title']) && ($params['title'])) ? (string) $params['title'] : null;			$opt['trigger'] = (isset($params['trigger']) && ($params['trigger'])) ? (string) $params['trigger'] : null;			$opt['delay'] = (isset($params['delay']) && ($params['delay'])) ? (int) $params['delay'] : null;			$options = JHtml::getJSObject($opt);			// Attach tooltips to document			JFactory::getDocument()->addScriptDeclaration(				"jQuery(document).ready(function()				{					jQuery('" . $selector . "').tooltip(" . $options . ");				});"			);			// Set static array			self::$loaded[__METHOD__][$selector] = true;		}		return;	}	/**	 * Add javascript support for Bootstrap accordians and insert the accordian	 *	 * @param   string  $selector  The ID selector for the tooltip.	 * @param   array   $params    An array of options for the tooltip.	 *                             Options for the tooltip can be:	 *                             - parent  selector  If selector then all collapsible elements under the specified parent will be closed when this	 *                                                 collapsible item is shown. (similar to traditional accordion behavior)	 *                             - toggle  boolean   Toggles the collapsible element on invocation	 *                             - active  string    Sets the active slide during load	 *	 * @return  string  HTML for the accordian	 *	 * @since   3.0	 */	public static function startAccordion($selector = 'myAccordian', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['parent'] = (isset($params['parent']) && ($params['parent'])) ? (boolean) $params['parent'] : false;			$opt['toggle'] = (isset($params['toggle']) && ($params['toggle'])) ? (boolean) $params['toggle'] : true;			$opt['active'] = (isset($params['active']) && ($params['active'])) ? (string) $params['active'] : '';			$options = JHtml::getJSObject($opt);			// Attach accordion to document			JFactory::getDocument()->addScriptDeclaration(				"(function($){					$('#$selector').collapse($options);				})(jQuery);"			);			// Set static array			self::$loaded[__METHOD__][$sig] = true;			self::$loaded[__METHOD__]['active'] = $opt['active'];		}		return '<div id="' . $selector . '" class="accordion">';	}	/**	 * Close the current accordion	 *	 * @return  string  HTML to close the accordian	 *	 * @since   3.0	 */	public static function endAccordion()	{		return '</div>';	}	/**	 * Begins the display of a new accordion slide.	 *	 * @param   string  $selector  Identifier of the accordion group.	 * @param   string  $text      Text to display.	 * @param   string  $id        Identifier of the slide.	 * @param   string  $class     Class of the accordion group.	 *	 * @return  string  HTML to add the slide	 *	 * @since   3.0	 */	public static function addSlide($selector, $text, $id, $class = '')	{		$in = (self::$loaded['JHtmlBootstrap::startAccordion']['active'] == $id) ? ' in' : '';		$class = (!empty($class)) ? ' ' . $class : '';		$html = '<div class="accordion-group' . $class . '">'			. '<div class="accordion-heading">'			. '<strong><a href="#' . $id . '" data-parent="#' . $selector . '" data-toggle="collapse" class="accordion-toggle">'			. $text			. '</a></strong>'			. '</div>'			. '<div class="accordion-body collapse' . $in . '" id="' . $id . '">'			. '<div class="accordion-inner">';		return $html;	}	/**	 * Close the current slide	 *	 * @return  string  HTML to close the slide	 *	 * @since   3.0	 */	public static function endSlide()	{		return '</div></div></div>';	}	/**	 * Creates a tab pane	 *	 * @param   string  $selector  The pane identifier.	 * @param   array   $params    The parameters for the pane	 *	 * @return  string	 *	 * @since   3.1	 */	public static function startTabSet($selector = 'myTab', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded[__METHOD__][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['active'] = (isset($params['active']) && ($params['active'])) ? (string) $params['active'] : '';			$options = JHtml::getJSObject($opt);			// Attach tabs to document			JFactory::getDocument()				->addScriptDeclaration(JLayoutHelper::render('libraries.cms.html.bootstrap.starttabsetscript', array('selector' => $selector)));			// Set static array			self::$loaded[__METHOD__][$sig] = true;			self::$loaded[__METHOD__][$selector]['active'] = $opt['active'];		}		$html = JLayoutHelper::render('libraries.cms.html.bootstrap.starttabset', array('selector' => $selector));		return $html;	}	/**	 * Close the current tab pane	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.1	 */	public static function endTabSet()	{		$html = JLayoutHelper::render('libraries.cms.html.bootstrap.endtabset');		return $html;	}	/**	 * Begins the display of a new tab content panel.	 *	 * @param   string  $selector  Identifier of the panel.	 * @param   string  $id        The ID of the div element	 * @param   string  $title     The title text for the new UL tab	 *	 * @return  string  HTML to start a new panel	 *	 * @since   3.1	 */	public static function addTab($selector, $id, $title)	{		static $tabScriptLayout = null;		static $tabLayout = null;		$tabScriptLayout = is_null($tabScriptLayout) ? new JLayoutFile('libraries.cms.html.bootstrap.addtabscript') : $tabScriptLayout;		$tabLayout = is_null($tabLayout) ? new JLayoutFile('libraries.cms.html.bootstrap.addtab') : $tabLayout;		$active = (self::$loaded['JHtmlBootstrap::startTabSet'][$selector]['active'] == $id) ? ' active' : '';		// Inject tab into UL		JFactory::getDocument()		->addScriptDeclaration($tabScriptLayout->render(array('selector' => $selector,'id' => $id, 'active' => $active, 'title' => $title)));		$html = $tabLayout->render(array('id' => $id, 'active' => $active));		return $html;	}	/**	 * Close the current tab content panel	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.1	 */	public static function endTab()	{		$html = JLayoutHelper::render('libraries.cms.html.bootstrap.endtab');		return $html;	}	/**	 * Creates a tab pane	 *	 * @param   string  $selector  The pane identifier.	 * @param   array   $params    The parameters for the pane	 *	 * @return  string	 *	 * @since   3.0	 * @deprecated  4.0	Use JHtml::_('bootstrap.startTabSet') instead.	 */	public static function startPane($selector = 'myTab', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (!isset(self::$loaded['JHtmlBootstrap::startTabSet'][$sig]))		{			// Include Bootstrap framework			self::framework();			// Setup options object			$opt['active'] = (isset($params['active']) && ($params['active'])) ? (string) $params['active'] : '';			$options = JHtml::getJSObject($opt);			// Attach tooltips to document			JFactory::getDocument()				->addScriptDeclaration(					"(function($){			$('#$selector a').click(function (e)			{			e.preventDefault();			$(this).tab('show');		});		})(jQuery);");			// Set static array			self::$loaded['JHtmlBootstrap::startTabSet'][$sig] = true;			self::$loaded['JHtmlBootstrap::startTabSet'][$selector]['active'] = $opt['active'];		}		return '<div class="tab-content" id="' . $selector . 'Content">';	}	/**	 * Close the current tab pane	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.0	 * @deprecated  4.0	Use JHtml::_('bootstrap.endTabSet') instead.	 */	public static function endPane()	{		return '</div>';	}	/**	 * Begins the display of a new tab content panel.	 *	 * @param   string  $selector  Identifier of the panel.	 * @param   string  $id        The ID of the div element	 *	 * @return  string  HTML to start a new panel	 *	 * @since   3.0	 * @deprecated  4.0 Use JHtml::_('bootstrap.addTab') instead.	 */	public static function addPanel($selector, $id)	{		$active = (self::$loaded['JHtmlBootstrap::startTabSet'][$selector]['active'] == $id) ? ' active' : '';		return '<div id="' . $id . '" class="tab-pane' . $active . '">';	}	/**	 * Close the current tab content panel	 *	 * @return  string  HTML to close the pane	 *	 * @since   3.0	 * @deprecated  4.0 Use JHtml::_('bootstrap.endTab') instead.	 */	public static function endPanel()	{		return '</div>';	}	/**	 * Loads CSS files needed by Bootstrap	 *	 * @param   boolean  $includeMainCss  If true, main bootstrap.css files are loaded	 * @param   string   $direction       rtl or ltr direction. If empty, ltr is assumed	 * @param   array    $attribs         Optional array of attributes to be passed to JHtml::_('stylesheet')	 *	 * @return  void	 *	 * @since   3.0	 */	public static function loadCss($includeMainCss = true, $direction = 'ltr', $attribs = array())	{		// Load Bootstrap main CSS		if ($includeMainCss)		{			JHtml::_('stylesheet', 'jui/bootstrap.min.css', $attribs, true);			JHtml::_('stylesheet', 'jui/bootstrap-responsive.min.css', $attribs, true);			JHtml::_('stylesheet', 'jui/bootstrap-extended.css', $attribs, true);		}		// Load Bootstrap RTL CSS		if ($direction === 'rtl')		{			JHtml::_('stylesheet', 'jui/bootstrap-rtl.css', $attribs, true);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto * @since       1.5 */class MailtoViewMailto extends JViewLegacy{	/**	 * @since  1.5	 */	public function display($tpl = null)	{		$data = $this->getData();		if ($data === false)		{			return false;		}		$this->set('data', $data);		parent::display($tpl);	}	/**	 * @since  1.5	 */	function &getData()	{		$user = JFactory::getUser();		$app  = JFactory::getApplication();		$data = new stdClass;		$data->link = urldecode(JRequest::getVar('link', '', 'method', 'base64'));		if ($data->link == '')		{			JError::raiseError(403, JText::_('COM_MAILTO_LINK_IS_MISSING'));			$false = false;			return $false;		}		// Load with previous data, if it exists		$mailto  = $app->input->post->getString('mailto', '');		$sender  = $app->input->post->getString('sender', '');		$from    = $app->input->post->getString('from', '');		$subject = $app->input->post->getString('subject', '');		if ($user->get('id') > 0)		{			$data->sender = $user->get('name');			$data->from   = $user->get('email');		}		else		{			$data->sender = $sender;			$data->from   = $from;		}		$data->subject = $subject;		$data->mailto  = $mailto;		return $data;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Contacts * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Contacts. * * @package     Joomla.Plugin * @subpackage  Finder.Contacts * @since       2.5 */class PlgFinderContacts extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Contacts';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_contact';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'contact';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'Contact';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__contact_details';	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'published';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to update the item link information when the item category is	 * changed. This is fired when the item category is published or unpublished	 * from the list view.	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderCategoryChangeState($extension, $pks, $value)	{		// Make sure we're handling com_contact categories		if ($extension == 'com_contact')		{			$this->categoryStateChange($pks, $value);		}	}	/**	 * Method to remove the link information for items that have been deleted.	 *	 * This event will fire when contacts are deleted and when an indexed item is deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_contact.contact')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle contacts here		if ($context == 'com_contact.contact')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		// Check for access changes in the category		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle contacts here		if ($context == 'com_contact.contact')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		// Check for access levels from the category		if ($context == 'com_categories.category')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle contacts here		if ($context == 'com_contact.contact')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = $registry;		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = ContactHelperRoute::getContactRoute($item->slug, $item->catslug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		/*		 * Add the meta-data processing instructions based on the contact		 * configuration parameters.		 */		// Handle the contact position.		if ($item->params->get('show_position', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'position');		}		// Handle the contact street address.		if ($item->params->get('show_street_address', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'address');		}		// Handle the contact city.		if ($item->params->get('show_suburb', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'city');		}		// Handle the contact region.		if ($item->params->get('show_state', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'region');		}		// Handle the contact country.		if ($item->params->get('show_country', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'country');		}		// Handle the contact zip code.		if ($item->params->get('show_postcode', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'zip');		}		// Handle the contact telephone number.		if ($item->params->get('show_telephone', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'telephone');		}		// Handle the contact fax number.		if ($item->params->get('show_fax', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'fax');		}		// Handle the contact e-mail address.		if ($item->params->get('show_email', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'email');		}		// Handle the contact mobile number.		if ($item->params->get('show_mobile', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'mobile');		}		// Handle the contact webpage.		if ($item->params->get('show_webpage', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'webpage');		}		// Handle the contact user name.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'user');		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Contact');		// Add the category taxonomy data.		$item->addTaxonomy('Category', $item->category, $item->cat_state, $item->cat_access);		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Add the region taxonomy data.		if (!empty($item->region) && $this->params->get('tax_add_region', true))		{			$item->addTaxonomy('Region', $item->region);		}		// Add the country taxonomy data.		if (!empty($item->country) && $this->params->get('tax_add_country', true))		{			$item->addTaxonomy('Country', $item->country);		}		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load dependent classes.		require_once JPATH_SITE . '/components/com_contact/helpers/route.php';		// This is a hack to get around the lack of a route helper.		FinderIndexerHelper::getContentPath('index.php?option=com_contact');		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.name AS title, a.alias, a.con_position AS position, a.address, a.created AS start_date')			->select('a.created_by_alias, a.modified, a.modified_by')			->select('a.metakey, a.metadesc, a.metadata, a.language')			->select('a.sortname1, a.sortname2, a.sortname3')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('a.suburb AS city, a.state AS region, a.country, a.postcode AS zip')			->select('a.telephone, a.fax, a.misc AS summary, a.email_to AS email, a.mobile')			->select('a.webpage, a.access, a.published AS state, a.ordering, a.params, a.catid')			->select('c.title AS category, c.published AS cat_state, c.access AS cat_access');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias);		$case_when_category_alias = ' CASE WHEN ';		$case_when_category_alias .= $query->charLength('c.alias', '!=', '0');		$case_when_category_alias .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when_category_alias .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when_category_alias .= ' ELSE ';		$case_when_category_alias .= $c_id.' END as catslug';		$query->select($case_when_category_alias)			->select('u.name')			->from('#__contact_details AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid')			->join('LEFT', '#__users AS u ON u.id = a.user_id');		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Database Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5 */class InstallerControllerDatabase extends JControllerLegacy{	/**	 * Tries to fix missing database updates	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		$model = $this->getModel('database');		$model->fix();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=database', false));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Base this model on the backend version.require_once JPATH_ADMINISTRATOR.'/components/com_content/models/article.php';/** * Content Component Article Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelForm extends ContentModelArticle{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication();		// Load state from the request.		$pk = $app->input->getInt('a_id');		$this->setState('article.id', $pk);		$this->setState('article.catid', $app->input->getInt('catid'));		$return = $app->input->get('return', null, 'base64');		$this->setState('return_page', base64_decode($return));		// Load the parameters.		$params	= $app->getParams();		$this->setState('params', $params);		$this->setState('layout', $app->input->get('layout'));	}	/**	 * Method to get article data.	 *	 * @param   integer	The id of the article.	 *	 * @return  mixed  Content item data object on success, false on failure.	 */	public function getItem($itemId = null)	{		$itemId = (int) (!empty($itemId)) ? $itemId : $this->getState('article.id');		// Get a row instance.		$table = $this->getTable();		// Attempt to load the row.		$return = $table->load($itemId);		// Check for a table object error.		if ($return === false && $table->getError())		{			$this->setError($table->getError());			return false;		}		$properties = $table->getProperties(1);		$value = JArrayHelper::toObject($properties, 'JObject');		// Convert attrib field to Registry.		$value->params = new JRegistry;		$value->params->loadString($value->attribs);		// Compute selected asset permissions.		$user	= JFactory::getUser();		$userId	= $user->get('id');		$asset	= 'com_content.article.'. $value->id;		// Check general edit permission first.		if ($user->authorise('core.edit', $asset))		{			$value->params->set('access-edit', true);		}		// Now check if edit.own is available.		elseif (!empty($userId) && $user->authorise('core.edit.own', $asset))		{			// Check for a valid user and that they are the owner.			if ($userId == $value->created_by)			{				$value->params->set('access-edit', true);			}		}		// Check edit state permission.		if ($itemId)		{			// Existing item			$value->params->set('access-change', $user->authorise('core.edit.state', $asset));		}		else		{			// New item.			$catId = (int) $this->getState('article.catid');			if ($catId)			{				$value->params->set('access-change', $user->authorise('core.edit.state', 'com_content.category.'.$catId));				$value->catid = $catId;			}			else			{				$value->params->set('access-change', $user->authorise('core.edit.state', 'com_content'));			}		}		$value->articletext = $value->introtext;		if (!empty($value->fulltext))		{			$value->articletext .= '<hr id="system-readmore" />'.$value->fulltext;		}		// Convert the metadata field to an array.		$registry = new JRegistry;		$registry->loadString($value->metadata);		$value->metadata = $registry->toArray();		if ($itemId)		{			$value->tags = new JHelperTags;			$value->tags->getTagIds($value->id, 'com_content.article');			$value->metadata['tags'] = $value->tags;		}		return $value;	}	/**	 * Get the return URL.	 *	 * @return  string	The return URL.	 * @since   1.6	 */	public function getReturnPage()	{		return base64_encode($this->getState('return_page'));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Supports an custom SQL select list * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldSQL extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'SQL';	/**	 * Method to get the custom field options.	 * Use the query attribute to supply a query to generate the list.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Initialize some field attributes.		$key = $this->element['key_field'] ? (string) $this->element['key_field'] : 'value';		$value = $this->element['value_field'] ? (string) $this->element['value_field'] : (string) $this->element['name'];		$translate = $this->element['translate'] ? (string) $this->element['translate'] : false;		$query = (string) $this->element['query'];		// Get the database object.		$db = JFactory::getDbo();		// Set the query and get the result list.		$db->setQuery($query);		$items = $db->loadObjectlist();		// Build the field options.		if (!empty($items))		{			foreach ($items as $item)			{				if ($translate == true)				{					$options[] = JHtml::_('select.option', $item->$key, JText::_($item->$value));				}				else				{					$options[] = JHtml::_('select.option', $item->$key, $item->$value);				}			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Administrator Application helper class. * Provide many supporting API functions. * * @package     Joomla.Administrator * @subpackage  Application * @since       1.5 */class JAdministratorHelper{	/**	 * Return the application option string [main component].	 *	 * @return  string  The component to access.	 *	 * @since   1.5	 */	public static function findOption()	{		$app = JFactory::getApplication();		$option = strtolower($app->input->get('option'));		$app->loadIdentity();		$user = $app->getIdentity();		if ($user->get('guest') || !$user->authorise('core.login.admin'))		{			$option = 'com_login';		}		if (empty($option))		{			$option = 'com_cpanel';		}		$app->input->set('option', $option);		return $option;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.utilities.arrayhelper');/** * JRegistry class * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistry implements JsonSerializable{	/**	 * Registry Object	 *	 * @var    object	 * @since  11.1	 */	protected $data;	/**	 * @var    array  JRegistry instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   mixed  $data  The data to bind to the new JRegistry object.	 *	 * @since   11.1	 */	public function __construct($data = null)	{		// Instantiate the internal data object.		$this->data = new stdClass;		// Optionally load supplied data.		if (is_array($data) || is_object($data))		{			$this->bindData($this->data, $data);		}		elseif (!empty($data) && is_string($data))		{			$this->loadString($data);		}	}	/**	 * Magic function to clone the registry object.	 *	 * @return  JRegistry	 *	 * @since   11.1	 */	public function __clone()	{		$this->data = unserialize(serialize($this->data));	}	/**	 * Magic function to render this object as a string using default args of toString method.	 *	 * @return  string	 *	 * @since   11.1	 */	public function __toString()	{		return $this->toString();	}	/**	 * Implementation for the JsonSerializable interface.	 * Allows us to pass JRegistry objects to json_encode.	 *	 * @return  object	 *	 * @since   12.2	 * @note    The interface is only present in PHP 5.4 and up.	 */	public function jsonSerialize()	{		return $this->data;	}	/**	 * Sets a default value if not already assigned.	 *	 * @param   string  $key      The name of the parameter.	 * @param   string  $default  An optional value for the parameter.	 *	 * @return  string  The value set, or the default if the value was not previously set (or null).	 *	 * @since   11.1	 */	public function def($key, $default = '')	{		$value = $this->get($key, (string) $default);		$this->set($key, $value);		return $value;	}	/**	 * Check if a registry path exists.	 *	 * @param   string  $path  Registry path (e.g. joomla.content.showauthor)	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function exists($path)	{		// Explode the registry path into an array		if ($nodes = explode('.', $path))		{			// Initialize the current node to be the registry root.			$node = $this->data;			// Traverse the registry to find the correct node for the result.			for ($i = 0, $n = count($nodes); $i < $n; $i++)			{				if (isset($node->$nodes[$i]))				{					$node = $node->$nodes[$i];				}				else				{					break;				}				if ($i + 1 == $n)				{					return true;				}			}		}		return false;	}	/**	 * Get a registry value.	 *	 * @param   string  $path     Registry path (e.g. joomla.content.showauthor)	 * @param   mixed   $default  Optional default value, returned if the internal value is null.	 *	 * @return  mixed  Value of entry or null	 *	 * @since   11.1	 */	public function get($path, $default = null)	{		$result = $default;		if (!strpos($path, '.'))		{			return (isset($this->data->$path) && $this->data->$path !== null && $this->data->$path !== '') ? $this->data->$path : $default;		}		// Explode the registry path into an array		$nodes = explode('.', $path);		// Initialize the current node to be the registry root.		$node = $this->data;		$found = false;		// Traverse the registry to find the correct node for the result.		foreach ($nodes as $n)		{			if (isset($node->$n))			{				$node = $node->$n;				$found = true;			}			else			{				$found = false;				break;			}		}		if ($found && $node !== null && $node !== '')		{			$result = $node;		}		return $result;	}	/**	 * Returns a reference to a global JRegistry object, only creating it	 * if it doesn't already exist.	 *	 * This method must be invoked as:	 * <pre>$registry = JRegistry::getInstance($id);</pre>	 *	 * @param   string  $id  An ID for the registry instance	 *	 * @return  JRegistry  The JRegistry object.	 *	 * @since   11.1	 */	public static function getInstance($id)	{		if (empty(self::$instances[$id]))		{			self::$instances[$id] = new JRegistry;		}		return self::$instances[$id];	}	/**	 * Load a associative array of values into the default namespace	 *	 * @param   array  $array  Associative array of value to load	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadArray($array)	{		$this->bindData($this->data, $array);		return true;	}	/**	 * Load the public variables of the object into the default namespace.	 *	 * @param   object  $object  The object holding the publics to load	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadObject($object)	{		$this->bindData($this->data, $object);		return true;	}	/**	 * Load the contents of a file into the registry	 *	 * @param   string  $file     Path to file to load	 * @param   string  $format   Format of the file [optional: defaults to JSON]	 * @param   array   $options  Options used by the formatter	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadFile($file, $format = 'JSON', $options = array())	{		$data = file_get_contents($file);		return $this->loadString($data, $format, $options);	}	/**	 * Load a string into the registry	 *	 * @param   string  $data     String to load into the registry	 * @param   string  $format   Format of the string	 * @param   array   $options  Options used by the formatter	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadString($data, $format = 'JSON', $options = array())	{		// Load a string into the given namespace [or default namespace if not given]		$handler = JRegistryFormat::getInstance($format);		$obj = $handler->stringToObject($data, $options);		$this->loadObject($obj);		return true;	}	/**	 * Merge a JRegistry object into this one	 *	 * @param   JRegistry  $source  Source JRegistry object to merge.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function merge($source)	{		if (!$source instanceof JRegistry)		{			return false;		}		// Load the variables into the registry's default namespace.		foreach ($source->toArray() as $k => $v)		{			if (($v !== null) && ($v !== ''))			{				$this->data->$k = $v;			}		}		return true;	}	/**	 * Set a registry value.	 *	 * @param   string  $path   Registry Path (e.g. joomla.content.showauthor)	 * @param   mixed   $value  Value of entry	 *	 * @return  mixed  The value of the that has been set.	 *	 * @since   11.1	 */	public function set($path, $value)	{		$result = null;		/**		 * Explode the registry path into an array and remove empty		 * nodes, then re-key the array so it's sequential.		 */		$nodes = array_values(array_filter(explode('.', $path), 'strlen'));		if ($nodes)		{			// Initialize the current node to be the registry root.			$node = $this->data;			// Traverse the registry to find the correct node for the result.			for ($i = 0, $n = count($nodes) - 1; $i < $n; $i++)			{				if (!isset($node->$nodes[$i]) && ($i != $n))				{					$node->$nodes[$i] = new stdClass;				}				$node = $node->$nodes[$i];			}			// Get the old value if exists so we can return it			$result = $node->$nodes[$i] = $value;		}		return $result;	}	/**	 * Transforms a namespace to an array	 *	 * @return  array  An associative array holding the namespace data	 *	 * @since   11.1	 */	public function toArray()	{		return (array) $this->asArray($this->data);	}	/**	 * Transforms a namespace to an object	 *	 * @return  object   An an object holding the namespace data	 *	 * @since   11.1	 */	public function toObject()	{		return $this->data;	}	/**	 * Get a namespace in a given string format	 *	 * @param   string  $format   Format to return the string in	 * @param   mixed   $options  Parameters used by the formatter, see formatters for more info	 *	 * @return  string   Namespace in string format	 *	 * @since   11.1	 */	public function toString($format = 'JSON', $options = array())	{		// Return a namespace in a given format		$handler = JRegistryFormat::getInstance($format);		return $handler->objectToString($this->data, $options);	}	/**	 * Method to recursively bind data to a parent object.	 *	 * @param   object  $parent  The parent object on which to attach the data values.	 * @param   mixed   $data    An array or object of data to bind to the parent object.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function bindData($parent, $data)	{		// Ensure the input data is an array.		if (is_object($data))		{			$data = get_object_vars($data);		}		else		{			$data = (array) $data;		}		foreach ($data as $k => $v)		{			if ((is_array($v) && JArrayHelper::isAssociative($v)) || is_object($v))			{				$parent->$k = new stdClass;				$this->bindData($parent->$k, $v);			}			else			{				$parent->$k = $v;			}		}	}	/**	 * Method to recursively convert an object of data to an array.	 *	 * @param   object  $data  An object of data to return as an array.	 *	 * @return  array  Array representation of the input object.	 *	 * @since   11.1	 */	protected function asArray($data)	{		$array = array();		foreach (get_object_vars((object) $data) as $k => $v)		{			if (is_object($v))			{				$array[$k] = $this->asArray($v);			}			else			{				$array[$k] = $v;			}		}		return $array;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="search<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading', 1)) : ?><h1 class="page-title">	<?php if ($this->escape($this->params->get('page_heading'))) :?>		<?php echo $this->escape($this->params->get('page_heading')); ?>	<?php else : ?>		<?php echo $this->escape($this->params->get('page_title')); ?>	<?php endif; ?></h1><?php endif; ?><?php echo $this->loadTemplate('form'); ?><?php if ($this->error == null && count($this->results) > 0) :	echo $this->loadTemplate('results');else :	echo $this->loadTemplate('error');endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_templates */class TemplatesTableStyle extends JTable{	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__template_styles', 'id', $db);	}	/**	 * Overloaded bind function to pre-process the params.	 *	 * @param   array  Named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see JTable:bind	 * @since 1.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		// Verify that the default style is not unset		if ($array['home'] == '0' && $this->home == '1')		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_CANNOT_UNSET_DEFAULT_STYLE'));			return false;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 */	public function check()	{		if (empty($this->title))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_STYLE_REQUIRES_TITLE'));			return false;		}		return true;	}	/**	 * Overloaded store method to ensure unicity of default style.	 *	 * @param   boolean True to update fields even if they are null.	 * @return  boolean  True on success.	 * @since   1.0	 * @link	http://docs.joomla.org/JTable/store	 */	public function store($updateNulls = false)	{		if ($this->home != '0')		{			$query = $this->_db->getQuery(true)				->update('#__template_styles')				->set('home=\'0\'')				->where('client_id=' . (int) $this->client_id)				->where('home='.$this->_db->quote($this->home));			$this->_db->setQuery($query);			$this->_db->execute();		}		return parent::store($updateNulls);	}	/**	 * Overloaded store method to unsure existence of a default style for a template.	 *	 * @param   mixed	An optional primary key value to delete.  If not set the	 *					instance property value is used.	 * @return  boolean  True on success.	 * @since   1.0	 * @link	http://docs.joomla.org/JTable/delete	 */	public function delete($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		if (!is_null($pk))		{			$query = $this->_db->getQuery(true)				->from('#__template_styles')				->select('id')				->where('client_id=' . (int) $this->client_id)				->where('template='.$this->_db->quote($this->template));			$this->_db->setQuery($query);			$results = $this->_db->loadColumn();			if (count($results) == 1 && $results[0] == $pk)			{				$this->setError(JText::_('COM_TEMPLATES_ERROR_CANNOT_DELETE_LAST_STYLE'));				return false;			}		}		return parent::delete($pk);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app   = JFactory::getApplication();$doc   = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;// Add JavaScript FrameworksJHtml::_('bootstrap.framework');// Add Stylesheets$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load optional rtl Bootstrap css and Bootstrap bugfixesJHtmlBootstrap::loadCss($includeMaincss = false, $this->direction);?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head><jdoc:include type="head" /><!--[if lt IE 9]>	<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script><![endif]--></head><body class="contentpane modal">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$saveOrder	= $listOrder == 'a.ordering';$assoc		= isset($app->item_associations) ? $app->item_associations : 0;$n			= count($this->items);?><form action="<?php echo JRoute::_('index.php?option=com_content&view=articles'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true); ?>			</select>			<label class="selectlabel" for="filter_category_id"><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id')); ?>			</select>			<label class="selectlabel" for="filter_level"><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></label>			<select name="filter_level" class="inputbox" id="filter_level">				<option value=""><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></option>				<?php echo JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level')); ?>			</select>			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access')); ?>			</select>			<label class="selectlabel" for="filter_author_id"><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></label>			<select name="filter_author_id" class="inputbox"  id="filter_author_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></option>				<?php echo JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id')); ?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language')); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="nowrap featured-col">					<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder, null, 'desc'); ?>				</th>				<th class="title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($saveOrder) : ?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'articles.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>				<th width="5%">					<?php echo JHtml::_('grid.sort', 'COM_CONTENT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>				</th>				<?php endif;?>				<th class="title created-by-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th class="hits-col">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$item->max_ordering = 0; //??			$ordering   = ($listOrder == 'a.ordering');			$canCreate  = $user->authorise('core.create',     'com_content.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_content.article.' . $item->id);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;			$canEditOwn = $user->authorise('core.edit.own',   'com_content.article.' . $item->id) && $item->created_by == $userId;			$canChange  = $user->authorise('core.edit.state', 'com_content.article.' . $item->id) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'articles.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit || $canEditOwn) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_content&task=article.edit&id='.$item->id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias)); ?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'articles.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo JHtml::_('contentadministrator.featured', $item->featured, $i, $canChange); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) : ?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'articles.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'articles.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'articles.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'articles.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering; ?>" <?php echo $disabled; ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<?php if ($assoc) : ?>				<td class="center">					<?php if ($item->association):?>						<?php echo JHtml::_('contentadministrator.association', $item->id); ?>					<?php endif;?>				</td>				<?php endif;?>				<td class="center">					<?php if ($item->created_by_alias) : ?>						<?php echo $this->escape($item->author_name); ?>						<p class="smallsub"> <?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->created_by_alias)); ?></p>					<?php else : ?>						<?php echo $this->escape($item->author_name); ?>					<?php endif; ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->hits; ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;// Checking if loaded via index.php or component.php$tmpl = $input->getCmd('tmpl', '');$document = JFactory::getDocument();?><script type="text/javascript">	setmenutype = function(type)	{		<?php if ($tmpl) : ?>			window.parent.Joomla.submitbutton('item.setType', type);			window.parent.SqueezeBox.close();		<?php else : ?>			window.location="index.php?option=com_menus&view=item&task=item.setType&layout=edit&type="+('item.setType', type);		<?php endif; ?>	}</script><?php echo JHtml::_('bootstrap.startAccordion', 'collapseTypes', array('active' => 'slide1')); ?>	<?php		$i = 0;		foreach ($this->types as $name => $list) : ?>		<?php echo JHtml::_('bootstrap.addSlide', 'collapseTypes', JText::_($name), 'collapse' . $i++); ?>			<ul class="nav nav-tabs nav-stacked">				<?php foreach ($list as $item) : ?>					<li>						<a class="choose_type" href="#" title="<?php echo JText::_($item->description); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => $item->title, 'request' => $item->request))); ?>')">							<?php echo JText::_($item->title);?> <small class="muted"><?php echo JText::_($item->description); ?></small>						</a>					</li>				<?php endforeach; ?>			</ul>		<?php echo JHtml::_('bootstrap.endSlide'); ?>	<?php endforeach; ?>	<?php echo JHtml::_('bootstrap.addSlide', 'collapseTypes', JText::_('COM_MENUS_TYPE_SYSTEM'), 'collapse-system'); ?>		<ul class="nav nav-tabs nav-stacked">			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'url'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL_DESC'); ?></small>				</a>			</li>			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_ALIAS_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'alias'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_ALIAS'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_ALIAS_DESC'); ?></small>				</a>			</li>			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_SEPARATOR_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'separator'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_SEPARATOR'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_SEPARATOR_DESC'); ?></small>				</a>			</li>			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_HEADING_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'heading'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_HEADING'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_HEADING_DESC'); ?></small>			</li>		</ul>	<?php echo JHtml::_('bootstrap.endSlide'); ?><?php echo JHtml::_('bootstrap.endAccordion'); ?>
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_wrapper * @since       1.5 */class WrapperViewWrapper extends JViewLegacy{	/**	 * @since  1.5	 */	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$document	= JFactory::getDocument();		$menus	= $app->getMenu();		$menu	= $menus->getActive();		$params = $app->getParams();		// because the application sets a default page title, we need to get it		// right from the menu item itself		$title = $params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($params->get('menu-meta_description'))		{			$this->document->setDescription($params->get('menu-meta_description'));		}		if ($params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $params->get('menu-meta_keywords'));		}		if ($params->get('robots'))		{			$this->document->setMetadata('robots', $params->get('robots'));		}		$wrapper = new stdClass;		// auto height control		if ($params->def('height_auto'))		{			$wrapper->load = 'onload="iFrameHeight()"';		}		else		{			$wrapper->load = '';		}		$url = $params->def('url', '');		if ($params->def('add_scheme', 1))		{			// adds 'http://' if none is set			if (substr($url, 0, 1) == '/')			{				// relative url in component. use server http_host.				$wrapper->url = 'http://'. $_SERVER['HTTP_HOST'] . $url;			}			elseif (!strstr($url, 'http') && !strstr($url, 'https'))			{				$wrapper->url = 'http://'. $url;			}			else {				$wrapper->url = $url;			}		}		else		{			$wrapper->url = $url;		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params = &$params;		$this->wrapper = &$wrapper;		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');// Get the form fieldsets.$fieldsets = $this->form->getFieldsets();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'profile.cancel' || document.formvalidator.isValid(document.id('profile-form')))		{			Joomla.submitform(task, document.getElementById('profile-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_admin&view=profile&layout=edit&id='.$this->item->id); ?>" method="post" name="adminForm" id="profile-form" class="form-validate" enctype="multipart/form-data">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('COM_ADMIN_USER_ACCOUNT_DETAILS'); ?></legend>			<ul class="adminformlist">			<?php foreach ($this->form->getFieldset('user_details') as $field) : ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endforeach; ?>			</ul>		</fieldset>	</div>	<div class="col options-section">		<?php		echo JHtml::_('sliders.start');		foreach ($fieldsets as $fieldset) :			if ($fieldset->name == 'user_details') :				continue;			endif;			echo JHtml::_('sliders.panel', JText::_($fieldset->label), $fieldset->name);		?>		<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($fieldset->label); ?></legend>		<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($fieldset->name) as $field) : ?>			<?php if ($field->hidden) : ?>				<?php echo $field->input; ?>			<?php else: ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endif; ?>		<?php endforeach; ?>		</ul>		</fieldset>		<?php endforeach; ?>		<?php echo JHtml::_('sliders.end'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  System.languagecode * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Language Code plugin class. * * @package     Joomla.Plugin * @subpackage  Content.languagecode * @since       2.5 */class PlgSystemLanguagecode extends JPlugin{	/**	 * Plugin that change the language code used in the <html /> tag	 *	 * @since  2.5	 */	public function onAfterRender()	{		// Use this plugin only in site application		if (JFactory::getApplication()->isSite())		{			// Get the response body			$body = JResponse::getBody();			// Get the current language code			$code = JFactory::getDocument()->getLanguage();			// Get the new code			$new_code  = $this->params->get($code);			// Replace the old code by the new code in the <html /> tag			if ($new_code)			{				// Replace the new code in the HTML document				$patterns = array(					chr(1) . '(<html.*\s+xml:lang=")(' . $code . ')(".*>)' . chr(1) . 'i',					chr(1) . '(<html.*\s+lang=")(' . $code . ')(".*>)' . chr(1) . 'i',				);				$replace = array(					'${1}' . strtolower($new_code) . '${3}',					'${1}' . strtolower($new_code) . '${3}'				);			}			else			{				$patterns = array();				$replace = array();			}			// Replace codes in <link hreflang="" /> attributes			preg_match_all(chr(1) . '(<link.*\s+hreflang=")([0-9a-z\-]*)(".*\s+rel="alternate".*/>)' . chr(1) . 'i', $body, $matches);			foreach ($matches[2] as $match)			{				$new_code = $this->params->get(strtolower($match));				if ($new_code)				{					$patterns[] = chr(1) . '(<link.*\s+hreflang=")(' . $match . ')(".*\s+rel="alternate".*/>)' . chr(1) . 'i';					$replace[] = '${1}' . $new_code . '${3}';				}			}			preg_match_all(chr(1) . '(<link.*\s+rel="alternate".*\s+hreflang=")([0-9A-Za-z\-]*)(".*/>)' . chr(1) . 'i', $body, $matches);			foreach ($matches[2] as $match)			{				$new_code = $this->params->get(strtolower($match));				if ($new_code)				{					$patterns[] = chr(1) . '(<link.*\s+rel="alternate".*\s+hreflang=")(' . $match . ')(".*/>)' . chr(1) . 'i';					$replace[] = '${1}' . $new_code . '${3}';				}			}			JResponse::setBody(preg_replace($patterns, $replace, $body));		}	}	/**	 * @param   JForm	$form	The form to be altered.	 * @param   array  $data	The associated data for the form.	 *	 * @return  boolean	 * @since	2.5	 */	public function onContentPrepareForm($form, $data)	{		// Check we have a form		if (!($form instanceof JForm))		{			$this->_subject->setError('JERROR_NOT_A_FORM');			return false;		}		// Check we are manipulating a valid form.		$app = JFactory::getApplication();		if ($form->getName() != 'com_plugins.plugin'			|| isset($data->name) && $data->name != 'plg_system_languagecode'			|| empty($data) && !$app->getUserState('plg_system_language_code.edit')		)		{			return true;		}		// Mark the plugin as being edited		$app->setUserState('plg_system_language_code.edit', $data->name == 'plg_system_languagecode');		// Get site languages		$languages = JLanguage::getKnownLanguages(JPATH_SITE);		// Inject fields into the form		foreach ($languages as $tag => $language)		{			$form->load('<form>	<fields name="params">		<fieldset			name="languagecode"			label="PLG_SYSTEM_LANGUAGECODE_FIELDSET_LABEL"			description="PLG_SYSTEM_LANGUAGECODE_FIELDSET_DESC"		>			<field				name="'.strtolower($tag).'"				type="text"				description="' . htmlspecialchars(JText::sprintf('PLG_SYSTEM_LANGUAGECODE_FIELD_DESC', $language['name']), ENT_COMPAT, 'UTF-8') . '"				translate_description="false"				label="' . $tag . '"				translate_label="false"				size="7"				filter="cmd"			/>		</fieldset>	</fields></form>			');		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_content */class ContentControllerArticle extends JControllerForm{	/**	 * The URL view item variable.	 *	 * @var    string	 * @since  1.6	 */	protected $view_item = 'form';	/**	 * The URL view list variable.	 *	 * @var    string	 * @since  1.6	 */	protected $view_list = 'categories';	/**	 * Method to add a new record.	 *	 * @return  mixed  True if the record can be added, a error object if not.	 *	 * @since   1.6	 */	public function add()	{		if (!parent::add())		{			// Redirect to the return page.			$this->setRedirect($this->getReturnPage());		}	}	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user       = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('catid'), 'int');		$allow      = null;		if ($categoryId)		{			// If the category has been passed in the data or URL check it.			$allow	= $user->authorise('core.create', 'com_content.category.'.$categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd();		}		else		{			return $allow;		}	}	/**	 * Method override to check if you can edit an existing record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key; default is id.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$user     = JFactory::getUser();		$userId   = $user->get('id');		$asset    = 'com_content.article.' . $recordId;		// Check general edit permission first.		if ($user->authorise('core.edit', $asset))		{			return true;		}		// Fallback on edit.own.		// First test if the permission is available.		if ($user->authorise('core.edit.own', $asset))		{			// Now test the owner is the user.			$ownerId = (int) isset($data['created_by']) ? $data['created_by'] : 0;			if (empty($ownerId) && $recordId)			{				// Need to do a lookup from the model.				$record = $this->getModel()->getItem($recordId);				if (empty($record))				{					return false;				}				$ownerId = $record->created_by;			}			// If the owner matches 'me' then do the test.			if ($ownerId == $userId)			{				return true;			}		}		// Since there is no asset tracking, revert to the component permissions.		return parent::allowEdit($data, $key);	}	/**	 * Method to cancel an edit.	 *	 * @param   string  $key  The name of the primary key of the URL variable.	 *	 * @return  boolean  True if access level checks pass, false otherwise.	 *	 * @since   1.6	 */	public function cancel($key = 'a_id')	{		parent::cancel($key);		// Redirect to the return page.		$this->setRedirect($this->getReturnPage());	}	/**	 * Method to edit an existing record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key	 * (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if access level check and checkout passes, false otherwise.	 *	 * @since   1.6	 */	public function edit($key = null, $urlVar = 'a_id')	{		$result = parent::edit($key, $urlVar);		return $result;	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.5	 */	public function getModel($name = 'form', $prefix = '', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $urlVar    The name of the URL variable for the id.	 *	 * @return  string	The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = 'a_id')	{		// Need to override the parent method completely.		$tmpl   = $this->input->get('tmpl');		$layout = $this->input->get('layout', 'edit');		$append = '';		// Setup redirect info.		if ($tmpl)		{			$append .= '&tmpl='.$tmpl;		}		// TODO This is a bandaid, not a long term solution.//		if ($layout)//		{//			$append .= '&layout=' . $layout;//		}		$append .= '&layout=edit';		if ($recordId)		{			$append .= '&'.$urlVar.'='.$recordId;		}		$itemId	= $this->input->getInt('Itemid');		$return	= $this->getReturnPage();		$catId  = $this->input->getInt('catid', null, 'get');		if ($itemId)		{			$append .= '&Itemid='.$itemId;		}		if ($catId)		{			$append .= '&catid='.$catId;		}		if ($return)		{			$append .= '&return='.base64_encode($return);		}		return $append;	}	/**	 * Get the return URL.	 *	 * If a "return" variable has been passed in the request	 *	 * @return  string	The return URL.	 *	 * @since   1.6	 */	protected function getReturnPage()	{		$return = $this->input->get('return', null, 'base64');		if (empty($return) || !JUri::isInternal(base64_decode($return)))		{			return JUri::base();		}		else		{			return base64_decode($return);		}	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   array         $validData   The validated data.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		return;	}	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   1.6	 */	public function save($key = null, $urlVar = 'a_id')	{		$result = parent::save($key, $urlVar);		// If ok, redirect to the return page.		if ($result)		{			$this->setRedirect($this->getReturnPage());		}		return $result;	}	/**	 * Method to save a vote.	 *	 * @return  void	 *	 * @since   1.6	 */	public function vote()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user_rating = $this->input->getInt('user_rating', -1);		if ($user_rating > -1)		{			$url = $this->input->getString('url', '');			$id = $this->input->getInt('id', 0);			$viewName = $this->input->getString('view', $this->default_view);			$model = $this->getModel($viewName);			if ($model->storeVote($id, $user_rating))			{				$this->setRedirect($url, JText::_('COM_CONTENT_ARTICLE_VOTE_SUCCESS'));			}			else			{				$this->setRedirect($url, JText::_('COM_CONTENT_ARTICLE_VOTE_FAILURE'));			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app	= JFactory::getApplication();$doc	= JFactory::getDocument();$lang	= JFactory::getLanguage();$input	= $app->input;$user	= JFactory::getUser();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Load template javascript$doc->addScript('templates/'.$this->template.'/js/template.js', 'text/javascript');// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo  $this->language; ?>" lang="<?php echo  $this->language; ?>" dir="<?php echo  $this->direction; ?>"><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<jdoc:include type="head" /><!-- Load additional CSS styles for Internet Explorer --><!--[if IE 8]>	<link href="templates/<?php echo  $this->template ?>/css/ie8.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if IE 7]>	<link href="templates/<?php echo  $this->template ?>/css/ie7.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--></head><body id="minwidth-body"><div id="containerwrap">	<!-- Header Logo -->	<div id="header">		<!-- Site Title and Skip to Content -->		<div class="title-ua">			<h1 class="title"><?php echo $this->params->get('showSiteName') ? $app->getCfg('sitename') . " " . JText::_('JADMINISTRATION') : JText::_('JADMINISTRATION'); ?></h1>			<div id="skiplinkholder"><p><a id="skiplink" href="#skiptarget"><?php echo JText::_('TPL_HATHOR_SKIP_TO_MAIN_CONTENT'); ?></a></p></div>		</div>	</div><!-- end header -->	<!-- Main Menu Navigation -->	<div id="nav">		<div id="module-menu">			<h2 class="element-invisible"><?php echo JText::_('TPL_HATHOR_MAIN_MENU'); ?></h2>			<jdoc:include type="modules" name="menu" />		</div>		<div class="clr"></div>	</div><!-- end nav -->	<!-- Status Module -->	<div id="module-status">		<jdoc:include type="modules" name="status"/>			<?php			//Display an harcoded logout			$task = $app->input->get('task');			if ($task == 'edit' || $task == 'editA' || $app->input->getInt('hidemainmenu'))			{				$logoutLink = '';			} else {				$logoutLink = JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');			}			$hideLinks = $app->input->getBool('hidemainmenu');			$output = array();			// Print the Preview link to Main site.			//$output[] = '<span class="viewsite"><a href="'.JURI::root().'" target="_blank">'.JText::_('JGLOBAL_VIEW_SITE').'</a></span>';			// Print the logout link.			//$output[] = '<span class="logout">' .($hideLinks ? '' : '<a href="'.$logoutLink.'">').JText::_('JLOGOUT').($hideLinks ? '' : '</a>').'</span>';			// Output the items.			foreach ($output as $item) :			echo $item;			endforeach;			?>	</div>	<!-- Content Area -->	<div id="content">		<!-- Component Title -->		<jdoc:include type="modules" name="title" />		<!-- System Messages -->		<jdoc:include type="message" />		<!-- Sub Menu Navigation -->		<div class="subheader">			<?php if (!$app->input->getInt('hidemainmenu')) : ?>				<h3 class="element-invisible"><?php echo JText::_('TPL_HATHOR_SUB_MENU'); ?></h3>				<jdoc:include type="modules" name="submenu" style="xhtmlid" id="submenu-box" />			<?php echo " " ?>			<?php else : ?>				<div id="no-submenu"></div>			<?php endif; ?>		</div>		<!-- Toolbar Icon Buttons -->		<div class="toolbar-box">			<jdoc:include type="modules" name="toolbar" style="xhtml" />			<div class="clr"></div>		</div>		<!-- Beginning of Actual Content -->		<div id="element-box">			<div id="container-collapse" class="container-collapse"></div>			<p id="skiptargetholder"><a id="skiptarget" class="skip" tabindex="-1"></a></p>			<!-- The main component -->			<jdoc:include type="component" />			<div class="clr"></div>		</div><!-- end of element-box -->		<noscript>			<?php echo  JText::_('JGLOBAL_WARNJAVASCRIPT') ?>		</noscript>		<div class="clr"></div>	</div><!-- end of content -->	<div class="clr"></div></div><!-- end of containerwrap --><!-- Footer --><div id="footer">	<jdoc:include type="modules" name="footer" style="none"  />	<p class="copyright">		<?php $joomla = '<a href="http://www.joomla.org">Joomla!&#174;</a>';			echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla) ?>	</p></div><script type="text/javascript">	(function($){		$(document).ready(function () {			// Patches to fix some wrong render of chosen fields			$('.chzn-container, .chzn-drop, .chzn-choices .search-field input').each(function (index) {				$(this).css({					'width': 'auto'				});			});		});	})(jQuery);</script></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Search component helper. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.5 */class SearchHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 * @since   1.6	 */	public static function addSubmenu($vName)	{		// Not required.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_search';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	public static function santiseSearchWord(&$searchword, $searchphrase)	{		$ignored = false;		$lang = JFactory::getLanguage();		$tag			= $lang->getTag();		$search_ignore	= $lang->getIgnoredSearchWords();		// Deprecated in 1.6 use $lang->getIgnoredSearchWords instead		$ignoreFile		= $lang->getLanguagePath() . '/' . $tag . '/' . $tag.'.ignore.php';		if (file_exists($ignoreFile))		{			include $ignoreFile;		}		// check for words to ignore		$aterms = explode(' ', JString::strtolower($searchword));		// first case is single ignored word		if (count($aterms) == 1 && in_array(JString::strtolower($searchword), $search_ignore))		{			$ignored = true;		}		// filter out search terms that are too small		$lower_limit = $lang->getLowerLimitSearchWord();		foreach ($aterms as $aterm)		{			if (JString::strlen($aterm) < $lower_limit)			{				$search_ignore[] = $aterm;			}		}		// next is to remove ignored words from type 'all' or 'any' (not exact) searches with multiple words		if (count($aterms) > 1 && $searchphrase != 'exact')		{			$pruned = array_diff($aterms, $search_ignore);			$searchword = implode(' ', $pruned);		}		return $ignored;	}	/**	 * @since  1.5	 */	public static function limitSearchWord(&$searchword)	{		$restriction = false;		$lang = JFactory::getLanguage();		// limit searchword to a maximum of characters		$upper_limit = $lang->getUpperLimitSearchWord();		if (JString::strlen($searchword) > $upper_limit)		{			$searchword		= JString::substr($searchword, 0, $upper_limit - 1);			$restriction	= true;		}		// searchword must contain a minimum of characters		if ($searchword && JString::strlen($searchword) < $lang->getLowerLimitSearchWord())		{			$searchword		= '';			$restriction	= true;		}		return $restriction;	}	/**	 * Logs a search term	 *	 * @param   string  $search_term  The term being searched	 *	 * @return  void	 *	 * @since   1.5	 * @deprecated  4.0  Use JSearchHelper::logSearch() instead	 */	public static function logSearch($search_term)	{		JLog::add(__METHOD__ . '() is deprecated, use JSearchHelper::logSearch() instead.', JLog::WARNING, 'deprecated');		JSearchHelper::logSearch($search_term, 'com_search');	}	/**	 * Prepares results from search for display	 *	 * @param string The source string	 * @param string The searchword to select around	 * @return  string	 *	 * @since  1.5	 */	public static function prepareSearchContent($text, $searchword)	{		// strips tags won't remove the actual jscript		$text = preg_replace("'<script[^>]*>.*?</script>'si", "", $text);		$text = preg_replace('/{.+?}/', '', $text);		//$text = preg_replace('/<a\s+.*?href="([^"]+)"[^>]*>([^<]+)<\/a>/is','\2', $text);		// replace line breaking tags with whitespace		$text = preg_replace("'<(br[^/>]*?/|hr[^/>]*?/|/(div|h[1-6]|li|p|td))>'si", ' ', $text);		return self::_smartSubstr(strip_tags($text), $searchword);	}	/**	 * Checks an object for search terms (after stripping fields of HTML)	 *	 * @param object The object to check	 * @param string Search words to check for	 * @param array List of object variables to check against	 * @returns boolean True if searchTerm is in object, false otherwise	 */	public static function checkNoHtml($object, $searchTerm, $fields)	{		$searchRegex = array(				'#<script[^>]*>.*?</script>#si',				'#<style[^>]*>.*?</style>#si',				'#<!.*?(--|]])>#si',				'#<[^>]*>#i'				);		$terms = explode(' ', $searchTerm);		if (empty($fields))		{			return false;		}		foreach ($fields as $field)		{			if (!isset($object->$field))			{				continue;			}			$text = $object->$field;			foreach ($searchRegex as $regex)			{				$text = preg_replace($regex, '', $text);			}			foreach ($terms as $term)			{				if (JString::stristr($text, $term) !== false)				{					return true;				}			}		}		return false;	}	/**	 * returns substring of characters around a searchword	 *	 * @param string The source string	 * @param int Number of chars to return	 * @param string The searchword to select around	 * @return  string	 *	 * @since  1.5	 */	public static function _smartSubstr($text, $searchword)	{		$lang = JFactory::getLanguage();		$length = $lang->getSearchDisplayedCharactersNumber();		$textlen = JString::strlen($text);		$lsearchword = JString::strtolower($searchword);		$wordfound = false;		$pos = 0;		while ($wordfound === false && $pos < $textlen)		{			if (($wordpos = @JString::strpos($text, ' ', $pos + $length)) !== false)			{				$chunk_size = $wordpos - $pos;			} else {				$chunk_size = $length;			}			$chunk = JString::substr($text, $pos, $chunk_size);			$wordfound = JString::strpos(JString::strtolower($chunk), $lsearchword);			if ($wordfound === false)			{				$pos += $chunk_size + 1;			}		}		if ($wordfound !== false)		{			return (($pos > 0) ? '...&#160;' : '') . $chunk . '&#160;...';		}		else		{			if (($wordpos = @JString::strpos($text, ' ', $length)) !== false)			{				return JString::substr($text, 0, $wordpos) . '&#160;...';			} else {				return JString::substr($text, 0, $length);			}		}	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);if (file_exists(__DIR__ . '/defines.php')){	include_once __DIR__ . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', __DIR__);	require_once JPATH_BASE.'/includes/defines.php';}require_once JPATH_BASE.'/includes/framework.php';require_once JPATH_BASE.'/includes/helper.php';require_once JPATH_BASE.'/includes/toolbar.php';// Mark afterLoad in the profiler.JDEBUG ? $_PROFILER->mark('afterLoad') : null;// Instantiate the application.$app = JFactory::getApplication('administrator');// Initialise the application.$app->initialise(	array('language' => $app->getUserState('application.lang')));// Mark afterIntialise in the profiler.JDEBUG ? $_PROFILER->mark('afterInitialise') : null;// Route the application.$app->route();// Mark afterRoute in the profiler.JDEBUG ? $_PROFILER->mark('afterRoute') : null;// Dispatch the application.$app->dispatch();// Mark afterDispatch in the profiler.JDEBUG ? $_PROFILER->mark('afterDispatch') : null;// Render the application.$app->render();// Mark afterRender in the profiler.JDEBUG ? $_PROFILER->mark('afterRender') : null;// Return the response.echo $app;
<?php/** * @package     Joomla.Plugin * @subpackage  Editors.codemirror * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * CodeMirror Editor Plugin. * * @package     Joomla.Plugin * @subpackage  Editors.codemirror * @since       1.6 */class PlgEditorCodemirror extends JPlugin{	/**	 * Base path for editor files	 */	protected $_basePath = 'media/editors/codemirror/';	/**	 * Initialises the Editor.	 *	 * @return  string	JavaScript Initialization string.	 */	public function onInit()	{		JHtml::_('behavior.framework');		$uncompressed	= JFactory::getApplication()->getCfg('debug') ? '-uncompressed' : '';		JHtml::_('script', $this->_basePath . 'js/codemirror'.$uncompressed.'.js', false, false, false, false);		JHtml::_('stylesheet', $this->_basePath . 'css/codemirror.css');		return '';	}	/**	 * Copy editor content to form field.	 *	 * @param   string	$id	The id of the editor field.	 *	 * @return  string Javascript	 */	public function onSave($id)	{		return "document.getElementById('$id').value = Joomla.editors.instances['$id'].getCode();\n";	}	/**	 * Get the editor content.	 *	 * @param   string	$id	The id of the editor field.	 *	 * @return  string Javascript	 */	public function onGetContent($id)	{		return "Joomla.editors.instances['$id'].getCode();\n";	}	/**	 * Set the editor content.	 *	 * @param   string	$id			The id of the editor field.	 * @param   string	$content	The content to set.	 *	 * @return  string Javascript	 */	public function onSetContent($id, $content)	{		return "Joomla.editors.instances['$id'].setCode($content);\n";	}	/**	 * Adds the editor specific insert method.	 *	 * @return  boolean	 */	public function onGetInsertMethod()	{		static $done = false;		// Do this only once.		if (!$done)		{			$done = true;			$doc = JFactory::getDocument();			$js = "\tfunction jInsertEditorText(text, editor)				{					Joomla.editors.instances[editor].replaceSelection(text);\n			}";			$doc->addScriptDeclaration($js);		}		return true;	}	/**	 * Display the editor area.	 *	 * @param   string	$name		The control name.	 * @param   string	$html		The contents of the text area.	 * @param   string	$width		The width of the text area (px or %).	 * @param   string	$height		The height of the text area (px or %).	 * @param   integer  $col		The number of columns for the textarea.	 * @param   integer  $row		The number of rows for the textarea.	 * @param   boolean	$buttons	True and the editor buttons will be displayed.	 * @param   string	$id			An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string	$asset	 * @param   object	$author	 * @param   array  $params		Associative array of editor parameters.	 *	 * @return  string HTML	 */	public function onDisplay($name, $content, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		if (empty($id))		{			$id = $name;		}		// Only add "px" to width and height if they are not given as a percentage		if (is_numeric($width))		{			$width .= 'px';		}		if (is_numeric($height))		{			$height .= 'px';		}		// Must pass the field id to the buttons in this editor.		$buttons = $this->_displayButtons($id, $buttons, $asset, $author);		$compressed	= JFactory::getApplication()->getCfg('debug') ? '-uncompressed' : '';		// Default syntax		$parserFile = 'parsexml.js';		$styleSheet = array('xmlcolors.css');		// Look if we need special syntax coloring.		$syntax = JFactory::getApplication()->getUserState('editor.source.syntax');		if ($syntax)		{			switch($syntax)			{				case 'css':					$parserFile = 'parsecss.js';					$styleSheet = array('csscolors.css');					break;				case 'js':					$parserFile = array('tokenizejavascript.js', 'parsejavascript.js');					$styleSheet = array('jscolors.css');					break;				case 'html':					$parserFile = array('parsexml.js', 'parsecss.js', 'tokenizejavascript.js', 'parsejavascript.js', 'parsehtmlmixed.js');					$styleSheet = array('xmlcolors.css', 'jscolors.css', 'csscolors.css');					break;				case 'php':					$parserFile = array('parsexml.js', 'parsecss.js', 'tokenizejavascript.js', 'parsejavascript.js', 'tokenizephp.js', 'parsephp.js', 'parsephphtmlmixed.js');					$styleSheet = array('xmlcolors.css', 'jscolors.css', 'csscolors.css', 'phpcolors.css');					break;				default:					break;			} //switch		}		foreach ($styleSheet as &$style)		{			$style = JURI::root(true).'/'.$this->_basePath.'css/'.$style;		}		$options	= new stdClass;		$options->basefiles		= array('basefiles'.$compressed.'.js');		$options->path			= JURI::root(true).'/'.$this->_basePath.'js/';		$options->parserfile	= $parserFile;		$options->stylesheet	= $styleSheet;		$options->height		= $height;		$options->width			= $width;		$options->continuousScanning = 500;		if ($this->params->get('linenumbers', 0))		{			$options->lineNumbers	= true;			$options->textWrapping	= false;		}		if ($this->params->get('tabmode', '') == 'shift')		{			$options->tabMode = 'shift';		}		$html = array();		$html[]	= "<textarea name=\"$name\" id=\"$id\" cols=\"$col\" rows=\"$row\">$content</textarea>";		$html[] = $buttons;		$html[] = '<script type="text/javascript">';		$html[] = '(function() {';		$html[] = 'var editor = CodeMirror.fromTextArea("'.$id.'", '.json_encode($options).');';		$html[] = 'Joomla.editors.instances[\''.$id.'\'] = editor;';		$html[] = '})()';		$html[] = '</script>';		return implode("\n", $html);	}	/**	 * Displays the editor buttons.	 *	 * @param string $name	 * @param mixed $buttons [array with button objects | boolean true to display buttons]	 *	 * @return  string HTML	 */	protected function _displayButtons($name, $buttons, $asset, $author)	{		// Load modal popup behavior		JHtml::_('behavior.modal', 'a.modal-button');		$args['name'] = $name;		$args['event'] = 'onGetInsertMethod';		$html = array();		$results[] = $this->update($args);		foreach ($results as $result)		{			if (is_string($result) && trim($result))			{				$html[] = $result;			}		}		if (is_array($buttons) || (is_bool($buttons) && $buttons))		{			$results = $this->_subject->getButtons($name, $buttons, $asset, $author);			// This will allow plugins to attach buttons or change the behavior on the fly using AJAX			$html[] = '<div id="editor-xtd-buttons">';			$html[] = '<div class="btn-toolbar">';			foreach ($results as $button)			{				// Results should be an object				if ($button->get('name'))				{					$modal		= ($button->get('modal')) ? 'class="modal-button btn"' : null;					$href		= ($button->get('link')) ? ' class="btn" href="'.JURI::base().$button->get('link').'"' : null;					$onclick	= ($button->get('onclick')) ? 'onclick="'.$button->get('onclick').'"' : null;					$title      = ($button->get('title')) ? $button->get('title') : $button->get('text');					$html[] = '<a '.$modal.' title="'.$title.'" '.$href.' '.$onclick.' rel="'.$button->get('options').'">';					$html[] = '<i class="icon-' . $button->get('name'). '"></i> ';					$html[] = $button->get('text').'</a>';				}			}			$html[] = '</div>';			$html[] = '</div>';		}		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Plugin installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterPlugin extends JAdapterInstance{	/**	 * Install function routing	 *	 * @var    string	 * @since  3.1	 * */	protected $route = 'install';	/**	 * The installation manifest XML object	 *	 * @var	 * @since  3.1	 * */	protected $manifest = null;	/**	 * A path to the PHP file that the scriptfile declaration in	 * the manifest refers to.	 *	 * @var	 * @since  3.1	 * */	protected $manifest_script = null;	/**	 * Name of the extension	 *	 * @var	 * @since  3.1	 * */	protected $name = null;	/**	 *	 *	 * @var	 * @since  3.1	 * */	protected $scriptElement = null;	/**	 * @var	 * @since  3.1	 */	protected $oldFiles = null;	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path where to find language files.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent->setPath('source', JPATH_PLUGINS . '/' . $this->parent->extension->folder . '/' . $this->parent->extension->element);		}		$this->manifest = $this->parent->getManifest();		$element = $this->manifest->files;		if ($element)		{			$group = strtolower((string) $this->manifest->attributes()->group);			$name = '';			if (count($element->children()))			{				foreach ($element->children() as $file)				{					if ((string) $file->attributes()->plugin)					{						$name = strtolower((string) $file->attributes()->plugin);						break;					}				}			}			if ($name)			{				$extension = "plg_${group}_${name}";				$lang = JFactory::getLanguage();				$source = $path ? $path : JPATH_PLUGINS . "/$group/$name";				$folder = (string) $element->attributes()->folder;				if ($folder && file_exists("$path/$folder"))				{					$source = "$path/$folder";				}				$lang->load($extension . '.sys', $source, null, false, false)					|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)					|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)					|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false);			}		}	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get a database connector object		$db = $this->parent->getDbo();		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		$xml = $this->manifest;		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension name		$name = (string) $xml->name;		$name = JFilterInput::getInstance()->clean($name, 'string');		$this->set('name', $name);		// Get the plugin description		$description = (string) $xml->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		/*		 * Backward Compatibility		 * @todo Deprecate in future version		 */		$type = (string) $xml->attributes()->type;		// Set the installation path		if (count($xml->files->children()))		{			foreach ($xml->files->children() as $file)			{				if ((string) $file->attributes()->$type)				{					$element = (string) $file->attributes()->$type;					break;				}			}		}		$group = (string) $xml->attributes()->group;		if (!empty($element) && !empty($group))		{			$this->parent->setPath('extension_root', JPATH_PLUGINS . '/' . $group . '/' . $element);		}		else		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_NO_FILE', JText::_('JLIB_INSTALLER_' . $this->route)));			return false;		}		// Check if we should enable overwrite settings		// Check to see if a plugin by the same name is already installed.		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('folder') . ' = ' . $db->quote($group))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent				->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true)));			return false;		}		$id = $db->loadResult();		// If it's on the fs...		if (file_exists($this->parent->getPath('extension_root')) && (!$this->parent->isOverwrite() || $this->parent->isUpgrade()))		{			$updateElement = $xml->update;			// Upgrade manually set or update function available or update tag detected			if ($this->parent->isUpgrade() || ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'update'))				|| $updateElement)			{				// Force this one				$this->parent->setOverwrite(true);				$this->parent->setUpgrade(true);				if ($id)				{					// If there is a matching extension mark this as an update; semantics really					$this->route = 'update';				}			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is set				// We didn't have overwrite set, find an update function or find an update tag so lets call it safe				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_PLG_INSTALL_DIRECTORY', JText::_('JLIB_INSTALLER_' . $this->route),						$this->parent->getPath('extension_root')					)				);				return false;			}		}		/*		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, let's load it; we'll copy it later (don't have destination yet).		if ((string) $xml->scriptfile)		{			$manifestScript = (string) $xml->scriptfile;			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// If a dash is present in the group name, remove it			$groupClass = str_replace('-', '', $group);			// Set the class name			$classname = 'plg' . $groupClass . $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PLG_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// If the plugin directory does not exist, lets create it		$created = false;		if (!file_exists($this->parent->getPath('extension_root')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_root')))			{				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_PLG_INSTALL_CREATE_DIRECTORY', JText::_('JLIB_INSTALLER_' . $this->route),						$this->parent->getPath('extension_root')					)				);				return false;			}		}		// If we're updating at this point when there is always going to be an extension_root find the old XML files		if ($this->route == 'update')		{			// Hunt for the original XML file			$old_manifest = null;			// Create a new installer because findManifest sets stuff; side effects!			$tmpInstaller = new JInstaller;			// Look in the extension root			$tmpInstaller->setPath('source', $this->parent->getPath('extension_root'));			if ($tmpInstaller->findManifest())			{				$old_manifest = $tmpInstaller->getManifest();				$this->oldFiles = $old_manifest->files;			}		}		/*		 * If we created the plugin directory and will want to remove it if we		 * have to roll back the installation, let's add it to the installation		 * step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_root')));		}		// Copy all necessary files		if ($this->parent->parseFiles($xml->files, -1, $this->oldFiles) === false)		{			// Install failed, roll back changes			$this->parent->abort();			return false;		}		// Parse optional tags -- media and language files for plugins go in admin app		$this->parent->parseMedia($xml->media, 1);		$this->parent->parseLanguages($xml->languages, 1);		// If there is a manifest script, lets copy it.		if ($this->get('manifest_script'))		{			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_root') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']))			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent						->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_MANIFEST', JText::_('JLIB_INSTALLER_' . $this->route)));					return false;				}			}		}		/*		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		$row = JTable::getInstance('extension');		// Was there a plugin with the same name already installed?		if ($id)		{			if (!$this->parent->isOverwrite())			{				// Install failed, roll back changes				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_PLG_INSTALL_ALLREADY_EXISTS', JText::_('JLIB_INSTALLER_' . $this->route),						$this->get('name')					)				);				return false;			}			$row->load($id);			$row->name = $this->get('name');			$row->manifest_cache = $this->parent->generateManifestCache();			// Update the manifest cache and name			$row->store();		}		else		{			// Store in the extensions table (1.6)			$row->name = $this->get('name');			$row->type = 'plugin';			$row->ordering = 0;			$row->element = $element;			$row->folder = $group;			$row->enabled = 0;			$row->protected = 0;			$row->access = 1;			$row->client_id = 0;			$row->params = $this->parent->getParams();			// Custom data			$row->custom_data = '';			// System data			$row->system_data = '';			$row->manifest_cache = $this->parent->generateManifestCache();			// Editor plugins are published by default			if ($group == 'editors')			{				$row->enabled = 1;			}			if (!$row->store())			{				// Install failed, roll back changes				$this->parent					->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}			// Since we have created a plugin item, we add it to the installation step stack			// so that if we have to rollback the changes we can undo it.			$this->parent->pushStep(array('type' => 'extension', 'id' => $row->extension_id));			$id = $row->extension_id;		}		// Let's run the queries for the plugin		if (strtolower($this->route) == 'install')		{			$result = $this->parent->parseSQLFiles($this->manifest->install->sql);			if ($result === false)			{				// Install failed, rollback changes				$this->parent					->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_SQL_ERROR', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}			// Set the schema version to be the latest update version			if ($this->manifest->update)			{				$this->parent->setSchemaVersion($this->manifest->update->schemas, $row->extension_id);			}		}		elseif (strtolower($this->route) == 'update')		{			if ($this->manifest->update)			{				$result = $this->parent->parseSchemaUpdates($this->manifest->update->schemas, $row->extension_id);				if ($result === false)				{					// Install failed, rollback changes					$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_UPDATE_SQL_ERROR', $db->stderr(true)));					return false;				}			}		}		// Run the custom method based on the route		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, $this->route))		{			if ($this->parent->manifestClass->{$this->route}($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PLG_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Lastly, we will copy the manifest file to its appropriate place.		if (!$this->parent->copyManifest(-1))		{			// Install failed, rollback changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_COPY_SETUP', JText::_('JLIB_INSTALLER_' . $this->route)));			return false;		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight($this->route, $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $id;	}	/**	 * Custom update method	 *	 * @return   boolean  True on success	 *	 * @since    3.1	 */	public function update()	{		// Set the overwrite setting		$this->parent->setOverwrite(true);		$this->parent->setUpgrade(true);		// Set the route for the install		$this->route = 'update';		// Go to install which handles updates properly		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   integer  $id  The id of the plugin to uninstall	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$this->route = 'uninstall';		$row = null;		$retval = true;		$db = $this->parent->getDbo();		// First order of business will be to load the plugin object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PLG_UNINSTALL_ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the plugin we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_PLG_UNINSTALL_WARNCOREPLUGIN', $row->name), JLog::WARNING, 'jerror');			return false;		}		// Get the plugin folder so we can properly build the plugin path		if (trim($row->folder) == '')		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PLG_UNINSTALL_FOLDER_FIELD_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		// Set the plugin root path		$this->parent->setPath('extension_root', JPATH_PLUGINS . '/' . $row->folder . '/' . $row->element);		$this->parent->setPath('source', $this->parent->getPath('extension_root'));		$this->parent->findManifest();		$this->manifest = $this->parent->getManifest();		// Attempt to load the language file; might have uninstall strings		$this->parent->setPath('source', JPATH_PLUGINS . '/' . $row->folder . '/' . $row->element);		$this->loadLanguage(JPATH_PLUGINS . '/' . $row->folder . '/' . $row->element);		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, let's load it; we'll copy it later (don't have dest yet)		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// If a dash is present in the folder, remove it			$folderClass = str_replace('-', '', $row->folder);			// Set the class name			$classname = 'plg' . $folderClass . $row->element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Preflight failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PLG_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create the $msg object and append messages from preflight		$msg = ob_get_contents();		ob_end_clean();		// Let's run the queries for the plugin		$utfresult = $this->parent->parseSQLFiles($this->manifest->uninstall->sql);		if ($utfresult === false)		{			// Install failed, rollback changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_UNINSTALL_SQL_ERROR', $db->stderr(true)));			return false;		}		// Run the custom uninstall method if possible		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))		{			$this->parent->manifestClass->uninstall($this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		// Remove the plugin files		$this->parent->removeFiles($this->manifest->files, -1);		// Remove all media and languages as well		$this->parent->removeFiles($this->manifest->media);		$this->parent->removeFiles($this->manifest->languages, 1);		// Remove the schema version		$query = $db->getQuery(true)			->delete('#__schemas')			->where('extension_id = ' . $row->extension_id);		$db->setQuery($query);		$db->execute();		// Now we will no longer need the plugin object, so let's delete it		$row->delete($row->extension_id);		unset($row);		// Remove the plugin's folder		JFolder::delete($this->parent->getPath('extension_root'));		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $retval;	}	/**	 * Custom discover method	 *	 * @return  array  JExtension) list of extensions available	 *	 * @since   3.1	 */	public function discover()	{		$results = array();		$folder_list = JFolder::folders(JPATH_SITE . '/plugins');		foreach ($folder_list as $folder)		{			$file_list = JFolder::files(JPATH_SITE . '/plugins/' . $folder, '\.xml$');			foreach ($file_list as $file)			{				$manifest_details = JInstaller::parseXMLInstallFile(JPATH_SITE . '/plugins/' . $folder . '/' . $file);				$file = JFile::stripExt($file);				// Ignore example plugins				if ($file == 'example')				{					continue;				}				$extension = JTable::getInstance('extension');				$extension->set('type', 'plugin');				$extension->set('client_id', 0);				$extension->set('element', $file);				$extension->set('folder', $folder);				$extension->set('name', $file);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}			$folder_list = JFolder::folders(JPATH_SITE . '/plugins/' . $folder);			foreach ($folder_list as $plugin_folder)			{				$file_list = JFolder::files(JPATH_SITE . '/plugins/' . $folder . '/' . $plugin_folder, '\.xml$');				foreach ($file_list as $file)				{					$manifest_details = JInstaller::parseXMLInstallFile(						JPATH_SITE . '/plugins/' . $folder . '/' . $plugin_folder . '/' . $file					);					$file = JFile::stripExt($file);					if ($file == 'example')					{						continue;					}					// Ignore example plugins					$extension = JTable::getInstance('extension');					$extension->set('type', 'plugin');					$extension->set('client_id', 0);					$extension->set('element', $file);					$extension->set('folder', $folder);					$extension->set('name', $file);					$extension->set('state', -1);					$extension->set('manifest_cache', json_encode($manifest_details));					$extension->set('params', '{}');					$results[] = $extension;				}			}		}		return $results;	}	/**	 * Custom discover_install method.	 *	 * @return  mixed	 *	 * @since   3.1	 */	public function discover_install()	{		/*		 * Plugins use the extensions table as their primary store		 * Similar to modules and templates, rather easy		 * If it's not in the extensions table we just add it		 */		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		if (is_dir($client->path . '/plugins/' . $this->parent->extension->folder . '/' . $this->parent->extension->element))		{			$manifestPath = $client->path . '/plugins/' . $this->parent->extension->folder . '/' . $this->parent->extension->element . '/'				. $this->parent->extension->element . '.xml';		}		else		{			$manifestPath = $client->path . '/plugins/' . $this->parent->extension->folder . '/' . $this->parent->extension->element . '.xml';		}		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$description = (string) $this->parent->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($manifestPath);		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = ('editors' == $this->parent->extension->folder) ? 1 : 0;		$this->parent->extension->params = $this->parent->getParams();		if ($this->parent->extension->store())		{			return $this->parent->extension->get('extension_id');		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PLG_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Refreshes the extension table cache.	 *	 * @return  boolean  Result of operation, true if updated, false on failure.	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		/*		 * Plugins use the extensions table as their primary store		 * Similar to modules and templates, rather easy		 * If it's not in the extensions table we just add it		 */		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/plugins/' . $this->parent->extension->folder . '/' . $this->parent->extension->element . '/'			. $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		if ($this->parent->extension->store())		{			return true;		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PLG_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterPlugin instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerPlugin extends JInstallerAdapterPlugin{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('behavior.modal');JHtml::_('formbehavior.chosen', 'select');$canDo = UsersHelper::getActions();$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn = $this->escape($this->state->get('list.direction'));$loggeduser = JFactory::getUser();?><form action="<?php echo JRoute::_('index.php?option=com_users&view=users');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<div id="filter-bar" class="btn-toolbar">		<div class="filter-search btn-group pull-left">			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_USERS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_USERS'); ?>" />		</div>		<div class="btn-group pull-left">			<button type="submit" class="btn tip" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>			<button type="button" class="btn tip" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_RESET'); ?>"><i class="icon-remove"></i></button>		</div>	</div>	<div class="clearfix"> </div>	<table class="table table-striped">		<thead>			<tr>				<th width="1%" class="nowrap center">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<th width="10%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_USERNAME', 'a.username', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ENABLED', 'a.block', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ACTIVATED', 'a.activation', $listDirn, $listOrder); ?>				</th>				<th width="10%" class="nowrap center">					<?php echo JText::_('COM_USERS_HEADING_GROUPS'); ?>				</th>				<th width="15%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_EMAIL', 'a.email', $listDirn, $listOrder); ?>				</th>				<th width="10%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LAST_VISIT_DATE', 'a.lastvisitDate', $listDirn, $listOrder); ?>				</th>				<th width="10%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_REGISTRATION_DATE', 'a.registerDate', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canEdit   = $canDo->get('core.edit');			$canChange = $loggeduser->authorise('core.edit.state',	'com_users');			// If this group is super admin and this user is not super admin, $canEdit is false			if ((!$loggeduser->authorise('core.admin')) && JAccess::check($item->id, 'core.admin'))			{				$canEdit   = false;				$canChange = false;			}		?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php if ($canEdit) : ?>						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					<?php endif; ?>				</td>				<td>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.(int) $item->id); ?>" title="<?php echo JText::sprintf('COM_USERS_EDIT_USER', $this->escape($item->name)); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>						<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<div>						<?php echo JHtml::_('users.filterNotes', $item->note_count, $item->id); ?>						<?php echo JHtml::_('users.notes', $item->note_count, $item->id); ?>						<?php echo JHtml::_('users.addNote', $item->id); ?>					</div>					<?php if (JDEBUG) : ?>						<div class="small"><a href="<?php echo JRoute::_('index.php?option=com_users&view=debuguser&user_id='.(int) $item->id);?>">						<?php echo JText::_('COM_USERS_DEBUG_USER');?></a></div>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->username); ?>				</td>				<td class="center">					<?php if ($canChange) : ?>						<?php						$self = $loggeduser->id == $item->id;						echo JHtml::_('jgrid.state', JHtmlUsers::blockStates($self), $item->block, $i, 'users.', !$self);						?>					<?php else : ?>						<?php echo JText::_($item->block ? 'JNO' : 'JYES'); ?>					<?php endif; ?>				</td>				<td class="center">					<?php					$activated = empty( $item->activation) ? 0 : 1;					echo JHtml::_('jgrid.state', JHtmlUsers::activateStates(), $activated, $i, 'users.', (boolean) $activated);					?>				</td>				<td class="center">					<?php if (substr_count($item->group_names, "\n") > 1) : ?>						<span class="hasTip" title="<?php echo JText::_('COM_USERS_HEADING_GROUPS').'::'.nl2br($item->group_names); ?>"><?php echo JText::_('COM_USERS_USERS_MULTIPLE_GROUPS'); ?></span>					<?php else : ?>						<?php echo nl2br($item->group_names); ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->email); ?>				</td>				<td class="center">					<?php if ($item->lastvisitDate != '0000-00-00 00:00:00'):?>						<?php echo JHtml::_('date', $item->lastvisitDate, 'Y-m-d H:i:s'); ?>					<?php else:?>						<?php echo JText::_('JNEVER'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo JHtml::_('date', $item->registerDate, 'Y-m-d H:i:s'); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of user group records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelGroups extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'parent_id', 'a.parent_id',				'title', 'a.title',				'lft', 'a.lft',				'rgt', 'a.rgt',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.search');		return parent::getStoreId($id);	}	/**	 * Gets the list of groups and adds expensive joins to the result set.	 *	 * @return  mixed  An array of data items on success, false on failure.	 * @since   1.6	 */	public function getItems()	{		$db = $this->getDbo();		// Get a storage key.		$store = $this->getStoreId();		// Try to load the data from internal storage.		if (empty($this->cache[$store]))		{			$items = parent::getItems();			// Bail out on an error or empty list.			if (empty($items))			{				$this->cache[$store] = $items;				return $items;			}			// First pass: get list of the group id's and reset the counts.			$groupIds = array();			foreach ($items as $item)			{				$groupIds[] = (int) $item->id;				$item->user_count = 0;			}			// Get the counts from the database only for the users in the list.			$query = $db->getQuery(true);			// Count the objects in the user group.			$query->select('map.group_id, COUNT(DISTINCT map.user_id) AS user_count')				->from($db->quoteName('#__user_usergroup_map') . ' AS map')				->where('map.group_id IN (' . implode(',', $groupIds) . ')')				->group('map.group_id');			$db->setQuery($query);			// Load the counts into an array indexed on the user id field.			try			{				$users = $db->loadObjectList('group_id');			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage);				return false;			}			// Second pass: collect the group counts into the master items array.			foreach ($items as &$item)			{				if (isset($users[$item->id]))				{					$item->user_count = $users[$item->id]->user_count;				}			}			// Add the items to the internal cache.			$this->cache[$store] = $items;		}		return $this->cache[$store];	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.*'			)		);		$query->from($db->quoteName('#__usergroups') . ' AS a');		// Add the level in the tree.		$query->select('COUNT(DISTINCT c2.id) AS level')			->join('LEFT OUTER', $db->quoteName('#__usergroups') . ' AS c2 ON a.lft > c2.lft AND a.rgt < c2.rgt')			->group('a.id, a.lft, a.rgt, a.parent_id, a.title');		// Filter the comments over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.title LIKE ' . $search);			}		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * An editarea field for content creation * * @package     Joomla.Libraries * @subpackage  Form * @see         JEditor * @since       1.6 */class JFormFieldEditor extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'Editor';	/**	 * The JEditor object.	 *	 * @var    JEditor	 * @since  1.6	 */	protected $editor;	/**	 * Method to get the field input markup for the editor area	 *	 * @return  string  The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		$rows        = (int) $this->element['rows'];		$cols        = (int) $this->element['cols'];		$height      = ((string) $this->element['height']) ? (string) $this->element['height'] : '250';		$width       = ((string) $this->element['width']) ? (string) $this->element['width'] : '100%';		$assetField  = $this->element['asset_field'] ? (string) $this->element['asset_field'] : 'asset_id';		$authorField = $this->element['created_by_field'] ? (string) $this->element['created_by_field'] : 'created_by';		$asset       = $this->form->getValue($assetField) ? $this->form->getValue($assetField) : (string) $this->element['asset_id'];		// Build the buttons array.		$buttons = (string) $this->element['buttons'];		if ($buttons == 'true' || $buttons == 'yes' || $buttons == '1')		{			$buttons = true;		}		elseif ($buttons == 'false' || $buttons == 'no' || $buttons == '0')		{			$buttons = false;		}		else		{			$buttons = explode(',', $buttons);		}		$hide = ((string) $this->element['hide']) ? explode(',', (string) $this->element['hide']) : array();		// Get an editor object.		$editor = $this->getEditor();		return $editor			->display(			$this->name, htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8'), $width, $height, $cols, $rows,			$buttons ? (is_array($buttons) ? array_merge($buttons, $hide) : $hide) : false, $this->id, $asset,			$this->form->getValue($authorField)		);	}	/**	 * Method to get a JEditor object based on the form field.	 *	 * @return  JEditor  The JEditor object.	 *	 * @since   1.6	 */	protected function getEditor()	{		// Only create the editor if it is not already created.		if (empty($this->editor))		{			$editor = null;			// Get the editor type attribute. Can be in the form of: editor="desired|alternative".			$type = trim((string) $this->element['editor']);			if ($type)			{				// Get the list of editor types.				$types = explode('|', $type);				// Get the database object.				$db = JFactory::getDbo();				// Iterate over teh types looking for an existing editor.				foreach ($types as $element)				{					// Build the query.					$query = $db->getQuery(true)						->select('element')						->from('#__extensions')						->where('element = ' . $db->quote($element))						->where('folder = ' . $db->quote('editors'))						->where('enabled = 1');					// Check of the editor exists.					$db->setQuery($query, 0, 1);					$editor = $db->loadResult();					// If an editor was found stop looking.					if ($editor)					{						break;					}				}			}			// Create the JEditor instance based on the given editor.			if (is_null($editor))			{				$conf = JFactory::getConfig();				$editor = $conf->get('editor');			}			$this->editor = JEditor::getInstance($editor);		}		return $this->editor;	}	/**	 * Method to get the JEditor output for an onSave event.	 *	 * @return  string  The JEditor object output.	 *	 * @since   1.6	 */	public function save()	{		return $this->getEditor()->save($this->id);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Code to support edit links for weblinks// Create a shortcut for params.$params = &$this->item->params;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Get the user object.$user = JFactory::getUser();// Check if user is allowed to add/edit based on weblinks permissinos.$canEdit = $user->authorise('core.edit', 'com_weblinks');$canCreate = $user->authorise('core.create', 'com_weblinks');$canEditState = $user->authorise('core.edit.state', 'com_weblinks');$n = count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_WEBLINKS_NO_WEBLINKS'); ?></p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search"><span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php echo JText::_('COM_WEBLINKS_FILTER_LABEL').'&#160;'; ?></label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_WEBLINKS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_WEBLINKS_FILTER_SEARCH_DESC'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>	</fieldset>	<?php endif; ?>		<ul class="category list-striped list-condensed">			<?php foreach ($this->items as $i => $item) : ?>				<?php if (in_array($item->access, $this->user->getAuthorisedViewLevels())) : ?>					<?php if ($this->items[$i]->state == 0) : ?>						<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">					<?php else: ?>						<li class="cat-list-row<?php echo $i % 2; ?>" >					<?php endif; ?>					<?php if ($this->params->get('show_link_hits', 1)) : ?>						<span class="list-hits badge badge-info pull-right">							<?php echo JText::sprintf('JGLOBAL_HITS_COUNT', $item->hits); ?>						</span>					<?php endif; ?>					<?php if ($canEdit) : ?>						<span class="list-edit pull-left width-50">							<?php echo JHtml::_('icon.edit', $item, $params); ?>						</span>					<?php endif; ?>					<strong class="list-title">						<?php if ($this->params->get('icons') == 0) : ?>							 <?php echo JText::_('COM_WEBLINKS_LINK'); ?>						<?php elseif ($this->params->get('icons') == 1) : ?>							<?php if (!$this->params->get('link_icons')) : ?>								<?php echo JHtml::_('image', 'system/'.$this->params->get('link_icons', 'weblink.png'), JText::_('COM_WEBLINKS_LINK'), null, true); ?>							<?php else: ?>								<?php echo '<img src="'.$this->params->get('link_icons').'" alt="'.JText::_('COM_WEBLINKS_LINK').'" />'; ?>							<?php endif; ?>						<?php endif; ?>						<?php							// Compute the correct link							$menuclass = 'category'.$this->pageclass_sfx;							$link = $item->link;							$width	= $item->params->get('width');							$height	= $item->params->get('height');							if ($width == null || $height == null)							{								$width	= 600;								$height	= 500;							}							if ($this->items[$i]->state == 0) : ?>								<span class="label label-warning">Unpublished</span>							<?php endif; ?>							<?php switch ($item->params->get('target', $this->params->get('target')))							{								case 1:									// open in a new window									echo '<a href="'. $link .'" target="_blank" class="'. $menuclass .'" rel="nofollow">'.										$this->escape($item->title) .'</a>';									break;								case 2:									// open in a popup window									$attribs = 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width='.$this->escape($width).',height='.$this->escape($height).'';									echo "<a href=\"$link\" onclick=\"window.open(this.href, 'targetWindow', '".$attribs."'); return false;\">".										$this->escape($item->title).'</a>';									break;								case 3:									// open in a modal window									JHtml::_('behavior.modal', 'a.modal'); ?>									<a class="modal" href="<?php echo $link;?>"  rel="{handler: 'iframe', size: {x:<?php echo $this->escape($width);?>, y:<?php echo $this->escape($height);?>}}">										<?php echo $this->escape($item->title). ' </a>';									break;								default:									// open in parent window									echo '<a href="'.  $link . '" class="'. $menuclass .'" rel="nofollow">'.										$this->escape($item->title) . ' </a>';									break;							}						?>						</strong>						<?php $tagsData = $item->tags->getItemTags('com_weblinks.weblink', $item->id); ?>						<?php if ($this->params->get('show_tags', 1)) : ?>							<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>							<?php echo $this->item->tagLayout->render($tagsData); ?>						<?php endif; ?>						<?php if (($this->params->get('show_link_description')) and ($item->description != '')) : ?>							<?php echo $item->description; ?>						<?php endif; ?>						</li>				<?php endif;?>			<?php endforeach; ?>		</ul>		<?php // Code to add a link to submit a weblink. ?>		<?php /* if ($canCreate) : // TODO This is not working due to some problem in the router, I think. Ref issue #23685 ?>			<?php echo JHtml::_('icon.create', $item, $item->params); ?>		<?php  endif; */ ?>		<?php if ($this->params->get('show_pagination')) : ?>		 <div class="pagination">			<?php if ($this->params->def('show_pagination_results', 1)) : ?>				<p class="counter">					<?php echo $this->pagination->getPagesCounter(); ?>				</p>			<?php endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>			</div>		<?php endif; ?>	</form><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Update class. * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 */class JUpdate extends JObject{	/**	 * @var    string	 * @since  11.1	 */	protected $name;	/**	 * @var    string	 * @since  11.1	 */	protected $description;	/**	 * @var    string	 * @since  11.1	 */	protected $element;	/**	 * @var    string	 * @since  11.1	 */	protected $type;	/**	 * @var    string	 * @since  11.1	 */	protected $version;	/**	 * @var    string	 * @since  11.1	 */	protected $infourl;	/**	 * @var    string	 * @since  11.1	 */	protected $client;	/**	 * @var    string	 * @since  11.1	 */	protected $group;	/**	 * @var    string	 * @since  11.1	 */	protected $downloads;	/**	 * @var    string	 * @since  11.1	 */	protected $tags;	/**	 * @var    string	 * @since  11.1	 */	protected $maintainer;	/**	 * @var    string	 * @since  11.1	 */	protected $maintainerurl;	/**	 * @var    string	 * @since  11.1	 */	protected $category;	/**	 * @var    string	 * @since  11.1	 */	protected $relationships;	/**	 * @var    string	 * @since  11.1	 */	protected $targetplatform;	/**	 * @var    string	 * @since  12.1	 */	protected $xmlParser;	/**	 * @var    array	 * @since  12.1	 */	protected $stack = array('base');	/**	 * @var    array	 * @since  12.1	 */	protected $stateStore = array();	/**	 * @var    stdClass	 * @since  12.1	 */	protected $currentUpdate;	/**	 * @var    stdClass	 * @since  12.1	 */	protected $latest;	/**	 * Gets the reference to the current direct parent	 *	 * @return  object	 *	 * @since   11.1	 */	protected function _getStackLocation()	{		return implode('->', $this->stack);	}	/**	 * Get the last position in stack count	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getLastTag()	{		return $this->stack[count($this->stack) - 1];	}	/**	 * XML Start Element callback	 *	 * @param   object  $parser  Parser object	 * @param   string  $name    Name of the tag found	 * @param   array   $attrs   Attributes of the tag	 *	 * @return  void	 *	 * @note    This is public because it is called externally	 * @since   11.1	 */	public function _startElement($parser, $name, $attrs = array())	{		array_push($this->stack, $name);		$tag = $this->_getStackLocation();		// Reset the data		if (isset($this->$tag))		{			$this->$tag->_data = "";		}		switch ($name)		{			// This is a new update; create a current update			case 'UPDATE':				$this->currentUpdate = new stdClass;				break;			// Don't do anything			case 'UPDATES':				break;			// For everything else there's...the default!			default:				$name = strtolower($name);				if (!isset($this->currentUpdate->$name))				{					$this->currentUpdate->$name = new stdClass;				}				$this->currentUpdate->$name->_data = '';				foreach ($attrs as $key => $data)				{					$key = strtolower($key);					$this->currentUpdate->$name->$key = $data;				}				break;		}	}	/**	 * Callback for closing the element	 *	 * @param   object  $parser  Parser object	 * @param   string  $name    Name of element that was closed	 *	 * @return  void	 *	 * @note This is public because it is called externally	 * @since  11.1	 */	public function _endElement($parser, $name)	{		array_pop($this->stack);		switch ($name)		{			// Closing update, find the latest version and check			case 'UPDATE':				$ver = new JVersion;				$product = strtolower(JFilterInput::getInstance()->clean($ver->PRODUCT, 'cmd'));				// Check for optional min_dev_level and max_dev_level attributes to further specify targetplatform (e.g., 3.0.1)				if (isset($this->currentUpdate->targetplatform->name)					&& $product == $this->currentUpdate->targetplatform->name					&& preg_match('/' . $this->currentUpdate->targetplatform->version . '/', $ver->RELEASE)					&& ((!isset($this->currentUpdate->targetplatform->min_dev_level)) || $ver->DEV_LEVEL >= $this->currentUpdate->targetplatform->min_dev_level)					&& ((!isset($this->currentUpdate->targetplatform->max_dev_level)) || $ver->DEV_LEVEL <= $this->currentUpdate->targetplatform->max_dev_level))				{					if (isset($this->latest))					{						if (version_compare($this->currentUpdate->version->_data, $this->latest->version->_data, '>') == 1)						{							$this->latest = $this->currentUpdate;						}					}					else					{						$this->latest = $this->currentUpdate;					}				}				break;			case 'UPDATES':				// If the latest item is set then we transfer it to where we want to				if (isset($this->latest))				{					foreach (get_object_vars($this->latest) as $key => $val)					{						$this->$key = $val;					}					unset($this->latest);					unset($this->currentUpdate);				}				elseif (isset($this->currentUpdate))				{					// The update might be for an older version of j!					unset($this->currentUpdate);				}				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $data    The data.	 *	 * @return  void	 *	 * @note    This is public because its called externally.	 * @since   11.1	 */	public function _characterData($parser, $data)	{		$tag = $this->_getLastTag();		// @todo remove code: if(!isset($this->$tag->_data)) $this->$tag->_data = '';		// @todo remove code: $this->$tag->_data .= $data;		// Throw the data for this item together		$tag = strtolower($tag);		if (isset($this->currentUpdate->$tag))		{			$this->currentUpdate->$tag->_data .= $data;		}	}	/**	 * Loads an XML file from a URL.	 *	 * @param   string  $url  The URL.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadFromXML($url)	{		$http = JHttpFactory::getHttp();		$response = $http->get($url);		if (200 != $response->code)		{			// TODO: Add a 'mark bad' setting here somehow			JLog::add(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_OPEN_URL', $url), JLog::WARNING, 'jerror');			return false;		}		$this->xmlParser = xml_parser_create('');		xml_set_object($this->xmlParser, $this);		xml_set_element_handler($this->xmlParser, '_startElement', '_endElement');		xml_set_character_data_handler($this->xmlParser, '_characterData');		if (!xml_parse($this->xmlParser, $response->body))		{			die(				sprintf(					"XML error: %s at line %d", xml_error_string(xml_get_error_code($this->xmlParser)),					xml_get_current_line_number($this->xmlParser)				)			);		}		xml_parser_free($this->xmlParser);		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_ARTICLES'); ?>	 </p><?php else : ?>	<form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search"><span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php echo JText::_('COM_CONTACT_FILTER_LABEL').'&#160;'; ?></label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>	</fieldset>	<?php endif; ?>		<ul class="category list-striped">			<?php foreach ($this->items as $i => $item) : ?>				<?php if (in_array($item->access, $this->user->getAuthorisedViewLevels())) : ?>					<?php if ($this->items[$i]->published == 0) : ?>						<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">					<?php else: ?>						<li class="cat-list-row<?php echo $i % 2; ?>" >					<?php endif; ?>						<span class="pull-right">							<?php if ($this->params->get('show_telephone_headings') AND !empty($item->telephone)) : ?>								<?php echo JTEXT::sprintf('COM_CONTACT_TELEPHONE_NUMBER', $item->telephone); ?><br/>							<?php endif; ?>							<?php if ($this->params->get('show_mobile_headings') AND !empty ($item->mobile)) : ?>									<?php echo JTEXT::sprintf('COM_CONTACT_MOBILE_NUMBER', $item->mobile); ?><br/>							<?php endif; ?>							<?php if ($this->params->get('show_fax_headings') AND !empty($item->fax) ) : ?>								<?php echo JTEXT::sprintf('COM_CONTACT_FAX_NUMBER', $item->fax); ?><br/>							<?php endif; ?>					</span>					<p>						<strong class="list-title">							<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">								<?php echo $item->name; ?></a>							<?php if ($this->items[$i]->published == 0) : ?>								<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>							<?php endif; ?>						</strong><br/>						<?php if ($this->params->get('show_position_headings')) : ?>								<?php echo $item->con_position; ?><br/>						<?php endif; ?>						<?php if ($this->params->get('show_email_headings')) : ?>								<?php echo $item->email_to; ?>						<?php endif; ?>						<?php if ($this->params->get('show_suburb_headings') AND !empty($item->suburb)) : ?>							<?php echo $item->suburb . ', '; ?>						<?php endif; ?>						<?php if ($this->params->get('show_state_headings') AND !empty($item->state)) : ?>							<?php echo $item->state . ', '; ?>						<?php endif; ?>						<?php if ($this->params->get('show_country_headings') AND !empty($item->country)) : ?>							<?php echo $item->country; ?><br/>						<?php endif; ?>					</p>					</li>				<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php if ($this->params->get('show_pagination')) : ?>		<div class="pagination">			<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>			<?php endif; ?>			<?php echo $this->pagination->getPagesLinks(); ?>		</div>		<?php endif; ?>		<div>			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		</div></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');$canDo = UsersHelper::getActions();?><script type="text/javascript">Joomla.submitbutton = function(task){	if (task == 'level.cancel' || document.formvalidator.isValid(document.id('level-form')))	{		Joomla.submitform(task, document.id('level-form'));	}}/*window.addEvent('domready', function(){	document.id('user-groups').getElements('input').each(function(i){		// Event to check all child groups.		i.addEvent('check', function(e){			// Check the child groups.			document.id('user-groups').getElements('input').each(function(c){				if (this.getProperty('rel') == c.id)				{					c.setProperty('checked', true);					c.setProperty('disabled', true);					c.fireEvent('check');				}			}.bind(this));		}.bind(i));		// Event to uncheck all the parent groups.		i.addEvent('uncheck', function(e){			// Uncheck the parent groups.			document.id('user-groups').getElements('input').each(function(c){				if (c.getProperty('rel') == this.id)				{					c.setProperty('checked', false);					c.setProperty('disabled', false);					c.fireEvent('uncheck');				}			}.bind(this));		}.bind(i));		// Bind to the click event to check/uncheck child/parent groups.		i.addEvent('click', function(e){			// Check the child groups.			document.id('user-groups').getElements('input').each(function(c){				if (this.getProperty('rel') == c.id)				{					c.setProperty('checked', true);					if (this.getProperty('checked'))					{						c.setProperty('disabled', true);					} else {						c.setProperty('disabled', false);					}					c.fireEvent('check');				}			}.bind(this));			// Uncheck the parent groups.			document.id('user-groups').getElements('input').each(function(c){				if (c.getProperty('rel') == this.id)				{					c.setProperty('checked', false);					c.setProperty('disabled', false);					c.fireEvent('uncheck');				}			}.bind(this));		}.bind(i));		// Initialise the widget.		if (i.getProperty('checked'))		{			i.fireEvent('click');		}	});});*/</script><form action="<?php echo JRoute::_('index.php?option=com_users&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="level-form" class="form-validate form-horizontal">	<fieldset>		<legend><?php echo JText::_('COM_USERS_LEVEL_DETAILS');?></legend>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('title'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('title'); ?>			</div>		</div>	</fieldset>	<fieldset>		<legend><?php echo JText::_('COM_USERS_USER_GROUPS_HAVING_ACCESS');?></legend>		<?php echo JHtml::_('access.usergroups', 'jform[rules]', $this->item->rules); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Article View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewForm extends JViewLegacy{	protected $form;	protected $item;	protected $return_page;	protected $state;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		// Get model data.		$this->state		= $this->get('State');		$this->item			= $this->get('Item');		$this->form			= $this->get('Form');		$this->return_page	= $this->get('ReturnPage');		if (empty($this->item->id))		{			$authorised = $user->authorise('core.create', 'com_content') || (count($user->getAuthorisedCategories('com_content', 'core.create')));		}		else		{			$authorised = $this->item->params->get('access-edit');		}		if ($authorised !== true)		{			JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			return false;		}		$this->item->tags = new JHelperTags;		if (!empty($this->item->id))		{			$this->item->tags->getItemTags('com_content.article.', $this->item->id);		}		if (!empty($this->item) && isset($this->item->id))		{			$this->item->images = json_decode($this->item->images);			$this->item->urls = json_decode($this->item->urls);			$tmp = new stdClass;			$tmp->images = $this->item->images;			$tmp->urls = $this->item->urls;			$this->form->bind($tmp);		}		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Create a shortcut to the parameters.		$params	= &$this->state->params;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params = $params;		$this->user   = $user;		if ($params->get('enable_category') == 1)		{			$this->form->setFieldAttribute('catid', 'default', $params->get('catid', 1));			$this->form->setFieldAttribute('catid', 'readonly', 'true');		}		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTENT_FORM_EDIT_ARTICLE'));		}		$title = $this->params->def('page_title', JText::_('COM_CONTENT_FORM_EDIT_ARTICLE'));		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		$pathway = $app->getPathWay();		$pathway->addItem($title, '');		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Update table * Stores updates temporarily * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableUpdate extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__updates', 'update_id', $db);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True if the object is ok	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// Check for valid name		if (trim($this->name) == '' || trim($this->element) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MUSTCONTAIN_A_TITLE_EXTENSION'));			return false;		}		return true;	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 *                          to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['control']) && is_array($array['control']))		{			$registry = new JRegistry;			$registry->loadArray($array['control']);			$array['control'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Method to create and execute a SELECT WHERE query.	 *	 * @param   array  $options  Array of options	 *	 * @return  string  Results of query	 *	 * @since   11.1	 */	public function find($options = array())	{		$where = array();		foreach ($options as $col => $val)		{			$where[] = $col . ' = ' . $this->_db->quote($val);		}		$query = $this->_db->getQuery(true)			->select($this->_db->quoteName($this->_tbl_key))			->from($this->_db->quoteName($this->_tbl))			->where(implode(' AND ', $where));		$this->_db->setQuery($query);		return $this->_db->loadResult();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for interact with Openstreetmap API. * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmap{	/**	 * @var    JRegistry  Options for the Openstreetmap object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp      The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var   JOpenstreetmapOauth  The OAuth client.	 * @since 13.1	 */	protected $oauth;	/**	 * @var    JOpenstreetmapChangesets  Openstreetmap API object for changesets.	 * @since  13.1	 */	protected $changesets;	/**	 * @var    JOpenstreetmapElements  Openstreetmap API object for elements.	 * @since  13.1	 */	protected $elements;	/**	 * @var   JOpenstreetmapGps  Openstreetmap API object for gps.	 * @since  13.1	 */	protected $gps;	/**	 * @var    JOpenstreetmapInfo  Openstreetmap API object for info.	 * @since  13.1	 */	protected $info;	/**	 * @var    JOpenstreetmapUser  Openstreetmap API object for user.	 * @since  13.1	 */	protected $user;	/**	 * Constructor.	 *	 * @param   JOpenstreetmapOauth  $oauth    Openstreetmap oauth client.	 * @param   JRegistry            $options  Openstreetmap options object.	 * @param   JOpenstreetmapHttp   $client   The HTTP client object.	 *	 * @since   13.1	 */	public function __construct(JOpenstreetmapOauth $oauth = null, JRegistry $options = null, JHttp $client = null)	{		$this->oauth = $oauth;		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'http://api.openstreetmap.org/api/0.6/');		// $this->options->def('api.url', 'http://api06.dev.openstreetmap.org/api/0.6/');	}	/**		 * Method to get object instances	 * 	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JOpenstreetmapObject  Openstreetmap API object .	 *	 * @since   13.1	 */	public function __get($name)	{		switch ($name)		{			case 'changesets':				if ($this->changesets == null)				{					$this->changesets = new JOpenstreetmapChangesets($this->options, $this->client, $this->oauth);				}				return $this->changesets;			case 'elements':				if ($this->elements == null)				{					$this->elements = new JOpenstreetmapElements($this->options, $this->client, $this->oauth);				}				return $this->elements;			case 'gps':				if ($this->gps == null)				{					$this->gps = new JOpenstreetmapGps($this->options, $this->client, $this->oauth);				}				return $this->gps;			case 'info':				if ($this->info == null)				{					$this->info = new JOpenstreetmapInfo($this->options, $this->client, $this->oauth);				}				return $this->info;			case 'user':				if ($this->user == null)				{					$this->user = new JOpenstreetmapUser($this->options, $this->client, $this->oauth);				}				return $this->user;		}	}	/**	 * Get an option from the JOpenstreetmap instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the Openstreetmap instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JOpenstreetmap  This object for method chaining.	 *	 * @since   13.1	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactModelContact extends JModelForm{	/**	 * @since   1.6	 */	protected $view_item = 'contact';	protected $_item = null;	/**	 * Model context string.	 *	 * @var		string	 */	protected $_context = 'com_contact.contact';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pk = $app->input->getInt('id');		$this->setState('contact.id', $pk);		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_contact')) &&  (!$user->authorise('core.edit', 'com_contact'))){			$this->setState('filter.published', 1);			$this->setState('filter.archived', 2);		}	}	/**	 * Method to get the contact form.	 *	 * The base form is loaded from XML and then an event is fired	 *	 *	 * @param   array  $data		An optional array of data for the form to interrogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_contact.contact', 'contact', array('control' => 'jform', 'load_data' => true));		if (empty($form))		{			return false;		}		$id = $this->getState('contact.id');		$params = $this->getState('params');		$contact = $this->_item[$id];		$params->merge($contact->params);		if (!$params->get('show_email_copy', 0)){			$form->removeField('contact_email_copy');		}		return $form;	}	protected function loadFormData()	{		$data = (array) JFactory::getApplication()->getUserState('com_contact.contact.data', array());		$this->preprocessData('com_contact.contact', $data);		return $data;	}	/**	 * Gets a contact	 *	 * @param integer $pk  Id for the contact	 *	 * @return mixed Object or null	 */	public function &getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');		if ($this->_item === null)		{			$this->_item = array();		}		if (!isset($this->_item[$pk]))		{			try			{				$db = $this->getDbo();				$query = $db->getQuery(true);				//sqlsrv changes				$case_when = ' CASE WHEN ';				$case_when .= $query->charLength('a.alias', '!=', '0');				$case_when .= ' THEN ';				$a_id = $query->castAsChar('a.id');				$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');				$case_when .= ' ELSE ';				$case_when .= $a_id.' END as slug';				$case_when1 = ' CASE WHEN ';				$case_when1 .= $query->charLength('c.alias', '!=', '0');				$case_when1 .= ' THEN ';				$c_id = $query->castAsChar('c.id');				$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');				$case_when1 .= ' ELSE ';				$case_when1 .= $c_id.' END as catslug';				$query->select($this->getState('item.select', 'a.*') . ','.$case_when.','.$case_when1)					->from('#__contact_details AS a')				// Join on category table.					->select('c.title AS category_title, c.alias AS category_alias, c.access AS category_access')					->join('LEFT', '#__categories AS c on c.id = a.catid')				// Join over the categories to get parent category titles					->select('parent.title as parent_title, parent.id as parent_id, parent.path as parent_route, parent.alias as parent_alias')					->join('LEFT', '#__categories as parent ON parent.id = c.parent_id')					->where('a.id = ' . (int) $pk);				// Filter by start and end dates.				$nullDate = $db->quote($db->getNullDate());				$nowDate = $db->quote(JFactory::getDate()->toSql());				// Filter by published state.				$published = $this->getState('filter.published');				$archived = $this->getState('filter.archived');				if (is_numeric($published))				{					$query->where('(a.published = ' . (int) $published . ' OR a.published =' . (int) $archived . ')')						->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')						->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');				}				$db->setQuery($query);				$data = $db->loadObject();				if (empty($data))				{					JError::raiseError(404, JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'));				}				// Check for published state if filter set.				if (((is_numeric($published)) || (is_numeric($archived))) && (($data->published != $published) && ($data->published != $archived)))				{					JError::raiseError(404, JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'));				}				// Convert parameter fields to objects.				$registry = new JRegistry;				$registry->loadString($data->params);				$data->params = clone $this->getState('params');				$data->params->merge($registry);				$registry = new JRegistry;				$registry->loadString($data->metadata);				$data->metadata = $registry;				$data->tags = new JHelperTags;				$data->tags->getItemTags('com_contact.contact', $data->id);				// Compute access permissions.				if ($access = $this->getState('filter.access')) {					// If the access filter has been set, we already know this user can view.					$data->params->set('access-view', true);				}				else {					// If no access filter is set, the layout takes some responsibility for display of limited information.					$user = JFactory::getUser();					$groups = $user->getAuthorisedViewLevels();					if ($data->catid == 0 || $data->category_access === null)					{						$data->params->set('access-view', in_array($data->access, $groups));					}					else {						$data->params->set('access-view', in_array($data->access, $groups) && in_array($data->category_access, $groups));					}				}				$this->_item[$pk] = $data;			}			catch (Exception $e)			{				$this->setError($e);				$this->_item[$pk] = false;			}		}		if ($this->_item[$pk])		{			if ($extendedData = $this->getContactQuery($pk))			{				$this->_item[$pk]->articles = $extendedData->articles;				$this->_item[$pk]->profile = $extendedData->profile;			}		}		return $this->_item[$pk];	}	protected function getContactQuery($pk = null)	{		// TODO: Cache on the fingerprint of the arguments		$db		= $this->getDbo();		$user	= JFactory::getUser();		$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');		$query	= $db->getQuery(true);		if ($pk)		{			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id.' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('cc.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('cc.id');			$case_when1 .= $query->concatenate(array($c_id, 'cc.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id.' END as catslug';			$query->select(				'a.*, cc.access as category_access, cc.title as category_name, '				. $case_when . ',' . $case_when1			)				->from('#__contact_details AS a')				->join('INNER', '#__categories AS cc on cc.id = a.catid')				->where('a.id = ' . (int) $pk);			$published = $this->getState('filter.published');			$archived = $this->getState('filter.archived');			if (is_numeric($published))			{				$query->where('a.published IN (1,2)')					->where('cc.published IN (1,2)');			}			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN ('.$groups.')');			try			{				$db->setQuery($query);				$result = $db->loadObject();				if (empty($result))				{					throw new Exception(JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'), 404);				}			// If we are showing a contact list, then the contact parameters take priority			// So merge the contact parameters with the merged parameters				if ($this->getState('params')->get('show_contact_list'))				{					$registry = new JRegistry;					$registry->loadString($result->params);					$this->getState('params')->merge($registry);				}			}			catch (Exception $e)			{				$this->setError($e);				return false;			}			if ($result)			{				$user	= JFactory::getUser();				$groups	= implode(',', $user->getAuthorisedViewLevels());				//get the content by the linked user				$query	= $db->getQuery(true)					->select('a.id')					->select('a.title')					->select('a.state')					->select('a.access')					->select('a.created');				// SQL Server changes				$case_when = ' CASE WHEN ';				$case_when .= $query->charLength('a.alias', '!=', '0');				$case_when .= ' THEN ';				$a_id = $query->castAsChar('a.id');				$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');				$case_when .= ' ELSE ';				$case_when .= $a_id.' END as slug';				$case_when1 = ' CASE WHEN ';				$case_when1 .= $query->charLength('c.alias', '!=', '0');				$case_when1 .= ' THEN ';				$c_id = $query->castAsChar('c.id');				$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');				$case_when1 .= ' ELSE ';				$case_when1 .= $c_id.' END as catslug';				$query->select($case_when1 . ',' . $case_when)					->from('#__content as a')					->join('LEFT', '#__categories as c on a.catid=c.id')					->where('a.created_by = ' . (int) $result->user_id)					->where('a.access IN ('. $groups.')')					->order('a.state DESC, a.created DESC');				// filter per language if plugin published				if (JLanguageMultilang::isEnabled())				{					$query->where(('a.created_by = ' . (int) $result->user_id) AND ('a.language=' . $db->quote(JFactory::getLanguage()->getTag()) . ' OR a.language=' . $db->quote('*')));				}				if (is_numeric($published))				{					$query->where('a.state IN (1,2)');				}				$db->setQuery($query, 0, 10);				$articles = $db->loadObjectList();				$result->articles = $articles;				//get the profile information for the linked user				require_once JPATH_ADMINISTRATOR.'/components/com_users/models/user.php';				$userModel = JModelLegacy::getInstance('User', 'UsersModel', array('ignore_request' => true));				$data = $userModel->getItem((int) $result->user_id);				JPluginHelper::importPlugin('user');				$form = new JForm('com_users.profile');				// Get the dispatcher.				$dispatcher	= JEventDispatcher::getInstance();				// Trigger the form preparation event.				$dispatcher->trigger('onContentPrepareForm', array($form, $data));				// Trigger the data preparation event.				$dispatcher->trigger('onContentPrepareData', array('com_users.profile', $data));				// Load the data into the form after the plugins have operated.				$form->bind($data);				$result->profile = $form;				$this->contact = $result;				return $result;			}		}	}	/**	 * Increment the hit counter for the contact.	 *	 * @param   int  $pk  Optional primary key of the article to increment.	 *	 * @return  boolean  True if successful; false otherwise and internal error set.	 *	 * @since   3.0	 */	public function hit($pk = 0)	{		$input = JFactory::getApplication()->input;		$hitcount = $input->getInt('hitcount', 1);		if ($hitcount)		{			$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__contact_details' .				' SET hits = hits + 1' .				' WHERE id = '.(int) $pk			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'weblink.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit<?php echo $this->pageclass_sfx; ?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_weblinks&view=form&w_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-vertical">		<div class="btn-toolbar">			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('weblink.save')">					<span class="icon-ok"></span> <?php echo JText::_('JSAVE') ?>				</button>			</div>			<div class="btn-group">				<button type="button" class="btn" onclick="Joomla.submitbutton('weblink.cancel')">					<span class="icon-cancel"></span> <?php echo JText::_('JCANCEL') ?>				</button>			</div>		</div>		<hr class="hr-condensed" />		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('title'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('title'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('alias'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('alias'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('catid'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('catid'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('url'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('url'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('tags', 'metadata'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('tags', 'metadata'); ?>			</div>		</div>		<?php if ($this->user->authorise('core.edit.state', 'com_weblinks.weblink')) : ?>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>		<?php endif; ?>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('language'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('language'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('description'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('description'); ?>			</div>		</div>		<input type="hidden" name="return" value="<?php echo $this->return_page;?>" />		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banner model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelBanner extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_BANNERS_BANNER';	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array   $commands   An array of commands to perform.	 * @param   array   $pks        An array of item ids.	 * @param   array   $contexts   An array of item contexts.	 *	 * @return  boolean   Returns true on success, false on failure.	 *	 * @since	2.5	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['category_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['category_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['category_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (strlen($commands['client_id']) > 0)		{			if (!$this->batchClient($commands['client_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch client changes for a group of banners.	 *	 * @param   string  $value     The new value matching a client.	 * @param   array   $pks       An array of row IDs.	 * @param   array   $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchClient($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->cid = (int) $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since	2.5	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_banners.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->name);			$table->name = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			//$table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i]	= $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 *	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->state != -2)			{				return;			}			$user = JFactory::getUser();			if (!empty($record->catid))			{				return $user->authorise('core.delete', 'com_banners.category.' . (int) $record->catid);			}			else			{				return parent::canDelete($record);			}		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 *	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check against the category.		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_banners.category.' . (int) $record->catid);		}		// Default to component settings if category not known.		else		{			return parent::canEditState($record);		}	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   1.6	 */	public function getTable($type = 'Banner', $prefix = 'BannersTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form. [optional]	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not. [optional]	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.banner', 'banner', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Determine correct permissions to check.		if ($this->getState('banner.id'))		{			// Existing record. Can only edit in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit');		}		else		{			// New record. Can only create in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.create');		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			$form->setFieldAttribute('state', 'disabled', 'true');			$form->setFieldAttribute('sticky', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');			$form->setFieldAttribute('state', 'filter', 'unset');			$form->setFieldAttribute('sticky', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$app  = JFactory::getApplication();		$data = $app->getUserState('com_banners.edit.banner.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('banner.id') == 0)			{				$data->set('catid', $app->input->getInt('catid', $app->getUserState('com_banners.banners.filter.category_id')));			}		}		$this->preprocessData('com_banners.banner', $data);		return $data;	}	/**	 * Method to stick records.	 *	 * @param   array    &$pks   The ids of the items to publish.	 * @param   integer  $value  The value of the published state	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function stick(&$pks, $value = 1)	{		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Access checks.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}			}		}		// Attempt to change the state of the records.		if (!$table->stick($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		return true;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   JTable  $table  A record object.	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 *	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = '. (int) $table->catid;		$condition[] = 'state >= 0';		return $condition;	}	/**	 * @since  3.0	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if (empty($table->id))		{			// Set the values			$table->created	= $date->toSql();			// Set ordering to the last item if not set			if (empty($table->ordering))			{				$db = JFactory::getDbo();				$db->setQuery('SELECT MAX(ordering) FROM #__banners');				$max = $db->loadResult();				$table->ordering = $max + 1;			}		}		else		{			// Set the values			$table->modified	= $date->toSql();			$table->modified_by	= $user->get('id');		}		// Increment the content version number.		$table->version++;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$app = JFactory::getApplication();		// Alter the name for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($name, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['name']);			$data['name']	= $name;			$data['alias']	= $alias;			$data['state']	= 0;		}		if (parent::save($data))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Sites class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiSites extends JMediawikiObject{	/**     * Method to get site information.     *     * @param   array    $siprop            The sysinfo properties to get.     * @param   string   $sifilteriw        Only local or only non local entries to return.     * @param   boolean  $sishowalldb       List all database servers.     * @param   boolean  $sinumberingroup   List the number of users in usergroups.     * @param   array    $siinlanguagecode  Language code for localized languages.     *     * @return  object     *     * @since   12.3     */	public function getSiteInfo(array $siprop = null, $sifilteriw = null, $sishowalldb = false, $sinumberingroup = false, array $siinlanguagecode = null)	{		// Build the request.		$path = '?action=query&meta=siteinfo';		if (isset($siprop))		{			$path .= '&siprop=' . $this->buildParameter($siprop);		}		if (isset($sifilteriw))		{			$path .= '&sifilteriw=' . $sifilteriw;		}		if ($sishowalldb)		{			$path .= '&sishowalldb=';		}		if ($sinumberingroup)		{			$path .= '&sinumberingroup=';		}		if (isset($siinlanguagecode))		{			$path .= '&siinlanguagecode=' . $this->buildParameter($siinlanguagecode);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get events from logs.     *     * @param   array    $leprop    List of properties to get.     * @param   string   $letype    Filter log actions to only this type.     * @param   string   $leaction  Filter log actions to only this type.     * @param   string   $letitle   Filter entries to those related to a page.     * @param   string   $leprefix  Filter entries that start with this prefix.     * @param   string   $letag     Filter entries with tag.     * @param   string   $leuser    Filter entries made by the given user.     * @param   string   $lestart   Starting timestamp.     * @param   string   $leend     Ending timestamp.     * @param   string   $ledir     Direction of enumeration.     * @param   integer  $lelimit   Event limit to return.     *     * @return  object     *     * @since   12.3     */	public function getEvents(array $leprop = null, $letype = null, $leaction = null, $letitle = null, $leprefix = null, $letag = null,		$leuser = null, $lestart = null, $leend = null, $ledir = null, $lelimit = null)	{		// Build the request		$path = '?action=query&list=logevents';		if (isset($leprop))		{			$path .= '&leprop=' . $this->buildParameter($leprop);		}		if (isset($letype))		{			$path .= '&letype=' . $letype;		}		if (isset($leaction))		{			$path .= '&leaction=' . $leaction;		}		if (isset($letitle))		{			$path .= '&letitle=' . $letitle;		}		if (isset($leprefix))		{			$path .= '&leprefix=' . $leprefix;		}		if (isset($letag))		{			$path .= '&letag=' . $letag;		}		if (isset($leuser))		{			$path .= '&leuser=' . $leuser;		}		if (isset($lestart))		{			$path .= '&lestart=' . $lestart;		}		if (isset($leend))		{			$path .= '&leend=' . $leend;		}		if (isset($ledir))		{			$path .= '&ledir=' . $ledir;		}		if (isset($lelimit))		{			$path .= '&lelimit=' . $lelimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get recent changes on a site.     *     * @param   string  $rcstart        Starting timestamp.     * @param   string  $rcend          Ending timestamp.     * @param   string  $rcdir          Direction of enumeration.     * @param   array   $rcnamespace    Filter changes to only this namespace(s).     * @param   string  $rcuser         Filter changes by this user.     * @param   string  $rcexcludeuser  Filter changes to exclude changes by this user.     * @param   string  $rctag          Filter changes by this tag.     * @param   array   $rcprop         Filter log actions to only this type.     * @param   array   $rctoken        Which token to obtain for each change.     * @param   array   $rcshow         Filter changes by this criteria.     * @param   string  $rclimit        Changes limit to return.     * @param   string  $rctype         Filter event by type of changes.     * @param   string  $rctoponly      Filter changes which are latest revision.     *     * @return  object     *     * @since   12.3     */	public function getRecentChanges($rcstart = null, $rcend = null, $rcdir = null, array $rcnamespace = null, $rcuser = null, $rcexcludeuser = null,		$rctag = null, array $rcprop = null, array $rctoken = null, array $rcshow = null, $rclimit = null, $rctype = null, $rctoponly = null)	{		// Build the request.		$path = '?action=query&list=recentchanges';		if (isset($rcstart))		{			$path .= '&rcstart=' . $rcstart;		}		if (isset($rcend))		{			$path .= '&rcend=' . $rcend;		}		if (isset($rcdir))		{			$path .= '&rcdir=' . $rcdir;		}		if (isset($rcnamespace))		{			$path .= '&rcnamespaces=' . $this->buildParameter($rcnamespace);		}		if (isset($rcuser))		{			$path .= '&rcuser=' . $rcuser;		}		if (isset($rcexcludeuser))		{			$path .= '&rcexcludeuser=' . $rcexcludeuser;		}		if (isset($rctag))		{			$path .= '&rctag=' . $rctag;		}		if (isset($rcprop))		{			$path .= '&rcprop=' . $this->buildParameter($rcprop);		}		if (isset($rctoken))		{			$path .= '&rctoken=' . $this->buildParameter($rctoken);		}		if (isset($rcshow))		{			$path .= '&rcshow=' . $this->buildParameter($rcshow);		}		if (isset($rclimit))		{			$path .= '&rclimit=' . $rclimit;		}		if (isset($rctype))		{			$path .= '&rctype=' . $rctype;		}		if (isset($rctoponly))		{			$path .= '&rctoponly=' . $rctoponly;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get protected titles on a site.     *     * @param   array    $ptnamespace  Only list titles in this namespace.     * @param   array    $ptlevel      Only list titles with these protection level.     * @param   integer  $ptlimit      Limit of pages to return.     * @param   string   $ptdir        Direction of enumeration.     * @param   string   $ptstart      Starting timestamp.     * @param   string   $ptend        Ending timestamp.     * @param   array    $ptprop       List of properties to get.     *     * @return  object     *     * @since   12.3     */	public function getProtectedTitles(array $ptnamespace = null, array $ptlevel = null, $ptlimit = null, $ptdir = null, $ptstart = null,		$ptend = null, array $ptprop = null)	{		// Build the request.		$path = '?action=query&list=protectedtitles';		if (isset($ptnamespace))		{			$path .= '&ptnamespace=' . $this->buildParameter($ptnamespace);		}		if (isset($ptlevel))		{			$path .= '&ptlevel=' . $this->buildParameter($ptlevel);		}		if (isset($ptlimit))		{			$path .= '&ptlimit=' . $ptlimit;		}		if (isset($ptdir))		{			$path .= '&ptdir=' . $ptdir;		}		if (isset($ptstart))		{			$path .= '&ptstart=' . $ptstart;		}		if (isset($ptend))		{			$path .= '&ptend=' . $ptend;		}		if (isset($ptprop))		{			$path .= '&ptprop=' . $this->buildParameter($ptprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_feed * * @package     Joomla.Administrator * @subpackage  mod_feed * @since       1.5 */class ModFeedHelper{	/**	 * Method to load a feed.	 *	 * @param   JRegisty  $params  The parameters object.	 *	 * @return  JFeedReader|string  Return a JFeedReader object or a string message if error.	 */	static function getFeed($params)	{		// Module params		$rssurl = $params->get('rssurl', '');		// Get RSS parsed object		$cache_time = 0;		if ($params->get('cache'))		{			$cache_time = $params->get('cache_time', 15) * 60;		}		try		{			jimport('joomla.feed.factory');			$feed   = new JFeedFactory;			$rssDoc = $feed->getFeed($rssurl);		}		catch (InvalidArgumentException $e)		{			$msg = JText::_('MOD_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		catch (RunTimeException $e)		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');		}		if (empty($rssDoc))		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');			return $msg;		}		$lists = array();		if ($rssDoc)		{			return $rssDoc;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><div class="remind <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form id="user-registration" action="<?php echo JRoute::_('index.php?option=com_users&task=remind.remind'); ?>" method="post" class="form-validate form-horizontal">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		</fieldset>		<?php endforeach; ?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$lang = JFactory::getLanguage();JText::script('COM_FINDER_MAPS_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'map.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_MAPS_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=maps');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_MAPS')); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_MAPS')); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_branch"><?php echo JText::sprintf('COM_FINDER_FILTER_BY', JText::_('COM_FINDER_MAPS')); ?></label>			<select name="filter_branch" class="inputbox" id="filter_branch">				<?php echo JHtml::_('select.options', JHtml::_('finder.mapslist'), 'value', 'text', $this->state->get('filter.branch'));?>			</select>			<label class="selectlabel" for="filter_state"><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'); ?></label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?>			</button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php if (count($this->items) == 0) : ?>			<tr class="row0">				<td class="center" colspan="5">					<?php echo JText::_('COM_FINDER_MAPS_NO_CONTENT'); ?>				</td>			</tr>		<?php endif; ?>		<?php if ($this->state->get('filter.branch') != 1) : ?>			<tr class="row1">				<td colspan="5" class="center">					<a href="#" onclick="document.id('filter_branch').value='1';document.adminForm.submit();">						<?php echo JText::_('COM_FINDER_MAPS_RETURN_TO_BRANCHES'); ?></a>				</td>			</tr>		<?php endif; ?>		<?php $canChange	= JFactory::getUser()->authorise('core.manage',	'com_finder'); ?>		<?php foreach ($this->items as $i => $item) :?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php					$key = FinderHelperLanguage::branchSingular($item->title);					$title = $lang->hasKey($key) ? JText::_($key) : $item->title;					?>					<?php if ($this->state->get('filter.branch') == 1 && $item->num_children) : ?>						<a href="#" onclick="document.id('filter_branch').value='<?php echo (int) $item->id;?>';document.adminForm.submit();" title="<?php echo JText::_('COM_FINDER_MAPS_BRANCH_LINK'); ?>">							<?php echo $this->escape($title); ?></a>					<?php else: ?>						<?php echo $this->escape($title); ?>					<?php endif; ?>					<?php if ($item->num_children > 0) : ?>						<small>(<?php echo $item->num_children; ?>)</small>					<?php elseif ($item->num_nodes > 0) : ?>						<small>(<?php echo $item->num_nodes; ?>)</small>					<?php endif; ?>									</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'maps.', $canChange, 'cb'); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Menu Item List Model for Menus. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusModelItems extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'menutype', 'a.menutype',				'title', 'a.title',				'alias', 'a.alias',				'published', 'a.published',				'access', 'a.access', 'access_level',				'language', 'a.language',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'lft', 'a.lft',				'rgt', 'a.rgt',				'level', 'a.level',				'path', 'a.path',				'client_id', 'a.client_id',				'home', 'a.home',			);			$app = JFactory::getApplication();			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$config['filter_fields'][] = 'association';			}		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		$search = $this->getUserStateFromRequest($this->context . '.search', 'filter_search');		$this->setState('filter.search', $search);		$published = $this->getUserStateFromRequest($this->context . '.published', 'filter_published', '');		$this->setState('filter.published', $published);		$access = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$parentId = $this->getUserStateFromRequest($this->context . '.filter.parent_id', 'filter_parent_id', 0, 'int');		$this->setState('filter.parent_id', $parentId);		$level = $this->getUserStateFromRequest($this->context . '.filter.level', 'filter_level', 0, 'int');		$this->setState('filter.level', $level);		$menuType = $app->input->getString('menutype', null);		if ($menuType)		{			if ($menuType != $app->getUserState($this->context . '.filter.menutype'))			{				$app->setUserState($this->context . '.filter.menutype', $menuType);				$app->input->set('limitstart', 0);			}		}		else		{			$menuType = $app->getUserState($this->context . '.filter.menutype');			if (!$menuType)			{				$menuType = $this->getDefaultMenuType();			}		}		$this->setState('filter.menutype', $menuType);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Component parameters.		$params = JComponentHelper::getParams('com_menus');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.language');		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.parent_id');		$id .= ':' . $this->getState('filter.menutype');		return parent::getStoreId($id);	}	/**	 * Finds the default menu type.	 *	 * In the absence of better information, this is the first menu ordered by title.	 *	 * @return  string    The default menu type	 * @since   1.6	 */	protected function getDefaultMenuType()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('menutype')			->from('#__menu_types')			->order('title');		$db->setQuery($query, 0, 1);		$menuType = $db->loadResult();		return $menuType;	}	/**	 * Builds an SQL query to load the list data.	 *	 * @return  JDatabaseQuery    A query object.	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select all fields from the table.		$query->select(			$this->getState(				'list.select',				$db->quoteName(					array('a.id', 'a.menutype', 'a.title', 'a.alias', 'a.note', 'a.path', 'a.link', 'a.type', 'a.parent_id', 'a.level', 'a.published', 'a.component_id', 'a.checked_out', 'a.checked_out_time', 'a.browserNav', 'a.access', 'a.img', 'a.template_style_id', 'a.params', 'a.lft', 'a.rgt', 'a.home', 'a.language', 'a.client_id'),					array(null, null, null, null, null, null, null, null, null, null, 'apublished', null, null, null, null, null, null, null, null, null, null, null, null, null)				)			)		);		$query->select(			'CASE a.type' .				' WHEN ' . $db->quote('component') . ' THEN a.published+2*(e.enabled-1) ' .				' WHEN ' . $db->quote('url') . ' THEN a.published+2 ' .				' WHEN ' . $db->quote('alias') . ' THEN a.published+4 ' .				' WHEN ' . $db->quote('separator') . ' THEN a.published+6 ' .				' WHEN ' . $db->quote('heading') . ' THEN a.published+8 ' .				' END AS published'		);		$query->from($db->quoteName('#__menu') . ' AS a');		// Join over the language		$query->select('l.title AS language_title, l.image as image')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users.		$query->select('u.name AS editor')			->join('LEFT', $db->quoteName('#__users') . ' AS u ON u.id = a.checked_out');		//Join over components		$query->select('c.element AS componentname')			->join('LEFT', $db->quoteName('#__extensions') . ' AS c ON c.extension_id = a.component_id');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the associations.		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$query->select('COUNT(asso2.id)>1 as association')				->join('LEFT', '#__associations AS asso ON asso.id = a.id AND asso.context=' . $db->quote('com_menus.item'))				->join('LEFT', '#__associations AS asso2 ON asso2.key = asso.key')				->group('a.id');		}		// Join over the extensions		$query->select('e.name AS name')			->join('LEFT', '#__extensions AS e ON e.extension_id = a.component_id');		// Exclude the root category.		$query->where('a.id > 1')			->where('a.client_id = 0');		// Filter on the published state.		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by search in title, alias or id		if ($search = trim($this->getState('filter.search')))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'link:') === 0)			{				if ($search = substr($search, 5))				{					$search = $db->quote('%' . $db->escape($search, true) . '%');					$query->where('a.link LIKE ' . $search);				}			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(' . 'a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ' OR a.note LIKE ' . $search . ')');			}		}		// Filter the items over the parent id if set.		$parentId = $this->getState('filter.parent_id');		if (!empty($parentId))		{			$query->where('p.id = ' . (int) $parentId);		}		// Filter the items over the menu id if set.		$menuType = $this->getState('filter.menutype');		if (!empty($menuType))		{			$query->where('a.menutype = ' . $db->quote($menuType));		}		// Filter on the access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter on the level.		if ($level = $this->getState('filter.level'))		{			$query->where('a.level <= ' . (int) $level);		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',(string)$query)).'<hr/>';		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a user view level. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewLevel extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user   = JFactory::getUser();		$isNew	= ($this->item->id == 0);		$canDo  = UsersHelper::getActions();		JToolbarHelper::title(JText::_($isNew ? 'COM_USERS_VIEW_NEW_LEVEL_TITLE' : 'COM_USERS_VIEW_EDIT_LEVEL_TITLE'), 'levels-add');		if ($canDo->get('core.edit')||$canDo->get('core.create'))		{			JToolbarHelper::apply('level.apply');			JToolbarHelper::save('level.save');		}		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('level.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create')){				JToolbarHelper::save2copy('level.save2copy');			}		if (empty($this->item->id)){				JToolbarHelper::cancel('level.cancel');		}		else		{				JToolbarHelper::cancel('level.cancel', 'JTOOLBAR_CLOSE');		}			JToolbarHelper::divider();			JToolbarHelper::help('JHELP_USERS_ACCESS_LEVELS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer helper. * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 */	public static function addSubmenu($vName = 'install')	{		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_INSTALL'),			'index.php?option=com_installer',			$vName == 'install'		);		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_UPDATE'),			'index.php?option=com_installer&view=update',			$vName == 'update'		);		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_MANAGE'),			'index.php?option=com_installer&view=manage',			$vName == 'manage'		);		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_DISCOVER'),			'index.php?option=com_installer&view=discover',			$vName == 'discover'		);		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_DATABASE'),			'index.php?option=com_installer&view=database',			$vName == 'database'		);		JHtmlSidebar::addEntry(		JText::_('COM_INSTALLER_SUBMENU_WARNINGS'),					'index.php?option=com_installer&view=warnings',		$vName == 'warnings'		);		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_LANGUAGES'),			'index.php?option=com_installer&view=languages',			$vName == 'languages'		);	}	/**	 * Get a list of filter options for the extension types.	 *	 * @return  array  An array of stdClass objects.	 *	 * @since   3.0	 */	public static function getExtensionTypes()	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT type')			->from('#__extensions');		$db->setQuery($query);		$types = $db->loadColumn();		$options = array();		foreach ($types as $type)		{			$options[] = JHtml::_('select.option', $type, 'COM_INSTALLER_TYPE_' . strtoupper($type));		}		return $options;	}	/**	 * Get a list of filter options for the extension types.	 *	 * @return  array  An array of stdClass objects.	 *	 * @since   3.0	 */	public static function getExtensionGroupes()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT folder')			->from('#__extensions')			->where('folder != ' . $db->quote(''))			->order('folder');		$db->setQuery($query);		$folders = $db->loadColumn();		$options = array();		foreach ($folders as $folder)		{			$options[] = JHtml::_('select.option', $folder, $folder);		}		return $options;	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   1.6	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_installer';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';JHtml::_('bootstrap.tooltip');if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :		if (!isset($this->items[$this->parent->id][$id + 1]))		{			$class = ' class="last"';		}		?>		<div <?php echo $class; ?> >		<?php $class = ''; ?>			<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($item->id));?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_WEBLINKS_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_weblinks.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">						<?php						$this->items[$item->id] = $item->getChildren();						$this->parent = $item;						$this->maxLevelcat--;						echo $this->loadTemplate('items');						$this->parent = $item->getParent();						$this->maxLevelcat++;						?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Plugin * @subpackage  System.languagefilter * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('MenusHelper', JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Joomla! Language Filter Plugin * * @package     Joomla.Plugin * @subpackage  System.languagefilter * @since       1.6 */class PlgSystemLanguageFilter extends JPlugin{	protected static $mode_sef;	protected static $tag;	protected static $sefs;	protected static $lang_codes;	protected static $default_lang;	protected static $default_sef;	protected static $cookie;	private static $_user_lang_code;	public function __construct(&$subject, $config)	{		parent::__construct($subject, $config);		// Ensure that constructor is called one time		self::$cookie = SID == '';		if (!self::$default_lang)		{			$app = JFactory::getApplication();			$router = $app->getRouter();			if ($app->isSite())			{				// setup language data				self::$mode_sef 	= ($router->getMode() == JROUTER_MODE_SEF) ? true : false;				self::$sefs 		= JLanguageHelper::getLanguages('sef');				self::$lang_codes 	= JLanguageHelper::getLanguages('lang_code');				self::$default_lang = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');				self::$default_sef 	= self::$lang_codes[self::$default_lang]->sef;				$user = JFactory::getUser();				$levels = $user->getAuthorisedViewLevels();				foreach (self::$sefs as $sef => &$language)				{					if (isset($language->access) && $language->access && !in_array($language->access, $levels))					{						unset(self::$sefs[$sef]);					}				}				$app->setLanguageFilter(true);				jimport('joomla.environment.uri');				$uri = JURI::getInstance();				if (self::$mode_sef)				{					// Get the route path from the request.					$path = JString::substr($uri->toString(), JString::strlen($uri->base()));					// Apache mod_rewrite is Off					$path = JFactory::getConfig()->get('sef_rewrite') ? $path : JString::substr($path, 10);					// Trim any spaces or slashes from the ends of the path and explode into segments.					$path  = JString::trim($path, '/ ');					$parts = explode('/', $path);					// The language segment is always at the beginning of the route path if it exists.					$sef = $uri->getVar('lang');					if (!empty($parts) && empty($sef))					{						$sef = reset($parts);					}				}				else				{					$sef = $uri->getVar('lang');				}				if (isset(self::$sefs[$sef]))				{					$lang_code = self::$sefs[$sef]->lang_code;					// Create a cookie					$conf = JFactory::getConfig();					$cookie_domain 	= $conf->get('config.cookie_domain', '');					$cookie_path 	= $conf->get('config.cookie_path', '/');					setcookie(JApplication::getHash('language'), $lang_code, $this->getLangCookieTime(), $cookie_path, $cookie_domain);					$app->input->cookie->set(JApplication::getHash('language'), $lang_code);					// set the request var					$app->input->set('language', $lang_code);				}			}			parent::__construct($subject, $config);			// 	Detect browser feature			if ($app->isSite())			{				$app->setDetectBrowser($this->params->get('detect_browser', '1') == '1');			}		}	}	public function onAfterInitialise()	{		$app = JFactory::getApplication();		$app->item_associations = $this->params->get('item_associations', 0);		if ($app->isSite())		{			self::$tag = JFactory::getLanguage()->getTag();			$router = $app->getRouter();			// attach build rules for language SEF			$router->attachBuildRule(array($this, 'buildRule'));			// attach parse rules for language SEF			$router->attachParseRule(array($this, 'parseRule'));			// Adding custom site name			$languages = JLanguageHelper::getLanguages('lang_code');			if (isset($languages[self::$tag]) && $languages[self::$tag]->sitename)			{				JFactory::getConfig()->set('sitename', $languages[self::$tag]->sitename);			}		}	}	public function buildRule(&$router, &$uri)	{		$sef = $uri->getVar('lang');		if (empty($sef))		{			$sef = self::$lang_codes[self::$tag]->sef;		}		elseif (!isset(self::$sefs[$sef]))		{			$sef = self::$default_sef;		}		$Itemid = $uri->getVar('Itemid');		if (!is_null($Itemid))		{			if ($item = JFactory::getApplication()->getMenu()->getItem($Itemid))			{				if ($item->home && $uri->getVar('option') != 'com_search')				{					$link = $item->link;					$parts = JString::parse_url($link);					if (isset ($parts['query']) && strpos($parts['query'], '&amp;'))					{						$parts['query'] = str_replace('&amp;', '&', $parts['query']);					}					parse_str($parts['query'], $vars);					// test if the url contains same vars as in menu link					$test = true;					foreach ($uri->getQuery(true) as $key => $value)					{						if (!in_array($key, array('format', 'Itemid', 'lang')) && !(isset($vars[$key]) && $vars[$key] == $value))						{							$test = false;							break;						}					}					if ($test)					{						foreach ($vars as $key => $value)						{							$uri->delVar($key);						}						$uri->delVar('Itemid');					}				}			}			else			{				$uri->delVar('Itemid');			}		}		if (self::$mode_sef)		{			$uri->delVar('lang');			if (				$this->params->get('remove_default_prefix', 0) == 0				|| $sef != self::$default_sef				|| $sef != self::$lang_codes[self::$tag]->sef				|| $this->params->get('detect_browser', 1) && JLanguageHelper::detectLanguage() != self::$tag && !self::$cookie			)			{				$uri->setPath($uri->getPath().'/'.$sef.'/');			}			else			{				$uri->setPath($uri->getPath());			}		}		else		{			$uri->setVar('lang', $sef);		}	}	public function parseRule(&$router, &$uri)	{		$app = JFactory::getApplication();		$array = array();		$lang_code = $app->input->cookie->getString(JApplication::getHash('language'));		// No cookie - let's try to detect browser language or use site default		if (!$lang_code)		{			if ($this->params->get('detect_browser', 1))			{				$lang_code = JLanguageHelper::detectLanguage();			}			else			{				$lang_code = self::$default_lang;			}		}		if (self::$mode_sef)		{			$path = $uri->getPath();			$parts = explode('/', $path);			$sef = $parts[0];			// Redirect only if not in post			if (!empty($lang_code) && ($app->input->getMethod() != "POST" || count($app->input->post) == 0))			{				if ($this->params->get('remove_default_prefix', 0) == 0)				{					// redirect if sef does not exists					if (!isset(self::$sefs[$sef]))					{						// Use the current language sef or the default one						$sef = isset(self::$lang_codes[$lang_code]) ? self::$lang_codes[$lang_code]->sef : self::$default_sef;						$uri->setPath($sef . '/' . $path);						if ($app->getCfg('sef_rewrite'))						{							$app->redirect($uri->base().$uri->toString(array('path', 'query', 'fragment')));						}						else						{							$path = $uri->toString(array('path', 'query', 'fragment'));							$app->redirect($uri->base().'index.php'.($path ? ('/' . $path) : ''));						}					}				}				else				{					// redirect if sef does not exists and language is not the default one					if (!isset(self::$sefs[$sef]) && $lang_code != self::$default_lang)					{						$sef = isset(self::$lang_codes[$lang_code]) ? self::$lang_codes[$lang_code]->sef : self::$default_sef;						$uri->setPath($sef . '/' . $path);						if ($app->getCfg('sef_rewrite'))						{							$app->redirect($uri->base().$uri->toString(array('path', 'query', 'fragment')));						}						else						{							$path = $uri->toString(array('path', 'query', 'fragment'));							$app->redirect($uri->base().'index.php'.($path ? ('/' . $path) : ''));						}					}					// redirect if sef is the default one					elseif (isset(self::$sefs[$sef]) &&						self::$default_lang == self::$sefs[$sef]->lang_code &&						(!$this->params->get('detect_browser', 1) || JLanguageHelper::detectLanguage() == self::$tag || self::$cookie)					)					{						array_shift($parts);						$uri->setPath(implode('/', $parts));						if ($app->getCfg('sef_rewrite'))						{							$app->redirect($uri->base().$uri->toString(array('path', 'query', 'fragment')));						}						else						{							$path = $uri->toString(array('path', 'query', 'fragment'));							$app->redirect($uri->base().'index.php'.($path ? ('/' . $path) : ''));						}					}				}			}			$lang_code = isset(self::$sefs[$sef]) ? self::$sefs[$sef]->lang_code : '';			if ($lang_code && JLanguage::exists($lang_code))			{				array_shift($parts);				$uri->setPath(implode('/', $parts));			}		}		else		{			$sef = $uri->getVar('lang');			if (!isset(self::$sefs[$sef]))			{				$sef = isset(self::$lang_codes[$lang_code]) ? self::$lang_codes[$lang_code]->sef : self::$default_sef;				$uri->setVar('lang', $sef);				if ($app->input->getMethod() != "POST" || count($app->input->post) == 0)				{					$app->redirect(JURI::base(true).'/index.php?'.$uri->getQuery());				}			}		}		$array = array('lang' => $sef);		return $array;	}	/**	 * before store user method	 *	 * Method is called before user data is stored in the database	 *	 * @param   array  $user	Holds the old user data.	 * @param   boolean		$isnew	True if a new user is stored.	 * @param   array  $new	Holds the new user data.	 *	 * @return  void	 * @since   1.6	 */	public function onUserBeforeSave($user, $isnew, $new)	{		if ($this->params->get('automatic_change', '1') == '1' && key_exists('params', $user))		{			$registry = new JRegistry;			$registry->loadString($user['params']);			self::$_user_lang_code = $registry->get('language');			if (empty(self::$_user_lang_code))			{				self::$_user_lang_code = self::$default_lang;			}		}	}	/**	 * after store user method	 *	 * Method is called after user data is stored in the database	 *	 * @param   array  $user		Holds the new user data.	 * @param   boolean		$isnew		True if a new user is stored.	 * @param   boolean		$success	True if user was succesfully stored in the database.	 * @param   string  $msg		Message.	 *	 * @return  void	 * @since   1.6	 */	public function onUserAfterSave($user, $isnew, $success, $msg)	{		if ($this->params->get('automatic_change', '1') == '1' && key_exists('params', $user) && $success)		{			$registry = new JRegistry;			$registry->loadString($user['params']);			$lang_code = $registry->get('language');			if (empty($lang_code))			{				$lang_code = self::$default_lang;			}			$app = JFactory::getApplication();			if ($lang_code == self::$_user_lang_code || !isset(self::$lang_codes[$lang_code]))			{				if ($app->isSite())				{					$app->setUserState('com_users.edit.profile.redirect', null);				}			}			else			{				if ($app->isSite())				{					$app->setUserState('com_users.edit.profile.redirect', 'index.php?Itemid='.$app->getMenu()->getDefault($lang_code)->id.'&lang='.$lang_codes[$lang_code]->sef);					self::$tag = $lang_code;					// Create a cookie					$conf = JFactory::getConfig();					$cookie_domain 	= $conf->get('config.cookie_domain', '');					$cookie_path 	= $conf->get('config.cookie_path', '/');					setcookie(JApplication::getHash('language'), $lang_code, $this->getLangCookieTime(), $cookie_path, $cookie_domain);				}			}		}	}	/**	 * This method should handle any login logic and report back to the subject	 *	 * @param   array  $user		Holds the user data	 * @param   array  $options	Array holding options (remember, autoregister, group)	 *	 * @return  boolean  True on success	 * @since   1.5	 */	public function onUserLogin($user, $options = array())	{		$app  = JFactory::getApplication();		$menu = $app->getMenu();		if ($app->isSite() && $this->params->get('automatic_change', 1))		{			// Load associations			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$active = $menu->getActive();				if ($active)				{					$associations = MenusHelper::getAssociations($active->id);				}			}			$lang_code = $user['language'];			if (empty($lang_code))			{				$lang_code = self::$default_lang;			}			if ($lang_code != self::$tag)			{				// Change language				self::$tag = $lang_code;				// Create a cookie				$conf = JFactory::getConfig();				$cookie_domain 	= $conf->get('config.cookie_domain', '');				$cookie_path 	= $conf->get('config.cookie_path', '/');				setcookie(JApplication::getHash('language'), $lang_code, $this->getLangCookieTime(), $cookie_path, $cookie_domain);				// Change the language code				JFactory::getLanguage()->setLanguage($lang_code);				// Change the redirect (language have changed)				if (isset($associations[$lang_code]) && $menu->getItem($associations[$lang_code]))				{					$itemid = $associations[$lang_code];					$app->setUserState('users.login.form.return', 'index.php?&Itemid='.$itemid);				}				else				{					$itemid = isset($homes[$lang_code]) ? $homes[$lang_code]->id : $homes['*']->id;					$app->setUserState('users.login.form.return', 'index.php?&Itemid='.$itemid);				}			}		}	}	/**	 * This method adds alternate meta tags for associated menu items	 *	 * @return  nothing	 * @since   1.7	 */	public function onAfterDispatch()	{		$app = JFactory::getApplication();		$doc = JFactory::getDocument();		$menu = $app->getMenu();		$server = JURI::getInstance()->toString(array('scheme', 'host', 'port'));		$option = $app->input->get('option');		$eName = JString::ucfirst(JString::str_ireplace('com_', '', $option));		if ($app->isSite() && $this->params->get('alternate_meta') && $doc->getType() == 'html')		{			// Get active menu item			$active = $menu->getActive();			// load menu associations			if ($active)			{				// Get menu item link				if ($app->getCfg('sef'))				{					$active_link = JRoute::_('index.php?Itemid='.$active->id, false);				}				else				{					$active_link = JRoute::_($active->link.'&Itemid='.$active->id, false);				}				if ($active_link == JUri::base(true).'/')				{					$active_link .= 'index.php';				}				// Get current link				$current_link = JURI::getInstance()->toString(array('path', 'query'));				if ($current_link == JUri::base(true).'/')				{					$current_link .= 'index.php';				}				// Check the exact menu item's URL				if ($active_link == $current_link)				{					$associations = MenusHelper::getAssociations($active->id);					unset($associations[$active->language]);				}			}			// load component associations			$cName = JString::ucfirst($eName.'HelperAssociation');			JLoader::register($cName, JPath::clean(JPATH_COMPONENT_SITE . '/helpers/association.php'));			if (class_exists($cName) && is_callable(array($cName, 'getAssociations')))			{				$cassociations = call_user_func(array($cName, 'getAssociations'));				$lang_code = $app->input->cookie->getString(JApplication::getHash('language'));				// No cookie - let's try to detect browser language or use site default				if (!$lang_code)				{					if ($this->params->get('detect_browser', 1)){						$lang_code = JLanguageHelper::detectLanguage();					} else {						$lang_code = self::$default_lang;					}				}				unset($cassociations[$lang_code]);			}			// handle the default associations			if ((!empty($associations) || !empty($cassociations)) && $this->params->get('item_associations'))			{				foreach (JLanguageHelper::getLanguages() as $language)				{					if (!JLanguage::exists($language->lang_code))					{						continue;					}					if (isset($cassociations[$language->lang_code]))					{						$link = JRoute::_($cassociations[$language->lang_code].'&lang='.$language->sef);						$doc->addHeadLink($server . $link, 'alternate', 'rel', array('hreflang' => $language->lang_code));					}					elseif (isset($associations[$language->lang_code]))					{						$item = $menu->getItem($associations[$language->lang_code]);						if ($item)						{							if ($app->getCfg('sef'))							{								$link = JRoute::_('index.php?Itemid='.$item->id.'&lang='.$language->sef);							}							else							{								$link = JRoute::_($item->link.'&Itemid='.$item->id.'&lang='.$language->sef);							}							$doc->addHeadLink($server . $link, 'alternate', 'rel', array('hreflang' => $language->lang_code));						}					}				}			}			// link to the home page of each language			elseif ($active && $active->home)			{				foreach (JLanguageHelper::getLanguages() as $language)				{					if (!JLanguage::exists($language->lang_code))					{						continue;					}					$item = $menu->getDefault($language->lang_code);					if ($item && $item->language != $active->language && $item->language != '*')					{						if ($app->getCfg('sef'))						{							$link = JRoute::_('index.php?Itemid='.$item->id.'&lang='.$language->sef);						}						else						{							$link = JRoute::_($item->link.'&Itemid='.$item->id.'&lang='.$language->sef);						}						$doc->addHeadLink($server . $link, 'alternate', 'rel', array('hreflang' => $language->lang_code));					}				}			}		}	}	/**	 * Getting the Language Cookie settings	 *	 * @return  string  The cookie time.	 *	 * @since   3.0.4	 */	private function getLangCookieTime()	{		if ($this->params->get('lang_cookie', 1) == 1)		{			$lang_cookie = time() + 365 * 86400;		}		else		{			$lang_cookie = 0;		}		return $lang_cookie;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?phpif (!empty($feed) && is_string($feed)){		echo $feed;}else{	$lang = JFactory::getLanguage();	$myrtl = $params->get('rssrtl');	$direction = " ";	if ($lang->isRTL() && $myrtl == 0)	{		$direction = " redirect-rtl";	}	// feed description	elseif ($lang->isRTL() && $myrtl == 1)	{			$direction = " redirect-ltr";	}	elseif ($lang->isRTL() && $myrtl == 2)	{		$direction = " redirect-rtl";	}	elseif ($myrtl == 0)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 2)	{		$direction = " redirect-rtl";	}	?>	<?php	if ($feed != false)	{		//image handling		$iUrl	= isset($feed->image)	? $feed->image	: null;		$iTitle = isset($feed->imagetitle) ? $feed->imagetitle : null;		?>		<div style="direction: <?php echo $rssrtl ? 'rtl' :'ltr'; ?>; text-align: <?php echo $rssrtl ? 'right' :'left'; ?> ! important"  class="feed<?php echo $moduleclass_sfx; ?>">		<?php		// feed description		if (!is_null($feed->title) && $params->get('rsstitle', 1))		{			?>					<h2 class="<?php echo $direction; ?>">						<a href="<?php echo str_replace('&', '&amp', $feed->link); ?>" target="_blank">						<?php echo $feed->title; ?></a>					</h2>			<?php		}		// feed description		if ($params->get('rssdesc', 1))		{		?>			<?php echo $feed->description; ?>			<?php		}		// feed image		if ($params->get('rssimage', 1) && $iUrl) :		?>			<img src="<?php echo $iUrl; ?>" alt="<?php echo @$iTitle; ?>"/>		<?php endif; ?>	<ul class="newsfeed<?php echo $params->get('moduleclass_sfx'); ?>">	<!-- Show items -->	<?php if (!empty($feed))	{ ?>	<ul>		<?php for  ($i = 0; $i < $params->get('rssitems', 5); $i++)		{  ?>			<?php				$uri = (!empty($feed[$i]->guid) || !is_null($feed[$i]->guid)) ? $feed[$i]->guid : $feed[$i]->uri;				$uri = substr($uri, 0, 4) != 'http' ? $params->get('rsslink') : $uri;				$text = !empty($feed[$i]->content) ||  !is_null($feed[$i]->content) ? $feed[$i]->content : $feed[$i]->description;			?>				<li>					<?php if (!empty($uri)) : ?>						<h5 class="feed-link">						<a href="<?php echo $uri; ?>" target="_blank">						<?php  echo $feed[$i]->title; ?></a></h5>					<?php else : ?>						<h5 class="feed-link"><?php  echo $feed[$i]->title; ?></h5>					<?php  endif; ?>					<?php if ($params->get('rssitemdesc') && !empty($text)) : ?>						<div class="feed-item-description">						<?php							// Strip the images.							$text = JFilterOutput::stripImages($text);							$text = JHtml::_('string.truncate', $text, $params->get('word_count'));							echo str_replace('&apos;', "'", $text);						?>						</div>					<?php endif; ?>					</li>			<?php } ?>			</ul>	<?php }	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect component helper. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectHelper{	public static $extension = 'com_redirect';	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 */	public static function addSubmenu($vName)	{		// No submenu for this component.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user		= JFactory::getUser();		$result		= new JObject;		$assetName	= 'com_redirect';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string  	The HTML code for the select tag	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '*', 'JALL');		$options[]	= JHtml::_('select.option', '1', 'JENABLED');		$options[]	= JHtml::_('select.option', '0', 'JDISABLED');		$options[]	= JHtml::_('select.option', '2', 'JARCHIVED');		$options[]	= JHtml::_('select.option', '-2', 'JTRASHED');		return $options;	}	/**	 * Determines if the plugin for Redirect to work is enabled.	 *	 * @return  boolean	 */	public static function isEnabled()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('enabled'))			->from('#__extensions')			->where($db->quoteName('folder') . ' = ' . $db->quote('system'))			->where($db->quoteName('element') . ' = ' . $db->quote('redirect'));		$db->setQuery($query);		try		{			$result = (boolean) $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $result;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * UCM map table * * @package     Joomla.Libraries * @subpackage  Table * @since       3.1 */class JTableUcm extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   3.1	 */	public function __construct($db)	{		parent::__construct('#__ucm_base', 'ucm_id', $db);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_plugins')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Plugins');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $menu JAdminCSSMenu */$shownew = (boolean) $params->get('shownew', 1);$showhelp = $params->get('showhelp', 1);$user = JFactory::getUser();$lang = JFactory::getLanguage();//// Site SubMenu//$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_SYSTEM'), '#'), true);$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_CONTROL_PANEL'), 'index.php', 'class:cpanel'));$menu->addSeparator();if ($user->authorise('core.admin')){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_CONFIGURATION'), 'index.php?option=com_config', 'class:config'));	$menu->addSeparator();}$chm = $user->authorise('core.admin', 'com_checkin');$cam = $user->authorise('core.manage', 'com_cache');if ($chm || $cam ){	// Keep this for when bootstrap supports submenus?	/* $menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MAINTENANCE'), 'index.php?option=com_checkin', 'class:maintenance'), true	);*/	if ($chm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_GLOBAL_CHECKIN'), 'index.php?option=com_checkin', 'class:checkin'));		$menu->addSeparator();	}	if ($cam)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_CLEAR_CACHE'), 'index.php?option=com_cache', 'class:clear'));		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_PURGE_EXPIRED_CACHE'), 'index.php?option=com_cache&view=purge', 'class:purge'));	}	//$menu->getParent();}$menu->addSeparator();if ($user->authorise('core.admin')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_SYSTEM_INFORMATION'), 'index.php?option=com_admin&view=sysinfo', 'class:info')	);}$menu->getParent();//// Users Submenu//if ($user->authorise('core.manage', 'com_users')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USERS'), '#'), true	);	$createUser = $shownew && $user->authorise('core.create', 'com_users');	$createGrp = $user->authorise('core.admin', 'com_users');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USER_MANAGER'), 'index.php?option=com_users&view=users', 'class:user'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_USER'), 'index.php?option=com_users&task=user.add', 'class:newarticle')		);		$menu->getParent();	}	if ($createGrp)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_GROUPS'), 'index.php?option=com_users&view=groups', 'class:groups'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_GROUP'), 'index.php?option=com_users&task=group.add', 'class:newarticle')			);			$menu->getParent();		}		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_LEVELS'), 'index.php?option=com_users&view=levels', 'class:levels'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_LEVEL'), 'index.php?option=com_users&task=level.add', 'class:newarticle')			);			$menu->getParent();		}	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTES'), 'index.php?option=com_users&view=notes', 'class:user-note'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_NOTE'), 'index.php?option=com_users&task=note.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTE_CATEGORIES'), 'index.php?option=com_categories&view=categories&extension=com_users', 'class:category'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_users.notes', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MASS_MAIL_USERS'), 'index.php?option=com_users&view=mail', 'class:massmail')	);	$menu->getParent();}//// Menus Submenu//if ($user->authorise('core.manage', 'com_menus')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENUS'), '#'), true	);	$createMenu = $shownew && $user->authorise('core.create', 'com_menus');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER'), 'index.php?option=com_menus&view=menus', 'class:menumgr'), $createMenu	);	if ($createMenu)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU'), 'index.php?option=com_menus&view=menu&layout=edit', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	// Menu Types	foreach (ModMenuHelper::getMenus() as $menuType)	{		$alt = '*' .$menuType->sef. '*';		if ($menuType->home == 0)		{			$titleicon = '';		}		elseif ($menuType->home == 1 && $menuType->language == '*')		{			$titleicon = ' <i class="icon-home"></i>';		}		elseif ($menuType->home > 1)		{			$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $menuType->home, array('title' => JText::_('MOD_MENU_HOME_MULTIPLE')), true).'</span>';		}		else		{			$image = JHtml::_('image', 'mod_languages/'.$menuType->image.'.gif', null, null, true, true);			if (!$image)			{				$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $alt, array('title' => $menuType->title_native), true).'</span>';			}			else			{				$titleicon = ' <span>' . JHtml::_('image', 'mod_languages/' . $menuType->image . '.gif', $alt, array('title' => $menuType->title_native), true) . '</span>';			}		}		$menu->addChild(			new JMenuNode($menuType->title,	'index.php?option=com_menus&view=items&menutype='.$menuType->menutype, 'class:menu', null, null, $titleicon), $createMenu		);		if ($createMenu)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU_ITEM'), 'index.php?option=com_menus&view=item&layout=edit&menutype='.$menuType->menutype, 'class:newarticle')			);			$menu->getParent();		}	}	$menu->getParent();}//// Content Submenu//if ($user->authorise('core.manage', 'com_content')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT'), '#'), true	);	$createContent = $shownew && $user->authorise('core.create', 'com_content');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_ARTICLE_MANAGER'), 'index.php?option=com_content', 'class:article'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_ARTICLE'), 'index.php?option=com_content&task=article.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_CATEGORY_MANAGER'), 'index.php?option=com_categories&extension=com_content', 'class:category'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_content', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_FEATURED'), 'index.php?option=com_content&view=featured', 'class:featured')	);	$menu->addSeparator();	if ($user->authorise('core.manage', 'com_media'))	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_MEDIA_MANAGER'), 'index.php?option=com_media', 'class:media'));	}	$menu->getParent();}//// Components Submenu//// Get the authorised components and sub-menus.$components = ModMenuHelper::getComponents(true);// Check if there are any components, otherwise, don't render the menuif ($components){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COMPONENTS'), '#'), true);	foreach ($components as &$component)	{		if (!empty($component->submenu))		{			// This component has a db driven submenu.			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img), true);			foreach ($component->submenu as $sub)			{				$menu->addChild(new JMenuNode($sub->text, $sub->link, $sub->img));			}			$menu->getParent();		}		else		{			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img));		}	}	$menu->getParent();}//// Extensions Submenu//$im = $user->authorise('core.manage', 'com_installer');$mm = $user->authorise('core.manage', 'com_modules');$pm = $user->authorise('core.manage', 'com_plugins');$tm = $user->authorise('core.manage', 'com_templates');$lm = $user->authorise('core.manage', 'com_languages');if ($im || $mm || $pm || $tm || $lm){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSIONS'), '#'), true);	if ($im)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSION_MANAGER'), 'index.php?option=com_installer', 'class:install'));		$menu->addSeparator();	}	if ($mm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_MODULE_MANAGER'), 'index.php?option=com_modules', 'class:module'));	}	if ($pm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_PLUGIN_MANAGER'), 'index.php?option=com_plugins', 'class:plugin'));	}	if ($tm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_TEMPLATE_MANAGER'), 'index.php?option=com_templates', 'class:themes'));	}	if ($lm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_LANGUAGE_MANAGER'), 'index.php?option=com_languages', 'class:language'));	}	$menu->getParent();}//// Help Submenu//if ($showhelp == 1){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP'), '#'), true	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_JOOMLA'), 'index.php?option=com_admin&view=help', 'class:help')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_FORUM'), 'http://forum.joomla.org', 'class:help-forum', false, '_blank')	);	if ($forum_url = $params->get('forum_url'))	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_CUSTOM_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$debug = $lang->setDebug(false);	if ($lang->hasKey('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') && JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') != '')	{		$forum_url = 'http://forum.joomla.org/viewforum.php?f=' . (int) JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE');		$lang->setDebug($debug);		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$lang->setDebug($debug);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DOCUMENTATION'), 'http://docs.joomla.org', 'class:help-docs', false, '_blank')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_EXTENSIONS'), 'http://extensions.joomla.org', 'class:help-jed', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_TRANSLATIONS'), 'http://community.joomla.org/translations.html', 'class:help-trans', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_RESOURCES'), 'http://resources.joomla.org', 'class:help-jrd', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_COMMUNITY'), 'http://community.joomla.org', 'class:help-community', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SECURITY'), 'http://developer.joomla.org/security.html', 'class:help-security', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DEVELOPER'), 'http://developer.joomla.org', 'class:help-dev', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SHOP'), 'http://shop.joomla.org', 'class:help-shop', false, '_blank')	);	$menu->getParent();}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with system * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlSystem{	/**	 * Method to generate a string message for a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 */	public static function server($val)	{		if (empty($val))		{			return JText::_('COM_ADMIN_NA');		}		else		{			return $val;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Article View class for the Weblinks component * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewForm extends JViewLegacy{	protected $form;	protected $item;	protected $return_page;	protected $state;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		// Get model data.		$this->state		= $this->get('State');		$this->item			= $this->get('Item');		$this->form			= $this->get('Form');		$this->return_page	= $this->get('ReturnPage');		if (empty($this->item->id))		{			$authorised = ($user->authorise('core.create', 'com_weblinks') || (count($user->getAuthorisedCategories('com_weblinks', 'core.create'))));		}		else		{			$authorised = $user->authorise('core.edit', 'com_weblinks.weblink.'.$this->item->id);		}		if ($authorised !== true)		{			JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			return false;		}		if (!empty($this->item))		{			$this->form->bind($this->item);		}		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Create a shortcut to the parameters.		$params	= &$this->state->params;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params	= $params;		$this->user		= $user;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if (empty($this->item->id))	{		$head = JText::_('COM_WEBLINKS_FORM_SUBMIT_WEBLINK');		}		else		{		$head = JText::_('COM_WEBLINKS_FORM_EDIT_WEBLINK');		}		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', $head);		}		$title = $this->params->def('page_title', $head);		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}			if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCategories Class. * * @package     Joomla.Legacy * @subpackage  Categories * @since       11.1 */class JCategories{	/**	 * Array to hold the object instances	 *	 * @var    array	 * @since  11.1	 */	public static $instances = array();	/**	 * Array of category nodes	 *	 * @var    mixed	 * @since  11.1	 */	protected $_nodes;	/**	 * Array of checked categories -- used to save values when _nodes are null	 *	 * @var    array	 * @since  11.1	 */	protected $_checkedCategories;	/**	 * Name of the extension the categories belong to	 *	 * @var    string	 * @since  11.1	 */	protected $_extension = null;	/**	 * Name of the linked content table to get category content count	 *	 * @var    string	 * @since  11.1	 */	protected $_table = null;	/**	 * Name of the category field	 *	 * @var    string	 * @since  11.1	 */	protected $_field = null;	/**	 * Name of the key field	 *	 * @var    string	 * @since  11.1	 */	protected $_key = null;	/**	 * Name of the items state field	 *	 * @var    string	 * @since  11.1	 */	protected $_statefield = null;	/**	 * Array of options	 *	 * @var    array	 * @since  11.1	 */	protected $_options = null;	/**	 * Class constructor	 *	 * @param   array  $options  Array of options	 *	 * @since   11.1	 */	public function __construct($options)	{		$this->_extension = $options['extension'];		$this->_table = $options['table'];		$this->_field = (isset($options['field']) && $options['field']) ? $options['field'] : 'catid';		$this->_key = (isset($options['key']) && $options['key']) ? $options['key'] : 'id';		$this->_statefield = (isset($options['statefield'])) ? $options['statefield'] : 'state';		$options['access'] = (isset($options['access'])) ? $options['access'] : 'true';		$options['published'] = (isset($options['published'])) ? $options['published'] : 1;		$this->_options = $options;		return true;	}	/**	 * Returns a reference to a JCategories object	 *	 * @param   string  $extension  Name of the categories extension	 * @param   array   $options    An array of options	 *	 * @return  JCategories         JCategories object	 *	 * @since   11.1	 */	public static function getInstance($extension, $options = array())	{		$hash = md5($extension . serialize($options));		if (isset(self::$instances[$hash]))		{			return self::$instances[$hash];		}		$parts = explode('.', $extension);		$component = 'com_' . strtolower($parts[0]);		$section = count($parts) > 1 ? $parts[1] : '';		$classname = ucfirst(substr($component, 4)) . ucfirst($section) . 'Categories';		if (!class_exists($classname))		{			$path = JPATH_SITE . '/components/' . $component . '/helpers/category.php';			if (is_file($path))			{				include_once $path;			}			else			{				return false;			}		}		self::$instances[$hash] = new $classname($options);		return self::$instances[$hash];	}	/**	 * Loads a specific category and all its children in a JCategoryNode object	 *	 * @param   mixed    $id         an optional id integer or equal to 'root'	 * @param   boolean  $forceload  True to force  the _load method to execute	 *	 * @return  mixed    JCategoryNode object or null if $id is not valid	 *	 * @since   11.1	 */	public function get($id = 'root', $forceload = false)	{		if ($id !== 'root')		{			$id = (int) $id;			if ($id == 0)			{				$id = 'root';			}		}		// If this $id has not been processed yet, execute the _load method		if ((!isset($this->_nodes[$id]) && !isset($this->_checkedCategories[$id])) || $forceload)		{			$this->_load($id);		}		// If we already have a value in _nodes for this $id, then use it.		if (isset($this->_nodes[$id]))		{			return $this->_nodes[$id];		}		// If we processed this $id already and it was not valid, then return null.		elseif (isset($this->_checkedCategories[$id]))		{			return null;		}		return false;	}	/**	 * Load method	 *	 * @param   integer  $id  Id of category to load	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _load($id)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$extension = $this->_extension;		// Record that has this $id has been checked		$this->_checkedCategories[$id] = true;		$query = $db->getQuery(true);		// Right join with c for category		$query->select('c.id, c.asset_id, c.access, c.alias, c.checked_out, c.checked_out_time,			c.created_time, c.created_user_id, c.description, c.extension, c.hits, c.language, c.level,			c.lft, c.metadata, c.metadesc, c.metakey, c.modified_time, c.note, c.params, c.parent_id,			c.path, c.published, c.rgt, c.title, c.modified_user_id, c.version');		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('c.alias', '!=', '0');		$case_when .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $c_id . ' END as slug';		$query->select($case_when)			->from('#__categories as c')			->where('(c.extension=' . $db->quote($extension) . ' OR c.extension=' . $db->quote('system') . ')');		if ($this->_options['access'])		{			$query->where('c.access IN (' . implode(',', $user->getAuthorisedViewLevels()) . ')');		}		if ($this->_options['published'] == 1)		{			$query->where('c.published = 1');		}		$query->order('c.lft');		// Note: s for selected id		if ($id != 'root')		{			// Get the selected category			$query->join('LEFT', '#__categories AS s ON (s.lft <= c.lft AND s.rgt >= c.rgt) OR (s.lft > c.lft AND s.rgt < c.rgt)')				->where('s.id=' . (int) $id);		}		$subQuery = ' (SELECT cat.id as id FROM #__categories AS cat JOIN #__categories AS parent ' .			'ON cat.lft BETWEEN parent.lft AND parent.rgt WHERE parent.extension = ' . $db->quote($extension) .			' AND parent.published != 1 GROUP BY cat.id) ';		$query->join('LEFT', $subQuery . 'AS badcats ON badcats.id = c.id')			->where('badcats.id is null');		// Note: i for item		if (isset($this->_options['countItems']) && $this->_options['countItems'] == 1)		{			if ($this->_options['published'] == 1)			{				$query->join(					'LEFT',					$db->quoteName($this->_table) . ' AS i ON i.' . $db->quoteName($this->_field) . ' = c.id AND i.' . $this->_statefield . ' = 1'				);			}			else			{				$query->join('LEFT', $db->quoteName($this->_table) . ' AS i ON i.' . $db->quoteName($this->_field) . ' = c.id');			}			$query->select('COUNT(i.' . $db->quoteName($this->_key) . ') AS numitems');		}		// Group by		$query->group(			'c.id, c.asset_id, c.access, c.alias, c.checked_out, c.checked_out_time,			 c.created_time, c.created_user_id, c.description, c.extension, c.hits, c.language, c.level,			 c.lft, c.metadata, c.metadesc, c.metakey, c.modified_time, c.note, c.params, c.parent_id,			 c.path, c.published, c.rgt, c.title, c.modified_user_id, c.version'		);		// Get the results		$db->setQuery($query);		$results = $db->loadObjectList('id');		$childrenLoaded = false;		if (count($results))		{			// Foreach categories			foreach ($results as $result)			{				// Deal with root category				if ($result->id == 1)				{					$result->id = 'root';				}				// Deal with parent_id				if ($result->parent_id == 1)				{					$result->parent_id = 'root';				}				// Create the node				if (!isset($this->_nodes[$result->id]))				{					// Create the JCategoryNode and add to _nodes					$this->_nodes[$result->id] = new JCategoryNode($result, $this);					// If this is not root and if the current node's parent is in the list or the current node parent is 0					if ($result->id != 'root' && (isset($this->_nodes[$result->parent_id]) || $result->parent_id == 1))					{						// Compute relationship between node and its parent - set the parent in the _nodes field						$this->_nodes[$result->id]->setParent($this->_nodes[$result->parent_id]);					}					// If the node's parent id is not in the _nodes list and the node is not root (doesn't have parent_id == 0),					// then remove the node from the list					if (!(isset($this->_nodes[$result->parent_id]) || $result->parent_id == 0))					{						unset($this->_nodes[$result->id]);						continue;					}					if ($result->id == $id || $childrenLoaded)					{						$this->_nodes[$result->id]->setAllLoaded();						$childrenLoaded = true;					}				}				elseif ($result->id == $id || $childrenLoaded)				{					// Create the JCategoryNode					$this->_nodes[$result->id] = new JCategoryNode($result, $this);					if ($result->id != 'root' && (isset($this->_nodes[$result->parent_id]) || $result->parent_id))					{						// Compute relationship between node and its parent						$this->_nodes[$result->id]->setParent($this->_nodes[$result->parent_id]);					}					if (!isset($this->_nodes[$result->parent_id]))					{						unset($this->_nodes[$result->id]);						continue;					}					if ($result->id == $id || $childrenLoaded)					{						$this->_nodes[$result->id]->setAllLoaded();						$childrenLoaded = true;					}				}			}		}		else		{			$this->_nodes[$id] = null;		}	}}/** * Helper class to load Categorytree * * @package     Joomla.Legacy * @subpackage  Categories * @since       11.1 */class JCategoryNode extends JObject{	/**	 * Primary key	 *	 * @var    integer	 * @since  11.1	 */	public $id = null;	/**	 * The id of the category in the asset table	 *	 * @var    integer	 * @since  11.1	 */	public $asset_id = null;	/**	 * The id of the parent of category in the asset table, 0 for category root	 *	 * @var    integer	 * @since  11.1	 */	public $parent_id = null;	/**	 * The lft value for this category in the category tree	 *	 * @var    integer	 * @since  11.1	 */	public $lft = null;	/**	 * The rgt value for this category in the category tree	 *	 * @var    integer	 * @since  11.1	 */	public $rgt = null;	/**	 * The depth of this category's position in the category tree	 *	 * @var    integer	 * @since  11.1	 */	public $level = null;	/**	 * The extension this category is associated with	 *	 * @var    integer	 * @since  11.1	 */	public $extension = null;	/**	 * The menu title for the category (a short name)	 *	 * @var    string	 * @since  11.1	 */	public $title = null;	/**	 * The the alias for the category	 *	 * @var    string	 * @since  11.1	 */	public $alias = null;	/**	 * Description of the category.	 *	 * @var    string	 * @since  11.1	 */	public $description = null;	/**	 * The publication status of the category	 *	 * @var    boolean	 * @since  11.1	 */	public $published = null;	/**	 * Whether the category is or is not checked out	 *	 * @var    boolean	 * @since  11.1	 */	public $checked_out = 0;	/**	 * The time at which the category was checked out	 *	 * @var    string	 * @since  11.1	 */	public $checked_out_time = 0;	/**	 * Access level for the category	 *	 * @var    integer	 * @since  11.1	 */	public $access = null;	/**	 * JSON string of parameters	 *	 * @var    string	 * @since  11.1	 */	public $params = null;	/**	 * Metadata description	 *	 * @var    string	 * @since  11.1	 */	public $metadesc = null;	/**	 * Key words for meta data	 *	 * @var    string	 * @since  11.1	 */	public $metakey = null;	/**	 * JSON string of other meta data	 *	 * @var    string	 * @since  11.1	 */	public $metadata = null;	/**	 * The ID of the user who created the category	 *	 * @var    integer	 * @since  11.1	 */	public $created_user_id = null;	/**	 * The time at which the category was created	 *	 * @var    string	 * @since  11.1	 */	public $created_time = null;	/**	 * The ID of the user who last modified the category	 *	 * @var    integer	 * @since  11.1	 */	public $modified_user_id = null;	/**	 * The time at which the category was modified	 *	 * @var    string	 * @since  11.1	 */	public $modified_time = null;	/**	 * Nmber of times the category has been viewed	 *	 * @var    integer	 * @since  11.1	 */	public $hits = null;	/**	 * The language for the category in xx-XX format	 *	 * @var    string	 * @since  11.1	 */	public $language = null;	/**	 * Number of items in this category or descendants of this category	 *	 * @var    integer	 * @since  11.1	 */	public $numitems = null;	/**	 * Number of children items	 *	 * @var    integer	 * @since  11.1	 */	public $childrennumitems = null;	/**	 * Slug fo the category (used in URL)	 *	 * @var    string	 * @since  11.1	 */	public $slug = null;	/**	 * Array of  assets	 *	 * @var    array	 * @since  11.1	 */	public $assets = null;	/**	 * Parent Category object	 *	 * @var    object	 * @since  11.1	 */	protected $_parent = null;	/**	 * @var Array of Children	 * @since  11.1	 */	protected $_children = array();	/**	 * Path from root to this category	 *	 * @var    array	 * @since  11.1	 */	protected $_path = array();	/**	 * Category left of this one	 *	 * @var    integer	 * @since  11.1	 */	protected $_leftSibling = null;	/**	 * Category right of this one	 *	 * @var	 * @since  11.1	 */	protected $_rightSibling = null;	/**	 * true if all children have been loaded	 *	 * @var boolean	 * @since  11.1	 */	protected $_allChildrenloaded = false;	/**	 * Constructor of this tree	 *	 * @var	 * @since  11.1	 */	protected $_constructor = null;	/**	 * Class constructor	 *	 * @param   array          $category     The category data.	 * @param   JCategoryNode  $constructor  The tree constructor.	 *	 * @since   11.1	 */	public function __construct($category = null, $constructor = null)	{		if ($category)		{			$this->setProperties($category);			if ($constructor)			{				$this->_constructor = $constructor;			}			return true;		}		return false;	}	/**	 * Set the parent of this category	 *	 * If the category already has a parent, the link is unset	 *	 * @param   mixed  $parent  JCategoryNode for the parent to be set or null	 *	 * @return  void	 *	 * @since   11.1	 */	public function setParent($parent)	{		if ($parent instanceof JCategoryNode || is_null($parent))		{			if (!is_null($this->_parent))			{				$key = array_search($this, $this->_parent->_children);				unset($this->_parent->_children[$key]);			}			if (!is_null($parent))			{				$parent->_children[] = & $this;			}			$this->_parent = $parent;			if ($this->id != 'root')			{				if ($this->parent_id != 1)				{					$this->_path = $parent->getPath();				}				$this->_path[] = $this->id . ':' . $this->alias;			}			if (count($parent->_children) > 1)			{				end($parent->_children);				$this->_leftSibling = prev($parent->_children);				$this->_leftSibling->_rightsibling = & $this;			}		}	}	/**	 * Add child to this node	 *	 * If the child already has a parent, the link is unset	 *	 * @param   JCategoryNode  $child  The child to be added.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addChild($child)	{		if ($child instanceof JCategoryNode)		{			$child->setParent($this);		}	}	/**	 * Remove a specific child	 *	 * @param   integer  $id  ID of a category	 *	 * @return  void	 *	 * @since   11.1	 */	public function removeChild($id)	{		$key = array_search($this, $this->_parent->_children);		unset($this->_parent->_children[$key]);	}	/**	 * Get the children of this node	 *	 * @param   boolean  $recursive  False by default	 *	 * @return  array  The children	 *	 * @since   11.1	 */	public function &getChildren($recursive = false)	{		if (!$this->_allChildrenloaded)		{			$temp = $this->_constructor->get($this->id, true);			if ($temp)			{				$this->_children = $temp->getChildren();				$this->_leftSibling = $temp->getSibling(false);				$this->_rightSibling = $temp->getSibling(true);				$this->setAllLoaded();			}		}		if ($recursive)		{			$items = array();			foreach ($this->_children as $child)			{				$items[] = $child;				$items = array_merge($items, $child->getChildren(true));			}			return $items;		}		return $this->_children;	}	/**	 * Get the parent of this node	 *	 * @return  mixed  JCategoryNode or null	 *	 * @since   11.1	 */	public function getParent()	{		return $this->_parent;	}	/**	 * Test if this node has children	 *	 * @return  boolean  True if there is a child	 *	 * @since   11.1	 */	public function hasChildren()	{		return count($this->_children);	}	/**	 * Test if this node has a parent	 *	 * @return  boolean    True if there is a parent	 *	 * @since   11.1	 */	public function hasParent()	{		return $this->getParent() != null;	}	/**	 * Function to set the left or right sibling of a category	 *	 * @param   JCategoryNode  $sibling  JCategoryNode object for the sibling	 * @param   boolean        $right    If set to false, the sibling is the left one	 *	 * @return  void	 *	 * @since   11.1	 */	public function setSibling($sibling, $right = true)	{		if ($right)		{			$this->_rightSibling = $sibling;		}		else		{			$this->_leftSibling = $sibling;		}	}	/**	 * Returns the right or left sibling of a category	 *	 * @param   boolean  $right  If set to false, returns the left sibling	 *	 * @return  mixed  JCategoryNode object with the sibling information or	 *                 NULL if there is no sibling on that side.	 *	 * @since          11.1	 */	public function getSibling($right = true)	{		if (!$this->_allChildrenloaded)		{			$temp = $this->_constructor->get($this->id, true);			$this->_children = $temp->getChildren();			$this->_leftSibling = $temp->getSibling(false);			$this->_rightSibling = $temp->getSibling(true);			$this->setAllLoaded();		}		if ($right)		{			return $this->_rightSibling;		}		else		{			return $this->_leftSibling;		}	}	/**	 * Returns the category parameters	 *	 * @return  JRegistry	 *	 * @since   11.1	 */	public function getParams()	{		if (!($this->params instanceof JRegistry))		{			$temp = new JRegistry;			$temp->loadString($this->params);			$this->params = $temp;		}		return $this->params;	}	/**	 * Returns the category metadata	 *	 * @return  JRegistry  A JRegistry object containing the metadata	 *	 * @since   11.1	 */	public function getMetadata()	{		if (!($this->metadata instanceof JRegistry))		{			$temp = new JRegistry;			$temp->loadString($this->metadata);			$this->metadata = $temp;		}		return $this->metadata;	}	/**	 * Returns the category path to the root category	 *	 * @return  array	 *	 * @since   11.1	 */	public function getPath()	{		return $this->_path;	}	/**	 * Returns the user that created the category	 *	 * @param   boolean  $modified_user  Returns the modified_user when set to true	 *	 * @return  JUser  A JUser object containing a userid	 *	 * @since   11.1	 */	public function getAuthor($modified_user = false)	{		if ($modified_user)		{			return JFactory::getUser($this->modified_user_id);		}		return JFactory::getUser($this->created_user_id);	}	/**	 * Set to load all children	 *	 * @return  void	 *	 * @since 11.1	 */	public function setAllLoaded()	{		$this->_allChildrenloaded = true;		foreach ($this->_children as $child)		{			$child->setAllLoaded();		}	}	/**	 * Returns the number of items.	 *	 * @param   boolean  $recursive  If false number of children, if true number of descendants	 *	 * @return  integer  Number of children or descendants	 *	 * @since 11.1	 */	public function getNumItems($recursive = false)	{		if ($recursive)		{			$count = $this->numitems;			foreach ($this->getChildren() as $child)			{				$count = $count + $child->getNumItems(true);			}			return $count;		}		return $this->numitems;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.updater.update');/** * Languages Installer Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.7 */class InstallerModelLanguages extends JModelList{	/**	 * Constructor override, defines a white list of column filters.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @since   2.5.7	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'update_id', 'update_id',				'name', 'name',			);		}		parent::__construct($config);	}	/**	 * Method to get the available languages database query.	 *	 * @return  JDatabaseQuery  The database query	 *	 * @since   2.5.7	 */	protected function _getListQuery()	{		$db   = JFactory::getDbo();		$query = $db->getQuery(true);		// Select the required fields from the updates table		$query->select('update_id, name, version, detailsurl, type')			->from('#__updates');		// This Where clause will avoid to list languages already installed.		$query->where('extension_id = 0');		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(name LIKE ' . $search . ')');		}		// Add the list ordering clause.		$listOrder = $this->state->get('list.ordering');		$orderDirn = $this->state->get('list.direction');		$query->order($db->escape($listOrder) . ' ' . $db->escape($orderDirn));		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 *	 * @since   2.5.7	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':' . $this->getState('filter.search');		return parent::getStoreId($id);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   list order	 * @param   string  $direction  direction in the list	 *	 * @return  void	 *	 * @since   2.5.7	 */	protected function populateState($ordering = 'name', $direction = 'asc')	{		$app = JFactory::getApplication();		$value = $app->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $value);		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		parent::populateState($ordering, $direction);	}	/**	 * Method to find available languages in the Accredited Languages Update Site.	 *	 * @param   int  $cache_timeout  time before refreshing the cached updates	 *	 * @return  bool	 *	 * @since   2.5.7	 */	public function findLanguages($cache_timeout = 0)	{		$updater = JUpdater::getInstance();		/*		 * The following function uses extension_id 600, that is the english language extension id.		 * In #__update_sites_extensions you should have 600 linked to the Accredited Translations Repo		 */		$updater->findUpdates(array(600), $cache_timeout);		return true;	}	/**	 * Install languages in the system.	 *	 * @param   array  $lids  array of language ids selected in the list	 *	 * @return  bool	 *	 * @since   2.5.7	 */	public function install($lids)	{		$app       = JFactory::getApplication();		$installer = JInstaller::getInstance();		// Loop through every selected language		foreach ($lids as $id)		{			// Loads the update database object that represents the language			$language = JTable::getInstance('update');			$language->load($id);			// Get the url to the XML manifest file of the selected language			$remote_manifest = $this->_getLanguageManifest($id);			if (!$remote_manifest)			{				// Could not find the url, the information in the update server may be corrupt				$message  = JText::sprintf('COM_INSTALLER_MSG_LANGUAGES_CANT_FIND_REMOTE_MANIFEST', $language->name);				$message .= ' ' . JText::_('COM_INSTALLER_MSG_LANGUAGES_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Based on the language XML manifest get the url of the package to download			$package_url = $this->_getPackageUrl($remote_manifest);			if (!$package_url)			{				// Could not find the url , maybe the url is wrong in the update server, or there is not internet access				$message  = JText::sprintf('COM_INSTALLER_MSG_LANGUAGES_CANT_FIND_REMOTE_PACKAGE', $language->name);				$message .= ' ' . JText::_('COM_INSTALLER_MSG_LANGUAGES_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Download the package to the tmp folder			$package = $this->_downloadPackage($package_url);			// Install the package			if (!$installer->install($package['dir']))			{				// There was an error installing the package				$message  = JText::sprintf('COM_INSTALLER_INSTALL_ERROR', $language->name);				$message .= ' ' . JText::_('COM_INSTALLER_MSG_LANGUAGES_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Package installed successfully			$app->enqueueMessage(JText::sprintf('COM_INSTALLER_INSTALL_SUCCESS', $language->name));			// Cleanup the install files in tmp folder			if (!is_file($package['packagefile']))			{				$config = JFactory::getConfig();				$package['packagefile'] = $config->get('tmp_path') . '/' . $package['packagefile'];			}			JInstallerHelper::cleanupInstall($package['packagefile'], $package['extractdir']);			// Delete the installed language from the list			$language->delete($id);		}	}	/**	 * Gets the manifest file of a selected language from a the language list in a update server.	 *	 * @param   int  $uid  the id of the language in the #__updates table	 *	 * @return  string	 *	 * @since   2.5.7	 */	protected function _getLanguageManifest($uid)	{		$instance = JTable::getInstance('update');		$instance->load($uid);		return $instance->detailsurl;	}	/**	 * Finds the url of the package to download.	 *	 * @param   string  $remote_manifest  url to the manifest XML file of the remote package	 *	 * @return  string|bool	 *	 * @since   2.5.7	 */	protected function _getPackageUrl( $remote_manifest )	{		$update = new JUpdate;		$update->loadFromXML($remote_manifest);		$package_url = trim($update->get('downloadurl', false)->_data);		return $package_url;	}	/**	 * Download a language package from a URL and unpack it in the tmp folder.	 *	 * @param   string  $url  hola	 *	 * @return  array|bool  Package details or false on failure	 *	 * @since   2.5.7	 */	protected function _downloadPackage($url)	{		// Download the package from the given URL		$p_file = JInstallerHelper::downloadPackage($url);		// Was the package downloaded?		if (!$p_file)		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_INVALID_URL'));			return false;		}		$config   = JFactory::getConfig();		$tmp_dest = $config->get('tmp_path');		// Unpack the downloaded package file		$package = JInstallerHelper::unpack($tmp_dest . '/' . $p_file);		return $package;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of template styles. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesViewStyles extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->preview		= JComponentHelper::getParams('com_templates')->get('template_positions_display');		TemplatesHelper::addSubmenu('styles');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}			// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_TEMPLATES_MSG_MANAGE_NO_STYLES'),				'warning'			);		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= TemplatesHelper::getActions();		$isSite	= ($state->get('filter.client_id') == 0);		JToolbarHelper::title(JText::_('COM_TEMPLATES_MANAGER_STYLES'), 'thememanager');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::makeDefault('styles.setDefault', 'COM_TEMPLATES_TOOLBAR_SET_HOME');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('style.edit');		}		if ($canDo->get('core.create'))		{			JToolbarHelper::custom('styles.duplicate', 'copy.png', 'copy_f2.png', 'JTOOLBAR_DUPLICATE', true);			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'styles.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_templates');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_TEMPLATE_MANAGER_STYLES');		JHtmlSidebar::setAction('index.php?option=com_templates&view=styles');		JHtmlSidebar::addFilter(			JText::_('COM_TEMPLATES_FILTER_TEMPLATE'),			'filter_template',			JHtml::_('select.options', TemplatesHelper::getTemplateOptions($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.template'))		);		JHtmlSidebar::addFilter(			JText::_('JGLOBAL_FILTER_CLIENT'),			'filter_client_id',			JHtml::_('select.options', TemplatesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Model Class * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesModelLanguages extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'lang_id', 'a.lang_id',				'lang_code', 'a.lang_code',				'title', 'a.title',				'title_native', 'a.title_native',				'sef', 'a.sef',				'image', 'a.image',				'published', 'a.published',				'ordering', 'a.ordering',				'access', 'a.access', 'access_level',				'home', 'l.home',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$published = $this->getUserStateFromRequest($this->context . '.published', 'filter_published', '');		$this->setState('filter.published', $published);		// Load the parameters.		$params = JComponentHelper::getParams('com_languages');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.published');		return parent::getStoreId($id);	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select all fields from the languages table.		$query->select($this->getState('list.select', 'a.*', 'l.home'))			->from($db->quoteName('#__languages') . ' AS a');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Select the language home pages		$query->select('l.home AS home')			->join('LEFT', $db->quoteName('#__menu') . ' AS l  ON  l.language = a.lang_code AND l.home=1  AND l.language <> ' . $db->quote('*'));		// Filter on the published state.		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%', false);			$query->where('(a.title LIKE ' . $search . ')');		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Set the published language(s)	 *	 * @param   array    $cid      An array of language IDs.	 * @param   integer  $value    The value of the published state.	 *	 * @return  boolean  True on success, false otherwise.	 * @since   1.6	 */	public function setPublished($cid, $value = 0)	{		return JTable::getInstance('Language')->publish($cid, $value);	}	/**	 * Method to delete records.	 *	 * @param   array  An array of item primary keys.	 *	 * @return  boolean  Returns true on success, false on failure.	 * @since   1.6	 */	public function delete($pks)	{		// Sanitize the array.		$pks = (array) $pks;		// Get a row instance.		$table = JTable::getInstance('Language');		// Iterate the items to delete each one.		foreach ($pks as $itemId)		{			if (!$table->delete((int) $itemId))			{				$this->setError($table->getError());				return false;			}		}		// Clean the cache.		$this->cleanCache();		return true;	}	/**	 * Custom clean cache method, 2 places for 2 clients	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('_system');		parent::cleanCache('com_languages');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Uri * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JURI Class * * This class serves two purposes. First it parses a URI and provides a common interface * for the Joomla Platform to access and manipulate a URI.  Second it obtains the URI of * the current executing script from the server regardless of server. * * @package     Joomla.Platform * @subpackage  Uri * @since       11.1 */class JUri{	/**	 * @var    string Original URI	 * @since  12.1	 */	protected $uri = null;	/**	 * @var    string  Protocol	 * @since  12.1	 */	protected $scheme = null;	/**	 * @var    string  Host	 * @since  12.1	 */	protected $host = null;	/**	 * @var    integer  Port	 * @since  12.1	 */	protected $port = null;	/**	 * @var    string  Username	 * @since  12.1	 */	protected $user = null;	/**	 * @var    string  Password	 * @since  12.1	 */	protected $pass = null;	/**	 * @var    string  Path	 * @since  12.1	 */	protected $path = null;	/**	 * @var    string  Query	 * @since  12.1	 */	protected $query = null;	/**	 * @var    string  Anchor	 * @since  12.1	 */	protected $fragment = null;	/**	 * @var    array  Query variable hash	 * @since  12.1	 */	protected $vars = array();	/**	 * @var    array  An array of JURI instances.	 * @since  11.1	 */	protected static $instances = array();	/**	 * @var    array  The current calculated base url segments.	 * @since  11.1	 */	protected static $base = array();	/**	 * @var    array  The current calculated root url segments.	 * @since  11.1	 */	protected static $root = array();	/**	 * @var    string  The current url.	 * @since  11.1	 */	protected static $current;	/**	 * Constructor.	 * You can pass a URI string to the constructor to initialise a specific URI.	 *	 * @param   string  $uri  The optional URI string	 *	 * @since   11.1	 */	public function __construct($uri = null)	{		if (!is_null($uri))		{			$this->parse($uri);		}	}	/**	 * Magic method to get the string representation of the URI object.	 *	 * @return  string	 *	 * @since   11.1	 */	public function __toString()	{		return $this->toString();	}	/**	 * Returns the global JURI object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $uri  The URI to parse.  [optional: if null uses script URI]	 *	 * @return  JURI  The URI object.	 *	 * @since   11.1	 */	public static function getInstance($uri = 'SERVER')	{		if (empty(self::$instances[$uri]))		{			// Are we obtaining the URI from the server?			if ($uri == 'SERVER')			{				// Determine if the request was over SSL (HTTPS).				if (isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS']) != 'off'))				{					$https = 's://';				}				else				{					$https = '://';				}				/*				 * Since we are assigning the URI from the server variables, we first need				 * to determine if we are running on apache or IIS.  If PHP_SELF and REQUEST_URI				 * are present, we will assume we are running on apache.				 */				if (!empty($_SERVER['PHP_SELF']) && !empty($_SERVER['REQUEST_URI']))				{					// To build the entire URI we need to prepend the protocol, and the http host					// to the URI string.					$theURI = 'http' . $https . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];				}				else				{					/*					 * Since we do not have REQUEST_URI to work with, we will assume we are					 * running on IIS and will therefore need to work some magic with the SCRIPT_NAME and					 * QUERY_STRING environment variables.					 *					 * IIS uses the SCRIPT_NAME variable instead of a REQUEST_URI variable... thanks, MS					 */					$theURI = 'http' . $https . $_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME'];					// If the query string exists append it to the URI string					if (isset($_SERVER['QUERY_STRING']) && !empty($_SERVER['QUERY_STRING']))					{						$theURI .= '?' . $_SERVER['QUERY_STRING'];					}				}				// Check for quotes in the URL to prevent injections through the Host header				if ($theURI !== str_replace(array("'", '"', '<', '>'), '', $theURI))				{					throw new InvalidArgumentException('Invalid URI detected.');				}			}			else			{				// We were given a URI				$theURI = $uri;			}			self::$instances[$uri] = new JURI($theURI);		}		return clone self::$instances[$uri];	}	/**	 * Returns the base URI for the request.	 *	 * @param   boolean  $pathonly  If false, prepend the scheme, host and port information. Default is false.	 *	 * @return  string  The base URI string	 *	 * @since   11.1	 */	public static function base($pathonly = false)	{		// Get the base request path.		if (empty(self::$base))		{			$config = JFactory::getConfig();			$live_site = $config->get('live_site');			if (trim($live_site) != '')			{				$uri = self::getInstance($live_site);				self::$base['prefix'] = $uri->toString(array('scheme', 'host', 'port'));				self::$base['path'] = rtrim($uri->toString(array('path')), '/\\');				if (defined('JPATH_BASE') && defined('JPATH_ADMINISTRATOR'))				{					if (JPATH_BASE == JPATH_ADMINISTRATOR)					{						self::$base['path'] .= '/administrator';					}				}			}			else			{				$uri = self::getInstance();				self::$base['prefix'] = $uri->toString(array('scheme', 'host', 'port'));				if (strpos(php_sapi_name(), 'cgi') !== false && !ini_get('cgi.fix_pathinfo') && !empty($_SERVER['REQUEST_URI']))				{					// PHP-CGI on Apache with "cgi.fix_pathinfo = 0"					// We shouldn't have user-supplied PATH_INFO in PHP_SELF in this case					// because PHP will not work with PATH_INFO at all.					$script_name = $_SERVER['PHP_SELF'];				}				else				{					// Others					$script_name = $_SERVER['SCRIPT_NAME'];				}				self::$base['path'] = rtrim(dirname($script_name), '/\\');			}		}		return $pathonly === false ? self::$base['prefix'] . self::$base['path'] . '/' : self::$base['path'];	}	/**	 * Returns the root URI for the request.	 *	 * @param   boolean  $pathonly  If false, prepend the scheme, host and port information. Default is false.	 * @param   string   $path      The path	 *	 * @return  string  The root URI string.	 *	 * @since   11.1	 */	public static function root($pathonly = false, $path = null)	{		// Get the scheme		if (empty(self::$root))		{			$uri = self::getInstance(self::base());			self::$root['prefix'] = $uri->toString(array('scheme', 'host', 'port'));			self::$root['path'] = rtrim($uri->toString(array('path')), '/\\');		}		// Get the scheme		if (isset($path))		{			self::$root['path'] = $path;		}		return $pathonly === false ? self::$root['prefix'] . self::$root['path'] . '/' : self::$root['path'];	}	/**	 * Returns the URL for the request, minus the query.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function current()	{		// Get the current URL.		if (empty(self::$current))		{			$uri = self::getInstance();			self::$current = $uri->toString(array('scheme', 'host', 'port', 'path'));		}		return self::$current;	}	/**	 * Method to reset class static members for testing and other various issues.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function reset()	{		self::$instances = array();		self::$base = array();		self::$root = array();		self::$current = '';	}	/**	 * Parse a given URI and populate the class fields.	 *	 * @param   string  $uri  The URI string to parse.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function parse($uri)	{		// Set the original URI to fall back on		$this->uri = $uri;		// Parse the URI and populate the object fields. If URI is parsed properly,		// set method return value to true.		$parts = JString::parse_url($uri);		$retval = ($parts) ? true : false;		// We need to replace &amp; with & for parse_str to work right...		if (isset($parts['query']) && strpos($parts['query'], '&amp;'))		{			$parts['query'] = str_replace('&amp;', '&', $parts['query']);		}		$this->scheme = isset($parts['scheme']) ? $parts['scheme'] : null;		$this->user = isset($parts['user']) ? $parts['user'] : null;		$this->pass = isset($parts['pass']) ? $parts['pass'] : null;		$this->host = isset($parts['host']) ? $parts['host'] : null;		$this->port = isset($parts['port']) ? $parts['port'] : null;		$this->path = isset($parts['path']) ? $parts['path'] : null;		$this->query = isset($parts['query']) ? $parts['query'] : null;		$this->fragment = isset($parts['fragment']) ? $parts['fragment'] : null;		// Parse the query		if (isset($parts['query']))		{			parse_str($parts['query'], $this->vars);		}		return $retval;	}	/**	 * Returns full uri string.	 *	 * @param   array  $parts  An array specifying the parts to render.	 *	 * @return  string  The rendered URI string.	 *	 * @since   11.1	 */	public function toString(array $parts = array('scheme', 'user', 'pass', 'host', 'port', 'path', 'query', 'fragment'))	{		// Make sure the query is created		$query = $this->getQuery();		$uri = '';		$uri .= in_array('scheme', $parts) ? (!empty($this->scheme) ? $this->scheme . '://' : '') : '';		$uri .= in_array('user', $parts) ? $this->user : '';		$uri .= in_array('pass', $parts) ? (!empty($this->pass) ? ':' : '') . $this->pass . (!empty($this->user) ? '@' : '') : '';		$uri .= in_array('host', $parts) ? $this->host : '';		$uri .= in_array('port', $parts) ? (!empty($this->port) ? ':' : '') . $this->port : '';		$uri .= in_array('path', $parts) ? $this->path : '';		$uri .= in_array('query', $parts) ? (!empty($query) ? '?' . $query : '') : '';		$uri .= in_array('fragment', $parts) ? (!empty($this->fragment) ? '#' . $this->fragment : '') : '';		return $uri;	}	/**	 * Adds a query variable and value, replacing the value if it	 * already exists and returning the old value.	 *	 * @param   string  $name   Name of the query variable to set.	 * @param   string  $value  Value of the query variable.	 *	 * @return  string  Previous value for the query variable.	 *	 * @since   11.1	 */	public function setVar($name, $value)	{		$tmp = isset($this->vars[$name]) ? $this->vars[$name] : null;		$this->vars[$name] = $value;		// Empty the query		$this->query = null;		return $tmp;	}	/**	 * Checks if variable exists.	 *	 * @param   string  $name  Name of the query variable to check.	 *	 * @return  boolean  True if the variable exists.	 *	 * @since   11.1	 */	public function hasVar($name)	{		return array_key_exists($name, $this->vars);	}	/**	 * Returns a query variable by name.	 *	 * @param   string  $name     Name of the query variable to get.	 * @param   string  $default  Default value to return if the variable is not set.	 *	 * @return  array   Query variables.	 *	 * @since   11.1	 */	public function getVar($name, $default = null)	{		if (array_key_exists($name, $this->vars))		{			return $this->vars[$name];		}		return $default;	}	/**	 * Removes an item from the query string variables if it exists.	 *	 * @param   string  $name  Name of variable to remove.	 *	 * @return  void	 *	 * @since   11.1	 */	public function delVar($name)	{		if (array_key_exists($name, $this->vars))		{			unset($this->vars[$name]);			// Empty the query			$this->query = null;		}	}	/**	 * Sets the query to a supplied string in format:	 * foo=bar&x=y	 *	 * @param   mixed  $query  The query string or array.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setQuery($query)	{		if (is_array($query))		{			$this->vars = $query;		}		else		{			if (strpos($query, '&amp;') !== false)			{				$query = str_replace('&amp;', '&', $query);			}			parse_str($query, $this->vars);		}		// Empty the query		$this->query = null;	}	/**	 * Returns flat query string.	 *	 * @param   boolean  $toArray  True to return the query as a key => value pair array.	 *	 * @return  string   Query string.	 *	 * @since   11.1	 */	public function getQuery($toArray = false)	{		if ($toArray)		{			return $this->vars;		}		// If the query is empty build it first		if (is_null($this->query))		{			$this->query = self::buildQuery($this->vars);		}		return $this->query;	}	/**	 * Build a query from a array (reverse of the PHP parse_str()).	 *	 * @param   array  $params  The array of key => value pairs to return as a query string.	 *	 * @return  string  The resulting query string.	 *	 * @see     parse_str()	 * @since   11.1	 */	public static function buildQuery(array $params)	{		if (count($params) == 0)		{			return false;		}		return urldecode(http_build_query($params, '', '&'));	}	/**	 * Get URI scheme (protocol)	 * ie. http, https, ftp, etc...	 *	 * @return  string  The URI scheme.	 *	 * @since   11.1	 */	public function getScheme()	{		return $this->scheme;	}	/**	 * Set URI scheme (protocol)	 * ie. http, https, ftp, etc...	 *	 * @param   string  $scheme  The URI scheme.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setScheme($scheme)	{		$this->scheme = $scheme;	}	/**	 * Get URI username	 * Returns the username, or null if no username was specified.	 *	 * @return  string  The URI username.	 *	 * @since   11.1	 */	public function getUser()	{		return $this->user;	}	/**	 * Set URI username.	 *	 * @param   string  $user  The URI username.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setUser($user)	{		$this->user = $user;	}	/**	 * Get URI password	 * Returns the password, or null if no password was specified.	 *	 * @return  string  The URI password.	 *	 * @since   11.1	 */	public function getPass()	{		return $this->pass;	}	/**	 * Set URI password.	 *	 * @param   string  $pass  The URI password.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setPass($pass)	{		$this->pass = $pass;	}	/**	 * Get URI host	 * Returns the hostname/ip or null if no hostname/ip was specified.	 *	 * @return  string  The URI host.	 *	 * @since   11.1	 */	public function getHost()	{		return $this->host;	}	/**	 * Set URI host.	 *	 * @param   string  $host  The URI host.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setHost($host)	{		$this->host = $host;	}	/**	 * Get URI port	 * Returns the port number, or null if no port was specified.	 *	 * @return  integer  The URI port number.	 *	 * @since   11.1	 */	public function getPort()	{		return (isset($this->port)) ? $this->port : null;	}	/**	 * Set URI port.	 *	 * @param   integer  $port  The URI port number.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setPort($port)	{		$this->port = $port;	}	/**	 * Gets the URI path string.	 *	 * @return  string  The URI path string.	 *	 * @since   11.1	 */	public function getPath()	{		return $this->path;	}	/**	 * Set the URI path string.	 *	 * @param   string  $path  The URI path string.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setPath($path)	{		$this->path = $this->_cleanPath($path);	}	/**	 * Get the URI archor string	 * Everything after the "#".	 *	 * @return  string  The URI anchor string.	 *	 * @since   11.1	 */	public function getFragment()	{		return $this->fragment;	}	/**	 * Set the URI anchor string	 * everything after the "#".	 *	 * @param   string  $anchor  The URI anchor string.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setFragment($anchor)	{		$this->fragment = $anchor;	}	/**	 * Checks whether the current URI is using HTTPS.	 *	 * @return  boolean  True if using SSL via HTTPS.	 *	 * @since   11.1	 */	public function isSSL()	{		return $this->getScheme() == 'https' ? true : false;	}	/**	 * Checks if the supplied URL is internal	 *	 * @param   string  $url  The URL to check.	 *	 * @return  boolean  True if Internal.	 *	 * @since   11.1	 */	public static function isInternal($url)	{		$uri = self::getInstance($url);		$base = $uri->toString(array('scheme', 'host', 'port', 'path'));		$host = $uri->toString(array('scheme', 'host', 'port'));		if (stripos($base, self::base()) !== 0 && !empty($host))		{			return false;		}		return true;	}	/**	 * Resolves //, ../ and ./ from a path and returns	 * the result. Eg:	 *	 * /foo/bar/../boo.php	=> /foo/boo.php	 * /foo/bar/../../boo.php => /boo.php	 * /foo/bar/.././/boo.php => /foo/boo.php	 *	 * @param   string  $path  The URI path to clean.	 *	 * @return  string  Cleaned and resolved URI path.	 *	 * @since   11.1	 */	protected function _cleanPath($path)	{		$path = explode('/', preg_replace('#(/+)#', '/', $path));		for ($i = 0, $n = count($path); $i < $n; $i++)		{			if ($path[$i] == '.' || $path[$i] == '..')			{				if (($path[$i] == '.') || ($path[$i] == '..' && $i == 1 && $path[0] == ''))				{					unset($path[$i]);					$path = array_values($path);					$i--;					$n--;				}				elseif ($path[$i] == '..' && ($i > 1 || ($i == 1 && $path[0] != '')))				{					unset($path[$i]);					unset($path[$i - 1]);					$path = array_values($path);					$i -= 2;					$n -= 2;				}			}		}		return implode('/', $path);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Field to select a user id from a modal list. * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6.0 */class JFormFieldUser extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6.0	 */	public $type = 'User';	/**	 * Method to get the user field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   1.6.0	 */	protected function getInput()	{		$html = array();		$groups = $this->getGroups();		$excluded = $this->getExcluded();		$link = 'index.php?option=com_users&amp;view=users&amp;layout=modal&amp;tmpl=component&amp;field=' . $this->id			. (isset($groups) ? ('&amp;groups=' . base64_encode(json_encode($groups))) : '')			. (isset($excluded) ? ('&amp;excluded=' . base64_encode(json_encode($excluded))) : '');		// Initialize some field attributes.		$attr = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		// Initialize JavaScript field attributes.		$onchange = (string) $this->element['onchange'];		// Load the modal behavior script.		JHtml::_('behavior.modal', 'a.modal_' . $this->id);		// Build the script.		$script = array();		$script[] = '	function jSelectUser_' . $this->id . '(id, title) {';		$script[] = '		var old_id = document.getElementById("' . $this->id . '_id").value;';		$script[] = '		if (old_id != id) {';		$script[] = '			document.getElementById("' . $this->id . '_id").value = id;';		$script[] = '			document.getElementById("' . $this->id . '_name").value = title;';		$script[] = '			' . $onchange;		$script[] = '		}';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Load the current username if available.		$table = JTable::getInstance('user');		if ($this->value)		{			$table->load($this->value);		}		else		{			$table->username = JText::_('JLIB_FORM_SELECT_USER');		}		// Create a dummy text field with the user name.		$html[] = '<div class="input-append">';		$html[] = '	<input class="input-medium" type="text" id="' . $this->id . '_name" value="' . htmlspecialchars($table->name, ENT_COMPAT, 'UTF-8') . '"'			. ' disabled="disabled"' . $attr . ' />';		// Create the user select button.		if ($this->element['readonly'] != 'true')		{			$html[] = '		<a class="btn btn-primary modal_' . $this->id . '" title="' . JText::_('JLIB_FORM_CHANGE_USER') . '" href="' . $link . '"'				. ' rel="{handler: \'iframe\', size: {x: 800, y: 500}}">';			$html[] = '<i class="icon-user"></i></a>';		}		$html[] = '</div>';		// Create the real field, hidden, that stored the user id.		$html[] = '<input type="hidden" id="' . $this->id . '_id" name="' . $this->name . '" value="' . (int) $this->value . '" />';		return implode("\n", $html);	}	/**	 * Method to get the filtering groups (null means no filtering)	 *	 * @return  mixed  array of filtering groups or null.	 *	 * @since   1.6.0	 */	protected function getGroups()	{		return null;	}	/**	 * Method to get the users to exclude from the list of users	 *	 * @return  mixed  Array of users to exclude or null to to not exclude them	 *	 * @since   1.6.0	 */	protected function getExcluded()	{		return null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to pagination rendering. * * pagination_list_footer * 	Input variable $list is an array with offsets: * 		$list[limit]		: int * 		$list[limitstart]	: int * 		$list[total]		: int * 		$list[limitfield]	: string * 		$list[pagescounter]	: string * 		$list[pageslinks]	: string * * pagination_list_render * 	Input variable $list is an array with offsets: * 		$list[all] * 			[data]		: string * 			[active]	: boolean * 		$list[start] * 			[data]		: string * 			[active]	: boolean * 		$list[previous] * 			[data]		: string * 			[active]	: boolean * 		$list[next] * 			[data]		: string * 			[active]	: boolean * 		$list[end] * 			[data]		: string * 			[active]	: boolean * 		$list[pages] * 			[{PAGE}][data]		: string * 			[{PAGE}][active]	: boolean * * pagination_item_active * 	Input variable $item is an object with fields: * 		$item->base	: integer * 		$item->link	: string * 		$item->text	: string * * pagination_item_inactive * 	Input variable $item is an object with fields: * 		$item->base	: integer * 		$item->link	: string * 		$item->text	: string * * This gives template designers ultimate control over how pagination is rendered. * * NOTE: If you override pagination_item_active OR pagination_item_inactive you MUST override them both *//** * Renders the pagination footer * * @param   array  $list  Array containing pagination footer * * @return  string  HTML markup for the full pagination footer * * @since   3.0 */function pagination_list_footer($list){	$html = "<div class=\"pagination\">\n";	$html .= $list['pageslinks'];	$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"" . $list['limitstart'] . "\" />";	$html .= "\n</div>";	return $html;}/** * Renders the pagination list * * @param   array  $list  Array containing pagination information * * @return  string  HTML markup for the full pagination object * * @since   3.0 */function pagination_list_render($list){	// Calculate to display range of pages	$currentPage = 1;	$range = 1;	$step = 5;	foreach ($list['pages'] as $k => $page)	{		if (!$page['active'])		{			$currentPage = $k;		}	}	if ($currentPage >= $step)	{		if ($currentPage % $step == 0)		{			$range = ceil($currentPage / $step) + 1;		}		else		{			$range = ceil($currentPage / $step);		}	}	$html = '<ul class="pagination-list">';	$html .= $list['start']['data'];	$html .= $list['previous']['data'];	foreach ($list['pages'] as $k => $page)	{		if (in_array($k, range($range * $step - ($step + 1), $range * $step)))		{			if (($k % $step == 0 || $k == $range * $step - ($step + 1)) && $k != $currentPage && $k != $range * $step - $step)			{				$page['data'] = preg_replace('#(<a.*?>).*?(</a>)#', '$1...$2', $page['data']);			}		}		$html .= $page['data'];	}	$html .= $list['next']['data'];	$html .= $list['end']['data'];	$html .= '</ul>';	return $html;}/** * Renders an active item in the pagination block * * @param   JPaginationObject  $item  The current pagination object * * @return  string  HTML markup for active item * * @since   3.0 */function pagination_item_active(&$item){	// Check for "Start" item	if ($item->text == JText::_('JLIB_HTML_START'))	{		$display = '<i class="icon-first"></i>';	}	// Check for "Prev" item	if ($item->text == JText::_('JPREV'))	{		$display = '<i class="icon-previous"></i>';	}	// Check for "Next" item	if ($item->text == JText::_('JNEXT'))	{		$display = '<i class="icon-next"></i>';	}	// Check for "End" item	if ($item->text == JText::_('JLIB_HTML_END'))	{		$display = '<i class="icon-last"></i>';	}	// If the display object isn't set already, just render the item with its text	if (!isset($display))	{		$display = $item->text;	}	return "<li><a title=\"" . $item->text . "\" href=\"" . $item->link . "\" class=\"pagenav\">" . $display . "</a></li>";}/** * Renders an inactive item in the pagination block * * @param   JPaginationObject  $item  The current pagination object * * @return  string  HTML markup for inactive item * * @since   3.0 */function pagination_item_inactive(&$item){	// Check for "Start" item	if ($item->text == JText::_('JLIB_HTML_START'))	{		return '<li class="disabled"><a><i class="icon-first"></i></a></li>';	}	// Check for "Prev" item	if ($item->text == JText::_('JPREV'))	{		return '<li class="disabled"><a><i class="icon-previous"></i></a></li>';	}	// Check for "Next" item	if ($item->text == JText::_('JNEXT'))	{		return '<li class="disabled"><a><i class="icon-next"></i></a></li>';	}	// Check for "End" item	if ($item->text == JText::_('JLIB_HTML_END'))	{		return '<li class="disabled"><a><i class="icon-last"></i></a></li>';	}	// Check if the item is the active page	if (isset($item->active) && ($item->active))	{		return '<li class="active"><a>' . $item->text . '</a></li>';	}	// Doesn't match any other condition, render a normal item	return '<li class="disabled"><a>' . $item->text . '</a></li>';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('text');/** * Supports a modal article picker. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class JFormFieldModulePosition extends JFormFieldText{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ModulePosition';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		// Get the client id.		$clientId = $this->element['client_id'];		if (!isset($clientId))		{			$clientName = $this->element['client'];			if (isset($clientName))			{				$client = JApplicationHelper::getClientInfo($clientName, true);				$clientId = $client->id;			}		}		if (!isset($clientId) && $this->form instanceof JForm)		{			$clientId = $this->form->getValue('client_id');		}		$clientId = (int) $clientId;		// Load the modal behavior script.		JHtml::_('behavior.modal', 'a.modal');		// Build the script.		$script = array();		$script[] = '	function jSelectPosition_' . $this->id . '(name) {';		$script[] = '		document.id("' . $this->id . '").value = name;';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Setup variables for display.		$html = array();		$link = 'index.php?option=com_modules&view=positions&layout=modal&tmpl=component&function=jSelectPosition_' . $this->id . '&amp;client_id=' . $clientId;		// The current user display field.		$html[] = '<div class="input-append">';		$html[] = parent::getInput()			. '<a class="btn modal" title="' . JText::_('COM_MODULES_CHANGE_POSITION_TITLE') . '"  href="' . $link . '" rel="{handler: \'iframe\', size: {x: 800, y: 450}}">'			. '<i class="icon-screenshot"></i> '			. JText::_('COM_MODULES_CHANGE_POSITION_BUTTON') . '</a>';		$html[] = '</div>';		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$client    = $this->state->get('filter.client') == 'site' ? JText::_('JSITE') : JText::_('JADMINISTRATOR');$language  = $this->state->get('filter.language');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction')); ?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=overrides'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDES_FILTER_SEARCH_DESC'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDES_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"></div>		<table class="adminlist">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="30%" class="left">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_KEY', 'key', $listDirn, $listOrder); ?>					</th>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_TEXT', 'text', $listDirn, $listOrder); ?>					</th>					<th class="nowrap">						<?php echo JText::_('COM_LANGUAGES_FIELD_LANG_TAG_LABEL'); ?>					</th>					<th>						<?php echo JText::_('JCLIENT'); ?>					</th>					<th class="right" width="20">						<?php echo JText::_('COM_LANGUAGES_HEADING_NUM'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="6">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php $canEdit = JFactory::getUser()->authorise('core.edit', 'com_languages');			$i = 0;			foreach ($this->items as $key => $text) : ?>				<tr class="row<?php echo $i % 2; ?>" id="overriderrow<?php echo $i; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $key); ?>					</td>					<td>						<?php if ($canEdit) : ?>							<a id="key[<?php echo $this->escape($key); ?>]" href="<?php echo JRoute::_('index.php?option=com_languages&task=override.edit&id='.$key); ?>"><?php echo $this->escape($key); ?></a>						<?php else: ?>							<?php echo $this->escape($key); ?>						<?php endif; ?>					</td>					<td>						<span id="string[<?php	echo $this->escape($key); ?>]"><?php echo $this->escape($text); ?></span>					</td>					<td class="center">						<?php echo $language; ?>					</td>					<td class="center">						<?php echo $client; ?>					</td>					<td class="right">						<?php echo $this->pagination->getRowOffset($i); ?>					</td>				</tr>			<?php $i++;			endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories view class for the Category package. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesViewCategories extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	protected $assoc;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->assoc		= $this->get('Assoc');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Preprocess the list of items to find ordering divisions.		foreach ($this->items as &$item)		{			$this->ordering[$item->parent_id][] = $item->id;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$categoryId	= $this->state->get('filter.category_id');		$component	= $this->state->get('filter.component');		$section	= $this->state->get('filter.section');		$canDo		= null;		$user		= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Avoid nonsense situation.		if ($component == 'com_categories')		{			return;		}		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load($component, JPATH_BASE, null, false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, null, false, false)		||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, $lang->getDefault(), false, false);		// Load the category helper.		require_once JPATH_COMPONENT.'/helpers/categories.php';		// Get the results for each action.		$canDo = CategoriesHelper::getActions($component, $categoryId);		// If a component categories title string is present, let's use it.		if ($lang->hasKey($component_title_key = strtoupper($component.($section?"_$section":'')).'_CATEGORIES_TITLE'))		{			$title = JText::_($component_title_key);		}		// Else if the component section string exits, let's use it		elseif ($lang->hasKey($component_section_key = strtoupper($component.($section?"_$section":''))))		{			$title = JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', $this->escape(JText::_($component_section_key)));		}		// Else use the base title		else		{			$title = JText::_('COM_CATEGORIES_CATEGORIES_BASE_TITLE');		}		// Load specific css component		JHtml::_('stylesheet', $component.'/administrator/categories.css', array(), true);		// Prepare the toolbar.		JToolbarHelper::title($title, 'categories '.substr($component, 4).($section?"-$section":'').'-categories');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories($component, 'core.create'))) > 0 )		{			JToolbarHelper::addNew('category.add');		}		if ($canDo->get('core.edit') || $canDo->get('core.edit.own'))		{			JToolbarHelper::editList('category.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('categories.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('categories.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('categories.archive');		}		if (JFactory::getUser()->authorise('core.admin'))		{			JToolbarHelper::checkin('categories.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete', $component))		{			JToolbarHelper::deleteList('', 'categories.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('categories.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::custom('categories.rebuild', 'refresh.png', 'refresh_f2.png', 'JTOOLBAR_REBUILD', false);			JToolbarHelper::preferences($component);		}		// Compute the ref_key if it does exist in the component		if (!$lang->hasKey($ref_key = strtoupper($component.($section?"_$section":'')).'_CATEGORIES_HELP_KEY'))		{			$ref_key = 'JHELP_COMPONENTS_'.strtoupper(substr($component, 4).($section?"_$section":'')).'_CATEGORIES';		}		// Get help for the categories view for the component by		// -remotely searching in a language defined dedicated URL: *component*_HELP_URL		// -locally  searching in a component help file if helpURL param exists in the component and is set to ''		// -remotely searching in a component URL if helpURL param exists in the component and is NOT set to ''		if ($lang->hasKey($lang_help_url = strtoupper($component).'_HELP_URL'))		{			$debug = $lang->setDebug(false);			$url = JText::_($lang_help_url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($ref_key, JComponentHelper::getParams($component)->exists('helpURL'), $url);		JHtmlSidebar::setAction('index.php?option=com_categories&view=categories');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.lft' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact */class ContactViewContact extends JViewLegacy{	protected $state;	protected $item;	public function display()	{		// Get model data.		$state = $this->get('State');		$item = $this->get('Item');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		$doc = JFactory::getDocument();		$doc->setMetaData('Content-Type', 'text/directory', true);		$app		= JFactory::getApplication();		$params 	= $app->getParams();		$user		= JFactory::getUser();		$dispatcher = JEventDispatcher::getInstance();		// Compute lastname, firstname and middlename		$item->name = trim($item->name);		// "Lastname, Firstname Midlename" format support		// e.g. "de Gaulle, Charles"		$namearray = explode(',', $item->name);		if (count($namearray) > 1 )		{			$lastname = $namearray[0];			$card_name = $lastname;			$name_and_midname = trim($namearray[1]);			$firstname = '';			if (!empty($name_and_midname))			{				$namearray = explode(' ', $name_and_midname);				$firstname = $namearray[0];				$middlename = (count($namearray) > 1) ? $namearray[1] : '';				$card_name = $firstname . ' ' . ($middlename ? $middlename . ' ' : '') .  $card_name;			}		}		// "Firstname Middlename Lastname" format support		else {			$namearray = explode(' ', $item->name);			$middlename = (count($namearray) > 2) ? $namearray[1] : '';			$firstname = array_shift($namearray);			$lastname = count($namearray) ? end($namearray) : '';			$card_name = $firstname . ($middlename ? ' ' . $middlename : '') . ($lastname ? ' ' . $lastname : '');		}		$rev = date('c', strtotime($item->modified));		JResponse::setHeader('Content-disposition', 'attachment; filename="'.$card_name.'.vcf"', true);		$vcard = array();		$vcard[] .= 'BEGIN:VCARD';		$vcard[] .= 'VERSION:3.0';		$vcard[]  = 'N:'.$lastname.';'.$firstname.';'.$middlename;		$vcard[]  = 'FN:'. $item->name;		$vcard[]  = 'TITLE:'.$item->con_position;		$vcard[]  = 'TEL;TYPE=WORK,VOICE:'.$item->telephone;		$vcard[]  = 'TEL;TYPE=WORK,FAX:'.$item->fax;		$vcard[]  = 'TEL;TYPE=WORK,MOBILE:'.$item->mobile;		$vcard[]  = 'ADR;TYPE=WORK:;;'.$item->address.';'.$item->suburb.';'.$item->state.';'.$item->postcode.';'.$item->country;		$vcard[]  = 'LABEL;TYPE=WORK:'.$item->address."\n".$item->suburb."\n".$item->state."\n".$item->postcode."\n".$item->country;		$vcard[]  = 'EMAIL;TYPE=PREF,INTERNET:'.$item->email_to;		$vcard[]  = 'URL:'.$item->webpage;		$vcard[]  = 'REV:'.$rev.'Z';		$vcard[]  = 'END:VCARD';		echo implode("\n", $vcard);		return true;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Content.pagebreak * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.utilities.utility');/** * Page break plugin * * <b>Usage:</b> * <code><hr class="system-pagebreak" /></code> * <code><hr class="system-pagebreak" title="The page title" /></code> * or * <code><hr class="system-pagebreak" alt="The first page" /></code> * or * <code><hr class="system-pagebreak" title="The page title" alt="The first page" /></code> * or * <code><hr class="system-pagebreak" alt="The first page" title="The page title" /></code> * * @package     Joomla.Plugin * @subpackage  Content.pagebreak * @since       1.6 */class PlgContentPagebreak extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * @param   string	The context of the content being passed to the plugin.	 * @param   object	The article object.  Note $article->text is also available	 * @param   object	The article params	 * @param   integer  The 'page' number	 *	 * @return  void	 * @since   1.6	 */	public function onContentPrepare($context, &$row, &$params, $page = 0)	{		$canProceed = $context == 'com_content.article';		if (!$canProceed)		{			return;		}		$style = $this->params->get('style', 'pages');		// Expression to search for.		$regex = '#<hr(.*)class="system-pagebreak"(.*)\/>#iU';		$input = JFactory::getApplication()->input;		$print = $input->getBool('print');		$showall = $input->getBool('showall');		if (!$this->params->get('enabled', 1))		{			$print = true;		}		if ($print)		{			$row->text = preg_replace($regex, '<br />', $row->text);			return true;		}		// Simple performance check to determine whether bot should process further.		if (JString::strpos($row->text, 'class="system-pagebreak') === false)		{			return true;		}		$view = $input->getString('view');		$full = $input->getBool('fullview');		if (!$page)		{			$page = 0;		}		if ($params->get('intro_only') || $params->get('popup') || $full || $view != 'article')		{			$row->text = preg_replace($regex, '', $row->text);			return;		}		// Find all instances of plugin and put in $matches.		$matches = array();		preg_match_all($regex, $row->text, $matches, PREG_SET_ORDER);		if (($showall && $this->params->get('showall', 1)))		{			$hasToc = $this->params->get('multipage_toc', 1);			if ($hasToc)			{				// Display TOC.				$page = 1;				$this->_createToc($row, $matches, $page);			}			else			{				$row->toc = '';			}			$row->text = preg_replace($regex, '<br />', $row->text);			return true;		}		// Split the text around the plugin.		$text = preg_split($regex, $row->text);		// Count the number of pages.		$n = count($text);		// We have found at least one plugin, therefore at least 2 pages.		if ($n > 1)		{			$title	= $this->params->get('title', 1);			$hasToc = $this->params->get('multipage_toc', 1);			// Adds heading or title to <site> Title.			if ($title)			{				if ($page)				{					if ($page && @$matches[$page - 1][2])					{						$attrs = JUtility::parseAttributes($matches[$page - 1][1]);						if (@$attrs['title'])						{							$row->page_title = $attrs['title'];						}					}				}			}			// Reset the text, we already hold it in the $text array.			$row->text = '';			if ($style == 'pages')			{				// Display TOC.				if ($hasToc)				{					$this->_createToc($row, $matches, $page);				}				else				{					$row->toc = '';				}				// traditional mos page navigation				$pageNav = new JPagination($n, $page, 1);				// Page counter.				$row->text .= '<div class="pagenavcounter">';				$row->text .= $pageNav->getPagesCounter();				$row->text .= '</div>';				// Page text.				$text[$page] = str_replace('<hr id="system-readmore" />', '', $text[$page]);				$row->text .= $text[$page];				// $row->text .= '<br />';				$row->text .= '<div class="pager">';				// Adds navigation between pages to bottom of text.				if ($hasToc)				{					$this->_createNavigation($row, $page, $n);				}				// Page links shown at bottom of page if TOC disabled.				if (!$hasToc)				{					$row->text .= $pageNav->getPagesLinks();				}				$row->text .= '</div>';			}			else			{				$t[] = $text[0];				$t[] = (string) JHtml::_($style.'.start', 'article'.$row->id.'-'.$style);				foreach ($text as $key => $subtext)				{					if ($key >= 1)					{						$match = $matches[$key - 1];						$match = (array) JUtility::parseAttributes($match[0]);						if (isset($match['alt']))						{							$title	= stripslashes($match['alt']);						}						elseif (isset($match['title']))						{							$title	= stripslashes($match['title']);						}						else						{							$title	= JText::sprintf('PLG_CONTENT_PAGEBREAK_PAGE_NUM', $key + 1);						}						$t[] = (string) JHtml::_($style.'.panel', $title, 'article'.$row->id.'-'.$style.$key);					}					$t[] = (string) $subtext;				}				$t[] = (string) JHtml::_($style.'.end');				$row->text = implode(' ', $t);			}		}		return true;	}	/**	 * @return  void	 * @return  1.6	 */	protected function _createTOC(&$row, &$matches, &$page)	{		$heading = isset($row->title) ? $row->title : JText::_('PLG_CONTENT_PAGEBREAK_NO_TITLE');		$input = JFactory::getApplication()->input;		$limitstart = $input->getUInt('limitstart', 0);		$showall = $input->getInt('showall', 0);		// TOC header.		$row->toc .= '<div class="pull-right article-index">';		if ($this->params->get('article_index') == 1)		{			$headingtext = JText::_('PLG_CONTENT_PAGEBREAK_ARTICLE_INDEX');			if ($this->params->get('article_index_text'))			{				htmlspecialchars($headingtext = $this->params->get('article_index_text'));			}			$row->toc .= '<h3>' . $headingtext . '</h3>';		}		// TOC first Page link.		$class = ($limitstart === 0 && $showall === 0) ? 'toclink active' : 'toclink';		$row->toc .= '<ul class="nav nav-tabs nav-stacked">		<li class="'.$class.'">			<a href="'. JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catid).'&showall=&limitstart=') .'" class="'.$class.'">'			. $heading .			'</a>		</li>		';		$i = 2;		foreach ($matches as $bot)		{			$link = JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catid).'&showall=&limitstart='. ($i - 1));			if (@$bot[0])			{				$attrs2 = JUtility::parseAttributes($bot[0]);				if (@$attrs2['alt'])				{					$title	= stripslashes($attrs2['alt']);				}				elseif (@$attrs2['title'])				{					$title	= stripslashes($attrs2['title']);				}				else				{					$title	= JText::sprintf('PLG_CONTENT_PAGEBREAK_PAGE_NUM', $i);				}			}			else			{				$title	= JText::sprintf('PLG_CONTENT_PAGEBREAK_PAGE_NUM', $i);			}			$class = ($limitstart == $i - 1) ? 'toclink active' : 'toclink';			$row->toc .= '				<li>					<a href="'. $link .'" class="'.$class.'">'					. $title .					'</a>				</li>				';			$i++;		}		if ($this->params->get('showall'))		{			$link = JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catid).'&showall=1&limitstart=');			$class = ($showall == 1) ? 'toclink active' : 'toclink';			$row->toc .= '			<li>					<a href="'. $link .'" class="'.$class.'">'					. JText::_('PLG_CONTENT_PAGEBREAK_ALL_PAGES') .					'</a>			</li>			';		}		$row->toc .= '</ul></div>';	}	/**	 * @return  void	 * @since   1.6	 */	protected function _createNavigation(&$row, $page, $n)	{		$pnSpace = '';		if (JText::_('JGLOBAL_LT') || JText::_('JGLOBAL_LT'))		{			$pnSpace = ' ';		}		if ($page < $n - 1)		{			$page_next = $page + 1;			$link_next = JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catid).'&showall=&limitstart='. ($page_next));			// Next >>			$next = '<a href="'. $link_next .'">' . JText::_('JNEXT') . $pnSpace . JText::_('JGLOBAL_GT') . JText::_('JGLOBAL_GT') .'</a>';		}		else		{			$next = JText::_('JNEXT');		}		if ($page > 0)		{			$page_prev = $page - 1 == 0 ? '' : $page - 1;			$link_prev = JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catid).'&showall=&limitstart='. ($page_prev));			// << Prev			$prev = '<a href="'. $link_prev .'">'. JText::_('JGLOBAL_LT') . JText::_('JGLOBAL_LT') . $pnSpace . JText::_('JPREV') .'</a>';		}		else		{			$prev = JText::_('JPREV');		}		$row->text .= '<ul><li>' . $prev . ' </li><li>' . $next .'</li></ul>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_redirect&view=links'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC'); ?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_OLD_URL', 'a.old_url', $listDirn, $listOrder); ?>					</th>					<th width="30%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_NEW_URL', 'a.new_url', $listDirn, $listOrder); ?>					</th>					<th width="30%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_REFERRER', 'a.referer', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_CREATED_DATE', 'a.created_date', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="7">						<?php echo $this->pagination->getListFooter(); ?>						<p class="footer-tip">							<?php if ($this->enabled) : ?>								<span class="enabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_ENABLED'); ?></span>							<?php else : ?>								<span class="disabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_DISABLED'); ?></span>							<?php endif; ?>						</p>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create',     'com_redirect');				$canEdit   = $user->authorise('core.edit',       'com_redirect');				$canChange = $user->authorise('core.edit.state', 'com_redirect');				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<?php echo JHtml::_('redirect.published', $item->published, $i); ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_redirect&task=link.edit&id='.$item->id);?>" title="<?php echo $this->escape($item->old_url); ?>">								<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?></a>						<?php else : ?>								<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?>						<?php endif; ?>					</td>					<td class="small">						<?php echo $this->escape($item->new_url); ?>					</td>					<td class="small">						<?php echo $this->escape($item->referer); ?>					</td>					<td class="small">						<?php echo JHtml::_('date', $item->created_date, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php if (!empty($this->items)) : ?>			<?php echo $this->loadTemplate('addform'); ?>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Link class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/link/ * @since       13.1 */class JFacebookLink extends JFacebookObject{	/**	 * Method to get a link. Requires authentication and read_stream permission for non-public links.	 *	 * @param   string  $link  The link id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLink($link)	{		return $this->get($link);	}	/**	 * Method to get a link's comments. Requires authentication and read_stream permission for non-public links.	 *	 * @param   string   $link    The link id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($link, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($link, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a link. Requires authentication and publish_stream permission.	 *	 * @param   string  $link     The link id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($link, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($link, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get link's likes. Requires authentication and read_stream permission for non-public links.	 *	 * @param   string   $link    The link id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($link, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($link, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a link. Requires authentication and publish_stream permission.	 *	 * @param   string  $link  The link id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($link)	{		return $this->createConnection($link, 'likes');	}	/**	 * Method to unlike a link. Requires authentication and publish_stream permission.	 *	 * @param   string  $link  The link id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($link)	{		return $this->deleteConnection($link, 'likes');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_ADMINISTRATOR.'/components/com_users/models/user.php';/** * User model. * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminModelProfile extends UsersModelUser{	/**	 * Method to get the record form.	 *	 * @param   array    $data      An optional array of data for the form to interogate.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  JForm    A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_admin.profile', 'profile', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		if (!JComponentHelper::getParams('com_users')->get('change_login_name'))		{			$form->setFieldAttribute('username', 'required', 'false');			$form->setFieldAttribute('username', 'readonly', 'true');			$form->setFieldAttribute('username', 'description', 'COM_ADMIN_USER_FIELD_NOCHANGE_USERNAME_DESC');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.edit.user.data', array());		if (empty($data))		{			$data = $this->getItem();		}		// Load the users plugins.		JPluginHelper::importPlugin('user');		$this->preprocessData('com_admin.profile', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   1.6	 */	public function getItem($pk = null)	{		$user = JFactory::getUser();		return parent::getItem($user->get('id'));	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function save($data)	{		$user = JFactory::getUser();		unset($data['id']);		unset($data['groups']);		unset($data['sendEmail']);		unset($data['block']);		// Bind the data.		if (!$user->bind($data))		{			$this->setError($user->getError());			return false;		}		$user->groups = null;		// Store the data.		if (!$user->save())		{			$this->setError($user->getError());			return false;		}		$this->setState('user.id', $user->id);		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Post class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/post/ * @since       13.1 */class JFacebookPost extends JFacebookObject{	/**	 * Method to get a post. Requires authentication and read_stream permission for all data.	 *	 * @param   string  $post  The post id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPost($post)	{		return $this->get($post);	}	/**	 * Method to delete a post if it was created by this application. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deletePost($post)	{		return $this->deleteConnection($post);	}	/**	 * Method to get a post's comments. Requires authentication and read_stream permission.	 *	 * @param   string   $post    The post id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($post, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($post, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post     The post id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($post, $message)	{		// Set POST request parameters.		$data['message'] = $message;		return $this->createConnection($post, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get post's likes. Requires authentication and read_stream permission.	 *	 * @param   string   $post    The post id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($post, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($post, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($post)	{		return $this->createConnection($post, 'likes');	}	/**	 * Method to unlike a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($post)	{		return $this->deleteConnection($post, 'likes');	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.response');/** * Base class for a Joomla! application. * * Acts as a Factory class for application specific objects and provides many * supporting API functions. Derived clases should supply the route(), dispatch() * and render() functions. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 */class JApplication extends JApplicationBase{	/**	 * The client identifier.	 *	 * @var    integer	 * @since  11.1	 */	protected $_clientId = null;	/**	 * The application message queue.	 *	 * @var    array	 * @since  11.1	 */	protected $_messageQueue = array();	/**	 * The name of the application.	 *	 * @var    array	 * @since  11.1	 */	protected $_name = null;	/**	 * The scope of the application.	 *	 * @var    string	 * @since  11.1	 */	public $scope = null;	/**	 * The time the request was made.	 *	 * @var    date	 * @since  11.1	 */	public $requestTime = null;	/**	 * The time the request was made as Unix timestamp.	 *	 * @var    integer	 * @since  11.1	 */	public $startTime = null;	/**	 * @var    JApplicationWebClient  The application client object.	 * @since  12.2	 */	public $client;	/**	 * @var    array  JApplication instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor.	 *	 * @param   array  $config  A configuration array including optional elements such as session	 * session_name, clientId and others. This is not exhaustive.	 *	 * @since   11.1	 */	public function __construct($config = array())	{		// Set the view name.		$this->_name = $this->getName();		// Only set the clientId if available.		if (isset($config['clientId']))		{			$this->_clientId = $config['clientId'];		}		// Enable sessions by default.		if (!isset($config['session']))		{			$config['session'] = true;		}		// Create the input object		$this->input = new JInput;		$this->client = new JApplicationWebClient;		$this->loadDispatcher();		// Set the session default name.		if (!isset($config['session_name']))		{			$config['session_name'] = $this->_name;		}		// Set the default configuration file.		if (!isset($config['config_file']))		{			$config['config_file'] = 'configuration.php';		}		// Create the configuration object.		if (file_exists(JPATH_CONFIGURATION . '/' . $config['config_file']))		{			$this->_createConfiguration(JPATH_CONFIGURATION . '/' . $config['config_file']);		}		// Create the session if a session name is passed.		if ($config['session'] !== false)		{			$this->_createSession(self::getHash($config['session_name']));		}		$this->requestTime = gmdate('Y-m-d H:i');		// Used by task system to ensure that the system doesn't go over time.		$this->startTime = JProfiler::getmicrotime();	}	/**	 * Returns the global JApplication object, only creating it if it	 * doesn't already exist.	 *	 * @param   mixed   $client  A client identifier or name.	 * @param   array   $config  An optional associative array of configuration settings.	 * @param   string  $prefix  A prefix for class names	 *	 * @return  JApplication A JApplication object.	 *	 * @since   11.1	 */	public static function getInstance($client, $config = array(), $prefix = 'J')	{		if (empty(self::$instances[$client]))		{			// Load the router object.			$info = JApplicationHelper::getClientInfo($client, true);			$path = $info->path . '/includes/application.php';			if (file_exists($path))			{				include_once $path;				// Create a JApplication object.				$classname = $prefix . ucfirst($client);				$instance = new $classname($config);			}			else			{				$error = JError::raiseError(500, JText::sprintf('JLIB_APPLICATION_ERROR_APPLICATION_LOAD', $client));				return $error;			}			self::$instances[$client] = $instance;		}		return self::$instances[$client];	}	/**	 * Initialise the application.	 *	 * @param   array  $options  An optional associative array of configuration settings.	 *	 * @return  void	 *	 * @since   11.1	 */	public function initialise($options = array())	{		// Set the language in the class.		$config = JFactory::getConfig();		// Check that we were given a language in the array (since by default may be blank).		if (isset($options['language']))		{			$config->set('language', $options['language']);		}		// Set user specific editor.		$user = JFactory::getUser();		$editor = $user->getParam('editor', $this->getCfg('editor'));		if (!JPluginHelper::isEnabled('editors', $editor))		{			$editor = $this->getCfg('editor');			if (!JPluginHelper::isEnabled('editors', $editor))			{				$editor = 'none';			}		}		$config->set('editor', $editor);		// Trigger the onAfterInitialise event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterInitialise');	}	/**	 * Route the application.	 *	 * Routing is the process of examining the request environment to determine which	 * component should receive the request. The component optional parameters	 * are then set in the request object to be processed when the application is being	 * dispatched.	 *	 * @return  void	 *	 * @since   11.1	 */	public function route()	{		// Get the full request URI.		$uri = clone JURI::getInstance();		$router = $this->getRouter();		$result = $router->parse($uri);		foreach ($result as $key => $value)		{			$this->input->def($key, $value);		}		// Trigger the onAfterRoute event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterRoute');	}	/**	 * Dispatch the application.	 *	 * Dispatching is the process of pulling the option from the request object and	 * mapping them to a component. If the component does not exist, it handles	 * determining a default component to dispatch.	 *	 * @param   string  $component  The component to dispatch.	 *	 * @return  void	 *	 * @since   11.1	 */	public function dispatch($component = null)	{		$document = JFactory::getDocument();		$contents = JComponentHelper::renderComponent($component);		$document->setBuffer($contents, 'component');		// Trigger the onAfterDispatch event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterDispatch');	}	/**	 * Render the application.	 *	 * Rendering is the process of pushing the document buffers into the template	 * placeholders, retrieving data from the document and pushing it into	 * the JResponse buffer.	 *	 * @return  void	 *	 * @since   11.1	 */	public function render()	{		$params = array('template' => $this->getTemplate(), 'file' => 'index.php', 'directory' => JPATH_THEMES, 'params' => $template->params);		// Parse the document.		$document = JFactory::getDocument();		$document->parse($params);		// Trigger the onBeforeRender event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onBeforeRender');		// Render the document.		$caching = ($this->getCfg('caching') >= 2) ? true : false;		JResponse::setBody($document->render($caching, $params));		// Trigger the onAfterRender event.		$this->triggerEvent('onAfterRender');	}	/**	 * Redirect to another URL.	 *	 * Optionally enqueues a message in the system message queue (which will be displayed	 * the next time a page is loaded) using the enqueueMessage method. If the headers have	 * not been sent the redirect will be accomplished using a "301 Moved Permanently"	 * code in the header pointing to the new location. If the headers have already been	 * sent this will be accomplished using a JavaScript statement.	 *	 * @param   string   $url      The URL to redirect to. Can only be http/https URL	 * @param   string   $msg      An optional message to display on redirect.	 * @param   string   $msgType  An optional message type. Defaults to message.	 * @param   boolean  $moved    True if the page is 301 Permanently Moved, otherwise 303 See Other is assumed.	 *	 * @return  void  Calls exit().	 *	 * @since   11.1	 *	 * @see     JApplication::enqueueMessage()	 */	public function redirect($url, $msg = '', $msgType = 'message', $moved = false)	{		// Check for relative internal links.		if (preg_match('#^index2?\.php#', $url))		{			$url = JURI::base() . $url;		}		// Strip out any line breaks.		$url = preg_split("/[\r\n]/", $url);		$url = $url[0];		/*		 * If we don't start with a http we need to fix this before we proceed.		 * We could validly start with something else (e.g. ftp), though this would		 * be unlikely and isn't supported by this API.		 */		if (!preg_match('#^http#i', $url))		{			$uri = JURI::getInstance();			$prefix = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			if ($url[0] == '/')			{				// We just need the prefix since we have a path relative to the root.				$url = $prefix . $url;			}			else			{				// It's relative to where we are now, so lets add that.				$parts = explode('/', $uri->toString(array('path')));				array_pop($parts);				$path = implode('/', $parts) . '/';				$url = $prefix . $path . $url;			}		}		// If the message exists, enqueue it.		if (trim($msg))		{			$this->enqueueMessage($msg, $msgType);		}		// Persist messages if they exist.		if (count($this->_messageQueue))		{			$session = JFactory::getSession();			$session->set('application.queue', $this->_messageQueue);		}		// If the headers have been sent, then we cannot send an additional location header		// so we will output a javascript redirect statement.		if (headers_sent())		{			echo "<script>document.location.href='" . htmlspecialchars($url) . "';</script>\n";		}		else		{			$document = JFactory::getDocument();			jimport('phputf8.utils.ascii');			if (($this->client->engine == JApplicationWebClient::TRIDENT) && !utf8_is_ascii($url))			{				// MSIE type browser and/or server cause issues when url contains utf8 character,so use a javascript redirect method				echo '<html><head><meta http-equiv="content-type" content="text/html; charset=' . $document->getCharset() . '" />'					. '<script>document.location.href=\'' . htmlspecialchars($url) . '\';</script></head></html>';			}			else			{				// All other browsers, use the more efficient HTTP header method				header($moved ? 'HTTP/1.1 301 Moved Permanently' : 'HTTP/1.1 303 See other');				header('Location: ' . $url);				header('Content-Type: text/html; charset=' . $document->getCharset());			}		}		$this->close();	}	/**	 * Enqueue a system message.	 *	 * @param   string  $msg   The message to enqueue.	 * @param   string  $type  The message type. Default is message.	 *	 * @return  void	 *	 * @since   11.1	 */	public function enqueueMessage($msg, $type = 'message')	{		// For empty queue, if messages exists in the session, enqueue them first.		if (!count($this->_messageQueue))		{			$session = JFactory::getSession();			$sessionQueue = $session->get('application.queue');			if (count($sessionQueue))			{				$this->_messageQueue = $sessionQueue;				$session->set('application.queue', null);			}		}		// Enqueue the message.		$this->_messageQueue[] = array('message' => $msg, 'type' => strtolower($type));	}	/**	 * Get the system message queue.	 *	 * @return  array  The system message queue.	 *	 * @since   11.1	 */	public function getMessageQueue()	{		// For empty queue, if messages exists in the session, enqueue them.		if (!count($this->_messageQueue))		{			$session = JFactory::getSession();			$sessionQueue = $session->get('application.queue');			if (count($sessionQueue))			{				$this->_messageQueue = $sessionQueue;				$session->set('application.queue', null);			}		}		return $this->_messageQueue;	}	/**	 * Gets a configuration value.	 *	 * An example is in application/japplication-getcfg.php Getting a configuration	 *	 * @param   string  $varname  The name of the value to get.	 * @param   string  $default  Default value to return	 *	 * @return  mixed  The user state.	 *	 * @since   11.1	 */	public function getCfg($varname, $default = null)	{		$config = JFactory::getConfig();		return $config->get('' . $varname, $default);	}	/**	 * Method to get the application name.	 *	 * The dispatcher name is by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor.	 *	 * @return  string  The name of the dispatcher.	 *	 * @since   11.1	 */	public function getName()	{		$name = $this->_name;		if (empty($name))		{			$r = null;			if (!preg_match('/J(.*)/i', get_class($this), $r))			{				JLog::add(JText::_('JLIB_APPLICATION_ERROR_APPLICATION_GET_NAME'), JLog::WARNING, 'jerror');			}			$name = strtolower($r[1]);		}		return $name;	}	/**	 * Gets a user state.	 *	 * @param   string  $key      The path of the state.	 * @param   mixed   $default  Optional default value, returned if the internal value is null.	 *	 * @return  mixed  The user state or null.	 *	 * @since   11.1	 */	public function getUserState($key, $default = null)	{		$session = JFactory::getSession();		$registry = $session->get('registry');		if (!is_null($registry))		{			return $registry->get($key, $default);		}		return $default;	}	/**	 * Sets the value of a user state variable.	 *	 * @param   string  $key    The path of the state.	 * @param   string  $value  The value of the variable.	 *	 * @return  mixed  The previous state, if one existed.	 *	 * @since   11.1	 */	public function setUserState($key, $value)	{		$session = JFactory::getSession();		$registry = $session->get('registry');		if (!is_null($registry))		{			return $registry->set($key, $value);		}		return null;	}	/**	 * Gets the value of a user state variable.	 *	 * @param   string  $key      The key of the user state variable.	 * @param   string  $request  The name of the variable passed in a request.	 * @param   string  $default  The default value for the variable if not found. Optional.	 * @param   string  $type     Filter for the variable, for valid values see {@link JFilterInput::clean()}. Optional.	 *	 * @return  The request user state.	 *	 * @since   11.1	 */	public function getUserStateFromRequest($key, $request, $default = null, $type = 'none')	{		$cur_state = $this->getUserState($key, $default);		$new_state = $this->input->get($request, null, $type);		// Save the new value only if it was set in this request.		if ($new_state !== null)		{			$this->setUserState($key, $new_state);		}		else		{			$new_state = $cur_state;		}		return $new_state;	}	/**	 * Login authentication function.	 *	 * Username and encoded password are passed the onUserLogin event which	 * is responsible for the user validation. A successful validation updates	 * the current session record with the user's details.	 *	 * Username and encoded password are sent as credentials (along with other	 * possibilities) to each observer (authentication plugin) for user	 * validation.  Successful validation will update the current session with	 * the user details.	 *	 * @param   array  $credentials  Array('username' => string, 'password' => string)	 * @param   array  $options      Array('remember' => boolean)	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function login($credentials, $options = array())	{		// Get the global JAuthentication object.		jimport('joomla.user.authentication');		$authenticate = JAuthentication::getInstance();		$response = $authenticate->authenticate($credentials, $options);		if ($response->status === JAuthentication::STATUS_SUCCESS)		{			// Validate that the user should be able to login (different to being authenticated).			// This permits authentication plugins blocking the user			$authorisations = $authenticate->authorise($response, $options);			foreach ($authorisations as $authorisation)			{				$denied_states = array(JAuthentication::STATUS_EXPIRED, JAuthentication::STATUS_DENIED);				if (in_array($authorisation->status, $denied_states))				{					// Trigger onUserAuthorisationFailure Event.					$this->triggerEvent('onUserAuthorisationFailure', array((array) $authorisation));					// If silent is set, just return false.					if (isset($options['silent']) && $options['silent'])					{						return false;					}					// Return the error.					switch ($authorisation->status)					{						case JAuthentication::STATUS_EXPIRED:							return JError::raiseWarning('102002', JText::_('JLIB_LOGIN_EXPIRED'));							break;						case JAuthentication::STATUS_DENIED:							return JError::raiseWarning('102003', JText::_('JLIB_LOGIN_DENIED'));							break;						default:							return JError::raiseWarning('102004', JText::_('JLIB_LOGIN_AUTHORISATION'));							break;					}				}			}			// Import the user plugin group.			JPluginHelper::importPlugin('user');			// OK, the credentials are authenticated and user is authorised.  Lets fire the onLogin event.			$results = $this->triggerEvent('onUserLogin', array((array) $response, $options));			/*			 * If any of the user plugins did not successfully complete the login routine			 * then the whole method fails.			 *			 * Any errors raised should be done in the plugin as this provides the ability			 * to provide much more information about why the routine may have failed.			 */			if (!in_array(false, $results, true))			{				// Set the remember me cookie if enabled.				if (isset($options['remember']) && $options['remember'])				{					// Create the encryption key, apply extra hardening using the user agent string.					$privateKey = self::getHash(@$_SERVER['HTTP_USER_AGENT']);					$key = new JCryptKey('simple', $privateKey, $privateKey);					$crypt = new JCrypt(new JCryptCipherSimple, $key);					$rcookie = $crypt->encrypt(json_encode($credentials));					$lifetime = time() + 365 * 24 * 60 * 60;					// Use domain and path set in config for cookie if it exists.					$cookie_domain = $this->getCfg('cookie_domain', '');					$cookie_path = $this->getCfg('cookie_path', '/');					$secure = $this->isSSLConnection();					setcookie(self::getHash('JLOGIN_REMEMBER'), $rcookie, $lifetime, $cookie_path, $cookie_domain, $secure, true);				}				return true;			}		}		// Trigger onUserLoginFailure Event.		$this->triggerEvent('onUserLoginFailure', array((array) $response));		// If silent is set, just return false.		if (isset($options['silent']) && $options['silent'])		{			return false;		}		// If status is success, any error will have been raised by the user plugin		if ($response->status !== JAuthentication::STATUS_SUCCESS)		{			JLog::add($response->error_message, JLog::WARNING, 'jerror');		}		return false;	}	/**	 * Logout authentication function.	 *	 * Passed the current user information to the onUserLogout event and reverts the current	 * session record back to 'anonymous' parameters.	 * If any of the authentication plugins did not successfully complete	 * the logout routine then the whole method fails. Any errors raised	 * should be done in the plugin as this provides the ability to give	 * much more information about why the routine may have failed.	 *	 * @param   integer  $userid   The user to load - Can be an integer or string - If string, it is converted to ID automatically	 * @param   array    $options  Array('clientid' => array of client id's)	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function logout($userid = null, $options = array())	{		// Get a user object from the JApplication.		$user = JFactory::getUser($userid);		// Build the credentials array.		$parameters['username'] = $user->get('username');		$parameters['id'] = $user->get('id');		// Set clientid in the options array if it hasn't been set already.		if (!isset($options['clientid']))		{			$options['clientid'] = $this->getClientId();		}		// Import the user plugin group.		JPluginHelper::importPlugin('user');		// OK, the credentials are built. Lets fire the onLogout event.		$results = $this->triggerEvent('onUserLogout', array($parameters, $options));		// Check if any of the plugins failed. If none did, success.		if (!in_array(false, $results, true))		{			// Use domain and path set in config for cookie if it exists.			$cookie_domain = $this->getCfg('cookie_domain', '');			$cookie_path = $this->getCfg('cookie_path', '/');			setcookie(self::getHash('JLOGIN_REMEMBER'), false, time() - 86400, $cookie_path, $cookie_domain);			return true;		}		// Trigger onUserLoginFailure Event.		$this->triggerEvent('onUserLogoutFailure', array($parameters));		return false;	}	/**	 * Gets the name of the current template.	 *	 * @param   array  $params  An optional associative array of configuration settings	 *	 * @return  string  System is the fallback.	 *	 * @since   11.1	 */	public function getTemplate($params = array())	{		return 'system';	}	/**	 * Returns the application JRouter object.	 *	 * @param   string  $name     The name of the application.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JRouter  A JRouter object	 *	 * @since   11.1	 */	static public function getRouter($name = null, array $options = array())	{		if (!isset($name))		{			$app = JFactory::getApplication();			$name = $app->getName();		}		jimport('joomla.application.router');		try		{			$router = JRouter::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $router;	}	/**	 * This method transliterates a string into an URL	 * safe string or returns a URL safe UTF-8 string	 * based on the global configuration	 *	 * @param   string  $string  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	static public function stringURLSafe($string)	{		if (JFactory::getConfig()->get('unicodeslugs') == 1)		{			$output = JFilterOutput::stringURLUnicodeSlug($string);		}		else		{			$output = JFilterOutput::stringURLSafe($string);		}		return $output;	}	/**	 * Returns the application JPathway object.	 *	 * @param   string  $name     The name of the application.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JPathway  A JPathway object	 *	 * @since   11.1	 */	public function getPathway($name = null, $options = array())	{		if (!isset($name))		{			$name = $this->_name;		}		try		{			$pathway = JPathway::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $pathway;	}	/**	 * Returns the application JPathway object.	 *	 * @param   string  $name     The name of the application/client.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JMenu  JMenu object.	 *	 * @since   11.1	 */	public function getMenu($name = null, $options = array())	{		if (!isset($name))		{			$name = $this->_name;		}		try		{			$menu = JMenu::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $menu;	}	/**	 * Provides a secure hash based on a seed	 *	 * @param   string  $seed  Seed string.	 *	 * @return  string  A secure hash	 *	 * @since   11.1	 */	public static function getHash($seed)	{		return md5(JFactory::getConfig()->get('secret') . $seed);	}	/**	 * Create the configuration registry.	 *	 * @param   string  $file  The path to the configuration file	 *	 * @return  JConfig  A JConfig object	 *	 * @since   11.1	 */	protected function _createConfiguration($file)	{		JLoader::register('JConfig', $file);		// Create the JConfig object.		$config = new JConfig;		// Get the global configuration object.		$registry = JFactory::getConfig();		// Load the configuration values into the registry.		$registry->loadObject($config);		return $config;	}	/**	 * Create the user session.	 *	 * Old sessions are flushed based on the configuration value for the cookie	 * lifetime. If an existing session, then the last access time is updated.	 * If a new session, a session id is generated and a record is created in	 * the #__sessions table.	 *	 * @param   string  $name  The sessions name.	 *	 * @return  JSession  JSession on success. May call exit() on database error.	 *	 * @since   11.1	 */	protected function _createSession($name)	{		$options = array();		$options['name'] = $name;		switch ($this->_clientId)		{			case 0:				if ($this->getCfg('force_ssl') == 2)				{					$options['force_ssl'] = true;				}				break;			case 1:				if ($this->getCfg('force_ssl') >= 1)				{					$options['force_ssl'] = true;				}				break;		}		$this->registerEvent('onAfterSessionStart', array($this, 'afterSessionStart'));		$session = JFactory::getSession($options);		$session->initialise($this->input, $this->dispatcher);		$session->start();		// TODO: At some point we need to get away from having session data always in the db.		$db = JFactory::getDbo();		// Remove expired sessions from the database.		$time = time();		if ($time % 2)		{			// The modulus introduces a little entropy, making the flushing less accurate			// but fires the query less than half the time.			$query = $db->getQuery(true)				->delete($db->quoteName('#__session'))				->where($db->quoteName('time') . ' < ' . $db->quote((int) ($time - $session->getExpire())));			$db->setQuery($query);			$db->execute();		}		// Check to see the the session already exists.		$handler = $this->getCfg('session_handler');		if (($handler != 'database' && ($time % 2 || $session->isNew()))			|| ($handler == 'database' && $session->isNew()))		{			$this->checkSession();		}		return $session;	}	/**	 * Checks the user session.	 *	 * If the session record doesn't exist, initialise it.	 * If session is new, create session variables	 *	 * @return  void	 *	 * @since   11.1	 */	public function checkSession()	{		$db = JFactory::getDbo();		$session = JFactory::getSession();		$user = JFactory::getUser();		$query = $db->getQuery(true)			->select($db->quoteName('session_id'))			->from($db->quoteName('#__session'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($session->getId()));		$db->setQuery($query, 0, 1);		$exists = $db->loadResult();		// If the session record doesn't exist initialise it.		if (!$exists)		{			$query->clear();			if ($session->isNew())			{				$query->insert($db->quoteName('#__session'))					->columns($db->quoteName('session_id') . ', ' . $db->quoteName('client_id') . ', ' . $db->quoteName('time'))					->values($db->quote($session->getId()) . ', ' . (int) $this->getClientId() . ', ' . $db->quote((int) time()));				$db->setQuery($query);			}			else			{				$query->insert($db->quoteName('#__session'))					->columns(						$db->quoteName('session_id') . ', ' . $db->quoteName('client_id') . ', ' . $db->quoteName('guest') . ', ' .						$db->quoteName('time') . ', ' . $db->quoteName('userid') . ', ' . $db->quoteName('username')					)					->values(						$db->quote($session->getId()) . ', ' . (int) $this->getClientId() . ', ' . (int) $user->get('guest') . ', ' .						$db->quote((int) $session->get('session.timer.start')) . ', ' . (int) $user->get('id') . ', ' . $db->quote($user->get('username'))					);				$db->setQuery($query);			}			// If the insert failed, exit the application.			try			{				$db->execute();			}			catch (RuntimeException $e)			{				jexit($e->getMessage());			}		}	}	/**	 * After the session has been started we need to populate it with some default values.	 *	 * @return  void	 *	 * @since   12.2	 */	public function afterSessionStart()	{		$session = JFactory::getSession();		if ($session->isNew())		{			$session->set('registry', new JRegistry('session'));			$session->set('user', new JUser);		}	}	/**	 * Gets the client id of the current running application.	 *	 * @return  integer  A client identifier.	 *	 * @since   11.1	 */	public function getClientId()	{		return $this->_clientId;	}	/**	 * Is admin interface?	 *	 * @return  boolean  True if this application is administrator.	 *	 * @since   11.1	 */	public function isAdmin()	{		return ($this->_clientId == 1);	}	/**	 * Is site interface?	 *	 * @return  boolean  True if this application is site.	 *	 * @since   11.1	 */	public function isSite()	{		return ($this->_clientId == 0);	}	/**	 * Method to determine if the host OS is  Windows	 *	 * @return  boolean  True if Windows OS	 *	 * @since   11.1	 * @deprecated  13.3 Use the IS_WIN constant instead.	 */	public static function isWinOS()	{		JLog::add('JApplication::isWinOS() is deprecated. Use the IS_WIN constant instead.', JLog::WARNING, 'deprecated');		return IS_WIN;	}	/**	 * Determine if we are using a secure (SSL) connection.	 *	 * @return  boolean  True if using SSL, false if not.	 *	 * @since   12.2	 */	public function isSSLConnection()	{		return ((isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) || getenv('SSL_PROTOCOL_VERSION'));	}	/**	 * Returns the response as a string.	 *	 * @return  string  The response	 *	 * @since   11.1	 */	public function __toString()	{		$compress = $this->getCfg('gzip', false);		return JResponse::toString($compress);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><div id="installer-manage"><form action="<?php echo JRoute::_('index.php?option=com_installer&view=manage');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<?php if ($this->showMessage) : ?>		<?php echo $this->loadTemplate('message'); ?>	<?php endif; ?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>		<div id="filter-bar" class="btn-toolbar">			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" placeholder="<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('JSEARCH_FILTER'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<?php if (count($this->items)) : ?>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_LOCATION', 'client_id', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'status', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_TYPE', 'type', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center">						<?php echo JText::_('JVERSION'); ?>					</th>					<th width="10%">						<?php echo JText::_('JDATE'); ?>					</th>					<th width="15%">						<?php echo JText::_('JAUTHOR'); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_FOLDER', 'folder', $listDirn, $listOrder); ?>					</th>					<th width="10">						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'extension_id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="11">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) : ?>				<tr class="row<?php echo $i % 2; if ($item->status == 2) echo ' protected';?>">					<td>						<?php echo JHtml::_('grid.id', $i, $item->extension_id); ?>					</td>					<td>						<span class="bold hasTip" title="<?php echo htmlspecialchars($item->name.'::'.$item->description); ?>">							<?php echo $item->name; ?>						</span>					</td>					<td class="center">						<?php echo $item->client; ?>					</td>					<td class="center">						<?php if (!$item->element) : ?>						<strong>X</strong>						<?php else : ?>							<?php echo JHtml::_('InstallerHtml.Manage.state', $item->status, $i, $item->status < 2, 'cb'); ?>						<?php endif; ?>					</td>					<td class="center">						<?php echo JText::_('COM_INSTALLER_TYPE_' . $item->type); ?>					</td>					<td class="center">						<?php echo @$item->version != '' ? $item->version : '&#160;'; ?>					</td>					<td class="center">						<?php echo @$item->creationDate != '' ? $item->creationDate : '&#160;'; ?>					</td>					<td class="center">						<span class="editlinktip hasTip" title="<?php echo addslashes(htmlspecialchars(JText::_('COM_INSTALLER_AUTHOR_INFORMATION').'::'.$item->author_info)); ?>">							<?php echo @$item->author != '' ? $item->author : '&#160;'; ?>						</span>					</td>					<td class="center">						<?php echo @$item->folder != '' ? $item->folder : JText::_('COM_INSTALLER_TYPE_NONAPPLICABLE'); ?>					</td>					<td>						<?php echo $item->extension_id ?>					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	<!-- End Content -->	</div></form></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_tags_popular * * @package     Joomla.Site * @subpackage  mod_tags_popular * @since       3.1 */abstract class ModTagssimilarHelper{	public static function getList($params)	{		$db         = JFactory::getDbo();		$app        = JFactory::getApplication();		$user       = JFactory::getUser();		$groups     = implode(',', $user->getAuthorisedViewLevels());		$matchtype  = $params->get('matchtype', 'all');		$maximum    = $params->get('maximum', 5);		$tagsHelper = new JHelperTags;		$option     = $app->input->get('option');		$view       = $app->input->get('view');		$prefix     = $option . '.' . $view;		$id         = (array) $app->input->getObject('id');		// Strip off any slug data.		foreach ($id as $id)		{			if (substr_count($id, ':') > 0)			{				$idexplode = explode(':', $id);				$id        = $idexplode[0];			}		}		// For now assume com_tags and com_users do not have tags.		// This module does not apply to list views in general at this point.		if ($option != 'com_tags' && $view != 'category'  && $option != 'com_users')		{			$tagsToMatch = $tagsHelper->getTagIds($id, $prefix);			if (!$tagsToMatch || is_null($tagsToMatch))			{				return $results = false;			}			$tagCount = substr_count($tagsToMatch, ',') + 1;			$query = $db->getQuery(true)				->select(				array(					$db->quoteName('m.tag_id'),					$db->quoteName('m.core_content_id'),					$db->quoteName('m.content_item_id'),					$db->quoteName('m.type_alias'),						'COUNT( '  . $db->quoteName('tag_id') . ') AS ' . $db->quoteName('count'),					$db->quoteName('t.access'),					$db->quoteName('t.id'),					$db->quoteName('ct.router'),					$db->quoteName('cc.core_title'),					$db->quoteName('cc.core_alias'),					$db->quoteName('cc.core_catid'),					$db->quoteName('cc.core_language')					)			);			$query->from($db->quoteName('#__contentitem_tag_map', 'm'));			$query->join('INNER', $db->quoteName('#__tags', 't') . ' ON m.tag_id = t.id')				->join('INNER', $db->quoteName('#__ucm_content', 'cc') . ' ON m.core_content_id = cc.core_content_id')				->join('INNER', $db->quoteName('#__content_types', 'ct') . ' ON m.type_alias = ct.type_alias');			$query->where('t.access IN (' . $groups . ')');			$query->where($db->quoteName('m.tag_id') . ' IN (' . $tagsToMatch . ')');			// Don't show current item			$query->where('(' . $db->quoteName('m.content_item_id') . ' <> ' . $id . ' OR ' . $db->quoteName('m.type_alias') . ' <> ' . $db->quote($prefix) . ')');			// Only return published tags			$query->where($db->quoteName('cc.core_state') . ' = 1 ');			// Optionally filter on language			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');			if ($language != 'all')			{				if ($language == 'current_language')				{					$language = JHelperContent::getCurrentLanguage();				}				$query->where($db->quoteName('cc.core_language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');			}			$query->group($db->quoteName(array('m.core_content_id')));			if ($matchtype == 'all' && $tagCount > 0)			{				$query->having('COUNT( '  . $db->quoteName('tag_id') . ')  = ' . $tagCount);			}			elseif ($matchtype == 'half' && $tagCount > 0)			{				$tagCountHalf = ceil($tagCount / 2);				$query->having('COUNT( '  . $db->quoteName('tag_id') . ')  >= ' . $tagCountHalf);			}			$query->order($db->quoteName('count') . ' DESC');			$db->setQuery($query, 0, $maximum);			$results = $db->loadObjectList();			foreach ($results as $result)			{				$explodedAlias = explode('.', $result->type_alias);				$result->link = 'index.php?option=' . $explodedAlias[0] . '&view=' . $explodedAlias[1] . '&id=' . $result->content_item_id . '-' . $result->core_alias;			}			return $results;		}		else		{			return;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Modules component * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewSelect extends JViewLegacy{	protected $state;	protected $items;	/**	 * Display the view	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->state = &$state;		$this->items = &$items;		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   3.0	 */	protected function addToolbar()	{		// Add page title		JToolbarHelper::title(JText::_('COM_MODULES_MANAGER_MODULES'), 'module.png');		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Cancel		$title = JText::_('JTOOLBAR_CANCEL');		$dhtml = "<button onClick=\"location.href='index.php?option=com_modules'\" class=\"btn\">					<i class=\"icon-remove\" title=\"$title\"></i>					$title</button>";		$bar->appendButton('Custom', $dhtml, 'new');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_SYSTEM_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('system') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_title($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"module-title\"><h6>".$module->title."</h6></div>";		echo $module->content;	}}function modChrome_no($module, &$params, &$attribs){	if ($module->content)	{		echo $module->content;	}}function modChrome_well($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"well well-small\">";		echo "<div class=\"module-title nav-header\">".$module->title."</div>";		echo $module->content;		echo "</div>";	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users component helper. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersHelper{	/**	 * @var    JObject  A cache for the available actions.	 * @since  1.6	 */	protected static $actions;	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_USERS_SUBMENU_USERS'),			'index.php?option=com_users&view=users',			$vName == 'users'		);		// Groups and Levels are restricted to core.admin		$canDo = self::getActions();		if ($canDo->get('core.admin'))		{			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_GROUPS'),				'index.php?option=com_users&view=groups',				$vName == 'groups'			);			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_LEVELS'),				'index.php?option=com_users&view=levels',				$vName == 'levels'			);			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_NOTES'),				'index.php?option=com_users&view=notes',				$vName == 'notes'			);			$extension = JFactory::getApplication()->input->getString('extension');			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_NOTE_CATEGORIES'),				'index.php?option=com_categories&extension=com_users',				$vName == 'categories' || $extension == 'com_users'			);		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   1.6	 * @todo    Refactor to work with notes	 */	public static function getActions()	{		if (empty(self::$actions))		{			$user = JFactory::getUser();			self::$actions = new JObject;			$actions = JAccess::getActions('com_users');			foreach ($actions as $action)			{				self::$actions->set($action->name, $user->authorise($action->name, 'com_users'));			}		}		return self::$actions;	}	/**	 * Get a list of filter options for the blocked state of a user.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getStateOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('JENABLED'));		$options[] = JHtml::_('select.option', '1', JText::_('JDISABLED'));		return $options;	}	/**	 * Get a list of filter options for the activated state of a user.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getActiveOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('COM_USERS_ACTIVATED'));		$options[] = JHtml::_('select.option', '1', JText::_('COM_USERS_UNACTIVATED'));		return $options;	}	/**	 * Get a list of the user groups for filtering.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getGroups()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value')			->select('a.title AS text')			->select('COUNT(DISTINCT b.id) AS level')			->from('#__usergroups as a')			->join('LEFT', '#__usergroups  AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseNotice(500, $e->getMessage());			return null;		}		foreach ($options as &$option)		{			$option->text = str_repeat('- ', $option->level).$option->text;		}		return $options;	}	/**	 * Creates a list of range options used in filter select list	 * used in com_users on users view	 *	 * @return  array	 *	 * @since   2.5	 */	public static function getRangeOptions()	{		$options = array(			JHtml::_('select.option', 'today', JText::_('COM_USERS_OPTION_RANGE_TODAY')),			JHtml::_('select.option', 'past_week', JText::_('COM_USERS_OPTION_RANGE_PAST_WEEK')),			JHtml::_('select.option', 'past_1month', JText::_('COM_USERS_OPTION_RANGE_PAST_1MONTH')),			JHtml::_('select.option', 'past_3month', JText::_('COM_USERS_OPTION_RANGE_PAST_3MONTH')),			JHtml::_('select.option', 'past_6month', JText::_('COM_USERS_OPTION_RANGE_PAST_6MONTH')),			JHtml::_('select.option', 'past_year', JText::_('COM_USERS_OPTION_RANGE_PAST_YEAR')),			JHtml::_('select.option', 'post_year', JText::_('COM_USERS_OPTION_RANGE_POST_YEAR')),		);		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Categories class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiCategories extends JMediawikiObject{	/**     * Method to list all categories the page(s) belong to.     *     * @param   array    $titles        Page titles to retrieve categories.     * @param   array    $clprop        List of additional properties to get.     * @param   array    $clshow        Type of categories to show.     * @param   integer  $cllimit       Number of categories to return.     * @param   boolean  $clcontinue    Continue when more results are available.     * @param   array    $clcategories  Only list these categories.     * @param   string   $cldir         Direction of listing.     *     * @return  object     *     * @since   12.1     */	public function getCategories(array $titles, array $clprop = null, array $clshow = null, $cllimit = null, $clcontinue = false,		array $clcategories = null, $cldir = null)	{		// Build the request.		$path = '?action=query&prop=categories';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($clprop))		{			$path .= '&clprop=' . $this->buildParameter($clprop);		}		if (isset($clshow))		{			$path .= '&$clshow=' . $this->buildParameter($clshow);		}		if (isset($cllimit))		{			$path .= '&cllimit=' . $cllimit;		}		if ($clcontinue)		{			$path .= '&clcontinue=';		}		if (isset($clcategories))		{			$path .= '&clcategories=' . $this->buildParameter($clcategories);		}		if (isset($cldir))		{			$path .= '&cldir=' . $cldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get information about all categories used.     *     * @param   array  $titles  Page titles to retrieve categories.     *     * @return  object     *     * @since   12.3     */	public function getCategoriesUsed(array $titles)	{		// Build the request		$path = '?action=query&generator=categories&prop=info';		// Append titles to the request		$path .= '&titles=' . $this->buildParameter($titles);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get information about the given categories.     *     * @param   array    $titles      Page titles to retrieve categories.     * @param   boolean  $clcontinue  Continue when more results are available.     *     * @return  object     *     * @since   12.3     */	public function getCategoriesInfo(array $titles, $clcontinue = false)	{		// Build the request.		$path = '?action=query&prop=categoryinfo';		// Append titles to the request		$path .= '&titles=' . $this->buildParameter($titles);		if ($clcontinue)		{			$path .= '&clcontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to enumerate all categories.     *     * @param   string   $acfrom    The category to start enumerating from.     * @param   string   $acto      The category to stop enumerating at.     * @param   string   $acprefix  Search for all category titles that begin with this value.     * @param   string   $acdir     Direction to sort in.     * @param   integer  $acmin     Minimum number of category members.     * @param   integer  $acmax     Maximum number of category members.     * @param   integer  $aclimit   How many categories to return.     * @param   array    $acprop    Which properties to get.     *     * @return  object     *     * @since   12.3     */	public function enumerateCategories($acfrom = null, $acto = null, $acprefix = null, $acdir = null, $acmin = null,		$acmax = null, $aclimit = null, array $acprop = null)	{		// Build the request.		$path = '?action=query&list=allcategories';		if (isset($acfrom))		{			$path .= '&acfrom=' . $acfrom;		}		if (isset($acto))		{			$path .= '&acto=' . $acto;		}		if (isset($acprefix))		{			$path .= '&acprefix=' . $acprefix;		}		if (isset($acdir))		{			$path .= '&acdir=' . $acdir;		}		if (isset($acfrom))		{			$path .= '&acfrom=' . $acfrom;		}		if (isset($acmin))		{			$path .= '&acmin=' . $acmin;		}		if (isset($acmax))		{			$path .= '&acmax=' . $acmax;		}		if (isset($aclimit))		{			$path .= '&aclimit=' . $aclimit;		}		if (isset($acprop))		{			$path .= '&acprop=' . $this->buildParameter($acprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to list change tags.     *     * @param   array   $tgprop   List of properties to get.     * @param   string  $tglimit  The maximum number of tags to limit.     *     * @return  object     *     * @since   12.3     */	public function getChangeTags(array $tgprop = null, $tglimit = null)	{		// Build the request.		$path = '?action=query&list=tags';		if (isset($tgprop))		{			$path .= '&tgprop=' . $this->buildParameter($tgprop);		}		if (isset($tglimit))		{			$path .= '&tglimit=' . $tglimit;		}		// @TODO add support for $tgcontinue		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Text Filters form field. * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.6 */class JFormFieldFilters extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	public $type = 'Filters';	/**	 * Method to get the field input markup.	 *	 * TODO: Add access check.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		// Get the available user groups.		$groups = $this->getUserGroups();		// Build the form control.		$html = array();		// Open the table.		$html[] = '<table id="filter-config" class="table table-striped">';		// The table heading.		$html[] = '	<thead>';		$html[] = '	<tr>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action">'.JText::_('JGLOBAL_FILTER_GROUPS_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_TYPE_LABEL').'">'.JText::_('JGLOBAL_FILTER_TYPE_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'">'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'">'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '	</tr>';		$html[] = '	</thead>';		// The table body.		$html[] = '	<tbody>';		foreach ($groups as $group)		{			if (!isset($this->value[$group->value]))			{				$this->value[$group->value] = array('filter_type' => 'BL', 'filter_tags' => '', 'filter_attributes' => '');			}			$group_filter = $this->value[$group->value];			$html[] = '	<tr>';			$html[] = '		<th class="acl-groups left">';			$html[] = '			'.str_repeat('<span class="gi">|&mdash;</span>', $group->level).$group->text;			$html[] = '		</th>';			$html[] = '		<td>';			$html[] = '				<select name="'.$this->name.'['.$group->value.'][filter_type]" id="'.$this->id.$group->value.'_filter_type">';			$html[] = '					<option value="BL"'.($group_filter['filter_type'] == 'BL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_DEFAULT_BLACK_LIST').'</option>';			$html[] = '					<option value="CBL"'.($group_filter['filter_type'] == 'CBL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_CUSTOM_BLACK_LIST').'</option>';			$html[] = '					<option value="WL"'.($group_filter['filter_type'] == 'WL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_WHITE_LIST').'</option>';			$html[] = '					<option value="NH"'.($group_filter['filter_type'] == 'NH' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_NO_HTML').'</option>';			$html[] = '					<option value="NONE"'.($group_filter['filter_type'] == 'NONE' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_NO_FILTER').'</option>';			$html[] = '				</select>';			$html[] = '		</td>';			$html[] = '		<td>';			$html[] = '				<input name="'.$this->name.'['.$group->value.'][filter_tags]" id="'.$this->id.$group->value.'_filter_tags" title="'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'" value="'.$group_filter['filter_tags'].'"/>';			$html[] = '		</td>';			$html[] = '		<td>';			$html[] = '				<input name="'.$this->name.'['.$group->value.'][filter_attributes]" id="'.$this->id.$group->value.'_filter_attributes" title="'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'" value="'.$group_filter['filter_attributes'].'"/>';			$html[] = '		</td>';			$html[] = '	</tr>';		}		$html[] = '	</tbody>';		// Close the table.		$html[] = '</table>';		// Add notes		$html[] = '<div class="alert">';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_TYPE_DESC') . '</p>';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_TAGS_DESC') . '</p>';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_ATTRIBUTES_DESC') . '</p>';		$html[] = '</div>';		return implode("\n", $html);	}	/**	 * A helper to get the list of user groups.	 *	 * @return  array	 * @since   1.6	 */	protected function getUserGroups()	{		// Get a database object.		$db = JFactory::getDbo();		// Get the user groups from the database.		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from('#__usergroups AS a')			->join('LEFT', '#__usergroups AS b on a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft')			->order('a.lft ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * Frontpage Component Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelFeatured extends ContentModelArticles{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_content.frontpage';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		parent::populateState($ordering, $direction);		$input = JFactory::getApplication()->input;		$user  = JFactory::getUser();		// List state information		$limitstart = $input->getUInt('limitstart', 0);		$this->setState('list.start', $limitstart);		$params = $this->state->params;		$limit = $params->get('num_leading_articles') + $params->get('num_intro_articles') + $params->get('num_links');		$this->setState('list.limit', $limit);		$this->setState('list.links', $params->get('num_links'));		$this->setState('filter.frontpage', true);		if ((!$user->authorise('core.edit.state', 'com_content')) &&  (!$user->authorise('core.edit', 'com_content'))){			// filter on published for those who do not have edit or edit.state rights.			$this->setState('filter.published', 1);		}		else		{			$this->setState('filter.published', array(0, 1, 2));		}		// check for category selection		if ($params->get('featured_categories') && implode(',', $params->get('featured_categories')) == true)		{			$featuredCategories = $params->get('featured_categories');			$this->setState('filter.frontpage.categories', $featuredCategories);		}	}	/**	 * Method to get a list of articles.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		$params = clone $this->getState('params');		$limit = $params->get('num_leading_articles') + $params->get('num_intro_articles') + $params->get('num_links');		if ($limit > 0)		{			$this->setState('list.limit', $limit);			return parent::getItems();		}		return array();	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= $this->getState('filter.frontpage');		return parent::getStoreId($id);	}	/**	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Set the blog ordering		$params = $this->state->params;		$articleOrderby = $params->get('orderby_sec', 'rdate');		$articleOrderDate = $params->get('order_date');		$categoryOrderby = $params->def('orderby_pri', '');		$secondary = ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';		$primary = ContentHelperQuery::orderbyPrimary($categoryOrderby);		$orderby = $primary . ' ' . $secondary . ' a.created DESC ';		$this->setState('list.ordering', $orderby);		$this->setState('list.direction', '');		// Create a new query object.		$query = parent::getListQuery();		// Filter by frontpage.		if ($this->getState('filter.frontpage'))		{			$query->join('INNER', '#__content_frontpage AS fp ON fp.content_id = a.id');		}		// Filter by categories		if (is_array($featuredCategories = $this->getState('filter.frontpage.categories')))		{			$query->where('a.catid IN (' . implode(',', $featuredCategories) . ')');		}		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Menu List Model for Menus. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusModelMenus extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'menutype', 'a.menutype',			);		}		parent::__construct($config);	}	/**	 * Overrides the getItems method to attach additional metrics to the list.	 *	 * @return  mixed  An array of data items on success, false on failure.	 *	 * @since   1.6.1	 */	public function getItems()	{		// Get a storage key.		$store = $this->getStoreId('getItems');		// Try to load the data from internal storage.		if (!empty($this->cache[$store]))		{			return $this->cache[$store];		}		// Load the list items.		$items = parent::getItems();		// If emtpy or an error, just return.		if (empty($items))		{			return array();		}		// Getting the following metric by joins is WAY TOO SLOW.		// Faster to do three queries for very large menu trees.		// Get the menu types of menus in the list.		$db = $this->getDbo();		$menuTypes = JArrayHelper::getColumn($items, 'menutype');		// Quote the strings.		$menuTypes = implode(			',',			array_map(array($db, 'quote'), $menuTypes)		);		// Get the published menu counts.		$query = $db->getQuery(true)			->select('m.menutype, COUNT(DISTINCT m.id) AS count_published')			->from('#__menu AS m')			->where('m.published = 1')			->where('m.menutype IN (' . $menuTypes . ')')			->group('m.menutype');		$db->setQuery($query);		try		{			$countPublished = $db->loadAssocList('menutype', 'count_published');		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Get the unpublished menu counts.		$query->clear('where')			->where('m.published = 0')			->where('m.menutype IN (' . $menuTypes . ')');		$db->setQuery($query);		try		{			$countUnpublished = $db->loadAssocList('menutype', 'count_published');		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Get the trashed menu counts.		$query->clear('where')			->where('m.published = -2')			->where('m.menutype IN (' . $menuTypes . ')');		$db->setQuery($query);		try		{			$countTrashed = $db->loadAssocList('menutype', 'count_published');		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage);			return false;		}		// Inject the values back into the array.		foreach ($items as $item)		{			$item->count_published = isset($countPublished[$item->menutype]) ? $countPublished[$item->menutype] : 0;			$item->count_unpublished = isset($countUnpublished[$item->menutype]) ? $countUnpublished[$item->menutype] : 0;			$item->count_trashed = isset($countTrashed[$item->menutype]) ? $countTrashed[$item->menutype] : 0;		}		// Add the items to the internal cache.		$this->cache[$store] = $items;		return $this->cache[$store];	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string  An SQL query	 *	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select all fields from the table.		$query->select($this->getState('list.select', 'a.*'))			->from($db->quoteName('#__menu_types') . ' AS a')			->group('a.id, a.menutype, a.title, a.description');		// Filter by search in title or menutype		if ($search = trim($this->getState('filter.search')))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(' . 'a.title LIKE ' . $search . ' OR a.menutype LIKE ' . $search . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.id')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		$search = $this->getUserStateFromRequest($this->context . '.search', 'filter_search');		$this->setState('filter.search', $search);		// List state information.		parent::populateState('a.id', 'asc');	}	/**	 * Gets the extension id of the core mod_menu module.	 *	 * @return  integer	 *	 * @since   2.5	 */	public function getModMenuId()	{		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('e.extension_id')			->from('#__extensions AS e')			->where('e.type = ' . $db->quote('module'))			->where('e.element = ' . $db->quote('mod_menu'))			->where('e.client_id = 0');		$db->setQuery($query);		return $db->loadResult();	}	/**	 * Gets a list of all mod_mainmenu modules and collates them by menutype	 *	 * @return  array	 */	public function &getModules()	{		$model = JModelLegacy::getInstance('Menu', 'MenusModel', array('ignore_request' => true));		$result = & $model->getModules();		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('BannersHelper', JPATH_COMPONENT.'/helpers/banners.php');/** * View to edit a client. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersViewClient extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form	= $this->get('Form');		$this->item	= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		$canDo		= BannersHelper::getActions();		JToolbarHelper::title($isNew ? JText::_('COM_BANNERS_MANAGER_CLIENT_NEW') : JText::_('COM_BANNERS_MANAGER_CLIENT_EDIT'), 'banners-clients.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit')||$canDo->get('core.create')))		{			JToolbarHelper::apply('client.apply');			JToolbarHelper::save('client.save');		}		if (!$checkedOut && $canDo->get('core.create')) {			JToolbarHelper::save2new('client.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('client.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('client.cancel');		}		else		{			JToolbarHelper::cancel('client.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_CLIENTS_EDIT');	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$doc = JFactory::getDocument();// Add Stylesheets$doc->addStyleSheet('../media/jui/css/bootstrap.css');$doc->addStyleSheet('../media/jui/css/bootstrap-extended.css');$doc->addStyleSheet('../media/jui/css/bootstrap-responsive.css');$doc->addStyleSheet('template/css/template.css');if ($this->direction === 'rtl'){	$doc->addStyleSheet('../media/jui/css/bootstrap-rtl.css');}// Load the JavaScript behaviorsJHtml::_('bootstrap.framework');JHtml::_('formbehavior.chosen', 'select');JHtml::_('behavior.framework', true);JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');JHtml::_('script', 'installation/template/js/installation.js', true, false, false, false);// Load the JavaScript translated messagesJText::script('INSTL_PROCESS_BUSY');JText::script('INSTL_FTP_SETTINGS_CORRECT');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>">	<head>		<jdoc:include type="head" />		<!--[if lt IE 9]>			<script src="../media/jui/js/html5.js"></script>		<![endif]-->		<script type="text/javascript">			window.addEvent('domready', function()			{				window.Install = new Installation('container-installation', '<?php echo JURI::current(); ?>');			});		</script>	</head>	<body>		<!-- Header -->		<div class="header">			<img src="<?php echo $this->baseurl ?>/template/images/joomla.png" alt="Joomla" />			<hr />			<h5>				<?php				$joomla = '<a href="http://www.joomla.org">Joomla!<sup>&#174;</sup></a>';				$license = '<a data-toggle="modal" href="#licenseModal">' . JText::_('INSTL_GNU_GPL_LICENSE') . '</a>';				echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla, $license);				?>			</h5>		</div>		<!-- Container -->		<div class="container">			<jdoc:include type="message" />			<div id="container-installation">				<jdoc:include type="component" />			</div>			<hr />		</div>		<div id="licenseModal" class="modal fade">			<div class="modal-header">				<button type="button" class="close" data-dismiss="modal"></button>				<h3><?php echo JText::_('INSTL_GNU_GPL_LICENSE'); ?></h3>			</div>			<div class="modal-body">				<iframe src="gpl.html" class="thumbnail span6 license" height="250" marginwidth="25" scrolling="auto"></iframe>			</div>		</div>		<script>			function initElements()			{				(function($){					$('.hasTooltip').tooltip()					// Chosen select boxes					$("select").chosen({						disable_search_threshold : 10,						allow_single_deselect : true					});					// Turn radios into btn-group				    $('.radio.btn-group label').addClass('btn');				    $(".btn-group label:not(.active)").click(function()					{				        var label = $(this);				        var input = $('#' + label.attr('for'));				        if (!input.prop('checked'))						{				            label.closest('.btn-group').find("label").removeClass('active btn-success btn-danger btn-primary');				            if(input.val()== '')							{				                    label.addClass('active btn-primary');				             } else if(input.val()==0 || input.val()=='remove')							{				                    label.addClass('active btn-danger');				             } else {				            label.addClass('active btn-success');				             }				            input.prop('checked', true);				        }				    });				    $(".btn-group input[checked=checked]").each(function()					{						if ($(this).val()== '')						{				           $("label[for=" + $(this).attr('id') + "]").addClass('active btn-primary');				        } else if($(this).val()==0 || $(this).val()=='remove')						{				           $("label[for=" + $(this).attr('id') + "]").addClass('active btn-danger');				        } else {				            $("label[for=" + $(this).attr('id') + "]").addClass('active btn-success');				        }				    });				})(jQuery);			}			initElements();		</script>	</body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$client			= $this->state->get('filter.client') == 'site' ? JText::_('JSITE') : JText::_('JADMINISTRATOR');$language		= $this->state->get('filter.language');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn		= $this->escape($this->state->get('list.direction')); ?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=overrides'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select fltrt">			<select name="filter_language_client" class="inputbox" onchange="this.form.submit()">				<?php echo JHtml::_('select.options', $this->languages, null, 'text', $this->state->get('filter.language_client')); ?>			</select>		</div>	</fieldset>	<div class="clr"></div>	<table class="adminlist">		<thead>			<tr>				<th width="1%">					<input type="checkbox" name="checkall-toggle" value="" onclick="Joomla.checkAll(this)" />				</th>				<th width="30%" class="left">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_KEY', 'key', $listDirn, $listOrder); ?>				</th>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_TEXT', 'text', $listDirn, $listOrder); ?>				</th>				<th class="nowrap">					<?php echo JText::_('COM_LANGUAGES_FIELD_LANG_TAG_LABEL'); ?>				</th>				<th>					<?php echo JText::_('JCLIENT'); ?>				</th>				<th class="right" width="20">					<?php echo JText::_('COM_LANGUAGES_HEADING_NUM'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="6">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php $canEdit = JFactory::getUser()->authorise('core.edit', 'com_languages');		$i = 0;		foreach ($this->items as $key => $text) : ?>			<tr class="row<?php echo $i % 2; ?>" id="overriderrow<?php echo $i; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $key); ?>				</td>				<td>					<?php if ($canEdit) : ?>						<a id="key[<?php	echo $this->escape($key); ?>]" href="<?php echo JRoute::_('index.php?option=com_languages&task=override.edit&id='.$key); ?>"><?php echo $this->escape($key); ?></a>					<?php else: ?>						<?php echo $this->escape($key); ?>					<?php endif; ?>				</td>				<td>					<span id="string[<?php	echo $this->escape($key); ?>]"><?php echo $this->escape($text); ?></span>				</td>				<td class="center">					<?php echo $language; ?>				</td>				<td class="center">					<?php echo $client; ?>				</td>				<td class="right">					<?php echo $this->pagination->getRowOffset($i); ?>				</td>			</tr>			<?php $i++;		endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_languages')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Languages');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('formbehavior.chosen', 'select');$input     = JFactory::getApplication()->input;$field     = $input->getCmd('field');$function  = 'jSelectUser_'.$field;$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=users&layout=modal&tmpl=component&groups=' . $input->get('groups', '', 'BASE64') . '&excluded=' . $input->get('excluded', '', 'BASE64'));?>" method="post" name="adminForm" id="adminForm">	<fieldset class="filter">		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('JSEARCH_FILTER'); ?></label>				<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_IN_NAME'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_NAME'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>				<button class="btn tip hasTooltip" type="button" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('', '<?php echo JText::_('JLIB_FORM_SELECT_USER') ?>');"><?php echo JText::_('JOPTION_NO_USER')?></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="filter_group_id" class="element-invisible"><?php echo JText::_('COM_USERS_FILTER_USER_GROUP'); ?></label>				<?php echo JHtml::_('access.usergroup', 'filter_group_id', $this->state->get('filter.group_id'), 'onchange="this.form.submit()"'); ?>			</div>		</div>	</fieldset>	<table class="table table-striped table-condensed">		<thead>			<tr>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap" width="25%">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_USERNAME', 'a.username', $listDirn, $listOrder); ?>				</th>				<th class="nowrap" width="25%">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_GROUPS', 'group_names', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php			$i = 0;			foreach ($this->items as $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $item->name; ?></a>				</td>				<td align="center">					<?php echo $item->username; ?>				</td>				<td align="left">					<?php echo nl2br($item->group_names); ?>				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="field" value="<?php echo $this->escape($field); ?>" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * APC cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://php.net/manual/en/book.apc.php * @since       11.1 */class JCacheStorageApc extends JCacheStorage{	/**	 * Get cached data from APC by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed    Boolean     False on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_fetch($cache_id);	}	/**	 * Get all cached data	 *	 * @return  array  data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		$data = array();		foreach ($keys as $key)		{			$name = $key['info'];			$namearr = explode('-', $name);			if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')			{				$group = $namearr[2];				if (!isset($data[$group]))				{					$item = new JCacheStorageHelper($group);				}				else				{					$item = $data[$group];				}				$item->updateSize($key['mem_size'] / 1024);				$data[$group] = $item;			}		}		return $data;	}	/**	 * Store the data to APC by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_store($cache_id, $data, $this->_lifetime);	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_delete($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['info'], $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				apc_delete($key['info']);			}		}		return true;	}	/**	 * Force garbage collect expired cache data as items are removed only on fetch!	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['info'], $secret . '-cache-'))			{				apc_fetch($key['info']);			}		}	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return extension_loaded('apc');	}	/**	 * Lock cached item - override parent as this is more efficient	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  object   Properties are lock and locklooped	 *	 * @since   11.1	 */	public function lock($id, $group, $locktime)	{		$returning = new stdClass;		$returning->locklooped = false;		$looptime = $locktime * 10;		$cache_id = $this->_getCacheId($id, $group) . '_lock';		$data_lock = apc_add($cache_id, 1, $locktime);		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = apc_add($cache_id, 1, $locktime);				$lock_counter++;			}		}		$returning->locked = $data_lock;		return $returning;	}	/**	 * Unlock cached item - override parent for cacheid compatibility with lock	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		$unlock = false;		$cache_id = $this->_getCacheId($id, $group) . '_lock';		$unlock = apc_delete($cache_id);		return $unlock;	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;//Global definitions.//Joomla framework path definitions.$parts = explode(DIRECTORY_SEPARATOR, JPATH_BASE);array_pop($parts);//Defines.define('JPATH_ROOT',           implode(DIRECTORY_SEPARATOR, $parts));define('JPATH_SITE',          JPATH_ROOT);define('JPATH_CONFIGURATION', JPATH_ROOT);define('JPATH_ADMINISTRATOR', JPATH_ROOT . '/administrator');define('JPATH_LIBRARIES',     JPATH_ROOT . '/libraries');define('JPATH_PLUGINS',       JPATH_ROOT . '/plugins');define('JPATH_INSTALLATION',  JPATH_ROOT . '/installation');define('JPATH_THEMES',        JPATH_BASE . '/templates');define('JPATH_CACHE',         JPATH_ROOT . '/cache');define('JPATH_MANIFESTS',     JPATH_ADMINISTRATOR . '/manifests');
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of plugin records. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugins extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'extension_id', 'a.extension_id',				'name', 'a.name',				'folder', 'a.folder',				'element', 'a.element',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'state', 'a.state',				'enabled', 'a.enabled',				'access', 'a.access', 'access_level',				'ordering', 'a.ordering',				'client_id', 'a.client_id',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.enabled', 'filter_enabled', '', 'string');		$this->setState('filter.enabled', $state);		$folder = $this->getUserStateFromRequest($this->context . '.filter.folder', 'filter_folder', null, 'cmd');		$this->setState('filter.folder', $folder);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_plugins');		$this->setState('params', $params);		// List state information.		parent::populateState('folder', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.folder');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns an object list	 *	 * @param   string The query	 * @param   int    Offset	 * @param   int    The number of records	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$search = $this->getState('filter.search');		$ordering = $this->getState('list.ordering', 'ordering');		if ($ordering == 'name' || (!empty($search) && stripos($search, 'id:') !== 0))		{			$this->_db->setQuery($query);			$result = $this->_db->loadObjectList();			$this->translate($result);			if (!empty($search))			{				foreach ($result as $i => $item)				{					if (!preg_match("/$search/i", $item->name))					{						unset($result[$i]);					}				}			}			$lang = JFactory::getLanguage();			$direction = ($this->getState('list.direction') == 'desc') ? -1 : 1;			JArrayHelper::sortObjects($result, $ordering, $direction, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			if ($ordering == 'ordering')			{				$query->order('a.folder ASC');				$ordering = 'a.ordering';			}			$query->order($this->_db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			if ($ordering == 'folder')			{				$query->order('a.ordering ASC');			}			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array The array of objects	 * @return  array The array of translated objects	 */	protected function translate(&$items)	{		$lang = JFactory::getLanguage();		foreach ($items as &$item)		{			$source = JPATH_PLUGINS . '/' . $item->folder . '/' . $item->element;			$extension = 'plg_' . $item->folder . '_' . $item->element;			$lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)				|| $lang->load($extension . '.sys', $source, null, false, false)				|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);		}	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id , a.name, a.element, a.folder, a.checked_out, a.checked_out_time,' .					' a.enabled, a.access, a.ordering'			)		)			->from($db->quoteName('#__extensions') . ' AS a')			->where($db->quoteName('type') . ' = ' . $db->quote('plugin'));		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$published = $this->getState('filter.enabled');		if (is_numeric($published))		{			$query->where('a.enabled = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.enabled IN (0, 1))');		}		// Filter by state		$query->where('a.state >= 0');		// Filter by folder.		if ($folder = $this->getState('filter.folder'))		{			$query->where('a.folder = ' . $db->quote($folder));		}		// Filter by search in id		$search = $this->getState('filter.search');		if (!empty($search) && stripos($search, 'id:') === 0)		{			$query->where('a.extension_id = ' . (int) substr($search, 3));		}		return $query;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Newsfeeds. * * @package     Joomla.Plugin * @subpackage  Finder.Newsfeeds * @since       2.5 */class PlgFinderNewsfeeds extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Newsfeeds';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_newsfeeds';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'newsfeed';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'News Feed';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__newsfeeds';	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'published';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to update the item link information when the item category is	 * changed. This is fired when the item category is published or unpublished	 * from the list view.	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderCategoryChangeState($extension, $pks, $value)	{		// Make sure we're handling com_newsfeeds categories		if ($extension == 'com_newsfeeds')		{			$this->categoryStateChange($pks, $value);		}	}	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_newsfeeds.newsfeed')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle news feeds here		if ($context == 'com_newsfeeds.newsfeed')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		// Check for access changes in the category		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle news feeds here		if ($context == 'com_newsfeeds.newsfeed')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		// Check for access levels from the category		if ($context == 'com_categories.category')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle news feeds here		if ($context == 'com_newsfeeds.newsfeed')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = $registry;		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = NewsfeedsHelperRoute::getNewsfeedRoute($item->slug, $item->catslug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		/*		 * Add the meta-data processing instructions based on the newsfeeds		 * configuration parameters.		 */		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'News Feed');		// Add the category taxonomy data.		$item->addTaxonomy('Category', $item->category, $item->cat_state, $item->cat_access);		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load dependent classes.		require_once JPATH_SITE . '/components/com_newsfeeds/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.catid, a.name AS title, a.alias, a.link AS link')			->select('a.published AS state, a.ordering, a.created AS start_date, a.params, a.access')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('a.metakey, a.metadesc, a.metadata, a.language')			->select('a.created_by, a.created_by_alias, a.modified, a.modified_by')			->select('c.title AS category, c.published AS cat_state, c.access AS cat_access');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias);		$case_when_category_alias = ' CASE WHEN ';		$case_when_category_alias .= $query->charLength('c.alias', '!=', '0');		$case_when_category_alias .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when_category_alias .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when_category_alias .= ' ELSE ';		$case_when_category_alias .= $c_id.' END as catslug';		$query->select($case_when_category_alias)			->from('#__newsfeeds AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'newsfeed.cancel' || document.formvalidator.isValid(document.id('newsfeed-form')))		{			Joomla.submitform(task, document.getElementById('newsfeed-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="newsfeed-form" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin Newsfeed -->		<div class="span10 form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_NEWSFEEDS_NEW_NEWSFEED', true) : JText::sprintf('COM_NEWSFEEDS_EDIT_NEWSFEED', $this->item->id, true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('name'); ?></div>				<div class="controls"><?php echo $this->form->getInput('name'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('link'); ?></div>				<div class="controls"><?php echo $this->form->getInput('link'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>				<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('description'); ?></div>				<div class="controls"><?php echo $this->form->getInput('description'); ?></div>			</div>			<div class="span6">				<h4><?php echo JText::_('COM_NEWSFEEDS_FIELDSET_IMAGES');?></h4>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('images'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('images'); ?>					</div>				</div>				<?php foreach ($this->form->getGroup('images') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label">								<?php echo $field->label; ?>							</div>						<?php endif; ?>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>				<div class="controls"><?php echo $this->form->getInput('id'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>			</div>			<?php if ($this->item->modified_by) : ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>				</div>			<?php endif; ?>			<?php if ($this->item->version) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('version'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('version'); ?>					</div>				</div>			<?php endif; ?>			<?php if ($this->item->hits) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('hits'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('hits'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>				<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('numarticles'); ?></div>				<div class="controls"><?php echo $this->form->getInput('numarticles'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('cache_time'); ?></div>				<div class="controls"><?php echo $this->form->getInput('cache_time'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('rtl'); ?></div>				<div class="controls"><?php echo $this->form->getInput('rtl'); ?></div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php $fieldSets = $this->form->getFieldsets('params'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $paramstabs = 'params-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php $fieldSets = $this->form->getFieldsets('metadata'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $metadatatabs = 'metadata-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $metadatatabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('metadata'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php if ($assoc) : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Newsfeed -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Editors.none * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plain Textarea Editor Plugin * * @package     Joomla.Plugin * @subpackage  Editors.none * @since       1.5 */class PlgEditorNone extends JPlugin{	/**	 * Method to handle the onInitEditor event.	 *  - Initialises the Editor	 *	 * @return  string	JavaScript Initialization string	 * @since 1.5	 */	public function onInit()	{		$txt =	"<script type=\"text/javascript\">					function insertAtCursor(myField, myValue)					{						if (document.selection)						{							// IE support							myField.focus();							sel = document.selection.createRange();							sel.text = myValue;						} else if (myField.selectionStart || myField.selectionStart == '0')						{							// MOZILLA/NETSCAPE support							var startPos = myField.selectionStart;							var endPos = myField.selectionEnd;							myField.value = myField.value.substring(0, startPos)								+ myValue								+ myField.value.substring(endPos, myField.value.length);						} else {							myField.value += myValue;						}					}				</script>";		return $txt;	}	/**	 * Copy editor content to form field.	 *	 * Not applicable in this editor.	 *	 * @return  void	 */	public function onSave()	{		return;	}	/**	 * Get the editor content.	 *	 * @param   string	$id		The id of the editor field.	 *	 * @return  string	 */	public function onGetContent($id)	{		return "document.getElementById('$id').value;\n";	}	/**	 * Set the editor content.	 *	 * @param   string	$id		The id of the editor field.	 * @param   string	$html	The content to set.	 *	 * @return  string	 */	public function onSetContent($id, $html)	{		return "document.getElementById('$id').value = $html;\n";	}	/**	 * @param   string	$id	 *	 * @return  string	 */	public function onGetInsertMethod($id)	{		static $done = false;		// Do this only once.		if (!$done)		{			$doc = JFactory::getDocument();			$js = "\tfunction jInsertEditorText(text, editor)			{				insertAtCursor(document.getElementById(editor), text);			}";			$doc->addScriptDeclaration($js);		}		return true;	}	/**	 * Display the editor area.	 *	 * @param   string	$name		The control name.	 * @param   string	$html		The contents of the text area.	 * @param   string	$width		The width of the text area (px or %).	 * @param   string	$height		The height of the text area (px or %).	 * @param   integer  $col		The number of columns for the textarea.	 * @param   integer  $row		The number of rows for the textarea.	 * @param   boolean	$buttons	True and the editor buttons will be displayed.	 * @param   string	$id			An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string	$asset	 * @param   object	$author	 * @param   array  $params		Associative array of editor parameters.	 *	 * @return  string	 */	public function onDisplay($name, $content, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		if (empty($id))		{			$id = $name;		}		// Only add "px" to width and height if they are not given as a percentage		if (is_numeric($width))		{			$width .= 'px';		}		if (is_numeric($height))		{			$height .= 'px';		}		$buttons = $this->_displayButtons($id, $buttons, $asset, $author);		$editor  = "<textarea name=\"$name\" id=\"$id\" cols=\"$col\" rows=\"$row\" style=\"width: $width; height: $height;\">$content</textarea>" . $buttons;		return $editor;	}	public function _displayButtons($name, $buttons, $asset, $author)	{		// Load modal popup behavior		JHtml::_('behavior.modal', 'a.modal-button');		$args['name'] = $name;		$args['event'] = 'onGetInsertMethod';		$return = '';		$results[] = $this->update($args);		foreach ($results as $result)		{			if (is_string($result) && trim($result))			{				$return .= $result;			}		}		if (is_array($buttons) || (is_bool($buttons) && $buttons))		{			$results = $this->_subject->getButtons($name, $buttons, $asset, $author);			// This will allow plugins to attach buttons or change the behavior on the fly using AJAX			$return .= "\n<div id=\"editor-xtd-buttons\" class=\"btn-toolbar pull-left\">\n";			$return .= "\n<div class=\"btn-toolbar\">\n";			foreach ($results as $button)			{				// Results should be an object				if ($button->get('name'))				{					$modal		= ($button->get('modal')) ? 'class="modal-button btn"' : null;					$href		= ($button->get('link')) ? 'class="btn" href="'.JURI::base().$button->get('link').'"' : null;					$onclick	= ($button->get('onclick')) ? 'onclick="'.$button->get('onclick').'"' : null;					$title      = ($button->get('title')) ? $button->get('title') : $button->get('text');					$return .= "<a ".$modal." title=\"".$title."\" ".$href." ".$onclick." rel=\"".$button->get('options')."\"><i class=\"icon-".$button->get('name')."\"></i> ".$button->get('text')."</a>\n";				}			}			$return .= "</div>\n";			$return .= "</div>\n";			$return .= "<div class=\"clearfix\"></div>\n";		}		return $return;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Controller tailored to suit most form-based admin operations. * * @package     Joomla.Legacy * @subpackage  Controller * @since       12.2 * @todo        Add ability to set redirect manually to better cope with frontend usage. */class JControllerForm extends JControllerLegacy{	/**	 * The context for storing internal data, e.g. record.	 *	 * @var    string	 * @since  12.2	 */	protected $context;	/**	 * The URL option for the component.	 *	 * @var    string	 * @since  12.2	 */	protected $option;	/**	 * The URL view item variable.	 *	 * @var    string	 * @since  12.2	 */	protected $view_item;	/**	 * The URL view list variable.	 *	 * @var    string	 * @since  12.2	 */	protected $view_list;	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  12.2	 */	protected $text_prefix;	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JControllerLegacy	 * @since   12.2	 * @throws  Exception	 */	public function __construct($config = array())	{		parent::__construct($config);		// Guess the option as com_NameOfController		if (empty($this->option))		{			$this->option = 'com_' . strtolower($this->getName());		}		// Guess the JText message prefix. Defaults to the option.		if (empty($this->text_prefix))		{			$this->text_prefix = strtoupper($this->option);		}		// Guess the context as the suffix, eg: OptionControllerContent.		if (empty($this->context))		{			$r = null;			if (!preg_match('/(.*)Controller(.*)/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_CONTROLLER_GET_NAME'), 500);			}			$this->context = strtolower($r[2]);		}		// Guess the item view as the context.		if (empty($this->view_item))		{			$this->view_item = $this->context;		}		// Guess the list view as the plural of the item view.		if (empty($this->view_list))		{			// @TODO Probably worth moving to an inflector class based on			// http://kuwamoto.org/2007/12/17/improved-pluralizing-in-php-actionscript-and-ror/			// Simple pluralisation based on public domain snippet by Paul Osman			// For more complex types, just manually set the variable in your class.			$plural = array(				array('/(x|ch|ss|sh)$/i', "$1es"),				array('/([^aeiouy]|qu)y$/i', "$1ies"),				array('/([^aeiouy]|qu)ies$/i', "$1y"),				array('/(bu)s$/i', "$1ses"),				array('/s$/i', "s"),				array('/$/', "s"));			// Check for matches using regular expressions			foreach ($plural as $pattern)			{				if (preg_match($pattern[0], $this->view_item))				{					$this->view_list = preg_replace($pattern[0], $pattern[1], $this->view_item);					break;				}			}		}		// Apply, Save & New, and Save As copy should be standard on forms.		$this->registerTask('apply', 'save');		$this->registerTask('save2new', 'save');		$this->registerTask('save2copy', 'save');	}	/**	 * Method to add a new record.	 *	 * @return  mixed  True if the record can be added, a error object if not.	 *	 * @since   12.2	 */	public function add()	{		$app = JFactory::getApplication();		$context = "$this->option.edit.$this->context";		// Access check.		if (!$this->allowAdd())		{			// Set the internal error and also the redirect error.			$this->setError(JText::_('JLIB_APPLICATION_ERROR_CREATE_RECORD_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Clear the record edit information from the session.		$app->setUserState($context . '.data', null);		// Redirect to the edit screen.		$this->setRedirect(			JRoute::_(				'index.php?option=' . $this->option . '&view=' . $this->view_item				. $this->getRedirectToItemAppend(), false			)		);		return true;	}	/**	 * Method to check if you can add a new record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   12.2	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', $this->option) || count($user->getAuthorisedCategories($this->option, 'core.create')));	}	/**	 * Method to check if you can add a new record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key; default is id.	 *	 * @return  boolean	 *	 * @since   12.2	 */	protected function allowEdit($data = array(), $key = 'id')	{		return JFactory::getUser()->authorise('core.edit', $this->option);	}	/**	 * Method to check if you can save a new or existing record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   12.2	 */	protected function allowSave($data, $key = 'id')	{		$recordId = isset($data[$key]) ? $data[$key] : '0';		if ($recordId)		{			return $this->allowEdit($data, $key);		}		else		{			return $this->allowAdd($data);		}	}	/**	 * Method to run batch operations.	 *	 * @param   JModelLegacy  $model  The model of the component being processed.	 *	 * @return	boolean	 True if successful, false otherwise and internal error is set.	 *	 * @since	12.2	 */	public function batch($model)	{		$vars = $this->input->post->get('batch', array(), 'array');		$cid  = $this->input->post->get('cid', array(), 'array');		// Build an array of item contexts to check		$contexts = array();		foreach ($cid as $id)		{			// If we're coming from com_categories, we need to use extension vs. option			if (isset($this->extension))			{				$option = $this->extension;			}			else			{				$option = $this->option;			}			$contexts[$id] = $option . '.' . $this->context . '.' . $id;		}		// Attempt to run the batch operation.		if ($model->batch($vars, $cid, $contexts))		{			$this->setMessage(JText::_('JLIB_APPLICATION_SUCCESS_BATCH'));			return true;		}		else		{			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_FAILED', $model->getError()));			return false;		}	}	/**	 * Method to cancel an edit.	 *	 * @param   string  $key  The name of the primary key of the URL variable.	 *	 * @return  boolean  True if access level checks pass, false otherwise.	 *	 * @since   12.2	 */	public function cancel($key = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$model = $this->getModel();		$table = $model->getTable();		$checkin = property_exists($table, 'checked_out');		$context = "$this->option.edit.$this->context";		if (empty($key))		{			$key = $table->getKeyName();		}		$recordId = $app->input->getInt($key);		// Attempt to check-in the current record.		if ($recordId)		{			// Check we are holding the id in the edit list.			if (!$this->checkEditId($context, $recordId))			{				// Somehow the person just went to the form - we don't allow that.				$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));				$this->setMessage($this->getError(), 'error');				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_list						. $this->getRedirectToListAppend(), false					)				);				return false;			}			if ($checkin)			{				if ($model->checkin($recordId) === false)				{					// Check-in failed, go back to the record and display a notice.					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));					$this->setMessage($this->getError(), 'error');					$this->setRedirect(						JRoute::_(							'index.php?option=' . $this->option . '&view=' . $this->view_item							. $this->getRedirectToItemAppend($recordId, $key), false						)					);					return false;				}			}		}		// Clean the session data and redirect.		$this->releaseEditId($context, $recordId);		$app->setUserState($context . '.data', null);		$this->setRedirect(			JRoute::_(				'index.php?option=' . $this->option . '&view=' . $this->view_list				. $this->getRedirectToListAppend(), false			)		);		return true;	}	/**	 * Method to edit an existing record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key	 * (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if access level check and checkout passes, false otherwise.	 *	 * @since   12.2	 */	public function edit($key = null, $urlVar = null)	{		$app   = JFactory::getApplication();		$model = $this->getModel();		$table = $model->getTable();		$cid   = $this->input->post->get('cid', array(), 'array');		$context = "$this->option.edit.$this->context";		// Determine the name of the primary key for the data.		if (empty($key))		{			$key = $table->getKeyName();		}		// To avoid data collisions the urlVar may be different from the primary key.		if (empty($urlVar))		{			$urlVar = $key;		}		// Get the previous record id (if any) and the current record id.		$recordId = (int) (count($cid) ? $cid[0] : $this->input->getInt($urlVar));		$checkin = property_exists($table, 'checked_out');		// Access check.		if (!$this->allowEdit(array($key => $recordId), $key))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Attempt to check-out the new record for editing and redirect.		if ($checkin && !$model->checkout($recordId))		{			// Check-out failed, display a notice but allow the user to see the record.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKOUT_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		else		{			// Check-out succeeded, push the new record id into the session.			$this->holdEditId($context, $recordId);			$app->setUserState($context . '.data', null);			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return true;		}	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   12.2	 */	public function getModel($name = '', $prefix = '', $config = array('ignore_request' => true))	{		if (empty($name))		{			$name = $this->context;		}		return parent::getModel($name, $prefix, $config);	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $urlVar    The name of the URL variable for the id.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   12.2	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = 'id')	{		$tmpl   = $this->input->get('tmpl');		$layout = $this->input->get('layout', 'edit');		$append = '';		// Setup redirect info.		if ($tmpl)		{			$append .= '&tmpl=' . $tmpl;		}		if ($layout)		{			$append .= '&layout=' . $layout;		}		if ($recordId)		{			$append .= '&' . $urlVar . '=' . $recordId;		}		return $append;	}	/**	 * Gets the URL arguments to append to a list redirect.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   12.2	 */	protected function getRedirectToListAppend()	{		$tmpl = JFactory::getApplication()->input->get('tmpl');		$append = '';		// Setup redirect info.		if ($tmpl)		{			$append .= '&tmpl=' . $tmpl;		}		return $append;	}	/**	 * Function that allows child controller access to model data	 * after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{	}	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   12.2	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$lang  = JFactory::getLanguage();		$model = $this->getModel();		$table = $model->getTable();		$data  = $this->input->post->get('jform', array(), 'array');		$checkin = property_exists($table, 'checked_out');		$context = "$this->option.edit.$this->context";		$task = $this->getTask();		// Determine the name of the primary key for the data.		if (empty($key))		{			$key = $table->getKeyName();		}		// To avoid data collisions the urlVar may be different from the primary key.		if (empty($urlVar))		{			$urlVar = $key;		}		$recordId = $this->input->getInt($urlVar);		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and tried to save it. We don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Populate the row id from the session.		$data[$key] = $recordId;		// The save2copy task needs to be handled slightly differently.		if ($task == 'save2copy')		{			// Check-in the original row.			if ($checkin && $model->checkin($data[$key]) === false)			{				// Check-in failed. Go back to the item and display a notice.				$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));				$this->setMessage($this->getError(), 'error');				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_item						. $this->getRedirectToItemAppend($recordId, $urlVar), false					)				);				return false;			}			// Reset the ID and then treat the request as for Apply.			$data[$key] = 0;			$task = 'apply';		}		// Access check.		if (!$this->allowSave($data, $key))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Validate the posted data.		// Sometimes the form needs some posted data, such as for plugins and modules.		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return false;		}		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages.			$errors = $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState($context . '.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		if (!isset($validData['metadata']['tags']))		{			$validData['metadata']['tags'] = null;		}		// Attempt to save the data.		if (!$model->save($validData))		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Redirect back to the edit screen.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		// Save succeeded, so check-in the record.		if ($checkin && $model->checkin($validData[$key]) === false)		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Check-in failed, so go back to the record and display a notice.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		$this->setMessage(			JText::_(				($lang->hasKey($this->text_prefix . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS')					? $this->text_prefix					: 'JLIB_APPLICATION') . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS'			)		);		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the record data in the session.				$recordId = $model->getState($this->context . '.id');				$this->holdEditId($context, $recordId);				$app->setUserState($context . '.data', null);				$model->checkout($recordId);				// Redirect back to the edit screen.				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_item						. $this->getRedirectToItemAppend($recordId, $urlVar), false					)				);				break;			case 'save2new':				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect back to the edit screen.				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_item						. $this->getRedirectToItemAppend(null, $urlVar), false					)				);				break;			default:				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect to the list screen.				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_list						. $this->getRedirectToListAppend(), false					)				);				break;		}		// Invoke the postSave method to allow for the child class to access the model.		$this->postSaveHook($model, $validData);		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class for categories * * @package     Joomla.Libraries * @subpackage  HTML * @since       1.5 */abstract class JHtmlCategory{	/**	 * Cached array of the category items.	 *	 * @var    array	 * @since  1.5	 */	protected static $items = array();	/**	 * Returns an array of categories for the given extension.	 *	 * @param   string  $extension  The extension option e.g. com_something.	 * @param   array   $config     An array of configuration options. By default, only	 *                              published and unpublished categories are returned.	 *	 * @return  array	 *	 * @since   1.5	 */	public static function options($extension, $config = array('filter.published' => array(0, 1)))	{		$hash = md5($extension . '.' . serialize($config));		if (!isset(self::$items[$hash]))		{			$config = (array) $config;			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id, a.title, a.level')				->from('#__categories AS a')				->where('a.parent_id > 0');			// Filter on extension.			$query->where('extension = ' . $db->quote($extension));			// Filter on the published state			if (isset($config['filter.published']))			{				if (is_numeric($config['filter.published']))				{					$query->where('a.published = ' . (int) $config['filter.published']);				}				elseif (is_array($config['filter.published']))				{					JArrayHelper::toInteger($config['filter.published']);					$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');				}			}			// Filter on the language			if (isset($config['filter.language']))			{				if (is_string($config['filter.language']))				{					$query->where('a.language = ' . $db->quote($config['filter.language']));				}				elseif (is_array($config['filter.language']))				{					foreach ($config['filter.language'] as &$language)					{						$language = $db->quote($language);					}					$query->where('a.language IN (' . implode(',', $config['filter.language']) . ')');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Assemble the list options.			self::$items[$hash] = array();			foreach ($items as &$item)			{				$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;				$item->title = str_repeat('- ', $repeat) . $item->title;				self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);			}		}		return self::$items[$hash];	}	/**	 * Returns an array of categories for the given extension.	 *	 * @param   string  $extension  The extension option.	 * @param   array   $config     An array of configuration options. By default, only published and unpublished categories are returned.	 *	 * @return  array   Categories for the extension	 *	 * @since   1.6	 */	public static function categories($extension, $config = array('filter.published' => array(0, 1)))	{		$hash = md5($extension . '.' . serialize($config));		if (!isset(self::$items[$hash]))		{			$config = (array) $config;			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id, a.title, a.level, a.parent_id')				->from('#__categories AS a')				->where('a.parent_id > 0');			// Filter on extension.			$query->where('extension = ' . $db->quote($extension));			// Filter on the published state			if (isset($config['filter.published']))			{				if (is_numeric($config['filter.published']))				{					$query->where('a.published = ' . (int) $config['filter.published']);				}				elseif (is_array($config['filter.published']))				{					JArrayHelper::toInteger($config['filter.published']);					$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Assemble the list options.			self::$items[$hash] = array();			foreach ($items as &$item)			{				$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;				$item->title = str_repeat('- ', $repeat) . $item->title;				self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);			}			// Special "Add to root" option:			self::$items[$hash][] = JHtml::_('select.option', '1', JText::_('JLIB_HTML_ADD_TO_ROOT'));		}		return self::$items[$hash];	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Table class supporting modified pre-order tree traversal behavior. * * @package     Joomla.Platform * @subpackage  Table * @link        http://docs.joomla.org/JTableAsset * @since       11.1 */class JTableAsset extends JTableNested{	/**	 * The primary key of the asset.	 *	 * @var    integer	 * @since  11.1	 */	public $id = null;	/**	 * The unique name of the asset.	 *	 * @var    string	 * @since  11.1	 */	public $name = null;	/**	 * The human readable title of the asset.	 *	 * @var    string	 * @since  11.1	 */	public $title = null;	/**	 * The rules for the asset stored in a JSON string	 *	 * @var    string	 * @since  11.1	 */	public $rules = null;	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__assets', 'id', $db);	}	/**	 * Method to load an asset by its name.	 *	 * @param   string  $name  The name of the asset.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function loadByName($name)	{		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Get the asset id for the asset.		$query->select($this->_db->quoteName('id'))			->from($this->_db->quoteName('#__assets'))			->where($this->_db->quoteName('name') . ' = ' . $this->_db->quote($name));		$this->_db->setQuery($query);		$assetId = (int) $this->_db->loadResult();		if (empty($assetId))		{			return false;		}		return $this->load($assetId);	}	/**	 * Assert that the nested set data is valid.	 *	 * @return  boolean  True if the instance is sane and able to be stored in the database.	 *	 * @link    http://docs.joomla.org/JTable/check	 * @since   11.1	 */	public function check()	{		$this->parent_id = (int) $this->parent_id;		// JTableNested does not allow parent_id = 0, override this.		if ($this->parent_id > 0)		{			// Get the JDatabaseQuery object			$query = $this->_db->getQuery(true)				->select('COUNT(id)')				->from($this->_db->quoteName($this->_tbl))				->where($this->_db->quoteName('id') . ' = ' . $this->parent_id);			$this->_db->setQuery($query);			if ($this->_db->loadResult())			{				return true;			}			else			{				$this->setError('Invalid Parent ID');				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT_ADMINISTRATOR . '/helpers/content.php';/** * Item Model for an Article. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentModelArticle extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_CONTENT';	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   11.1	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$extension = JFactory::getApplication()->input->get('option', '');		$user = JFactory::getUser();		if (!$user->authorise('core.create', $extension . '.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->title);			$table->title = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			//$table->ordering	= 1;			// Get the featured state			$featured = $table->featured;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;			// Check if the article was featured and update the #__content_frontpage table			if ($featured == 1)			{				$db = $this->getDbo();				$query = $db->getQuery(true)					->insert($db->quoteName('#__content_frontpage'))					->values($newId . ', 0');				$db->setQuery($query);				$db->execute();			}		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->state != -2)			{				return;			}			$user = JFactory::getUser();			return $user->authorise('core.delete', 'com_content.article.' . (int) $record->id);		}	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check for existing article.		if (!empty($record->id))		{			return $user->authorise('core.edit.state', 'com_content.article.' . (int) $record->id);		}		// New article, so check against the category.		elseif (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_content.category.' . (int) $record->catid);		}		// Default to component settings if neither article nor category known.		else		{			return parent::canEditState('com_content');		}	}	/**	 * Prepare and sanitise the table data prior to saving.	 *	 * @param   JTable    A JTable object.	 *	 * @return  void	 * @since   1.6	 */	protected function prepareTable($table)	{		// Set the publish date to now		$db = $this->getDbo();		if ($table->state == 1 && (int) $table->publish_up == 0)		{			$table->publish_up = JFactory::getDate()->toSql();		}		if ($table->state == 1 && intval($table->publish_down) == 0)		{			$table->publish_down = $db->getNullDate();		}		// Increment the content version number.		$table->version++;		// Reorder the articles within the category so the new article is first		if (empty($table->id))		{			$table->reorder('catid = ' . (int) $table->catid . ' AND state >= 0');		}	}	/**	 * Returns a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 *	 * @return  JTable    A database object	 */	public function getTable($type = 'Content', $prefix = 'JTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get a single record.	 *	 * @param   integer    The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($pk = null)	{		if ($item = parent::getItem($pk))		{			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($item->attribs);			$item->attribs = $registry->toArray();			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($item->metadata);			$item->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($item->images);			$item->images = $registry->toArray();			// Convert the urls field to an array.			$registry = new JRegistry;			$registry->loadString($item->urls);			$item->urls = $registry->toArray();			$item->articletext = trim($item->fulltext) != '' ? $item->introtext . "<hr id=\"system-readmore\" />" . $item->fulltext : $item->introtext;			if (!empty($item->id))			{				$item->tags = new JHelperTags;				$item->tags->getTagIds($item->id, 'com_content.article');				$item->metadata['tags'] = $item->tags;			}		}		// Load associated content items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$item->associations = array();			if ($item->id != null)			{				$associations = JLanguageAssociations::getAssociations('com_content', '#__content', 'com_content.item', $item->id);				foreach ($associations as $tag => $association)				{					$item->associations[$tag] = $association->id;				}			}		}		return $item;	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_content.article', 'article', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$jinput = JFactory::getApplication()->input;		// The front end calls this model and uses a_id to avoid id clashes so we need to check for that first.		if ($jinput->get('a_id'))		{			$id = $jinput->get('a_id', 0);		}		// The back end uses id so we use that the rest of the time and set it to 0 by default.		else		{			$id = $jinput->get('id', 0);		}		// Determine correct permissions to check.		if ($this->getState('article.id'))		{			$id = $this->getState('article.id');			// Existing record. Can only edit in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit');			// Existing record. Can only edit own articles in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit.own');		}		else		{			// New record. Can only create in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.create');		}		$user = JFactory::getUser();		// Check for existing article.		// Modify the form based on Edit State access controls.		if ($id != 0 && (!$user->authorise('core.edit.state', 'com_content.article.' . (int) $id))			|| ($id == 0 && !$user->authorise('core.edit.state', 'com_content'))		)		{			// Disable fields for display.			$form->setFieldAttribute('featured', 'disabled', 'true');			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			$form->setFieldAttribute('state', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is an article you can edit.			$form->setFieldAttribute('featured', 'filter', 'unset');			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');			$form->setFieldAttribute('state', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$app = JFactory::getApplication();		$data = $app->getUserState('com_content.edit.article.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('article.id') == 0)			{				$data->set('catid', $app->input->getInt('catid', $app->getUserState('com_content.articles.filter.category_id')));			}		}		$this->preprocessData('com_content.article', $data);		return $data;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$app = JFactory::getApplication();		if (isset($data['images']) && is_array($data['images']))		{			$registry = new JRegistry;			$registry->loadArray($data['images']);			$data['images'] = (string) $registry;		}		if (isset($data['urls']) && is_array($data['urls']))		{			$registry = new JRegistry;			$registry->loadArray($data['urls']);			$data['urls'] = (string) $registry;		}		// Alter the title for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($title, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['title']);			$data['title'] = $title;			$data['alias'] = $alias;			$data['state'] = 0;		}		if (parent::save($data))		{			if (isset($data['featured']))			{				$this->featured($this->getState($this->getName() . '.id'), $data['featured']);			}			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$id = (int) $this->getState($this->getName() . '.id');				$item = $this->getItem($id);				// Adding self to the association				$associations = $data['associations'];				foreach ($associations as $tag => $id)				{					if (empty($id))					{						unset($associations[$tag]);					}				}				// Detecting all item menus				$all_language = $item->language == '*';				if ($all_language && !empty($associations))				{					JError::raiseNotice(403, JText::_('COM_CONTENT_ERROR_ALL_LANGUAGE_ASSOCIATED'));				}				$associations[$item->language] = $item->id;				// Deleting old association for these items				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->delete('#__associations')					->where('context=' . $db->quote('com_content.item'))					->where('id IN (' . implode(',', $associations) . ')');				$db->setQuery($query);				$db->execute();				if ($error = $db->getErrorMsg())				{					$this->setError($error);					return false;				}				if (!$all_language && count($associations))				{					// Adding new association for these items					$key = md5(json_encode($associations));					$query->clear()						->insert('#__associations');					foreach ($associations as $tag => $id)					{						$query->values($id . ',' . $db->quote('com_content.item') . ',' . $db->quote($key));					}					$db->setQuery($query);					$db->execute();					if ($error = $db->getErrorMsg())					{						$this->setError($error);						return false;					}				}			}			return true;		}		return false;	}	/**	 * Method to toggle the featured setting of articles.	 *	 * @param   array    The ids of the items to toggle.	 * @param   integer  The value to toggle to.	 *	 * @return  boolean  True on success.	 */	public function featured($pks, $value = 0)	{		// Sanitize the ids.		$pks = (array) $pks;		JArrayHelper::toInteger($pks);		if (empty($pks))		{			$this->setError(JText::_('COM_CONTENT_NO_ITEM_SELECTED'));			return false;		}		$table = $this->getTable('Featured', 'ContentTable');		try		{			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__content' .					' SET featured = ' . (int) $value .					' WHERE id IN (' . implode(',', $pks) . ')'			);			$db->execute();			if ((int) $value == 0)			{				// Adjust the mapping table.				// Clear the existing features settings.				$db->setQuery(					'DELETE FROM #__content_frontpage' .						' WHERE content_id IN (' . implode(',', $pks) . ')'				);				$db->execute();			}			else			{				// first, we find out which of our new featured articles are already featured.				$query = $db->getQuery(true)					->select('f.content_id')					->from('#__content_frontpage AS f')					->where('content_id IN (' . implode(',', $pks) . ')');				//echo $query;				$db->setQuery($query);				$old_featured = $db->loadColumn();				// we diff the arrays to get a list of the articles that are newly featured				$new_featured = array_diff($pks, $old_featured);				// Featuring.				$tuples = array();				foreach ($new_featured as $pk)				{					$tuples[] = '(' . $pk . ', 0)';				}				if (count($tuples))				{					$db->setQuery(						'INSERT INTO #__content_frontpage (' . $db->quoteName('content_id') . ', ' . $db->quoteName('ordering') . ')' .							' VALUES ' . implode(',', $tuples)					);					$db->execute();				}			}		}		catch (Exception $e)		{			$this->setError($e->getMessage());			return false;		}		$table->reorder();		$this->cleanCache();		return true;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object    A record object.	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = ' . (int) $table->catid;		return $condition;	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since    3.0	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Association content items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			// force to array (perhaps move to $this->loadFormData())			$data = (array) $data;			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_CONTENT_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if (empty($data['language']) || $tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'modal_article');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');				}			}			if ($add)			{				$form->load($addform, false);			}		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Custom clean the cache of com_content and content modules	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_content');		parent::cleanCache('mod_articles_archive');		parent::cleanCache('mod_articles_categories');		parent::cleanCache('mod_articles_category');		parent::cleanCache('mod_articles_latest');		parent::cleanCache('mod_articles_news');		parent::cleanCache('mod_articles_popular');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Comment class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/Comment/ * @since       13.1 */class JFacebookComment extends JFacebookObject{	/**	 * Method to get a comment. Requires authentication.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComment($comment)	{		return $this->get($comment);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get a comment's comments. Requires authentication.	 *	 * @param   string   $comment  The comment id.	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($comment, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($comment, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a comment. Requires authentication with publish_stream permission.	 *	 * @param   string  $comment  The comment id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($comment, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($comment, 'comments', $data);	}	/**	 * Method to get comment's likes. Requires authentication.	 *	 * @param   string   $comment  The comment id.	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($comment, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($comment, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a comment. Requires authentication and publish_stram permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($comment)	{		return $this->createConnection($comment, 'likes');	}	/**	 * Method to unlike a comment. Requires authentication and publish_stram permission.	 *	 * @param   string  $comment  The comment id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($comment)	{		return $this->deleteConnection($comment, 'likes');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Component Languages Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesModelInstalled extends JModelList{	/**	 * @var object client object	 */	protected $client = null;	/**	 * @var object user object	 */	protected $user = null;	/**	 * @var boolean|JExeption True, if FTP settings should be shown, or an exeption	 */	protected $ftp = null;	/**	 * @var string option name	 */	protected $option = null;	/**	 * @var array languages description	 */	protected $data = null;	/**	 * @var int total number pf languages	 */	protected $total = null;	/**	 * @var int total number pf languages installed	 */	protected $langlist = null;	/**	 * @var string language path	 */	protected $path = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$clientId = $app->input->getInt('client');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_languages');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Method to get the client object	 *	 * @return  object	 * @since   1.6	 */	public function &getClient()	{		if (is_null($this->client))		{			$this->client = JApplicationHelper::getClientInfo($this->getState('filter.client_id', 0));		}		return $this->client;	}	/**	 * Method to get the ftp credentials	 *	 * @return  object	 * @since   1.6	 */	public function &getFtp()	{		if (is_null($this->ftp))		{			$this->ftp = JClientHelper::setCredentialsFromRequest('ftp');		}		return $this->ftp;	}	/**	 * Method to get the option	 *	 * @return  object	 * @since   1.6	 */	public function &getOption()	{		$option = $this->getState('option');		return $option;	}	/**	 * Method to get Languages item data	 *	 * @return  array	 * @since   1.6	 */	public function &getData()	{		if (is_null($this->data)) {			// Get information			$path		= $this->getPath();			$client		= $this->getClient();			$langlist   = $this->getLanguageList();			// Compute all the languages			$data	= array ();			foreach ($langlist as $lang) {				$file = $path . '/' . $lang . '/' . $lang.'.xml';				$info = JApplicationHelper::parseXMLLangMetaFile($file);				$row = new JObject;				$row->language = $lang;				if (!is_array($info))				{					continue;				}				foreach ($info as $key => $value)				{					$row->$key = $value;				}				// if current than set published				$params = JComponentHelper::getParams('com_languages');				if ($params->get($client->name, 'en-GB') == $row->language)				{					$row->published	= 1;				}				else {					$row->published = 0;				}				$row->checked_out = 0;				$data[] = $row;			}			usort($data, array($this, 'compareLanguages'));			// Prepare data			$limit = $this->getState('list.limit');			$start = $this->getState('list.start');			$total = $this->getTotal();			if ($limit == 0)			{				$start = 0;				$end = $total;			}			else {				if ($start > $total)				{					$start = $total - $total % $limit;				}				$end = $start + $limit;				if ($end > $total)				{					$end = $total;				}			}			// Compute the displayed languages			$this->data	= array();			for ($i = $start;$i < $end;$i++)			{				$this->data[] = & $data[$i];			}		}		return $this->data;	}	/**	 * Method to get installed languages data.	 *	 * @return  string	An SQL query	 * @since   1.6	 */	protected function getLanguageList()	{		// Create a new db object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$client = $this->getState('filter.client_id');		$type = "language";		// Select field element from the extensions table.		$query->select($this->getState('list.select', 'a.element'))			->from('#__extensions AS a');		$type = $db->quote($type);		$query->where('(a.type = '.$type.')')			->where('state = 0')			->where('enabled = 1')			->where('client_id=' . (int) $client);		// for client_id = 1 do we need to check language table also ?		$db->setQuery($query);		$this->langlist = $db->loadColumn();		return $this->langlist;	}	/**	 * Method to get the total number of Languages items	 *	 * @return  integer	 * @since   1.6	 */	public function getTotal()	{		if (is_null($this->total))		{			$langlist = $this->getLanguageList();			$this->total = count($langlist);		}		return $this->total;	}	/**	 * Method to set the default language	 *	 * @return  boolean	 * @since   1.6	 */	public function publish($cid)	{		if ($cid)		{			$client	= $this->getClient();			$params = JComponentHelper::getParams('com_languages');			$params->set($client->name, $cid);			$table = JTable::getInstance('extension');			$id = $table->find(array('element' => 'com_languages'));			// Load			if (!$table->load($id))			{				$this->setError($table->getError());				return false;			}			$table->params = (string) $params;			// pre-save checks			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// save the changes			if (!$table->store())			{				$this->setError($table->getError());				return false;			}		}		else		{			$this->setError(JText::_('COM_LANGUAGES_ERR_NO_LANGUAGE_SELECTED'));			return false;		}		// Clean the cache of com_languages and component cache.		$this->cleanCache();		$this->cleanCache('_system');		return true;	}	/**	 * Method to get the folders	 *	 * @return  array  Languages folders	 * @since   1.6	 */	protected function getFolders()	{		if (is_null($this->folders))		{			$path = $this->getPath();			jimport('joomla.filesystem.folder');			$this->folders = JFolder::folders($path, '.', false, false, array('.svn', 'CVS', '.DS_Store', '__MACOSX', 'pdf_fonts', 'overrides'));		}		return $this->folders;	}	/**	 * Method to get the path	 *	 * @return  string	The path to the languages folders	 * @since   1.6	 */	protected function getPath()	{		if (is_null($this->path))		{			$client = $this->getClient();			$this->path = JLanguage::getLanguagePath($client->path);		}		return $this->path;	}	/**	 * Method to compare two languages in order to sort them	 *	 * @param   object	$lang1 the first language	 * @param   object	$lang2 the second language	 *	 * @return  integer	 * @since   1.6	 */	protected function compareLanguages($lang1, $lang2)	{		return strcmp($lang1->name, $lang2->name);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.updater.updateadapter');/** * Extension class for updater * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 * */class JUpdaterExtension extends JUpdateAdapter{	/**	 * Start element parser callback.	 *	 * @param   object  $parser  The parser object.	 * @param   string  $name    The name of the element.	 * @param   array   $attrs   The attributes of the element.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _startElement($parser, $name, $attrs = array())	{		array_push($this->stack, $name);		$tag = $this->_getStackLocation();		// Reset the data		if (isset($this->$tag))		{			$this->$tag->_data = "";		}		switch ($name)		{			case 'UPDATE':				$this->current_update = JTable::getInstance('update');				$this->current_update->update_site_id = $this->updateSiteId;				$this->current_update->detailsurl = $this->_url;				$this->current_update->folder = "";				$this->current_update->client_id = 1;				break;			// Don't do anything			case 'UPDATES':				break;			default:				if (in_array($name, $this->updatecols))				{					$name = strtolower($name);					$this->current_update->$name = '';				}				if ($name == 'TARGETPLATFORM')				{					$this->current_update->targetplatform = $attrs;				}				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $name    The name of the element.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _endElement($parser, $name)	{		array_pop($this->stack);		// @todo remove code: echo 'Closing: '. $name .'<br />';		switch ($name)		{			case 'UPDATE':				$ver = new JVersion;				// Lower case and remove the exclamation mark				$product = strtolower(JFilterInput::getInstance()->clean($ver->PRODUCT, 'cmd'));				// Check that the product matches and that the version matches (optionally a regexp)				// Check for optional min_dev_level and max_dev_level attributes to further specify targetplatform (e.g., 3.0.1)				if ($product == $this->current_update->targetplatform['NAME']					&& preg_match('/' . $this->currentUpdate->targetplatform->version . '/', $ver->RELEASE)					&& ((!isset($this->currentUpdate->targetplatform->min_dev_level)) || $ver->DEV_LEVEL >= $this->currentUpdate->targetplatform->min_dev_level)					&& ((!isset($this->currentUpdate->targetplatform->max_dev_level)) || $ver->DEV_LEVEL <= $this->currentUpdate->targetplatform->max_dev_level))				{					// Target platform isn't a valid field in the update table so unset it to prevent J! from trying to store it					unset($this->current_update->targetplatform);					if (isset($this->latest))					{						if (version_compare($this->current_update->version, $this->latest->version, '>') == 1)						{							$this->latest = $this->current_update;						}					}					else					{						$this->latest = $this->current_update;					}				}				break;			case 'UPDATES':				// :D				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $data    The data.	 *	 * @return  void	 *	 * @note    This is public because its called externally.	 * @since   11.1	 */	protected function _characterData($parser, $data)	{		$tag = $this->_getLastTag();		/**		 * @todo remove code		 * if(!isset($this->$tag->_data)) $this->$tag->_data = '';		 * $this->$tag->_data .= $data;		 */		if (in_array($tag, $this->updatecols))		{			$tag = strtolower($tag);			$this->current_update->$tag .= $data;		}	}	/**	 * Finds an update.	 *	 * @param   array  $options  Update options.	 *	 * @return  array  Array containing the array of update sites and array of updates	 *	 * @since   11.1	 */	public function findUpdate($options)	{		$url = $options['location'];		$this->_url = &$url;		$this->updateSiteId = $options['update_site_id'];		if (substr($url, -4) != '.xml')		{			if (substr($url, -1) != '/')			{				$url .= '/';			}			$url .= 'extension.xml';		}		$db = $this->parent->getDBO();		$http = JHttpFactory::getHttp();		$response = $http->get($url);		if (!empty($response->code) && 200 != $response->code)		{			$query = $db->getQuery(true)				->update('#__update_sites')				->set('enabled = 0')				->where('update_site_id = ' . $this->updateSiteId);			$db->setQuery($query);			$db->execute();			JLog::add("Error opening url: " . $url, JLog::WARNING, 'updater');			$app = JFactory::getApplication();			$app->enqueueMessage(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_OPEN_URL', $url), 'warning');			return false;		}		$this->xmlParser = xml_parser_create('');		xml_set_object($this->xmlParser, $this);		xml_set_element_handler($this->xmlParser, '_startElement', '_endElement');		xml_set_character_data_handler($this->xmlParser, '_characterData');		if (!xml_parse($this->xmlParser, $response->body))		{			JLog::add("Error parsing url: " . $url, JLog::WARNING, 'updater');			$app = JFactory::getApplication();			$app->enqueueMessage(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_PARSE_URL', $url), 'warning');			return false;		}		xml_parser_free($this->xmlParser);		if (isset($this->latest))		{			if (isset($this->latest->client) && strlen($this->latest->client))			{				if (is_numeric($this->latest->client))				{					$byName = false;					// <client> has to be 'administrator' or 'site', numeric values are depreceated. See http://docs.joomla.org/Design_of_JUpdate					JLog::add(						'Using numeric values for <client> in the updater xml is deprecated. Use \'administrator\' or \'site\' instead.',						JLog::WARNING, 'deprecated'					);				}				else				{					$byName = true;				}				$this->latest->client_id = JApplicationHelper::getClientInfo($this->latest->client, $byName)->id;				unset($this->latest->client);			}			$updates = array($this->latest);		}		else		{			$updates = array();		}		return array('update_sites' => array(), 'updates' => $updates);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Contact component * * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactViewCategory extends JViewLegacy{	public function display($tpl = null)	{		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$app = JFactory::getApplication();		$doc	= JFactory::getDocument();		$params = $app->getParams();		$feedEmail = $app->getCfg('feed_email', 'author');		$siteEmail = $app->getCfg('mailfrom');		$fromName  = $app->getCfg('fromname');		$app->input->set('limit', $app->getCfg('feed_limit'));		// Get some data from the models		$category = $this->get('Category');		$rows     = $this->get('Items');		$doc->link = JRoute::_(ContactHelperRoute::getCategoryRoute($category->id));		foreach ($rows as $row)		{			// strip html from feed item title			$title = $this->escape($row->name);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// Compute the contact slug			$row->slug = $row->alias ? ($row->id . ':' . $row->alias) : $row->id;			// url link to article			$link = JRoute::_(ContactHelperRoute::getContactRoute($row->slug, $row->catid));			$description	= $row->address;			$author			= $row->created_by_alias ? $row->created_by_alias : $row->author;			@$date			= ($row->created ? date('r', strtotime($row->created)) : '');			// load individual item creator class			$item = new JFeedItem;			$item->title       = $title;			$item->link        = $link;			$item->description = $description;			$item->date        = $date;			$item->category    = $category->title;			$item->author      = $author;			// We don't have the author email so we have to use site in both cases.			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail == 'author')			{				$item->authorEmail = $row->author_email;			}			// loads item info into rss array			$doc->addItem($item);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Smart download helper. Automatically uses cURL or URL fopen() wrappers to * fetch the package. * * @package  Joomla.Administrator * @since    2.5.4 */class AdmintoolsHelperDownload{	/**	 * Downloads from a URL and saves the result as a local file	 *	 * @param   string  $url     The URL to download from	 * @param   string  $target  The file path to download to	 *	 * @return  bool	True on success	 *	 * @since   2.5.4	 */	public static function download($url, $target)	{		jimport('joomla.filesystem.file');		$hackPermissions = false;		// Make sure the target does not exist		if (JFile::exists($target))		{			if (!@unlink($target))			{				JFile::delete($target);			}		}		// Try to open the output file for writing		$fp = @fopen($target, 'wb');		if ($fp === false)		{			// The file can not be opened for writing. Let's try a hack.			$empty = '';			if ( JFile::write($target, $empty) )			{				if ( self::chmod($target, 511) )				{					$fp = @fopen($target, 'wb');					$hackPermissions = true;				}			}		}		$result = false;		if ($fp !== false)		{			// First try to download directly to file if $fp !== false			$adapters = self::getAdapters();			$result = false;			while (!empty($adapters) && ($result === false))			{				// Run the current download method				$method = 'get' . strtoupper(array_shift($adapters));				$result = self::$method($url, $fp);				// Check if we have a download				if ($result === true)				{					// The download is complete, close the file pointer					@fclose($fp);					// If the filesize is not at least 1 byte, we consider it failed.					clearstatcache();					$filesize = @filesize($target);					if ($filesize <= 0)					{						$result = false;						$fp = @fopen($target, 'wb');					}				}			}			// If we have no download, close the file pointer			if ($result === false)			{				@fclose($fp);			}		}		if ($result === false)		{			// Delete the target file if it exists			if (file_exists($target))			{				if ( !@unlink($target) )				{					JFile::delete($target);				}			}			// Download and write using JFile::write();			$result = JFile::write($target, self::downloadAndReturn($url));		}		return $result;	}	/**	 * Downloads from a URL and returns the result as a string	 *	 * @param   string  $url  The URL to download from	 *	 * @return  mixed Result string on success, false on failure	 *	 * @since   2.5.4	 */	public static function downloadAndReturn($url)	{		$adapters = self::getAdapters();		$result = false;		while (!empty($adapters) && ($result === false))		{			// Run the current download method			$method = 'get' . strtoupper(array_shift($adapters));			$result = self::$method($url, null);		}		return $result;	}	/**	 * Does the server support PHP's cURL extension?	 *	 * @return  bool True if it is supported	 *	 * @since   2.5.4	 */	private static function hasCURL()	{		static $result = null;		if (is_null($result))		{			$result = function_exists('curl_init');		}		return $result;	}	/**	 * Downloads the contents of a URL and writes them to disk (if $fp is not null)	 * or returns them as a string (if $fp is null)	 *	 * @param   string    $url       The URL to download from	 * @param   resource  $fp        The file pointer to download to. Omit to return the contents.	 * @param   boolean   $nofollow  Should we follow 301/302/307 redirection HTTP headers?	 *	 * @return   bool|string False on failure, true on success ($fp not null) or the URL contents (if $fp is null)	 *	 * @since   2.5.4	 */	private static function &getCURL($url, $fp = null, $nofollow = false)	{		$result = false;		$ch = curl_init($url);		if ( !@curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1) && !$nofollow )		{			// Safe Mode is enabled. We have to fetch the headers and			// parse any redirections present in there.			curl_setopt($ch, CURLOPT_AUTOREFERER, true);			curl_setopt($ch, CURLOPT_FAILONERROR, true);			curl_setopt($ch, CURLOPT_HEADER, true);			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);			curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);			curl_setopt($ch, CURLOPT_TIMEOUT, 30);			// Get the headers			$data = curl_exec($ch);			curl_close($ch);			// Init			$newURL = $url;			// Parse the headers			$lines = explode("\n", $data);			foreach ($lines as $line)			{				if (substr($line, 0, 9) == "Location:")				{					$newURL = trim(substr($line, 9));				}			}			if ($url != $newURL)			{				return self::getCURL($newURL, $fp);			}			else			{				return self::getCURL($newURL, $fp, true);			}		}		else		{			@curl_setopt($ch, CURLOPT_MAXREDIRS, 20);			if (function_exists('set_time_limit'))			{				set_time_limit(0);			}		}		curl_setopt($ch, CURLOPT_HEADER, 0);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);		curl_setopt($ch, CURLOPT_USERAGENT, 'Joomla/' . JVERSION);		if (is_resource($fp))		{			curl_setopt($ch, CURLOPT_FILE, $fp);		}		else		{			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);		}		$result = curl_exec($ch);		curl_close($ch);		return $result;	}	/**	 * Does the server support URL fopen() wrappers?	 *	 * @return  bool	 *	 * @since   2.5.4	 */	private static function hasFOPEN()	{		static $result = null;		if (is_null($result))		{			// If we are not allowed to use ini_get, we assume that URL fopen is			// disabled.			if (!function_exists('ini_get'))			{				$result = false;			}			else			{				$result = ini_get('allow_url_fopen');			}		}		return $result;	}	/**	 * Download from a URL using URL fopen() wrappers	 *	 * @param   string    $url  The URL to download from	 * @param   resource  $fp   The file pointer to download to; leave null to return the d/l file as a string	 *	 * @return  bool|string False on failure, true on success ($fp not null) or the URL contents (if $fp is null)	 *	 * @since   2.5.4	 */	private static function &getFOPEN($url, $fp = null)	{		$result = false;		// Track errors		if ( function_exists('ini_set') )		{			$track_errors = ini_set('track_errors', true);		}		// Open the URL for reading		if (function_exists('stream_context_create'))		{			$httpopts = array('user_agent' => 'Joomla/' . JVERSION);			$context = stream_context_create(array( 'http' => $httpopts ));			$ih = @fopen($url, 'r', false, $context);		}		else		{			// PHP 4 way (actually, it's just a fallback)			if ( function_exists('ini_set') )			{				ini_set('user_agent', 'Joomla/' . JVERSION);			}			$ih = @fopen($url, 'r');		}		// If fopen() fails, abort		if ( !is_resource($ih) )		{			return $result;		}		// Try to download		$bytes = 0;		$result = true;		$return = '';		while (!feof($ih) && $result)		{			$contents = fread($ih, 4096);			if ($contents === false)			{				@fclose($ih);				$result = false;				return $result;			}			else			{				$bytes += strlen($contents);				if (is_resource($fp))				{					$result = @fwrite($fp, $contents);				}				else				{					$return .= $contents;					unset($contents);				}			}		}		@fclose($ih);		if (is_resource($fp))		{			return $result;		}		elseif ( $result === true )		{			return $return;		}		else		{			return $result;		}	}	/**	 * Detect and return available download "adapters" (not really adapters, as	 * we don't follow the Adapter pattern, yet)	 *	 * @return  array	 *	 * @since   2.5.4	 */	private static function getAdapters()	{		// Detect available adapters		$adapters = array();		if (self::hasCURL())		{			$adapters[] = 'curl';		}		if (self::hasFOPEN())		{			$adapters[] = 'fopen';		}		return $adapters;	}	/**	 * Change the permissions of a file, optionally using FTP	 *	 * @param   string  $path  Absolute path to file	 * @param   int     $mode  Permissions, e.g. 0755	 *	 * @return  boolean True on success	 *	 * @since   2.5.4	 */	private static function chmod($path, $mode)	{		if (is_string($mode))		{			$mode = octdec($mode);			if ( ($mode < 0600) || ($mode > 0777) )			{				$mode = 0755;			}		}		$ftpOptions = JClientHelper::getCredentials('ftp');		// Check to make sure the path valid and clean		$path = JPath::clean($path);		if ($ftpOptions['enabled'] == 1)		{			// Connect the FTP client			$ftp = JClientFtp::getInstance(				$ftpOptions['host'], $ftpOptions['port'], null,				$ftpOptions['user'], $ftpOptions['pass']			);		}		if (@chmod($path, $mode))		{			$ret = true;		}		elseif ($ftpOptions['enabled'] == 1)		{			// Translate path and delete			$path = JPath::clean(str_replace(JPATH_ROOT, $ftpOptions['root'], $path), '/');			// FTP connector throws an error			$ret = $ftp->chmod($path, $mode);		} else		{			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$user      = JFactory::getUser();$userId    = $user->get('id');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));JText::script('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'filters.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=filters');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by_alias', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_TIMESTAMP', 'a.created', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_MAP_COUNT', 'a.map_count', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.filter_id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tbody>				<?php if (count($this->items) == 0) : ?>				<tr class="row0">					<td class="center" colspan="7">						<?php						if ($this->total == 0):							echo JText::_('COM_FINDER_NO_FILTERS');							?>							<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.add'); ?>" title="<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>">								<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>							</a>						<?php						else:							echo JText::_('COM_FINDER_NO_RESULTS');						endif;						?>					</td>				</tr>				<?php endif; ?>				<?php foreach ($this->items as $i => $item):				$canCreate  = $user->authorise('core.create',     'com_finder');				$canEdit    = $user->authorise('core.edit',       'com_finder');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_finder') && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->filter_id); ?>					</td>					<td>						<?php if ($item->checked_out)						{							echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'filters.', $canCheckin);						} ?>						<?php if ($canEdit) { ?>							<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.edit&filter_id=' . (int) $item->filter_id); ?>">								<?php echo $this->escape($item->title); ?></a>						<?php } else {								echo $this->escape($item->title);						} ?>					</td>					<td class="center nowrap">						<?php echo JHtml::_('jgrid.published', $item->state, $i, 'filters.', $canChange); ?>					</td>					<td class="center nowrap">						<?php echo $item->created_by_alias ? $item->created_by_alias : $item->user_name; ?>					</td>					<td class="center nowrap">						<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center nowrap">						<?php echo $item->map_count; ?>					</td>					<td class="center">						<?php echo (int) $item->filter_id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>			<tfoot>				<tr>					<td colspan="7" class="nowrap">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $this->state->get('list.ordering'); ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $this->state->get('list.direction'); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of clients. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewClients extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		BannersHelper::addSubmenu('clients');		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/banners.php';		$canDo	= BannersHelper::getActions();		JToolbarHelper::title(JText::_('COM_BANNERS_MANAGER_CLIENTS'), 'banners-clients.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('client.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('client.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('clients.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('clients.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('clients.archive');			JToolbarHelper::checkin('clients.checkin');		}		if ($this->state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'clients.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('clients.trash');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_banners');		}		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_CLIENTS');		JHtmlSidebar::setAction('index.php?option=com_banners&view=clients');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.status' => JText::_('JSTATUS'),			'a.name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'contact' => JText::_('COM_BANNERS_HEADING_CONTACT'),			'client_name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'nbanners' => JText::_('COM_BANNERS_HEADING_ACTIVE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('bootstrap.popover');$document = JFactory::getDocument();?><h2><?php echo JText::_('COM_MODULES_TYPE_CHOOSE')?></h2><ul id="new-modules-list" class="list list-striped"><?php foreach ($this->items as &$item) : ?>	<?php		// Prepare variables for the link.		$link	= 'index.php?option=com_modules&task=module.add&eid='. $item->extension_id;		$name	= $this->escape($item->name);		$desc	= JHTML::_('string.truncate', ($this->escape($item->desc)), 200);		$short_desc	= JHTML::_('string.truncate', ($this->escape($item->desc)), 90);	?>	<?php if ($document->direction != "rtl") : ?>	<li>		<a href="<?php echo JRoute::_($link);?>">			<strong><?php echo $name; ?></strong>		</a>		<small class="hasPopover" data-placement="right" title="<?php echo $name; ?>" data-content="<?php echo $desc; ?>"><?php echo $short_desc; ?></small>	</li>	<?php else : ?>	<li>		<small rel="popover" data-placement="left" title="<?php echo $name; ?>" data-content="<?php echo $desc; ?>"><?php echo $short_desc; ?></small>		<a href="<?php echo JRoute::_($link);?>">			<strong><?php echo $name; ?></strong>		</a>	</li>	<?php endif?><?php endforeach; ?></ul><div class="clr"></div>
<?php/** * @package     Joomla.Platform * @subpackage  User * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Authentication class, provides an interface for the Joomla authentication system * * @package     Joomla.Platform * @subpackage  User * @since       11.1 */class JAuthentication extends JObject{	// Shared success status	/**	 * This is the status code returned when the authentication is success (permit login)	 * @const  STATUS_SUCCESS successful response	 * @since  11.2	 */	const STATUS_SUCCESS = 1;	// These are for authentication purposes (username and password is valid)	/**	 * Status to indicate cancellation of authentication (unused)	 * @const  STATUS_CANCEL cancelled request (unused)	 * @since  11.2	 */	const STATUS_CANCEL = 2;	/**	 * This is the status code returned when the authentication failed (prevent login if no success)	 * @const  STATUS_FAILURE failed request	 * @since  11.2	 */	const STATUS_FAILURE = 4;	// These are for authorisation purposes (can the user login)	/**	 * This is the status code returned when the account has expired (prevent login)	 * @const  STATUS_EXPIRED an expired account (will prevent login)	 * @since  11.2	 */	const STATUS_EXPIRED = 8;	/**	 * This is the status code returned when the account has been denied (prevent login)	 * @const  STATUS_DENIED denied request (will prevent login)	 * @since  11.2	 */	const STATUS_DENIED = 16;	/**	 * This is the status code returned when the account doesn't exist (not an error)	 * @const  STATUS_UNKNOWN unknown account (won't permit or prevent login)	 * @since  11.2	 */	const STATUS_UNKNOWN = 32;	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  12.1	 */	protected $observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  12.1	 */	protected $state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  12.1	 */	protected $methods = array();	/**	 * @var    JAuthentication  JAuthentication instances container.	 * @since  11.3	 */	protected static $instance;	/**	 * Constructor	 *	 * @since   11.1	 */	public function __construct()	{		$isLoaded = JPluginHelper::importPlugin('authentication');		if (!$isLoaded)		{			JLog::add(JText::_('JLIB_USER_ERROR_AUTHENTICATION_LIBRARIES'), JLog::WARNING, 'jerror');		}	}	/**	 * Returns the global authentication object, only creating it	 * if it doesn't already exist.	 *	 * @return  JAuthentication  The global JAuthentication object	 *	 * @since   11.1	 */	public static function getInstance()	{		if (empty(self::$instance))		{			self::$instance = new JAuthentication;		}		return self::$instance;	}	/**	 * Get the state of the JAuthentication object	 *	 * @return  mixed    The state of the object.	 *	 * @since   11.1	 */	public function getState()	{		return $this->state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   11.1	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->observers[] = $observer;			end($this->observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JAuthentication))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->methods[$method]))			{				$this->methods[$method] = array();			}			$this->methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   11.1	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->observers);		if ($key !== false)		{			unset($this->observers[$key]);			$retval = true;			foreach ($this->methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}	/**	 * Finds out if a set of login credentials are valid by asking all observing	 * objects to run their respective authentication routines.	 *	 * @param   array  $credentials  Array holding the user credentials.	 * @param   array  $options      Array holding user options.	 *	 * @return  JAuthenticationResponse  Response object with status variable filled in for last plugin or first successful plugin.	 *	 * @see     JAuthenticationResponse	 * @since   11.1	 */	public function authenticate($credentials, $options = array())	{		// Get plugins		$plugins = JPluginHelper::getPlugin('authentication');		// Create authentication response		$response = new JAuthenticationResponse;		/*		 * Loop through the plugins and check of the credentials can be used to authenticate		 * the user		 *		 * Any errors raised in the plugin should be returned via the JAuthenticationResponse		 * and handled appropriately.		 */		foreach ($plugins as $plugin)		{			$className = 'plg' . $plugin->type . $plugin->name;			if (class_exists($className))			{				$plugin = new $className($this, (array) $plugin);			}			else			{				// Bail here if the plugin can't be created				JLog::add(JText::sprintf('JLIB_USER_ERROR_AUTHENTICATION_FAILED_LOAD_PLUGIN', $className), JLog::WARNING, 'jerror');				continue;			}			// Try to authenticate			$plugin->onUserAuthenticate($credentials, $options, $response);			// If authentication is successful break out of the loop			if ($response->status === self::STATUS_SUCCESS)			{				if (empty($response->type))				{					$response->type = isset($plugin->_name) ? $plugin->_name : $plugin->name;				}				break;			}		}		if (empty($response->username))		{			$response->username = $credentials['username'];		}		if (empty($response->fullname))		{			$response->fullname = $credentials['username'];		}		if (empty($response->password))		{			$response->password = $credentials['password'];		}		return $response;	}	/**	 * Authorises that a particular user should be able to login	 *	 * @param   JAuthenticationResponse  $response  response including username of the user to authorise	 * @param   array                    $options   list of options	 *	 * @return  array[JAuthenticationResponse]  results of authorisation	 *	 * @since  11.2	 */	public static function authorise($response, $options = array())	{		// Get plugins in case they haven't been imported already		JPluginHelper::importPlugin('user');		JPluginHelper::importPlugin('authentication');		$dispatcher = JEventDispatcher::getInstance();		$results = $dispatcher->trigger('onUserAuthorisation', array($response, $options));		return $results;	}}/** * Authentication response class, provides an object for storing user and error details * * @package     Joomla.Platform * @subpackage  User * @since       11.1 */class JAuthenticationResponse{	/**	 * Response status (see status codes)	 *	 * @var    string	 * @since  11.1	 */	public $status = JAuthentication::STATUS_FAILURE;	/**	 * The type of authentication that was successful	 *	 * @var    string	 * @since  11.1	 */	public $type = '';	/**	 *  The error message	 *	 * @var    string	 * @since  11.1	 */	public $error_message = '';	/**	 * Any UTF-8 string that the End User wants to use as a username.	 *	 * @var    string	 * @since  11.1	 */	public $username = '';	/**	 * Any UTF-8 string that the End User wants to use as a password.	 *	 * @var    string	 * @since  11.1	 */	public $password = '';	/**	 * The email address of the End User as specified in section 3.4.1 of [RFC2822]	 *	 * @var    string	 * @since  11.1	 */	public $email = '';	/**	 * UTF-8 string free text representation of the End User's full name.	 *	 * @var    string	 * @since  11.1	 *	 */	public $fullname = '';	/**	 * The End User's date of birth as YYYY-MM-DD. Any values whose representation uses	 * fewer than the specified number of digits should be zero-padded. The length of this	 * value MUST always be 10. If the End User user does not want to reveal any particular	 * component of this value, it MUST be set to zero.	 *	 * For instance, if a End User wants to specify that his date of birth is in 1980, but	 * not the month or day, the value returned SHALL be "1980-00-00".	 *	 * @var    string	 * @since  11.1	 */	public $birthdate = '';	/**	 * The End User's gender, "M" for male, "F" for female.	 *	 * @var    string	 * @since  11.1	 */	public $gender = '';	/**	 * UTF-8 string free text that SHOULD conform to the End User's country's postal system.	 *	 * @var    string	 * @since  11.1	 */	public $postcode = '';	/**	 * The End User's country of residence as specified by ISO3166.	 *	 * @var    string	 * @since  11.1	 */	public $country = '';	/**	 * End User's preferred language as specified by ISO639.	 *	 * @var    string	 * @since  11.1	 */	public $language = '';	/**	 * ASCII string from TimeZone database	 *	 * @var    string	 * @since  11.1	 */	public $timezone = '';}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));JText::script('COM_USERS_GROUPS_CONFIRM_DELETE');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'groups.delete')		{			var f = document.adminForm;			var cb='';<?php foreach ($this->items as $i => $item):?><?php if ($item->user_count > 0):?>			cb = f['cb'+<?php echo $i;?>];			if (cb && cb.checked)			{				if (confirm(Joomla.JText._('COM_USERS_GROUPS_CONFIRM_DELETE')))				{					Joomla.submitform(task);				}				return;			}<?php endif;?><?php endforeach;?>		}		Joomla.submitform(task);	}</script><form action="<?php echo JRoute::_('index.php?option=com_users&view=groups');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_GROUPS_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_GROUPS_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_GROUPS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JText::_('COM_USERS_HEADING_GROUP_TITLE'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_USERS_HEADING_USERS_IN_GROUP'); ?>				</th>				<th class="nowrap id-col">					<?php echo JText::_('JGRID_HEADING_ID'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create', 'com_users');			$canEdit   = $user->authorise('core.edit',   'com_users');			// If this group is super admin and this user is not super admin, $canEdit is false			if (!$user->authorise('core.admin') && (JAccess::checkGroup($item->id, 'core.admin')))			{				$canEdit = false;			}			$canChange	= $user->authorise('core.edit.state',	'com_users');		?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php if ($canEdit) : ?>						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					<?php endif; ?>				</td>				<td>					<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_users&task=group.edit&id='.$item->id);?>">						<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<?php if (JDEBUG) : ?>						<div class="fltrt"><div class="button2-left smallsub"><div class="blank"><a href="<?php echo JRoute::_('index.php?option=com_users&view=debuggroup&group_id='.(int) $item->id);?>">						<?php echo JText::_('COM_USERS_DEBUG_GROUP');?></a></div></div></div>					<?php endif; ?>				</td>				<td class="center">					<?php echo $item->user_count ? $item->user_count : ''; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();JHtml::_('bootstrap.tooltip');?>		<tr>			<td class="imgTotal">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe">					<i class="icon-folder-2"></i></a>			</td>			<td class="description">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe"><?php echo $this->_tmp_folder->name; ?></a>			</td>			<td>&#160;			</td>			<td>&#160;			</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>				<a class="delete-item" target="_top" href="index.php?option=com_media&amp;task=folder.delete&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>&amp;<?php echo JSession::getFormToken(); ?>=1&amp;rm[]=<?php echo $this->_tmp_folder->name; ?>" rel="<?php echo $this->_tmp_folder->name; ?>' :: <?php echo $this->_tmp_folder->files + $this->_tmp_folder->folders; ?>"><i class="icon-remove hasTooltip" title="<?php echo JText::_('JACTION_DELETE');?>"></i></a>				<input type="checkbox" name="rm[]" value="<?php echo $this->_tmp_folder->name; ?>" />			</td>		<?php endif;?>		</tr>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PostgreSQL database driver * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseDriverPostgresql extends JDatabaseDriver{	/**	 * The database driver name	 *	 * @var string	 */	public $name = 'postgresql';	/**	 * Quote for named objects	 *	 * @var string	 */	protected $nameQuote = '"';	/**	 *  The null/zero date string	 *	 * @var string	 */	protected $nullDate = '1970-01-01 00:00:00';	/**	 * @var    string  The minimum supported database version.	 * @since  12.1	 */	protected static $dbMinimum = '8.3.18';	/**	 * Operator used for concatenation	 *	 * @var string	 */	protected $concat_operator = '||';	/**	 * JDatabaseDriverPostgresqlQuery object returned by getQuery	 *	 * @var JDatabaseDriverPostgresqlQuery	 */	protected $queryObject = null;	/**	 * Database object constructor	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since	12.1	 */	public function __construct( $options )	{		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : '';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		// Finalize initialization		parent::__construct($options);	}	/**	 * Database object destructor	 *	 * @since 12.1	 */	public function __destruct()	{		if (is_resource($this->connection))		{			pg_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		// Make sure the postgresql extension for PHP is installed and enabled.		if (!function_exists('pg_connect'))		{			throw new RuntimeException('PHP extension pg_connect is not available.');		}		// Build the DSN for the connection.		$dsn = "host={$this->options['host']} dbname={$this->options['database']} user={$this->options['user']} password={$this->options['password']}";		// Attempt to connect to the server.		if (!($this->connection = @pg_connect($dsn)))		{			throw new RuntimeException('Error connecting to PGSQL database.');		}		pg_set_error_verbosity($this->connection, PGSQL_ERRORS_DEFAULT);		pg_query('SET standard_conforming_strings=off');	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		if (is_resource($this->connection))		{			pg_close($this->connection);		}		$this->connection = null;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$this->connect();		$result = pg_escape_string($this->connection, $text);		if ($extra)		{			$result = addcslashes($result, '%_');		}		return $result;	}	/**	 * Test to see if the PostgreSQL connector is available	 *	 * @return boolean  True on success, false otherwise.	 */	public static function test()	{		return (function_exists('pg_connect'));	}	/**	 * Determines if the connection to the server is active.	 *	 * @return	boolean	 *	 * @since	12.1	 */	public function connected()	{		$this->connect();		if (is_resource($this->connection))		{			return pg_ping($this->connection);		}		return false;	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  boolean	true	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$this->setQuery('DROP TABLE ' . ($ifExists ? 'IF EXISTS ' : '') . $this->quoteName($tableName));		$this->execute();		return true;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return int The number of affected rows in the previous operation	 *	 * @since 12.1	 */	public function getAffectedRows()	{		$this->connect();		return pg_affected_rows($this->cursor);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getCollation()	{		$this->connect();		$this->setQuery('SHOW LC_COLLATE');		$array = $this->loadAssocList();		return $array[0]['lc_collate'];	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cur  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows( $cur = null )	{		$this->connect();		return pg_num_rows((int) $cur ? $cur : $this->cursor);	}	/**	 * Get the current or query, or new JDatabaseQuery object.	 *	 * @param   boolean  $new    False to return the last query set, True to return a new JDatabaseQuery object.	 * @param   boolean  $asObj  False to return last query as string, true to get JDatabaseQueryPostgresql object.	 *	 * @return  JDatabaseQuery  The current query object or a new object extending the JDatabaseQuery class.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getQuery($new = false, $asObj = false)	{		if ($new)		{			// Make sure we have a query class for this driver.			if (!class_exists('JDatabaseQueryPostgresql'))			{				throw new RuntimeException('JDatabaseQueryPostgresql Class not found.');			}			$this->queryObject = new JDatabaseQueryPostgresql($this);			return $this->queryObject;		}		else		{			if ($asObj)			{				return $this->queryObject;			}			else			{				return $this->sql;			}		}	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * This is unsuported by PostgreSQL.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  char  An empty char because this function is not supported by PostgreSQL.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		return '';	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$result = array();		$tableSub = $this->replacePrefix($table);		$this->setQuery('				SELECT a.attname AS "column_name",					pg_catalog.format_type(a.atttypid, a.atttypmod) as "type",					CASE WHEN a.attnotnull IS TRUE						THEN \'NO\'						ELSE \'YES\'					END AS "null",					CASE WHEN pg_catalog.pg_get_expr(adef.adbin, adef.adrelid, true) IS NOT NULL						THEN pg_catalog.pg_get_expr(adef.adbin, adef.adrelid, true)					END as "Default",					CASE WHEN pg_catalog.col_description(a.attrelid, a.attnum) IS NULL					THEN \'\'					ELSE pg_catalog.col_description(a.attrelid, a.attnum)					END  AS "comments"				FROM pg_catalog.pg_attribute a				LEFT JOIN pg_catalog.pg_attrdef adef ON a.attrelid=adef.adrelid AND a.attnum=adef.adnum				LEFT JOIN pg_catalog.pg_type t ON a.atttypid=t.oid				WHERE a.attrelid =					(SELECT oid FROM pg_catalog.pg_class WHERE relname=' . $this->quote($tableSub) . '						AND relnamespace = (SELECT oid FROM pg_catalog.pg_namespace WHERE						nspname = \'public\')					)				AND a.attnum > 0 AND NOT a.attisdropped				ORDER BY a.attnum'		);		$fields = $this->loadObjectList();		if ($typeOnly)		{			foreach ($fields as $field)			{				$result[$field->column_name] = preg_replace("/[(0-9)]/", '', $field->type);			}		}		else		{			foreach ($fields as $field)			{				$result[$field->column_name] = $field;			}		}		/* Change Postgresql's NULL::* type with PHP's null one */		foreach ($fields as $field)		{			if (preg_match("/^NULL::*/", $field->Default))			{				$field->Default = null;			}		}		return $result;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		// To check if table exists and prevent SQL injection		$tableList = $this->getTableList();		if ( in_array($table, $tableList) )		{			// Get the details columns information.			$this->setQuery('					SELECT indexname AS "idxName", indisprimary AS "isPrimary", indisunique  AS "isUnique",						CASE WHEN indisprimary = true THEN							( SELECT \'ALTER TABLE \' || tablename || \' ADD \' || pg_catalog.pg_get_constraintdef(const.oid, true)								FROM pg_constraint AS const WHERE const.conname= pgClassFirst.relname )						ELSE pg_catalog.pg_get_indexdef(indexrelid, 0, true)						END AS "Query"					FROM pg_indexes					LEFT JOIN pg_class AS pgClassFirst ON indexname=pgClassFirst.relname					LEFT JOIN pg_index AS pgIndex ON pgClassFirst.oid=pgIndex.indexrelid					WHERE tablename=' . $this->quote($table) . ' ORDER BY indkey'			);			$keys = $this->loadObjectList();			return $keys;		}		return false;	}	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		$query = $this->getQuery(true)			->select('table_name')				->from('information_schema.tables')				->where('table_type=' . $this->quote('BASE TABLE'))				->where(					'table_schema NOT IN (' . $this->quote('pg_catalog') . ', ' . $this->quote('information_schema') . ')'				)				->order('table_name ASC');		$this->setQuery($query);		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the details list of sequences for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of sequences specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableSequences($table)	{		$this->connect();		// To check if table exists and prevent SQL injection		$tableList = $this->getTableList();		if ( in_array($table, $tableList) )		{			$name = array('s.relname', 'n.nspname', 't.relname', 'a.attname', 'info.data_type',							'info.minimum_value', 'info.maximum_value', 'info.increment', 'info.cycle_option');			$as = array('sequence', 'schema', 'table', 'column', 'data_type',							'minimum_value', 'maximum_value', 'increment', 'cycle_option');			if (version_compare($this->getVersion(), '9.1.0') >= 0)			{				$name[] .= 'info.start_value';				$as[] .= 'start_value';			}			// Get the details columns information.			$query = $this->getQuery(true)				->select($this->quoteName($name, $as))					->from('pg_class AS s')					->join('LEFT', "pg_depend d ON d.objid=s.oid AND d.classid='pg_class'::regclass AND d.refclassid='pg_class'::regclass")					->join('LEFT', 'pg_class t ON t.oid=d.refobjid')					->join('LEFT', 'pg_namespace n ON n.oid=t.relnamespace')					->join('LEFT', 'pg_attribute a ON a.attrelid=t.oid AND a.attnum=d.refobjsubid')					->join('LEFT', 'information_schema.sequences AS info ON info.sequence_name=s.relname')					->where("s.relkind='S' AND d.deptype='a' AND t.relname=" . $this->quote($table));			$this->setQuery($query);			$seq = $this->loadObjectList();			return $seq;		}		return false;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$version = pg_version($this->connection);		return $version['server'];	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 * To be called after the INSERT statement, it's MANDATORY to have a sequence on	 * every primary key table.	 *	 * To get the auto incremented value it's possible to call this function after	 * INSERT INTO query, or use INSERT INTO with RETURNING clause.	 *	 * @example with insertid() call:	 *		$query = $this->getQuery(true);	 *		$query->insert('jos_dbtest')	 *				->columns('title,start_date,description')	 *				->values("'testTitle2nd','1971-01-01','testDescription2nd'");	 *		$this->setQuery($query);	 *		$this->execute();	 *		$id = $this->insertid();	 *	 * @example with RETURNING clause:	 *		$query = $this->getQuery(true);	 *		$query->insert('jos_dbtest')	 *				->columns('title,start_date,description')	 *				->values("'testTitle2nd','1971-01-01','testDescription2nd'")	 *				->returning('id');	 *		$this->setQuery($query);	 *		$id = $this->loadResult();	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		$insertQuery = $this->getQuery(false, true);		$table = $insertQuery->__get('insert')->getElements();		/* find sequence column name */		$colNameQuery = $this->getQuery(true);		$colNameQuery->select('column_default')						->from('information_schema.columns')						->where(								"table_name=" . $this->quote(									$this->replacePrefix(str_replace('"', '', $table[0]))								), 'AND'						)						->where("column_default LIKE '%nextval%'");		$this->setQuery($colNameQuery);		$colName = $this->loadRow();		$changedColName = str_replace('nextval', 'currval', $colName);		$insertidQuery = $this->getQuery(true);		$insertidQuery->select($changedColName);		$this->setQuery($insertidQuery);		$insertVal = $this->loadRow();		return $insertVal[0];	}	/**	 * Locks a table in the database.	 *	 * @param   string  $tableName  The name of the table to unlock.	 *	 * @return  JDatabaseDriverPostgresql  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public function lockTable($tableName)	{		$this->transactionStart();		$this->setQuery('LOCK TABLE ' . $this->quoteName($tableName) . ' IN ACCESS EXCLUSIVE MODE')->execute();		return $this;	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function execute()	{		$this->connect();		if (!is_resource($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query .= ' LIMIT ' . $this->limit . ' OFFSET ' . $this->offset;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @pg_query($this->connection, $query);		// If an error occurred handle it.		if (!$this->cursor)		{			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					// Get the error number and message.					$this->errorNum = (int) pg_result_error_field($this->cursor, PGSQL_DIAG_SQLSTATE) . ' ';					$this->errorMsg = JText::_('JLIB_DATABASE_QUERY_FAILED') . "\n" . pg_last_error($this->connection) . "\nSQL=" . $query;					// Throw the normal query exception.					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				// Get the error number and message.				$this->errorNum = (int) pg_result_error_field($this->cursor, PGSQL_DIAG_SQLSTATE) . ' ';				$this->errorMsg = JText::_('JLIB_DATABASE_QUERY_FAILED') . "\n" . pg_last_error($this->connection) . "\nSQL=" . $query;				// Throw the normal query exception.				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg);			}		}		return $this->cursor;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by PostgreSQL.	 * @param   string  $prefix    Not used by PostgreSQL.	 *	 * @return  JDatabaseDriverPostgresql  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->connect();		// To check if table exists and prevent SQL injection		$tableList = $this->getTableList();		// Origin Table does not exist		if ( !in_array($oldTable, $tableList) )		{			// Origin Table not found			throw new RuntimeException('Table not found in Postgresql database.');		}		else		{			/* Rename indexes */			$this->setQuery(							'SELECT relname								FROM pg_class								WHERE oid IN (									SELECT indexrelid									FROM pg_index, pg_class									WHERE pg_class.relname=' . $this->quote($oldTable, true) . '									AND pg_class.oid=pg_index.indrelid );'			);			$oldIndexes = $this->loadColumn();			foreach ($oldIndexes as $oldIndex)			{				$changedIdxName = str_replace($oldTable, $newTable, $oldIndex);				$this->setQuery('ALTER INDEX ' . $this->escape($oldIndex) . ' RENAME TO ' . $this->escape($changedIdxName));				$this->execute();			}			/* Rename sequence */			$this->setQuery(							'SELECT relname								FROM pg_class								WHERE relkind = \'S\'								AND relnamespace IN (									SELECT oid									FROM pg_namespace									WHERE nspname NOT LIKE \'pg_%\'									AND nspname != \'information_schema\'								)								AND relname LIKE \'%' . $oldTable . '%\' ;'			);			$oldSequences = $this->loadColumn();			foreach ($oldSequences as $oldSequence)			{				$changedSequenceName = str_replace($oldTable, $newTable, $oldSequence);				$this->setQuery('ALTER SEQUENCE ' . $this->escape($oldSequence) . ' RENAME TO ' . $this->escape($changedSequenceName));				$this->execute();			}			/* Rename table */			$this->setQuery('ALTER TABLE ' . $this->escape($oldTable) . ' RENAME TO ' . $this->escape($newTable));			$this->execute();		}		return true;	}	/**	 * Selects the database, but redundant for PostgreSQL	 *	 * @param   string  $database  Database name to select.	 *	 * @return  boolean  Always true	 */	public function select($database)	{		return true;	}	/**	 * Custom settings for UTF support	 *	 * @return  int  Zero on success, -1 on failure	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return pg_set_client_encoding($this->connection, 'UTF8');	}	/**	 * This function return a field value as a prepared string to be used in a SQL statement.	 *	 * @param   array   $columns      Array of table's column returned by ::getTableColumns.	 * @param   string  $field_name   The table field's name.	 * @param   string  $field_value  The variable value to quote and return.	 *	 * @return  string  The quoted string.	 *	 * @since   11.3	 */	protected function sqlValue($columns, $field_name, $field_value)	{		switch ($columns[$field_name])		{			case 'boolean':				$val = 'NULL';				if ($field_value == 't')				{					$val = 'TRUE';				}				elseif ($field_value == 'f')				{					$val = 'FALSE';				}				break;			case 'bigint':			case 'bigserial':			case 'integer':			case 'money':			case 'numeric':			case 'real':			case 'smallint':			case 'serial':			case 'numeric,':				$val = strlen($field_value) == 0 ? 'NULL' : $field_value;				break;			case 'date':			case 'timestamp without time zone':				if (empty($field_value))				{					$field_value = $this->getNullDate();				}			default:				$val = $this->quote($field_value);				break;		}		return $val;	}	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		$this->setQuery('COMMIT');		$this->execute();	}	/**	 * Method to roll back a transaction.	 *	 * @param   string  $toSavepoint  If present rollback transaction to this savepoint	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionRollback($toSavepoint = null)	{		$this->connect();		$query = 'ROLLBACK';		if (!is_null($toSavepoint))		{			$query .= ' TO SAVEPOINT ' . $this->escape($toSavepoint);		}		$this->setQuery($query);		$this->execute();	}	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		$this->setQuery('START TRANSACTION');		$this->execute();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return pg_fetch_row($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return pg_fetch_assoc($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return pg_fetch_object(is_null($cursor) ? $this->cursor : $cursor, null, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		pg_free_result($cursor ? $cursor : $this->cursor);	}	/**	 * Inserts a row into a table based on an object's properties.	 *	 * @param   string  $table    The name of the database table to insert into.	 * @param   object  &$object  A reference to an object whose public properties match the table fields.	 * @param   string  $key      The name of the primary key. If provided the object property is updated.	 *	 * @return  boolean    True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function insertObject($table, &$object, $key = null)	{		$columns = $this->getTableColumns($table);		$fields = array();		$values = array();		// Iterate over the object variables to build the query fields and values.		foreach (get_object_vars($object) as $k => $v)		{			// Only process non-null scalars.			if (is_array($v) or is_object($v) or $v === null)			{				continue;			}			// Ignore any internal fields.			if ($k[0] == '_')			{				continue;			}			// Prepare and sanitize the fields and values for the database query.			$fields[] = $this->quoteName($k);			$values[] = $this->sqlValue($columns, $k, $v);		}		// Create the base insert statement.		$query = $this->getQuery(true)			->insert($this->quoteName($table))				->columns($fields)				->values(implode(',', $values));		$retVal = false;		if ($key)		{			$query->returning($key);			// Set the query and execute the insert.			$this->setQuery($query);			$id = $this->loadResult();			if ($id)			{				$object->$key = $id;				$retVal = true;			}		}		else		{			// Set the query and execute the insert.			$this->setQuery($query);			if ($this->execute())			{				$retVal = true;			}		}		return $retVal;	}	/**	 * Test to see if the PostgreSQL connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('pg_connect'));	}	/**	 * Returns an array containing database's table list.	 *	 * @return	array	The database's table list.	 */	public function showTables()	{		$this->connect();		$query = $this->getQuery(true)			->select('table_name')				->from('information_schema.tables')				->where('table_type=' . $this->quote('BASE TABLE'))				->where(					'table_schema NOT IN (' . $this->quote('pg_catalog') . ', ' . $this->quote('information_schema') . ' )'				);		$this->setQuery($query);		$tableList = $this->loadColumn();		return $tableList;	}	/**	 * Get the substring position inside a string	 *	 * @param   string  $substring  The string being sought	 * @param   string  $string     The string/column being searched	 *	 * @return int   The position of $substring in $string	 */	public function getStringPositionSQL( $substring, $string )	{		$this->connect();		$query = "SELECT POSITION( $substring IN $string )";		$this->setQuery($query);		$position = $this->loadRow();		return $position['position'];	}	/**	 * Generate a random value	 *	 * @return float The random generated number	 */	public function getRandom()	{		$this->connect();		$this->setQuery('SELECT RANDOM()');		$random = $this->loadAssoc();		return $random['random'];	}	/**	 * Return the query string to alter the database character set.	 *	 * @param   string  $dbName  The database name	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 */	protected function getAlterDbCharacterSet($dbName)	{		$query = 'ALTER DATABASE ' . $this->quoteName($dbName) . ' SET CLIENT_ENCODING TO ' . $this->quote('UTF8');		return $query;	}	/**	 * Return the query string to create new Database using PostgreSQL's syntax	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database, owned by $options['user']	 *	 * @since   12.2	 */	protected function getCreateDatabaseQuery($options, $utf)	{		$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name) . ' OWNER ' . $this->quoteName($options->db_user);		if ($utf)		{			$query .= ' ENCODING ' . $this->quote('UTF-8');		}		return $query;	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   12.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$query = trim($query);		$replacedQuery = '';		if ( strpos($query, '\'') )		{			// Sequence name quoted with ' ' but need to be replaced			if ( strpos($query, 'currval') )			{				$query = explode('currval', $query);				for ( $nIndex = 1; $nIndex < count($query); $nIndex = $nIndex + 2 )				{					$query[$nIndex] = str_replace($prefix, $this->tablePrefix, $query[$nIndex]);				}				$query = implode('currval', $query);			}			// Sequence name quoted with ' ' but need to be replaced			if ( strpos($query, 'nextval') )			{				$query = explode('nextval', $query);				for ( $nIndex = 1; $nIndex < count($query); $nIndex = $nIndex + 2 )				{					$query[$nIndex] = str_replace($prefix, $this->tablePrefix, $query[$nIndex]);				}				$query = implode('nextval', $query);			}			// Sequence name quoted with ' ' but need to be replaced			if ( strpos($query, 'setval') )			{				$query = explode('setval', $query);				for ( $nIndex = 1; $nIndex < count($query); $nIndex = $nIndex + 2 )				{					$query[$nIndex] = str_replace($prefix, $this->tablePrefix, $query[$nIndex]);				}				$query = implode('setval', $query);			}			$explodedQuery = explode('\'', $query);			for ( $nIndex = 0; $nIndex < count($explodedQuery); $nIndex = $nIndex + 2 )			{				if ( strpos($explodedQuery[$nIndex], $prefix) )				{					$explodedQuery[$nIndex] = str_replace($prefix, $this->tablePrefix, $explodedQuery[$nIndex]);				}			}			$replacedQuery = implode('\'', $explodedQuery);		}		else		{			$replacedQuery = str_replace($prefix, $this->tablePrefix, $query);		}		return $replacedQuery;	}	/**	 * Method to release a savepoint.	 *	 * @param   string  $savepointName  Savepoint's name to release	 *	 * @return  void	 *	 * @since   12.1	 */	public function releaseTransactionSavepoint( $savepointName )	{		$this->connect();		$this->setQuery('RELEASE SAVEPOINT ' . $this->escape($savepointName));		$this->execute();	}	/**	 * Method to create a savepoint.	 *	 * @param   string  $savepointName  Savepoint's name to create	 *	 * @return  void	 *	 * @since   12.1	 */	public function transactionSavepoint( $savepointName )	{		$this->connect();		$this->setQuery('SAVEPOINT ' . $this->escape($savepointName));		$this->execute();	}	/**	 * Unlocks tables in the database, this command does not exist in PostgreSQL,	 * it is automatically done on commit or rollback.	 *	 * @return  JDatabaseDriverPostgresql  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->transactionCommit();		return $this;	}	/**	 * Updates a row in a table based on an object's properties.	 *	 * @param   string   $table    The name of the database table to update.	 * @param   object   &$object  A reference to an object whose public properties match the table fields.	 * @param   string   $key      The name of the primary key.	 * @param   boolean  $nulls    True to update null fields or false to ignore them.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function updateObject($table, &$object, $key, $nulls = false)	{		$columns = $this->getTableColumns($table);		$fields = array();		$where = '';		// Create the base update statement.		$query = $this->getQuery(true)			->update($table);		$stmt = '%s WHERE %s';		// Iterate over the object variables to build the query fields/value pairs.		foreach (get_object_vars($object) as $k => $v)		{			// Only process scalars that are not internal fields.			if (is_array($v) or is_object($v) or $k[0] == '_')			{				continue;			}			// Set the primary key to the WHERE clause instead of a field to update.			if ($k == $key)			{				$key_val = $this->sqlValue($columns, $k, $v);				$where = $this->quoteName($k) . '=' . $key_val;				continue;			}			// Prepare and sanitize the fields and values for the database query.			if ($v === null)			{				// If the value is null and we want to update nulls then set it.				if ($nulls)				{					$val = 'NULL';				}				// If the value is null and we do not want to update nulls then ignore this field.				else				{					continue;				}			}			// The field is not null so we prep it for update.			else			{				$val = $this->sqlValue($columns, $k, $v);			}			// Add the field to be updated.			$fields[] = $this->quoteName($k) . '=' . $val;		}		// We don't have any fields to update.		if (empty($fields))		{			return true;		}		// Set the query and execute the update.		$query->set(sprintf($stmt, implode(",", $fields), $where));		$this->setQuery($query);		return $this->execute();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed factory class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedFactory{	/**	 * @var    array  The list of registered parser classes for feeds.	 * @since  12.3	 */	protected $parsers = array('rss' => 'JFeedParserRss', 'feed' => 'JFeedParserAtom');	/**	 * Method to load a URI into the feed reader for parsing.	 *	 * @param   string  $uri  The URI of the feed to load.	 *	 * @return  JFeedReader	 *	 * @since   12.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function getFeed($uri)	{		// Create the XMLReader object.		$reader = new XMLReader;		// Open the URI within the stream reader.		if (!$reader->open($uri, null, LIBXML_NOERROR | LIBXML_ERR_NONE | LIBXML_NOWARNING))		{			throw new RuntimeException('Unable to open the feed.');		}		try		{			// Skip ahead to the root node.			do			{				$reader->read();			}			while ($reader->nodeType !== XMLReader::ELEMENT);		}		catch (Exception $e)		{			throw new RuntimeException('Error reading feed.');		}		// Setup the appopriate feed parser for the feed.		$parser = $this->_fetchFeedParser($reader->name, $reader);		return $parser->parse();	}	/**	 * Method to register a JFeedParser class for a given root tag name.	 *	 * @param   string   $tagName    The root tag name for which to register the parser class.	 * @param   string   $className  The JFeedParser class name to register for a root tag name.	 * @param   boolean  $overwrite  True to overwrite the parser class if one is already registered.	 *	 * @return  JFeedFactory	 *	 * @since   12.3	 * @throws  InvalidArgumentException	 */	public function registerParser($tagName, $className, $overwrite = false)	{		// Verify that the class exists.		if (!class_exists($className))		{			throw new InvalidArgumentException('The feed parser class ' . $className . ' does not exist.');		}		// Validate that the tag name is valid.		if (!preg_match('/\A(?!XML)[a-z][\w0-9-]*/i', $tagName))		{			throw new InvalidArgumentException('The tag name ' . $tagName . ' is not valid.');		}		// Register the given parser class for the tag name if nothing registered or the overwrite flag set.		if (empty($this->parsers[$tagName]) || (bool) $overwrite)		{			$this->parsers[(string) $tagName] = (string) $className;		}		return $this;	}	/**	 * Method to return a new JFeedParser object based on the registered parsers and a given type.	 *	 * @param   string     $type    The name of parser to return.	 * @param   XMLReader  $reader  The XMLReader instance for the feed.	 *	 * @return  JFeedParser	 *	 * @since   12.3	 * @throws  LogicException	 */	private function _fetchFeedParser($type, XMLReader $reader)	{		// Look for a registered parser for the feed type.		if (empty($this->parsers[$type]))		{			throw new LogicException('No registered feed parser for type ' . $type . '.');		}		return new $this->parsers[$type]($reader);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Controller * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  If true, the view output will be cached	 * @param   array    An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController  This object to support chaining.	 *	 * @since   3.1	 */	public function display($cachable = true, $urlparams = false)	{		$user		= JFactory::getUser();		// Set the default view name and format from the Request.		$id = $this->input->getObject('id');		$id = (array) $id;		$vName = $this->input->get('view', 'tags');		$this->input->set('view', $vName);		if ($user->get('id') ||($this->input->getMethod() == 'POST' && $vName = 'tags'))		{			$cachable = false;		}		$safeurlparams = array(			'id'				=> 'ARRAY',			'type'				=> 'ARRAY',			'limit'				=> 'UINT',			'limitstart'		=> 'UINT',			'filter_order'		=> 'CMD',			'filter_order_Dir'	=> 'CMD',			'lang'				=> 'CMD'		);		return parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			JError::raiseError(404, JText::_('COM_CONTENT_ERROR_CATEGORY_NOT_FOUND'));			return false;		}		if ($parent == false)		{			JError::raiseError(404, JText::_('COM_CONTENT_ERROR_PARENT_CATEGORY_NOT_FOUND'));			return false;		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items  = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');// Import the com_menus helper.require_once realpath(JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Supports an HTML grouped select list of menu item grouped by menu * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldMenuitem extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'MenuItem';	/**	 * Method to get the field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   1.6	 */	protected function getGroups()	{		$groups = array();		// Initialize some field attributes.		$menuType = (string) $this->element['menu_type'];		$published = $this->element['published'] ? explode(',', (string) $this->element['published']) : array();		$disable = $this->element['disable'] ? explode(',', (string) $this->element['disable']) : array();		$language = $this->element['language'] ? explode(',', (string) $this->element['language']) : array();		// Get the menu items.		$items = MenusHelper::getMenuLinks($menuType, 0, 0, $published, $language);		// Build group for a specific menu type.		if ($menuType)		{			// Initialize the group.			$groups[$menuType] = array();			// Build the options array.			foreach ($items as $link)			{				$groups[$menuType][] = JHtml::_('select.option', $link->value, $link->text, 'value', 'text', in_array($link->type, $disable));			}		}		// Build groups for all menu types.		else		{			// Build the groups arrays.			foreach ($items as $menu)			{				// Initialize the group.				$groups[$menu->menutype] = array();				// Build the options array.				foreach ($menu->links as $link)				{					$groups[$menu->menutype][] = JHtml::_(						'select.option', $link->value, $link->text, 'value', 'text',						in_array($link->type, $disable)					);				}			}		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Error * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// Error Definition: Illegal Optionsconst JERROR_ILLEGAL_OPTIONS = 1;// Error Definition: Callback does not existconst JERROR_CALLBACK_NOT_CALLABLE = 2;// Error Definition: Illegal Handlerconst JERROR_ILLEGAL_MODE = 3;/** * Error Handling Class * * This class is inspired in design and concept by patErrorManager <http://www.php-tools.net> * * patErrorManager contributors include: * - gERD Schaufelberger	<gerd@php-tools.net> * - Sebastian Mordziol	<argh@php-tools.net> * - Stephan Schmidt		<scst@php-tools.net> * * @package     Joomla.Legacy * @subpackage  Error * @since       11.1 * @deprecated  12.1   Use PHP Exception */abstract class JError{	/**	 * Legacy error handling marker	 *	 * @var    boolean  True to enable legacy error handling using JError, false to use exception handling.  This flag	 *                  is present to allow an easy transition into exception handling for code written against the	 *                  existing JError API in Joomla.	 * @since  11.1	 */	public static $legacy = false;	/**	 * Array of message levels	 *	 * @var    array	 * @since  11.1	 */	protected static $levels = array(E_NOTICE => 'Notice', E_WARNING => 'Warning', E_ERROR => 'Error');	protected static $handlers = array(		E_NOTICE => array('mode' => 'ignore'),		E_WARNING => array('mode' => 'ignore'),		E_ERROR => array('mode' => 'ignore')	);	protected static $stack = array();	/**	 * Method to determine if a value is an exception object.	 *	 * @param   mixed  $object  Object to check.	 *	 * @return  boolean  True if argument is an exception, false otherwise.	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function isError($object)	{		JLog::add('JError::isError() is deprecated.', JLog::WARNING, 'deprecated');		return $object instanceof Exception;	}	/**	 * Method for retrieving the last exception object in the error stack	 *	 * @param   boolean  $unset  True to remove the error from the stack.	 *	 * @return  mixed  Last exception object in the error stack or boolean false if none exist	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function getError($unset = false)	{		JLog::add('JError::getError() is deprecated.', JLog::WARNING, 'deprecated');		if (!isset(self::$stack[0]))		{			return false;		}		if ($unset)		{			$error = array_shift(self::$stack);		}		else		{			$error = &self::$stack[0];		}		return $error;	}	/**	 * Method for retrieving the exception stack	 *	 * @return  array  Chronological array of errors that have been stored during script execution	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function getErrors()	{		JLog::add('JError::getErrors() is deprecated.', JLog::WARNING, 'deprecated');		return self::$stack;	}	/**	 * Method to add non-JError thrown JExceptions to the JError stack for debugging purposes	 *	 * @param   JException  &$e  Add an exception to the stack.	 *	 * @return  void	 *	 * @since       11.1	 * @deprecated  12.1	 */	public static function addToStack(JException &$e)	{		JLog::add('JError::addToStack() is deprecated.', JLog::WARNING, 'deprecated');		self::$stack[] = &$e;	}	/**	 * Create a new JException object given the passed arguments	 *	 * @param   integer  $level      The error level - use any of PHP's own error levels for	 *                               this: E_ERROR, E_WARNING, E_NOTICE, E_USER_ERROR,	 *                               E_USER_WARNING, E_USER_NOTICE.	 * @param   string   $code       The application-internal error code for this error	 * @param   string   $msg        The error message, which may also be shown the user if need be.	 * @param   mixed    $info       Optional: Additional error information (usually only	 *                               developer-relevant information that the user should never see,	 *                               like a database DSN).	 * @param   boolean  $backtrace  Add a stack backtrace to the exception.	 *	 * @return  mixed    The JException object	 *	 * @since       11.1	 * @deprecated  12.1  Use PHP Exception	 * @see         JException	 */	public static function raise($level, $code, $msg, $info = null, $backtrace = false)	{		JLog::add('JError::raise() is deprecated.', JLog::WARNING, 'deprecated');		// Build error object		$exception = new JException($msg, $code, $level, $info, $backtrace);		return self::throwError($exception);	}	/**	 * Throw an error	 *	 * @param   object  &$exception  An exception to throw.	 *	 * @return  reference	 *	 * @deprecated  12.1  Use PHP Exception	 * @see     JException	 * @since   11.1	 */	public static function throwError(&$exception)	{		JLog::add('JError::throwError() is deprecated.', JLog::WARNING, 'deprecated');		static $thrown = false;		// If thrown is hit again, we've come back to JError in the middle of throwing another JError, so die!		if ($thrown)		{			self::handleEcho($exception, array());			// Inifite loop.			jexit();		}		$thrown = true;		$level = $exception->get('level');		// See what to do with this kind of error		$handler = self::getErrorHandling($level);		$function = 'handle' . ucfirst($handler['mode']);		if (is_callable(array('JError', $function)))		{			$reference = call_user_func_array(array('JError', $function), array(&$exception, (isset($handler['options'])) ? $handler['options'] : array()));		}		else		{			// This is required to prevent a very unhelpful white-screen-of-death			jexit(				'JError::raise -> Static method JError::' . $function . ' does not exist. Contact a developer to debug' .				'<br /><strong>Error was</strong> <br />' . $exception->getMessage()			);		}		// We don't need to store the error, since JException already does that for us!		// Remove loop check		$thrown = false;		return $reference;	}	/**	 * Wrapper method for the raise() method with predefined error level of E_ERROR and backtrace set to true.	 *	 * @param   string  $code  The application-internal error code for this error	 * @param   string  $msg   The error message, which may also be shown the user if need be.	 * @param   mixed   $info  Optional: Additional error information (usually only	 *                         developer-relevant information that the user should	 *                         never see, like a database DSN).	 *	 * @return  object  $error  The configured JError object	 *	 * @deprecated   12.1       Use PHP Exception	 * @see        raise()	 * @since   11.1	 */	public static function raiseError($code, $msg, $info = null)	{		JLog::add('JError::raiseError() is deprecated.', JLog::WARNING, 'deprecated');		return self::raise(E_ERROR, $code, $msg, $info, true);	}	/**	 * Wrapper method for the {@link raise()} method with predefined error level of E_WARNING and	 * backtrace set to false.	 *	 * @param   string  $code  The application-internal error code for this error	 * @param   string  $msg   The error message, which may also be shown the user if need be.	 * @param   mixed   $info  Optional: Additional error information (usually only	 *                         developer-relevant information that	 *                         the user should never see, like a database DSN).	 *	 * @return  object  The configured JError object	 *	 * @deprecated  12.1  Use PHP Exception	 * @see        JError	 * @see        raise()	 * @since      11.1	 */	public static function raiseWarning($code, $msg, $info = null)	{		JLog::add('JError::raiseWarning() is deprecated.', JLog::WARNING, 'deprecated');		return self::raise(E_WARNING, $code, $msg, $info);	}	/**	 * Wrapper method for the {@link raise()} method with predefined error	 * level of E_NOTICE and backtrace set to false.	 *	 * @param   string  $code  The application-internal error code for this error	 * @param   string  $msg   The error message, which may also be shown the user if need be.	 * @param   mixed   $info  Optional: Additional error information (usually only	 *                         developer-relevant information that the user	 *                         should never see, like a database DSN).	 *	 * @return  object   The configured JError object	 *	 * @deprecated       12.1   Use PHP Exception	 * @see     raise()	 * @since   11.1	 */	public static function raiseNotice($code, $msg, $info = null)	{		JLog::add('JError::raiseNotice() is deprecated.', JLog::WARNING, 'deprecated');		return self::raise(E_NOTICE, $code, $msg, $info);	}	/**	 * Method to get the current error handler settings for a specified error level.	 *	 * @param   integer  $level  The error level to retrieve. This can be any of PHP's	 *                           own error levels, e.g. E_ALL, E_NOTICE...	 *	 * @return  array    All error handling details	 *	 * @deprecated   12.1  Use PHP Exception	 * @since   11.1	 */	public static function getErrorHandling($level)	{		JLog::add('JError::getErrorHandling() is deprecated.', JLog::WARNING, 'deprecated');		return self::$handlers[$level];	}	/**	 * Method to set the way the JError will handle different error levels. Use this if you want to override the default settings.	 *	 * Error handling modes:	 * - ignore	 * - echo	 * - verbose	 * - die	 * - message	 * - log	 * - callback	 *	 * You may also set the error handling for several modes at once using PHP's bit operations.	 * Examples:	 * - E_ALL = Set the handling for all levels	 * - E_ERROR | E_WARNING = Set the handling for errors and warnings	 * - E_ALL ^ E_ERROR = Set the handling for all levels except errors	 *	 * @param   integer  $level    The error level for which to set the error handling	 * @param   string   $mode     The mode to use for the error handling.	 * @param   mixed    $options  Optional: Any options needed for the given mode.	 *	 * @return  mixed  True on success or a JException object if failed.	 *	 * @deprecated  12.1  Use PHP Exception	 * @since   11.1	 */	public static function setErrorHandling($level, $mode, $options = null)	{		JLog::add('JError::setErrorHandling() is deprecated.', JLog::WARNING, 'deprecated');		$levels = self::$levels;		$function = 'handle' . ucfirst($mode);		if (!is_callable(array('JError', $function)))		{			return self::raiseError(E_ERROR, 'JError:' . JERROR_ILLEGAL_MODE, 'Error Handling mode is not known', 'Mode: ' . $mode . ' is not implemented.');		}		foreach ($levels as $eLevel => $eTitle)		{			if (($level & $eLevel) != $eLevel)			{				continue;			}			// Set callback options			if ($mode == 'callback')			{				if (!is_array($options))				{					return self::raiseError(E_ERROR, 'JError:' . JERROR_ILLEGAL_OPTIONS, 'Options for callback not valid');				}				if (!is_callable($options))				{					$tmp = array('GLOBAL');					if (is_array($options))					{						$tmp[0] = $options[0];						$tmp[1] = $options[1];					}					else					{						$tmp[1] = $options;					}					return self::raiseError(						E_ERROR,						'JError:' . JERROR_CALLBACK_NOT_CALLABLE,						'Function is not callable',						'Function:' . $tmp[1] . ' scope ' . $tmp[0] . '.'					);				}			}			// Save settings			self::$handlers[$eLevel] = array('mode' => $mode);			if ($options != null)			{				self::$handlers[$eLevel]['options'] = $options;			}		}		return true;	}	/**	 * Method that attaches the error handler to JError	 *	 * @return  void	 *	 * @deprecated  12.1	 * @see     set_error_handler	 * @since   11.1	 */	public static function attachHandler()	{		JLog::add('JError::getErrorHandling() is deprecated.', JLog::WARNING, 'deprecated');		set_error_handler(array('JError', 'customErrorHandler'));	}	/**	 * Method that detaches the error handler from JError	 *	 * @return  void	 *	 * @deprecated  12.1	 * @see     restore_error_handler	 * @since   11.1	 */	public static function detachHandler()	{		JLog::add('JError::detachHandler() is deprecated.', JLog::WARNING, 'deprecated');		restore_error_handler();	}	/**	 * Method to register a new error level for handling errors	 *	 * This allows you to add custom error levels to the built-in	 * - E_NOTICE	 * - E_WARNING	 * - E_NOTICE	 *	 * @param   integer  $level    Error level to register	 * @param   string   $name     Human readable name for the error level	 * @param   string   $handler  Error handler to set for the new error level [optional]	 *	 * @return  boolean  True on success; false if the level already has been registered	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function registerErrorLevel($level, $name, $handler = 'ignore')	{		JLog::add('JError::registerErrorLevel() is deprecated.', JLog::WARNING, 'deprecated');		if (isset(self::$levels[$level]))		{			return false;		}		self::$levels[$level] = $name;		self::setErrorHandling($level, $handler);		return true;	}	/**	 * Translate an error level integer to a human readable string	 * e.g. E_ERROR will be translated to 'Error'	 *	 * @param   integer  $level  Error level to translate	 *	 * @return  mixed  Human readable error level name or boolean false if it doesn't exist	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function translateErrorLevel($level)	{		JLog::add('JError::translateErrorLevel() is deprecated.', JLog::WARNING, 'deprecated');		if (isset(self::$levels[$level]))		{			return self::$levels[$level];		}		return false;	}	/**	 * Ignore error handler	 * - Ignores the error	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object   The exception object	 *	 * @deprecated  12.1	 * @see     raise()	 * @since   11.1	 */	public static function handleIgnore(&$error, $options)	{		JLog::add('JError::handleIgnore() is deprecated.', JLog::WARNING, 'deprecated');		return $error;	}	/**	 * Echo error handler	 * - Echos the error message to output	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleEcho(&$error, $options)	{		JLog::add('JError::handleEcho() is deprecated.', JLog::WARNING, 'deprecated');		$level_human = self::translateErrorLevel($error->get('level'));		// If system debug is set, then output some more information.		if (defined('JDEBUG'))		{			$backtrace = $error->getTrace();			$trace = '';			for ($i = count($backtrace) - 1; $i >= 0; $i--)			{				if (isset($backtrace[$i]['class']))				{					$trace .= sprintf("\n%s %s %s()", $backtrace[$i]['class'], $backtrace[$i]['type'], $backtrace[$i]['function']);				}				else				{					$trace .= sprintf("\n%s()", $backtrace[$i]['function']);				}				if (isset($backtrace[$i]['file']))				{					$trace .= sprintf(' @ %s:%d', $backtrace[$i]['file'], $backtrace[$i]['line']);				}			}		}		if (isset($_SERVER['HTTP_HOST']))		{			// Output as html			echo "<br /><b>jos-$level_human</b>: "				. $error->get('message') . "<br />\n"				. (defined('JDEBUG') ? nl2br($trace) : '');		}		else		{			// Output as simple text			if (defined('STDERR'))			{				fwrite(STDERR, "J$level_human: " . $error->get('message') . "\n");				if (defined('JDEBUG'))				{					fwrite(STDERR, $trace);				}			}			else			{				echo "J$level_human: " . $error->get('message') . "\n";				if (defined('JDEBUG'))				{					echo $trace;				}			}		}		return $error;	}	/**	 * Verbose error handler	 * - Echos the error message to output as well as related info	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleVerbose(&$error, $options)	{		JLog::add('JError::handleVerbose() is deprecated.', JLog::WARNING, 'deprecated');		$level_human = self::translateErrorLevel($error->get('level'));		$info = $error->get('info');		if (isset($_SERVER['HTTP_HOST']))		{			// Output as html			echo "<br /><b>J$level_human</b>: " . $error->get('message') . "<br />\n";			if ($info != null)			{				echo "&#160;&#160;&#160;" . $info . "<br />\n";			}			echo $error->getBacktrace(true);		}		else		{			// Output as simple text			echo "J$level_human: " . $error->get('message') . "\n";			if ($info != null)			{				echo "\t" . $info . "\n";			}		}		return $error;	}	/**	 * Die error handler	 * - Echos the error message to output and then dies	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleDie(&$error, $options)	{		JLog::add('JError::handleDie() is deprecated.', JLog::WARNING, 'deprecated');		$level_human = self::translateErrorLevel($error->get('level'));		if (isset($_SERVER['HTTP_HOST']))		{			// Output as html			jexit("<br /><b>J$level_human</b>: " . $error->get('message') . "<br />\n");		}		else		{			// Output as simple text			if (defined('STDERR'))			{				fwrite(STDERR, "J$level_human: " . $error->get('message') . "\n");				jexit();			}			else			{				jexit("J$level_human: " . $error->get('message') . "\n");			}		}		return $error;	}	/**	 * Message error handler	 * Enqueues the error message into the system queue	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleMessage(&$error, $options)	{		JLog::add('JError::hanleMessage() is deprecated.', JLog::WARNING, 'deprecated');		$appl = JFactory::getApplication();		$type = ($error->get('level') == E_NOTICE) ? 'notice' : 'error';		$appl->enqueueMessage($error->get('message'), $type);		return $error;	}	/**	 * Log error handler	 * Logs the error message to a system log file	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleLog(&$error, $options)	{		JLog::add('JError::handleLog() is deprecated.', JLog::WARNING, 'deprecated');		static $log;		if ($log == null)		{			$options['text_file'] = date('Y-m-d') . '.error.log';			$options['format'] = "{DATE}\t{TIME}\t{LEVEL}\t{CODE}\t{MESSAGE}";			JLog::addLogger($options, JLog::ALL, array('error'));		}		$entry = new JLogEntry(			str_replace(array("\r", "\n"), array('', '\\n'), $error->get('message')),			$error->get('level'),			'error'		);		$entry->code = $error->get('code');		JLog::add($entry);		return $error;	}	/**	 * Callback error handler	 * - Send the error object to a callback method for error handling	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleCallback(&$error, $options)	{		JLog::add('JError::handleCallback() is deprecated.', JLog::WARNING, 'deprecated');		return call_user_func($options, $error);	}	/**	 * Display a custom error page and exit gracefully	 *	 * @param   object  &$error  Exception object	 *	 * @return  void	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function customErrorPage(&$error)	{		JLog::add('JError::customErrorPage() is deprecated.', JLog::WARNING, 'deprecated');		$app = JFactory::getApplication();		$document = JDocument::getInstance('error');		if ($document)		{			$config = JFactory::getConfig();			// Get the current template from the application			$template = $app->getTemplate();			// Push the error object into the document			$document->setError($error);			@ob_end_clean();			$document->setTitle(JText::_('Error') . ': ' . $error->get('code'));			$data = $document->render(false, array('template' => $template, 'directory' => JPATH_THEMES, 'debug' => $config->get('debug')));			// Failsafe to get the error displayed.			if (empty($data))			{				self::handleEcho($error, array());			}			else			{				// Do not allow cache				JResponse::allowCache(false);				JResponse::setBody($data);				echo JResponse::toString();			}		}		else		{			// Just echo the error since there is no document			// This is a common use case for Command Line Interface applications.			self::handleEcho($error, array());		}		$app->close(0);	}	/**	 * Display a message to the user	 *	 * @param   integer  $level  The error level - use any of PHP's own error levels	 *                   for this: E_ERROR, E_WARNING, E_NOTICE, E_USER_ERROR,	 *                   E_USER_WARNING, E_USER_NOTICE.	 * @param   string   $msg    Error message, shown to user if need be.	 *	 * @return  void	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function customErrorHandler($level, $msg)	{		JLog::add('JError::customErrorHandler() is deprecated.', JLog::WARNING, 'deprecated');		self::raise($level, '', $msg);	}	/**	 * Render the backtrace	 *	 * @param   integer  $error  The error	 *	 * @return  string  Contents of the backtrace	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function renderBacktrace($error)	{		JLog::add('JError::renderBacktrace() is deprecated.', JLog::WARNING, 'deprecated');		$contents = null;		$backtrace = $error->getTrace();		if (is_array($backtrace))		{			ob_start();			$j = 1;			echo '<table cellpadding="0" cellspacing="0" class="Table">';			echo '		<tr>';			echo '				<td colspan="3" class="TD"><strong>Call stack</strong></td>';			echo '		</tr>';			echo '		<tr>';			echo '				<td class="TD"><strong>#</strong></td>';			echo '				<td class="TD"><strong>Function</strong></td>';			echo '				<td class="TD"><strong>Location</strong></td>';			echo '		</tr>';			for ($i = count($backtrace) - 1; $i >= 0; $i--)			{				echo '		<tr>';				echo '				<td class="TD">' . $j . '</td>';				if (isset($backtrace[$i]['class']))				{					echo '		<td class="TD">' . $backtrace[$i]['class'] . $backtrace[$i]['type'] . $backtrace[$i]['function'] . '()</td>';				}				else				{					echo '		<td class="TD">' . $backtrace[$i]['function'] . '()</td>';				}				if (isset($backtrace[$i]['file']))				{					echo '				<td class="TD">' . $backtrace[$i]['file'] . ':' . $backtrace[$i]['line'] . '</td>';				}				else				{					echo '				<td class="TD">&#160;</td>';				}				echo '		</tr>';				$j++;			}			echo '</table>';			$contents = ob_get_contents();			ob_end_clean();		}		return $contents;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving a category, the articles associated with the category, * sibling, child and parent categories. * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelCategory extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * Model context string.	 *	 * @var		string	 */	protected $_context = 'com_content.category';	/**	 * The category that applies.	 *	 * @access	protected	 * @var		object	 */	protected $_category = null;	/**	 * The list of other newfeed categories.	 *	 * @access	protected	 * @var		array	 */	protected $_categories = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'state', 'a.state',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'modified', 'a.modified',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'hits', 'a.hits',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'author', 'a.author'			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * return	void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('site');		$pk  = $app->input->getInt('id');		$this->setState('category.id', $pk);		// Load the parameters. Merge Global and Menu Item params into new object		$params = $app->getParams();		$menuParams = new JRegistry;		if ($menu = $app->getMenu()->getActive())		{			$menuParams->loadString($menu->params);		}		$mergedParams = clone $menuParams;		$mergedParams->merge($params);		$this->setState('params', $mergedParams);		$user		= JFactory::getUser();				// Create a new query object.		$db		= $this->getDbo();		$query	= $db->getQuery(true);		$groups	= implode(',', $user->getAuthorisedViewLevels());		if ((!$user->authorise('core.edit.state', 'com_content')) &&  (!$user->authorise('core.edit', 'com_content'))){			// limit to published for people who can't edit or edit.state.			$this->setState('filter.published', 1);			// Filter by start and end dates.			$nullDate = $db->quote($db->getNullDate());			$nowDate = $db->quote(JFactory::getDate()->toSQL());			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		}		else		{			$this->setState('filter.published', array(0, 1, 2));		}		// process show_noauth parameter		if (!$params->get('show_noauth'))		{			$this->setState('filter.access', true);		}		else		{			$this->setState('filter.access', false);		}		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		// filter.order		$itemid = $app->input->get('id', 0, 'int') . ':' . $app->input->get('Itemid', 0, 'int');		$orderCol = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'a.ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order_Dir',			'filter_order_Dir', '', 'cmd');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$this->setState('list.start', $app->input->get('limitstart', 0, 'uint'));		// set limit for query. If list, use parameter. If blog, add blog parameters for limit.		if (($app->input->get('layout') == 'blog') || $params->get('layout_type') == 'blog')		{			$limit = $params->get('num_leading_articles') + $params->get('num_intro_articles') + $params->get('num_links');			$this->setState('list.links', $params->get('num_links'));		}		else		{			$limit = $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.limit', 'limit', $params->get('display_num'), 'uint');		}		$this->setState('list.limit', $limit);		// set the depth of the category query based on parameter		$showSubcategories = $params->get('show_subcategory_content', '0');		if ($showSubcategories)		{			$this->setState('filter.max_category_levels', $params->get('show_subcategory_content', '1'));			$this->setState('filter.subcategories', true);		}		$this->setState('filter.language', JLanguageMultilang::isEnabled());		$this->setState('layout', $app->input->get('layout'));	}	/**	 * Get the articles in the category	 *	 * @return  mixed  An array of articles or false if an error occurs.	 * @since   1.5	 */	function getItems()	{		$params = $this->getState()->get('params');		$limit = $this->getState('list.limit');		if ($this->_articles === null && $category = $this->getCategory())		{			$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));			$model->setState('params', JFactory::getApplication()->getParams());			$model->setState('filter.category_id', $category->id);			$model->setState('filter.published', $this->getState('filter.published'));			$model->setState('filter.access', $this->getState('filter.access'));			$model->setState('filter.language', $this->getState('filter.language'));			$model->setState('list.ordering', $this->_buildContentOrderBy());			$model->setState('list.start', $this->getState('list.start'));			$model->setState('list.limit', $limit);			$model->setState('list.direction', $this->getState('list.direction'));			$model->setState('list.filter', $this->getState('list.filter'));			// filter.subcategories indicates whether to include articles from subcategories in the list or blog			$model->setState('filter.subcategories', $this->getState('filter.subcategories'));			$model->setState('filter.max_category_levels', $this->setState('filter.max_category_levels'));			$model->setState('list.links', $this->getState('list.links'));			if ($limit >= 0)			{				$this->_articles = $model->getItems();				if ($this->_articles === false)				{					$this->setError($model->getError());				}			}			else			{				$this->_articles = array();			}			$this->_pagination = $model->getPagination();		}		return $this->_articles;	}	/**	 * Build the orderby for the query	 *	 * @return  string	$orderby portion of query	 * @since   1.5	 */	protected function _buildContentOrderBy()	{		$app		= JFactory::getApplication('site');		$db			= $this->getDbo();		$params		= $this->state->params;		$itemid		= $app->input->get('id', 0, 'int') . ':' . $app->input->get('Itemid', 0, 'int');		$orderCol	= $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');		$orderDirn	= $app->getUserStateFromRequest('com_content.category.list.' . $itemid . '.filter_order_Dir', 'filter_order_Dir', '', 'cmd');		$orderby	= ' ';		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = null;		}		if (!in_array(strtoupper($orderDirn), array('ASC', 'DESC', '')))		{			$orderDirn = 'ASC';		}		if ($orderCol && $orderDirn)		{			$orderby .= $db->escape($orderCol) . ' ' . $db->escape($orderDirn) . ', ';		}		$articleOrderby		= $params->get('orderby_sec', 'rdate');		$articleOrderDate	= $params->get('order_date');		$categoryOrderby	= $params->def('orderby_pri', '');		$secondary			= ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';		$primary			= ContentHelperQuery::orderbyPrimary($categoryOrderby);		$orderby .= $primary . ' ' . $secondary . ' a.created ';		return $orderby;	}	public function getPagination()	{		if (empty($this->_pagination))		{			return null;		}		return $this->_pagination;	}	/**	 * Method to get category data for the current category	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   1.5	 */	public function getCategory()	{		if (!is_object($this->_item))		{			if ( isset( $this->state->params ) )			{				$params = $this->state->params;				$options = array();				$options['countItems'] = $params->get('show_cat_num_articles', 1) || !$params->get('show_empty_categories_cat', 0);			}			else {				$options['countItems'] = 0;			}			$categories = JCategories::getInstance('Content', $options);			$this->_item = $categories->get($this->getState('category.id', 'root'));			// Compute selected asset permissions.			if (is_object($this->_item))			{				$user	= JFactory::getUser();				$userId	= $user->get('id');				$asset	= 'com_content.category.'.$this->_item->id;				// Check general create permission.				if ($user->authorise('core.create', $asset))				{					$this->_item->getParams()->set('access-create', true);				}				// TODO: Why aren't we lazy loading the children and siblings?				$this->_children = $this->_item->getChildren();				$this->_parent = false;				if ($this->_item->getParent())				{					$this->_parent = $this->_item->getParent();				}				$this->_rightsibling = $this->_item->getSibling();				$this->_leftsibling = $this->_item->getSibling(false);			}			else {				$this->_children = false;				$this->_parent = false;			}		}		return $this->_item;	}	/**	 * Get the parent category.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	public function getParent()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_parent;	}	/**	 * Get the left sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	function &getLeftSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_leftsibling;	}	/**	 * Get the right sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	function &getRightSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_rightsibling;	}	/**	 * Get the child categories.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 * @since   1.6	 */	function &getChildren()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		// Order subcategories		if (count($this->_children))		{			$params = $this->getState()->get('params');			if ($params->get('orderby_pri') == 'alpha' || $params->get('orderby_pri') == 'ralpha')			{				jimport('joomla.utilities.arrayhelper');				JArrayHelper::sortObjects($this->_children, 'title', ($params->get('orderby_pri') == 'alpha') ? 1 : -1);			}		}		return $this->_children;	}	/**	 * Increment the hit counter for the category.	 *	 * @param   int  $pk  Optional primary key of the category to increment.	 *	 * @return  boolean True if successful; false otherwise and internal error set.	 */	public function hit($pk = 0)	{		// Initialise variables.		$pk = (!empty($pk)) ? $pk : (int) $this->getState('category.id');		$db = $this->getDbo();		$query = $db->getQuery(true)			->update('#__categories')			->set('hits = hits + 1')			->where('id = ' . (int) $pk);		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');$user = JFactory::getUser();$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>		<tr>			<td>				<a class="img-preview" href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>"><?php echo JHtml::_('image', COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_16, 'height' => $this->_tmp_img->height_16)); ?></a>			</td>			<td class="description">				<a href="<?php echo  COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" rel="preview"><?php echo $this->escape($this->_tmp_img->title); ?></a>			</td>			<td class="dimensions">				<?php echo JText::sprintf('COM_MEDIA_IMAGE_DIMENSIONS', $this->_tmp_img->width, $this->_tmp_img->height); ?>			</td>			<td class="filesize">				<?php echo JHtml::_('number.bytes', $this->_tmp_img->size); ?>			</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>				<a class="delete-item" target="_top" href="index.php?option=com_media&amp;task=file.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_img->name; ?>" rel="<?php echo $this->_tmp_img->name; ?>"><i class="icon-remove hasTooltip" title="<?php echo JText::_('JACTION_DELETE');?>"></i></a>				<input type="checkbox" name="rm[]" value="<?php echo $this->_tmp_img->name; ?>" />			</td>		<?php endif;?>		</tr><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Route Helper * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */abstract class NewsfeedsHelperRoute{	protected static $lookup;	/**	 * @param   integer  The route of the newsfeed	 */	public static function getNewsfeedRoute($id, $catid, $language = 0)	{		$needles = array(			'newsfeed'  => array((int) $id)		);		//Create the link		$link = 'index.php?option=com_newsfeeds&view=newsfeed&id='. $id;		if ((int) $catid > 1)		{			$categories = JCategories::getInstance('Newsfeeds');			$category = $categories->get((int) $catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$needles['category'] = array_reverse($category->getPath());				$needles['categories'] = $needles['category'];				$link .= '&catid='.$catid;			}		}		if ($language && $language != "*" && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang='.$lang->sef;					$needles['language'] = $language;				}			}		}		if ($item = self::_findItem($needles))		{			$link .= '&Itemid='.$item;		}		elseif ($item = self::_findItem())		{			$link .= '&Itemid='.$item;		}		return $link;	}	public static function getCategoryRoute($catid, $language = 0)	{		if ($catid instanceof JCategoryNode)		{			$id = $catid->id;			$category = $catid;		}		else		{			$id = (int) $catid;			$category = JCategories::getInstance('Newsfeeds')->get($id);		}		if ($id < 1)		{			$link = '';		}		else		{			//Create the link			$link = 'index.php?option=com_newsfeeds&view=category&id='.$id;			$needles = array(				'category' => array($id)			);			if ($language && $language != "*" && JLanguageMultilang::isEnabled())			{				$db		= JFactory::getDbo();				$query	= $db->getQuery(true)					->select('a.sef AS sef')					->select('a.lang_code AS lang_code')					->from('#__languages AS a');				$db->setQuery($query);				$langs = $db->loadObjectList();				foreach ($langs as $lang)				{					if ($language == $lang->lang_code)					{						$link .= '&lang='.$lang->sef;						$needles['language'] = $language;					}				}			}			if ($item = self::_findItem($needles))			{				$link .= '&Itemid='.$item;			}			else			{				if ($category)				{					$catids = array_reverse($category->getPath());					$needles = array(						'category' => $catids,						'categories' => $catids					);					if ($item = self::_findItem($needles))					{						$link .= '&Itemid='.$item;					}					elseif ($item = self::_findItem())					{						$link .= '&Itemid='.$item;					}				}			}		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component	= JComponentHelper::getComponent('com_newsfeeds');			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items = $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];				if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id']))					{						// here it will become a bit tricky						// language != * can override existing entries						// language == * cannot override existing entries						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// if not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// JLayout for standard handling of the details sidebar in administrator edit screens.$title = $displayData->get('form')->getValue('title');$published = $displayData->get('form')->getValue('published');?><div class="span2"><h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<?php if (empty($title)) : ?>					<div class="control-group">						<div class="controls">							<?php echo $displayData->get('form')->getValue('name'); ?>						</div>					</div>				<?php else : ?>				<div class="control-group">					<div class="controls">						<?php echo $displayData->get('form')->getValue('title'); ?>					</div>				</div>				<?php endif; ?>				<?php if ($published) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $displayData->get('form')->getLabel('published'); ?>						</div>						<div class="controls">							<?php echo $displayData->get('form')->getInput('published'); ?>						</div>					</div>				<?php else : ?>					<div class="control-group">						<div class="control-label">							<?php echo $displayData->get('form')->getLabel('state'); ?>						</div>						<div class="controls">							<?php echo $displayData->get('form')->getInput('state'); ?>						</div>					</div>				<?php endif; ?>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('featured'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('featured'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('language'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<?php foreach ($displayData->get('form')->getFieldset('jmetadata') as $field) : ?>						<?php if ($field->name == 'jform[metadata][tags][]') :?>						<div class="control-group">							<div class="control-label"><?php echo $field->label; ?></div>							<div class="controls"><?php echo $field->input; ?></div>						</div>						<?php endif; ?>					<?php endforeach; ?>				</div>			</fieldset>		</div>
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tag Model * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsModelTag extends JModelList{	/**	 * The tags that apply.	 *	 * @var    object	 * @since  3.1	 */	protected $tag = null;	/**	 * The list of items associated with the tags.	 *	 * @var    array	 * @since  3.1	 */	protected $items = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   3.1	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'core_content_id', 'c.core_content_id',				'core_title', 'c.core_title',				'core_type_alias', 'c.core_type_alias',				'core_checked_out_user_id', 'c.core_checked_out_user_id',				'core_checked_out_time', 'c.core_checked_out_time',				'core_catid', 'c.core_catid',				'core_state', 'c.core_state',				'core_access', 'c.core_access',				'core_created_user_id', 'c.core_created_user_id',				'core_created_time', 'c.core_created_time',				'core_modified_time', 'c.core_modified_time',				'core_ordering', 'c.core_ordering',				'core_featured', 'c.core_featured',				'core_language', 'c.core_language',				'core_hits', 'c.core_hits',				'core_publish_up', 'c.core_publish_up',				'core_publish_down', 'c.core_publish_down',				'core_images', 'c.core_images',				'core_urls', 'c.core_urls',				'match_count',			);		}		parent::__construct($config);	}	/**	 * Method to get a list of items for a list of tags.	 *	 * @return  mixed  An array of objects on success, false on failure.	 *	 * @since   3.1	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		if (!empty($items))		{			foreach ($items as $item)			{				$explodedTypeAlias = explode('.', $item->type_alias);				$item->link = 'index.php?option=' . $explodedTypeAlias[0] . '&view=' . $explodedTypeAlias[1] . '&id=' . $item->content_item_id . ':' . $item->core_alias;				// Get display date				switch ($this->state->params->get('tag_list_show_date'))				{					case 'modified':						$item->displayDate = $item->core_modified_time;						break;					case 'created':						$item->displayDate = $item->core_created_time;						break;					default:					case 'published':						$item->displayDate = ($item->core_publish_up == 0) ? $item->core_created_time : $item->core_publish_up;						break;				}			}			return $items;		}		else		{			return false;		}	}	/**	 * Method to build an SQL query to load the list data of all items with a given tag.	 *	 * @return  string  An SQL query	 *	 * @since   3.1	 */	protected function getListQuery()	{		$tagId  = $this->getState('tag.id') ? : '';		$typesr = $this->getState('tag.typesr');		$orderByOption = $this->getState('list.ordering', 'c.core_title');		$includeChildren = $this->state->params->get('include_children', 0);		$orderDir = $this->getState('list.direction', 'ASC');		$matchAll = $this->getState('params')->get('return_any_or_all', 1);		$language = $this->getState('tag.language');		$stateFilter = $this->getState('tag.state');	// Optionally filter on language		if (empty($language))		{			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');		}		$listQuery = New JHelperTags;		$query = $listQuery->getTagItemsQuery($tagId, $typesr, $includeChildren, $orderByOption, $orderDir, $matchAll, $language, $stateFilter);		if ($this->state->get('list.filter'))		{			$query->where($this->_db->quoteName('c.core_title') . ' LIKE ' . $this->_db->quote('%' . $this->state->get('list.filter') . '%'));		}		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState($ordering = 'c.core_title', $direction = 'ASC')	{		$app = JFactory::getApplication('site');		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		// Load state from the request.		$pk = $app->input->getObject('id');		$pk = (array) $pk;		$pkString = '';		foreach ($pk as $id)		{			$pkString .= (int) $id . ',';		}		$pkString = rtrim($pkString, ',');		$this->setState('tag.id', $pkString);		// Get the selected list of types from the request. If none are specified all are used.		$typesr = $app->input->getObject('types');		if ($typesr)		{			$typesr = (array) $typesr;			$this->setState('tag.typesr', $typesr);		}		$language = $app->input->getString('tag_list_language_filter');		$this->setState('tag.language', $language);		// List state information		$format = $app->input->getWord('format');		if ($format == 'feed')		{			$limit = $app->getCfg('feed_limit');		}		else		{			if ($this->state->params->get('show_pagination_limit'))			{				$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');			}			else			{				$limit = $this->state->params->get('maximum', 20);			}		}		$this->setState('list.limit', $limit);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $offset);		$itemid = $pkString . ':' . $app->input->get('Itemid', 0, 'int');		$orderCol = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');		$orderCol = !$orderCol ? $this->state->params->get('tag_list_orderby', 'c.core_title') : $orderCol;		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'c.core_title';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_order_direction', 'filter_order_Dir', '', 'string');		$listOrder = !$listOrder ? $this->state->params->get('tag_list_orderby_direction', 'ASC') : $listOrder;		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$this->setState('tag.state', 1);		// Optional filter text		$filterSearch = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_search', 'filter-search', '', 'string');		$this->setState('list.filter', $filterSearch);	}	/**	 * Method to get tag data for the current tag or tags	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   3.1	 */	public function getItem($pk = null)	{		if (!isset($this->item) ||$this->item === null)		{			$this->item = false;			if (empty($id))			{				$id = $this->getState('tag.id');			}			// Get a level row instance.			$table = JTable::getInstance('Tag', 'TagsTable');			$idsArray = explode(',', $id);			// Attempt to load the rows into an array.			foreach ($idsArray as $id)			{				try				{					$table->load($id);					// Check published state.					if ($published = $this->getState('filter.published'))					{						if ($table->published != $published)						{							return $this->item;						}					}					// Convert the JTable to a clean JObject.					$properties = $table->getProperties(1);					$this->item[] = JArrayHelper::toObject($properties, 'JObject');				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		return $this->item;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of banner records. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelBanners extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'cid', 'a.cid', 'client_name',				'name', 'a.name',				'alias', 'a.alias',				'state', 'a.state',				'ordering', 'a.ordering',				'language', 'a.language',				'catid', 'a.catid', 'category_title',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'created', 'a.created',				'impmade', 'a.impmade',				'imptotal', 'a.imptotal',				'clicks', 'a.clicks',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'state', 'sticky', 'a.sticky',			);		}		parent::__construct($config);	}	/**	 * Method to get the maximum ordering value for each category.	 *	 * @since   1.6	 */	public function &getCategoryOrders()	{		if (!isset($this->cache['categoryorders']))		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('MAX(ordering) as ' . $db->quoteName('max') . ', catid')				->select('catid')				->from('#__banners')				->group('catid');			$db->setQuery($query);			$this->cache['categoryorders'] = $db->loadAssocList('catid', 0);		}		return $this->cache['categoryorders'];	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id AS id, a.name AS name, a.alias AS alias,' .					'a.checked_out AS checked_out,' .					'a.checked_out_time AS checked_out_time, a.catid AS catid,' .					'a.clicks AS clicks, a.metakey AS metakey, a.sticky AS sticky,' .					'a.impmade AS impmade, a.imptotal AS imptotal,' .					'a.state AS state, a.ordering AS ordering,' .					'a.purchase_type as purchase_type,' .					'a.language, a.publish_up, a.publish_down'			)		);		$query->from($db->quoteName('#__banners') . ' AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the clients.		$query->select('cl.name AS client_name,cl.purchase_type as client_purchase_type')			->join('LEFT', '#__banner_clients AS cl ON cl.id = a.cid');		// Filter by published state		$published = $this->getState('filter.state');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state IN (0, 1))');		}		// Filter by category.		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$query->where('a.catid = ' . (int) $categoryId);		}		// Filter by client.		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('a.cid = ' . (int) $clientId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.name LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering', 'ordering');		$orderDirn = $this->state->get('list.direction', 'ASC');		if ($orderCol == 'ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		if ($orderCol == 'client_name')		{			$orderCol = 'cl.name';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Banner', $prefix = 'BannersTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API People class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinPeople extends JLinkedinObject{	/**	 * Method to get a member's profile.	 *	 * @param   string  $id        Member id of the profile you want.	 * @param   string  $url       The public profile URL.	 * @param   string  $fields    Request fields beyond the default ones.	 * @param   string  $type      Choosing public or standard profile.	 * @param   string  $language  A comma separated list of locales ordered from highest to lowest preference.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getProfile($id = null, $url = null, $fields = null, $type = 'standard', $language = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		$data['format'] = 'json';		// Check if a member id is specified.		if ($id)		{			$base .= 'id=' . $id;		}		elseif (!$url)		{			$base .= '~';		}		// Check if profile url is specified.		if ($url)		{			$base .= 'url=' . $this->oauth->safeEncode($url);			// Choose public profile			if (!strcmp($type, 'public'))			{				$base .= ':public';			}		}		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if language is specified.		$header = array();		if ($language)		{			$header = array('Accept-Language' => $language);		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data, $header);		return json_decode($response->body);	}	/**	 * Method to get a list of connections for a user who has granted access to his/her account.	 *	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $modified        Values are updated or new.	 * @param   string   $modified_since  Value as a Unix time stamp of milliseconds since epoch.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getConnections($fields = null, $start = 0, $count = 500, $modified = null, $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/connections';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 500)		{			$data['count'] = $count;		}		// Check if modified is specified.		if ($modified)		{			$data['modified'] = $modified;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get information about people.	 *	 * @param   string   $fields           Request fields beyond the default ones. provide 'api-standard-profile-request'	 * 									   field for out of network profiles.	 * @param   string   $keywords         Members who have all the keywords anywhere in their profile.	 * @param   string   $first_name       Members with a matching first name. Matches must be exact.	 * @param   string   $last_name        Members with a matching last name. Matches must be exactly.	 * @param   string   $company_name     Members who have a matching company name on their profile.	 * @param   boolean  $current_company  A value of true matches members who currently work at the company specified in the company-name	 * 									   parameter.	 * @param   string   $title            Matches members with that title on their profile.	 * @param   boolean  $current_title    A value of true matches members whose title is currently the one specified in the title-name parameter.	 * @param   string   $school_name      Members who have a matching school name on their profile.	 * @param   string   $current_school   A value of true matches members who currently attend the school specified in the school-name parameter.	 * @param   string   $country_code     Matches members with a location in a specific country. Values are defined in by ISO 3166 standard.	 * 									   Country codes must be in all lower case.	 * @param   integer  $postal_code      Matches members centered around a Postal Code. Must be combined with the country-code parameter.	 * 									   Not supported for all countries.	 * @param   integer  $distance         Matches members within a distance from a central point. This is measured in miles.	 * @param   string   $facets           Facet buckets to return, e.g. location.	 * @param   array    $facet            Array of facet values to search over. Contains values for location, industry, network, language,	 * 									   current-company, past-company and school, in exactly this order, null must be specified for an element if no value.	 * @param   integer  $start            Starting location within the result set for paginated returns.	 * @param   integer  $count            The number of results returned.	 * @param   string   $sort             Controls the search result order. There are four options: connections, recommenders,	 * 									   distance and relevance.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function search($fields = null, $keywords = null, $first_name = null, $last_name = null, $company_name = null,		$current_company = null, $title = null, $current_title = null, $school_name = null, $current_school = null, $country_code = null,		$postal_code = null, $distance = null, $facets = null, $facet = null, $start = 0, $count = 10, $sort = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people-search';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if keywords is specified.		if ($keywords)		{			$data['keywords'] = $keywords;		}		// Check if first_name is specified.		if ($first_name)		{			$data['first-name'] = $first_name;		}		// Check if last_name is specified.		if ($last_name)		{			$data['last-name'] = $last_name;		}		// Check if company-name is specified.		if ($company_name)		{			$data['company-name'] = $company_name;		}		// Check if current_company is specified.		if ($current_company)		{			$data['current-company'] = $current_company;		}		// Check if title is specified.		if ($title)		{			$data['title'] = $title;		}		// Check if current_title is specified.		if ($current_title)		{			$data['current-title'] = $current_title;		}		// Check if school_name is specified.		if ($school_name)		{			$data['school-name'] = $school_name;		}		// Check if current_school is specified.		if ($current_school)		{			$data['current-school'] = $current_school;		}		// Check if country_code is specified.		if ($country_code)		{			$data['country-code'] = $country_code;		}		// Check if postal_code is specified.		if ($postal_code)		{			$data['postal-code'] = $postal_code;		}		// Check if distance is specified.		if ($distance)		{			$data['distance'] = $distance;		}		// Check if facets is specified.		if ($facets)		{			$data['facets'] = $facets;		}		// Check if facet is specified.		if ($facet)		{			$data['facet'] = array();			for ($i = 0; $i < count($facet); $i++)			{				if ($facet[$i])				{					if ($i == 0)					{						$data['facet'][] = 'location,' . $facet[$i];					}					if ($i == 1)					{						$data['facet'][] = 'industry,' . $facet[$i];					}					if ($i == 2)					{						$data['facet'][] = 'network,' . $facet[$i];					}					if ($i == 3)					{						$data['facet'][] = 'language,' . $facet[$i];					}					if ($i == 4)					{						$data['facet'][] = 'current-company,' . $facet[$i];					}					if ($i == 5)					{						$data['facet'][] = 'past-company,' . $facet[$i];					}					if ($i == 6)					{						$data['facet'][] = 'school,' . $facet[$i];					}				}			}		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 10)		{			$data['count'] = $count;		}		// Check if sort is specified.		if ($sort)		{			$data['sort'] = $sort;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		if (strpos($fields, 'api-standard-profile-request') === false)		{			return json_decode($response->body);		}		// Get header name.		$name = explode('"name": "', $response->body);		$name = explode('"', $name[1]);		$name = $name[0];		// Get header value.		$value = explode('"value": "', $response->body);		$value = explode('"', $value[1]);		$value = $value[0];		// Get request url.		$url = explode('"url": "', $response->body);		$url = explode('"', $url[1]);		$url = $url[0];		// Build header for out of network profile.		$header[$name] = $value;		// Send the request.		$response = $this->oauth->oauthRequest($url, 'GET', $parameters, $data, $header);		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Adapter Class * Retains common adapter pattern functions * Class harvested from joomla.installer.installer * * @package     Joomla.Platform * @subpackage  Base * @since       11.1 */class JAdapter extends JObject{	/**	 * Associative array of adapters	 *	 * @var    array	 * @since  11.1	 */	protected $_adapters = array();	/**	 * Adapter Folder	 * @var    string	 * @since  11.1	 */	protected $_adapterfolder = 'adapters';	/**	 * @var    string	Adapter Class Prefix	 * @since  11.1	 */	protected $_classprefix = 'J';	/**	 * Base Path for the adapter instance	 *	 * @var    string	 * @since  11.1	 */	protected $_basepath = null;	/**	 * Database Connector Object	 *	 * @var    JDatabaseDriver	 * @since  11.1	 */	protected $_db;	/**	 * Constructor	 *	 * @param   string  $basepath       Base Path of the adapters	 * @param   string  $classprefix    Class prefix of adapters	 * @param   string  $adapterfolder  Name of folder to append to base path	 *	 * @since   11.1	 */	public function __construct($basepath, $classprefix = null, $adapterfolder = null)	{		$this->_basepath = $basepath;		$this->_classprefix = $classprefix ? $classprefix : 'J';		$this->_adapterfolder = $adapterfolder ? $adapterfolder : 'adapters';		$this->_db = JFactory::getDbo();	}	/**	 * Get the database connector object	 *	 * @return  JDatabaseDriver  Database connector object	 *	 * @since   11.1	 */	public function getDBO()	{		return $this->_db;	}	/**	 * Set an adapter by name	 *	 * @param   string  $name      Adapter name	 * @param   object  &$adapter  Adapter object	 * @param   array   $options   Adapter options	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 */	public function setAdapter($name, &$adapter = null, $options = array())	{		if (!is_object($adapter))		{			$fullpath = $this->_basepath . '/' . $this->_adapterfolder . '/' . strtolower($name) . '.php';			if (!file_exists($fullpath))			{				return false;			}			// Try to load the adapter object			require_once $fullpath;			$class = $this->_classprefix . ucfirst($name);			if (!class_exists($class))			{				return false;			}			$adapter = new $class($this, $this->_db, $options);		}		$this->_adapters[$name] = &$adapter;		return true;	}	/**	 * Return an adapter.	 *	 * @param   string  $name     Name of adapter to return	 * @param   array   $options  Adapter options	 *	 * @return  object  Adapter of type 'name' or false	 *	 * @since   11.1	 */	public function getAdapter($name, $options = array())	{		if (!array_key_exists($name, $this->_adapters))		{			if (!$this->setAdapter($name, $options))			{				$false = false;				return $false;			}		}		return $this->_adapters[$name];	}	/**	 * Loads all adapters.	 *	 * @param   array  $options  Adapter options	 *	 * @return  void	 *	 * @since   11.1	 */	public function loadAllAdapters($options = array())	{		$files = new DirectoryIterator($this->_basepath . '/' . $this->_adapterfolder);		foreach ($files as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Try to load the adapter object			require_once $this->_basepath . '/' . $this->_adapterfolder . '/' . $fileName;			// Derive the class name from the filename.			$name = str_ireplace('.php', '', ucfirst(trim($fileName)));			$class = $this->_classprefix . ucfirst($name);			if (!class_exists($class))			{				// Skip to next one				continue;			}			$adapter = new $class($this, $this->_db, $options);			$this->_adapters[$name] = clone $adapter;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  User * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Authorisation helper class, provides static methods to perform various tasks relevant * to the Joomla user and authorisation classes * * This class has influences and some method logic from the Horde Auth package * * @package     Joomla.Platform * @subpackage  User * @since       11.1 */abstract class JUserHelper{	/**	 * Method to add a user to a group.	 *	 * @param   integer  $userId   The id of the user.	 * @param   integer  $groupId  The id of the group.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function addUserToGroup($userId, $groupId)	{		// Get the user object.		$user = new JUser((int) $userId);		// Add the user to the group if necessary.		if (!in_array($groupId, $user->groups))		{			// Get the title of the group.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select($db->quoteName('title'))				->from($db->quoteName('#__usergroups'))				->where($db->quoteName('id') . ' = ' . (int) $groupId);			$db->setQuery($query);			$title = $db->loadResult();			// If the group does not exist, return an exception.			if (!$title)			{				throw new RuntimeException('Access Usergroup Invalid');			}			// Add the group data to the user object.			$user->groups[$title] = $groupId;			// Store the user object.			$user->save();		}		if (session_id())		{			// Set the group data for any preloaded user objects.			$temp = JFactory::getUser((int) $userId);			$temp->groups = $user->groups;			// Set the group data for the user object in the session.			$temp = JFactory::getUser();			if ($temp->id == $userId)			{				$temp->groups = $user->groups;			}		}		return true;	}	/**	 * Method to get a list of groups a user is in.	 *	 * @param   integer  $userId  The id of the user.	 *	 * @return  array    List of groups	 *	 * @since   11.1	 */	public static function getUserGroups($userId)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		return isset($user->groups) ? $user->groups : array();	}	/**	 * Method to remove a user from a group.	 *	 * @param   integer  $userId   The id of the user.	 * @param   integer  $groupId  The id of the group.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function removeUserFromGroup($userId, $groupId)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		// Remove the user from the group if necessary.		$key = array_search($groupId, $user->groups);		if ($key !== false)		{			// Remove the user from the group.			unset($user->groups[$key]);			// Store the user object.			$user->save();		}		// Set the group data for any preloaded user objects.		$temp = JFactory::getUser((int) $userId);		$temp->groups = $user->groups;		// Set the group data for the user object in the session.		$temp = JFactory::getUser();		if ($temp->id == $userId)		{			$temp->groups = $user->groups;		}		return true;	}	/**	 * Method to set the groups for a user.	 *	 * @param   integer  $userId  The id of the user.	 * @param   array    $groups  An array of group ids to put the user in.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function setUserGroups($userId, $groups)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		// Set the group ids.		JArrayHelper::toInteger($groups);		$user->groups = $groups;		// Get the titles for the user groups.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('id') . ', ' . $db->quoteName('title'))			->from($db->quoteName('#__usergroups'))			->where($db->quoteName('id') . ' = ' . implode(' OR ' . $db->quoteName('id') . ' = ', $user->groups));		$db->setQuery($query);		$results = $db->loadObjectList();		// Set the titles for the user groups.		for ($i = 0, $n = count($results); $i < $n; $i++)		{			$user->groups[$results[$i]->id] = $results[$i]->id;		}		// Store the user object.		$user->save();		if ($session_id())		{			// Set the group data for any preloaded user objects.			$temp = JFactory::getUser((int) $userId);			$temp->groups = $user->groups;			// Set the group data for the user object in the session.			$temp = JFactory::getUser();			if ($temp->id == $userId)			{				$temp->groups = $user->groups;			}		}		return true;	}	/**	 * Gets the user profile information	 *	 * @param   integer  $userId  The id of the user.	 *	 * @return  object	 *	 * @since   11.1	 */	public static function getProfile($userId = 0)	{		if ($userId == 0)		{			$user	= JFactory::getUser();			$userId	= $user->id;		}		// Get the dispatcher and load the user's plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		$data = new JObject;		$data->id = $userId;		// Trigger the data preparation event.		$dispatcher->trigger('onContentPrepareData', array('com_users.profile', &$data));		return $data;	}	/**	 * Method to activate a user	 *	 * @param   string  $activation  Activation string	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function activateUser($activation)	{		// Initialize some variables.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Let's get the id of the user we want to activate		$query->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('activation') . ' = ' . $db->quote($activation))			->where($db->quoteName('block') . ' = 1')			->where($db->quoteName('lastvisitDate') . ' = ' . $db->quote('0000-00-00 00:00:00'));		$db->setQuery($query);		$id = (int) $db->loadResult();		// Is it a valid user to activate?		if ($id)		{			$user = JUser::getInstance((int) $id);			$user->set('block', '0');			$user->set('activation', '');			// Time to take care of business.... store the user.			if (!$user->save())			{				JLog::add($user->getError(), JLog::WARNING, 'jerror');				return false;			}		}		else		{			JLog::add(JText::_('JLIB_USER_ERROR_UNABLE_TO_FIND_USER'), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Returns userid if a user exists	 *	 * @param   string  $username  The username to search on.	 *	 * @return  integer  The user id or 0 if not found.	 *	 * @since   11.1	 */	public static function getUserId($username)	{		// Initialise some variables		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('username') . ' = ' . $db->quote($username));		$db->setQuery($query, 0, 1);		return $db->loadResult();	}	/**	 * Formats a password using the current encryption.	 *	 * @param   string   $plaintext     The plaintext password to encrypt.	 * @param   string   $salt          The salt to use to encrypt the password. []	 *                                  If not present, a new salt will be	 *                                  generated.	 * @param   string   $encryption    The kind of password encryption to use.	 *                                  Defaults to md5-hex.	 * @param   boolean  $show_encrypt  Some password systems prepend the kind of	 *                                  encryption to the crypted password ({SHA},	 *                                  etc). Defaults to false.	 *	 * @return  string  The encrypted password.	 *	 * @since   11.1	 */	public static function getCryptedPassword($plaintext, $salt = '', $encryption = 'md5-hex', $show_encrypt = false)	{		// Get the salt to use.		$salt = self::getSalt($encryption, $salt, $plaintext);		// Encrypt the password.		switch ($encryption)		{			case 'plain':				return $plaintext;			case 'sha':				$encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext));				return ($show_encrypt) ? '{SHA}' . $encrypted : $encrypted;			case 'crypt':			case 'crypt-des':			case 'crypt-md5':			case 'crypt-blowfish':				return ($show_encrypt ? '{crypt}' : '') . crypt($plaintext, $salt);			case 'md5-base64':				$encrypted = base64_encode(mhash(MHASH_MD5, $plaintext));				return ($show_encrypt) ? '{MD5}' . $encrypted : $encrypted;			case 'ssha':				$encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext . $salt) . $salt);				return ($show_encrypt) ? '{SSHA}' . $encrypted : $encrypted;			case 'smd5':				$encrypted = base64_encode(mhash(MHASH_MD5, $plaintext . $salt) . $salt);				return ($show_encrypt) ? '{SMD5}' . $encrypted : $encrypted;			case 'aprmd5':				$length = strlen($plaintext);				$context = $plaintext . '$apr1$' . $salt;				$binary = self::_bin(md5($plaintext . $salt . $plaintext));				for ($i = $length; $i > 0; $i -= 16)				{					$context .= substr($binary, 0, ($i > 16 ? 16 : $i));				}				for ($i = $length; $i > 0; $i >>= 1)				{					$context .= ($i & 1) ? chr(0) : $plaintext[0];				}				$binary = self::_bin(md5($context));				for ($i = 0; $i < 1000; $i++)				{					$new = ($i & 1) ? $plaintext : substr($binary, 0, 16);					if ($i % 3)					{						$new .= $salt;					}					if ($i % 7)					{						$new .= $plaintext;					}					$new .= ($i & 1) ? substr($binary, 0, 16) : $plaintext;					$binary = self::_bin(md5($new));				}				$p = array();				for ($i = 0; $i < 5; $i++)				{					$k = $i + 6;					$j = $i + 12;					if ($j == 16)					{						$j = 5;					}					$p[] = self::_toAPRMD5((ord($binary[$i]) << 16) | (ord($binary[$k]) << 8) | (ord($binary[$j])), 5);				}				return '$apr1$' . $salt . '$' . implode('', $p) . self::_toAPRMD5(ord($binary[11]), 3);			case 'md5-hex':			default:				$encrypted = ($salt) ? md5($plaintext . $salt) : md5($plaintext);				return ($show_encrypt) ? '{MD5}' . $encrypted : $encrypted;		}	}	/**	 * Returns a salt for the appropriate kind of password encryption.	 * Optionally takes a seed and a plaintext password, to extract the seed	 * of an existing password, or for encryption types that use the plaintext	 * in the generation of the salt.	 *	 * @param   string  $encryption  The kind of password encryption to use.	 *                               Defaults to md5-hex.	 * @param   string  $seed        The seed to get the salt from (probably a	 *                               previously generated password). Defaults to	 *                               generating a new seed.	 * @param   string  $plaintext   The plaintext password that we're generating	 *                               a salt for. Defaults to none.	 *	 * @return  string  The generated or extracted salt.	 *	 * @since   11.1	 */	public static function getSalt($encryption = 'md5-hex', $seed = '', $plaintext = '')	{		// Encrypt the password.		switch ($encryption)		{			case 'crypt':			case 'crypt-des':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 2);				}				else				{					return substr(md5(mt_rand()), 0, 2);				}				break;			case 'crypt-md5':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 12);				}				else				{					return '$1$' . substr(md5(mt_rand()), 0, 8) . '$';				}				break;			case 'crypt-blowfish':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 16);				}				else				{					return '$2$' . substr(md5(mt_rand()), 0, 12) . '$';				}				break;			case 'ssha':				if ($seed)				{					return substr(preg_replace('|^{SSHA}|', '', $seed), -20);				}				else				{					return mhash_keygen_s2k(MHASH_SHA1, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);				}				break;			case 'smd5':				if ($seed)				{					return substr(preg_replace('|^{SMD5}|', '', $seed), -16);				}				else				{					return mhash_keygen_s2k(MHASH_MD5, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);				}				break;			case 'aprmd5': /* 64 characters that are valid for APRMD5 passwords. */				$APRMD5 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';				if ($seed)				{					return substr(preg_replace('/^\$apr1\$(.{8}).*/', '\\1', $seed), 0, 8);				}				else				{					$salt = '';					for ($i = 0; $i < 8; $i++)					{						$salt .= $APRMD5{rand(0, 63)};					}					return $salt;				}				break;			default:				$salt = '';				if ($seed)				{					$salt = $seed;				}				return $salt;				break;		}	}	/**	 * Generate a random password	 *	 * @param   integer  $length  Length of the password to generate	 *	 * @return  string  Random Password	 *	 * @since   11.1	 */	public static function genRandomPassword($length = 8)	{		$salt = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";		$base = strlen($salt);		$makepass = '';		/*		 * Start with a cryptographic strength random string, then convert it to		 * a string with the numeric base of the salt.		 * Shift the base conversion on each character so the character		 * distribution is even, and randomize the start shift so it's not		 * predictable.		 */		$random = JCrypt::genRandomBytes($length + 1);		$shift = ord($random[0]);		for ($i = 1; $i <= $length; ++$i)		{			$makepass .= $salt[($shift + ord($random[$i])) % $base];			$shift += ord($random[$i]);		}		return $makepass;	}	/**	 * Converts to allowed 64 characters for APRMD5 passwords.	 *	 * @param   string   $value  The value to convert.	 * @param   integer  $count  The number of characters to convert.	 *	 * @return  string  $value converted to the 64 MD5 characters.	 *	 * @since   11.1	 */	protected static function _toAPRMD5($value, $count)	{		/* 64 characters that are valid for APRMD5 passwords. */		$APRMD5 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';		$aprmd5 = '';		$count = abs($count);		while (--$count)		{			$aprmd5 .= $APRMD5[$value & 0x3f];			$value >>= 6;		}		return $aprmd5;	}	/**	 * Converts hexadecimal string to binary data.	 *	 * @param   string  $hex  Hex data.	 *	 * @return  string  Binary data.	 *	 * @since   11.1	 */	private static function _bin($hex)	{		$bin = '';		$length = strlen($hex);		for ($i = 0; $i < $length; $i += 2)		{			$tmp = sscanf(substr($hex, $i, 2), '%x');			$bin .= chr(array_shift($tmp));		}		return $bin;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! MySQL Database Log class * * This class is designed to output logs to a specific MySQL database table. Fields in this * table are based on the Syslog style of log output. This is designed to allow quick and * easy searching. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerDatabase extends JLogLogger{	/**	 * @var    string  The name of the database driver to use for connecting to the database.	 * @since  11.1	 */	protected $driver = 'mysqli';	/**	 * @var    string  The host name (or IP) of the server with which to connect for the logger.	 * @since  11.1	 */	protected $host = '127.0.0.1';	/**	 * @var    string  The database server user to connect as for the logger.	 * @since  11.1	 */	protected $user = 'root';	/**	 * @var    string  The password to use for connecting to the database server.	 * @since  11.1	 */	protected $password = '';	/**	 * @var    string  The name of the database table to use for the logger.	 * @since  11.1	 */	protected $database = 'logging';	/**	 * @var    string  The database table to use for logging entries.	 * @since  11.1	 */	protected $table = 'jos_';	/**	 * @var    JDatabaseDriver  The database driver object for the logger.	 * @since  11.1	 */	protected $db;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// If both the database object and driver options are empty we want to use the system database connection.		if (empty($this->options['db_driver']))		{			$this->db = JFactory::getDbo();			$this->driver = null;			$this->host = null;			$this->user = null;			$this->password = null;			$this->database = null;			$this->prefix = null;		}		else		{			$this->db = null;			$this->driver = (empty($this->options['db_driver'])) ? 'mysqli' : $this->options['db_driver'];			$this->host = (empty($this->options['db_host'])) ? '127.0.0.1' : $this->options['db_host'];			$this->user = (empty($this->options['db_user'])) ? 'root' : $this->options['db_user'];			$this->password = (empty($this->options['db_pass'])) ? '' : $this->options['db_pass'];			$this->database = (empty($this->options['db_database'])) ? 'logging' : $this->options['db_database'];			$this->prefix = (empty($this->options['db_prefix'])) ? 'jos_' : $this->options['db_prefix'];		}		// The table name is independent of how we arrived at the connection object.		$this->table = (empty($this->options['db_table'])) ? '#__log_entries' : $this->options['db_table'];	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addEntry(JLogEntry $entry)	{		// Connect to the database if not connected.		if (empty($this->db))		{			$this->connect();		}		// Convert the date.		$entry->date = $entry->date->toSql(false, $this->db);		$this->db->insertObject($this->table, $entry);	}	/**	 * Method to connect to the database server based on object properties.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function connect()	{		// Build the configuration object to use for JDatabaseDriver.		$options = array(			'driver' => $this->driver,			'host' => $this->host,			'user' => $this->user,			'password' => $this->password,			'database' => $this->database,			'prefix' => $this->prefix);		$db = JDatabaseDriver::getInstance($options);		// Assign the database connector to the class.		$this->db = $db;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Categories List Controller * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesControllerCategories extends JControllerAdmin{	/**	 * Proxy for getModel	 *	 * @param   string	$name	The model name. Optional.	 * @param   string	$prefix	The class prefix. Optional.	 *	 * @return  object  The model.	 * @since   1.6	 */	public function getModel($name = 'Category', $prefix = 'CategoriesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Rebuild the nested set tree.	 *	 * @return  bool	False on failure or error, true on success.	 * @since   1.6	 */	public function rebuild()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$extension = $this->input->get('extension');		$this->setRedirect(JRoute::_('index.php?option=com_categories&view=categories&extension=' . $extension, false));		$model = $this->getModel();		if ($model->rebuild())		{			// Rebuild succeeded.			$this->setMessage(JText::_('COM_CATEGORIES_REBUILD_SUCCESS'));			return true;		}		else		{			// Rebuild failed.			$this->setMessage(JText::_('COM_CATEGORIES_REBUILD_FAILURE'));			return false;		}	}	/**	 * Save the manual order inputs from the categories list page.	 *	 * @return  void	 * @since   1.6	 */	public function saveorder()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			parent::saveorder();		}		else		{			// Nothing to reorder			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));			return true;		}	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$pks   = $this->input->post->get('cid', null, 'array');		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			// Get the model			$model = $this->getModel();			// Save the ordering			$return = $model->saveorder($pks, $order);			if ($return)			{				echo "1";			}		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the WebLinks component * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $children;	protected $pagination;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseWarning(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseWarning(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Check whether category access level allows access.		// TODO: SHould already be computed in $category->params->get('access-view')		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Prepare the data.		// Compute the weblink slug & link url.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			if ($item->params->get('count_clicks', $params->get('count_clicks')) == 1)			{				$item->link = JRoute::_('index.php?option=com_weblinks&task=weblink.go&id='. $item->id);			}			else {				$item->link = $item->url;			}			$temp = new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		$children = array($category->id => $children);		$maxLevel = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $this->category->id) === false)))		{			if ($layout = $category->params->get('category_layout'))			{			$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$this->category->tags = new JHelperTags;		$this->category->tags->getItemTags('com_weblinks.category', $this->category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_WEBLINKS_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_weblinks' || $id != $this->category->id))		{			$this->params->set('page_subheading', $this->category->title);			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_weblinks' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => WeblinksHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}		// Add alternative feed link		if ($this->params->get('show_feed_link', 1) == 1)		{			$link	= '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link.'&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link.'&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Route Helper * * @static * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */abstract class WeblinksHelperRoute{	protected static $lookup;	/**	 * @param   integer  The route of the weblink	 */	public static function getWeblinkRoute($id, $catid, $language = 0)	{		$needles = array(			'weblink'  => array((int) $id)		);		//Create the link		$link = 'index.php?option=com_weblinks&view=weblink&id='. $id;		if ($catid > 1)		{			$categories = JCategories::getInstance('Weblinks');			$category = $categories->get($catid);			if ($category)			{				$needles['category'] = array_reverse($category->getPath());				$needles['categories'] = $needles['category'];				$link .= '&catid='.$catid;			}		}		if ($language && $language != "*" && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang='.$lang->sef;					$needles['language'] = $language;				}			}		}		if ($item = self::_findItem($needles))		{			$link .= '&Itemid='.$item;		}		elseif ($item = self::_findItem())		{			$link .= '&Itemid='.$item;		}		return $link;	}	/**	 * @param   integer  $id		The id of the weblink.	 * @param   string	$return	The return page variable.	 */	public static function getFormRoute($id, $return = null)	{		// Create the link.		if ($id)		{			$link = 'index.php?option=com_weblinks&task=weblink.edit&w_id='. $id;		}		else		{			$link = 'index.php?option=com_weblinks&task=weblink.add&w_id=0';		}		if ($return)		{			$link .= '&return='.$return;		}		return $link;	}	public static function getCategoryRoute($catid, $language = 0)	{		if ($catid instanceof JCategoryNode)		{			$id = $catid->id;			$category = $catid;		}		else		{			$id = (int) $catid;			$category = JCategories::getInstance('Weblinks')->get($id);		}		if ($id < 1)		{			$link = '';		}		else		{			//Create the link			$link = 'index.php?option=com_weblinks&view=category&id='.$id;			$needles = array(				'category' => array($id)			);			if ($language && $language != "*" && JLanguageMultilang::isEnabled())			{				$db		= JFactory::getDbo();				$query	= $db->getQuery(true)					->select('a.sef AS sef')					->select('a.lang_code AS lang_code')					->from('#__languages AS a');				$db->setQuery($query);				$langs = $db->loadObjectList();				foreach ($langs as $lang)				{					if ($language == $lang->lang_code)					{						$link .= '&lang='.$lang->sef;						$needles['language'] = $language;					}				}			}			if ($item = self::_findItem($needles))			{				$link .= '&Itemid='.$item;			}			else			{				if ($category)				{					$catids = array_reverse($category->getPath());					$needles = array(						'category' => $catids,						'categories' => $catids					);					if ($item = self::_findItem($needles))					{						$link .= '&Itemid='.$item;					}					elseif ($item = self::_findItem())					{						$link .= '&Itemid='.$item;					}				}			}		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component	= JComponentHelper::getComponent('com_weblinks');			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items = $menus->getItems($attributes, $values);			if ($items)			{				foreach ($items as $item)				{					if (isset($item->query) && isset($item->query['view']))					{						$view = $item->query['view'];						if (!isset(self::$lookup[$language][$view]))						{							self::$lookup[$language][$view] = array();						}						if (isset($item->query['id']))						{							// here it will become a bit tricky							// language != * can override existing entries							// language == * cannot override existing entries							if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')							{								self::$lookup[$language][$view][$item->query['id']] = $item->id;							}						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// if not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugin model. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugin extends JModelAdmin{	/**	 * @var		string	The help screen key for the module.	 * @since   1.6	 */	protected $helpKey = 'JHELP_EXTENSIONS_PLUGIN_MANAGER_EDIT';	/**	 * @var		string	The help screen base URL for the module.	 * @since   1.6	 */	protected $helpURL;	protected $_cache;	/**	 * @var		string	The event to trigger after saving the data.	 * @since   1.6	 */	protected $event_after_save = 'onExtensionAfterSave';	/**	 * @var		string	The event to trigger after before the data.	 * @since   1.6	 */	protected $event_before_save = 'onExtensionBeforeSave';	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item		= $this->getItem();			$folder		= $item->folder;			$element	= $item->element;		}		else		{			$folder		= JArrayHelper::getValue($data, 'folder', '', 'cmd');			$element	= JArrayHelper::getValue($data, 'element', '', 'cmd');		}		// These variables are used to add data from the plugin XML files.		$this->setState('item.folder',	$folder);		$this->setState('item.element',	$element);		// Get the form.		$form = $this->loadForm('com_plugins.plugin', 'plugin', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('enabled', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('enabled', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_plugins.edit.plugin.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_plugins.plugin', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('plugin.id');		if (!isset($this->_cache[$pk]))		{			$false	= false;			// Get a row instance.			$table = $this->getTable();			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $table->getError())			{				$this->setError($table->getError());				return $false;			}			// Convert to the JObject before adding other data.			$properties = $table->getProperties(1);			$this->_cache[$pk] = JArrayHelper::toObject($properties, 'JObject');			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($table->params);			$this->_cache[$pk]->params = $registry->toArray();			// Get the plugin XML.			$path = JPath::clean(JPATH_PLUGINS.'/'.$table->folder.'/'.$table->element.'/'.$table->element.'.xml');			if (file_exists($path))			{				$this->_cache[$pk]->xml = simplexml_load_file($path);			} else {				$this->_cache[$pk]->xml = null;			}		}		return $this->_cache[$pk];	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	*/	public function getTable($type = 'Extension', $prefix = 'JTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		// Execute the parent method.		parent::populateState();		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('extension_id');		$this->setState('plugin.id', $pk);	}	/**	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @return  mixed  True if successful.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		jimport('joomla.filesystem.path');		$folder		= $this->getState('item.folder');		$element	= $this->getState('item.element');		$lang		= JFactory::getLanguage();		$client		= JApplicationHelper::getClientInfo(0);		// Load the core and/or local language sys file(s) for the ordering field.		$db = JFactory::getDbo();		$query = 'SELECT element' .				' FROM #__extensions' .				' WHERE (type =' .$db->quote('plugin'). 'AND folder='. $db->quote($folder) . ')';		$db->setQuery($query);		$elements = $db->loadColumn();		foreach ($elements as $elementa)		{				$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_ADMINISTRATOR, null, false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_PLUGINS.'/'.$folder.'/'.$elementa, null, false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_PLUGINS.'/'.$folder.'/'.$elementa, $lang->getDefault(), false, false);		}		if (empty($folder) || empty($element))		{			$app = JFactory::getApplication();			$app->redirect(JRoute::_('index.php?option=com_plugins&view=plugins', false));		}		$formFile = JPath::clean(JPATH_PLUGINS . '/' . $folder . '/' . $element . '/' . $element . '.xml');		if (!file_exists($formFile))		{			throw new Exception(JText::sprintf('COM_PLUGINS_ERROR_FILE_NOT_FOUND', $element . '.xml'));		}		// Load the core and/or local language file(s).			$lang->load('plg_'.$folder.'_'.$element, JPATH_ADMINISTRATOR, null, false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_PLUGINS.'/'.$folder.'/'.$element, null, false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_PLUGINS.'/'.$folder.'/'.$element, $lang->getDefault(), false, false);		if (file_exists($formFile))		{			// Get the plugin form.			if (!$form->loadFile($formFile, false, '//config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Attempt to load the xml file.		if (!$xml = simplexml_load_file($formFile))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		// Get the help data from the XML file if present.		$help = $xml->xpath('/extension/help');		if (!empty($help))		{			$helpKey = trim((string) $help[0]['key']);			$helpURL = trim((string) $help[0]['url']);			$this->helpKey = $helpKey ? $helpKey : $this->helpKey;			$this->helpURL = $helpURL ? $helpURL : $this->helpURL;		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object	A record object.	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'type = '. $this->_db->quote($table->type);		$condition[] = 'folder = '. $this->_db->quote($table->folder);		return $condition;	}	/**	 * Override method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		// Load the extension plugin group.		JPluginHelper::importPlugin('extension');		// Setup type		$data['type'] = 'plugin';		return parent::save($data);	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL);	}	/**	 * Custom clean cache method, plugins are cached in 2 places for different clients	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_plugins');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/manual/en/book.mysqli.php * @since       12.1 */class JDatabaseDriverMysqli extends JDatabaseDriver{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'mysqli';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc. The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.2	 */	protected $nameQuote = '`';	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 * @since  12.2	 */	protected $nullDate = '0000-00-00 00:00:00';	/**	 * @var    string  The minimum supported database version.	 * @since  12.2	 */	protected static $dbMinimum = '5.0.4';	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : 'root';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['select'] = (isset($options['select'])) ? (bool) $options['select'] : true;		$options['port'] = null;		$options['socket'] = null;		// Finalize initialisation.		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_callable(array($this->connection, 'close')))		{			mysqli_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		/*		 * Unlike mysql_connect(), mysqli_connect() takes the port and socket as separate arguments. Therefore, we		 * have to extract them from the host string.		 */		$tmp = substr(strstr($this->options['host'], ':'), 1);		if (!empty($tmp))		{			// Get the port number or socket name			if (is_numeric($tmp))			{				$this->options['port'] = $tmp;			}			else			{				$this->options['socket'] = $tmp;			}			// Extract the host name only			$this->options['host'] = substr($this->options['host'], 0, strlen($this->options['host']) - (strlen($tmp) + 1));			// This will take care of the following notation: ":3306"			if ($this->options['host'] == '')			{				$this->options['host'] = 'localhost';			}		}		// Make sure the MySQLi extension for PHP is installed and enabled.		if (!function_exists('mysqli_connect'))		{			throw new RuntimeException('The MySQL adapter mysqli is not available');		}		$this->connection = @mysqli_connect(			$this->options['host'], $this->options['user'], $this->options['password'], null, $this->options['port'], $this->options['socket']		);		// Attempt to connect to the server.		if (!$this->connection)		{			throw new RuntimeException('Could not connect to MySQL.');		}		// Set sql_mode to non_strict mode		mysqli_query($this->connection, "SET @@SESSION.sql_mode = '';");		// If auto-select is enabled select the given database.		if ($this->options['select'] && !empty($this->options['database']))		{			$this->select($this->options['database']);		}		// Set charactersets (needed for MySQL 4.1.2+).		$this->setUTF();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		if (is_callable($this->connection, 'close'))		{			mysqli_close($this->connection);		}		$this->connection = null;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$this->connect();		$result = mysqli_real_escape_string($this->getConnection(), $text);		if ($extra)		{			$result = addcslashes($result, '%_');		}		return $result;	}	/**	 * Test to see if the MySQL connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('mysqli_connect'));	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		if (is_object($this->connection))		{			return mysqli_ping($this->connection);		}		return false;	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true);		$this->setQuery('DROP TABLE ' . ($ifExists ? 'IF EXISTS ' : '') . $query->quoteName($tableName));		$this->execute();		return $this;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		return mysqli_affected_rows($this->connection);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database (string) or boolean false if not supported.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getCollation()	{		$this->connect();		$this->setQuery('SHOW FULL COLUMNS FROM #__users');		$array = $this->loadAssocList();		return $array['2']['Collation'];	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		return mysqli_num_rows($cursor ? $cursor : $this->cursor);	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		$result = array();		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		foreach ($tables as $table)		{			// Set the query to get the table CREATE statement.			$this->setQuery('SHOW CREATE table ' . $this->quoteName($this->escape($table)));			$row = $this->loadRow();			// Populate the result array based on the create statements.			$result[$table] = $row[1];		}		return $result;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$result = array();		// Set the query to get the table fields statement.		$this->setQuery('SHOW FULL COLUMNS FROM ' . $this->quoteName($this->escape($table)));		$fields = $this->loadObjectList();		// If we only want the type as the value add just that to the list.		if ($typeOnly)		{			foreach ($fields as $field)			{				$result[$field->Field] = preg_replace("/[(0-9)]/", '', $field->Type);			}		}		// If we want the whole field data object add that to the list.		else		{			foreach ($fields as $field)			{				$result[$field->Field] = $field;			}		}		return $result;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		// Get the details columns information.		$this->setQuery('SHOW KEYS FROM ' . $this->quoteName($table));		$keys = $this->loadObjectList();		return $keys;	}	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		// Set the query to get the tables statement.		$this->setQuery('SHOW TABLES');		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		return mysqli_get_server_info($this->connection);	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		return mysqli_insert_id($this->connection);	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function lockTable($table)	{		$this->setQuery('LOCK TABLES ' . $this->quoteName($table) . ' WRITE')->execute();		return $this;	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function execute()	{		$this->connect();		if (!is_object($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query .= ' LIMIT ' . $this->offset . ', ' . $this->limit;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @mysqli_query($this->connection, $query);		// If an error occurred handle it.		if (!$this->cursor)		{			$this->errorNum = (int) mysqli_errno($this->connection);			$this->errorMsg = (string) mysqli_error($this->connection) . ' SQL=' . $query;			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->cursor;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by MySQL.	 * @param   string  $prefix    Not used by MySQL.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('RENAME TABLE ' . $oldTable . ' TO ' . $newTable)->execute();		return $this;	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		if (!$database)		{			return false;		}		if (!mysqli_select_db($this->connection, $database))		{			throw new RuntimeException('Could not connect to database.');		}		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return $this->connection->set_charset('utf8');	}	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		$this->setQuery('COMMIT');		$this->execute();	}	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionRollback()	{		$this->connect();		$this->setQuery('ROLLBACK');		$this->execute();	}	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		$this->setQuery('START TRANSACTION');		$this->execute();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return mysqli_fetch_row($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return mysqli_fetch_assoc($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return mysqli_fetch_object($cursor ? $cursor : $this->cursor, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		mysqli_free_result($cursor ? $cursor : $this->cursor);	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->setQuery('UNLOCK TABLES')->execute();		return $this;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JMenu class * * @package     Joomla.Libraries * @subpackage  Menu * @since       1.5 */class JMenuSite extends JMenu{	/**	 * Loads the entire menu table into memory.	 *	 * @return  array	 */	public function load()	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('m.id, m.menutype, m.title, m.alias, m.note, m.path AS route, m.link, m.type, m.level, m.language')			->select($db->quoteName('m.browserNav') . ', m.access, m.params, m.home, m.img, m.template_style_id, m.component_id, m.parent_id')			->select('e.element as component')			->from('#__menu AS m')			->join('LEFT', '#__extensions AS e ON m.component_id = e.extension_id')			->where('m.published = 1')			->where('m.parent_id > 0')			->where('m.client_id = 0')			->order('m.lft');		// Set the query		$db->setQuery($query);		try		{			$this->_items = $db->loadObjectList('id');		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, JText::sprintf('JERROR_LOADING_MENUS', $e->getMessage()));			return false;		}		foreach ($this->_items as &$item)		{			// Get parent information.			$parent_tree = array();			if (isset($this->_items[$item->parent_id]))			{				$parent_tree  = $this->_items[$item->parent_id]->tree;			}			// Create tree.			$parent_tree[] = $item->id;			$item->tree = $parent_tree;			// Create the query array.			$url = str_replace('index.php?', '', $item->link);			$url = str_replace('&amp;', '&', $url);			parse_str($url, $item->query);		}	}	/**	 * Gets menu items by attribute	 *	 * @param   string   $attributes  The field name	 * @param   string   $values      The value of the field	 * @param   boolean  $firstonly   If true, only returns the first item found	 *	 * @return  array	 */	public function getItems($attributes, $values, $firstonly = false)	{		$attributes = (array) $attributes;		$values 	= (array) $values;		$app		= JApplication::getInstance('site');		if ($app->isSite())		{			// Filter by language if not set			if (($key = array_search('language', $attributes)) === false)			{				if (JLanguageMultilang::isEnabled())				{					$attributes[] 	= 'language';					$values[] 		= array(JFactory::getLanguage()->getTag(), '*');				}			}			elseif ($values[$key] === null)			{				unset($attributes[$key]);				unset($values[$key]);			}			// Filter by access level if not set			if (($key = array_search('access', $attributes)) === false)			{				$attributes[] = 'access';				$values[] = JFactory::getUser()->getAuthorisedViewLevels();			}			elseif ($values[$key] === null)			{				unset($attributes[$key]);				unset($values[$key]);			}		}		// Reset arrays or we get a notice if some values were unset		$attributes = array_values($attributes);		$values = array_values($values);		return parent::getItems($attributes, $values, $firstonly);	}	/**	 * Get menu item by id	 *	 * @param   string  $language  The language code.	 *	 * @return  object  The item object	 *	 * @since   1.5	 */	public function getDefault($language = '*')	{		if (array_key_exists($language, $this->_default) && JApplication::getInstance('site')->getLanguageFilter())		{			return $this->_items[$this->_default[$language]];		}		elseif (array_key_exists('*', $this->_default))		{			return $this->_items[$this->_default['*']];		}		else		{			return 0;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Language helper class * * @package     Joomla.Platform * @subpackage  Language * @since       11.1 */class JLanguageHelper{	/**	 * Builds a list of the system languages which can be used in a select option	 *	 * @param   string   $actualLanguage  Client key for the area	 * @param   string   $basePath        Base path to use	 * @param   boolean  $caching         True if caching is used	 * @param   array    $installed       An array of arrays (text, value, selected)	 *	 * @return  array  List of system languages	 *	 * @since   11.1	 */	public static function createLanguageList($actualLanguage, $basePath = JPATH_BASE, $caching = false, $installed = false)	{		$list = array();		// Cache activation		$langs = JLanguage::getKnownLanguages($basePath);		if ($installed)		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('element')				->from('#__extensions')				->where('type=' . $db->quote('language'))				->where('state=0')				->where('enabled=1')				->where('client_id=' . ($basePath == JPATH_ADMINISTRATOR ? 1 : 0));			$db->setQuery($query);			$installed_languages = $db->loadObjectList('element');		}		foreach ($langs as $lang => $metadata)		{			if (!$installed || array_key_exists($lang, $installed_languages))			{				$option = array();				$option['text'] = $metadata['name'];				$option['value'] = $lang;				if ($lang == $actualLanguage)				{					$option['selected'] = 'selected="selected"';				}				$list[] = $option;			}		}		return $list;	}	/**	 * Tries to detect the language.	 *	 * @return  string  locale or null if not found	 *	 * @since   11.1	 */	public static function detectLanguage()	{		if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE']))		{			$browserLangs = explode(',', $_SERVER['HTTP_ACCEPT_LANGUAGE']);			$systemLangs = self::getLanguages();			foreach ($browserLangs as $browserLang)			{				// Slice out the part before ; on first step, the part before - on second, place into array				$browserLang = substr($browserLang, 0, strcspn($browserLang, ';'));				$primary_browserLang = substr($browserLang, 0, 2);				foreach ($systemLangs as $systemLang)				{					// Take off 3 letters iso code languages as they can't match browsers' languages and default them to en					$Jinstall_lang = $systemLang->lang_code;					if (strlen($Jinstall_lang) < 6)					{						if (strtolower($browserLang) == strtolower(substr($systemLang->lang_code, 0, strlen($browserLang))))						{							return $systemLang->lang_code;						}						elseif ($primary_browserLang == substr($systemLang->lang_code, 0, 2))						{							$primaryDetectedLang = $systemLang->lang_code;						}					}				}				if (isset($primaryDetectedLang))				{					return $primaryDetectedLang;				}			}		}		return null;	}	/**	 * Get available languages	 *	 * @param   string  $key  Array key	 *	 * @return  array  An array of published languages	 *	 * @since   11.1	 */	public static function getLanguages($key = 'default')	{		static $languages;		if (empty($languages))		{			// Installation uses available languages			if (JFactory::getApplication()->getClientId() == 2)			{				$languages[$key] = array();				$knownLangs = JLanguage::getKnownLanguages(JPATH_BASE);				foreach ($knownLangs as $metadata)				{					// Take off 3 letters iso code languages as they can't match browsers' languages and default them to en					$obj = new stdClass;					$obj->lang_code = $metadata['tag'];					$languages[$key][] = $obj;				}			}			else			{				$cache = JFactory::getCache('com_languages', '');				if (!$languages = $cache->get('languages'))				{					$db = JFactory::getDbo();					$query = $db->getQuery(true)						->select('*')						->from('#__languages')						->where('published=1')						->order('ordering ASC');					$db->setQuery($query);					$languages['default'] = $db->loadObjectList();					$languages['sef'] = array();					$languages['lang_code'] = array();					if (isset($languages['default'][0]))					{						foreach ($languages['default'] as $lang)						{							$languages['sef'][$lang->sef] = $lang;							$languages['lang_code'][$lang->lang_code] = $lang;						}					}					$cache->store($languages, 'languages');				}			}		}		return $languages[$key];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$input     = JFactory::getApplication()->input;$field     = $input->getCmd('field');$function  = 'jSelectUser_'.$field;$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=users&layout=modal&tmpl=component&groups=' . $input->get('groups', '', 'BASE64') . '&excluded=' . $input->get('excluded', '', 'BASE64'));?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_NAME'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>			<button type="button" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('', '<?php echo JText::_('JLIB_FORM_SELECT_USER') ?>');"><?php echo JText::_('JOPTION_NO_USER')?></button>		</div>		<div class="filter-select">			<label for="filter_group_id">				<?php echo JText::_('COM_USERS_FILTER_USER_GROUP'); ?>			</label>			<?php echo JHtml::_('access.usergroup', 'filter_group_id', $this->state->get('filter.group_id')); ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width=25">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_USERNAME', 'a.username', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width=25">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_GROUPS', 'group_names', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php			$i = 0;			foreach ($this->items as $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $item->name; ?></a>				</td>				<td class="center">					<?php echo $item->username; ?>				</td>				<td class="title">					<?php echo nl2br($item->group_names); ?>				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Extended Utility class for batch processing widgets. * * @package     Joomla.Libraries * @subpackage  HTML * @since       1.7 */abstract class JHtmlBatch{	/**	 * Display a batch widget for the access level selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   1.7	 */	public static function access()	{		// Create the batch selector to change an access level on a selection list.		$lines = array(			'<label id="batch-access-lbl" for="batch-access" class="hasTip" title="' . JText::_('JLIB_HTML_BATCH_ACCESS_LABEL') . '::'			. JText::_('JLIB_HTML_BATCH_ACCESS_LABEL_DESC') . '">', JText::_('JLIB_HTML_BATCH_ACCESS_LABEL'), '</label>',			JHtml::_(				'access.assetgrouplist',				'batch[assetgroup_id]', '',				'class="inputbox"',				array(					'title' => JText::_('JLIB_HTML_BATCH_NOCHANGE'),					'id' => 'batch-access')			)		);		return implode("\n", $lines);	}	/**	 * Displays a batch widget for moving or copying items.	 *	 * @param   string  $extension  The extension that owns the category.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   1.7	 */	public static function item($extension)	{		// Create the copy/move options.		$options = array(JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),			JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));		// Create the batch selector to change select the category by which to move or copy.		$lines = array('<label id="batch-choose-action-lbl" for="batch-choose-action">', JText::_('JLIB_HTML_BATCH_MENU_LABEL'), '</label>',			'<div id="batch-choose-action" class="control-group">', '<select name="batch[category_id]" class="inputbox" id="batch-category-id">',			'<option value="">' . JText::_('JSELECT') . '</option>',			JHtml::_('select.options', JHtml::_('category.options', $extension)), '</select>',			'</div>', '<div id="batch-move-copy" class="control-group radio">',			JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'), '</div><hr />');		return implode("\n", $lines);	}	/**	 * Display a batch widget for the language selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function language()	{		// Create the batch selector to change the language on a selection list.		$lines = array(			'<label id="batch-language-lbl" for="batch-language-id" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL'),			'</label>',			'<select name="batch[language_id]" class="inputbox" id="batch-language-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_LANGUAGE_NOCHANGE') . '</option>',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text'),			'</select>',		);		return implode("\n", $lines);	}	/**	 * Display a batch widget for the user selector.	 *	 * @param   boolean  $noUser  Choose to display a "no user" option	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function user($noUser = true)	{		$optionNo = '';		if ($noUser)		{			$optionNo = '<option value="0">' . JText::_('JLIB_HTML_BATCH_USER_NOUSER') . '</option>';		}		// Create the batch selector to select a user on a selection list.		$lines = array(			'<label id="batch-user-lbl" for="batch-user" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_USER_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_USER_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_USER_LABEL'),			'</label>',			'<select name="batch[user_id]" class="inputbox" id="batch-user-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_USER_NOCHANGE') . '</option>',			$optionNo,			JHtml::_('select.options', JHtml::_('user.userlist'), 'value', 'text'),			'</select>'		);		return implode("\n", $lines);	}	/**	 * Display a batch widget for the tag selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   3.1	 */	public static function tag()	{		// Create the batch selector to tag items on a selection list.		$lines = array(			'<label id="batch-tag-lbl" for="batch-tag-id" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_TAG_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_TAG_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_TAG_LABEL'),			'</label>',			'<select name="batch[tag]" class="inputbox" id="batch-tag-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_TAG_NOCHANGE') . '</option>',			JHtml::_('select.options', JHtml::_('tag.tags', array('filter.published' => array(1))), 'value', 'text'),			'</select>'		);		return implode("\n", $lines);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Module model. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesModelSelect extends JModelList{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$clientId = $app->getUserState('com_modules.modules.filter.client_id', 0);		$this->setState('filter.client_id', (int) $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_modules');		$this->setState('params', $params);		// Manually set limits to get all modules.		$this->setState('list.limit', 0);		$this->setState('list.start', 0);		$this->setState('list.ordering', 'a.name');		$this->setState('list.direction', 'ASC');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id, a.name, a.element AS module'			)		);		$query->from($db->quoteName('#__extensions') . ' AS a');		// Filter by module		$query->where('a.type = ' . $db->quote('module'));		// Filter by client.		$clientId = $this->getState('filter.client_id');		$query->where('a.client_id = ' . (int) $clientId);		// Filter by enabled		$query->where('a.enabled = 1');		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function &getItems()	{		// Get the list of items from the database.		$items = parent::getItems();		$client = JApplicationHelper::getClientInfo($this->getState('filter.client_id', 0));		$lang = JFactory::getLanguage();		// Loop through the results to add the XML metadata,		// and load language support.		foreach ($items as &$item)		{			$path = JPath::clean($client->path . '/modules/' . $item->module . '/' . $item->module . '.xml');			if (file_exists($path))			{				$item->xml = simplexml_load_file($path);			}			else			{				$item->xml = null;			}			// 1.5 Format; Core files or language packs then			// 1.6 3PD Extension Support			$lang->load($item->module . '.sys', $client->path, null, false, false)				|| $lang->load($item->module . '.sys', $client->path . '/modules/' . $item->module, null, false, false)				|| $lang->load($item->module . '.sys', $client->path, $lang->getDefault(), false, false)				|| $lang->load($item->module . '.sys', $client->path . '/modules/' . $item->module, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);			if (isset($item->xml) && $text = trim($item->xml->description))			{				$item->desc = JText::_($text);			}			else			{				$item->desc = JText::_('COM_MODULES_NODESCRIPTION');			}		}		$items = JArrayHelper::sortObjects($items, 'name', 1, true, $lang->getLocale());		// TODO: Use the cached XML from the extensions table?		return $items;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');// If the page class is defined, add to class as suffix.// It will be a separate class if the user starts it with a space?><div class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading') != 0) : ?><div class="page-header">	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1></div><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<div class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</div>		<div class="clearfix"></div>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><div class="clearfix"></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>		<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>		<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?> row-fluid">		<?php endif; ?>			<div class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?> span<?php echo round((12 / $this->columns));?>">			<?php					$this->item = &$item;					echo $this->loadTemplate('item');			?>			</div>			<?php $counter++; ?>			<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<div class="items-more">	<?php echo $this->loadTemplate('links'); ?>	</div><?php endif; ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * HTML behavior class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class JHtmlFinder{	/**	 * Creates a list of types to filter on.	 *	 * @return  array  An array containing the types that can be selected.	 *	 * @since   2.5	 */	public static function typeslist()	{		$lang = JFactory::getLanguage();		// Load the finder types.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT t.title AS text, t.id AS value')			->from($db->quoteName('#__finder_types') . ' AS t')			->join('LEFT', $db->quoteName('#__finder_links') . ' AS l ON l.type_id = t.id')			->order('t.title ASC');		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return;		}		// Compile the options.		$options = array();		foreach ($rows as $row)		{			$key = $lang->hasKey(FinderHelperLanguage::branchPlural($row->text))					? FinderHelperLanguage::branchPlural($row->text) : $row->text;			$string = JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_($key));			$options[] = JHtml::_('select.option', $row->value, $string);		}		return $options;	}	/**	 * Creates a list of maps.	 *	 * @return  array  An array containing the maps that can be selected.	 *	 * @since   2.5	 */	public static function mapslist()	{		$lang = JFactory::getLanguage();		// Load the finder types.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('title AS text, id AS value')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' = 1')			->order('ordering, title ASC');		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return;		}		// Compile the options.		$options = array();		$options[] = JHtml::_('select.option', '1', JText::_('COM_FINDER_MAPS_BRANCHES'));		foreach ($rows as $row)		{			$key = $lang->hasKey(FinderHelperLanguage::branchPlural($row->text))					? FinderHelperLanguage::branchPlural($row->text) : $row->text;			$string = JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_($key));			$options[] = JHtml::_('select.option', $row->value, $string);		}		return $options;	}	/**	 * Creates a list of published states.	 *	 * @return  array  An array containing the states that can be selected.	 *	 * @since   2.5	 */	public static function statelist()	{		$options = array();		$options[] = JHtml::_('select.option', '1', JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_('JPUBLISHED')));		$options[] = JHtml::_('select.option', '0', JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_('JUNPUBLISHED')));		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><div class="registration<?php echo $this->pageclass_sfx?>"><?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1><?php echo $this->escape($this->params->get('page_heading')); ?></h1>	</div><?php endif; ?>	<form id="member-registration" action="<?php echo JRoute::_('index.php?option=com_users&task=registration.register'); ?>" method="post" class="form-validate form-horizontal" enctype="multipart/form-data"><?php foreach ($this->form->getFieldsets() as $fieldset): // Iterate through the form fieldsets and display each one.?>	<?php $fields = $this->form->getFieldset($fieldset->name);?>	<?php if (count($fields)):?>		<fieldset>		<?php if (isset($fieldset->label)):// If the fieldset has a label set, display it as the legend.		?>			<legend><?php echo JText::_($fieldset->label);?></legend>		<?php endif;?>		<?php foreach ($fields as $field) :// Iterate through the fields in the set and display them.?>			<?php if ($field->hidden):// If the field is hidden, just display the input.?>				<?php echo $field->input;?>			<?php else:?>				<div class="control-group">					<div class="control-label">					<?php echo $field->label; ?>					<?php if (!$field->required && $field->type != 'Spacer') : ?>						<span class="optional"><?php echo JText::_('COM_USERS_OPTIONAL');?></span>					<?php endif; ?>					</div>					<div class="controls">						<?php echo $field->input;?>					</div>				</div>			<?php endif;?>		<?php endforeach;?>		</fieldset>	<?php endif;?><?php endforeach;?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><?php echo JText::_('JREGISTER');?></button>			<a class="btn" href="<?php echo JRoute::_('');?>" title="<?php echo JText::_('JCANCEL');?>"><?php echo JText::_('JCANCEL');?></a>			<input type="hidden" name="option" value="com_users" />			<input type="hidden" name="task" value="registration.register" />			<?php echo JHtml::_('form.token');?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('metadata');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-options');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">			<?php if ($name == 'jmetadata') : // Include the real fields in this panel. ?>				<li><?php echo $this->form->getLabel('metadesc'); ?>				<?php echo $this->form->getInput('metadesc'); ?></li>				<li><?php echo $this->form->getLabel('metakey'); ?>				<?php echo $this->form->getInput('metakey'); ?></li>				<li><?php echo $this->form->getLabel('xreference'); ?>				<?php echo $this->form->getInput('xreference'); ?></li>			<?php endif; ?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_contact')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller = JControllerLegacy::getInstance('contact');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('behavior.modal');JHtml::_('formbehavior.chosen', 'select');$uri = JUri::getInstance();$return = base64_encode($uri);$user = JFactory::getUser();$userId = $user->get('id');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn = $this->escape($this->state->get('list.direction'));$modMenuId = (int) $this->get('ModMenuId');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task != 'menus.delete' || confirm('<?php echo JText::_('COM_MENUS_MENU_CONFIRM_DELETE', true);?>'))		{			Joomla.submitform(task);		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_menus&view=menus');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_MENUS_MENU_SEARCH_FILTER');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MENUS_MENU_SEARCH_FILTER'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap center hidden-phone">						<?php echo JText::_('COM_MENUS_HEADING_PUBLISHED_ITEMS'); ?>					</th>					<th width="10%" class="nowrap center hidden-phone">						<?php echo JText::_('COM_MENUS_HEADING_UNPUBLISHED_ITEMS'); ?>					</th>					<th width="10%" class="nowrap center hidden-phone">						<?php echo JText::_('COM_MENUS_HEADING_TRASHED_ITEMS'); ?>					</th>					<th width="20%" class="nowrap hidden-phone">						<?php echo JText::_('COM_MENUS_HEADING_LINKED_MODULES'); ?>					</th>					<th width="1%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create',     'com_menus');				$canEdit   = $user->authorise('core.edit',       'com_menus');				$canChange = $user->authorise('core.edit.state', 'com_menus');			?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype) ?> ">							<?php echo $this->escape($item->title); ?></a>						<p class="small">(<span><?php echo JText::_('COM_MENUS_MENU_MENUTYPE_LABEL') ?></span>							<?php if ($canEdit) : ?>								<?php echo '<a href="'.JRoute::_('index.php?option=com_menus&task=menu.edit&id='.$item->id).' title='.$this->escape($item->description).'">'.								$this->escape($item->menutype).'</a>'; ?>)							<?php else : ?>								<?php echo $this->escape($item->menutype)?>)							<?php endif; ?>						</p>					</td>					<td class="center btns">						<a class="badge badge-success" href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=1');?>">							<?php echo $item->count_published; ?></a>					</td>					<td class="center btns">						<a class="badge" href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=0');?>">							<?php echo $item->count_unpublished; ?></a>					</td>					<td class="center btns">						<a class="badge badge-error" href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=-2');?>">							<?php echo $item->count_trashed; ?></a>					</td>					<td class="left">						<?php if (isset($this->modules[$item->menutype])) : ?>							<div class="btn-group">								<a href="#" class="btn btn-small dropdown-toggle" data-toggle="dropdown">									<?php echo JText::_('COM_MENUS_MODULES') ?>									<b class="caret"></b>								</a>								<ul class="dropdown-menu">									<?php foreach ($this->modules[$item->menutype] as &$module) : ?>										<li>											<?php if ($canEdit) : ?>												<a class="small modal" href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.$module->id.'&return='.$return.'&tmpl=component&layout=modal');?>" rel="{handler: 'iframe', size: {x: 1024, y: 450}, onClose: function() {window.location.reload()}}" title="<?php echo JText::_('COM_MENUS_EDIT_MODULE_SETTINGS');?>">												<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?></a>											<?php else :?>												<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?>											<?php endif; ?>										</li>									<?php endforeach; ?>								</ul>							 </div>						<?php elseif ($modMenuId) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_modules&task=module.add&eid=' . $modMenuId . '&params[menutype]='.$item->menutype); ?>">							<?php echo JText::_('COM_MENUS_ADD_MENU_MODULE'); ?></a>						<?php endif; ?>					</td>					<td class="center">						<?php echo $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if ($this->user->get('guest')):	// The user is not logged in.	echo $this->loadTemplate('login');else:	// The user is already logged in.	echo $this->loadTemplate('logout');endif;
<?php/** * @package     Joomla.Platform * @subpackage  Plugin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Plugin helper class * * @package     Joomla.Platform * @subpackage  Plugin * @since       11.1 */abstract class JPluginHelper{	/**	 * A persistent cache of the loaded plugins.	 *	 * @var    array	 * @since  11.3	 */	protected static $plugins = null;	/**	 * Get the path to a layout from a Plugin	 *	 * @param   string  $type    Plugin type	 * @param   string  $name    Plugin name	 * @param   string  $layout  Layout name	 *	 * @return  string  Layout path	 *	 * @since   12.2	 */	public static function getLayoutPath($type, $name, $layout = 'default')	{		$template = JFactory::getApplication()->getTemplate();		$defaultLayout = $layout;		if (strpos($layout, ':') !== false)		{			// Get the template and file name from the string			$temp = explode(':', $layout);			$template = ($temp[0] == '_') ? $template : $temp[0];			$layout = $temp[1];			$defaultLayout = ($temp[1]) ? $temp[1] : 'default';		}		// Build the template and base path for the layout		$tPath = JPATH_THEMES . '/' . $template . '/html/plg_' . $type . '_' . $name . '/' . $layout . '.php';		$bPath = JPATH_BASE . '/plugins/' . $type . '/' . $name . '/tmpl/' . $defaultLayout . '.php';		$dPath = JPATH_BASE . '/plugins/' . $type . '/' . $name . '/tmpl/default.php';		// If the template has a layout override use it		if (file_exists($tPath))		{			return $tPath;		}		elseif (file_exists($bPath))		{			return $bPath;		}		else		{			return $dPath;		}	}	/**	 * Get the plugin data of a specific type if no specific plugin is specified	 * otherwise only the specific plugin data is returned.	 *	 * @param   string  $type    The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string  $plugin  The plugin name.	 *	 * @return  mixed  An array of plugin data objects, or a plugin data object.	 *	 * @since   11.1	 */	public static function getPlugin($type, $plugin = null)	{		$result = array();		$plugins = self::_load();		// Find the correct plugin(s) to return.		if (!$plugin)		{			foreach ($plugins as $p)			{				// Is this the right plugin?				if ($p->type == $type)				{					$result[] = $p;				}			}		}		else		{			foreach ($plugins as $p)			{				// Is this plugin in the right group?				if ($p->type == $type && $p->name == $plugin)				{					$result = $p;					break;				}			}		}		return $result;	}	/**	 * Checks if a plugin is enabled.	 *	 * @param   string  $type    The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string  $plugin  The plugin name.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public static function isEnabled($type, $plugin = null)	{		$result = self::getPlugin($type, $plugin);		return (!empty($result));	}	/**	 * Loads all the plugin files for a particular type if no specific plugin is specified	 * otherwise only the specific plugin is loaded.	 *	 * @param   string            $type        The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string            $plugin      The plugin name.	 * @param   boolean           $autocreate  Autocreate the plugin.	 * @param   JEventDispatcher  $dispatcher  Optionally allows the plugin to use a different dispatcher.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public static function importPlugin($type, $plugin = null, $autocreate = true, JEventDispatcher $dispatcher = null)	{		static $loaded = array();		// Check for the default args, if so we can optimise cheaply		$defaults = false;		if (is_null($plugin) && $autocreate == true && is_null($dispatcher))		{			$defaults = true;		}		if (!isset($loaded[$type]) || !$defaults)		{			$results = null;			// Load the plugins from the database.			$plugins = self::_load();			// Get the specified plugin(s).			for ($i = 0, $t = count($plugins); $i < $t; $i++)			{				if ($plugins[$i]->type == $type && ($plugin === null || $plugins[$i]->name == $plugin))				{					self::_import($plugins[$i], $autocreate, $dispatcher);					$results = true;				}			}			// Bail out early if we're not using default args			if (!$defaults)			{				return $results;			}			$loaded[$type] = $results;		}		return $loaded[$type];	}	/**	 * Loads the plugin file.	 *	 * @param   object            $plugin      The plugin.	 * @param   boolean           $autocreate  True to autocreate.	 * @param   JEventDispatcher  $dispatcher  Optionally allows the plugin to use a different dispatcher.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _import($plugin, $autocreate = true, JEventDispatcher $dispatcher = null)	{		static $paths = array();		$plugin->type = preg_replace('/[^A-Z0-9_\.-]/i', '', $plugin->type);		$plugin->name = preg_replace('/[^A-Z0-9_\.-]/i', '', $plugin->name);		$path = JPATH_PLUGINS . '/' . $plugin->type . '/' . $plugin->name . '/' . $plugin->name . '.php';		if (!isset($paths[$path]))		{			if (file_exists($path))			{				if (!isset($paths[$path]))				{					require_once $path;				}				$paths[$path] = true;				if ($autocreate)				{					// Makes sure we have an event dispatcher					if (!is_object($dispatcher))					{						$dispatcher = JEventDispatcher::getInstance();					}					$className = 'plg' . $plugin->type . $plugin->name;					if (class_exists($className))					{						// Load the plugin from the database.						if (!isset($plugin->params))						{							// Seems like this could just go bye bye completely							$plugin = self::getPlugin($plugin->type, $plugin->name);						}						// Instantiate and register the plugin.						new $className($dispatcher, (array) ($plugin));					}				}			}			else			{				$paths[$path] = false;			}		}	}	/**	 * Loads the published plugins.	 *	 * @return  array  An array of published plugins	 *	 * @since   11.1	 */	protected static function _load()	{		if (self::$plugins !== null)		{			return self::$plugins;		}		$user = JFactory::getUser();		$cache = JFactory::getCache('com_plugins', '');		$levels = implode(',', $user->getAuthorisedViewLevels());		if (!self::$plugins = $cache->get($levels))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('folder AS type, element AS name, params')				->from('#__extensions')				->where('enabled >= 1')				->where('type =' . $db->quote('plugin'))				->where('state >= 0')				->where('access IN (' . $levels . ')')				->order('ordering');			self::$plugins = $db->setQuery($query)->loadObjectList();			$cache->store(self::$plugins, $levels);		}		return self::$plugins;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_no($module, &$params, &$attribs){	if ($module->content)	{		echo $module->content;	}}function modChrome_well($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"well " . htmlspecialchars($params->get('moduleclass_sfx')) . "\">";		if ($module->showtitle)		{			echo "<h3 class=\"page-header\">" . $module->title . "</h3>";		}		echo $module->content;		echo "</div>";	}}?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.5 */class TemplatesModelSource extends JModelForm{	/**	 * Cache for the template information.	 *	 * @var        object	 */	private $_template = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		jimport('joomla.filesystem.file');		$app = JFactory::getApplication('administrator');		// Load the User state.		$id = $app->getUserState('com_templates.edit.source.id');		// Parse the template id out of the compound reference.		$temp = explode(':', base64_decode($id));		$this->setState('extension.id', (int) array_shift($temp));		$fileName = array_shift($temp);		$this->setState('filename', $fileName);		// Save the syntax for later use		$app->setUserState('editor.source.syntax', JFile::getExt($fileName));		// Load the parameters.		$params = JComponentHelper::getParams('com_templates');		$this->setState('params', $params);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Codemirror or Editor None should be enabled		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('COUNT(*)')			->from('#__extensions as a')			->where('(a.name =' . $db->quote('plg_editors_codemirror') . ' AND a.enabled = 1) OR (a.name =' . $db->quote('plg_editors_none') . ' AND a.enabled = 1)');		$db->setQuery($query);		$state = $db->loadResult();		if ((int) $state < 1)		{			$app->enqueueMessage(JText::_('COM_TEMPLATES_ERROR_EDITOR_DISABLED'), 'warning');		}		// Get the form.		$form = $this->loadForm('com_templates.source', 'source', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_templates.edit.source.data', array());		if (empty($data))		{			$data = $this->getSource();		}		$this->preprocessData('com_templates.source', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function &getSource()	{		$item = new stdClass;		if (!$this->_template)		{			$this->getTemplate();		}		if ($this->_template)		{			$fileName = $this->getState('filename');			$client = JApplicationHelper::getClientInfo($this->_template->client_id);			$filePath = JPath::clean($client->path . '/templates/' . $this->_template->element . '/' . $fileName);			if (file_exists($filePath))			{				$item->extension_id = $this->getState('extension.id');				$item->filename = $this->getState('filename');				$item->source = file_get_contents($filePath);			}			else			{				$this->setError(JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_FOUND'));			}		}		return $item;	}	/**	 * Method to get the template information.	 *	 * @return  mixed  Object if successful, false if not and internal error is set.	 * @since   1.6	 */	public function &getTemplate()	{		$pk = $this->getState('extension.id');		$db = $this->getDbo();		$result = false;		// Get the template information.		$db->setQuery(			'SELECT extension_id, client_id, element' .				' FROM #__extensions' .				' WHERE extension_id = ' . (int) $pk .				'  AND type = ' . $db->quote('template')		);		try		{			$result = $db->loadObject();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			$this->_template = false;			return false;		}		if (empty($result))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_EXTENSION_RECORD_NOT_FOUND'));			$this->_template = false;		}		else		{			$this->_template = $result;		}		return $this->_template;	}	/**	 * Method to store the source file contents.	 *	 * @param   array  The souce data to save.	 *	 * @return  boolean  True on success, false otherwise and internal error set.	 * @since   1.6	 */	public function save($data)	{		jimport('joomla.filesystem.file');		// Get the template.		$template = $this->getTemplate();		if (empty($template))		{			return false;		}		$dispatcher = JEventDispatcher::getInstance();		$fileName = $this->getState('filename');		$client = JApplicationHelper::getClientInfo($template->client_id);		$filePath = JPath::clean($client->path . '/templates/' . $template->element . '/' . $fileName);		// Include the extension plugins for the save events.		JPluginHelper::importPlugin('extension');		// Set FTP credentials, if given.		JClientHelper::setCredentialsFromRequest('ftp');		$ftp = JClientHelper::getCredentials('ftp');		// Try to make the template file writeable.		if (!$ftp['enabled'] && JPath::isOwner($filePath) && !JPath::setPermissions($filePath, '0644'))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_WRITABLE'));			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_templates.source', &$data, false));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		$return = JFile::write($filePath, $data['source']);		// Try to make the template file unwriteable.		if (!$ftp['enabled'] && JPath::isOwner($filePath) && !JPath::setPermissions($filePath, '0444'))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_UNWRITABLE'));			return false;		}		elseif (!$return)		{			$this->setError(JText::sprintf('COM_TEMPLATES_ERROR_FAILED_TO_SAVE_FILENAME', $fileName));			return false;		}		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_templates.source', &$table, false));		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link model. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectModelLink extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_REDIRECT';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if ($record->published != -2)		{			return false;		}		$user = JFactory::getUser();		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check the component since there are no categories or other assets.		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Link', $prefix = 'RedirectTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_redirect.link', 'link', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if ($this->canEditState((object) $data) != true)		{			// Disable fields for display.			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_redirect.edit.link.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_redirect.link', $data);		return $data;	}	/**	 * Method to activate links.	 *	 * @param   array     An array of link ids.	 * @param   string    The new URL to set for the redirect.	 * @param   string    A comment for the redirect links.	 * @return  boolean  Returns true on success, false on failure.	 * @since   1.6	 */	public function activate(&$pks, $url, $comment = null)	{		$user = JFactory::getUser();		$db = $this->getDbo();		// Sanitize the ids.		$pks = (array) $pks;		JArrayHelper::toInteger($pks);		// Populate default comment if necessary.		$comment = (!empty($comment)) ? $comment : JText::sprintf('COM_REDIRECT_REDIRECTED_ON', JHtml::_('date', time()));		// Access checks.		if (!$user->authorise('core.admin', 'com_redirect'))		{			$pks = array();			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			return false;		}		if (!empty($pks))		{			// Update the link rows.			$query = $db->getQuery(true)				->update($db->quoteName('#__redirect_links'))				->set($db->quoteName('new_url') . ' = ' . $db->quote($url))				->set($db->quoteName('published') . ' = ' . $db->quote(1))				->set($db->quoteName('comment') . ' = ' . $db->quote($comment))				->where($db->quoteName('id') . ' IN (' . implode(',', $pks) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to install additional languages for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallLanguages extends JControllerBase{	/**	 * Constructor.	 *	 * @since   3.1	 */	public function __construct()	{		parent::__construct();		// Overrides application config and set the configuration.php file so tokens and database works		JFactory::$config = null;		JFactory::getConfig(JPATH_SITE . '/configuration.php');		JFactory::$session = null;	}	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get array of selected languages		$lids = $this->input->get('cid', array(), 'array');		JArrayHelper::toInteger($lids, array());		// Get the languages model.		$model = new InstallationModelLanguages;		if (!$lids)		{			// No languages have been selected			$app->enqueueMessage(JText::_('INSTL_LANGUAGES_NO_LANGUAGE_SELECTED'));		}		else		{			// Install selected languages			$model->install($lids);		}		$r = new stdClass;		// Redirect to the page.		$r = new stdClass;		$r->view = 'defaultlanguage';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for generating Linkedin API access token. * * @package     Joomla.Platform * @subpackage  Linkedin * * @since       13.1 */class JLinkedinOauth extends JOAuth1Client{	/**	* @var    JRegistry  Options for the JLinkedinOauth object.	* @since  13.1	*/	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  JLinkedinOauth options object.	 * @param   JHttp      $client   The HTTP client object.	 * @param   JInput     $input    The input object	 *	 * @since 13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JInput $input = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->options->def('accessTokenURL', 'https://www.linkedin.com/uas/oauth/accessToken');		$this->options->def('authenticateURL', 'https://www.linkedin.com/uas/oauth/authenticate');		$this->options->def('authoriseURL', 'https://www.linkedin.com/uas/oauth/authorize');		$this->options->def('requestTokenURL', 'https://www.linkedin.com/uas/oauth/requestToken');		// Call the JOauthV1aclient constructor to setup the object.		parent::__construct($this->options, $client, $input);	}	/**	 * Method to verify if the access token is valid by making a request to an API endpoint.	 *	 * @return  boolean  Returns true if the access token is valid and false otherwise.	 *	 * @since   13.1	 */	public function verifyCredentials()	{		$token = $this->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		$data['format'] = 'json';		// Set the API url.		$path = 'https://api.linkedin.com/v1/people::(~)';		// Send the request.		$response = $this->oauthRequest($path, 'GET', $parameters, $data);		// Verify response		if ($response->code == 200)		{			return true;		}		else		{			return false;		}	}	/**	 * Method to validate a response.	 *	 * @param   string         $url       The request URL.	 * @param   JHttpResponse  $response  The response to validate.	 *	 * @return  void	 *	 * @since  13.1	 * @throws DomainException	 */	public function validateResponse($url, $response)	{		if (!$code = $this->getOption('success_code'))		{			$code = 200;		}		if (strpos($url, '::(~)') === false && $response->code != $code)		{			if ($error = json_decode($response->body))			{				throw new DomainException('Error code ' . $error->errorCode . ' received with message: ' . $error->message . '.');			}			else			{				throw new DomainException($response->body);			}		}	}	/**	 * Method used to set permissions.	 *	 * @param   mixed  $scope  String or an array of string containing permissions.	 *	 * @return  JLinkedinOauth  This object for method chaining	 *	 * @see     https://developer.linkedin.com/documents/authentication	 * @since   13.1	 */	public function setScope($scope)	{		$this->setOption('scope', $scope);		return $this;	}	/**	 * Method to get the current scope	 *	 * @return  string String or an array of string containing permissions.	 *	 * @since   13.1	 */	public function getScope()	{		return $this->getOption('scope');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class JFormFieldNewsfeeds extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Newsfeeds';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('id As value, name As text')			->from('#__newsfeeds AS a')			->order('a.name');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $db->getMessage());		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with directory * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlDirectory{	/**	 * Method to generate a (un)writable message for directory	 *	 * @param   boolean	$writable is the directory writable?	 *	 * @return  string	html code	 */	public static function writable($writable)	{		if ($writable)		{			return '<span class="badge badge-success">'. JText::_('COM_ADMIN_WRITABLE') .'</span>';		}		else		{			return '<span class="badge badge-important">'. JText::_('COM_ADMIN_UNWRITABLE') .'</span>';		}	}	/**	 * Method to generate a message for a directory	 *	 * @param   string	$dir the directory	 * @param   boolean	$message the message	 * @param   boolean	$visible is the $dir visible?	 *	 * @return  string	html code	 */	public static function message($dir, $message, $visible=true)	{		if ($visible)		{			$output = $dir;		}		else		{			$output = '';		}		if (empty($message))		{			return $output;		}		else		{			return $output.' <strong>'.JText::_($message).'</strong>';		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=debuguser&user_id='.(int) $this->state->get('filter.user_id'));?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?></legend>		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_USERS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_RESET'); ?></button>		</div>		<div class="filter-select fltrt">			<label class="selectlabel" for="filter_component"><?php echo JText::_('COM_USERS_OPTION_SELECT_COMPONENT'); ?></label>			<select name="filter_component" class="inputbox" id="filter_component">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_COMPONENT');?></option>				<?php if (!empty($this->components))				{					echo JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));				}?>			</select>			<label class="selectlabel" for="filter_level_start"><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'); ?></label>			<select name="filter_level_start" class="inputbox" id="filter_level_start">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_START');?></option>				<?php echo JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'));?>			</select>			<label class="selectlabel" for="filter_level_end"><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'); ?></label>			<select name="filter_level_end" class="inputbox" id="filter_level_end">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_END');?></option>				<?php echo JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<div>		<?php echo JText::_('COM_USERS_DEBUG_LEGEND'); ?>		<span class="swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_NO_CHECK', '-');?></span>		<span class="check-0 swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_IMPLICIT_DENY', '-');?></span>		<span class="check-a swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_EXPLICIT_ALLOW', '&#10003;');?></span>		<span class="check-d swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_EXPLICIT_DENY', '&#10007;');?></span>	</div>	<table class="adminlist">		<thead>			<tr>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<?php foreach ($this->actions as $key => $action) : ?>				<th class="width-5">					<span class="hasTip" title="<?php echo htmlspecialchars(JText::_($key).'::'.JText::_($action[1]), ENT_COMPAT, 'UTF-8'); ?>"><?php echo JText::_($key); ?></span>				</th>				<?php endforeach; ?>				<th class="width-5 nowrap">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LFT', 'a.lft', $listDirn, $listOrder); ?>				</th>				<th class="width-5 nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row1">				<th>					<?php echo $this->escape($item->title); ?>				</th>				<td class="nowrap">					<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>					<?php echo $this->escape($item->name); ?>				</td>				<?php foreach ($this->actions as $action) : ?>					<?php					$name	= $action[0];					$check	= $item->checks[$name];					if ($check === true) :						$class	= 'check-a';						$text	= '&#10003;';					elseif ($check === false) :						$class	= 'check-d';						$text	= '&#10007;';					elseif ($check === null) :						$class	= 'check-0';						$text	= '-';					else :						$class	= '';						$text	= '&#160;';					endif;					?>				<td class="center <?php echo $class;?>">					<?php echo $text; ?>				</td>				<?php endforeach; ?>				<td class="center">					<?php echo (int) $item->lft; ?>					- <?php echo (int) $item->rgt; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_newsfeeds.category');$saveOrder	= $listOrder == 'a.ordering';$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'newsfeeds.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES_HEADING', 'numarticles', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_CACHE_TIME_HEADING', 'a.cache_time', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>					<th class="width-5">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>				<?php endif;?>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'a.ordering');			$canCreate  = $user->authorise('core.create',     'com_newsfeeds.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_newsfeeds.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_newsfeeds.category.' . $item->catid) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'newsfeeds.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_newsfeeds&task=newsfeed.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>							<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'newsfeeds.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'newsfeeds.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'newsfeeds.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'newsfeeds.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'newsfeeds.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo (int) $item->numarticles; ?>				</td>				<td class="center">					<?php echo (int) $item->cache_time; ?>				</td>				<?php if ($assoc) : ?>					<td class="center">						<?php if ($item->association) : ?>							<?php echo JHtml::_('newsfeed.association', $item->id); ?>						<?php endif; ?>					</td>				<?php endif;?>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset id="filter-bar"><legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>	<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>	</div>	<div class="filter-select">			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('COM_INSTALLER_VALUE_CLIENT_SELECT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<?php echo JHtml::_('select.options', array('0' => JText::_('JSITE'), '1' => JText::_('JADMINISTRATOR')), 'value', 'text', $this->state->get('filter.client_id'), true);?>			</select>            <label class="selectlabel" for="filter_status">				<?php echo JText::_('COM_INSTALLER_VALUE_STATE_SELECT'); ?>			</label>			<select name="filter_status" class="inputbox" id="filter_status">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', InstallerHelper::getExtensionTypes(), 'value', 'text', $this->state->get('filter.status'), true);?>			</select>            <label class="selectlabel" for="filter_type">				<?php echo JText::_('COM_INSTALLER_VALUE_TYPE_SELECT'); ?>			</label>			<select name="filter_type" class="inputbox" id="filter_type">				<option value=""><?php echo JText::_('COM_INSTALLER_VALUE_TYPE_SELECT');?></option>				<?php echo JHtml::_('select.options', InstallerHelper::getExtensionTypes(), 'value', 'text', $this->state->get('filter.type'), true);?>			</select>			<label class="selectlabel" for="filter_group">				<?php echo JText::_('COM_INSTALLER_VALUE_FOLDER_SELECT'); ?>			</label>			<select name="filter_group" class="inputbox" id="filter_group">				<option value=""><?php echo JText::_('COM_INSTALLER_VALUE_FOLDER_SELECT');?></option>				<?php echo JHtml::_('select.options', array_merge(InstallerHelper::getExtensionGroupes(), array('*' => JText::_('COM_INSTALLER_VALUE_FOLDER_NONAPPLICABLE'))), 'value', 'text', $this->state->get('filter.group'), true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div></fieldset><div class="clr"></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Joomla! update controller for the Update view * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateControllerUpdate extends JControllerLegacy{	/**	 * Performs the download of the update package	 *	 * @return  void	 *	 * @since   2.5.4	 */	public function download()	{		$this->_applyCredentials();		$model = $this->getModel('Default');		$file = $model->download();		$message = null;		$messageType = null;		if ($file)		{			JFactory::getApplication()->setUserState('com_joomlaupdate.file', $file);			$url = 'index.php?option=com_joomlaupdate&task=update.install';		}		else		{			JFactory::getApplication()->setUserState('com_joomlaupdate.file', null);			$url = 'index.php?option=com_joomlaupdate';			$message = JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_DOWNLOADFAILED');		}		$this->setRedirect($url, $message, $messageType);	}	/**	 * Start the installation of the new Joomla! version	 *	 * @return  void	 *	 * @since   2.5.4	 */	public function install()	{		$this->_applyCredentials();		$model = $this->getModel('Default');		$file = JFactory::getApplication()->getUserState('com_joomlaupdate.file', null);		$model->createRestorationFile($file);		$this->display();	}	/**	 * Finalise the upgrade by running the necessary scripts	 *	 * @return  void	 *	 * @since   2.5.4	 */	public function finalise()	{		$this->_applyCredentials();		$model = $this->getModel('Default');		$model->finaliseUpgrade();		$url = 'index.php?option=com_joomlaupdate&task=update.cleanup';		$this->setRedirect($url);	}	/**	 * Clean up after ourselves	 *	 * @return  void	 *	 * @since   2.5.4	 */	public function cleanup()	{		$this->_applyCredentials();		$model = $this->getModel('Default');		$model->cleanUp();		$url = 'index.php?option=com_joomlaupdate&layout=complete';		$this->setRedirect($url);	}	/**	 * Purges updates.	 *	 * @return  void	 *	 * @since	3.0	 */	public function purge()	{		// Purge updates		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Default');		$model->purge();		$url = 'index.php?option=com_joomlaupdate';		$this->setRedirect($url, $model->_message);	}	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JoomlaupdateControllerUpdate  This object to support chaining.	 *	 * @since	2.5.4	 */	public function display($cachable = false, $urlparams = array())	{		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'update');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			// Get the model for the view.			$model = $this->getModel('Default');			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			$view->display();		}		return $this;	}	/**	 * Applies FTP credentials to Joomla! itself, when required	 *	 * @return  void	 *	 * @since	2.5.4	 */	protected function _applyCredentials()	{		if (!JClientHelper::hasCredentials('ftp'))		{			$user = JFactory::getApplication()->getUserStateFromRequest('com_joomlaupdate.ftp_user', 'ftp_user', null, 'raw');			$pass = JFactory::getApplication()->getUserStateFromRequest('com_joomlaupdate.ftp_pass', 'ftp_pass', null, 'raw');			if ($user != '' && $pass != '')			{				// Add credentials to the session				if (JClientHelper::setCredentials('ftp', $user, $pass))				{					$return = false;				}				else				{					$return = JError::raiseWarning('SOME_ERROR_CODE', JText::_('JLIB_CLIENT_ERROR_HELPER_SETCREDENTIALSFROMREQUEST_FAILED'));				}			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Menus component helper. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusHelper{	/**	 * Defines the valid request variables for the reverse lookup.	 */	protected static $_filter = array('option', 'view', 'layout');	/**	 * Configure the Linkbar.	 *	 * @param   string    The name of the active view.	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_MENUS_SUBMENU_MENUS'),			'index.php?option=com_menus&view=menus',			$vName == 'menus'		);		JHtmlSidebar::addEntry(			JText::_('COM_MENUS_SUBMENU_ITEMS'),			'index.php?option=com_menus&view=items',			$vName == 'items'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The menu ID.	 *	 * @return  JObject	 * @since   1.6	 */	public static function getActions($parentId = 0)	{		$user = JFactory::getUser();		$result = new JObject;		if (empty($parentId))		{			$assetName = 'com_menus';		}		else		{			$assetName = 'com_menus.item.' . (int) $parentId;		}		$actions = JAccess::getActions('com_menus');		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Gets a standard form of a link for lookups.	 *	 * @param   mixed    A link string or array of request variables.	 *	 * @return  mixed  A link in standard option-view-layout form, or false if the supplied response is invalid.	 */	public static function getLinkKey($request)	{		if (empty($request))		{			return false;		}		// Check if the link is in the form of index.php?...		if (is_string($request))		{			$args = array();			if (strpos($request, 'index.php') === 0)			{				parse_str(parse_url(htmlspecialchars_decode($request), PHP_URL_QUERY), $args);			}			else			{				parse_str($request, $args);			}			$request = $args;		}		// Only take the option, view and layout parts.		foreach ($request as $name => $value)		{			if ((!in_array($name, self::$_filter)) && (!($name == 'task' && !array_key_exists('view', $request))))			{				// Remove the variables we want to ignore.				unset($request[$name]);			}		}		ksort($request);		return 'index.php?' . http_build_query($request, '', '&');	}	/**	 * Get the menu list for create a menu module	 *	 * @return    array    The menu array list	 * @since        1.6	 */	public static function getMenuTypes()	{		$db = JFactory::getDbo();		$db->setQuery('SELECT a.menutype FROM #__menu_types AS a');		return $db->loadColumn();	}	/**	 * Get a list of menu links for one or all menus.	 *	 * @param   string    An option menu to filter the list on, otherwise all menu links are returned as a grouped array.	 * @param   integer   An optional parent ID to pivot results around.	 * @param   integer   An optional mode. If parent ID is set and mode=2, the parent and children are excluded from the list.	 * @param   array     An optional array of states	 */	public static function getMenuLinks($menuType = null, $parentId = 0, $mode = 0, $published = array(), $languages = array())	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level, a.menutype, a.type, a.template_style_id, a.checked_out')			->from('#__menu AS a')			->join('LEFT', $db->quoteName('#__menu') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Filter by the type		if ($menuType)		{			$query->where('(a.menutype = ' . $db->quote($menuType) . ' OR a.parent_id = 0)');		}		if ($parentId)		{			if ($mode == 2)			{				// Prevent the parent and children from showing.				$query->join('LEFT', '#__menu AS p ON p.id = ' . (int) $parentId)					->where('(a.lft <= p.lft OR a.rgt >= p.rgt)');			}		}		if (!empty($languages))		{			if (is_array($languages))			{				$languages = '(' . implode(',', array_map(array($db, 'quote'), $languages)) . ')';			}			$query->where('a.language IN ' . $languages);		}		if (!empty($published))		{			if (is_array($published))			{				$published = '(' . implode(',', $published) . ')';			}			$query->where('a.published IN ' . $published);		}		$query->where('a.published != -2')			->group('a.id, a.title, a.level, a.menutype, a.type, a.template_style_id, a.checked_out, a.lft')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$links = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return false;		}		if (empty($menuType))		{			// If the menutype is empty, group the items by menutype.			$query->clear()				->select('*')				->from('#__menu_types')				->where('menutype <> ' . $db->quote(''))				->order('title, menutype');			$db->setQuery($query);			try			{				$menuTypes = $db->loadObjectList();			}			catch (RuntimeException $e)			{				JError::raiseWarning(500, $e->getMessage());				return false;			}			// Create a reverse lookup and aggregate the links.			$rlu = array();			foreach ($menuTypes as &$type)			{				$rlu[$type->menutype] = & $type;				$type->links = array();			}			// Loop through the list of menu links.			foreach ($links as &$link)			{				if (isset($rlu[$link->menutype]))				{					$rlu[$link->menutype]->links[] = & $link;					// Cleanup garbage.					unset($link->menutype);				}			}			return $menuTypes;		}		else		{			return $links;		}	}	static public function getAssociations($pk)	{		$associations = array();		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->from('#__menu as m')			->join('INNER', '#__associations as a ON a.id=m.id AND a.context=' . $db->quote('com_menus.item'))			->join('INNER', '#__associations as a2 ON a.key=a2.key')			->join('INNER', '#__menu as m2 ON a2.id=m2.id')			->where('m.id=' . (int) $pk)			->select('m2.language, m2.id');		$db->setQuery($query);		try		{			$menuitems = $db->loadObjectList('language');		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return false;		}		foreach ($menuitems as $tag => $item)		{			$associations[$tag] = $item->id;		}		return $associations;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?phpif (is_string($feed)){	echo $feed;}else{	$lang      = JFactory::getLanguage();	$myrtl     = $params->get('rssrtl');	$direction = '';	if ($lang->isRTL() && $myrtl == 0)	{		$direction = " redirect-rtl";	}	elseif ($lang->isRTL() && $myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($lang->isRTL() && $myrtl == 2)	{		$direction = " redirect-rtl";	}	elseif ($myrtl == 0)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 2)	{		$direction = " redirect-rtl";	}	?>	<?php if ($feed != false) : ?>	<?php	// Image handling	$iUrl   = isset($feed->image) ? $feed->image : null;	$iTitle = isset($feed->imagetitle) ? $feed->imagetitle : null;	?>	<div class="row-striped">	<div style="direction: <?php echo $rssrtl ? 'rtl' : 'ltr'; ?>; text-align: <?php echo $rssrtl ? 'right' : 'left'; ?> ! important"  class="feed<?php echo $moduleclass_sfx; ?>">	<?php if (!is_null($feed->title) && $params->get('rsstitle', 1)) : ?>		<h2 class="redirect-ltr">			<a href="<?php echo str_replace('&', '&amp', $feed->link); ?>" target="_blank">				<?php echo $feed->title; ?></a>		</h2>	<?php endif; ?>	<?php if ($params->get('rssdesc', 1)) : ?>		<?php echo $feed->description; ?>	<?php endif; ?>	<?php if ($params->get('rssimage', 1) && $iUrl) : ?>		<img src="<?php echo $iUrl; ?>" alt="<?php echo @$iTitle; ?>"/>	<?php endif; ?>	<ul class="newsfeed<?php echo $params->get('moduleclass_sfx'); ?>">	<?php if (!empty($feed)) : ?>		<?php for ($i = 0; $i < $params->get('rssitems', 5); $i++) : ?>			<?php			$uri  = (!empty($feed[$i]->guid) || !is_null($feed[$i]->guid)) ? $feed[$i]->guid : $feed[$i]->uri;			$uri  = substr($uri, 0, 4) != 'http' ? $params->get('rsslink') : $uri;			$text = !empty($feed[$i]->content) || !is_null($feed[$i]->content) ? $feed[$i]->content : $feed[$i]->description;			?>			<li>				<?php if (!empty($uri)) : ?>					<h5 class="feed-link">						<a href="<?php echo $uri; ?>" target="_blank">							<?php  echo $feed[$i]->title; ?></a></h5>				<?php else : ?>					<h5 class="feed-link"><?php  echo $feed[$i]->title; ?></h5>				<?php  endif; ?>				<?php if ($params->get('rssitemdesc') && !empty($text)) : ?>					<div class="feed-item-description">						<?php						// Strip the images.						$text = JFilterOutput::stripImages($text);						$text = JHtml::_('string.truncate', $text, $params->get('word_count'));						echo str_replace('&apos;', "'", $text);						?>					</div>				<?php endif; ?>			</li>		<?php endfor; ?>	</ul>	<?php endif; ?>	<?php endif; ?>	</div>	</div><?php}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Tag Controller * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsControllerTag extends JControllerForm{	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   3.1	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', 'com_tags'));	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   3.1	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user = JFactory::getUser();		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		// Since there is no asset tracking and no categories, revert to the component permissions.		return parent::allowEdit($data, $key);	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean	 True if successful, false otherwise and internal error is set.	 *	 * @since   3.1	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Tag');		// Preset the redirect		$this->setRedirect('index.php?option=com_tags&view=tags');		return parent::batch($model);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.framework');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.modal');$canDo = MenusHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task, type)	{		if (task == 'item.setType' || task == 'item.setMenuType')		{			if (task == 'item.setType')			{				document.id('item-form').elements['jform[type]'].value = type;				document.id('fieldtype').value = 'type';			} else {				document.id('item-form').elements['jform[menutype]'].value = type;			}			Joomla.submitform('item.setType', document.id('item-form'));		} else if (task == 'item.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			Joomla.submitform(task, document.id('item-form'));		}		else		{			// special case for modal popups validation response			$$('#item-form .modal-value.invalid').each(function(field){				var idReversed = field.id.split("").reverse().join("");				var separatorLocation = idReversed.indexOf('_');				var name = idReversed.substr(separatorLocation).split("").reverse().join("")+'name';				document.id(name).addClass('invalid');			});		}	}</script><div class="menuitem-edit"><form action="<?php echo JRoute::_('index.php?option=com_menus&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate"><div class="col main-section">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_MENUS_ITEM_DETAILS');?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('type'); ?>				<?php echo $this->form->getInput('type'); ?></li>				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<?php if ($this->item->type == 'url') : ?>					<?php $this->form->setFieldAttribute('link', 'readonly', 'false');?>					<li><?php echo $this->form->getLabel('link'); ?>					<?php echo $this->form->getInput('link'); ?></li>				<?php endif; ?>				<?php if ($this->item->type == 'alias') : ?>					<li> <?php echo $this->form->getLabel('aliastip'); ?></li>				<?php endif; ?>				<?php if ($this->item->type != 'url') : ?>					<li><?php echo $this->form->getLabel('alias'); ?>					<?php echo $this->form->getInput('alias'); ?></li>				<?php endif; ?>				<li><?php echo $this->form->getLabel('note'); ?>				<?php echo $this->form->getInput('note'); ?></li>				<?php if ($this->item->type !== 'url') : ?>					<li><?php echo $this->form->getLabel('link'); ?>					<?php echo $this->form->getInput('link'); ?></li>				<?php endif ?>				<?php if ($canDo->get('core.edit.state')) : ?>					<li><?php echo $this->form->getLabel('published'); ?>					<?php echo $this->form->getInput('published'); ?></li>				<?php endif ?>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<li><?php echo $this->form->getLabel('menutype'); ?>				<?php echo $this->form->getInput('menutype'); ?></li>				<li><?php echo $this->form->getLabel('parent_id'); ?>				<?php echo $this->form->getInput('parent_id'); ?></li>				<li><?php echo $this->form->getLabel('menuordering'); ?>				<?php echo $this->form->getInput('menuordering'); ?></li>				<li><?php echo $this->form->getLabel('browserNav'); ?>				<?php echo $this->form->getInput('browserNav'); ?></li>				<?php if ($canDo->get('core.edit.state')) : ?>					<?php if ($this->item->type == 'component') : ?>					<li><?php echo $this->form->getLabel('home'); ?>					<?php echo $this->form->getInput('home'); ?></li>					<?php endif; ?>				<?php endif; ?>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<li><?php echo $this->form->getLabel('template_style_id'); ?>				<?php echo $this->form->getInput('template_style_id'); ?></li>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>		</ul>	</fieldset></div><div class="col options-section">	<?php echo JHtml::_('sliders.start', 'menu-sliders-'.$this->item->id); ?>	<?php //Load  parameters.		echo $this->loadTemplate('options'); ?>		<div class="clr"></div>		<?php if (!empty($this->modules)) : ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_MENUS_ITEM_MODULE_ASSIGNMENT'), 'module-options'); ?>			<fieldset>				<?php echo $this->loadTemplate('modules'); ?>			</fieldset>		<?php endif; ?>	<?php echo JHtml::_('sliders.end'); ?>	<input type="hidden" name="task" value="" />	<?php echo $this->form->getInput('component_id'); ?>	<?php echo JHtml::_('form.token'); ?>	<input type="hidden" id="fieldtype" name="fieldtype" value="" /></div></form><div class="clr"></div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class JFormFieldMenuOrdering extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.7	 */	protected $type = 'MenuOrdering';	/**	 * Method to get the list of siblings in a menu.	 * The method requires that parent be set.	 *	 * @return  array  The field option objects or false if the parent field has not been set	 * @since   1.7	 */	protected function getOptions()	{		$options = array();		// Get the parent		$parent_id = $this->form->getValue('parent_id', 0);		if (empty($parent_id))		{			return false;		}		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text')			->from('#__menu AS a')			->where('a.published >= 0')			->where('a.parent_id =' . (int) $parent_id);		if ($menuType = $this->form->getValue('menutype'))		{			$query->where('a.menutype = ' . $db->quote($menuType));		}		else		{			$query->where('a.menutype != ' . $db->quote(''));		}		$query->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$options = array_merge(			array(array('value' => '-1', 'text' => JText::_('COM_MENUS_ITEM_FIELD_ORDERING_VALUE_FIRST'))),			$options,			array(array('value' => '-2', 'text' => JText::_('COM_MENUS_ITEM_FIELD_ORDERING_VALUE_LAST')))		);		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to get the field input markup	 *	 * @return  string  The field input markup.	 * @since   1.7	 */	protected function getInput()	{		if ($this->form->getValue('id', 0) == 0)		{			return '<span class="readonly">' . JText::_('COM_MENUS_ITEM_FIELD_ORDERING_TEXT') . '</span>';		}		else		{			return parent::getInput();		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto * @since       1.5 */class MailtoController extends JControllerLegacy{	/**	 * Show the form so that the user can send the link to someone	 *	 * @access public	 * @since 1.5	 */	public function mailto()	{		$session = JFactory::getSession();		$session->set('com_mailto.formtime', time());		$this->input->set('view', 'mailto');		$this->display();	}	/**	 * Send the message and display a notice	 *	 * @access public	 * @since 1.5	 */	public function send()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$session = JFactory::getSession();		$timeout = $session->get('com_mailto.formtime', 0);		if ($timeout == 0 || time() - $timeout < 20)		{			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		$SiteName = $app->getCfg('sitename');		$link     = MailtoHelper::validateHash($this->input->get('link', '', 'post'));		// Verify that this is a local link		if (!$link || !JURI::isInternal($link))		{			//Non-local url...			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		// An array of email headers we do not want to allow as input		$headers = array (	'Content-Type:',							'MIME-Version:',							'Content-Transfer-Encoding:',							'bcc:',							'cc:');		// An array of the input fields to scan for injected headers		$fields = array(			'mailto',			'sender',			'from',			'subject',		);		/*		 * Here is the meat and potatoes of the header injection test.  We		 * iterate over the array of form input and check for header strings.		 * If we find one, send an unauthorized header and die.		 */		foreach ($fields as $field)		{			foreach ($headers as $header)			{				if (strpos($_POST[$field], $header) !== false)				{					JError::raiseError(403, '');				}			}		}		/*		 * Free up memory		 */		unset ($headers, $fields);		$email           = $this->input->post->getString('mailto', '');		$sender          = $this->input->post->getString('sender', '');		$from            = $this->input->post->getString('from', '');		$subject_default = JText::sprintf('COM_MAILTO_SENT_BY', $sender);		$subject         = $this->input->post->getString('subject', $subject_default);		// Check for a valid to address		$error	= false;		if (! $email  || ! JMailHelper::isEmailAddress($email))		{			$error	= JText::sprintf('COM_MAILTO_EMAIL_INVALID', $email);			JError::raiseWarning(0, $error);		}		// Check for a valid from address		if (! $from || ! JMailHelper::isEmailAddress($from))		{			$error	= JText::sprintf('COM_MAILTO_EMAIL_INVALID', $from);			JError::raiseWarning(0, $error);		}		if ($error)		{			return $this->mailto();		}		// Build the message to send		$msg	= JText::_('COM_MAILTO_EMAIL_MSG');		$body	= sprintf($msg, $SiteName, $sender, $from, $link);		// Clean the email data		$subject = JMailHelper::cleanSubject($subject);		$body	 = JMailHelper::cleanBody($body);		$sender	 = JMailHelper::cleanAddress($sender);		// Send the email		if (JFactory::getMailer()->sendMail($from, $sender, $email, $subject, $body) !== true)		{			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		$this->input->set('view', 'sent');		$this->display();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectPosition');$lang      = JFactory::getLanguage();$ordering  = $this->escape($this->state->get('list.ordering'));$direction = $this->escape($this->state->get('list.direction'));$clientId  = $this->state->get('filter.client_id');$state     = $this->state->get('filter.state');$template  = $this->state->get('filter.template');$type      = $this->state->get('filter.type');?><form action="<?php echo JRoute::_('index.php?option=com_modules&view=positions&layout=modal&tmpl=component&function='.$function.'&client_id=' .$clientId);?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label for="filter_search">				<?php echo JText::_('JSearch_Filter_Label'); ?>			</label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_MODULES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.templateStates'), 'value', 'text', $state, true);?>			</select>			<label class="selectlabel" for="filter_type">				<?php echo JText::_('COM_MODULES_OPTION_SELECT_TYPE'); ?>			</label>			<select name="filter_type" class="inputbox" id="filter_type">				<option value=""><?php echo JText::_('COM_MODULES_OPTION_SELECT_TYPE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.types'), 'value', 'text', $type, true);?>			</select>			<label class="selectlabel" for="filter_template">				<?php echo JText::_('JOPTION_SELECT_TEMPLATE'); ?>			</label>			<select name="filter_template" class="inputbox" id="filter_template">				<option value=""><?php echo JText::_('JOPTION_SELECT_TEMPLATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.templates', $clientId), 'value', 'text', $template, true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist">		<thead>			<tr>				<th class="title width-20">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'value', $direction, $ordering); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_TEMPLATES', 'templates', $direction, $ordering); ?>				</th>			</tr>		</thead>		<tbody>		<?php $i = 1; foreach ($this->items as $value => $templates) : ?>			<tr class="row<?php echo $i = 1 - $i;?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $function;?>('<?php echo $value; ?>');"><?php echo $this->escape($value); ?></a>				</td>				<td>					<?php if (!empty($templates)):?>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $function;?>('<?php echo $value; ?>');">						<ul>						<?php foreach ($templates as $template => $label):?>							<li><?php echo $lang->hasKey($label) ? JText::sprintf('COM_MODULES_MODULE_TEMPLATE_POSITION', JText::_($template), JText::_($label)) : JText::_($template);?></li>						<?php endforeach;?>						</ul>					</a>					<?php endif;?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $ordering; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $direction; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/extension.php';/** * Installer Manage Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelDiscover extends InstallerModel{	protected $_context = 'com_installer.discover';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Method to get the database query.	 *	 * @return  JDatabaseQuery  the database query	 *	 * @since   1.6	 */	protected function getListQuery()	{		$db		= JFactory::getDbo();		$query = $db->getQuery(true)			->select('*')			->from('#__extensions')			->where('state=-1');		return $query;	}	/**	 * Discover extensions.	 *	 * Finds uninstalled extensions	 *	 * @return  void	 *	 * @since   1.6	 */	public function discover()	{		// Purge the list of discovered extensions		$this->purge();		$installer	= JInstaller::getInstance();		$results	= $installer->discover();		// Get all templates, including discovered ones		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('extension_id, element, folder, client_id, type')			->from('#__extensions');		$db->setQuery($query);		$installedtmp = $db->loadObjectList();		$extensions = array();		foreach ($installedtmp as $install)		{			$key = implode(':', array($install->type, $install->element, $install->folder, $install->client_id));			$extensions[$key] = $install;		}		unset($installedtmp);		foreach ($results as $result)		{			// Check if we have a match on the element			$key = implode(':', array($result->type, $result->element, $result->folder, $result->client_id));			if (!array_key_exists($key, $extensions))			{				// Put it into the table				$result->store();			}		}	}	/**	 * Installs a discovered extension.	 *	 * @return  void	 *	 * @since   1.6	 */	public function discover_install()	{		$app = JFactory::getApplication();		$installer = JInstaller::getInstance();		$eid = JRequest::getVar('cid', 0);		if (is_array($eid) || $eid)		{			if (!is_array($eid))			{				$eid = array($eid);			}			JArrayHelper::toInteger($eid);			$app = JFactory::getApplication();			$failed = false;			foreach ($eid as $id)			{				$result = $installer->discover_install($id);				if (!$result)				{					$failed = true;					$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_INSTALLFAILED') . ': ' . $id);				}			}			$this->setState('action', 'remove');			$this->setState('name', $installer->get('name'));			$app->setUserState('com_installer.message', $installer->message);			$app->setUserState('com_installer.extension_message', $installer->get('extension_message'));			if (!$failed)			{				$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_INSTALLSUCCESSFUL'));			}		}		else		{			$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_NOEXTENSIONSELECTED'));		}	}	/**	 * Cleans out the list of discovered extensions.	 *	 * @return  bool True on success	 *	 * @since   1.6	 */	public function purge()	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->delete('#__extensions')			->where('state = -1');		$db->setQuery($query);		if ($db->execute())		{			$this->_message = JText::_('COM_INSTALLER_MSG_DISCOVER_PURGEDDISCOVEREDEXTENSIONS');			return true;		}		else		{			$this->_message = JText::_('COM_INSTALLER_MSG_DISCOVER_FAILEDTOPURGEEXTENSIONS');			return false;		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.logout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Plugin class for logout redirect handling. * * @package     Joomla.Plugin * @subpackage  System.logout * @since       1-6 */class PlgSystemLogout extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Object Constructor.	 *	 * @access	public	 * @param   object	The object to observe -- event dispatcher.	 * @param   object	The configuration object for the plugin.	 * @return  void	 * @since   1.6	 */	public function __construct(&$subject, $config)	{		parent::__construct($subject, $config);		$input = JFactory::getApplication()->input;		$hash  = JApplication::getHash('PlgSystemLogout');		if (JFactory::getApplication()->isSite() && $input->cookie->getString($hash))		{			// Destroy the cookie			$conf = JFactory::getConfig();			$cookie_domain = $conf->get('config.cookie_domain', '');			$cookie_path   = $conf->get('config.cookie_path', '/');			setcookie($hash, false, time() - 86400, $cookie_path, $cookie_domain);			// Set the error handler for E_ALL to be the class handleError method.			JError::setErrorHandling(E_ALL, 'callback', array('PlgSystemLogout', 'handleError'));		}	}	/**	 * This method should handle any logout logic and report back to the subject	 *	 * @param   array  $user		Holds the user data.	 * @param   array  $options	Array holding options (client, ...).	 *	 * @return  boolean Always returns true	 * @since   1.6	 */	public function onUserLogout($user, $options = array())	{		if (JFactory::getApplication()->isSite())		{			// Create the cookie			$hash = JApplication::getHash('PlgSystemLogout');			$conf = JFactory::getConfig();			$cookie_domain 	= $conf->get('config.cookie_domain', '');			$cookie_path 	= $conf->get('config.cookie_path', '/');			setcookie($hash, true, time() + 86400, $cookie_path, $cookie_domain);		}		return true;	}	public static function handleError(&$error)	{		// Get the application object.		$app = JFactory::getApplication();		// Make sure the error is a 403 and we are in the frontend.		if ($error->getCode() == 403 and $app->isSite())		{			// Redirect to the home page			$app->redirect('index.php', JText::_('PLG_SYSTEM_LOGOUT_REDIRECT'), null, true, false);		}		else		{			// Render the error page.			JError::customErrorPage($error);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules Component Module Model * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.5 */class ModulesModelModules extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'published', 'a.published',				'access', 'a.access', 'access_level',				'ordering', 'a.ordering',				'module', 'a.module',				'language', 'a.language', 'language_title',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'client_id', 'a.client_id',				'position', 'a.position',				'pages',				'name', 'e.name',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$position = $this->getUserStateFromRequest($this->context . '.filter.position', 'filter_position', '', 'string');		$this->setState('filter.position', $position);		$module = $this->getUserStateFromRequest($this->context . '.filter.module', 'filter_module', '', 'string');		$this->setState('filter.module', $module);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', 0, 'int', false);		$previousId = $app->getUserState($this->context . '.filter.client_id_previous', null);		if ($previousId != $clientId || $previousId === null)		{			$this->getUserStateFromRequest($this->context . '.filter.client_id_previous', 'filter_client_id_previous', 0, 'int', true);			$app->setUserState($this->context . '.filter.client_id_previous', $clientId);		}		$this->setState('filter.client_id', $clientId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_modules');		$this->setState('params', $params);		// List state information.		parent::populateState('position', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.position');		$id .= ':' . $this->getState('filter.module');		$id .= ':' . $this->getState('filter.client_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns an object list	 *	 * @param   string The query	 * @param   int    Offset	 * @param   int    The number of records	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$ordering = $this->getState('list.ordering', 'ordering');		if (in_array($ordering, array('pages', 'name')))		{			$this->_db->setQuery($query);			$result = $this->_db->loadObjectList();			$this->translate($result);			$lang = JFactory::getLanguage();			JArrayHelper::sortObjects($result, $ordering, $this->getState('list.direction') == 'desc' ? -1 : 1, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			if ($ordering == 'ordering')			{				$query->order('a.position ASC');				$ordering = 'a.ordering';			}			if ($ordering == 'language_title')			{				$ordering = 'l.title';			}			$query->order($this->_db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			if ($ordering == 'position')			{				$query->order('a.ordering ASC');			}			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array The array of objects	 * @return  array The array of translated objects	 */	protected function translate(&$items)	{		$lang = JFactory::getLanguage();		$client = $this->getState('filter.client_id') ? 'administrator' : 'site';		foreach ($items as $item)		{			$extension = $item->module;			$source = constant('JPATH_' . strtoupper($client)) . "/modules/$extension";			$lang->load("$extension.sys", constant('JPATH_' . strtoupper($client)), null, false, false)				|| $lang->load("$extension.sys", $source, null, false, false)				|| $lang->load("$extension.sys", constant('JPATH_' . strtoupper($client)), $lang->getDefault(), false, false)				|| $lang->load("$extension.sys", $source, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);			if (is_null($item->pages))			{				$item->pages = JText::_('JNONE');			}			elseif ($item->pages < 0)			{				$item->pages = JText::_('COM_MODULES_ASSIGNED_VARIES_EXCEPT');			}			elseif ($item->pages > 0)			{				$item->pages = JText::_('COM_MODULES_ASSIGNED_VARIES_ONLY');			}			else			{				$item->pages = JText::_('JALL');			}		}	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.note, a.position, a.module, a.language,' .					'a.checked_out, a.checked_out_time, a.published+2*(e.enabled-1) as published, a.access, a.ordering, a.publish_up, a.publish_down'			)		);		$query->from($db->quoteName('#__modules') . ' AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the module menus		$query->select('MIN(mm.menuid) AS pages')			->join('LEFT', '#__modules_menu AS mm ON mm.moduleid = a.id');		// Join over the extensions		$query->select('e.name AS name')			->join('LEFT', '#__extensions AS e ON e.element = a.module')			->group(				'a.id, a.title, a.note, a.position, a.module, a.language,a.checked_out,' .					'a.checked_out_time, a.published, a.access, a.ordering,l.title, uc.name, ag.title, e.name,' .					'l.lang_code, uc.id, ag.id, mm.moduleid, e.element, a.publish_up, a.publish_down,e.enabled'			);		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$state = $this->getState('filter.state');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);		}		elseif ($state === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by position		$position = $this->getState('filter.position');		if ($position && $position != 'none')		{			$query->where('a.position = ' . $db->quote($position));		}		elseif ($position == 'none')		{			$query->where('a.position = ' . $db->quote(''));		}		// Filter by module		$module = $this->getState('filter.module');		if ($module)		{			$query->where('a.module = ' . $db->quote($module));		}		// Filter by client.		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('a.client_id = ' . (int) $clientId . ' AND e.client_id =' . (int) $clientId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(' . 'a.title LIKE ' . $search . ' OR a.note LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Form Field to display a list of the layouts for a component view from * the extension or template overrides. * * @package     Joomla.Legacy * @subpackage  Form * @since       11.1 */class JFormFieldComponentlayout extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'ComponentLayout';	/**	 * Method to get the field input for a component layout field.	 *	 * @return  string   The field input.	 *	 * @since   11.1	 */	protected function getInput()	{		// Get the client id.		$clientId = $this->element['client_id'];		if (is_null($clientId) && $this->form instanceof JForm)		{			$clientId = $this->form->getValue('client_id');		}		$clientId = (int) $clientId;		$client = JApplicationHelper::getClientInfo($clientId);		// Get the extension.		$extn = (string) $this->element['extension'];		if (empty($extn) && ($this->form instanceof JForm))		{			$extn = $this->form->getValue('extension');		}		$extn = preg_replace('#\W#', '', $extn);		// Get the template.		$template = (string) $this->element['template'];		$template = preg_replace('#\W#', '', $template);		// Get the style.		if ($this->form instanceof JForm)		{			$template_style_id = $this->form->getValue('template_style_id');		}		$template_style_id = preg_replace('#\W#', '', $template_style_id);		// Get the view.		$view = (string) $this->element['view'];		$view = preg_replace('#\W#', '', $view);		// If a template, extension and view are present build the options.		if ($extn && $view && $client)		{			// Load language file			$lang = JFactory::getLanguage();			$lang->load($extn . '.sys', JPATH_ADMINISTRATOR, null, false, false)				|| $lang->load($extn . '.sys', JPATH_ADMINISTRATOR . '/components/' . $extn, null, false, false)				|| $lang->load($extn . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				|| $lang->load($extn . '.sys', JPATH_ADMINISTRATOR . '/components/' . $extn, $lang->getDefault(), false, false);			// Get the database object and a new query object.			$db = JFactory::getDbo();			$query = $db->getQuery(true);			// Build the query.			$query->select('e.element, e.name')				->from('#__extensions as e')				->where('e.client_id = ' . (int) $clientId)				->where('e.type = ' . $db->quote('template'))				->where('e.enabled = 1');			if ($template)			{				$query->where('e.element = ' . $db->quote($template));			}			if ($template_style_id)			{				$query->join('LEFT', '#__template_styles as s on s.template=e.element')					->where('s.id=' . (int) $template_style_id);			}			// Set the query and load the templates.			$db->setQuery($query);			$templates = $db->loadObjectList('element');			// Build the search paths for component layouts.			$component_path = JPath::clean($client->path . '/components/' . $extn . '/views/' . $view . '/tmpl');			// Prepare array of component layouts			$component_layouts = array();			// Prepare the grouped list			$groups = array();			// Add a Use Global option if useglobal="true" in XML file			if ($this->element['useglobal'] == 'true')			{				$groups[JText::_('JOPTION_FROM_STANDARD')]['items'][] = JHtml::_('select.option', '', JText::_('JGLOBAL_USE_GLOBAL'));			}			// Add the layout options from the component path.			if (is_dir($component_path) && ($component_layouts = JFolder::files($component_path, '^[^_]*\.xml$', false, true)))			{				// Create the group for the component				$groups['_'] = array();				$groups['_']['id'] = $this->id . '__';				$groups['_']['text'] = JText::sprintf('JOPTION_FROM_COMPONENT');				$groups['_']['items'] = array();				foreach ($component_layouts as $i => $file)				{					// Attempt to load the XML file.					if (!$xml = simplexml_load_file($file))					{						unset($component_layouts[$i]);						continue;					}					// Get the help data from the XML file if present.					if (!$menu = $xml->xpath('layout[1]'))					{						unset($component_layouts[$i]);						continue;					}					$menu = $menu[0];					// Add an option to the component group					$value = basename($file, '.xml');					$component_layouts[$i] = $value;					$text = isset($menu['option']) ? JText::_($menu['option']) : (isset($menu['title']) ? JText::_($menu['title']) : $value);					$groups['_']['items'][] = JHtml::_('select.option', '_:' . $value, $text);				}			}			// Loop on all templates			if ($templates)			{				foreach ($templates as $template)				{					// Load language file					$lang->load('tpl_' . $template->element . '.sys', $client->path, null, false, false)						|| $lang->load('tpl_' . $template->element . '.sys', $client->path . '/templates/' . $template->element, null, false, false)						|| $lang->load('tpl_' . $template->element . '.sys', $client->path, $lang->getDefault(), false, false)						|| $lang->load(						'tpl_' . $template->element . '.sys', $client->path . '/templates/' . $template->element, $lang->getDefault(), false, false					);					$template_path = JPath::clean($client->path . '/templates/' . $template->element . '/html/' . $extn . '/' . $view);					// Add the layout options from the template path.					if (is_dir($template_path) && ($files = JFolder::files($template_path, '^[^_]*\.php$', false, true)))					{						// Files with corresponding XML files are alternate menu items, not alternate layout files						// so we need to exclude these files from the list.						$xml_files = JFolder::files($template_path, '^[^_]*\.xml$', false, true);						for ($j = 0, $count = count($xml_files); $j < $count; $j++)						{							$xml_files[$j] = basename($xml_files[$j], '.xml');						}						foreach ($files as $i => $file)						{							// Remove layout files that exist in the component folder or that have XML files							if ((in_array(basename($file, '.php'), $component_layouts))								|| (in_array(basename($file, '.php'), $xml_files)))							{								unset($files[$i]);							}						}						if (count($files))						{							// Create the group for the template							$groups[$template->name] = array();							$groups[$template->name]['id'] = $this->id . '_' . $template->element;							$groups[$template->name]['text'] = JText::sprintf('JOPTION_FROM_TEMPLATE', $template->name);							$groups[$template->name]['items'] = array();							foreach ($files as $file)							{								// Add an option to the template group								$value = basename($file, '.php');								$text = $lang									->hasKey($key = strtoupper('TPL_' . $template->name . '_' . $extn . '_' . $view . '_LAYOUT_' . $value))									? JText::_($key) : $value;								$groups[$template->name]['items'][] = JHtml::_('select.option', $template->element . ':' . $value, $text);							}						}					}				}			}			// Compute attributes for the grouped list			$attr = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';			// Prepare HTML code			$html = array();			// Compute the current selected values			$selected = array($this->value);			// Add a grouped list			$html[] = JHtml::_(				'select.groupedlist', $groups, $this->name,				array('id' => $this->id, 'group.id' => 'id', 'list.attr' => $attr, 'list.select' => $selected)			);			return implode($html);		}		else		{			return '';		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.updater.update');/** * Installer Update Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelUpdate extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'name',				'client_id',				'type',				'folder',				'extension_id',				'update_id',				'update_site_id',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$value = $app->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $value);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type', '');		$this->setState('filter.type', $categoryId);		$group = $this->getUserStateFromRequest($this->context . '.filter.group', 'filter_group', '');		$this->setState('filter.group', $group);		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Method to get the database query	 *	 * @return  JDatabaseQuery  The database query	 *	 * @since   1.6	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		$type = $this->getState('filter.type');		$client = $this->getState('filter.client_id');		$group = $this->getState('filter.group');		// Grab updates ignoring new installs		$query->select('*')			->from('#__updates')			->where('extension_id != 0')			->order($this->getState('list.ordering') . ' ' . $this->getState('list.direction'));		if ($type)		{			$query->where('type=' . $db->quote($type));		}		if ($client != '')		{			$query->where('client_id = ' . intval($client));		}		if ($group != '' && in_array($type, array('plugin', 'library', '')))		{			$query->where('folder=' . $db->quote($group == '*' ? '' : $group));		}		// Filter by extension_id		if ($eid = $this->getState('filter.extension_id'))		{			$query->where($db->quoteName('extension_id') . ' = ' . $db->quote((int) $eid));		}		else		{			$query->where($db->quoteName('extension_id') . ' != ' . $db->quote(0))				->where($db->quoteName('extension_id') . ' != ' . $db->quote(700));		}		// Filter by search		$search = $this->getState('filter.search');		if (!empty($search))		{			$query->where('name LIKE ' . $db->quote('%' . $search . '%'));		}		return $query;	}	/**	 * Finds updates for an extension.	 *	 * @param   int  $eid            Extension identifier to look for	 * @param   int  $cache_timeout  Cache timout	 *	 * @return  boolean Result	 *	 * @since   1.6	 */	public function findUpdates($eid = 0, $cache_timeout = 0)	{		// Purge the updates list		$this->purge();		$updater = JUpdater::getInstance();		$results = $updater->findUpdates($eid, $cache_timeout);		return true;	}	/**	 * Removes all of the updates from the table.	 *	 * @return  boolean result of operation	 *	 * @since   1.6	 */	public function purge()	{		$db = JFactory::getDbo();		// Note: TRUNCATE is a DDL operation		// This may or may not mean depending on your database		$db->setQuery('TRUNCATE TABLE #__updates');		if ($db->execute())		{			// Reset the last update check timestamp			$query = $db->getQuery(true)				->update($db->quoteName('#__update_sites'))				->set($db->quoteName('last_check_timestamp') . ' = ' . $db->quote(0));			$db->setQuery($query);			$db->execute();			$this->_message = JText::_('COM_INSTALLER_PURGED_UPDATES');			return true;		}		else		{			$this->_message = JText::_('COM_INSTALLER_FAILED_TO_PURGE_UPDATES');			return false;		}	}	/**	 * Enables any disabled rows in #__update_sites table	 *	 * @return  boolean result of operation	 *	 * @since   1.6	 */	public function enableSites()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->update('#__update_sites')			->set('enabled = 1')			->where('enabled = 0');		$db->setQuery($query);		if ($db->execute())		{			if ($rows = $db->getAffectedRows())			{				$this->_message .= JText::plural('COM_INSTALLER_ENABLED_UPDATES', $rows);			}			return true;		}		else		{			$this->_message .= JText::_('COM_INSTALLER_FAILED_TO_ENABLE_UPDATES');			return false;		}	}	/**	 * Update function.	 *	 * Sets the "result" state with the result of the operation.	 *	 * @param   array  $uids  Array[int] List of updates to apply	 *	 * @return  void	 *	 * @since   1.6	 */	public function update($uids)	{		$result = true;		foreach ($uids as $uid)		{			$update = new JUpdate;			$instance = JTable::getInstance('update');			$instance->load($uid);			$update->loadFromXML($instance->detailsurl);			// Install sets state and enqueues messages			$res = $this->install($update);			if ($res)			{				$instance->delete($uid);			}			$result = $res & $result;		}		// Set the final state		$this->setState('result', $result);	}	/**	 * Handles the actual update installation.	 *	 * @param   JUpdate  $update  An update definition	 *	 * @return  boolean   Result of install	 *	 * @since   1.6	 */	private function install($update)	{		$app = JFactory::getApplication();		if (isset($update->get('downloadurl')->_data))		{			$url = $update->downloadurl->_data;		}		else		{			JError::raiseWarning('', JText::_('COM_INSTALLER_INVALID_EXTENSION_UPDATE'));			return false;		}		$p_file = JInstallerHelper::downloadPackage($url);		// Was the package downloaded?		if (!$p_file)		{			JError::raiseWarning('', JText::sprintf('COM_INSTALLER_PACKAGE_DOWNLOAD_FAILED', $url));			return false;		}		$config		= JFactory::getConfig();		$tmp_dest	= $config->get('tmp_path');		// Unpack the downloaded package file		$package	= JInstallerHelper::unpack($tmp_dest . '/' . $p_file);		// Get an installer instance		$installer	= JInstaller::getInstance();		$update->set('type', $package['type']);		// Install the package		if (!$installer->update($package['dir']))		{			// There was an error updating the package			$msg = JText::sprintf('COM_INSTALLER_MSG_UPDATE_ERROR', JText::_('COM_INSTALLER_TYPE_TYPE_' . strtoupper($package['type'])));			$result = false;		}		else		{			// Package updated successfully			$msg = JText::sprintf('COM_INSTALLER_MSG_UPDATE_SUCCESS', JText::_('COM_INSTALLER_TYPE_TYPE_' . strtoupper($package['type'])));			$result = true;		}		// Quick change		$this->type = $package['type'];		// Set some model state values		$app->enqueueMessage($msg);		// TODO: Reconfigure this code when you have more battery life left		$this->setState('name', $installer->get('name'));		$this->setState('result', $result);		$app->setUserState('com_installer.message', $installer->message);		$app->setUserState('com_installer.extension_message', $installer->get('extension_message'));		// Cleanup the install files		if (!is_file($package['packagefile']))		{			$config = JFactory::getConfig();			$package['packagefile'] = $config->get('tmp_path') . '/' . $package['packagefile'];		}		JInstallerHelper::cleanupInstall($package['packagefile'], $package['extractdir']);		return $result;	}	/**	* Method to get the row form.	*	* @param   array    $data      Data for the form.	* @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	*	* @return  mixed  A JForm object on success, false on failure	*	* @since	2.5.2	*/	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$app = JFactory::getApplication();		JForm::addFormPath(JPATH_COMPONENT . '/models/forms');		JForm::addFieldPath(JPATH_COMPONENT . '/models/fields');		$form = JForm::getInstance('com_installer.update', 'update', array('load_data' => $loadData));		// Check for an error.		if ($form == false)		{			$this->setError($form->getMessage());			return false;		}		// Check the session for previously entered form data.		$data = $this->loadFormData();		// Bind the form data if present.		if (!empty($data))		{			$form->bind($data);		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since	2.5.2	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState($this->context . '.data', array());		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$uri		= JUri::getInstance();$return		= base64_encode($uri);$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task != 'menus.delete' || confirm('<?php echo JText::_('COM_MENUS_MENU_CONFIRM_DELETE', true);?>'))		{			Joomla.submitform(task);		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_menus&view=menus');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_MENUS_MENU_SEARCH_FILTER'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clearfix"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col" rowspan="2">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th rowspan="2">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="width-30" colspan="3">					<?php echo JText::_('COM_MENUS_HEADING_NUMBER_MENU_ITEMS'); ?>				</th>				<th class="width-20" rowspan="2">					<?php echo JText::_('COM_MENUS_HEADING_LINKED_MODULES'); ?>				</th>				<th class="nowrap id-col" rowspan="2">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>			<tr>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_PUBLISHED_ITEMS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_UNPUBLISHED_ITEMS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_TRASHED_ITEMS'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create',     'com_menus');			$canEdit   = $user->authorise('core.edit',       'com_menus');			$canChange = $user->authorise('core.edit.state', 'com_menus');		?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype) ?> ">						<?php echo $this->escape($item->title); ?></a>					<p class="smallsub">(<span><?php echo JText::_('COM_MENUS_MENU_MENUTYPE_LABEL') ?></span>						<?php if ($canEdit) : ?>							<?php echo '<a href="'.JRoute::_('index.php?option=com_menus&task=menu.edit&id='.$item->id).' title='.$this->escape($item->description).'">'.							$this->escape($item->menutype).'</a>'; ?>)						<?php else : ?>							<?php echo $this->escape($item->menutype)?>)						<?php endif; ?>					</p>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=1');?>">						<?php echo $item->count_published; ?></a>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=0');?>">						<?php echo $item->count_unpublished; ?></a>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=-2');?>">						<?php echo $item->count_trashed; ?></a>				</td>				<td class="left">				<ul class="menu-module-list">					<?php					if (isset($this->modules[$item->menutype])) :						foreach ($this->modules[$item->menutype] as &$module) :						?>						<li>							<?php if ($canEdit) : ?>								<a class="modal" href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.$module->id.'&return='.$return.'&tmpl=component&layout=modal');?>" rel="{handler: 'iframe', size: {x: 1024, y: 450}}"  title="<?php echo JText::_('COM_MENUS_EDIT_MODULE_SETTINGS');?>">								<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?></a>							<?php else :?>								<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?>							<?php endif; ?>						</li>						<?php						endforeach;					endif;					?>				</ul>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_banners&view=clients'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLIENT', 'name', $listDirn, $listOrder); ?>				</th>				<th class="width-30">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CONTACT', 'contact', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'state', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_ACTIVE', 'nbanners', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JText::_('COM_BANNERS_HEADING_METAKEYWORDS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_BANNERS_HEADING_PURCHASETYPE'); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'ordering');			$canCreate  = $user->authorise('core.create',     'com_banners');			$canEdit    = $user->authorise('core.edit',       'com_banners');			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_banners') && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'clients.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_banners&task=client.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>							<?php echo $this->escape($item->name); ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $item->contact;?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'clients.', $canChange);?>				</td>				<td class="center">					<?php echo $item->nbanners; ?>				</td>				<td>					<?php echo $item->metakey; ?>				</td>				<td class="center">					<?php if ($item->purchase_type < 0):?>						<?php echo JText::sprintf('COM_BANNERS_DEFAULT', JText::_('COM_BANNERS_FIELD_VALUE_'.$this->state->params->get('purchase_type')));?>					<?php else:?>						<?php echo JText::_('COM_BANNERS_FIELD_VALUE_'.$item->purchase_type);?>					<?php endif;?>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_wrapper * * @package     Joomla.Site * @subpackage  mod_wrapper * @since       1.5 */class ModWrapperHelper{	public static function getParams(&$params)	{		$params->def('url', '');		$params->def('scrolling', 'auto');		$params->def('height', '200');		$params->def('height_auto', '0');		$params->def('width', '100%');		$params->def('add', '1');		$params->def('name', 'wrapper');		$url = $params->get('url');		if ($params->get('add'))		{			// adds 'http://' if none is set			if (substr($url, 0, 1) == '/')			{				// relative url in component. use server http_host.				$url = 'http://'.$_SERVER['HTTP_HOST'].$url;			}			elseif (!strstr($url, 'http') && !strstr($url, 'https'))			{				$url = 'http://'.$url;			}			else {				$url = $url;			}		}		// auto height control		if ($params->def('height_auto'))		{			$load = 'onload="iFrameHeight()"';		}		else		{			$load = '';		}		$params->set('load', $load);		$params->set('url', $url);		return $params;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of weblink records. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class WeblinksModelWeblinks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'state', 'a.state',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'hits', 'a.hits',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'url', 'a.url',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$published = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $published);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		$tag = $this->getUserStateFromRequest($this->context . '.filter.tag', 'filter_tag', '');		$this->setState('filter.tag', $tag);		// Load the parameters.		$params = JComponentHelper::getParams('com_weblinks');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.checked_out, a.checked_out_time, a.catid,' .					'a.hits,' .					'a.state, a.access, a.ordering,' .					'a.language, a.publish_up, a.publish_down'			)		);		$query->from($db->quoteName('#__weblinks') . ' AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.state');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state IN (0, 1))');		}		// Filter by category.		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$query->where('a.catid = ' . (int) $categoryId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		$tagId = $this->getState('filter.tag');		// Filter by a single tag.		if (is_numeric($tagId))		{			$query->where($db->quoteName('tagmap.tag_id') . ' = ' . (int) $tagId)				->join(					'LEFT', $db->quoteName('#__contentitem_tag_map', 'tagmap')					. ' ON ' . $db->quoteName('tagmap.content_item_id') . ' = ' . $db->quoteName('a.id')					. ' AND ' . $db->quoteName('tagmap.type_alias') . ' = ' . $db->quote('com_weblinks.weblink')				);		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering');		$orderDirn = $this->state->get('list.direction');		if ($orderCol == 'a.ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');/** * Package installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterPackage extends JAdapterInstance{	/**	 * Method of system	 *	 * @var    string	 *	 * @since  3.1	 */	protected $route = 'install';	/**	 * Load language from a path	 *	 * @param   string  $path  The path of the language.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path)	{		$this->manifest = $this->parent->getManifest();		$extension = 'pkg_' . strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->packagename, 'cmd'));		$lang = JFactory::getLanguage();		$source = $path;		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  int  The extension id	 *	 * @since   3.1	 */	public function install()	{		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extensions name		$filter = JFilterInput::getInstance();		$name = (string) $this->manifest->packagename;		$name = $filter->clean($name, 'cmd');		$this->set('name', $name);		$element = 'pkg_' . $filter->clean($this->manifest->packagename, 'cmd');		$this->set('element', $element);		// Get the component description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Set the installation path		$files = $this->manifest->files;		$group = (string) $this->manifest->packagename;		if (!empty($group))		{			$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/packages/' . implode(DIRECTORY_SEPARATOR, explode('/', $group)));		}		else		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_NO_PACK', JText::_('JLIB_INSTALLER_' . strtoupper($this->route))));			return false;		}		/*		 * If the package manifest already exists, then we will assume that the package is already		 * installed.		 */		if (file_exists(JPATH_MANIFESTS . '/packages/' . basename($this->parent->getPath('manifest'))))		{			// Look for an update function or update tag			$updateElement = $this->manifest->update;			// If $this->upgrade has already been set, or an update property exists in the manifest, update the extensions			if ($this->parent->isUpgrade() || $updateElement)			{				// Use the update route for all packaged extensions				$this->route = 'update';			}		}		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$this->scriptElement = $this->manifest->scriptfile;		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Preflight failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PACKAGE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		if ($folder = $files->attributes()->folder)		{			$source = $this->parent->getPath('source') . '/' . $folder;		}		else		{			$source = $this->parent->getPath('source');		}		// Install all necessary files		if (count($this->manifest->files->children()))		{			$i = 0;			foreach ($this->manifest->files->children() as $child)			{				$file = $source . '/' . $child;				if (is_dir($file))				{					// If it's actually a directory then fill it up					$package = array();					$package['dir'] = $file;					$package['type'] = JInstallerHelper::detectType($file);				}				else				{					// If it's an archive					$package = JInstallerHelper::unpack($file);				}				$tmpInstaller = new JInstaller;				$installResult = $tmpInstaller->{$this->route}($package['dir']);				if (!$installResult)				{					$this->parent->abort(						JText::sprintf(							'JLIB_INSTALLER_ABORT_PACK_INSTALL_ERROR_EXTENSION', JText::_('JLIB_INSTALLER_' . strtoupper($this->route)),							basename($file)						)					);					return false;				}				else				{					$results[$i] = array(						'name' => $tmpInstaller->manifest->name,						'result' => $installResult					);				}				$i++;			}		}		else		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_NO_FILES', JText::_('JLIB_INSTALLER_' . strtoupper($this->route))));			return false;		}		// Parse optional tags		$this->parent->parseLanguages($this->manifest->languages);		/*		 * ---------------------------------------------------------------------------------------------		 * Extension Registration		 * ---------------------------------------------------------------------------------------------		 */		$row = JTable::getInstance('extension');		$eid = $row->find(array('element' => strtolower($this->get('element')), 'type' => 'package'));		if ($eid)		{			$row->load($eid);		}		else		{			$row->name = $this->get('name');			$row->type = 'package';			$row->element = $this->get('element');			// There is no folder for modules			$row->folder = '';			$row->enabled = 1;			$row->protected = 0;			$row->access = 1;			$row->client_id = 0;			// Custom data			$row->custom_data = '';			$row->params = $this->parent->getParams();		}		// Update the manifest cache for the entry		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_ROLLBACK', $row->getError()));			return false;		}		/*		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Run the custom method based on the route		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, $this->route))		{			if ($this->parent->manifestClass->{$this->route}($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $this->parent->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/packages/' . basename($this->parent->getPath('manifest'));		if (!$this->parent->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$this->parent->abort(				JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_COPY_SETUP', JText::_('JLIB_INSTALLER_ABORT_PACK_INSTALL_NO_FILES'))			);			return false;		}		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			// First, we have to create a folder for the script if one isn't present			if (!file_exists($this->parent->getPath('extension_root')))			{				JFolder::create($this->parent->getPath('extension_root'));			}			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_root') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PACKAGE_INSTALL_MANIFEST'));					return false;				}			}		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight($this->route, $this, $results);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->extension_id;	}	/**	 * Updates a package	 *	 * The only difference between an update and a full install	 * is how we handle the database	 *	 * @return  void	 *	 * @since   3.1	 */	public function update()	{		$this->route = 'update';		$this->install();	}	/**	 * Custom uninstall method	 *	 * @param   integer  $id  The id of the package to uninstall.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$row = null;		$retval = true;		$row = JTable::getInstance('extension');		$row->load($id);		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_WARNCOREPACK'), JLog::WARNING, 'jerror');			return false;		}		$manifestFile = JPATH_MANIFESTS . '/packages/' . $row->get('element') . '.xml';		$manifest = new JInstallerManifestPackage($manifestFile);		// Set the package root path		$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/packages/' . $manifest->packagename);		// Because packages may not have their own folders we cannot use the standard method of finding an installation manifest		if (!file_exists($manifestFile))		{			// TODO: Fail?			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_MISSINGMANIFEST'), JLog::WARNING, 'jerror');			return false;		}		$xml = simplexml_load_file($manifestFile);		// If we cannot load the XML file return false		if (!$xml)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_LOAD_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// Check for a valid XML root tag.		if ($xml->getName() != 'extension')		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_INVALID_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// If there is an manifest class file, let's load it		$this->scriptElement = $manifest->scriptfile;		$manifestScript = (string) $manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('extension_root') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $row->element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		ob_start();		ob_implicit_flush(false);		// Run uninstall if possible		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))		{			$this->parent->manifestClass->uninstall($this);		}		$msg = ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		$error = false;		foreach ($manifest->filelist as $extension)		{			$tmpInstaller = new JInstaller;			$id = $this->_getExtensionID($extension->type, $extension->id, $extension->client, $extension->group);			$client = JApplicationHelper::getClientInfo($extension->client, true);			if ($id)			{				if (!$tmpInstaller->uninstall($extension->type, $id, $client->id))				{					$error = true;					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_NOT_PROPER', basename($extension->filename)), JLog::WARNING, 'jerror');				}			}			else			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_UNKNOWN_EXTENSION'), JLog::WARNING, 'jerror');			}		}		// Remove any language files		$this->parent->removeFiles($xml->languages);		// Clean up manifest file after we're done if there were no errors		if (!$error)		{			JFile::delete($manifestFile);			$folder = $this->parent->getPath('extension_root');			if (JFolder::exists($folder))			{				JFolder::delete($folder);			}			$row->delete();		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_MANIFEST_NOT_REMOVED'), JLog::WARNING, 'jerror');		}		// Return the result up the line		return $retval;	}	/**	 * Gets the extension id.	 *	 * @param   string   $type    The extension type.	 * @param   string   $id      The name of the extension (the element field).	 * @param   integer  $client  The application id (0: Joomla CMS site; 1: Joomla CMS administrator).	 * @param   string   $group   The extension group (mainly for plugins).	 *	 * @return  integer	 *	 * @since   3.1	 */	protected function _getExtensionID($type, $id, $client, $group)	{		$db = $this->parent->getDbo();		$query = $db->getQuery(true)			->select('extension_id')			->from('#__extensions')			->where('type = ' . $db->quote($type))			->where('element = ' . $db->quote($id));		switch ($type)		{			case 'plugin':				// Plugins have a folder but not a client				$query->where('folder = ' . $db->quote($group));				break;			case 'library':			case 'package':			case 'component':				// Components, packages and libraries don't have a folder or client.				// Included for completeness.				break;			case 'language':			case 'module':			case 'template':				// Languages, modules and templates have a client but not a folder				$client = JApplicationHelper::getClientInfo($client, true);				$query->where('client_id = ' . (int) $client->id);				break;		}		$db->setQuery($query);		$result = $db->loadResult();		// Note: For templates, libraries and packages their unique name is their key.		// This means they come out the same way they came in.		return $result;	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$manifestPath = JPATH_MANIFESTS . '/packages/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterPackage instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerPackage extends JInstallerAdapterPackage{}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class for tags * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.1 */abstract class JHtmlTag{	/**	 * Cached array of the tag items.	 *	 * @var    array	 * @since  3.1	 */	protected static $items = array();	/**	 * Returns an array of tags.	 *	 * @param   array  $config  An array of configuration options. By default, only	 *                          published and unpublished categories are returned.	 *	 * @return  array	 *	 * @since   3.1	 */	public static function options($config = array('filter.published' => array(0, 1)))	{		$hash = md5(serialize($config));		if (!isset(self::$items[$hash]))		{			$config = (array) $config;			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id, a.title, a.level')				->from('#__tags AS a')				->where('a.parent_id > 0');			// Filter on the published state			if (isset($config['filter.published']))			{				if (is_numeric($config['filter.published']))				{					$query->where('a.published = ' . (int) $config['filter.published']);				}				elseif (is_array($config['filter.published']))				{					JArrayHelper::toInteger($config['filter.published']);					$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');				}			}			// Filter on the language			if (isset($config['filter.language']))			{				if (is_string($config['filter.language']))				{					$query->where('a.language = ' . $db->quote($config['filter.language']));				}				elseif (is_array($config['filter.language']))				{					foreach ($config['filter.language'] as &$language)					{						$language = $db->quote($language);					}					$query->where('a.language IN (' . implode(',', $config['filter.language']) . ')');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Assemble the list options.			self::$items[$hash] = array();			foreach ($items as &$item)			{				$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;				$item->title = str_repeat('- ', $repeat) . $item->title;				self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);			}		}		return self::$items[$hash];	}	/**	 * Returns an array of tags.	 *	 * @param   array  $config  An array of configuration options. By default, only published and unpublished tags are returned.	 *	 * @return  array  Tag data	 *	 * @since   3.1	 */	public static function tags($config = array('filter.published' => array(0, 1)))	{		$hash = md5(serialize($config));		$config = (array) $config;		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id, a.title, a.level, a.parent_id')			->from('#__tags AS a')			->where('a.parent_id > 0');		// Filter on the published state		if (isset($config['filter.published']))		{			if (is_numeric($config['filter.published']))			{				$query->where('a.published = ' . (int) $config['filter.published']);			}			elseif (is_array($config['filter.published']))			{				JArrayHelper::toInteger($config['filter.published']);				$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');			}		}		$query->order('a.lft');		$db->setQuery($query);		$items = $db->loadObjectList();		// Assemble the list options.		self::$items[$hash] = array();		foreach ($items as &$item)		{			$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;			$item->title = str_repeat('- ', $repeat) . $item->title;			self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);		}		return self::$items[$hash];	}	/**	 * This is just a proxy for the formbehavior.ajaxchosen method	 *	 * @param   string   $selector     DOM id of the tag field	 * @param   boolean  $allowCustom  Flag to allow custom values	 *	 * @return  void	 *	 * @since   3.1	 */	public static function ajaxfield($selector='#jform_tags', $allowCustom = true)	{		// Tags field ajax		$chosenAjaxSettings = new JRegistry(			array(				'selector'    => $selector,				'type'        => 'GET',				'url'         => JURI::root() . 'index.php?option=com_tags&task=tags.searchAjax',				'dataType'    => 'json',				'jsonTermKey' => 'like'			)		);		JHtml::_('formbehavior.ajaxchosen', $chosenAjaxSettings);		// Allow custom values ?		if ($allowCustom)		{			JFactory::getDocument()->addScriptDeclaration("				(function($){					$(document).ready(function () {						var customTagPrefix = '#new#';						// Method to add tags pressing enter						$('" . $selector . "_chzn input').keydown(function(event) {							// Tag is greater than 3 chars and enter pressed							if (this.value.length >= 3 && (event.which === 13 || event.which === 188)) {								// Search an highlighted result								var highlighted = $('" . $selector . "_chzn').find('li.active-result.highlighted').first();								// Add the highlighted option								if (event.which === 13 && highlighted.text() !== '')								{									// Extra check. If we have added a custom tag with this text remove it									var customOptionValue = customTagPrefix + highlighted.text();									$('" . $selector . " option').filter(function () { return $(this).val() == customOptionValue; }).remove();									// Select the highlighted result									var tagOption = $('" . $selector . " option').filter(function () { return $(this).html() == highlighted.text(); });									tagOption.attr('selected', 'selected');								}								// Add the custom tag option								else								{									var customTag = this.value;									// Extra check. Search if the custom tag already exists (typed faster than AJAX ready)									var tagOption = $('" . $selector . " option').filter(function () { return $(this).html() == customTag; });									if (tagOption.text() !== '')									{										tagOption.attr('selected', 'selected');									}									else									{										var option = $('<option>');										option.text(this.value).val(customTagPrefix + this.value);										option.attr('selected','selected');										// Append the option an repopulate the chosen field										$('" . $selector . "').append(option);									}								}								this.value = '';								$('" . $selector . "').trigger('liszt:updated');								event.preventDefault();							}						});					});				})(jQuery);				"			);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to encapsulate a feed entry for the Joomla Platform. * * @property  JFeedPerson  $author         Person responsible for feed entry content. * @property  array        $categories     Categories to which the feed entry belongs. * @property  string       $content        The content of the feed entry. * @property  array        $contributors   People who contributed to the feed entry content. * @property  string       $copyright      Information about rights, e.g. copyrights, held in and over the feed entry. * @property  array        $links          Links associated with the feed entry. * @property  JDate        $publishedDate  The publication date for the feed entry. * @property  JFeed        $source         The feed from which the entry is sourced. * @property  string       $title          A human readable title for the feed entry. * @property  JDate        $updatedDate    The last time the content of the feed entry changed. * @property  string       $uri            Universal, permanent identifier for the feed entry. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedEntry{	/**	 * @var    array  The entry properties.	 * @since  12.3	 */	protected $properties = array(		'uri'  => '',		'title' => '',		'updatedDate' => '',		'content' => '',		'categories' => array(),		'contributors' => array(),		'links' => array()	);	/**	 * Magic method to return values for feed entry properties.	 *	 * @param   string  $name  The name of the property.	 *	 * @return  mixed	 *	 * @since   12.3	 */	public function __get($name)	{		return (isset($this->properties[$name])) ? $this->properties[$name] : null;	}	/**	 * Magic method to set values for feed properties.	 *	 * @param   string  $name   The name of the property.	 * @param   mixed   $value  The value to set for the property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __set($name, $value)	{		// Ensure that setting a date always sets a JDate instance.		if ((($name == 'updatedDate') || ($name == 'publishedDate')) && !($value instanceof JDate))		{			$value = new JDate($value);		}		// Validate that any authors that are set are instances of JFeedPerson or null.		if (($name == 'author') && (!($value instanceof JFeedPerson) || ($value === null)))		{			throw new InvalidArgumentException('JFeedEntry "author" must be of type JFeedPerson. ' . gettype($value) . 'given.');		}		// Validate that any sources that are set are instances of JFeed or null.		if (($name == 'source') && (!($value instanceof JFeed) || ($value === null)))		{			throw new InvalidArgumentException('JFeedEntry "source" must be of type JFeed. ' . gettype($value) . 'given.');		}		// Disallow setting categories, contributors, or links directly.		if (($name == 'categories') || ($name == 'contributors') || ($name == 'links'))		{			throw new InvalidArgumentException('Cannot directly set JFeedEntry property "' . $name . '".');		}		$this->properties[$name] = $value;	}	/**	 * Method to add a category to the feed entry object.	 *	 * @param   string  $name  The name of the category to add.	 * @param   string  $uri   The optional URI for the category to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addCategory($name, $uri = '')	{		$this->properties['categories'][$name] = $uri;		return $this;	}	/**	 * Method to add a contributor to the feed entry object.	 *	 * @param   string  $name   The full name of the person to add.	 * @param   string  $email  The email address of the person to add.	 * @param   string  $uri    The optional URI for the person to add.	 * @param   string  $type   The optional type of person to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addContributor($name, $email, $uri = null, $type = null)	{		$contributor = new JFeedPerson($name, $email, $uri, $type);		// If the new contributor already exists then there is nothing to do, so just return.		foreach ($this->properties['contributors'] as $c)		{			if ($c == $contributor)			{				return $this;			}		}		// Add the new contributor.		$this->properties['contributors'][] = $contributor;		return $this;	}	/**	 * Method to add a link to the feed entry object.	 *	 * @param   JFeedLink  $link  The link object to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addLink(JFeedLink $link)	{		// If the new link already exists then there is nothing to do, so just return.		foreach ($this->properties['links'] as $l)		{			if ($l == $link)			{				return $this;			}		}		// Add the new link.		$this->properties['links'][] = $link;		return $this;	}	/**	 * Method to remove a category from the feed entry object.	 *	 * @param   string  $name  The name of the category to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeCategory($name)	{		unset($this->properties['categories'][$name]);		return $this;	}	/**	 * Method to remove a contributor from the feed entry object.	 *	 * @param   JFeedPerson  $contributor  The person object to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeContributor(JFeedPerson $contributor)	{		// If the contributor exists remove it.		foreach ($this->properties['contributors'] as $k => $c)		{			if ($c == $contributor)			{				unset($this->properties['contributors'][$k]);				$this->properties['contributors'] = array_values($this->properties['contributors']);				return $this;			}		}		return $this;	}	/**	 * Method to remove a link from the feed entry object.	 *	 * @param   JFeedLink  $link  The link object to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeLink(JFeedLink $link)	{		// If the link exists remove it.		foreach ($this->properties['links'] as $k => $l)		{			if ($l == $link)			{				unset($this->properties['links'][$k]);				$this->properties['links'] = array_values($this->properties['links']);				return $this;			}		}		return $this;	}	/**	 * Shortcut method to set the author for the feed entry object.	 *	 * @param   string  $name   The full name of the person to set.	 * @param   string  $email  The email address of the person to set.	 * @param   string  $uri    The optional URI for the person to set.	 * @param   string  $type   The optional type of person to set.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function setAuthor($name, $email, $uri = null, $type = null)	{		$author = new JFeedPerson($name, $email, $uri, $type);		$this->properties['author'] = $author;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of contact records. * * @package     Joomla.Administrator * @subpackage  com_contact */class ContactModelContacts extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'user_id', 'a.user_id',				'published', 'a.published',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'ul.name', 'linked_user',			);			$app = JFactory::getApplication();			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$config['filter_fields'][] = 'association';			}		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		// Adjust the context to support modal layouts.		if ($layout = $app->input->get('layout'))		{			$this->context .= '.' . $layout;		}		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$access = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$published = $this->getUserStateFromRequest($this->context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id');		$this->setState('filter.category_id', $categoryId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// force a language		$forcedLanguage = $app->input->get('forcedLanguage');		if (!empty($forcedLanguage))		{			$this->setState('filter.language', $forcedLanguage);			$this->setState('filter.forcedLanguage', $forcedLanguage);		}		$tag = $this->getUserStateFromRequest($this->context . '.filter.tag', 'filter_tag', '');		$this->setState('filter.tag', $tag);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.name, a.alias, a.checked_out, a.checked_out_time, a.catid, a.user_id' .					', a.published, a.access, a.created, a.created_by, a.ordering, a.featured, a.language' .					', a.publish_up, a.publish_down'			)		);		$query->from('#__contact_details AS a');		// Join over the users for the linked user.		$query->select('ul.name AS linked_user')			->join('LEFT', '#__users AS ul ON ul.id=a.user_id');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the associations.		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$query->select('COUNT(asso2.id)>1 as association')				->join('LEFT', '#__associations AS asso ON asso.id = a.id AND asso.context=' . $db->quote('com_contact.item'))				->join('LEFT', '#__associations AS asso2 ON asso2.key = asso.key')				->group('a.id');		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published = 0 OR a.published = 1)');		}		// Filter by a single or group of categories.		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$query->where('a.catid = ' . (int) $categoryId);		}		elseif (is_array($categoryId))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			$query->where('a.catid IN (' . $categoryId . ')');		}		// Filter by search in name.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'author:') === 0)			{				$search = $db->quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(uc.name LIKE ' . $search . ' OR uc.username LIKE ' . $search . ')');			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.name LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Filter by a single tag.		$tagId = $this->getState('filter.tag');		if (is_numeric($tagId))		{			$query->where($db->quoteName('tagmap.tag_id') . ' = ' . (int) $tagId)				->join(					'LEFT', $db->quoteName('#__contentitem_tag_map', 'tagmap')					. ' ON ' . $db->quoteName('tagmap.content_item_id') . ' = ' . $db->quoteName('a.id')					. ' AND ' . $db->quoteName('tagmap.type_alias') . ' = ' . $db->quote('com_contact.contact')				);		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering', 'a.name');		$orderDirn = $this->state->get('list.direction', 'asc');		if ($orderCol == 'a.ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Contains a set of JSchemaChange objects for a particular instance of Joomla. * Each of these objects contains a DDL query that should have been run against * the database when this database was created or updated. This enables the * Installation Manager to check that the current database schema is up to date. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeset{	/**	 * Array of JSchemaChangeitem objects	 *	 * @var    array	 * @since  2.5	 */	protected $changeItems = array();	/**	 * JDatabaseDriver object	 *	 * @var    JDatabaseDriver	 * @since  2.5	 */	protected $db = null;	/**	 * Folder where SQL update files will be found	 *	 * @var    string	 */	protected $folder = null;	/**	 * Constructor: builds array of $changeItems by processing the .sql files in a folder.	 * The folder for the Joomla core updates is administrator/components/com_admin/sql/updates/<database>.	 *	 * @param   JDatabaseDriver  $db      The current database object	 * @param   string           $folder  The full path to the folder containing the update queries	 *	 * @since   2.5	 */	public function __construct($db, $folder = null)	{		$this->db = $db;		$this->folder = $folder;		$updateFiles = $this->getUpdateFiles();		$updateQueries = $this->getUpdateQueries($updateFiles);		foreach ($updateQueries as $obj)		{			$this->changeItems[] = JSchemaChangeitem::getInstance($db, $obj->file, $obj->updateQuery);		}	}	/**	 * Returns a reference to the JSchemaChangeset object, only creating it if it doesn't already exist.	 *	 * @param   JDatabaseDriver  $db      The current database object	 * @param   string           $folder  The full path to the folder containing the update queries	 *	 * @return  JSchemaChangeset	 *	 * @since   2.5	 */	public static function getInstance($db, $folder)	{		static $instance;		if (!is_object($instance))		{			$instance = new JSchemaChangeset($db, $folder);		}		return $instance;	}	/**	 * Checks the database and returns an array of any errors found.	 * Note these are not database errors but rather situations where	 * the current schema is not up to date.	 *	 * @return   array Array of errors if any.	 *	 * @since    2.5	 */	public function check()	{		$errors = array();		foreach ($this->changeItems as $item)		{			if ($item->check() === -2)			{				// Error found				$errors[] = $item;			}		}		return $errors;	}	/**	 * Runs the update query to apply the change to the database	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		$this->check();		foreach ($this->changeItems as $item)		{			$item->fix();		}	}	/**	* Returns an array of results for this set	*	* @return  array  associative array of changeitems grouped by unchecked, ok, error, and skipped	*	* @since   2.5	*/	public function getStatus()	{		$result = array('unchecked' => array(), 'ok' => array(), 'error' => array(), 'skipped' => array());		foreach ($this->changeItems as $item)		{			switch ($item->checkStatus)			{				case 0:					$result['unchecked'][] = $item;					break;				case 1:					$result['ok'][] = $item;					break;				case -2:					$result['error'][] = $item;					break;				case -1:					$result['skipped'][] = $item;					break;			}		}		return $result;	}	/**	 * Gets the current database schema, based on the highest version number.	 * Note that the .sql files are named based on the version and date, so	 * the file name of the last file should match the database schema version	 * in the #__schemas table.	 *	 * @return  string  the schema version for the database	 *	 * @since   2.5	 */	public function getSchema()	{		$updateFiles = $this->getUpdateFiles();		$result = new SplFileInfo(array_pop($updateFiles));		return $result->getBasename('.sql');	}	/**	 * Get list of SQL update files for this database	 *	 * @return  array  list of sql update full-path names	 *	 * @since   2.5	 */	private function getUpdateFiles()	{		// Get the folder from the database name		$sqlFolder = $this->db->name;		if ($sqlFolder == 'mysqli')		{			$sqlFolder = 'mysql';		}		elseif ($sqlFolder == 'sqlsrv')		{			$sqlFolder = 'sqlazure';		}		// Default folder to core com_admin		if (!$this->folder)		{			$this->folder = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		}		return JFolder::files($this->folder . '/' . $sqlFolder, '\.sql$', 1, true);	}	/**	 * Get array of SQL queries	 *	 * @param   array  $sqlfiles  Array of .sql update filenames.	 *	 * @return  array  Array of stdClass objects where:	 *                    file=filename,	 *                    update_query = text of SQL update query	 *	 * @since   2.5	 */	private function getUpdateQueries(array $sqlfiles)	{		// Hold results as array of objects		$result = array();		foreach ($sqlfiles as $file)		{			$buffer = file_get_contents($file);			// Create an array of queries from the sql file			$queries = JDatabaseDriver::splitSql($buffer);			foreach ($queries as $query)			{				if (trim($query))				{					$fileQueries = new stdClass;					$fileQueries->file = $file;					$fileQueries->updateQuery = $query;					$result[] = $fileQueries;				}			}		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for all HTML drawing classes. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlRules{	/**	 * Creates the HTML for the permissions widget	 *	 * @param   array    $actions   Array of action objects	 * @param   integer  $assetId   Id of a specific asset to  create a widget for.	 * @param   integer  $parent    Id of the parent of the asset	 * @param   string   $control   The form control	 * @param   string   $idPrefix  Prefix for the ids assigned to specific action-group pairs	 *	 * @return  string   HTML for the permissions widget	 *	 * @since   11.1	 *	 * @see     JAccess	 * @see     JFormFieldRules	 */	public static function assetFormWidget($actions, $assetId = null, $parent = null, $control = 'jform[rules]', $idPrefix = 'jform_rules')	{		$images = self::_getImagesArray();		// Get the user groups.		$groups = self::_getUserGroups();		// Get the incoming inherited rules as well as the asset specific rules.		$inheriting = JAccess::getAssetRules($parent ? $parent : self::_getParentAssetId($assetId), true);		$inherited = JAccess::getAssetRules($assetId, true);		$rules = JAccess::getAssetRules($assetId);		$html = array();		$html[] = '<div class="acl-options">';		$html[] = JHtml::_('tabs.start', 'acl-rules-' . $assetId, array('useCookie' => 1));		$html[] = JHtml::_('tabs.panel', JText::_('JLIB_HTML_ACCESS_SUMMARY'), 'summary');		$html[] = '			<p>' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC') . '</p>';		$html[] = '			<table class="aclsummary-table" summary="' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC') . '">';		$html[] = '			<caption>' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC_CAPTION') . '</caption>';		$html[] = '			<tr>';		$html[] = '				<th class="col1 hidelabeltxt">' . JText::_('JLIB_RULES_GROUPS') . '</th>';		foreach ($actions as $i => $action)		{			$html[] = '				<th class="col' . ($i + 2) . '">' . JText::_($action->title) . '</th>';		}		$html[] = '			</tr>';		foreach ($groups as $i => $group)		{			$html[] = '			<tr class="row' . ($i % 2) . '">';			$html[] = '				<td class="col1">' . $group->text . '</td>';			foreach ($actions as $j => $action)			{				$html[] = '				<td class="col' . ($j + 2) . '">'					. ($assetId ? ($inherited->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])					: ($inheriting->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])) . '</td>';			}			$html[] = '			</tr>';		}		$html[] = ' 		</table>';		foreach ($actions as $action)		{			$actionTitle = JText::_($action->title);			$actionDesc = JText::_($action->description);			$html[] = JHtml::_('tabs.panel', $actionTitle, $action->name);			$html[] = '			<p>' . $actionDesc . '</p>';			$html[] = '			<table class="aclmodify-table" summary="' . strip_tags($actionDesc) . '">';			$html[] = '			<caption>' . JText::_('JLIB_HTML_ACCESS_MODIFY_DESC_CAPTION_ACL') . ' ' . $actionTitle . ' '				. JText::_('JLIB_HTML_ACCESS_MODIFY_DESC_CAPTION_TABLE') . '</caption>';			$html[] = '			<tr>';			$html[] = '				<th class="col1 hidelabeltxt">' . JText::_('JLIB_RULES_GROUP') . '</th>';			$html[] = '				<th class="col2">' . JText::_('JLIB_RULES_INHERIT') . '</th>';			$html[] = '				<th class="col3 hidelabeltxt">' . JText::_('JMODIFY') . '</th>';			$html[] = '				<th class="col4">' . JText::_('JCURRENT') . '</th>';			$html[] = '			</tr>';			foreach ($groups as $i => $group)			{				$selected = $rules->allow($action->name, $group->value);				$html[] = '			<tr class="row' . ($i % 2) . '">';				$html[] = '				<td class="col1">' . $group->text . '</td>';				$html[] = '				<td class="col2">'					. ($inheriting->allow($action->name, $group->identities) ? $images['allow-i'] : $images['deny-i']) . '</td>';				$html[] = '				<td class="col3">';				$html[] = '					<select id="' . $idPrefix . '_' . $action->name . '_' . $group->value					. '" class="inputbox" size="1" name="' . $control . '[' . $action->name . '][' . $group->value . ']" title="'					. JText::sprintf('JLIB_RULES_SELECT_ALLOW_DENY_GROUP', $actionTitle, $group->text) . '">';				$html[] = '						<option value=""' . ($selected === null ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_INHERIT') . '</option>';				$html[] = '						<option value="1"' . ($selected === true ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_ALLOWED') . '</option>';				$html[] = '						<option value="0"' . ($selected === false ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_DENIED') . '</option>';				$html[] = '					</select>';				$html[] = '				</td>';				$html[] = '				<td class="col4">'					. ($assetId ? ($inherited->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])					: ($inheriting->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])) . '</td>';				$html[] = '			</tr>';			}			$html[] = '			</table>';		}		$html[] = JHtml::_('tabs.end');		// Build the footer with legend and special purpose buttons.		$html[] = '	<div class="clr"></div>';		$html[] = '	<ul class="acllegend fltlft">';		$html[] = '		<li class="acl-allowed">' . JText::_('JLIB_RULES_ALLOWED') . '</li>';		$html[] = '		<li class="acl-denied">' . JText::_('JLIB_RULES_DENIED') . '</li>';		$html[] = '	</ul>';		$html[] = '</div>';		return implode("\n", $html);	}	/**	 * Get the id of the parent asset	 *	 * @param   integer  $assetId  The asset for which the parentid will be returned	 *	 * @return  integer  The id of the parent asset	 *	 * @since   11.1	 */	protected static function _getParentAssetId($assetId)	{		// Get a database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get the user groups from the database.		$query->select($db->quoteName('parent_id'))			->from($db->quoteName('#__assets'))			->where($db->quoteName('id') . ' = ' . (int) $assetId);		$db->setQuery($query);		return (int) $db->loadResult();	}	/**	 * Get the user groups	 *	 * @return  array  Array of user groups	 *	 * @since   11.1	 */	protected static function _getUserGroups()	{		// Get a database object.		$db = JFactory::getDbo();		// Get the user groups from the database.		$db->setQuery(			'SELECT a.id AS value, a.title AS text, b.id as parent'			. ' FROM #__usergroups AS a LEFT JOIN #__usergroups AS b ON a.lft >= b.lft AND a.rgt <= b.rgt'			. ' ORDER BY a.lft ASC, b.lft ASC'		);		$result = $db->loadObjectList();		$options = array();		// Pre-compute additional values.		foreach ($result as $option)		{			$end = end($options);			if ($end === false || $end->value != $option->value)			{				$end = $option;				$end->level = 0;				$options[] = $end;			}			else			{				$end->level++;			}			$end->identities[] = $option->parent;		}		return $options;	}	/**	 * Get the array of images associate with specific permissions	 *	 * @return  array  An associative  array of permissions and images	 *	 * @since   11.1	 */	protected static function _getImagesArray()	{		$images['allow-l'] = '<label class="icon-16-allow" title="' . JText::_('JLIB_RULES_ALLOWED') . '">' . JText::_('JLIB_RULES_ALLOWED')			. '</label>';		$images['deny-l'] = '<label class="icon-16-deny" title="' . JText::_('JLIB_RULES_DENIED') . '">' . JText::_('JLIB_RULES_DENIED') . '</label>';		$images['allow'] = '<a class="icon-16-allow" title="' . JText::_('JLIB_RULES_ALLOWED') . '"> </a>';		$images['deny'] = '<a class="icon-16-deny" title="' . JText::_('JLIB_RULES_DENIED') . '"> </a>';		$images['allow-i'] = '<a class="icon-16-allowinactive" title="' . JText::_('JRULE_ALLOWED_INHERITED') . '"> </a>';		$images['deny-i'] = '<a class="icon-16-denyinactive" title="' . JText::_('JRULE_DENIED_INHERITED') . '"> </a>';		return $images;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.calendar');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');//$images = json_decode($this->item->images);//$urls = json_decode($this->item->urls);// This checks if the editor config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params->show_publishing_options);if (!$editoroptions){	$params->show_urls_images_frontend = '0';}?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit item-page<?php echo $this->pageclass_sfx; ?>">	<?php if ($params->get('show_page_heading', 1)) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_content&a_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-vertical">		<div class="btn-toolbar">			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('article.save')">					<span class="icon-ok"></span>&#160;<?php echo JText::_('JSAVE') ?>				</button>			</div>			<div class="btn-group">				<button type="button" class="btn" onclick="Joomla.submitbutton('article.cancel')">					<span class="icon-cancel"></span>&#160;<?php echo JText::_('JCANCEL') ?>				</button>			</div>		</div>		<fieldset>			<ul class="nav nav-tabs">				<li class="active"><a href="#editor" data-toggle="tab"><?php echo JText::_('JEDITOR') ?></a></li>				<?php if ($params->get('show_urls_images_frontend') ) : ?>				<li><a href="#images" data-toggle="tab"><?php echo JText::_('COM_CONTENT_IMAGES_AND_URLS') ?></a></li>				<?php endif; ?>				<li><a href="#publishing" data-toggle="tab"><?php echo JText::_('COM_CONTENT_PUBLISHING') ?></a></li>				<li><a href="#language" data-toggle="tab"><?php echo JText::_('JFIELD_LANGUAGE_LABEL') ?></a></li>				<li><a href="#metadata" data-toggle="tab"><?php echo JText::_('COM_CONTENT_METADATA') ?></a></li>			</ul>			<div class="tab-content">				<div class="tab-pane active" id="editor">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('title'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('title'); ?>						</div>					</div>					<?php if (is_null($this->item->id)) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('alias'); ?>						</div>					</div>					<?php endif; ?>					<?php echo $this->form->getInput('articletext'); ?>				</div>				<?php if ($params->get('show_urls_images_frontend')): ?>				<div class="tab-pane" id="images">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro', 'images'); ?>							<?php echo $this->form->getInput('image_intro', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro_alt', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_intro_alt', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro_caption', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_intro_caption', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('float_intro', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('float_intro', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext_alt', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext_alt', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext_caption', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext_caption', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('float_fulltext', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('float_fulltext', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urla', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urla', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlatext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlatext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targeta', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlb', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlb', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlbtext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlbtext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targetb', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlc', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlc', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlctext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlctext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targetc', 'urls'); ?>						</div>					</div>				</div>				<?php endif; ?>				<div class="tab-pane" id="publishing">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('catid'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('catid'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('tags', 'metadata'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('tags', 'metadata'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('created_by_alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('created_by_alias'); ?>						</div>					</div>					<?php if ($this->item->params->get('access-change')) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('state'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('state'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('featured'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('featured'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('publish_up'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('publish_up'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('publish_down'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('publish_down'); ?>							</div>						</div>					<?php endif; ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('access'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('access'); ?>						</div>					</div>					<?php if (is_null($this->item->id)):?>						<div class="control-group">							<div class="control-label">							</div>							<div class="controls">								<?php echo JText::_('COM_CONTENT_ORDERING'); ?>							</div>						</div>					<?php endif; ?>				</div>				<div class="tab-pane" id="language">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('language'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('language'); ?>						</div>					</div>				</div>				<div class="tab-pane" id="metadata">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('metadesc'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('metadesc'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('metakey'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('metakey'); ?>						</div>					</div>					<input type="hidden" name="task" value="" />					<input type="hidden" name="return" value="<?php echo $this->return_page; ?>" />					<?php if ($this->params->get('enable_category', 0) == 1) :?>					<input type="hidden" name="jform[catid]" value="<?php echo $this->params->get('catid', 1); ?>" />					<?php endif; ?>				</div>			</div>			<?php echo JHtml::_('form.token'); ?>		</fieldset>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a one line text field. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.text.html#input.text * @since       11.1 */class JFormFieldNote extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $type = 'Note';	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   11.1	 */	protected function getLabel()	{		if (empty($this->element['label']) && empty($this->element['description']))		{			return '';		}		$title = $this->element['label'] ? (string) $this->element['label'] : ($this->element['title'] ? (string) $this->element['title'] : '');		$heading = $this->element['heading'] ? (string) $this->element['heading'] : 'h4';		$description = (string) $this->element['description'];		$class = $this->element['class'] ? ' class="' . trim((string) $this->element['class']) . '"' : '';		$close = (string) $this->element['close'];		$html = array();		if ($close)		{			$close = $close == 'true' ? 'alert' : $close;			$html[] = '<button type="button" class="close" data-dismiss="' . $close . '">&times;</button>';		}		$html[] = !empty($title) ? '<' . $heading . '>' . JText::_($title) . '</' . $heading . '>' : '';		$html[] = !empty($description) ? JText::_($description) : '';		return '</div><div ' . $class . '>' . implode('', $html);	}	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		return '';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$userId		= $user->get('id');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_languages');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=languages'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_LANGS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('languages.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist">		<thead>			<tr>				<th class="row-number-col">					<?php echo JText::_('JGRID_HEADING_ROW_NUMBER'); ?>				</th>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HEADING_TITLE_NATIVE', 'a.title_native', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_FIELD_LANG_TAG_LABEL', 'a.lang_code', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_FIELD_LANG_CODE_LABEL', 'a.sef', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HEADING_LANG_IMAGE', 'a.image', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th width="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'languages.saveorder'); ?>					<?php endif; ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HOMEPAGE', '', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.lang_id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php		foreach ($this->items as $i => $item) :			$ordering  = ($listOrder == 'a.ordering');			$canCreate = $user->authorise('core.create',     'com_languages');			$canEdit   = $user->authorise('core.edit',       'com_languages');			$canChange = $user->authorise('core.edit.state', 'com_languages');		?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo $this->pagination->getRowOffset($i); ?>				</td>				<td>					<?php echo JHtml::_('grid.id', $i, $item->lang_id); ?>				</td>				<td>					<span class="editlinktip hasTip" title="<?php echo JText::_('JGLOBAL_EDIT_ITEM');?>::<?php echo $this->escape($item->title); ?>">					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_languages&task=language.edit&lang_id='.(int) $item->lang_id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>							<?php echo $this->escape($item->title); ?>					<?php endif; ?>					</span>				</td>				<td class="center">					<?php echo $this->escape($item->title_native); ?>				</td>				<td class="center">					<?php echo $this->escape($item->lang_code); ?>				</td>				<td class="center">					<?php echo $this->escape($item->sef); ?>				</td>				<td class="center">					<?php echo $this->escape($item->image); ?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'languages.', $canChange);?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'languages.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'languages.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'languages.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'languages.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php if ($item->home == '1') : ?>						<?php echo JText::_('JYES');?>					<?php else:?>						<?php echo JText::_('JNO');?>					<?php endif;?>				</td>				<td class="center">					<?php echo $this->escape($item->lang_id); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Article Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelArticle extends JModelItem{	/**	 * Model context string.	 *	 * @var        string	 */	protected $_context = 'com_content.article';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pk = $app->input->getInt('id');		$this->setState('article.id', $pk);		$offset = $app->input->getUInt('limitstart');		$this->setState('list.offset', $offset);		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		// TODO: Tune these values based on other permissions.		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_content')) && (!$user->authorise('core.edit', 'com_content')))		{			$this->setState('filter.published', 1);			$this->setState('filter.archived', 2);		}		$this->setState('filter.language', JLanguageMultilang::isEnabled());	}	/**	 * Method to get article data.	 *	 * @param   integer    The id of the article.	 *	 * @return  mixed  Menu item data object on success, false on failure.	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('article.id');		if ($this->_item === null)		{			$this->_item = array();		}		if (!isset($this->_item[$pk]))		{			try			{				$db = $this->getDbo();				$query = $db->getQuery(true)					->select(						$this->getState(							'item.select', 'a.id, a.asset_id, a.title, a.alias, a.introtext, a.fulltext, ' .							// If badcats is not null, this means that the article is inside an unpublished category							// In this case, the state is set to 0 to indicate Unpublished (even if the article state is Published)							'CASE WHEN badcats.id is null THEN a.state ELSE 0 END AS state, ' .							'a.catid, a.created, a.created_by, a.created_by_alias, ' .							// use created if modified is 0							'CASE WHEN a.modified = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.modified END as modified, ' .							'a.modified_by, a.checked_out, a.checked_out_time, a.publish_up, a.publish_down, ' .							'a.images, a.urls, a.attribs, a.version, a.ordering, ' .							'a.metakey, a.metadesc, a.access, a.hits, a.metadata, a.featured, a.language, a.xreference'						)					);				$query->from('#__content AS a');				// Join on category table.				$query->select('c.title AS category_title, c.alias AS category_alias, c.access AS category_access')					->join('LEFT', '#__categories AS c on c.id = a.catid');				// Join on user table.				$query->select('u.name AS author')					->join('LEFT', '#__users AS u on u.id = a.created_by');				// Join on contact table				$subQuery = $db->getQuery(true)					->select('contact.user_id, MAX(contact.id) AS id, contact.language')					->from('#__contact_details AS contact')					->where('contact.published = 1')					->group('contact.user_id, contact.language');				$query->select('contact.id as contactid')					->join('LEFT', '(' . $subQuery . ') AS contact ON contact.user_id = a.created_by');				// Filter by language				if ($this->getState('filter.language'))				{					$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')')						->where('(contact.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ') OR contact.language IS NULL)');				}				// Join over the categories to get parent category titles				$query->select('parent.title as parent_title, parent.id as parent_id, parent.path as parent_route, parent.alias as parent_alias')					->join('LEFT', '#__categories as parent ON parent.id = c.parent_id');				// Join on voting table				$query->select('ROUND(v.rating_sum / v.rating_count, 0) AS rating, v.rating_count as rating_count')					->join('LEFT', '#__content_rating AS v ON a.id = v.content_id')					->where('a.id = ' . (int) $pk);				// Filter by start and end dates.				$nullDate = $db->quote($db->getNullDate());				$date = JFactory::getDate();				$nowDate = $db->quote($date->toSql());				$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')					->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');				// Join to check for category published state in parent categories up the tree				// If all categories are published, badcats.id will be null, and we just use the article state				$subquery = ' (SELECT cat.id as id FROM #__categories AS cat JOIN #__categories AS parent ';				$subquery .= 'ON cat.lft BETWEEN parent.lft AND parent.rgt ';				$subquery .= 'WHERE parent.extension = ' . $db->quote('com_content');				$subquery .= ' AND parent.published <= 0 GROUP BY cat.id)';				$query->join('LEFT OUTER', $subquery . ' AS badcats ON badcats.id = c.id');				// Filter by published state.				$published = $this->getState('filter.published');				$archived = $this->getState('filter.archived');				if (is_numeric($published))				{					$query->where('(a.state = ' . (int) $published . ' OR a.state =' . (int) $archived . ')');				}				$db->setQuery($query);				$data = $db->loadObject();				if (empty($data))				{					return JError::raiseError(404, JText::_('COM_CONTENT_ERROR_ARTICLE_NOT_FOUND'));				}				// Check for published state if filter set.				if (((is_numeric($published)) || (is_numeric($archived))) && (($data->state != $published) && ($data->state != $archived)))				{					return JError::raiseError(404, JText::_('COM_CONTENT_ERROR_ARTICLE_NOT_FOUND'));				}				// Convert parameter fields to objects.				$registry = new JRegistry;				$registry->loadString($data->attribs);				$data->params = clone $this->getState('params');				$data->params->merge($registry);				$registry = new JRegistry;				$registry->loadString($data->metadata);				$data->metadata = $registry;				// Compute selected asset permissions.				$user = JFactory::getUser();				// Technically guest could edit an article, but lets not check that to improve performance a little.				if (!$user->get('guest'))				{					$userId = $user->get('id');					$asset = 'com_content.article.' . $data->id;					// Check general edit permission first.					if ($user->authorise('core.edit', $asset))					{						$data->params->set('access-edit', true);					}					// Now check if edit.own is available.					elseif (!empty($userId) && $user->authorise('core.edit.own', $asset))					{						// Check for a valid user and that they are the owner.						if ($userId == $data->created_by)						{							$data->params->set('access-edit', true);						}					}				}				// Compute view access permissions.				if ($access = $this->getState('filter.access'))				{					// If the access filter has been set, we already know this user can view.					$data->params->set('access-view', true);				}				else				{					// If no access filter is set, the layout takes some responsibility for display of limited information.					$user = JFactory::getUser();					$groups = $user->getAuthorisedViewLevels();					if ($data->catid == 0 || $data->category_access === null)					{						$data->params->set('access-view', in_array($data->access, $groups));					}					else					{						$data->params->set('access-view', in_array($data->access, $groups) && in_array($data->category_access, $groups));					}				}				$this->_item[$pk] = $data;			}			catch (Exception $e)			{				if ($e->getCode() == 404)				{					// Need to go thru the error handler to allow Redirect to work.					JError::raiseError(404, $e->getMessage());				}				else				{					$this->setError($e);					$this->_item[$pk] = false;				}			}		}		return $this->_item[$pk];	}	/**	 * Increment the hit counter for the article.	 *	 * @param   integer  Optional primary key of the article to increment.	 *	 * @return  boolean  True if successful; false otherwise and internal error set.	 */	public function hit($pk = 0)	{		$input = JFactory::getApplication()->input;		$hitcount = $input->getInt('hitcount', 1);		if ($hitcount)		{			$pk = (!empty($pk)) ? $pk : (int) $this->getState('article.id');			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__content' .					' SET hits = hits + 1' .					' WHERE id = ' . (int) $pk			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}	public function storeVote($pk = 0, $rate = 0)	{		if ($rate >= 1 && $rate <= 5 && $pk > 0)		{			$userIP = $_SERVER['REMOTE_ADDR'];			$db = $this->getDbo();			$db->setQuery(				'SELECT *' .					' FROM #__content_rating' .					' WHERE content_id = ' . (int) $pk			);			$rating = $db->loadObject();			if (!$rating)			{				// There are no ratings yet, so lets insert our rating				$db->setQuery(					'INSERT INTO #__content_rating ( content_id, lastip, rating_sum, rating_count )' .						' VALUES ( ' . (int) $pk . ', ' . $db->quote($userIP) . ', ' . (int) $rate . ', 1 )'				);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage);					return false;				}			}			else			{				if ($userIP != ($rating->lastip))				{					$db->setQuery(						'UPDATE #__content_rating' .							' SET rating_count = rating_count + 1, rating_sum = rating_sum + ' . (int) $rate . ', lastip = ' . $db->quote($userIP) .							' WHERE content_id = ' . (int) $pk					);					try					{						$db->execute();					}					catch (RuntimeException $e)					{						$this->setError($e->getMessage);						return false;					}				}				else				{					return false;				}			}			return true;		}		JError::raiseWarning('SOME_ERROR_CODE', JText::sprintf('COM_CONTENT_INVALID_RATING', $rate), "JModelArticle::storeVote($rate)");		return false;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Language installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterLanguage extends JAdapterInstance{	/**	 * Core language pack flag	 *	 * @var    boolean	 * @since  12.1	 */	protected $core = false;	/**	 * Custom install method	 *	 * Note: This behaves badly due to hacks made in the middle of 1.5.x to add	 * the ability to install multiple distinct packs in one install. The	 * preferred method is to use a package to install multiple language packs.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent				->setPath(				'source',				($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/language/' . $this->parent->extension->element			);		}		$this->manifest = $this->parent->getManifest();		// Get the client application target		if ($cname = (string) $this->manifest->attributes()->client)		{			// Attempt to map the client to a base path			$client = JApplicationHelper::getClientInfo($cname, true);			if ($client === null)			{				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_UNKNOWN_CLIENT_TYPE', $cname)));				return false;			}			$basePath = $client->path;			$clientId = $client->id;			$element = $this->manifest->files;			return $this->_install($cname, $basePath, $clientId, $element);		}		else		{			// No client attribute was found so we assume the site as the client			$cname = 'site';			$basePath = JPATH_SITE;			$clientId = 0;			$element = $this->manifest->files;			return $this->_install($cname, $basePath, $clientId, $element);		}	}	/**	 * Install function that is designed to handle individual clients	 *	 * @param   string   $cname     Cname @todo: not used	 * @param   string   $basePath  The base name.	 * @param   integer  $clientId  The client id.	 * @param   object   &$element  The XML element.	 *	 * @return  boolean	 *	 * @since  3.1	 */	protected function _install($cname, $basePath, $clientId, &$element)	{		$this->manifest = $this->parent->getManifest();		// Get the language name		// Set the extensions name		$name = JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd');		$this->set('name', $name);		// Get the Language tag [ISO tag, eg. en-GB]		$tag = (string) $this->manifest->tag;		// Check if we found the tag - if we didn't, we may be trying to install from an older language package		if (!$tag)		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::_('JLIB_INSTALLER_ERROR_NO_LANGUAGE_TAG')));			return false;		}		$this->set('tag', $tag);		// Set the language installation path		$this->parent->setPath('extension_site', $basePath . '/language/' . $tag);		// Do we have a meta file in the file list?  In other words... is this a core language pack?		if ($element && count($element->children()))		{			$files = $element->children();			foreach ($files as $file)			{				if ((string) $file->attributes()->file == 'meta')				{					$this->core = true;					break;				}			}		}		// If the language directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_site')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_site')))			{				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT',						JText::sprintf('JLIB_INSTALLER_ERROR_CREATE_FOLDER_FAILED', $this->parent->getPath('extension_site'))					)				);				return false;			}		}		else		{			// Look for an update function or update tag			$updateElement = $this->manifest->update;			// Upgrade manually set or update tag detected			if ($this->parent->isUpgrade() || $updateElement)			{				// Transfer control to the update function				return $this->update();			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is set				// We didn't have overwrite set, find an update function or find an update tag so lets call it safe				if (file_exists($this->parent->getPath('extension_site')))				{					// If the site exists say so.					JLog::add(						JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_FOLDER_IN_USE', $this->parent->getPath('extension_site'))),						JLog::WARNING, 'jerror'					);				}				else				{					// If the admin exists say so.					JLog::add(						JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_FOLDER_IN_USE', $this->parent->getPath('extension_administrator'))),						JLog::WARNING, 'jerror'					);				}				return false;			}		}		/*		 * If we created the language directory we will want to remove it if we		 * have to roll back the installation, so let's add it to the installation		 * step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_site')));		}		// Copy all the necessary files		if ($this->parent->parseFiles($element) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($this->manifest->media);		// Copy all the necessary font files to the common pdf_fonts directory		$this->parent->setPath('extension_site', $basePath . '/language/pdf_fonts');		$overwrite = $this->parent->setOverwrite(true);		if ($this->parent->parseFiles($this->manifest->fonts) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		$this->parent->setOverwrite($overwrite);		// Get the language description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Add an entry to the extension table with a whole heap of defaults		$row = JTable::getInstance('extension');		$row->set('name', $this->get('name'));		$row->set('type', 'language');		$row->set('element', $this->get('tag'));		// There is no folder for languages		$row->set('folder', '');		$row->set('enabled', 1);		$row->set('protected', 0);		$row->set('access', 0);		$row->set('client_id', $clientId);		$row->set('params', $this->parent->getParams());		$row->set('manifest_cache', $this->parent->generateManifestCache());		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', $row->getError()));			return false;		}		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('tag'), 'type' => 'language', 'client_id' => '', 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * @return  boolean  True on success, false on failure	 *	 * @since   3.1	 */	public function update()	{		$xml = $this->parent->getManifest();		$this->manifest = $xml;		$cname = $xml->attributes()->client;		// Attempt to map the client to a base path		$client = JApplicationHelper::getClientInfo($cname, true);		if ($client === null || (empty($cname) && $cname !== 0))		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::sprintf('JLIB_INSTALLER_ERROR_UNKNOWN_CLIENT_TYPE', $cname)));			return false;		}		$basePath = $client->path;		$clientId = $client->id;		// Get the language name		// Set the extensions name		$name = (string) $this->manifest->name;		$name = JFilterInput::getInstance()->clean($name, 'cmd');		$this->set('name', $name);		// Get the Language tag [ISO tag, eg. en-GB]		$tag = (string) $xml->tag;		// Check if we found the tag - if we didn't, we may be trying to install from an older language package		if (!$tag)		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', JText::_('JLIB_INSTALLER_ERROR_NO_LANGUAGE_TAG')));			return false;		}		$this->set('tag', $tag);		$folder = $tag;		// Set the language installation path		$this->parent->setPath('extension_site', $basePath . '/language/' . $this->get('tag'));		// Do we have a meta file in the file list?  In other words... is this a core language pack?		if (count($xml->files->children()))		{			foreach ($xml->files->children() as $file)			{				if ((string) $file->attributes()->file == 'meta')				{					$this->core = true;					break;				}			}		}		// Copy all the necessary files		if ($this->parent->parseFiles($xml->files) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($xml->media);		// Copy all the necessary font files to the common pdf_fonts directory		$this->parent->setPath('extension_site', $basePath . '/language/pdf_fonts');		$overwrite = $this->parent->setOverwrite(true);		if ($this->parent->parseFiles($xml->fonts) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		$this->parent->setOverwrite($overwrite);		// Get the language description and set it as message		$this->parent->set('message', (string) $xml->description);		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('tag'), 'type' => 'language', 'client_id' => $clientId));		if ($uid)		{			$update->delete($uid);		}		// Update an entry to the extension table		$row = JTable::getInstance('extension');		$eid = $row->find(array('element' => strtolower($this->get('tag')), 'type' => 'language', 'client_id' => $clientId));		if ($eid)		{			$row->load($eid);		}		else		{			// Set the defaults			// There is no folder for language			$row->set('folder', '');			$row->set('enabled', 1);			$row->set('protected', 0);			$row->set('access', 0);			$row->set('client_id', $clientId);			$row->set('params', $this->parent->getParams());		}		$row->set('name', $this->get('name'));		$row->set('type', 'language');		$row->set('element', $this->get('tag'));		$row->set('manifest_cache', $this->parent->generateManifestCache());		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT', $row->getError()));			return false;		}		return $row->get('extension_id');	}	/**	 * Custom uninstall method	 *	 * @param   string  $eid  The tag of the language to uninstall	 *	 * @return  mixed  Return value for uninstall method in component uninstall file	 *	 * @since   3.1	 */	public function uninstall($eid)	{		// Load up the extension details		$extension = JTable::getInstance('extension');		$extension->load($eid);		// Grab a copy of the client details		$client = JApplicationHelper::getClientInfo($extension->get('client_id'));		// Check the element isn't blank to prevent nuking the languages directory...just in case		$element = $extension->get('element');		if (empty($element))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_ELEMENT_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		// Check that the language is not protected, Normally en-GB.		$protected = $extension->get('protected');		if ($protected == 1)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_PROTECTED'), JLog::WARNING, 'jerror');			return false;		}		// Verify that it's not the default language for that client		$params = JComponentHelper::getParams('com_languages');		if ($params->get($client->name) == $element)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_DEFAULT'), JLog::WARNING, 'jerror');			return false;		}		// Construct the path from the client, the language and the extension element name		$path = $client->path . '/language/' . $element;		// Get the package manifest object and remove media		$this->parent->setPath('source', $path);		// We do findManifest to avoid problem when uninstalling a list of extension: getManifest cache its manifest file		$this->parent->findManifest();		$this->manifest = $this->parent->getManifest();		$this->parent->removeFiles($this->manifest->media);		// Check it exists		if (!JFolder::exists($path))		{			// If the folder doesn't exist lets just nuke the row as well and presume the user killed it for us			$extension->delete();			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_PATH_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		if (!JFolder::delete($path))		{			// If deleting failed we'll leave the extension entry in tact just in case			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_UNINSTALL_DIRECTORY'), JLog::WARNING, 'jerror');			return false;		}		// Remove the extension table entry		$extension->delete();		// Setting the language of users which have this language as the default language		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->from('#__users')			->select('*');		$db->setQuery($query);		$users = $db->loadObjectList();		if ($client->name == 'administrator')		{			$param_name = 'admin_language';		}		else		{			$param_name = 'language';		}		$count = 0;		foreach ($users as $user)		{			$registry = new JRegistry;			$registry->loadString($user->params);			if ($registry->get($param_name) == $element)			{				$registry->set($param_name, '');				$query = $db->getQuery(true)					->update('#__users')					->set('params=' . $db->quote($registry))					->where('id=' . (int) $user->id);				$db->setQuery($query);				$db->execute();				$count++;			}		}		if (!empty($count))		{			JLog::add(JText::plural('JLIB_INSTALLER_NOTICE_LANG_RESET_USERS', $count), JLog::NOTICE, 'jerror');		}		// All done!		return true;	}	/**	 * Custom discover method	 * Finds language files	 *	 * @return  boolean  True on success	 *	 * @since  3.1	 */	public function discover()	{		$results = array();		$site_languages = JFolder::folders(JPATH_SITE . '/language');		$admin_languages = JFolder::folders(JPATH_ADMINISTRATOR . '/language');		foreach ($site_languages as $language)		{			if (file_exists(JPATH_SITE . '/language/' . $language . '/' . $language . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(JPATH_SITE . '/language/' . $language . '/' . $language . '.xml');				$extension = JTable::getInstance('extension');				$extension->set('type', 'language');				$extension->set('client_id', 0);				$extension->set('element', $language);				$extension->set('folder', '');				$extension->set('name', $language);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		foreach ($admin_languages as $language)		{			if (file_exists(JPATH_ADMINISTRATOR . '/language/' . $language . '/' . $language . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(JPATH_ADMINISTRATOR . '/language/' . $language . '/' . $language . '.xml');				$extension = JTable::getInstance('extension');				$extension->set('type', 'language');				$extension->set('client_id', 1);				$extension->set('element', $language);				$extension->set('folder', '');				$extension->set('name', $language);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		return $results;	}	/**	 * Custom discover install method	 * Basically updates the manifest cache and leaves everything alone	 *	 * @return  integer  The extension id	 *	 * @since   3.1	 */	public function discover_install()	{		// Need to find to find where the XML file is since we don't store this normally		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$short_element = $this->parent->extension->element;		$manifestPath = $client->path . '/language/' . $short_element . '/' . $short_element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$this->parent->setPath('source', $client->path . '/language/' . $short_element);		$this->parent->setPath('extension_root', $this->parent->getPath('source'));		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		// @todo remove code: $this->parent->extension->params = $this->parent->getParams();		try		{			$this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LANG_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}		return $this->parent->extension->get('extension_id');	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/language/' . $this->parent->extension->element . '/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		if ($this->parent->extension->store())		{			return true;		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_MOD_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterLanguage instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerLanguage extends JInstallerAdapterLanguage{}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a link button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonLink extends JToolbarButton{	/**	 * Button type	 * @var    string	 */	protected $_name = 'Link';	/**	 * Fetch the HTML for the button	 *	 * @param   string  $type  Unused string.	 * @param   string  $name  Name to be used as apart of the id	 * @param   string  $text  Button text	 * @param   string  $url   The link url	 *	 * @return  string  HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Link', $name = 'back', $text = '', $url = null)	{		$text = JText::_($text);		$class = $this->fetchIconClass($name);		$doTask = $this->_getCommand($url);		$html = "<button class=\"btn btn-small\" onclick=\"location.href='$doTask';\">\n";		$html .= "<span class=\"$class\">\n";		$html .= "</span>\n";		$html .= "$text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button CSS Id	 *	 * @param   string  $type  The button type.	 * @param   string  $name  The name of the button.	 *	 * @return  string  Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type = 'Link', $name = '')	{		return $this->_parent->getName() . '-' . $name;	}	/**	 * Get the JavaScript command for the button	 *	 * @param   object  $url  Button definition	 *	 * @return  string  JavaScript command string	 *	 * @since   3.0	 */	protected function _getCommand($url)	{		return $url;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Function to build a Users URL route. * * @return  array  The array of query string values for which to build a route. * @return  array  The URL route with segments represented as an array. * @since    1.5 */function UsersBuildRoute(&$query){	// Declare static variables.	static $items;	static $default;	static $registration;	static $profile;	static $login;	static $remind;	static $resend;	static $reset;	$segments = array();	// Get the relevant menu items if not loaded.	if (empty($items))	{		// Get all relevant menu items.		$app = JFactory::getApplication();		$menu = $app->getMenu();		$items = $menu->getItems('component', 'com_users');		// Build an array of serialized query strings to menu item id mappings.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			// Check to see if we have found the resend menu item.			if (empty($resend) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'resend'))			{				$resend = $items[$i]->id;			}			// Check to see if we have found the reset menu item.			if (empty($reset) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'reset'))			{				$reset = $items[$i]->id;			}			// Check to see if we have found the remind menu item.			if (empty($remind) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'remind'))			{				$remind = $items[$i]->id;			}			// Check to see if we have found the login menu item.			if (empty($login) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'login'))			{				$login = $items[$i]->id;			}			// Check to see if we have found the registration menu item.			if (empty($registration) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'registration'))			{				$registration = $items[$i]->id;			}			// Check to see if we have found the profile menu item.			if (empty($profile) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'profile'))			{				$profile = $items[$i]->id;			}		}		// Set the default menu item to use for com_users if possible.		if ($profile)		{			$default = $profile;		}		elseif ($registration)		{			$default = $registration;		}		elseif ($login)		{			$default = $login;		}	}	if (!empty($query['view']))	{		switch ($query['view'])		{			case 'reset':				if ($query['Itemid'] = $reset)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				break;			case 'resend':				if ($query['Itemid'] = $resend)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				break;			case 'remind':				if ($query['Itemid'] = $remind)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				break;			case 'login':				if ($query['Itemid'] = $login)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				break;			case 'registration':				if ($query['Itemid'] = $registration)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				break;			default:			case 'profile':				if (!empty($query['view']))				{					$segments[] = $query['view'];				}				unset ($query['view']);				if ($query['Itemid'] = $profile)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				// Only append the user id if not "me".				$user = JFactory::getUser();				if (!empty($query['user_id']) && ($query['user_id'] != $user->id))				{					$segments[] = $query['user_id'];				}				unset ($query['user_id']);				break;		}	}	return $segments;}/** * Function to parse a Users URL route. * * @return  array  The URL route with segments represented as an array. * @return  array  The array of variables to set in the request. * @since    1.5 */function UsersParseRoute($segments){	$vars = array();	// Only run routine if there are segments to parse.	if (count($segments) < 1)	{		return;	}	// Get the package from the route segments.	$userId = array_pop($segments);	if (!is_numeric($userId))	{		$vars['view'] = 'profile';		return $vars;	}	if (is_numeric($userId))	{		// Get the package id from the packages table by alias.		$db = JFactory::getDbo();		$db->setQuery(			'SELECT ' . $db->quoteName('id') .				' FROM ' . $db->quoteName('#__users') .				' WHERE ' . $db->quoteName('id') . ' = ' . (int) $userId		);		$userId = $db->loadResult();	}	// Set the package id if present.	if ($userId)	{		// Set the package id.		$vars['user_id'] = (int) $userId;		// Set the view to package if not already set.		if (empty($vars['view']))		{			$vars['view'] = 'profile';		}	}	else	{		JError::raiseError(404, JText::_('JGLOBAL_RESOURCE_NOT_FOUND'));	}	return $vars;}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Getting params from template$params = JFactory::getApplication()->getTemplate(true)->params;$app = JFactory::getApplication();$doc = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;// Detecting Active Variables$option   = $app->input->getCmd('option', '');$view     = $app->input->getCmd('view', '');$layout   = $app->input->getCmd('layout', '');$task     = $app->input->getCmd('task', '');$itemid   = $app->input->getCmd('Itemid', '');$sitename = $app->getCfg('sitename');if($task == "edit" || $layout == "form" ){	$fullWidth = 1;}else{	$fullWidth = 0;}// Add JavaScript FrameworksJHtml::_('bootstrap.framework');// Add current user information$user = JFactory::getUser();// Logo fileif ($params->get('logoFile')){	$logo = JURI::root() . $params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<title><?php echo $this->title; ?> <?php echo $this->error->getMessage();?></title>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<meta http-equiv="content-type" content="text/html; charset=utf-8" />	<meta name="language" content="<?php echo $this->language; ?>" />	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/template.css" type="text/css" />	<?php		$debug = JFactory::getConfig()->get('debug_lang');		if ((defined('JDEBUG') && JDEBUG) || $debug)		{	?>		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/media/cms/css/debug.css" type="text/css" />	<?php		}	?>	<?php	// If Right-to-Left	if ($this->direction == 'rtl')	{	?>		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/media/jui/css/bootstrap-rtl.css" type="text/css" />	<?php	}	// Use of Google Font	if ($params->get('googleFont'))	{	?>		<link href='http://fonts.googleapis.com/css?family=<?php echo $params->get('googleFontName');?>' rel='stylesheet' type='text/css'>	<?php	}	?>	<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />	<?php	// Template color	if ($params->get('templateColor'))	{	?>	<style type="text/css">		body.site		{			border-top: 3px solid <?php echo $params->get('templateColor');?>;			background-color: <?php echo $params->get('templateBackgroundColor');?>		}		a		{			color: <?php echo $params->get('templateColor');?>;		}		.navbar-inner, .nav-list > .active > a, .nav-list > .active > a:hover, .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover, .nav-pills > .active > a, .nav-pills > .active > a:hover		{			background: <?php echo $params->get('templateColor');?>;		}		.navbar-inner		{			-moz-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			-webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);		}	</style>	<?php	}	?>	<!--[if lt IE 9]>		<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script>	<![endif]--></head><body class="site <?php echo $option	. ' view-' . $view	. ($layout ? ' layout-' . $layout : ' no-layout')	. ($task ? ' task-' . $task : ' no-task')	. ($itemid ? ' itemid-' . $itemid : '')	. ($params->get('fluidContainer') ? ' fluid' : '');?>">	<!-- Body -->	<div class="body">		<div class="container<?php echo ($params->get('fluidContainer') ? '-fluid' : '');?>">			<!-- Header -->			<div class="header">				<div class="header-inner clearfix">					<a class="brand pull-left" href="<?php echo $this->baseurl; ?>">						<img src="<?php echo $logo;?>" alt="<?php echo $sitename; ?>" />					</a>					<div class="header-search pull-right">						<?php						// Display position-0 modules						$this->searchmodules = JModuleHelper::getModules('position-0');						foreach ($this->searchmodules as $searchmodule)						{							$output = JModuleHelper::renderModule($searchmodule, array('style' => 'none'));							$params = new JRegistry;							$params->loadString($searchmodule->params);							echo $output;						}						?>					</div>				</div>			</div>			<div class="navigation">				<?php				// Display position-1 modules				$this->navmodules = JModuleHelper::getModules('position-1');				foreach ($this->navmodules as $navmodule)				{					$output = JModuleHelper::renderModule($navmodule, array('style' => 'none'));					$params = new JRegistry;					$params->loadString($navmodule->params);					echo $output;				}				?>			</div>			<!-- Banner -->			<div class="banner">				<jdoc:include type="modules" name="banner" style="xhtml" />			</div>			<div class="row-fluid">				<div id="content" class="span12">					<!-- Begin Content -->					<h1 class="page-header"><?php echo JText::_('JERROR_LAYOUT_PAGE_NOT_FOUND'); ?></h1>					<div class="well">						<div class="row-fluid">							<div class="span6">								<p><strong><?php echo JText::_('JERROR_LAYOUT_ERROR_HAS_OCCURRED_WHILE_PROCESSING_YOUR_REQUEST'); ?></strong></p>								<p><?php echo JText::_('JERROR_LAYOUT_NOT_ABLE_TO_VISIT'); ?></p>								<ul>									<li><?php echo JText::_('JERROR_LAYOUT_AN_OUT_OF_DATE_BOOKMARK_FAVOURITE'); ?></li>									<li><?php echo JText::_('JERROR_LAYOUT_MIS_TYPED_ADDRESS'); ?></li>									<li><?php echo JText::_('JERROR_LAYOUT_SEARCH_ENGINE_OUT_OF_DATE_LISTING'); ?></li>									<li><?php echo JText::_('JERROR_LAYOUT_YOU_HAVE_NO_ACCESS_TO_THIS_PAGE'); ?></li>								</ul>							</div>							<div class="span6">								<?php if (JModuleHelper::getModule('search')) : ?>									<p><strong><?php echo JText::_('JERROR_LAYOUT_SEARCH'); ?></strong></p>									<p><?php echo JText::_('JERROR_LAYOUT_SEARCH_PAGE'); ?></p>									<?php										$module = JModuleHelper::getModule('search');										echo JModuleHelper::renderModule($module);									?>								<?php endif; ?>								<p><?php echo JText::_('JERROR_LAYOUT_GO_TO_THE_HOME_PAGE'); ?></p>								<p><a href="<?php echo $this->baseurl; ?>/index.php" class="btn"><i class="icon-home"></i> <?php echo JText::_('JERROR_LAYOUT_HOME_PAGE'); ?></a></p>							</div>						</div>						<hr />						<p><?php echo JText::_('JERROR_LAYOUT_PLEASE_CONTACT_THE_SYSTEM_ADMINISTRATOR'); ?></p>						<blockquote>							<span class="label label-inverse"><?php echo $this->error->getCode(); ?></span> <?php echo $this->error->getMessage();?>						</blockquote>					</div>					<!-- End Content -->				</div>			</div>		</div>	</div>	<!-- Footer -->	<div class="footer">		<div class="container<?php echo ($params->get('fluidContainer') ? '-fluid' : '');?>">			<hr />			<jdoc:include type="modules" name="footer" style="none" />			<p class="pull-right"><a href="#top" id="back-top"><?php echo JText::_('TPL_PROTOSTAR_BACKTOTOP'); ?></a></p>			<p>&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>		</div>	</div>	<jdoc:include type="modules" name="debug" style="none" /></body></html>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Single check box field. * This is a boolean field with null for false and the specified option for true * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.checkbox.html#input.checkbox * @see         JFormFieldCheckboxes * @since       11.1 */class JFormFieldCheckbox extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Checkbox';	/**	 * Method to get the field input markup.	 * The checked element sets the field to selected.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$value = $this->element['value'] ? (string) $this->element['value'] : '1';		$required = $this->required ? ' required="required" aria-required="true"' : '';		if (empty($this->value))		{			$checked = (isset($this->element['checked'] )) ? ' checked="checked"' : '';		}		else		{			$checked = ' checked="checked"';		}		// Initialize JavaScript field attributes.		$onclick = $this->element['onclick'] ? ' onclick="' . (string) $this->element['onclick'] . '"' : '';		return '<input type="checkbox" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '"' . $class . $checked . $disabled . $onclick . $required . ' />';	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_weblinks/helpers/route.php';require_once JPATH_SITE . '/components/com_weblinks/helpers/category.php';JModelLegacy::addIncludePath(JPATH_SITE . '/components/com_weblinks/models', 'WeblinksModel');/** * Helper for mod_weblinks * * @package     Joomla.Site * @subpackage  mod_weblinks */class ModWeblinksHelper{	public static function getList($params)	{		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Category', 'WeblinksModel', array('ignore_request' => true));		// Set application parameters in model		$app = JFactory::getApplication();		$appParams = $app->getParams();		$model->setState('params', $appParams);		// Set the filters based on the module params		$model->setState('list.start', 0);		$model->setState('list.limit', (int) $params->get('count', 5));		$model->setState('filter.state', 1);		$model->setState('filter.publish_date', true);		// Access filter		$access = !JComponentHelper::getParams('com_weblinks')->get('show_noauth');		$model->setState('filter.access', $access);		$ordering = $params->get('ordering', 'ordering');		$model->setState('list.ordering', $ordering == 'order' ? 'ordering' : $ordering);		$model->setState('list.direction', $params->get('direction', 'asc'));		$catid	= (int) $params->get('catid', 0);		$model->setState('category.id', $catid);		// Create query object		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$case_when1 = ' CASE WHEN ';		$case_when1 .= $query->charLength('a.alias', '!=', '0');		$case_when1 .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when1 .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when1 .= ' ELSE ';		$case_when1 .= $a_id.' END as slug';		$case_when2 = ' CASE WHEN ';		$case_when2 .= $query->charLength('c.alias', '!=', '0');		$case_when2 .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when2 .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when2 .= ' ELSE ';		$case_when2 .= $c_id.' END as catslug';		$model->setState(			'list.select',			'a.*, c.published AS c_published,' . $case_when1 . ',' . $case_when2 . ',' . 'DATE_FORMAT(a.created, "%Y-%m-%d") AS created'		);		$model->setState('filter.c.published', 1);		// Filter by language		$model->setState('filter.language', $app->getLanguageFilter());		$items = $model->getItems();		if ($items)		{			foreach ($items as $item)			{				if ($item->params->get('count_clicks', $params->get('count_clicks')) == 1)				{					$item->link	= JRoute::_('index.php?option=com_weblinks&task=weblink.go&catid=' . $item->catslug . '&id=' . $item->slug);				}				else				{					$item->link = $item->url;				}			}			return $items;		}		else		{			return;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * File cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheStorageFile extends JCacheStorage{	/**	 * @var    string	 * @since  11.1	 */	protected $_root;	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		$this->_root = $options['cachebase'];	}	// NOTE: raw php calls are up to 100 times faster than JFile or JFolder	/**	 * Get cached data from a file by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean false on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$data = false;		$path = $this->_getFilePath($id, $group);		if ($checkTime == false || ($checkTime == true && $this->_checkExpire($id, $group) === true))		{			if (file_exists($path))			{				$data = file_get_contents($path);				if ($data)				{					// Remove the initial die() statement					$data = str_replace('<?php die("Access Denied"); ?>#x#', '', $data);				}			}			return $data;		}		else		{			return false;		}	}	/**	 * Get all cached data	 *	 * @return  array  The cached data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$path = $this->_root;		$folders = $this->_folders($path);		$data = array();		foreach ($folders as $folder)		{			$files = array();			$files = $this->_filesInFolder($path . '/' . $folder);			$item = new JCacheStorageHelper($folder);			foreach ($files as $file)			{				$item->updateSize(filesize($path . '/' . $folder . '/' . $file) / 1024);			}			$data[$folder] = $item;		}		return $data;	}	/**	 * Store the data to a file by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$written = false;		$path = $this->_getFilePath($id, $group);		$die = '<?php die("Access Denied"); ?>#x#';		// Prepend a die string		$data = $die . $data;		$_fileopen = @fopen($path, "wb");		if ($_fileopen)		{			$len = strlen($data);			@fwrite($_fileopen, $data, $len);			$written = true;		}		// Data integrity check		if ($written && ($data == file_get_contents($path)))		{			return true;		}		else		{			return false;		}	}	/**	 * Remove a cached data file by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$path = $this->_getFilePath($id, $group);		if (!@unlink($path))		{			return false;		}		return true;	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 * group mode     : cleans all cache in the group	 * notgroup mode  : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$return = true;		$folder = $group;		if (trim($folder) == '')		{			$mode = 'notgroup';		}		switch ($mode)		{			case 'notgroup':				$folders = $this->_folders($this->_root);				for ($i = 0, $n = count($folders); $i < $n; $i++)				{					if ($folders[$i] != $folder)					{						$return |= $this->_deleteFolder($this->_root . '/' . $folders[$i]);					}				}				break;			case 'group':			default:				if (is_dir($this->_root . '/' . $folder))				{					$return = $this->_deleteFolder($this->_root . '/' . $folder);				}				break;		}		return $return;	}	/**	 * Garbage collect expired cache data	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		$result = true;		// Files older than lifeTime get deleted from cache		$files = $this->_filesInFolder($this->_root, '', true, true, array('.svn', 'CVS', '.DS_Store', '__MACOSX', 'index.html'));		foreach ($files as $file)		{			$time = @filemtime($file);			if (($time + $this->_lifetime) < $this->_now || empty($time))			{				$result |= @unlink($file);			}		}		return $result;	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		$conf = JFactory::getConfig();		return is_writable($conf->get('cache_path', JPATH_CACHE));	}	/**	 * Lock cached item	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function lock($id, $group, $locktime)	{		$returning = new stdClass;		$returning->locklooped = false;		$looptime = $locktime * 10;		$path = $this->_getFilePath($id, $group);		$_fileopen = @fopen($path, "r+b");		if ($_fileopen)		{			$data_lock = @flock($_fileopen, LOCK_EX);		}		else		{			$data_lock = false;		}		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = @flock($_fileopen, LOCK_EX);				$lock_counter++;			}		}		$returning->locked = $data_lock;		return $returning;	}	/**	 * Unlock cached item	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		$path = $this->_getFilePath($id, $group);		$_fileopen = @fopen($path, "r+b");		if ($_fileopen)		{			$ret = @flock($_fileopen, LOCK_UN);			@fclose($_fileopen);		}		return $ret;	}	/**	 * Check to make sure cache is still valid, if not, delete it.	 *	 * @param   string  $id     Cache key to expire.	 * @param   string  $group  The cache data group.	 *	 * @return  boolean  False if not valid	 *	 * @since   11.1	 */	protected function _checkExpire($id, $group)	{		$path = $this->_getFilePath($id, $group);		// Check prune period		if (file_exists($path))		{			$time = @filemtime($path);			if (($time + $this->_lifetime) < $this->_now || empty($time))			{				@unlink($path);				return false;			}			return true;		}		return false;	}	/**	 * Get a cache file path from an id/group pair	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  string   The cache file path	 *	 * @since   11.1	 */	protected function _getFilePath($id, $group)	{		$name = $this->_getCacheId($id, $group);		$dir = $this->_root . '/' . $group;		// If the folder doesn't exist try to create it		if (!is_dir($dir))		{			// Make sure the index file is there			$indexFile = $dir . '/index.html';			@ mkdir($dir) && file_put_contents($indexFile, '<!DOCTYPE html><title></title>');		}		// Make sure the folder exists		if (!is_dir($dir))		{			return false;		}		return $dir . '/' . $name . '.php';	}	/**	 * Quickly delete a folder of files	 *	 * @param   string  $path  The path to the folder to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	protected function _deleteFolder($path)	{		// Sanity check		if (!$path || !is_dir($path) || empty($this->_root))		{			// Bad programmer! Bad Bad programmer!			JLog::add('JCacheStorageFile::_deleteFolder ' . JText::_('JLIB_FILESYSTEM_ERROR_DELETE_BASE_DIRECTORY'), JLog::WARNING, 'jerror');			return false;		}		$path = $this->_cleanPath($path);		// Check to make sure path is inside cache folder, we do not want to delete Joomla root!		$pos = strpos($path, $this->_cleanPath($this->_root));		if ($pos === false || $pos > 0)		{			JLog::add('JCacheStorageFile::_deleteFolder' . JText::sprintf('JLIB_FILESYSTEM_ERROR_PATH_IS_NOT_A_FOLDER', $path), JLog::WARNING, 'jerror');			return false;		}		// Remove all the files in folder if they exist; disable all filtering		$files = $this->_filesInFolder($path, '.', false, true, array(), array());		if (!empty($files) && !is_array($files))		{			if (@unlink($files) !== true)			{				return false;			}		}		elseif (!empty($files) && is_array($files))		{			foreach ($files as $file)			{				$file = $this->_cleanPath($file);				// In case of restricted permissions we zap it one way or the other				// as long as the owner is either the webserver or the ftp				if (@unlink($file))				{					// Do nothing				}				else				{					$filename = basename($file);					JLog::add('JCacheStorageFile::_deleteFolder' . JText::sprintf('JLIB_FILESYSTEM_DELETE_FAILED', $filename), JLog::WARNING, 'jerror');					return false;				}			}		}		// Remove sub-folders of folder; disable all filtering		$folders = $this->_folders($path, '.', false, true, array(), array());		foreach ($folders as $folder)		{			if (is_link($folder))			{				// Don't descend into linked directories, just delete the link.				if (@unlink($folder) !== true)				{					return false;				}			}			elseif ($this->_deleteFolder($folder) !== true)			{				return false;			}		}		// In case of restricted permissions we zap it one way or the other		// as long as the owner is either the webserver or the ftp		if (@rmdir($path))		{			$ret = true;		}		else		{			JLog::add('JCacheStorageFile::_deleteFolder' . JText::sprintf('JLIB_FILESYSTEM_ERROR_FOLDER_DELETE', $path), JLog::WARNING, 'jerror');			$ret = false;		}		return $ret;	}	/**	 * Function to strip additional / or \ in a path name	 *	 * @param   string  $path  The path to clean	 * @param   string  $ds    Directory separator (optional)	 *	 * @return  string  The cleaned path	 *	 * @since   11.1	 */	protected function _cleanPath($path, $ds = DIRECTORY_SEPARATOR)	{		$path = trim($path);		if (empty($path))		{			$path = $this->_root;		}		else		{			// Remove double slashes and backslahses and convert all slashes and backslashes to DIRECTORY_SEPARATOR			$path = preg_replace('#[/\\\\]+#', $ds, $path);		}		return $path;	}	/**	 * Utility function to quickly read the files in a folder.	 *	 * @param   string   $path           The path of the folder to read.	 * @param   string   $filter         A filter for file names.	 * @param   mixed    $recurse        True to recursively search into sub-folders, or an	 *                                   integer to specify the maximum depth.	 * @param   boolean  $fullpath       True to return the full path to the file.	 * @param   array    $exclude        Array with names of files which should not be shown in	 *                                   the result.	 * @param   array    $excludefilter  Array of folder names to exclude	 *	 * @return  array    Files in the given folder.	 *	 * @since   11.1	 */	protected function _filesInFolder($path, $filter = '.', $recurse = false, $fullpath = false		, $exclude = array('.svn', 'CVS', '.DS_Store', '__MACOSX'), $excludefilter = array('^\..*', '.*~'))	{		$arr = array();		// Check to make sure the path valid and clean		$path = $this->_cleanPath($path);		// Is the path a folder?		if (!is_dir($path))		{			JLog::add('JCacheStorageFile::_filesInFolder' . JText::sprintf('JLIB_FILESYSTEM_ERROR_PATH_IS_NOT_A_FOLDER', $path), JLog::WARNING, 'jerror');			return false;		}		// Read the source directory.		if (!($handle = @opendir($path)))		{			return $arr;		}		if (count($excludefilter))		{			$excludefilter = '/(' . implode('|', $excludefilter) . ')/';		}		else		{			$excludefilter = '';		}		while (($file = readdir($handle)) !== false)		{			if (($file != '.') && ($file != '..') && (!in_array($file, $exclude)) && (!$excludefilter || !preg_match($excludefilter, $file)))			{				$dir = $path . '/' . $file;				$isDir = is_dir($dir);				if ($isDir)				{					if ($recurse)					{						if (is_int($recurse))						{							$arr2 = $this->_filesInFolder($dir, $filter, $recurse - 1, $fullpath);						}						else						{							$arr2 = $this->_filesInFolder($dir, $filter, $recurse, $fullpath);						}						$arr = array_merge($arr, $arr2);					}				}				else				{					if (preg_match("/$filter/", $file))					{						if ($fullpath)						{							$arr[] = $path . '/' . $file;						}						else						{							$arr[] = $file;						}					}				}			}		}		closedir($handle);		return $arr;	}	/**	 * Utility function to read the folders in a folder.	 *	 * @param   string   $path           The path of the folder to read.	 * @param   string   $filter         A filter for folder names.	 * @param   mixed    $recurse        True to recursively search into sub-folders, or an integer to specify the maximum depth.	 * @param   boolean  $fullpath       True to return the full path to the folders.	 * @param   array    $exclude        Array with names of folders which should not be shown in the result.	 * @param   array    $excludefilter  Array with regular expressions matching folders which should not be shown in the result.	 *	 * @return  array  Folders in the given folder.	 *	 * @since   11.1	 */	protected function _folders($path, $filter = '.', $recurse = false, $fullpath = false		, $exclude = array('.svn', 'CVS', '.DS_Store', '__MACOSX'), $excludefilter = array('^\..*'))	{		$arr = array();		// Check to make sure the path valid and clean		$path = $this->_cleanPath($path);		// Is the path a folder?		if (!is_dir($path))		{			JLog::add('JCacheStorageFile::_folders' . JText::sprintf('JLIB_FILESYSTEM_ERROR_PATH_IS_NOT_A_FOLDER', $path), JLog::WARNING, 'jerror');			return false;		}		// Read the source directory		if (!($handle = @opendir($path)))		{			return $arr;		}		if (count($excludefilter))		{			$excludefilter_string = '/(' . implode('|', $excludefilter) . ')/';		}		else		{			$excludefilter_string = '';		}		while (($file = readdir($handle)) !== false)		{			if (($file != '.') && ($file != '..')				&& (!in_array($file, $exclude))				&& (empty($excludefilter_string) || !preg_match($excludefilter_string, $file)))			{				$dir = $path . '/' . $file;				$isDir = is_dir($dir);				if ($isDir)				{					// Removes filtered directories					if (preg_match("/$filter/", $file))					{						if ($fullpath)						{							$arr[] = $dir;						}						else						{							$arr[] = $file;						}					}					if ($recurse)					{						if (is_int($recurse))						{							$arr2 = $this->_folders($dir, $filter, $recurse - 1, $fullpath, $exclude, $excludefilter);						}						else						{							$arr2 = $this->_folders($dir, $filter, $recurse, $fullpath, $exclude, $excludefilter);						}						$arr = array_merge($arr, $arr2);					}				}			}		}		closedir($handle);		return $arr;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Session table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableSession extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__session', 'session_id', $db);		$this->guest = 1;		$this->username = '';	}	/**	 * Insert a session	 *	 * @param   string   $sessionId  The session id	 * @param   integer  $clientId   The id of the client application	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function insert($sessionId, $clientId)	{		$this->session_id = $sessionId;		$this->client_id = $clientId;		$this->time = time();		$ret = $this->_db->insertObject($this->_tbl, $this, 'session_id');		if (!$ret)		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', strtolower(get_class($this)), $this->_db->stderr()));			return false;		}		else		{			return true;		}	}	/**	 * Updates the session	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function update($updateNulls = false)	{		$this->time = time();		$ret = $this->_db->updateObject($this->_tbl, $this, 'session_id', $updateNulls);		if (!$ret)		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', strtolower(get_class($this)), $this->_db->stderr()));			return false;		}		else		{			return true;		}	}	/**	 * Destroys the pre-existing session	 *	 * @param   integer  $userId     Identifier of the user for this session.	 * @param   array    $clientIds  Array of client ids for which session(s) will be destroyed	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function destroy($userId, $clientIds = array())	{		$clientIds = implode(',', $clientIds);		$query = $this->_db->getQuery(true)			->delete($this->_db->quoteName($this->_tbl))			->where($this->_db->quoteName('userid') . ' = ' . $this->_db->quote($userId))			->where($this->_db->quoteName('client_id') . ' IN (' . $clientIds . ')');		$this->_db->setQuery($query);		if (!$this->_db->execute())		{			$this->setError($this->_db->stderr());			return false;		}		return true;	}	/**	 * Purge old sessions	 *	 * @param   integer  $maxLifetime  Session age in seconds	 *	 * @return  mixed  Resource on success, null on fail	 *	 * @since   11.1	 */	public function purge($maxLifetime = 1440)	{		$past = time() - $maxLifetime;		$query = $this->_db->getQuery(true)			->delete($this->_db->quoteName($this->_tbl))			->where($this->_db->quoteName('time') . ' < ' . (int) $past);		$this->_db->setQuery($query);		return $this->_db->execute();	}	/**	 * Find out if a user has a one or more active sessions	 *	 * @param   integer  $userid  The identifier of the user	 *	 * @return  boolean  True if a session for this user exists	 *	 * @since   11.1	 */	public function exists($userid)	{		$query = $this->_db->getQuery(true)			->select('COUNT(userid)')			->from($this->_db->quoteName($this->_tbl))			->where($this->_db->quoteName('userid') . ' = ' . $this->_db->quote($userid));		$this->_db->setQuery($query);		if (!$result = $this->_db->loadResult())		{			$this->setError($this->_db->stderr());			return false;		}		return (boolean) $result;	}	/**	 * Overloaded delete method	 *	 * We must override it because of the non-integer primary key	 *	 * @param   integer  $oid  The object id (optional).	 *	 * @return  mixed  True if successful otherwise an error message	 *	 * @since   11.1	 */	public function delete($oid = null)	{		$k = $this->_tbl_key;		if ($oid)		{			$this->$k = $oid;		}		$query = $this->_db->getQuery(true)			->delete($this->_db->quoteName($this->_tbl))			->where($this->_db->quoteName($this->_tbl_key) . ' = ' . $this->_db->quote($this->$k));		$this->_db->setQuery($query);		$this->_db->execute();		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt * @since       3.0 */defined('_JEXEC') or die;$app   = JFactory::getApplication();$doc   = JFactory::getDocument();$lang  = JFactory::getLanguage();$this->language = $doc->language;$this->direction = $doc->direction;$input = $app->input;$user  = JFactory::getUser();// Add JavaScript FrameworksJHtml::_('bootstrap.framework');$doc->addScript('templates/' .$this->template. '/js/template.js');// Add Stylesheets$doc->addStyleSheet('templates/' . $this->template . '/css/template.css');// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Detecting Active Variables$option   = $input->get('option', '');$view     = $input->get('view', '');$layout   = $input->get('layout', '');$task     = $input->get('task', '');$itemid   = $input->get('Itemid', '');$sitename = $app->getCfg('sitename');$cpanel = ($option === 'com_cpanel');$showSubmenu = false;$this->submenumodules = JModuleHelper::getModules('submenu');foreach ($this->submenumodules as $submenumodule){	$output = JModuleHelper::renderModule($submenumodule);	if (strlen($output))	{		$showSubmenu = true;		break;	}}// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}// Template Parameters$displayHeader = $this->params->get('displayHeader', '1');$statusFixed = $this->params->get('statusFixed', '1');$stickyToolbar = $this->params->get('stickyToolbar', '1');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<jdoc:include type="head" />	<?php	// Template color	if ($this->params->get('templateColor'))	{	?>	<style type="text/css">		.navbar-inner, .navbar-inverse .navbar-inner, .nav-list > .active > a, .nav-list > .active > a:hover, .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover, .navbar-inverse .nav li.dropdown.open > .dropdown-toggle, .navbar-inverse .nav li.dropdown.active > .dropdown-toggle, .navbar-inverse .nav li.dropdown.open.active > .dropdown-toggle, #status.status-top		{			background: <?php echo $this->params->get('templateColor');?>;		}		.navbar-inner, .navbar-inverse .nav li.dropdown.open > .dropdown-toggle, .navbar-inverse .nav li.dropdown.active > .dropdown-toggle, .navbar-inverse .nav li.dropdown.open.active > .dropdown-toggle{			-moz-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			-webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);		}	</style>	<?php	}	?>	<?php	// Template header color	if ($this->params->get('headerColor'))	{	?>	<style type="text/css">		.header		{			background: <?php echo $this->params->get('headerColor');?>;		}	</style>	<?php	}	?>	<!--[if lt IE 9]>		<script src="../media/jui/js/html5.js"></script>	<![endif]--></head><body class="admin <?php echo $option . " view-" . $view . " layout-" . $layout . " task-" . $task . " itemid-" . $itemid . " ";?>" <?php if ($stickyToolbar) : ?>data-spy="scroll" data-target=".subhead" data-offset="87"<?php endif;?>>	<!-- Top Navigation -->	<nav class="navbar navbar-inverse navbar-fixed-top">		<div class="navbar-inner">			<div class="container-fluid">				<?php if ($this->params->get('admin_menus') != '0') : ?>					<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">						<span class="icon-bar"></span>						<span class="icon-bar"></span>						<span class="icon-bar"></span>					</a>				<?php endif; ?>				<a class="brand" href="<?php echo JURI::root(); ?>" title="<?php echo JText::_('JGLOBAL_PREVIEW');?> <?php echo $sitename; ?>" target="_blank"><?php echo JHtml::_('string.truncate', $sitename, 14, false, false);?> <i class="icon-out-2 small"></i></a>				<?php if ($this->params->get('admin_menus') != '0') : ?>				<div class="nav-collapse">				<?php else : ?>				<div>				<?php endif; ?>					<jdoc:include type="modules" name="menu" style="none" />					<ul class="<?php if ($this->direction == 'rtl') : ?>nav<?php else : ?>nav pull-right<?php endif; ?>">						<li class="dropdown"> <a class="dropdown-toggle" data-toggle="dropdown" href="#"><?php echo $user->name; ?> <b class="caret"></b></a>							<ul class="dropdown-menu">								<li class=""><a href="index.php?option=com_admin&task=profile.edit&id=<?php echo $user->id;?>"><?php echo JText::_('TPL_ISIS_EDIT_ACCOUNT');?></a></li>								<li class="divider"></li>								<li class=""><a href="<?php echo JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');?>"><?php echo JText::_('TPL_ISIS_LOGOUT');?></a></li>							</ul>						</li>					</ul>				</div>				<!--/.nav-collapse -->			</div>		</div>	</nav>	<!-- Header -->	<?php	if ($displayHeader):	?>	<header class="header">		<div class="container-fluid">			<div class="row-fluid">				<div class="span2 container-logo">					<a class="logo" href="<?php echo $this->baseurl; ?>"><img src="<?php echo $logo;?>" alt="<?php echo $sitename; ?>" /></a>				</div>				<div class="span10">					<?php if (isset($app->JComponentTitle)) : ?>						<h1 class="page-title"><?php echo JHtml::_('string.truncate', $app->JComponentTitle, 0, false, false);?></h1>					<?php else : ?>						<h1 class="page-title"><?php echo JHtml::_('string.truncate', '', 0, false, false);?></h1>					<?php endif; ?>				</div>			</div>		</div>	</header>	<?php	endif;	?>	<?php	if ((!$statusFixed) && ($this->countModules('status'))):	?>	<!-- Begin Status Module -->	<div id="status" class="navbar status-top hidden-phone">		<div class="btn-toolbar">			<jdoc:include type="modules" name="status" style="no" />		</div>		<div class="clearfix"></div>	</div>	<!-- End Status Module -->	<?php	endif;	?>	<?php	if (!$cpanel):	?>	<!-- Subheader -->	<a class="btn btn-subhead" data-toggle="collapse" data-target=".subhead-collapse"><?php echo JText::_('TPL_ISIS_TOOLBAR');?> <i class="icon-wrench"></i></a>	<div class="subhead-collapse">		<div class="subhead">			<div class="container-fluid">				<div id="container-collapse" class="container-collapse"></div>				<div class="row-fluid">					<div class="span12">						<jdoc:include type="modules" name="toolbar" style="no" />					</div>				</div>			</div>		</div>	</div>	<?php	else:	?>	<div style="margin-bottom: 20px"></div>	<?php	endif;	?>	<!-- container-fluid -->	<div class="container-fluid container-main">		<section id="content">			<!-- Begin Content -->			<jdoc:include type="modules" name="top" style="xhtml" />			<div class="row-fluid">				<?php if ($showSubmenu) : ?>					<div class="span2">						<jdoc:include type="modules" name="submenu" style="none" />					</div>					<div class="span10">				<?php else : ?>					<div class="span12">				<?php endif; ?>						<jdoc:include type="message" />						<?php						// Show the page title here if the header is hidden						if (!$displayHeader):						?>						<h1 class="content-title"><?php echo JHtml::_('string.truncate', $app->JComponentTitle, 0, false, false);?></h1>						<?php						endif;						?>						<jdoc:include type="component" />					</div>			</div>			<jdoc:include type="modules" name="bottom" style="xhtml" />			<!-- End Content -->		</section>		<hr />		<?php if (!$this->countModules('status')) : ?>			<footer class="footer">				<p>&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>			</footer>		<?php endif; ?>	</div>	<?php if (($statusFixed) && ($this->countModules('status'))) : ?>	<!-- Begin Status Module -->	<div id="status" class="navbar navbar-fixed-bottom hidden-phone">		<div class="btn-toolbar">			<div class="btn-group pull-right">				<p>&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>			</div>			<jdoc:include type="modules" name="status" style="no" />		</div>	</div>	<!-- End Status Module -->	<?php endif; ?>	<jdoc:include type="modules" name="debug" style="none" />	<?php if ($stickyToolbar) : ?>	<script>		(function($){			// fix sub nav on scroll			var $win = $(window)			  , $nav = $('.subhead')			  , navTop = $('.subhead').length && $('.subhead').offset().top - <?php if ($displayHeader || !$statusFixed) : ?>40<?php else:?>20<?php endif;?>			  , isFixed = 0			processScroll()			// hack sad times - holdover until rewrite for 2.1			$nav.on('click', function ()			{				if (!isFixed) setTimeout(function () {  $win.scrollTop($win.scrollTop() - 47) }, 10)			})			$win.on('scroll', processScroll)			function processScroll()			{				var i, scrollTop = $win.scrollTop()				if (scrollTop >= navTop && !isFixed)				{					isFixed = 1					$nav.addClass('subhead-fixed')				} else if (scrollTop <= navTop && isFixed)				{					isFixed = 0					$nav.removeClass('subhead-fixed')				}			}		})(jQuery);	</script>	<?php endif; ?></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');require_once __DIR__ . '/../../helpers/banners.php';/** * Bannerclient Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldBannerClient extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'BannerClient';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	public function getOptions()	{		return BannersHelper::getClientOptions();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT_ADMINISTRATOR.'/models/weblink.php';/** * Weblinks model. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.6 */class WeblinksModelForm extends WeblinksModelWeblink{	/**	 * Get the return URL.	 *	 * @return  string	The return URL.	 * @since   1.6	 */	public function getReturnPage()	{		return base64_encode($this->getState('return_page'));	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication();		// Load state from the request.		$pk = $app->input->getInt('w_id');		$this->setState('weblink.id', $pk);		// Add compatibility variable for default naming conventions.		$this->setState('form.id', $pk);		$categoryId	= $app->input->getInt('catid');		$this->setState('weblink.catid', $categoryId);		$return = $app->input->get('return', null, 'base64');		if (!JUri::isInternal(base64_decode($return)))		{			$return = null;		}		$this->setState('return_page', base64_decode($return));		// Load the parameters.		$params	= $app->getParams();		$this->setState('params', $params);		$this->setState('layout', $app->input->get('layout'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');// Get the form fieldsets.$fieldsets = $this->form->getFieldsets();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'profile.cancel' || document.formvalidator.isValid(document.id('profile-form')))		{			Joomla.submitform(task, document.getElementById('profile-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_admin&view=profile&layout=edit&id='.$this->item->id); ?>" method="post" name="adminForm" id="profile-form" class="form-validate form-horizontal" enctype="multipart/form-data">	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'account')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'account', JText::_('COM_ADMIN_USER_ACCOUNT_DETAILS', true)); ?>			<?php foreach ($this->form->getFieldset('user_details') as $field) : ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php		foreach ($fieldsets as $fieldset) :			if ($fieldset->name == 'user_details') :				continue;			endif;		?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', $fieldset->name, JText::_($fieldset->label, true)); ?>			<?php foreach ($this->form->getFieldset($fieldset->name) as $field) : ?>				<?php if ($field->hidden) : ?>				<div class="control-group">					<div class="controls"><?php echo $field->input; ?></div>				</div>				<?php else: ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>				<?php endif; ?>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $this UsersViewNote */JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script language="javascript" type="text/javascript">Joomla.submitbutton = function(task){	if (task == 'note.cancel' || document.formvalidator.isValid(document.id('note-form')))	{		Joomla.submitform(task, document.getElementById('note-form'));	}}</script><form action="<?php echo JRoute::_('index.php?option=com_users&view=note&id='.(int) $this->item->id);?>" method="post" name="adminForm" id="note-form" class="form-validate form-horizontal">		<fieldset class="adminform">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('subject'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('subject'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('user_id'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('user_id'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('catid'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('catid'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('review_time'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('review_time'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('body'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('body'); ?>				</div>			</div>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		</fieldset></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Component installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterComponent extends JAdapterInstance{	/**	 * Copy of the XML manifest file	 *	 * @var    string	 * @since  3.1	 */	protected $manifest = null;	/**	 * Name of the extension	 *	 * @var    string	 * @since  3.1	 * */	protected $name = null;	/**	 * The unique identifier for the extension (e.g. mod_login)	 *	 * @var    string	 * @since  3.1	 * */	protected $element = null;	/**	 * The list of current files fo the Joomla! CMS administrator that are installed and is read	 * from the manifest on disk in the update area to handle doing a diff	 * and deleting files that are in the old files list and not in the new	 * files list.	 *	 * @var    array	 * @since  3.1	 * */	protected $oldAdminFiles = null;	/**	 * The list of current files that are installed and is read	 * from the manifest on disk in the update area to handle doing a diff	 * and deleting files that are in the old files list and not in the new	 * files list.	 *	 * @var    array	 * @since  3.1	 * */	protected $oldFiles = null;	/**	 * A path to the PHP file that the scriptfile declaration in	 * the manifest refers to.	 *	 * @var    string	 * @since  3.1	 * */	protected $manifest_script = null;	/**	 * For legacy installations this is a path to the PHP file that the scriptfile declaration in the	 * manifest refers to.	 *	 * @var    string	 * @since  3.1	 * */	protected $install_script = null;	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path language files are on.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent				->setPath(				'source',				($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) .				'/components/' . $this->parent->extension->element			);		}		$this->manifest = $this->parent->getManifest();		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		if (substr($name, 0, 4) == 'com_')		{			$extension = $name;		}		else		{			$extension = 'com_' . $name;		}		$lang = JFactory::getLanguage();		$source = $path ? $path : ($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/components/' . $extension;		if ($this->manifest->administration->files)		{			$element = $this->manifest->administration->files;		}		elseif ($this->manifest->files)		{			$element = $this->manifest->files;		}		else		{			$element = null;		}		if ($element)		{			$folder = (string) $element->attributes()->folder;			if ($folder && file_exists($path . '/' . $folder))			{				$source = $path . '/' . $folder;			}		}		$lang->load($extension . '.sys', $source, null, false, false) || $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false);	}	/**	 * Custom install method for components	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get a database connector object		$db = $this->parent->getDbo();		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension's name		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		if (substr($name, 0, 4) == 'com_')		{			$element = $name;		}		else		{			$element = 'com_' . $name;		}		$this->set('name', $name);		$this->set('element', $element);		// Get the component description		$this->parent->set('message', JText::_((string) $this->manifest->description));		// Set the installation target paths		$this->parent->setPath('extension_site', JPath::clean(JPATH_SITE . '/components/' . $this->get('element')));		$this->parent->setPath('extension_administrator', JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $this->get('element')));		// Copy the admin path as it's used as a common base		$this->parent->setPath('extension_root', $this->parent->getPath('extension_administrator'));		/*		 * ---------------------------------------------------------------------------------------------		 * Basic Checks Section		 * ---------------------------------------------------------------------------------------------		 */		// Make sure that we have an admin element		if (!$this->manifest->administration)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_INSTALL_ADMIN_ELEMENT'), JLog::WARNING, 'jerror');			return false;		}		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		/*		 * If the component site or admin directory already exists, then we will assume that the component is already		 * installed or another component is using that directory.		 */		if (file_exists($this->parent->getPath('extension_site')) || file_exists($this->parent->getPath('extension_administrator')))		{			// Look for an update function or update tag			$updateElement = $this->manifest->update;			// Upgrade manually set or update function available or update tag detected			if ($this->parent->isUpgrade() || ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'update'))				|| $updateElement)			{				// Transfer control to the update function				return $this->update();			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is set.				// We didn't have overwrite set, find an update function or find an update tag so lets call it safe				if (file_exists($this->parent->getPath('extension_site')))				{					// If the site exists say so.					JLog::add(						JText::sprintf('JLIB_INSTALLER_ERROR_COMP_INSTALL_DIR_SITE', $this->parent->getPath('extension_site')),						JLog::WARNING, 'jerror'					);				}				else				{					// If the admin exists say so					JLog::add(						JText::sprintf('JLIB_INSTALLER_ERROR_COMP_INSTALL_DIR_ADMIN', $this->parent->getPath('extension_administrator')),						JLog::WARNING, 'jerror'					);				}				return false;			}		}		/*		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $this->get('element') . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight('install', $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		// If the component directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_site')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_site')))			{				JLog::add(					JText::sprintf('JLIB_INSTALLER_ERROR_COMP_INSTALL_FAILED_TO_CREATE_DIRECTORY_SITE', $this->parent->getPath('extension_site')),					JLog::WARNING, 'jerror'				);				return false;			}		}		/*		 * Since we created the component directory and we will want to remove it if we have to roll back		 * the installation, let's add it to the installation step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_site')));		}		// If the component admin directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_administrator')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_administrator')))			{				JLog::add(					JText::sprintf('JLIB_INSTALLER_ERROR_COMP_INSTALL_FAILED_TO_CREATE_DIRECTORY_ADMIN', $this->parent->getPath('extension_administrator')),					JLog::WARNING, 'jerror'				);				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		/*		 * Since we created the component admin directory and we will want to remove it if we have to roll		 * back the installation, let's add it to the installation step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_administrator')));		}		// Copy site files		if ($this->manifest->files)		{			if ($this->parent->parseFiles($this->manifest->files) === false)			{				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		// Copy admin files		if ($this->manifest->administration->files)		{			if ($this->parent->parseFiles($this->manifest->administration->files, 1) === false)			{				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		// Parse optional tags		$this->parent->parseMedia($this->manifest->media);		$this->parent->parseLanguages($this->manifest->languages);		$this->parent->parseLanguages($this->manifest->administration->languages, 1);		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_administrator') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_MANIFEST'));					return false;				}			}		}		/*		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Run the install queries for the component		if (isset($this->manifest->install->sql))		{			$result = $this->parent->parseSQLFiles($this->manifest->install->sql);			if ($result === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_SQL_ERROR', $db->stderr(true)));				return false;			}		}		/**		 * ---------------------------------------------------------------------------------------------		 * Custom Installation Script Section		 * ---------------------------------------------------------------------------------------------		 */		/*		 * If we have an install script, let's include it, execute the custom		 * install method, and append the return value from the custom install		 * method to the installation message.		 */		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'install'))		{			if ($this->parent->manifestClass->install($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Add an entry to the extension table with a whole heap of defaults		$row = JTable::getInstance('extension');		$row->set('name', $this->get('name'));		$row->set('type', 'component');		$row->set('element', $this->get('element'));		// There is no folder for components		$row->set('folder', '');		$row->set('enabled', 1);		$row->set('protected', 0);		$row->set('access', 0);		$row->set('client_id', 1);		$row->set('params', $this->parent->getParams());		$row->set('manifest_cache', $this->parent->generateManifestCache());		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_ROLLBACK', $db->stderr(true)));			return false;		}		$eid = $row->extension_id;		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('element'), 'type' => 'component', 'client_id' => 1, 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		// We will copy the manifest file to its appropriate place.		if (!$this->parent->copyManifest())		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_COPY_SETUP'));			return false;		}		// Time to build the admin menus		if (!$this->_buildAdminMenus($row->extension_id))		{			JLog::add(JText::_('JLIB_INSTALLER_ABORT_COMP_BUILDADMINMENUS_FAILED'), JLog::WARNING, 'jerror');			// @todo remove code: $this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_ROLLBACK', $db->stderr(true)));			// @todo remove code: return false;		}		// Set the schema version to be the latest update version		if ($this->manifest->update)		{			$this->parent->setSchemaVersion($this->manifest->update->schemas, $eid);		}		// Register the component container just under root in the assets table.		$asset = JTable::getInstance('Asset');		$asset->name = $row->element;		$asset->parent_id = 1;		$asset->rules = '{}';		$asset->title = $row->name;		$asset->setLocation(1, 'last-child');		if (!$asset->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_ROLLBACK', $db->stderr(true)));			return false;		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight('install', $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->extension_id;	}	/**	 * Custom update method for components	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		// Get a database connector object		$db = $this->parent->getDbo();		// Set the overwrite setting		$this->parent->setOverwrite(true);		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/**		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension's name		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		if (substr($name, 0, 4) == 'com_')		{			$element = $name;		}		else		{			$element = 'com_' . $name;		}		$this->set('name', $name);		$this->set('element', $element);		// Get the component description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Set the installation target paths		$this->parent->setPath('extension_site', JPath::clean(JPATH_SITE . '/components/' . $this->get('element')));		$this->parent->setPath('extension_administrator', JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $this->get('element')));		// Copy the admin path as it's used as a common base		$this->parent->setPath('extension_root', $this->parent->getPath('extension_administrator'));		// Hunt for the original XML file		$old_manifest = null;		// Create a new installer because findManifest sets stuff		// Look in the administrator first		$tmpInstaller = new JInstaller;		$tmpInstaller->setPath('source', $this->parent->getPath('extension_administrator'));		if (!$tmpInstaller->findManifest())		{			// Then the site			$tmpInstaller->setPath('source', $this->parent->getPath('extension_site'));			if ($tmpInstaller->findManifest())			{				$old_manifest = $tmpInstaller->getManifest();			}		}		else		{			$old_manifest = $tmpInstaller->getManifest();		}		// Should do this above perhaps?		if ($old_manifest)		{			$this->oldAdminFiles = $old_manifest->administration->files;			$this->oldFiles = $old_manifest->files;		}		else		{			$this->oldAdminFiles = null;			$this->oldFiles = null;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Basic Checks Section		 * ---------------------------------------------------------------------------------------------		 */		// Make sure that we have an admin element		if (!$this->manifest->administration)		{			JLog::add(JText::_('JLIB_INSTALLER_ABORT_COMP_UPDATE_ADMIN_ELEMENT'), JLog::WARNING, 'jerror');			return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight('update', $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// If the component directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_site')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_site')))			{				JLog::add(					JText::sprintf('JLIB_INSTALLER_ERROR_COMP_UPDATE_FAILED_TO_CREATE_DIRECTORY_SITE', $this->parent->getPath('extension_site')),					JLog::WARNING, 'jerror'				);				return false;			}		}		/*		 * Since we created the component directory and will want to remove it if we have to roll back		 * the installation, lets add it to the installation step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_site')));		}		// If the component admin directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_administrator')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_administrator')))			{				JLog::add(					JText::sprintf('JLIB_INSTALLER_ERROR_COMP_UPDATE_FAILED_TO_CREATE_DIRECTORY_ADMIN', $this->parent->getPath('extension_administrator')),					JLog::WARNING, 'jerror'				);				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		/*		 * Since we created the component admin directory and we will want to remove it if we have to roll		 * back the installation, let's add it to the installation step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_administrator')));		}		// Find files to copy		if ($this->manifest->files)		{			if ($this->parent->parseFiles($this->manifest->files, 0, $this->oldFiles) === false)			{				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		if ($this->manifest->administration->files)		{			if ($this->parent->parseFiles($this->manifest->administration->files, 1, $this->oldAdminFiles) === false)			{				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		// Parse optional tags		$this->parent->parseMedia($this->manifest->media);		$this->parent->parseLanguages($this->manifest->languages);		$this->parent->parseLanguages($this->manifest->administration->languages, 1);		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_administrator') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_UPDATE_MANIFEST'));					return false;				}			}		}		/**		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Let's run the update queries for the component		$row = JTable::getInstance('extension');		$eid = $row->find(array('element' => strtolower($this->get('element')), 'type' => 'component'));		if ($this->manifest->update)		{			$result = $this->parent->parseSchemaUpdates($this->manifest->update->schemas, $eid);			if ($result === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_UPDATE_SQL_ERROR', $db->stderr(true)));				return false;			}		}		// Time to build the admin menus		if (!$this->_buildAdminMenus($eid))		{			JLog::add(JText::_('JLIB_INSTALLER_ABORT_COMP_BUILDADMINMENUS_FAILED'), JLog::WARNING, 'jerror');			// $this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_ROLLBACK', $db->stderr(true)));			// Return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Custom Installation Script Section		 * ---------------------------------------------------------------------------------------------		 */		/*		 * If we have an install script, let's include it, execute the custom		 * update method, and append the return value from the custom update		 * method to the installation message.		 */		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'update'))		{			if ($this->parent->manifestClass->update($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('element'), 'type' => 'component', 'client_id' => 1, 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		// Update an entry to the extension table		if ($eid)		{			$row->load($eid);		}		else		{			// Set the defaults			// There is no folder for components			$row->folder = '';			$row->enabled = 1;			$row->protected = 0;			$row->access = 1;			$row->client_id = 1;			$row->params = $this->parent->getParams();		}		$row->name = $this->get('name');		$row->type = 'component';		$row->element = $this->get('element');		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_UPDATE_ROLLBACK', $db->stderr(true)));			return false;		}		// We will copy the manifest file to its appropriate place.		if (!$this->parent->copyManifest())		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_UPDATE_COPY_SETUP'));			return false;		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight('update', $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->extension_id;	}	/**	 * Custom uninstall method for components	 *	 * @param   integer  $id  The unique extension id of the component to uninstall	 *	 * @return  mixed  Return value for uninstall method in component uninstall file	 *	 * @since   3.1	 */	public function uninstall($id)	{		$db = $this->parent->getDbo();		$row = null;		$retval = true;		// First order of business will be to load the component object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the component we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_WARNCORECOMPONENT'), JLog::WARNING, 'jerror');			return false;		}		// Get the admin and site paths for the component		$this->parent->setPath('extension_administrator', JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $row->element));		$this->parent->setPath('extension_site', JPath::clean(JPATH_SITE . '/components/' . $row->element));		// Copy the admin path as it's used as a common base		$this->parent->setPath('extension_root', $this->parent->getPath('extension_administrator'));		/**		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Find and load the XML install file for the component		$this->parent->setPath('source', $this->parent->getPath('extension_administrator'));		// Get the package manifest object		// We do findManifest to avoid problem when uninstalling a list of extension: getManifest cache its manifest file		$this->parent->findManifest();		$this->manifest = $this->parent->getManifest();		if (!$this->manifest)		{			// Make sure we delete the folders if no manifest exists			JFolder::delete($this->parent->getPath('extension_administrator'));			JFolder::delete($this->parent->getPath('extension_site'));			// Remove the menu			$this->_removeAdminMenus($row);			// Raise a warning			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_ERRORREMOVEMANUALLY'), JLog::WARNING, 'jerror');			// Return			return false;		}		// Set the extensions name		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		if (substr($name, 0, 4) == 'com_')		{			$element = $name;		}		else		{			$element = 'com_' . $name;		}		$this->set('name', $name);		$this->set('element', $element);		// Attempt to load the admin language file; might have uninstall strings		$this->loadLanguage(JPATH_ADMINISTRATOR . '/components/' . $element);		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading and Uninstall		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$scriptFile = (string) $this->manifest->scriptfile;		if ($scriptFile)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $scriptFile;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $row->element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $scriptFile);			}		}		ob_start();		ob_implicit_flush(false);		// Run uninstall if possible		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))		{			$this->parent->manifestClass->uninstall($this);		}		$msg = ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		/**		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Let's run the uninstall queries for the component		if (isset($this->manifest->uninstall->sql))		{			$result = $this->parent->parseSQLFiles($this->manifest->uninstall->sql);			if ($result === false)			{				// Install failed, rollback changes				JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');				$retval = false;			}		}		$this->_removeAdminMenus($row);		/**		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Let's remove those language files and media in the JROOT/images/ folder that are		// associated with the component we are uninstalling		$this->parent->removeFiles($this->manifest->media);		$this->parent->removeFiles($this->manifest->languages);		$this->parent->removeFiles($this->manifest->administration->languages, 1);		// Remove the schema version		$query = $db->getQuery(true)			->delete('#__schemas')			->where('extension_id = ' . $id);		$db->setQuery($query);		$db->execute();		// Remove the component container in the assets table.		$asset = JTable::getInstance('Asset');		if ($asset->loadByName($element))		{			$asset->delete();		}		// Remove categories for this component		$query = $db->getQuery(true)			->delete('#__categories')			->where('extension=' . $db->quote($element), 'OR')			->where('extension LIKE ' . $db->quote($element . '.%'));		$db->setQuery($query);		$db->execute();		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $row->element, 'type' => 'component', 'client_id' => 1, 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		// Now we need to delete the installation directories. This is the final step in uninstalling the component.		if (trim($row->element))		{			// Delete the component site directory			if (is_dir($this->parent->getPath('extension_site')))			{				if (!JFolder::delete($this->parent->getPath('extension_site')))				{					JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_FAILED_REMOVE_DIRECTORY_SITE'), JLog::WARNING, 'jerror');					$retval = false;				}			}			// Delete the component admin directory			if (is_dir($this->parent->getPath('extension_administrator')))			{				if (!JFolder::delete($this->parent->getPath('extension_administrator')))				{					JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_FAILED_REMOVE_DIRECTORY_ADMIN'), JLog::WARNING, 'jerror');					$retval = false;				}			}			// Now we will no longer need the extension object, so let's delete it and free up memory			$row->delete($row->extension_id);			unset($row);			return $retval;		}		else		{			// No component option defined... cannot delete what we don't know about			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_NO_OPTION'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Method to build menu database entries for a component	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	protected function _buildAdminMenus()	{		$db = $this->parent->getDbo();		$table = JTable::getInstance('menu');		$option = $this->get('element');		// If a component exists with this option in the table then we don't need to add menus		$query = $db->getQuery(true)			->select('m.id, e.extension_id')			->from('#__menu AS m')			->join('LEFT', '#__extensions AS e ON m.component_id = e.extension_id')			->where('m.parent_id = 1')			->where('m.client_id = 1')			->where('e.element = ' . $db->quote($option));		$db->setQuery($query);		$componentrow = $db->loadObject();		// Check if menu items exist		if ($componentrow)		{			// Don't do anything if overwrite has not been enabled			if (!$this->parent->isOverwrite())			{				return true;			}			// Remove existing menu items if overwrite has been enabled			if ($option)			{				// If something goes wrong, there's no way to rollback TODO: Search for better solution				$this->_removeAdminMenus($componentrow);			}			$component_id = $componentrow->extension_id;		}		else		{			// Lets find the extension id			$query->clear()				->select('e.extension_id')				->from('#__extensions AS e')				->where('e.element = ' . $db->quote($option));			$db->setQuery($query);			// TODO Find Some better way to discover the component_id			$component_id = $db->loadResult();		}		// Ok, now its time to handle the menus.  Start with the component root menu, then handle submenus.		$menuElement = $this->manifest->administration->menu;		if ($menuElement)		{			$data = array();			$data['menutype'] = 'main';			$data['client_id'] = 1;			$data['title'] = (string) trim($menuElement);			$data['alias'] = (string) $menuElement;			$data['link'] = 'index.php?option=' . $option;			$data['type'] = 'component';			$data['published'] = 0;			$data['parent_id'] = 1;			$data['component_id'] = $component_id;			$data['img'] = ((string) $menuElement->attributes()->img) ? (string) $menuElement->attributes()->img : 'class:component';			$data['home'] = 0;			try			{				$table->setLocation(1, 'last-child');			}			catch (InvalidArgumentException $e)			{				JLog::add($e->getMessage(), JLog::WARNING, 'jerror');				return false;			}			if (!$table->bind($data) || !$table->check() || !$table->store())			{				// The menu item already exists. Delete it and retry instead of throwing an error.				$query = $db->getQuery(true)					->select('id')					->from('#__menu')					->where('menutype = ' . $db->quote('main'))					->where('client_id = 1')					->where('link = ' . $db->quote('index.php?option=' . $option))					->where('type = ' . $db->quote('component'))					->where('parent_id = 1')					->where('home = 0');				$db->setQuery($query);				$menu_id = $db->loadResult();				if (!$menu_id)				{					// Oops! Could not get the menu ID. Go back and rollback changes.					JError::raiseWarning(1, $table->getError());					return false;				}				else				{					// Remove the old menu item					$query = $db->getQuery(true)						->delete('#__menu')						->where('id = ' . (int) $menu_id);					$db->setQuery($query);					$db->query();					// Retry creating the menu item					$table->setLocation(1, 'last-child');					if (!$table->bind($data) || !$table->check() || !$table->store())					{						// Install failed, warn user and rollback changes						JError::raiseWarning(1, $table->getError());						return false;					}				}			}			/*			 * Since we have created a menu item, we add it to the installation step stack			 * so that if we have to rollback the changes we can undo it.			 */			$this->parent->pushStep(array('type' => 'menu', 'id' => $component_id));		}		// No menu element was specified, Let's make a generic menu item		else		{			$data = array();			$data['menutype'] = 'main';			$data['client_id'] = 1;			$data['title'] = $option;			$data['alias'] = $option;			$data['link'] = 'index.php?option=' . $option;			$data['type'] = 'component';			$data['published'] = 0;			$data['parent_id'] = 1;			$data['component_id'] = $component_id;			$data['img'] = 'class:component';			$data['home'] = 0;			try			{				$table->setLocation(1, 'last-child');			}			catch (InvalidArgumentException $e)			{				JLog::add($e->getMessage(), JLog::WARNING, 'jerror');				return false;			}			if (!$table->bind($data) || !$table->check() || !$table->store())			{				// Install failed, warn user and rollback changes				JLog::add($table->getError(), JLog::WARNING, 'jerror');				return false;			}			/*			 * Since we have created a menu item, we add it to the installation step stack			 * so that if we have to rollback the changes we can undo it.			 */			$this->parent->pushStep(array('type' => 'menu', 'id' => $component_id));		}		/*		 * Process SubMenus		 */		if (!$this->manifest->administration->submenu)		{			return true;		}		$parent_id = $table->id;		foreach ($this->manifest->administration->submenu->menu as $child)		{			$data = array();			$data['menutype'] = 'main';			$data['client_id'] = 1;			$data['title'] = (string) trim($child);			$data['alias'] = (string) $child;			$data['type'] = 'component';			$data['published'] = 0;			$data['parent_id'] = $parent_id;			$data['component_id'] = $component_id;			$data['img'] = ((string) $child->attributes()->img) ? (string) $child->attributes()->img : 'class:component';			$data['home'] = 0;			// Set the sub menu link			if ((string) $child->attributes()->link)			{				$data['link'] = 'index.php?' . $child->attributes()->link;			}			else			{				$request = array();				if ((string) $child->attributes()->act)				{					$request[] = 'act=' . $child->attributes()->act;				}				if ((string) $child->attributes()->task)				{					$request[] = 'task=' . $child->attributes()->task;				}				if ((string) $child->attributes()->controller)				{					$request[] = 'controller=' . $child->attributes()->controller;				}				if ((string) $child->attributes()->view)				{					$request[] = 'view=' . $child->attributes()->view;				}				if ((string) $child->attributes()->layout)				{					$request[] = 'layout=' . $child->attributes()->layout;				}				if ((string) $child->attributes()->sub)				{					$request[] = 'sub=' . $child->attributes()->sub;				}				$qstring = (count($request)) ? '&' . implode('&', $request) : '';				$data['link'] = 'index.php?option=' . $option . $qstring;			}			$table = JTable::getInstance('menu');			try			{				$table->setLocation($parent_id, 'last-child');			}			catch (InvalidArgumentException $e)			{				return false;			}			if (!$table->bind($data) || !$table->check() || !$table->store())			{				// Install failed, rollback changes				return false;			}			/*			 * Since we have created a menu item, we add it to the installation step stack			 * so that if we have to rollback the changes we can undo it.			 */			$this->parent->pushStep(array('type' => 'menu', 'id' => $component_id));		}		return true;	}	/**	 * Method to remove admin menu references to a component	 *	 * @param   object  &$row  Component table object.	 *	 * @return  boolean  True if successful.	 *	 * @since   3.1	 */	protected function _removeAdminMenus(&$row)	{		$db = $this->parent->getDbo();		$table = JTable::getInstance('menu');		$id = $row->extension_id;		// Get the ids of the menu items		$query = $db->getQuery(true)			->select('id')			->from('#__menu')			->where($db->quoteName('client_id') . ' = 1')			->where($db->quoteName('component_id') . ' = ' . (int) $id);		$db->setQuery($query);		$ids = $db->loadColumn();		// Check for error		if (!empty($ids))		{			// Iterate the items to delete each one.			foreach ($ids as $menuid)			{				if (!$table->delete((int) $menuid))				{					$this->setError($table->getError());					return false;				}			}			// Rebuild the whole tree			$table->rebuild();		}		return true;	}	/**	 * Custom rollback method	 * - Roll back the component menu item	 *	 * @param   array  $step  Installation step to rollback.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	protected function _rollback_menu($step)	{		return $this->_removeAdminMenus((object) array('extension_id' => $step['id']));	}	/**	 * Discover unregistered extensions.	 *	 * @return  array  A list of extensions.	 *	 * @since   3.1	 */	public function discover()	{		$results = array();		$site_components = JFolder::folders(JPATH_SITE . '/components');		$admin_components = JFolder::folders(JPATH_ADMINISTRATOR . '/components');		foreach ($site_components as $component)		{			if (file_exists(JPATH_SITE . '/components/' . $component . '/' . str_replace('com_', '', $component) . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(					JPATH_SITE . '/components/' . $component . '/' . str_replace('com_', '', $component) . '.xml'				);				$extension = JTable::getInstance('extension');				$extension->set('type', 'component');				$extension->set('client_id', 0);				$extension->set('element', $component);				$extension->set('folder', '');				$extension->set('name', $component);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		foreach ($admin_components as $component)		{			if (file_exists(JPATH_ADMINISTRATOR . '/components/' . $component . '/' . str_replace('com_', '', $component) . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(					JPATH_ADMINISTRATOR . '/components/' . $component . '/' . str_replace('com_', '', $component) . '.xml'				);				$extension = JTable::getInstance('extension');				$extension->set('type', 'component');				$extension->set('client_id', 1);				$extension->set('element', $component);				$extension->set('folder', '');				$extension->set('name', $component);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		return $results;	}	/**	 * Install unregistered extensions that have been discovered.	 *	 * @return  mixed	 *	 * @since   3.1	 */	public function discover_install()	{		// Need to find to find where the XML file is since we don't store this normally		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$short_element = str_replace('com_', '', $this->parent->extension->element);		$manifestPath = $client->path . '/components/' . $this->parent->extension->element . '/' . $short_element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$this->parent->setPath('source', $client->path . '/components/' . $this->parent->extension->element);		$this->parent->setPath('extension_root', $this->parent->getPath('source'));		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		$this->parent->extension->params = $this->parent->getParams();		try		{			$this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}		// Now we need to run any SQL it has, languages, media or menu stuff		// Get a database connector object		$db = $this->parent->getDbo();		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/**		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extensions name		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		if (substr($name, 0, 4) == 'com_')		{			$element = $name;		}		else		{			$element = 'com_' . $name;		}		$this->set('name', $name);		$this->set('element', $element);		// Get the component description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_((string) $description));		}		else		{			$this->parent->set('message', '');		}		// Set the installation target paths		$this->parent->setPath('extension_site', JPath::clean(JPATH_SITE . '/components/' . $this->get('element')));		$this->parent->setPath('extension_administrator', JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $this->get('element')));		// Copy the admin path as it's used as a common base		$this->parent->setPath('extension_root', $this->parent->getPath('extension_administrator'));		/**		 * ---------------------------------------------------------------------------------------------		 * Basic Checks Section		 * ---------------------------------------------------------------------------------------------		 */		// Make sure that we have an admin element		if (!$this->manifest->administration)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_INSTALL_ADMIN_ELEMENT'), JLog::WARNING, 'jerror');			return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight('discover_install', $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		/*		 *		 * Normally we would copy files and create directories, lets skip to the optional files		 * Note: need to dereference things!		 * Parse optional tags		 * @todo remove code: $this->parent->parseMedia($this->manifest->media);		 *		 * We don't do language because 1.6 suggests moving to extension based languages		 * @todo remove code: $this->parent->parseLanguages($this->manifest->languages);		 * @todo remove code: $this->parent->parseLanguages($this->manifest->administration->languages, 1);		 */		/**		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Let's run the install queries for the component		if (isset($this->manifest->install->sql))		{			$utfresult = $this->parent->parseSQLFiles($this->manifest->install->sql);			if ($utfresult === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_SQL_ERROR', $db->stderr(true)));				return false;			}		}		// Time to build the admin menus		if (!$this->_buildAdminMenus($this->parent->extension->extension_id))		{			JLog::add(JText::_('JLIB_INSTALLER_ABORT_COMP_BUILDADMINMENUS_FAILED'), JLog::WARNING, 'jerror');			// @todo remove code: $this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_ROLLBACK', $db->stderr(true)));			// @todo remove code: return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Custom Installation Script Section		 * ---------------------------------------------------------------------------------------------		 */		/*		 * If we have an install script, lets include it, execute the custom		 * discover_install method, and append the return value from the custom discover_install		 * method to the installation message.		 */		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'install'))		{			if ($this->parent->manifestClass->install($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('element'), 'type' => 'component', 'client_id' => 1, 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight('discover_install', $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $this->parent->extension->extension_id;	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$short_element = str_replace('com_', '', $this->parent->extension->element);		$manifestPath = $client->path . '/components/' . $this->parent->extension->element . '/' . $short_element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterComponent instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerComponent extends JInstallerAdapterComponent{}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of access levels. Access levels control what users in specific * groups can see. * * @package     Joomla.Platform * @subpackage  Form * @see         JAccess * @since       11.1 */class JFormFieldAccessLevel extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'AccessLevel';	/**	 * Method to get the field input markup.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->multiple ? ' multiple="multiple"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field options.		$options = $this->getOptions();		return JHtml::_('access.level', $this->name, $this->value, $attr, $options, $this->id);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * ATOM Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @link        http://www.atomenabled.org/developers/syndication/ * @since       12.3 */class JFeedParserAtom extends JFeedParser{	/**	 * @var    string  The feed format version.	 * @since  12.3	 */	protected $version;	/**	 * Method to handle the <author> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleAuthor(JFeed $feed, SimpleXMLElement $el)	{		// Set the author information from the XML element.		$feed->setAuthor((string) $el->name, (string) $el->email, (string) $el->uri);	}	/**	 * Method to handle the <contributor> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleContributor(JFeed $feed, SimpleXMLElement $el)	{		$feed->addContributor((string) $el->name, (string) $el->email, (string) $el->uri);	}	/**	 * Method to handle the <generator> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleGenerator(JFeed $feed, SimpleXMLElement $el)	{		$feed->generator = (string) $el;	}	/**	 * Method to handle the <id> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleId(JFeed $feed, SimpleXMLElement $el)	{		$feed->uri = (string) $el;	}	/**	 * Method to handle the <link> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLink(JFeed $feed, SimpleXMLElement $el)	{		$link = new JFeedLink;		$link->uri      = (string) $el['href'];		$link->language = (string) $el['hreflang'];		$link->length   = (int) $el['length'];		$link->relation = (string) $el['rel'];		$link->title    = (string) $el['title'];		$link->type     = (string) $el['type'];		$feed->link = $link;	}	/**	 * Method to handle the <rights> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleRights(JFeed $feed, SimpleXMLElement $el)	{		$feed->copyright = (string) $el;	}	/**	 * Method to handle the <subtitle> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleSubtitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->description = (string) $el;	}	/**	 * Method to handle the <title> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleTitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->title = (string) $el;	}	/**	 * Method to handle the <updated> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleUpdated(JFeed $feed, SimpleXMLElement $el)	{		$feed->updatedDate = (string) $el;	}	/**	 * Method to initialise the feed for parsing.  Here we detect the version and advance the stream	 * reader so that it is ready to parse feed elements.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initialise()	{		// Read the version attribute.		$this->version = ($this->stream->getAttribute('version') == '0.3') ? '0.3' : '1.0';		// We want to move forward to the first element after the root element.		$this->moveToNextElement();	}	/**	 * Method to handle the feed entry element for the feed: <entry>.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{		$entry->uri         = (string) $el->id;		$entry->title       = (string) $el->title;		$entry->updatedDate = (string) $el->updated;		$entry->content     = (string) $el->summary;	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Stream Interface * * The Joomla! stream interface is designed to handle files as streams * where as the legacy JFile static class treated files in a rather * atomic manner. * * @package     Joomla.Platform * @subpackage  FileSystem * * This class adheres to the stream wrapper operations: * * @see         http://php.net/manual/en/function.stream-get-wrappers.php * @see         http://php.net/manual/en/intro.stream.php PHP Stream Manual * @see         http://php.net/manual/en/wrappers.php Stream Wrappers * @see         http://php.net/manual/en/filters.php Stream Filters * @see         http://php.net/manual/en/transports.php Socket Transports (used by some options, particularly HTTP proxy) * @since       11.1 */class JStream extends JObject{	// Publicly settable vars (protected to let our parent read them)	/**	 * File Mode	 * @var    integer	 * @since  11.1	 * */	protected $filemode = 0644;	/**	 * Directory Mode	 * @var   integer	 * @since  11.1	 * */	protected $dirmode = 0755;	/**	 * Default Chunk Size	 * @var    integer	 * @since  11.1	 */	protected $chunksize = 8192;	/**	 * Filename	 * @var    string	 * @since  11.1	 */	protected $filename;	/**	 * Prefix of the connection for writing	 * @var    string	 * @since  11.1	 */	protected $writeprefix;	/**	 * Prefix of the connection for reading	 * @var    string	 * @since  11.1	 */	protected $readprefix;	/**	 *	 *Read Processing method	 * @var   string  gz, bz, f	 * If a scheme is detected, fopen will be defaulted	 * To use compression with a network stream use a filter	 * @since  11.1	 */	protected $processingmethod = 'f';	/**	 * Filters applied to the current stream	 * @var    array	 * @since  11.1	 */	protected $filters = array();	/**	 * File Handle	 * @var    array	 * @since  12.1	 */	protected $fh;	/**	 * File size	 * @var    integer	 * @since  12.1	 */	protected $filesize;	/**	 *Context to use when opening the connection	 * @var	 * @since  12.1	 */	protected $context = null;	/**	 * Context options; used to rebuild the context	 * @var	 * @since  12.1	 */	protected $contextOptions;	/**	 * The mode under which the file was opened	 * @var	 * @since  12.1	 */	protected $openmode;	/**	 * Constructor	 *	 * @param   string  $writeprefix  Prefix of the stream (optional). Unlike the JPATH_*, this has a final path separator!	 * @param   string  $readprefix   The read prefix (optional).	 * @param   array   $context      The context options (optional).	 *	 * @since   11.1	 */	public function __construct($writeprefix = '', $readprefix = '', $context = array())	{		$this->writeprefix = $writeprefix;		$this->readprefix = $readprefix;		$this->contextOptions = $context;		$this->_buildContext();	}	/**	 * Destructor	 *	 * @since   11.1	 */	public function __destruct()	{		// Attempt to close on destruction if there is a file handle		if ($this->fh)		{			@$this->close();		}	}	/**	 * Generic File Operations	 *	 * Open a stream with some lazy loading smarts	 *	 * @param   string    $filename              Filename	 * @param   string    $mode                  Mode string to use	 * @param   boolean   $use_include_path      Use the PHP include path	 * @param   resource  $context               Context to use when opening	 * @param   boolean   $use_prefix            Use a prefix to open the file	 * @param   boolean   $relative              Filename is a relative path (if false, strips JPATH_ROOT to make it relative)	 * @param   boolean   $detectprocessingmode  Detect the processing method for the file and use the appropriate function	 *                                           to handle output automatically	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function open($filename, $mode = 'r', $use_include_path = false, $context = null,		$use_prefix = false, $relative = false, $detectprocessingmode = false)	{		$filename = $this->_getFilename($filename, $mode, $use_prefix, $relative);		if (!$filename)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILENAME'));			return false;		}		$this->filename = $filename;		$this->openmode = $mode;		$url = parse_url($filename);		$retval = false;		if (isset($url['scheme']))		{			// If we're dealing with a Joomla! stream, load it			if (JFilesystemHelper::isJoomlaStream($url['scheme']))			{				require_once __DIR__ . '/streams/' . $url['scheme'] . '.php';			}			// We have a scheme! force the method to be f			$this->processingmethod = 'f';		}		elseif ($detectprocessingmode)		{			$ext = strtolower(JFile::getExt($this->filename));			switch ($ext)			{				case 'tgz':				case 'gz':				case 'gzip':					$this->processingmethod = 'gz';					break;				case 'tbz2':				case 'bz2':				case 'bzip2':					$this->processingmethod = 'bz';					break;				default:					$this->processingmethod = 'f';					break;			}		}		// Capture PHP errors		$php_errormsg = 'Error Unknown whilst opening a file';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		// Decide which context to use:		switch ($this->processingmethod)		{			// Gzip doesn't support contexts or streams			case 'gz':				$this->fh = gzopen($filename, $mode, $use_include_path);				break;			// Bzip2 is much like gzip except it doesn't use the include path			case 'bz':				$this->fh = bzopen($filename, $mode);				break;			// Fopen can handle streams			case 'f':			default:				// One supplied at open; overrides everything				if ($context)				{					$this->fh = fopen($filename, $mode, $use_include_path, $context);				}				// One provided at initialisation				elseif ($this->context)				{					$this->fh = fopen($filename, $mode, $use_include_path, $this->context);				}				// No context; all defaults				else				{					$this->fh = fopen($filename, $mode, $use_include_path);				}				break;		}		if (!$this->fh)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Attempt to close a file handle	 *	 * Will return false if it failed and true on success	 * If the file is not open the system will return true, this function destroys the file handle as well	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function close()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return true;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzclose($this->fh);				break;			case 'bz':				$res = bzclose($this->fh);				break;			case 'f':			default:				$res = fclose($this->fh);				break;		}		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			// Reset this			$this->fh = null;			$retval = true;		}		// If we wrote, chmod the file after it's closed		if ($this->openmode[0] == 'w')		{			$this->chmod();		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Work out if we're at the end of the file for a stream	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function eof()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzeof($this->fh);				break;			case 'bz':			case 'f':			default:				$res = feof($this->fh);				break;		}		if ($php_errormsg)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $res;	}	/**	 * Retrieve the file size of the path	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function filesize()	{		if (!$this->filename)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$res = @filesize($this->filename);		if (!$res)		{			$tmp_error = '';			if ($php_errormsg)			{				// Something went wrong.				// Store the error in case we need it.				$tmp_error = $php_errormsg;			}			$res = JFilesystemHelper::remotefsize($this->filename);			if (!$res)			{				if ($tmp_error)				{					// Use the php_errormsg from before					$this->setError($tmp_error);				}				else				{					// Error but nothing from php? How strange! Create our own					$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_SIZE'));				}			}			else			{				$this->filesize = $res;				$retval = $res;			}		}		else		{			$this->filesize = $res;			$retval = $res;		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Get a line from the stream source.	 *	 * @param   integer  $length  The number of bytes (optional) to read.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function gets($length = 0)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = $length ? gzgets($this->fh, $length) : gzgets($this->fh);				break;			case 'bz':			case 'f':			default:				$res = $length ? fgets($this->fh, $length) : fgets($this->fh);				break;		}		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			$retval = $res;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Read a file	 *	 * Handles user space streams appropriately otherwise any read will return 8192	 *	 * @param   integer  $length  Length of data to read	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.fread.php	 * @since   11.1	 */	public function read($length = 0)	{		if (!$this->filesize && !$length)		{			// Get the filesize			$this->filesize();			if (!$this->filesize)			{				// Set it to the biggest and then wait until eof				$length = -1;			}			else			{				$length = $this->filesize;			}		}		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$remaining = $length;		do		{			// Do chunked reads where relevant			switch ($this->processingmethod)			{				case 'bz':					$res = ($remaining > 0) ? bzread($this->fh, $remaining) : bzread($this->fh, $this->chunksize);					break;				case 'gz':					$res = ($remaining > 0) ? gzread($this->fh, $remaining) : gzread($this->fh, $this->chunksize);					break;				case 'f':				default:					$res = ($remaining > 0) ? fread($this->fh, $remaining) : fread($this->fh, $this->chunksize);					break;			}			if (!$res)			{				$this->setError($php_errormsg);				// Jump from the loop				$remaining = 0;			}			else			{				if (!$retval)				{					$retval = '';				}				$retval .= $res;				if (!$this->eof())				{					$len = strlen($res);					$remaining -= $len;				}				else				{					// If it's the end of the file then we've nothing left to read; reset remaining and len					$remaining = 0;					$length = strlen($retval);				}			}		}		while ($remaining || !$length);		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Seek the file	 *	 * Note: the return value is different to that of fseek	 *	 * @param   integer  $offset  Offset to use when seeking.	 * @param   integer  $whence  Seek mode to use.	 *	 * @return  boolean  True on success, false on failure	 *	 * @see http://php.net/manual/en/function.fseek.php	 * @since   11.1	 */	public function seek($offset, $whence = SEEK_SET)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzseek($this->fh, $offset, $whence);				break;			case 'bz':			case 'f':			default:				$res = fseek($this->fh, $offset, $whence);				break;		}		// Seek, interestingly, returns 0 on success or -1 on failure.		if ($res == -1)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Returns the current position of the file read/write pointer.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function tell()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gztell($this->fh);				break;			case 'bz':			case 'f':			default:				$res = ftell($this->fh);				break;		}		// May return 0 so check if it's really false		if ($res === false)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $res;	}	/**	 * File write	 *	 * Whilst this function accepts a reference, the underlying fwrite	 * will do a copy! This will roughly double the memory allocation for	 * any write you do. Specifying chunked will get around this by only	 * writing in specific chunk sizes. This defaults to 8192 which is a	 * sane number to use most of the time (change the default with	 * JStream::set('chunksize', newsize);)	 * Note: This doesn't support gzip/bzip2 writing like reading does	 *	 * @param   string   &$string  Reference to the string to write.	 * @param   integer  $length   Length of the string to write.	 * @param   integer  $chunk    Size of chunks to write in.	 *	 * @return  boolean	 *	 * @see     http://php.net/manual/en/function.fwrite.php	 * @since   11.1	 */	public function write(&$string, $length = 0, $chunk = 0)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		// If the length isn't set, set it to the length of the string.		if (!$length)		{			$length = strlen($string);		}		// If the chunk isn't set, set it to the default.		if (!$chunk)		{			$chunk = $this->chunksize;		}		$retval = true;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$remaining = $length;		$start = 0;		do		{			// If the amount remaining is greater than the chunk size, then use the chunk			$amount = ($remaining > $chunk) ? $chunk : $remaining;			$res = fwrite($this->fh, substr($string, $start), $amount);			// Returns false on error or the number of bytes written			if ($res === false)			{				// Returned error				$this->setError($php_errormsg);				$retval = false;				$remaining = 0;			}			elseif ($res === 0)			{				// Wrote nothing?				$remaining = 0;				$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_NO_DATA_WRITTEN'));			}			else			{				// Wrote something				$start += $amount;				$remaining -= $res;			}		}		while ($remaining);		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Chmod wrapper	 *	 * @param   string  $filename  File name.	 * @param   mixed   $mode      Mode to use.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function chmod($filename = '', $mode = 0)	{		if (!$filename)		{			if (!isset($this->filename) || !$this->filename)			{				$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILENAME'));				return false;			}			$filename = $this->filename;		}		// If no mode is set use the default		if (!$mode)		{			$mode = $this->filemode;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$sch = parse_url($filename, PHP_URL_SCHEME);		// Scheme specific options; ftp's chmod support is fun.		switch ($sch)		{			case 'ftp':			case 'ftps':				$res = JFilesystemHelper::ftpChmod($filename, $mode);				break;			default:				$res = chmod($filename, $mode);				break;		}		// Seek, interestingly, returns 0 on success or -1 on failure		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Get the stream metadata	 *	 * @return  array  header/metadata	 *	 * @see     http://php.net/manual/en/function.stream-get-meta-data.php	 * @since   11.1	 */	public function get_meta_data()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		return stream_get_meta_data($this->fh);	}	/**	 * Stream contexts	 * Builds the context from the array	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function _buildContext()	{		// According to the manual this always works!		if (count($this->contextOptions))		{			$this->context = @stream_context_create($this->contextOptions);		}		else		{			$this->context = null;		}	}	/**	 * Updates the context to the array	 *	 * Format is the same as the options for stream_context_create	 *	 * @param   array  $context  Options to create the context with	 *	 * @return  void	 *	 * @see       http://php.net/stream_context_create	 * @since   11.1	 */	public function setContextOptions($context)	{		$this->contextOptions = $context;		$this->_buildContext();	}	/**	 * Adds a particular options to the context	 *	 * @param   string  $wrapper  The wrapper to use	 * @param   string  $name     The option to set	 * @param   string  $value    The value of the option	 *	 * @return  void	 *	 * @see     http://php.net/stream_context_create Stream Context Creation	 * @see     http://php.net/manual/en/context.php Context Options for various streams	 * @since   11.1	 */	public function addContextEntry($wrapper, $name, $value)	{		$this->contextOptions[$wrapper][$name] = $value;		$this->_buildContext();	}	/**	 * Deletes a particular setting from a context	 *	 * @param   string  $wrapper  The wrapper to use	 * @param   string  $name     The option to unset	 *	 * @return  void	 *	 * @see     http://php.net/stream_context_create	 * @since   11.1	 */	public function deleteContextEntry($wrapper, $name)	{		// Check whether the wrapper is set		if (isset($this->contextOptions[$wrapper]))		{			// Check that entry is set for that wrapper			if (isset($this->contextOptions[$wrapper][$name]))			{				// Unset the item				unset($this->contextOptions[$wrapper][$name]);				// Check that there are still items there				if (!count($this->contextOptions[$wrapper]))				{					// Clean up an empty wrapper context option					unset($this->contextOptions[$wrapper]);				}			}		}		// Rebuild the context and apply it to the stream		$this->_buildContext();	}	/**	 * Applies the current context to the stream	 *	 * Use this to change the values of the context after you've opened a stream	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function applyContextToStream()	{		$retval = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = 'Unknown error setting context option';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$retval = @stream_context_set_option($this->fh, $this->contextOptions);			if (!$retval)			{				$this->setError($php_errormsg);			}			// Restore error tracking to what it was before			ini_set('track_errors', $track_errors);		}		return $retval;	}	/**	 * Stream filters	 * Append a filter to the chain	 *	 * @param   string   $filtername  The key name of the filter.	 * @param   integer  $read_write  Optional. Defaults to STREAM_FILTER_READ.	 * @param   array    $params      An array of params for the stream_filter_append call.	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.stream-filter-append.php	 * @since   11.1	 */	public function appendFilter($filtername, $read_write = STREAM_FILTER_READ, $params = array())	{		$res = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = '';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$res = @stream_filter_append($this->fh, $filtername, $read_write, $params);			if (!$res && $php_errormsg)			{				$this->setError($php_errormsg);			}			else			{				$this->filters[] = &$res;			}			// Restore error tracking to what it was before.			ini_set('track_errors', $track_errors);		}		return $res;	}	/**	 * Prepend a filter to the chain	 *	 * @param   string   $filtername  The key name of the filter.	 * @param   integer  $read_write  Optional. Defaults to STREAM_FILTER_READ.	 * @param   array    $params      An array of params for the stream_filter_prepend call.	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.stream-filter-prepend.php	 * @since   11.1	 */	public function prependFilter($filtername, $read_write = STREAM_FILTER_READ, $params = array())	{		$res = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = '';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$res = @stream_filter_prepend($this->fh, $filtername, $read_write, $params);			if (!$res && $php_errormsg)			{				// Set the error msg				$this->setError($php_errormsg);			}			else			{				array_unshift($res, '');				$res[0] = &$this->filters;			}			// Restore error tracking to what it was before.			ini_set('track_errors', $track_errors);		}		return $res;	}	/**	 * Remove a filter, either by resource (handed out from the append or prepend function)	 * or via getting the filter list)	 *	 * @param   resource  &$resource  The resource.	 * @param   boolean   $byindex    The index of the filter.	 *	 * @return  boolean   Result of operation	 *	 * @since   11.1	 */	public function removeFilter(&$resource, $byindex = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		if ($byindex)		{			$res = stream_filter_remove($this->filters[$resource]);		}		else		{			$res = stream_filter_remove($resource);		}		if ($res && $php_errormsg)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Copy a file from src to dest	 *	 * @param   string    $src         The file path to copy from.	 * @param   string    $dest        The file path to copy to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function copy($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$chmodDest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		// Since we're going to open the file directly we need to get the filename.		// We need to use the same prefix so force everything to write.		$src = $this->_getFilename($src, 'w', $use_prefix, $relative);		$dest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @copy($src, $dest, $context);		}		elseif ($this->context)		{			// Use the objects context			$res = @copy($src, $dest, $this->context);		}		else		{			// Don't use any context			$res = @copy($src, $dest);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg);		}		else		{			$this->chmod($chmodDest);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Moves a file	 *	 * @param   string    $src         The file path to move from.	 * @param   string    $dest        The file path to move to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function move($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$src = $this->_getFilename($src, 'w', $use_prefix, $relative);		$dest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @rename($src, $dest, $context);		}		elseif ($this->context)		{			// Use the object's context			$res = @rename($src, $dest, $this->context);		}		else		{			// Don't use any context			$res = @rename($src, $dest);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg());		}		$this->chmod($dest);		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Delete a file	 *	 * @param   string    $filename    The file path to delete.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function delete($filename, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$filename = $this->_getFilename($filename, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @unlink($filename, $context);		}		elseif ($this->context)		{			// Use the object's context			$res = @unlink($filename, $this->context);		}		else		{			// Don't use any context			$res = @unlink($filename);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg());		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Upload a file	 *	 * @param   string    $src         The file path to copy from (usually a temp folder).	 * @param   string    $dest        The file path to copy to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function upload($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		if (is_uploaded_file($src))		{			// Make sure it's an uploaded file			return $this->copy($src, $dest, $context, $use_prefix, $relative);		}		else		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_NOT_UPLOADED_FILE'));			return false;		}	}	/**	 * Writes a chunk of data to a file.	 *	 * @param   string  $filename  The file name.	 * @param   string  &$buffer   The data to write to the file.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function writeFile($filename, &$buffer)	{		if ($this->open($filename, 'w'))		{			$result = $this->write($buffer);			$this->chmod();			$this->close();			return $result;		}		return false;	}	/**	 * Determine the appropriate 'filename' of a file	 *	 * @param   string   $filename    Original filename of the file	 * @param   string   $mode        Mode string to retrieve the filename	 * @param   boolean  $use_prefix  Controls the use of a prefix	 * @param   boolean  $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  string	 *	 * @since   11.1	 */	public function _getFilename($filename, $mode, $use_prefix, $relative)	{		if ($use_prefix)		{			// Get rid of binary or t, should be at the end of the string			$tmode = trim($mode, 'btf123456789');			// Check if it's a write mode then add the appropriate prefix			// Get rid of JPATH_ROOT (legacy compat) along the way			if (in_array($tmode, JFilesystemHelper::getWriteModes()))			{				if (!$relative && $this->writeprefix)				{					$filename = str_replace(JPATH_ROOT, '', $filename);				}				$filename = $this->writeprefix . $filename;			}			else			{				if (!$relative && $this->readprefix)				{					$filename = str_replace(JPATH_ROOT, '', $filename);				}				$filename = $this->readprefix . $filename;			}		}		return $filename;	}	/**	 * Return the internal file handle	 *	 * @return  File handler	 *	 * @since   11.1	 */	public function getFileHandle()	{		return $this->fh;	}}
