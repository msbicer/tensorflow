<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Categories component * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesViewCategory extends JViewLegacy{	protected $form;	protected $item;	protected $state;	protected $assoc;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		$this->canDo = CategoriesHelper::getActions($this->state->get('category.component'));		$this->assoc = $this->get('Assoc');		$input = JFactory::getApplication()->input;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$input->set('hidemainmenu', true);		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$input      = JFactory::getApplication()->input;		$extension	= $input->get('extension');		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Avoid nonsense situation.		if ($extension == 'com_categories')		{			return;		}		// The extension can be in the form com_foo.section		$parts = explode('.', $extension);		$component = $parts[0];		$section = (count($parts) > 1) ? $parts[1] : null;		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load($component, JPATH_BASE, null, false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, null, false, false)		||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, $lang->getDefault(), false, false);		// Load the category helper.		require_once JPATH_COMPONENT.'/helpers/categories.php';		// Get the results for each action.		$canDo = CategoriesHelper::getActions($component, $this->item->id);		// If a component categories title string is present, let's use it.		if ($lang->hasKey($component_title_key = $component.($section?"_$section":'').'_CATEGORY_'.($isNew?'ADD':'EDIT').'_TITLE'))		{			$title = JText::_($component_title_key);		}		// Else if the component section string exits, let's use it		elseif ($lang->hasKey($component_section_key = $component.($section?"_$section":'')))		{			$title = JText::sprintf('COM_CATEGORIES_CATEGORY_'.($isNew?'ADD':'EDIT').'_TITLE', $this->escape(JText::_($component_section_key)));		}		// Else use the base title		else {			$title = JText::_('COM_CATEGORIES_CATEGORY_BASE_'.($isNew?'ADD':'EDIT').'_TITLE');		}		// Load specific css component		JHtml::_('stylesheet', $component.'/administrator/categories.css', array(), true);		// Prepare the toolbar.		JToolbarHelper::title($title, 'category-'.($isNew?'add':'edit').' '.substr($component, 4).($section?"-$section":'').'-category-'.($isNew?'add':'edit'));		// For new records, check the create permission.		if ($isNew && (count($user->getAuthorisedCategories($component, 'core.create')) > 0))		{			JToolbarHelper::apply('category.apply');			JToolbarHelper::save('category.save');			JToolbarHelper::save2new('category.save2new');		}		// If not checked out, can save the item.		elseif (!$checkedOut && ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_user_id == $userId)))		{			JToolbarHelper::apply('category.apply');			JToolbarHelper::save('category.save');			if ($canDo->get('core.create'))			{				JToolbarHelper::save2new('category.save2new');			}		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('category.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('category.cancel');		}		else		{			JToolbarHelper::cancel('category.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		// Compute the ref_key if it does exist in the component		if (!$lang->hasKey($ref_key = strtoupper($component.($section?"_$section":'')).'_CATEGORY_'.($isNew?'ADD':'EDIT').'_HELP_KEY'))		{			$ref_key = 'JHELP_COMPONENTS_'.strtoupper(substr($component, 4).($section?"_$section":'')).'_CATEGORY_'.($isNew?'ADD':'EDIT');		}		// Get help for the category/section view for the component by		// -remotely searching in a language defined dedicated URL: *component*_HELP_URL		// -locally  searching in a component help file if helpURL param exists in the component and is set to ''		// -remotely searching in a component URL if helpURL param exists in the component and is NOT set to ''		if ($lang->hasKey($lang_help_url = strtoupper($component).'_HELP_URL'))		{			$debug = $lang->setDebug(false);			$url = JText::_($lang_help_url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($ref_key, JComponentHelper::getParams($component)->exists('helpURL'), $url, $component);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of newsfeed records. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsModelNewsfeeds extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'published', 'a.published',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'ordering', 'a.ordering',				'language', 'a.language',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'cache_time', 'a.cache_time',				'numarticles',			);			$app = JFactory::getApplication();			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$config['filter_fields'][] = 'association';			}		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.published', 'filter_published', '', 'string');		$this->setState('filter.published', $state);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', null);		$this->setState('filter.category_id', $categoryId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// force a language		$forcedLanguage = $app->input->get('forcedLanguage');		if (!empty($forcedLanguage))		{			$this->setState('filter.language', $forcedLanguage);			$this->setState('filter.forcedLanguage', $forcedLanguage);		}		$tag = $this->getUserStateFromRequest($this->context . '.filter.tag', 'filter_tag', '');		$this->setState('filter.tag', $tag);		// Load the parameters.		$params = JComponentHelper::getParams('com_newsfeeds');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.name, a.alias, a.checked_out, a.checked_out_time, a.catid,' .					' a.numarticles, a.cache_time,' .					' a.published, a.access, a.ordering, a.language, a.publish_up, a.publish_down'			)		);		$query->from($db->quoteName('#__newsfeeds') . ' AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the associations.		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$query->select('COUNT(asso2.id)>1 as association')				->join('LEFT', '#__associations AS asso ON asso.id = a.id AND asso.context=' . $db->quote('com_newsfeeds.item'))				->join('LEFT', '#__associations AS asso2 ON asso2.key = asso.key')				->group('a.id');		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state.		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by category.		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$query->where('a.catid = ' . (int) $categoryId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.name LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Filter by a single tag.		$tagId = $this->getState('filter.tag');		if (is_numeric($tagId))		{			$query->where($db->quoteName('tagmap.tag_id') . ' = ' . (int) $tagId)				->join(					'LEFT', $db->quoteName('#__contentitem_tag_map', 'tagmap')					. ' ON ' . $db->quoteName('tagmap.content_item_id') . ' = ' . $db->quoteName('a.id')					. ' AND ' . $db->quoteName('tagmap.type_alias') . ' = ' . $db->quote('com_newsfeeds.newsfeed')				);		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering');		$orderDirn = $this->state->get('list.direction');		if ($orderCol == 'a.ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.remember * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! System Remember Me Plugin * * @package     Joomla.Plugin * @subpackage  System.remember * @since       1.5 */class PlgSystemRemember extends JPlugin{	public function onAfterInitialise()	{		$app = JFactory::getApplication();		// No remember me for admin		if ($app->isAdmin())		{			return;		}		$user = JFactory::getUser();		if ($user->get('guest'))		{			$hash = JApplication::getHash('JLOGIN_REMEMBER');			if ($str = JRequest::getString($hash, '', 'cookie', JREQUEST_ALLOWRAW | JREQUEST_NOTRIM))			{				$credentials = array();				$goodCookie = true;				$filter = JFilterInput::getInstance();				// Create the encryption key, apply extra hardening using the user agent string.				// Since we're decoding, no UA validity check is required.				$privateKey = JApplication::getHash(@$_SERVER['HTTP_USER_AGENT']);				$key = new JCryptKey('simple', $privateKey, $privateKey);				$crypt = new JCrypt(new JCryptCipherSimple, $key);				try				{					$str = $crypt->decrypt($str);					if (!is_string($str))					{						throw new Exception('Decoded cookie is not a string.');					}					$cookieData = json_decode($str);					if (null === $cookieData)					{						throw new Exception('JSON could not be docoded.');					}					if (!is_object($cookieData))					{						throw new Exception('Decoded JSON is not an object.');					}					// json_decoded cookie could be any object structure, so make sure the					// credentials are well structured and only have user and password.					if (isset($cookieData->username) && is_string($cookieData->username))					{						$credentials['username'] = $filter->clean($cookieData->username, 'username');					}					else					{						throw new Exception('Malformed username.');					}					if (isset($cookieData->password) && is_string($cookieData->password))					{						$credentials['password'] = $filter->clean($cookieData->password, 'string');					}					else					{						throw new Exception('Malformed password.');					}					$return = $app->login($credentials, array('silent' => true));					if (!$return)					{						throw new Exception('Log-in failed.');					}				}				catch (Exception $e)				{					$config = JFactory::getConfig();					$cookie_domain = $config->get('cookie_domain', '');					$cookie_path = $config->get('cookie_path', '/');					// Clear the remember me cookie					setcookie(						JApplication::getHash('JLOGIN_REMEMBER'), false, time() - 86400,						$cookie_path, $cookie_domain					);					JLog::add('A remember me cookie was unset for the following reason: ' . $e->getMessage(), JLog::WARNING, 'security');				}			}		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;// Load the base adapter.require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Tag. * * @package     Joomla.Plugin * @subpackage  Finder.Tags * @since       3.1 */class PlgFinderTags extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  3.1	 */	protected $context = 'Tags';	/**	 * The extension name.	 *	 * @var    string	 * @since  3.1	 */	protected $extension = 'com_tags';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  3.1	 */	protected $layout = 'tag';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  3.1	 */	protected $type_title = 'Tag';	/**	 * The table name.	 *	 * @var    string	 * @since  3.1	 */	protected $table = '#__tags';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  3.1	 */	protected $state_field = 'published';	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_tags.tag')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle tags here.		if ($context == 'com_tags.tag')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle news feeds here		if ($context == 'com_tags.tag')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   3.1	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle tags here		if ($context == 'com_tags.tag')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = JComponentHelper::getParams('com_tags', true);		$item->params->merge($registry);		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = TagsHelperRoute::getTagRoute($item->slug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Tag');		// Add the author taxonomy data.		if (!empty($item->author) || !empty($item->created_by_alias))		{			$item->addTaxonomy('Author', !empty($item->created_by_alias) ? $item->created_by_alias : $item->author);		}		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	protected function setup()	{		// Load dependent classes.		require_once JPATH_SITE . '/components/com_tags/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   3.1	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.description AS summary')			->select('a.created_time AS start_date, a.created_user_id AS created_by')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.access')			->select('a.modified_time AS modified, a.modified_user_id AS modified_by')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('a.published AS state, a.access, a.created_time AS start_date, a.params');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias)			->from('#__tags AS a');		// Join the #__users table		$query->select('u.name AS author')			->join('LEFT', '#__users AS u ON u.id = b.created_user_id')			->from('#__tags AS b');		// Exclude the ROOT item		$query->where($db->quoteName('a.id') . ' > 1');		return $query;	}	/**	 * Method to get a SQL query to load the published and access states for the given tag.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   3.1	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true);		$query->select($this->db->quoteName('a.id'))			->select($this->db->quoteName('a.' . $this->state_field, 'state') . ', ' . $this->db->quoteName('a.access'))			->select('NULL AS cat_state, NULL AS cat_access')			->from($this->db->quoteName($this->table, 'a'));		return $query;	}	/**	 * Method to get the query clause for getting items to update by time.	 *	 * @param   string  $time  The modified timestamp.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   3.1	 */	protected function getUpdateQueryByTime($time)	{		// Build an SQL query based on the modified time.		$query = $this->db->getQuery(true)			->where('a.date >= ' . $this->db->quote($time));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tag Model * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsModelTag extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  3.1	 */	protected $text_prefix = 'COM_TAGS';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 *	 * @since   3.1	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return parent::canDelete($record);		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 *	 * @since   3.1	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return parent::canEditState($record);	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   3.1	*/	public function getTable($type = 'Tag', $prefix = 'TagsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		$parentId = $app->input->getInt('parent_id');		$this->setState('tag.parent_id', $parentId);		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState($this->getName() . '.id', $pk);		// Load the parameters.		$params = JComponentHelper::getParams('com_tags');		$this->setState('params', $params);	}	/**	 * Method to get a tag.	 *	 * @param   integer  $pk  An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Tag data object on success, false on failure.	 *	 * @since   3.1	 */	public function getItem($pk = null)	{		if ($result = parent::getItem($pk))		{			// Prime required properties.			if (empty($result->id))			{				$result->parent_id = $this->getState('tag.parent_id');			}			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($result->metadata);			$result->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($result->images);			$result->images = $registry->toArray();			// Convert the urls field to an array.			$registry = new JRegistry;			$registry->loadString($result->urls);			$result->urls = $registry->toArray();			// Convert the created and modified dates to local user time for display in the form.			$tz = new DateTimeZone(JFactory::getApplication()->getCfg('offset'));			if ((int) $result->created_time)			{				$date = new JDate($result->created_time);				$date->setTimezone($tz);				$result->created_time = $date->toSql(true);			}			else			{				$result->created_time = null;			}			if ((int) $result->modified_time)			{				$date = new JDate($result->modified_time);				$date->setTimezone($tz);				$result->modified_time = $date->toSql(true);			}			else			{				$result->modified_time = null;			}		}		return $result;	}	/**	 * Method to get the row form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   3.1	 */	public function getForm($data = array(), $loadData = true)	{		$extension = $this->getState('tag');		$jinput = JFactory::getApplication()->input;		// Get the form.		$form = $this->loadForm('com_tags.tag', 'tag', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$user = JFactory::getUser();		if (!$user->authorise('core.edit.state', 'com_tags' . $jinput->get('id')))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   3.1	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_tags.edit.tag.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_tags.tag', $data);		return $data;	}	/**	 * Method to preprocess the form.	 *	 * @param   JForm   $form    A JForm object.	 * @param   mixed   $data    The data expected for the form.	 * @param   string  $group  The name of the plugin group to import.	 *	 * @return  void	 *	 * @see     JFormField	 * @since   3.1	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$input = JFactory::getApplication()->input;		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Load the row if saving an existing tag.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		// Set the new parent id if parent id not matched OR while New/Save as Copy .		if ($table->parent_id != $data['parent_id'] || $data['id'] == 0)		{			$table->setLocation($data['parent_id'], 'last-child');		}		if (isset($data['images']) && is_array($data['images']))		{			$registry = new JRegistry;			$registry->loadArray($data['images']);			$data['images'] = (string) $registry;		}		if (isset($data['urls']) && is_array($data['urls']))		{			$registry = new JRegistry;			$registry->loadArray($data['urls']);			$data['urls'] = (string) $registry;		}		// Alter the title for save as copy		if ($input->get('task') == 'save2copy')		{			list($title, $alias) = $this->generateNewTitle($data['parent_id'], $data['alias'], $data['title']);			$data['title'] = $title;			$data['alias'] = $alias;		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Bind the rules.		if (isset($data['rules']))		{			$rules = new JAccessRules($data['rules']);			$table->setRules($rules);		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentBeforeSave event.		$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentAfterSave event.		$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, &$table, $isNew));		// Rebuild the path for the tag:		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Rebuild the paths of the tag's children:		if (!$table->rebuild($table->id, $table->lft, $table->level, $table->path))		{			$this->setError($table->getError());			return false;		}		$this->setState($this->getName() . '.id', $table->id);		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   3.1	 */	public function rebuild()	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array    $idArray    An array of primary key ids.	 * @param   integer  $lft_array  The lft value	 *	 * @return  boolean  False on failure or error, True otherwise	 *	 * @since   3.1	*/	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			$title = ($table->title != $title) ? $title : JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_users');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_users&view=levels');?>" method="post" id="adminForm" name="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_TITLE_LEVELS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_RESET'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LEVEL_NAME', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'levels.saveorder'); ?>					<?php endif; ?>				</th>				<th class="nowrap id-col">					<?php echo JText::_('JGRID_HEADING_ID'); ?>				</th>				<th class="width-40">					&#160;				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering  = ($listOrder == 'a.ordering');			$canCreate = $user->authorise('core.create',     'com_users');			$canEdit   = $user->authorise('core.edit',       'com_users');			$canChange = $user->authorise('core.edit.state', 'com_users');			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_users&task=level.edit&id='.$item->id);?>">						<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'levels.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'levels.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>				<td>					&#160;				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.calendar');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');//$images = json_decode($this->item->images);//$urls = json_decode($this->item->urls);// This checks if the editor config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params->show_publishing_options);if (!$editoroptions){	$params->show_urls_images_frontend = '0';}?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit item-page<?php echo $this->pageclass_sfx; ?>">	<?php if ($params->get('show_page_heading', 1)) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_content&a_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-vertical">		<div class="btn-toolbar">			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('article.save')">					<span class="icon-ok"></span>&#160;<?php echo JText::_('JSAVE') ?>				</button>			</div>			<div class="btn-group">				<button type="button" class="btn" onclick="Joomla.submitbutton('article.cancel')">					<span class="icon-cancel"></span>&#160;<?php echo JText::_('JCANCEL') ?>				</button>			</div>		</div>		<fieldset>			<ul class="nav nav-tabs">				<li class="active"><a href="#editor" data-toggle="tab"><?php echo JText::_('JEDITOR') ?></a></li>				<?php if ($params->get('show_urls_images_frontend') ) : ?>				<li><a href="#images" data-toggle="tab"><?php echo JText::_('COM_CONTENT_IMAGES_AND_URLS') ?></a></li>				<?php endif; ?>				<li><a href="#publishing" data-toggle="tab"><?php echo JText::_('COM_CONTENT_PUBLISHING') ?></a></li>				<li><a href="#language" data-toggle="tab"><?php echo JText::_('JFIELD_LANGUAGE_LABEL') ?></a></li>				<li><a href="#metadata" data-toggle="tab"><?php echo JText::_('COM_CONTENT_METADATA') ?></a></li>			</ul>			<div class="tab-content">				<div class="tab-pane active" id="editor">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('title'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('title'); ?>						</div>					</div>					<?php if (is_null($this->item->id)) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('alias'); ?>						</div>					</div>					<?php endif; ?>					<?php echo $this->form->getInput('articletext'); ?>				</div>				<?php if ($params->get('show_urls_images_frontend')): ?>				<div class="tab-pane" id="images">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro', 'images'); ?>							<?php echo $this->form->getInput('image_intro', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro_alt', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_intro_alt', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro_caption', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_intro_caption', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('float_intro', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('float_intro', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext_alt', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext_alt', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext_caption', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext_caption', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('float_fulltext', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('float_fulltext', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urla', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urla', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlatext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlatext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targeta', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlb', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlb', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlbtext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlbtext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targetb', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlc', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlc', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlctext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlctext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targetc', 'urls'); ?>						</div>					</div>				</div>				<?php endif; ?>				<div class="tab-pane" id="publishing">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('catid'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('catid'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('tags', 'metadata'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('tags', 'metadata'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('created_by_alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('created_by_alias'); ?>						</div>					</div>					<?php if ($this->item->params->get('access-change')) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('state'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('state'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('featured'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('featured'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('publish_up'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('publish_up'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('publish_down'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('publish_down'); ?>							</div>						</div>					<?php endif; ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('access'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('access'); ?>						</div>					</div>					<?php if (is_null($this->item->id)):?>						<div class="control-group">							<div class="control-label">							</div>							<div class="controls">								<?php echo JText::_('COM_CONTENT_ORDERING'); ?>							</div>						</div>					<?php endif; ?>				</div>				<div class="tab-pane" id="language">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('language'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('language'); ?>						</div>					</div>				</div>				<div class="tab-pane" id="metadata">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('metadesc'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('metadesc'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('metakey'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('metakey'); ?>						</div>					</div>					<input type="hidden" name="task" value="" />					<input type="hidden" name="return" value="<?php echo $this->return_page; ?>" />					<?php if ($this->params->get('enable_category', 0) == 1) :?>					<input type="hidden" name="jform[catid]" value="<?php echo $this->params->get('catid', 1); ?>" />					<?php endif; ?>				</div>			</div>			<?php echo JHtml::_('form.token'); ?>		</fieldset>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a select list of integers with specified first, last and step values. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldInteger extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Integer';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Initialize some field attributes.		$first = (int) $this->element['first'];		$last = (int) $this->element['last'];		$step = (int) $this->element['step'];		// Sanity checks.		if ($step == 0)		{			// Step of 0 will create an endless loop.			return $options;		}		elseif ($first < $last && $step < 0)		{			// A negative step will never reach the last number.			return $options;		}		elseif ($first > $last && $step > 0)		{			// A position step will never reach the last number.			return $options;		}		elseif ($step < 0)		{			// Build the options array backwards.			for ($i = $first; $i >= $last; $i += $step)			{				$options[] = JHtml::_('select.option', $i);			}		}		else		{			// Build the options array.			for ($i = $first; $i <= $last; $i += $step)			{				$options[] = JHtml::_('select.option', $i);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_articles_archive * * @package     Joomla.Site * @subpackage  mod_articles_archive * @since       1.5 */class ModArchiveHelper{	/*	 * @since  1.5	 */	public static function getList(&$params)	{		//get database		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$query->select($query->month($db->quoteName('created')) . ' AS created_month')			->select('created, id, title')			->select($query->year($db->quoteName('created')) . ' AS created_year')			->from('#__content')			->where('state = 2 AND checked_out = 0')			->group('created_year, created_month, id, title, created');		// Filter by language		if (JFactory::getApplication()->getLanguageFilter())		{			$query->where('language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		$db->setQuery($query, 0, (int) $params->get('count'));		$rows = (array) $db->loadObjectList();		$app = JFactory::getApplication();		$menu = $app->getMenu();		$item = $menu->getItems('link', 'index.php?option=com_content&view=archive', true);		$itemid = (isset($item) && !empty($item->id)) ? '&Itemid=' . $item->id : '';		$i = 0;		$lists = array();		foreach ($rows as $row)		{			$date = JFactory::getDate($row->created);			$created_month = $date->format('n');			$created_year = $date->format('Y');			$created_year_cal = JHTML::_('date', $row->created, 'Y');			$month_name_cal = JHTML::_('date', $row->created, 'F');			$lists[$i] = new stdClass;			$lists[$i]->link = JRoute::_('index.php?option=com_content&view=archive&year=' . $created_year . '&month=' . $created_month . $itemid);			$lists[$i]->text = JText::sprintf('MOD_ARTICLES_ARCHIVE_DATE', $month_name_cal, $created_year_cal);			$i++;		}		return $lists;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleEmail extends JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  11.1	 * @see    http://www.w3.org/TR/html-markup/input.email.html	 */	protected $regex = '^[a-zA-Z0-9.!#$%&*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$';	/**	 * Method to test the email address and optionally check for uniqueness.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		// If the tld attribute is present, change the regular expression to require at least 2 characters for it.		$tld = ((string) $element['tld'] == 'tld' || (string) $element['tld'] == 'required');		if ($tld)		{			$this->regex = '^[a-zA-Z0-9.!#$%&*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]{2,})$';		}		// Determine if the multiple attribute is present		$multiple = ((string) $element['multiple'] == 'true' || (string) $element['multiple'] == 'multiple');		if ($multiple)		{			$values = explode(',', $value);		}		if (!$multiple)		{			// Test the value against the regular expression.			if (!parent::test($element, $value, $group, $input, $form))			{				return false;			}		}		else		{			foreach ($values as $value)			{				// Test the value against the regular expression.				if (!parent::test($element, $value, $group, $input, $form))				{					return false;				}			}		}		// Check if we should test for uniqueness. This only can be used if multiple is not true		$unique = ((string) $element['unique'] == 'true' || (string) $element['unique'] == 'unique');		if ($unique && !$multiple)		{			// Get the database object and a new query object.			$db = JFactory::getDbo();			$query = $db->getQuery(true);			// Build the query.			$query->select('COUNT(*)')				->from('#__users')				->where('email = ' . $db->quote($value));			// Get the extra field check attribute.			$userId = ($form instanceof JForm) ? $form->getValue('id') : '';			$query->where($db->quoteName('id') . ' <> ' . (int) $userId);			// Set and query the database.			$db->setQuery($query);			$duplicate = (bool) $db->loadResult();			if ($duplicate)			{				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_related_items * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_content/helpers/route.php';/** * Helper for mod_related_items * * @package     Joomla.Site * @subpackage  mod_related_items * @since       1.5 */abstract class ModRelatedItemsHelper{	public static function getList($params)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		$date = JFactory::getDate();		$option = $app->input->get('option');		$view = $app->input->get('view');		$temp = $app->input->getString('id');		$temp = explode(':', $temp);		$id = $temp[0];		$nullDate = $db->getNullDate();		$now = $date->toSql();		$related = array();		$query = $db->getQuery(true);		if ($option == 'com_content' && $view == 'article' && $id)		{			// select the meta keywords from the item			$query->select('metakey')				->from('#__content')				->where('id = ' . (int) $id);			$db->setQuery($query);			if ($metakey = trim($db->loadResult()))			{				// explode the meta keys on a comma				$keys = explode(',', $metakey);				$likes = array();				// assemble any non-blank word(s)				foreach ($keys as $key)				{					$key = trim($key);					if ($key)					{						$likes[] = $db->escape($key);					}				}				if (count($likes))				{					// select other items based on the metakey field 'like' the keys found					$query->clear()						->select('a.id')						->select('a.title')						->select('DATE_FORMAT(a.created, "%Y-%m-%d") as created')						->select('a.catid')						->select('cc.access AS cat_access')						->select('cc.published AS cat_state');					// Sqlsrv changes					$case_when = ' CASE WHEN ';					$case_when .= $query->charLength('a.alias', '!=', '0');					$case_when .= ' THEN ';					$a_id = $query->castAsChar('a.id');					$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');					$case_when .= ' ELSE ';					$case_when .= $a_id . ' END as slug';					$query->select($case_when);					$case_when = ' CASE WHEN ';					$case_when .= $query->charLength('cc.alias', '!=', '0');					$case_when .= ' THEN ';					$c_id = $query->castAsChar('cc.id');					$case_when .= $query->concatenate(array($c_id, 'cc.alias'), ':');					$case_when .= ' ELSE ';					$case_when .= $c_id . ' END as catslug';					$query->select($case_when)						->from('#__content AS a')						->join('LEFT', '#__content_frontpage AS f ON f.content_id = a.id')						->join('LEFT', '#__categories AS cc ON cc.id = a.catid')						->where('a.id != ' . (int) $id)						->where('a.state = 1')						->where('a.access IN (' . $groups . ')');					$concat_string = $query->concatenate(array('","', ' REPLACE(a.metakey, ", ", ",")', ' ","'));					$query->where('(' . $concat_string . ' LIKE "%' . implode('%" OR ' . $concat_string . ' LIKE "%', $likes) . '%")') //remove single space after commas in keywords)						->where('(a.publish_up = ' . $db->quote($nullDate) . ' OR a.publish_up <= ' . $db->quote($now) . ')')						->where('(a.publish_down = ' . $db->quote($nullDate) . ' OR a.publish_down >= ' . $db->quote($now) . ')');					// Filter by language					if (JLanguageMultilang::isEnabled())					{						$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');					}					$db->setQuery($query);					$temp = $db->loadObjectList();					if (count($temp))					{						foreach ($temp as $row)						{							if ($row->cat_state == 1)							{								$row->route = JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catslug));								$related[] = $row;							}						}					}					unset ($temp);				}			}		}		return $related;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Override Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesModelOverride extends JModelAdmin{	/**	 * Method to get the record form.	 *	 * @param   	array		$data			Data for the form.	 * @param   	boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  	A JForm object on success, false on failure	 *	 * @since		2.5	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form		$form = $this->loadForm('com_languages.override', 'override', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$client		= $this->getState('filter.client', 'site');		$language	= $this->getState('filter.language', 'en-GB');		$langName	= JLanguage::getInstance($language)->getName();		if (!$langName)		{			// If a language only exists in frontend, it's meta data cannot be			// loaded in backend at the moment, so fall back to the language tag			$langName = $language;		}		$form->setValue('client', null, JText::_('COM_LANGUAGES_VIEW_OVERRIDE_CLIENT_'.strtoupper($client)));		$form->setValue('language', null, JText::sprintf('COM_LANGUAGES_VIEW_OVERRIDE_LANGUAGE', $langName, $language));		$form->setValue('file', null, JPath::clean(constant('JPATH_'.strtoupper($client)) . '/language/overrides/' . $language . '.override.ini'));		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed The data for the form	 *	 * @since		2.5	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_languages.edit.override.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_languages.override', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   	string	$pk	The key name.	 *	 * @return  mixed  	Object on success, false otherwise.	 *	 * @since		2.5	 */	public function getItem($pk = null)	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$input = JFactory::getApplication()->input;		$pk	= (!empty($pk)) ? $pk : $input->get('id');		$filename = constant('JPATH_'.strtoupper($this->getState('filter.client'))) . '/language/overrides/' . $this->getState('filter.language', 'en-GB').'.override.ini';		$strings = LanguagesHelper::parseFile($filename);		$result = new stdClass;		$result->key      = '';		$result->override = '';		if (isset($strings[$pk]))		{			$result->key      = $pk;			$result->override = $strings[$pk];		}		return $result;	}	/**	 * Method to save the form data.	 *	 * @param   	array		$data							The form data.	 * @param   	boolean	$opposite_client	Indicates whether the override should not be created for the current client	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since		2.5	 */	public function save($data, $opposite_client = false)	{		$app = JFactory::getApplication();		require_once JPATH_COMPONENT.'/helpers/languages.php';		$client		= $app->getUserState('com_languages.overrides.filter.client', 0);		$language	= $app->getUserState('com_languages.overrides.filter.language', 'en-GB');		// If the override should be created for both		if ($opposite_client)		{			$client = 1 - $client;		}		$client = $client ? 'administrator' : 'site';		// Parse the override.ini file in oder to get the keys and strings		$filename	= constant('JPATH_'.strtoupper($client)) . '/language/overrides/' . $language . '.override.ini';		$strings	= LanguagesHelper::parseFile($filename);		if (isset($strings[$data['id']]))		{			// If an existent string was edited check whether			// the name of the constant is still the same			if ($data['key'] == $data['id'])			{				// If yes, simply override it				$strings[$data['key']] = $data['override'];			}			else			{				// If no, delete the old string and prepend the new one				unset($strings[$data['id']]);				$strings = array($data['key'] => $data['override']) + $strings;			}		}		else		{			// If it is a new override simply prepend it			$strings = array($data['key'] => $data['override']) + $strings;		}		foreach ($strings as $key => $string)		{			$strings[$key] = str_replace('"', '"_QQ_"', $string);		}		// Write override.ini file with the strings		$registry = new JRegistry;		$registry->loadObject($strings);		if (!JFile::write($filename, $registry->toString('INI')))		{			return false;		}		// If the override should be stored for both clients save		// it also for the other one and prevent endless recursion		if (isset($data['both']) && $data['both'] && !$opposite_client)		{			return $this->save($data, true);		}		return true;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since		2.5	 */	protected function populateState()	{		$app = JFactory::getApplication();		$client = $app->getUserStateFromRequest('com_languages.overrides.filter.client', 'filter_client', 0, 'int') ? 'administrator' : 'site';		$this->setState('filter.client', $client);		$language = $app->getUserStateFromRequest('com_languages.overrides.filter.language', 'filter_language', 'en-GB', 'cmd');		$this->setState('filter.language', $language);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $children;	protected $pagination;	protected $lead_items = array();	protected $intro_items = array();	protected $link_items = array();	protected $columns = 1;	public function display($tpl = null)	{		$app	= JFactory::getApplication();		$user	= JFactory::getUser();		// Get some data from the models		$state		= $this->get('State');		$params		= $state->params;		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent		= $this->get('Parent');		$pagination = $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		// Check whether category access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// PREPARE THE DATA		// Get the metrics for the structural page layout.		$numLeading	= $params->def('num_leading_articles', 1);		$numIntro	= $params->def('num_intro_articles', 4);		$numLinks	= $params->def('num_links', 4);		// Compute the article slugs and prepare introtext (runs content plugins).		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item = &$items[$i];			$item->slug = $item->alias ? ($item->id . ':' . $item->alias) : $item->id;			$item->parent_slug = ($item->parent_alias) ? ($item->parent_id . ':' . $item->parent_alias) : $item->parent_id;			// No link for ROOT category			if ($item->parent_alias == 'root')			{				$item->parent_slug = null;			}			$item->catslug		= $item->category_alias ? ($item->catid.':'.$item->category_alias) : $item->catid;			$item->event = new stdClass;			$dispatcher = JEventDispatcher::getInstance();			// Old plugins: Ensure that text property is available			if (!isset($item->text))			{				$item->text = $item->introtext;			}			JPluginHelper::importPlugin('content');			$results = $dispatcher->trigger('onContentPrepare', array ('com_content.category', &$item, &$this->params, 0));			// Old plugins: Use processed text as introtext			$item->introtext = $item->text;			$results = $dispatcher->trigger('onContentAfterTitle', array('com_content.category', &$item, &$item->params, 0));			$item->event->afterDisplayTitle = trim(implode("\n", $results));			$results = $dispatcher->trigger('onContentBeforeDisplay', array('com_content.category', &$item, &$item->params, 0));			$item->event->beforeDisplayContent = trim(implode("\n", $results));			$results = $dispatcher->trigger('onContentAfterDisplay', array('com_content.category', &$item, &$item->params, 0));			$item->event->afterDisplayContent = trim(implode("\n", $results));		}		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $category->id) === false)))		{			// Get the layout from the merged category params			if ($layout = $category->params->get('category_layout'))			{				$this->setLayout($layout);			}		}		// At this point, we are in a menu item, so we don't override the layout		elseif (isset($active->query['layout']))		{			// We need to set the layout from the query in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		// For blog layouts, preprocess the breakdown of leading, intro and linked articles.		// This makes it much easier for the designer to just interrogate the arrays.		if (($params->get('layout_type') == 'blog') || ($this->getLayout() == 'blog'))		{			$max = count($items);			// The first group is the leading articles.			$limit = $numLeading;			for ($i = 0; $i < $limit && $i < $max; $i++)			{				$this->lead_items[$i] = &$items[$i];			}			// The second group is the intro articles.			$limit = $numLeading + $numIntro;			// Order articles across, then down (or single column mode)			for ($i = $numLeading; $i < $limit && $i < $max; $i++)			{				$this->intro_items[$i] = &$items[$i];			}			$this->columns = max(1, $params->def('num_columns', 1));			$order = $params->def('multi_column_order', 1);			if ($order == 0 && $this->columns > 1)			{				// call order down helper				$this->intro_items = ContentHelperQuery::orderDownColumns($this->intro_items, $this->columns);			}			$limit = $numLeading + $numIntro + $numLinks;			// The remainder are the links.			for ($i = $numLeading + $numIntro; $i < $limit && $i < $max;$i++)			{					$this->link_items[$i] = &$items[$i];			}		}		$children = array($category->id => $children);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevel = $params->get('maxLevel', -1);		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		// Increment the category hit counter		$model = $this->getModel();		$model->hit();		$this->category->tags = new JHelperTags;		$this->category->tags->getItemTags('com_content.category', $this->category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_content' || $menu->query['view'] == 'article' || $id != $this->category->id))		{			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_content' || $menu->query['view'] == 'article' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => ContentHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}		// Add feed links		if ($this->params->get('show_feed_link', 1))		{			$link = '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link . '&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link . '&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();// This checks if the config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params['show_publishing_options']);$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;if (!$editoroptions){	$params['show_publishing_options'] = '1';	$params['show_article_options'] = '1';	$params['show_urls_images_backend'] = '0';	$params['show_urls_images_frontend'] = '0';}// Check if the article uses configuration settings besides global. If so, use them.if (!empty($this->item->attribs['show_publishing_options'])){	$params['show_publishing_options'] = $this->item->attribs['show_publishing_options'];}if (!empty($this->item->attribs['show_article_options'])){	$params['show_article_options'] = $this->item->attribs['show_article_options'];}if (!empty($this->item->attribs['show_urls_images_backend'])){	$params['show_urls_images_backend'] = $this->item->attribs['show_urls_images_backend'];}?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_content&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate">	<div class="row-fluid">		<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_CONTENT_ARTICLE_DETAILS', true)); ?>					<fieldset class="adminform">						<div class="control-group form-inline">							<?php echo $this->form->getLabel('title'); ?> <?php echo $this->form->getInput('title'); ?> <?php echo $this->form->getLabel('catid'); ?> <?php echo $this->form->getInput('catid'); ?>						</div>						<?php echo $this->form->getInput('articletext'); ?>					</fieldset>					<?php						// The url and images fields only show if the configuration is set to allow them. This is for legacy reasons.					?>					<?php if ($params['show_urls_images_backend']) : ?>						<div class="row-fluid">							<div class="span6">								<h4><?php echo JText::_('COM_CONTENT_FIELDSET_URLS_AND_IMAGES');?></h4>								<div class="control-group">									<?php echo $this->form->getLabel('images'); ?>									<div class="controls">										<?php echo $this->form->getInput('images'); ?>									</div>								</div>								<?php foreach ($this->form->getGroup('images') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>											<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>							<div class="span6">								<?php foreach ($this->form->getGroup('urls') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>												<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>						</div>					<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php // Do not show the publishing options if the edit form is configured not to. ?>					<?php  if ($params['show_publishing_options'] || ( $params['show_publishing_options'] = '' && !empty($editoroptions)) ) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_CONTENT_FIELDSET_PUBLISHING', true)); ?>							<div class="row-fluid">								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('alias'); ?>										</div>									</div>									<div class="control-group">										<div class="control-label">											<?php echo $this->form->getLabel('id'); ?>										</div>										<div class="controls">											<?php echo $this->form->getInput('id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by_alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by_alias'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created'); ?>										<div class="controls">											<?php echo $this->form->getInput('created'); ?>										</div>									</div>								</div>								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('publish_up'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_up'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('publish_down'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_down'); ?>										</div>									</div>									<?php if ($this->item->modified_by) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('modified_by'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_by'); ?>											</div>										</div>										<div class="control-group">											<?php echo $this->form->getLabel('modified'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->version) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('version'); ?>											<div class="controls">												<?php echo $this->form->getInput('version'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->hits) : ?>										<div class="control-group">											<div class="control-label">												<?php echo $this->form->getLabel('hits'); ?>											</div>											<div class="controls">												<?php echo $this->form->getInput('hits'); ?>											</div>										</div>									<?php endif; ?>								</div>							</div>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php  endif; ?>					<?php if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))) : ?>							<?php $fieldSets = $this->form->getFieldsets('attribs'); ?>							<?php foreach ($fieldSets as $name => $fieldSet) : ?>								<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>									<?php $attribtabs = 'attrib-' . $name; ?>									<?php echo JHtml::_('bootstrap.addTab', 'myTab', $attribtabs, JText::_($fieldSet->label, true)); ?>								<?php endif; ?>							<?php								// If the parameter says to show the article options or if the parameters have never been set, we will								// show the article options.								if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))) : ?>								<?php	// Go through all the fieldsets except the configuration and basic-limited, which are									// handled separately below.								?>									<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>										<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>											<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>										<?php endif; ?>										<?php foreach ($this->form->getFieldset($name) as $field) : ?>											<div class="control-group">												<?php echo $field->label; ?>												<div class="controls">													<?php echo $field->input; ?>												</div>											</div>										<?php endforeach; ?>									<?php endif; ?>								<?php // If we are not showing the options we need to use the hidden fields so the values are not lost.								?>								<?php elseif ($name == 'basic-limited'):									foreach ($this->form->getFieldset('basic-limited') as $field) :										echo $field->input;									endforeach;								endif;							?>						<?php endforeach; ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>					<?php // We need to make a separate space for the configuration						// so that those fields always show to those wih permissions					?>					<?php if ($this->canDo->get('core.admin')):  ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'editor', JText::_('COM_CONTENT_SLIDER_EDITOR_CONFIG', true)); ?>							<?php foreach ($this->form->getFieldset('editorConfig') as $field) : ?>								<div class="control-group">									<?php echo $field->label; ?>									<div class="controls">										<?php echo $field->input; ?>									</div>								</div>							<?php endforeach; ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>							<?php echo $this->loadTemplate('metadata'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php if ($assoc) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>							<?php echo $this->loadTemplate('associations'); ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>					<?php if ($this->canDo->get('core.admin')) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'permissions', JText::_('COM_CONTENT_FIELDSET_RULES', true)); ?>							<fieldset>								<?php echo $this->form->getInput('rules'); ?>							</fieldset>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="return" value="<?php echo $input->getCmd('return');?>" />			<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * RSS Feed Parser Namespace handler for MediaRSS. * * @package     Joomla.Platform * @subpackage  Feed * @see         http://video.search.yahoo.com/mrss * @since       12.3 */class JFeedParserRssMedia implements JFeedParserNamespace{	/**	 * Method to handle an element for the feed given that the media namespace is present.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeed(JFeed $feed, SimpleXMLElement $el)	{	}	/**	 * Method to handle the feed entry element for the feed given that the media namespace is present.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Mediawiki * @since       12.3 */abstract class JMediawikiObject{	/**	 * @var    JRegistry  Options for the MediaWiki object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JMediawikiHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $client;	/**     * Constructor.     *     * @param   JRegistry       $options  Mediawiki options object.     * @param   JMediawikiHttp  $client   The HTTP client object.     *     * @since   12.3     */	public function __construct(JRegistry $options = null, JMediawikiHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JMediawikiHttp($this->options);	}	/**     * Method to build and return a full request URL for the request.     *     * @param   string  $path  URL to inflect     *     * @return  string   The request URL.     *     * @since   12.3     */	protected function fetchUrl($path)	{		// Append the path with output format		$path .= '&format=xml';		$uri = new JUri($this->options->get('api.url') . '/api.php' . $path);		if ($this->options->get('api.username', false))		{			$uri->setUser($this->options->get('api.username'));		}		if ($this->options->get('api.password', false))		{			$uri->setPass($this->options->get('api.password'));		}		return (string) $uri;	}	/**     * Method to build request parameters from a string array.     *     * @param   array  $params  string array that contains the parameters     *     * @return  string   request parameter     *     * @since   12.3     */	public function buildParameter(array $params)	{		$path = '';		foreach ($params as $param)		{			$path .= $param;			if (next($params) == true)			{				$path .= '|';			}		}		return $path;	}	/**     * Method to validate response for errors     *     * @param   JHttpresponse  $response  reponse from the mediawiki server     *     * @return  Object     *     * @since   12.3     */	public function validateResponse($response)	{		$xml = simplexml_load_string($response->body);		if (isset($xml->warnings))		{			throw new DomainException($xml->warnings->info);		}		if (isset($xml->error))		{			throw new DomainException($xml->error['info']);		}		return $xml;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;if (!JFactory::getUser()->authorise('core.manage', $input->get('extension'))){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}JLoader::register('JHtmlCategoriesAdministrator', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/html/categoriesadministrator.php');$task = $input->get('task');$controller	= JControllerLegacy::getInstance('Categories');$controller->execute($input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$lang = JFactory::getLanguage();JText::script('COM_FINDER_INDEX_CONFIRM_PURGE_PROMPT');JText::script('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'index.purge')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_PURGE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	if (pressbutton == 'index.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=index');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_ITEMS')); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_ITEMS')); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_type"><?php echo JText::_('COM_FINDER_INDEX_TYPE_FILTER'); ?></label>			<select name="filter_type" class="inputbox" id="filter_type">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_TYPE_FILTER'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.typeslist'), 'value', 'text', $this->state->get('filter.type'));?>			</select>			<label class="selectlabel" for="filter_state"><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'); ?></label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'l.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'l.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_INDEX_TYPE', 'l.type_id', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-20">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_LINK_URL', 'l.url', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_INDEX_DATE', 'l.indexdate', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php if (count($this->items) == 0) : ?>			<tr class="row0">				<td align="center" colspan="7">					<?php					if ($this->total == 0)					{						echo JText::_('COM_FINDER_INDEX_NO_DATA') . '  ' . JText::_('COM_FINDER_INDEX_TIP');					} else {						echo JText::_('COM_FINDER_INDEX_NO_CONTENT');					}					?>				</td>			</tr>		<?php endif; ?>		<?php $canChange	= JFactory::getUser()->authorise('core.manage',	'com_finder'); ?>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->link_id); ?>				</th>				<td>					<?php if ((int) $item->publish_start_date or (int) $item->publish_end_date or (int) $item->start_date or (int) $item->end_date) : ?>					<img src="<?php echo JURI::root();?>/media/system/images/calendar.png" style="border:1px;float:right" class="hasTip" title="<?php echo JText::sprintf('COM_FINDER_INDEX_DATE_INFO', $item->publish_start_date, $item->publish_end_date, $item->start_date, $item->end_date);?>" />					<?php endif; ?>					<?php echo $this->escape($item->title); ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'index.', $canChange, 'cb'); ?>				</td>				<td class="center nowrap">					<?php					$key = FinderHelperLanguage::branchSingular($item->t_title);					echo $lang->hasKey($key) ? JText::_($key) : $item->t_title;					?>				</td>				<td class="nowrap">					<?php					if (strlen($item->url) > 80)					{						echo substr($item->url, 0, 70) . '...';					} else {						echo $item->url;					}					?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->indexdate, JText::_('DATE_FORMAT_LC4')); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="display" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');// Import the com_menus helper.require_once realpath(JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Supports an HTML grouped select list of menu item grouped by menu * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldMenuitem extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'MenuItem';	/**	 * Method to get the field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   1.6	 */	protected function getGroups()	{		$groups = array();		// Initialize some field attributes.		$menuType = (string) $this->element['menu_type'];		$published = $this->element['published'] ? explode(',', (string) $this->element['published']) : array();		$disable = $this->element['disable'] ? explode(',', (string) $this->element['disable']) : array();		$language = $this->element['language'] ? explode(',', (string) $this->element['language']) : array();		// Get the menu items.		$items = MenusHelper::getMenuLinks($menuType, 0, 0, $published, $language);		// Build group for a specific menu type.		if ($menuType)		{			// Initialize the group.			$groups[$menuType] = array();			// Build the options array.			foreach ($items as $link)			{				$groups[$menuType][] = JHtml::_('select.option', $link->value, $link->text, 'value', 'text', in_array($link->type, $disable));			}		}		// Build groups for all menu types.		else		{			// Build the groups arrays.			foreach ($items as $menu)			{				// Initialize the group.				$groups[$menu->menutype] = array();				// Build the options array.				foreach ($menu->links as $link)				{					$groups[$menu->menutype][] = JHtml::_(						'select.option', $link->value, $link->text, 'value', 'text',						in_array($link->type, $disable)					);				}			}		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$langs  = ModLoginHelper::getLanguageList();$return = ModLoginHelper::getReturnURI();require JModuleHelper::getLayoutPath('mod_login', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Article Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelArticle extends JModelItem{	/**	 * Model context string.	 *	 * @var        string	 */	protected $_context = 'com_content.article';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pk = $app->input->getInt('id');		$this->setState('article.id', $pk);		$offset = $app->input->getUInt('limitstart');		$this->setState('list.offset', $offset);		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		// TODO: Tune these values based on other permissions.		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_content')) && (!$user->authorise('core.edit', 'com_content')))		{			$this->setState('filter.published', 1);			$this->setState('filter.archived', 2);		}		$this->setState('filter.language', JLanguageMultilang::isEnabled());	}	/**	 * Method to get article data.	 *	 * @param   integer    The id of the article.	 *	 * @return  mixed  Menu item data object on success, false on failure.	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('article.id');		if ($this->_item === null)		{			$this->_item = array();		}		if (!isset($this->_item[$pk]))		{			try			{				$db = $this->getDbo();				$query = $db->getQuery(true)					->select(						$this->getState(							'item.select', 'a.id, a.asset_id, a.title, a.alias, a.introtext, a.fulltext, ' .							// If badcats is not null, this means that the article is inside an unpublished category							// In this case, the state is set to 0 to indicate Unpublished (even if the article state is Published)							'CASE WHEN badcats.id is null THEN a.state ELSE 0 END AS state, ' .							'a.catid, a.created, a.created_by, a.created_by_alias, ' .							// use created if modified is 0							'CASE WHEN a.modified = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.modified END as modified, ' .							'a.modified_by, a.checked_out, a.checked_out_time, a.publish_up, a.publish_down, ' .							'a.images, a.urls, a.attribs, a.version, a.ordering, ' .							'a.metakey, a.metadesc, a.access, a.hits, a.metadata, a.featured, a.language, a.xreference'						)					);				$query->from('#__content AS a');				// Join on category table.				$query->select('c.title AS category_title, c.alias AS category_alias, c.access AS category_access')					->join('LEFT', '#__categories AS c on c.id = a.catid');				// Join on user table.				$query->select('u.name AS author')					->join('LEFT', '#__users AS u on u.id = a.created_by');				// Join on contact table				$subQuery = $db->getQuery(true)					->select('contact.user_id, MAX(contact.id) AS id, contact.language')					->from('#__contact_details AS contact')					->where('contact.published = 1')					->group('contact.user_id, contact.language');				$query->select('contact.id as contactid')					->join('LEFT', '(' . $subQuery . ') AS contact ON contact.user_id = a.created_by');				// Filter by language				if ($this->getState('filter.language'))				{					$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')')						->where('(contact.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ') OR contact.language IS NULL)');				}				// Join over the categories to get parent category titles				$query->select('parent.title as parent_title, parent.id as parent_id, parent.path as parent_route, parent.alias as parent_alias')					->join('LEFT', '#__categories as parent ON parent.id = c.parent_id');				// Join on voting table				$query->select('ROUND(v.rating_sum / v.rating_count, 0) AS rating, v.rating_count as rating_count')					->join('LEFT', '#__content_rating AS v ON a.id = v.content_id')					->where('a.id = ' . (int) $pk);				// Filter by start and end dates.				$nullDate = $db->quote($db->getNullDate());				$date = JFactory::getDate();				$nowDate = $db->quote($date->toSql());				$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')					->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');				// Join to check for category published state in parent categories up the tree				// If all categories are published, badcats.id will be null, and we just use the article state				$subquery = ' (SELECT cat.id as id FROM #__categories AS cat JOIN #__categories AS parent ';				$subquery .= 'ON cat.lft BETWEEN parent.lft AND parent.rgt ';				$subquery .= 'WHERE parent.extension = ' . $db->quote('com_content');				$subquery .= ' AND parent.published <= 0 GROUP BY cat.id)';				$query->join('LEFT OUTER', $subquery . ' AS badcats ON badcats.id = c.id');				// Filter by published state.				$published = $this->getState('filter.published');				$archived = $this->getState('filter.archived');				if (is_numeric($published))				{					$query->where('(a.state = ' . (int) $published . ' OR a.state =' . (int) $archived . ')');				}				$db->setQuery($query);				$data = $db->loadObject();				if (empty($data))				{					return JError::raiseError(404, JText::_('COM_CONTENT_ERROR_ARTICLE_NOT_FOUND'));				}				// Check for published state if filter set.				if (((is_numeric($published)) || (is_numeric($archived))) && (($data->state != $published) && ($data->state != $archived)))				{					return JError::raiseError(404, JText::_('COM_CONTENT_ERROR_ARTICLE_NOT_FOUND'));				}				// Convert parameter fields to objects.				$registry = new JRegistry;				$registry->loadString($data->attribs);				$data->params = clone $this->getState('params');				$data->params->merge($registry);				$registry = new JRegistry;				$registry->loadString($data->metadata);				$data->metadata = $registry;				// Compute selected asset permissions.				$user = JFactory::getUser();				// Technically guest could edit an article, but lets not check that to improve performance a little.				if (!$user->get('guest'))				{					$userId = $user->get('id');					$asset = 'com_content.article.' . $data->id;					// Check general edit permission first.					if ($user->authorise('core.edit', $asset))					{						$data->params->set('access-edit', true);					}					// Now check if edit.own is available.					elseif (!empty($userId) && $user->authorise('core.edit.own', $asset))					{						// Check for a valid user and that they are the owner.						if ($userId == $data->created_by)						{							$data->params->set('access-edit', true);						}					}				}				// Compute view access permissions.				if ($access = $this->getState('filter.access'))				{					// If the access filter has been set, we already know this user can view.					$data->params->set('access-view', true);				}				else				{					// If no access filter is set, the layout takes some responsibility for display of limited information.					$user = JFactory::getUser();					$groups = $user->getAuthorisedViewLevels();					if ($data->catid == 0 || $data->category_access === null)					{						$data->params->set('access-view', in_array($data->access, $groups));					}					else					{						$data->params->set('access-view', in_array($data->access, $groups) && in_array($data->category_access, $groups));					}				}				$this->_item[$pk] = $data;			}			catch (Exception $e)			{				if ($e->getCode() == 404)				{					// Need to go thru the error handler to allow Redirect to work.					JError::raiseError(404, $e->getMessage());				}				else				{					$this->setError($e);					$this->_item[$pk] = false;				}			}		}		return $this->_item[$pk];	}	/**	 * Increment the hit counter for the article.	 *	 * @param   integer  Optional primary key of the article to increment.	 *	 * @return  boolean  True if successful; false otherwise and internal error set.	 */	public function hit($pk = 0)	{		$input = JFactory::getApplication()->input;		$hitcount = $input->getInt('hitcount', 1);		if ($hitcount)		{			$pk = (!empty($pk)) ? $pk : (int) $this->getState('article.id');			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__content' .					' SET hits = hits + 1' .					' WHERE id = ' . (int) $pk			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}	public function storeVote($pk = 0, $rate = 0)	{		if ($rate >= 1 && $rate <= 5 && $pk > 0)		{			$userIP = $_SERVER['REMOTE_ADDR'];			$db = $this->getDbo();			$db->setQuery(				'SELECT *' .					' FROM #__content_rating' .					' WHERE content_id = ' . (int) $pk			);			$rating = $db->loadObject();			if (!$rating)			{				// There are no ratings yet, so lets insert our rating				$db->setQuery(					'INSERT INTO #__content_rating ( content_id, lastip, rating_sum, rating_count )' .						' VALUES ( ' . (int) $pk . ', ' . $db->quote($userIP) . ', ' . (int) $rate . ', 1 )'				);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage);					return false;				}			}			else			{				if ($userIP != ($rating->lastip))				{					$db->setQuery(						'UPDATE #__content_rating' .							' SET rating_count = rating_count + 1, rating_sum = rating_sum + ' . (int) $rate . ', lastip = ' . $db->quote($userIP) .							' WHERE content_id = ' . (int) $pk					);					try					{						$db->execute();					}					catch (RuntimeException $e)					{						$this->setError($e->getMessage);						return false;					}				}				else				{					return false;				}			}			return true;		}		JError::raiseWarning('SOME_ERROR_CODE', JText::sprintf('COM_CONTENT_INVALID_RATING', $rate), "JModelArticle::storeVote($rate)");		return false;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Database session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @since       11.1 */class JSessionStorageDatabase extends JSessionStorage{	/**	 * Read the data for a particular session identifier from the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		try		{			// Get the session data from the database table.			$query = $db->getQuery(true)				->select($db->quoteName('data'))			->from($db->quoteName('#__session'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($id));			$db->setQuery($query);			$result = (string) $db->loadResult();			$result = str_replace('\0\0\0', chr(0) . '*' . chr(0), $result);			return $result;		}		catch (Exception $e)		{			return false;		}	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id    The session identifier.	 * @param   string  $data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $data)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		$data = str_replace(chr(0) . '*' . chr(0), '\0\0\0', $data);		try		{			$query = $db->getQuery(true)				->update($db->quoteName('#__session'))			->set($db->quoteName('data') . ' = ' . $db->quote($data))			->set($db->quoteName('time') . ' = ' . $db->quote((int) time()))			->where($db->quoteName('session_id') . ' = ' . $db->quote($id));			// Try to update the session data in the database table.			$db->setQuery($query);			if (!$db->execute())			{				return false;			}			/* Since $db->execute did not throw an exception, so the query was successful.			Either the data changed, or the data was identical.			In either case we are done.			*/			return true;		}		catch (Exception $e)		{			return false;		}	}	/**	 * Destroy the data for a particular session identifier in the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		try		{			$query = $db->getQuery(true)				->delete($db->quoteName('#__session'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($id));			// Remove a session from the database.			$db->setQuery($query);			return (boolean) $db->execute();		}		catch (Exception $e)		{			return false;		}	}	/**	 * Garbage collect stale sessions from the SessionHandler backend.	 *	 * @param   integer  $lifetime  The maximum age of a session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc($lifetime = 1440)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		// Determine the timestamp threshold with which to purge old sessions.		$past = time() - $lifetime;		try		{			$query = $db->getQuery(true)				->delete($db->quoteName('#__session'))			->where($db->quoteName('time') . ' < ' . $db->quote((int) $past));			// Remove expired sessions from the database.			$db->setQuery($query);			return (boolean) $db->execute();		}		catch (Exception $e)		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink Component HTML Helper * * @static * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class JHtmlIcon{	public static function create($weblink, $params)	{		$uri = JURI::getInstance();		$url = JRoute::_(WeblinksHelperRoute::getFormRoute(0, base64_encode($uri)));		$text = JHtml::_('image', 'system/new.png', JText::_('JNEW'), null, true);		$button = JHtml::_('link', $url, $text);		$output = '<span class="hasTip" title="'.JText::_('COM_WEBLINKS_FORM_CREATE_WEBLINK').'">'.$button.'</span>';		return $output;	}	public static function edit($weblink, $params, $attribs = array())	{		$uri = JURI::getInstance();		if ($params && $params->get('popup'))		{			return;		}		if ($weblink->state < 0)		{			return;		}		JHtml::_('behavior.tooltip');		$url	= WeblinksHelperRoute::getFormRoute($weblink->id, base64_encode($uri));		$icon	= $weblink->state ? 'edit.png' : 'edit_unpublished.png';		$text	= JHtml::_('image', 'system/'.$icon, JText::_('JGLOBAL_EDIT'), null, true);		if ($weblink->state == 0)		{			$overlib = JText::_('JUNPUBLISHED');		}		else		{			$overlib = JText::_('JPUBLISHED');		}		$date = JHtml::_('date', $weblink->created);		$author = $weblink->created_by_alias ? $weblink->created_by_alias : $weblink->author;		$overlib .= '&lt;br /&gt;';		$overlib .= $date;		$overlib .= '&lt;br /&gt;';		$overlib .= htmlspecialchars($author, ENT_COMPAT, 'UTF-8');		$button = JHtml::_('link', JRoute::_($url), $text);		$output = '<span class="hasTip" title="'.JText::_('COM_WEBLINKS_EDIT').' :: '.$overlib.'">'.$button.'</span>';		return $output;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_users')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}JLoader::register('UsersHelper', __DIR__ . '/helpers/users.php');$controller	= JControllerLegacy::getInstance('Users');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugins component helper. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsHelper{	public static $extension = 'com_plugins';	/**	 * Configure the Linkbar.	 *	 * @param   string    The name of the active view.	 */	public static function addSubmenu($vName)	{		// No submenu for this component.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user = JFactory::getUser();		$result = new JObject;		$assetName = 'com_plugins';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string    The HTML code for the select tag	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options = array();		$options[] = JHtml::_('select.option', '1', 'JENABLED');		$options[] = JHtml::_('select.option', '0', 'JDISABLED');		return $options;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string    The HTML code for the select tag	 */	public static function folderOptions()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT(folder) AS value, folder AS text')			->from('#__extensions')			->where($db->quoteName('type') . ' = ' . $db->quote('plugin'))			->order('folder');		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $options;	}	public function parseXMLTemplateFile($templateBaseDir, $templateDir)	{		$data = new JObject;		// Check of the xml file exists		$filePath = JPath::clean($templateBaseDir . '/templates/' . $templateDir . '/templateDetails.xml');		if (is_file($filePath))		{			$xml = JInstaller::parseXMLInstallFile($filePath);			if ($xml['type'] != 'template')			{				return false;			}			foreach ($xml as $key => $value)			{				$data->set($key, $value);			}		}		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Text Filters form field. * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.6 */class JFormFieldFilters extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	public $type = 'Filters';	/**	 * Method to get the field input markup.	 *	 * TODO: Add access check.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		// Get the available user groups.		$groups = $this->getUserGroups();		// Build the form control.		$html = array();		// Open the table.		$html[] = '<table id="filter-config" class="table table-striped">';		// The table heading.		$html[] = '	<thead>';		$html[] = '	<tr>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action">'.JText::_('JGLOBAL_FILTER_GROUPS_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_TYPE_LABEL').'">'.JText::_('JGLOBAL_FILTER_TYPE_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'">'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'">'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '	</tr>';		$html[] = '	</thead>';		// The table body.		$html[] = '	<tbody>';		foreach ($groups as $group)		{			if (!isset($this->value[$group->value]))			{				$this->value[$group->value] = array('filter_type' => 'BL', 'filter_tags' => '', 'filter_attributes' => '');			}			$group_filter = $this->value[$group->value];			$html[] = '	<tr>';			$html[] = '		<th class="acl-groups left">';			$html[] = '			'.str_repeat('<span class="gi">|&mdash;</span>', $group->level).$group->text;			$html[] = '		</th>';			$html[] = '		<td>';			$html[] = '				<select name="'.$this->name.'['.$group->value.'][filter_type]" id="'.$this->id.$group->value.'_filter_type">';			$html[] = '					<option value="BL"'.($group_filter['filter_type'] == 'BL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_DEFAULT_BLACK_LIST').'</option>';			$html[] = '					<option value="CBL"'.($group_filter['filter_type'] == 'CBL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_CUSTOM_BLACK_LIST').'</option>';			$html[] = '					<option value="WL"'.($group_filter['filter_type'] == 'WL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_WHITE_LIST').'</option>';			$html[] = '					<option value="NH"'.($group_filter['filter_type'] == 'NH' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_NO_HTML').'</option>';			$html[] = '					<option value="NONE"'.($group_filter['filter_type'] == 'NONE' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_NO_FILTER').'</option>';			$html[] = '				</select>';			$html[] = '		</td>';			$html[] = '		<td>';			$html[] = '				<input name="'.$this->name.'['.$group->value.'][filter_tags]" id="'.$this->id.$group->value.'_filter_tags" title="'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'" value="'.$group_filter['filter_tags'].'"/>';			$html[] = '		</td>';			$html[] = '		<td>';			$html[] = '				<input name="'.$this->name.'['.$group->value.'][filter_attributes]" id="'.$this->id.$group->value.'_filter_attributes" title="'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'" value="'.$group_filter['filter_attributes'].'"/>';			$html[] = '		</td>';			$html[] = '	</tr>';		}		$html[] = '	</tbody>';		// Close the table.		$html[] = '</table>';		// Add notes		$html[] = '<div class="alert">';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_TYPE_DESC') . '</p>';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_TAGS_DESC') . '</p>';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_ATTRIBUTES_DESC') . '</p>';		$html[] = '</div>';		return implode("\n", $html);	}	/**	 * A helper to get the list of user groups.	 *	 * @return  array	 * @since   1.6	 */	protected function getUserGroups()	{		// Get a database object.		$db = JFactory::getDbo();		// Get the user groups from the database.		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from('#__usergroups AS a')			->join('LEFT', '#__usergroups AS b on a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft')			->order('a.lft ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('bootstrap.tooltip');JHtml::_('formbehavior.chosen');$document = JFactory::getDocument();$mainDirection = $document->direction == 'rtl' ? 'right' : 'left';$altDirection  = $document->direction == 'rtl' ? 'left' : 'right';?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="form-login" class="form-inline">	<fieldset class="loginform">		<div class="control-group">			<div class="controls">				<div class="input-prepend input-append">					<span class="add-on">						<i class="icon-user hasTooltip" data-placement="<?php echo $mainDirection; ?>" title="<?php echo JText::_('JGLOBAL_USERNAME'); ?>"></i>						<label for="mod-login-username" class="element-invisible">							<?php echo JText::_('JGLOBAL_USERNAME'); ?>						</label>					</span>					<input name="username" tabindex="1" id="mod-login-username" type="text" class="input-medium" placeholder="<?php echo JText::_('JGLOBAL_USERNAME'); ?>" size="15"/>					<a href="<?php echo JUri::root(); ?>index.php?option=com_users&view=remind" class="btn width-auto hasTooltip" data-placement="<?php echo $altDirection; ?>" title="<?php echo JText::_('MOD_LOGIN_REMIND'); ?>">						<i class="icon-help" title="<?php echo JText::_('MOD_LOGIN_REMIND'); ?>"></i>					</a>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="input-prepend input-append">					<span class="add-on">						<i class="icon-lock hasTooltip" data-placement="<?php echo $mainDirection; ?>" title="<?php echo JText::_('JGLOBAL_PASSWORD'); ?>"></i>						<label for="mod-login-password" class="element-invisible">							<?php echo JText::_('JGLOBAL_PASSWORD'); ?>						</label>					</span>					<input name="passwd" tabindex="2" id="mod-login-password" type="password" class="input-medium" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD'); ?>" size="15"/>					<a href="<?php echo JUri::root(); ?>index.php?option=com_users&view=reset" class="btn width-auto hasTooltip" data-placement="<?php echo $altDirection; ?>" title="<?php echo JText::_('MOD_LOGIN_RESET'); ?>">						<i class="icon-help" title="<?php echo JText::_('MOD_LOGIN_RESET'); ?>"></i>					</a>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="input-prepend">					<span class="add-on">						<i class="icon-comment hasTooltip" data-placement="<?php echo $mainDirection; ?>" class="hasTooltip" title="<?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?>"></i>						<label for="lang" class="element-invisible">							<?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?>						</label>					</span>					<?php echo $langs; ?>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="btn-group pull-left">					<button tabindex="3" class="btn btn-primary btn-large">						<i class="icon-lock icon-white"></i> <?php echo JText::_('MOD_LOGIN_LOGIN'); ?>					</button>				</div>			</div>		</div>		<input type="hidden" name="option" value="com_login"/>		<input type="hidden" name="task" value="login"/>		<input type="hidden" name="return" value="<?php echo $return; ?>"/>		<?php echo JHtml::_('form.token'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelUser extends JModelAdmin{	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   string  $type    The table type to instantiate	 * @param   string  $prefix  A prefix for the table class name. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A database object	 *	 * @since   1.6	*/	public function getTable($type = 'User', $prefix = 'JTable', $config = array())	{		$table = JTable::getInstance($type, $prefix, $config);		return $table;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   1.6	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		$result->tags = new JHelperTags;		$result->tags->getTagIds($result->id, 'com_users.user');		// Get the dispatcher and load the users plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		// Trigger the data preparation event.		$results = $dispatcher->trigger('onContentPrepareData', array('com_users.user', $result));		return $result;	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      An optional array of data for the form to interogate.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		$plugin = JPluginHelper::getPlugin('user', 'joomla');		$pluginParams = new JRegistry($plugin->params);		// Get the form.		$form = $this->loadForm('com_users.user', 'user', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Passwords fields are required when mail to user is set to No in joomla user plugin		$userId = $form->getValue('id');		if ($userId === 0 && $pluginParams->get('mail_to_user') === "0")		{			$form->setFieldAttribute('password', 'required', 'true');			$form->setFieldAttribute('password2', 'required', 'true');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.edit.user.data', array());		if (empty($data))		{			$data = $this->getItem();		}		JPluginHelper::importPlugin('user');		$this->preprocessData('com_users.profile', $data);		return $data;	}	/**	 * Override JModelAdmin::preprocessForm to ensure the correct plugin group is loaded.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function save($data)	{		$pk			= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('user.id');		$user		= JUser::getInstance($pk);		$my = JFactory::getUser();		if ($data['block'] && $pk == $my->id && !$my->block)		{			$this->setError(JText::_('COM_USERS_USERS_ERROR_CANNOT_BLOCK_SELF'));			return false;		}		// Make sure that we are not removing ourself from Super Admin group		$iAmSuperAdmin = $my->authorise('core.admin');		if ($iAmSuperAdmin && $my->get('id') == $pk)		{			// Check that at least one of our new groups is Super Admin			$stillSuperAdmin = false;			$myNewGroups = $data['groups'];			foreach ($myNewGroups as $group)			{				$stillSuperAdmin = ($stillSuperAdmin) ? ($stillSuperAdmin) : JAccess::checkGroup($group, 'core.admin');			}			if (!$stillSuperAdmin)			{				$this->setError(JText::_('COM_USERS_USERS_ERROR_CANNOT_DEMOTE_SELF'));				return false;			}		}		// Bind the data.		if (!$user->bind($data))		{			$this->setError($user->getError());			return false;		}		// Store the data.		if (!$user->save())		{			$this->setError($user->getError());			return false;		}		$this->setState('user.id', $user->id);		return true;	}	/**	 * Method to delete rows.	 *	 * @param   array  &$pks  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.6	 */	public function delete(&$pks)	{		$user	= JFactory::getUser();		$table	= $this->getTable();		$pks	= (array) $pks;		// Check if I am a Super Admin		$iAmSuperAdmin	= $user->authorise('core.admin');		// Trigger the onUserBeforeSave event.		JPluginHelper::importPlugin('user');		$dispatcher = JEventDispatcher::getInstance();		if (in_array($user->id, $pks))		{			$this->setError(JText::_('COM_USERS_USERS_ERROR_CANNOT_DELETE_SELF'));			return false;		}		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				// Access checks.				$allow = $user->authorise('core.delete', 'com_users');				// Don't allow non-super-admin to delete a super admin				$allow = (!$iAmSuperAdmin && JAccess::check($pk, 'core.admin')) ? false : $allow;				if ($allow)				{					// Get users data for the users to delete.					$user_to_delete = JFactory::getUser($pk);					// Fire the onUserBeforeDelete event.					$dispatcher->trigger('onUserBeforeDelete', array($table->getProperties()));					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					else					{						// Trigger the onUserAfterDelete event.						$dispatcher->trigger('onUserAfterDelete', array($user_to_delete->getProperties(), true, $this->getError()));					}				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return true;	}	/**	 * Method to block user records.	 *	 * @param   array    &$pks   The ids of the items to publish.	 * @param   integer  $value  The value of the published state	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function block(&$pks, $value = 1)	{		$app		= JFactory::getApplication();		$dispatcher	= JEventDispatcher::getInstance();		$user		= JFactory::getUser();		// Check if I am a Super Admin		$iAmSuperAdmin	= $user->authorise('core.admin');		$table		= $this->getTable();		$pks		= (array) $pks;		JPluginHelper::importPlugin('user');		// Access checks.		foreach ($pks as $i => $pk)		{			if ($value == 1 && $pk == $user->get('id'))			{				// Cannot block yourself.				unset($pks[$i]);				JError::raiseWarning(403, JText::_('COM_USERS_USERS_ERROR_CANNOT_BLOCK_SELF'));			}			elseif ($table->load($pk))			{				$old	= $table->getProperties();				$allow	= $user->authorise('core.edit.state', 'com_users');				// Don't allow non-super-admin to delete a super admin				$allow = (!$iAmSuperAdmin && JAccess::check($pk, 'core.admin')) ? false : $allow;				// Prepare the logout options.				$options = array(					'clientid' => 0				);				if ($allow)				{					// Skip changing of same state					if ($table->block == $value)					{						unset($pks[$i]);						continue;					}					$table->block = (int) $value;				// If unblocking, also change password reset count to zero to unblock reset					if ($table->block === 0)					{						$table->resetCount = 0;					}					// Allow an exception to be thrown.					try					{						if (!$table->check())						{							$this->setError($table->getError());							return false;						}						// Trigger the onUserBeforeSave event.						$result = $dispatcher->trigger('onUserBeforeSave', array($old, false, $table->getProperties()));						if (in_array(false, $result, true))						{							// Plugin will have to raise it's own error or throw an exception.							return false;						}						// Store the table.						if (!$table->store())						{							$this->setError($table->getError());							return false;						}						// Trigger the onAftereStoreUser event						$dispatcher->trigger('onUserAfterSave', array($table->getProperties(), false, true, null));					}					catch (Exception $e)					{						$this->setError($e->getMessage());						return false;					}					// Log the user out.					if ($value)					{						$app->logout($table->id, $options);					}				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}			}		}		return true;	}	/**	 * Method to activate user records.	 *	 * @param   array  &$pks  The ids of the items to activate.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function activate(&$pks)	{		$dispatcher	= JEventDispatcher::getInstance();		$user		= JFactory::getUser();		// Check if I am a Super Admin		$iAmSuperAdmin	= $user->authorise('core.admin');		$table		= $this->getTable();		$pks		= (array) $pks;		JPluginHelper::importPlugin('user');		// Access checks.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				$old	= $table->getProperties();				$allow	= $user->authorise('core.edit.state', 'com_users');				// Don't allow non-super-admin to delete a super admin				$allow = (!$iAmSuperAdmin && JAccess::check($pk, 'core.admin')) ? false : $allow;				if (empty($table->activation))				{					// Ignore activated accounts.					unset($pks[$i]);				}				elseif ($allow)				{					$table->block		= 0;					$table->activation	= '';					// Allow an exception to be thrown.					try					{						if (!$table->check())						{							$this->setError($table->getError());							return false;						}						// Trigger the onUserBeforeSave event.						$result = $dispatcher->trigger('onUserBeforeSave', array($old, false, $table->getProperties()));						if (in_array(false, $result, true))						{							// Plugin will have to raise it's own error or throw an exception.							return false;						}						// Store the table.						if (!$table->store())						{							$this->setError($table->getError());							return false;						}						// Fire the onAftereStoreUser event						$dispatcher->trigger('onUserAfterSave', array($table->getProperties(), false, true, null));					}					catch (Exception $e)					{						$this->setError($e->getMessage());						return false;					}				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}			}		}		return true;	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   2.5	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('COM_USERS_USERS_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['group_id']))		{			$cmd = JArrayHelper::getValue($commands, 'group_action', 'add');			if (!$this->batchUser((int) $commands['group_id'], $pks, $cmd))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Perform batch operations	 *	 * @param   integer  $group_id  The group ID which assignments are being edited	 * @param   array    $user_ids  An array of user IDs on which to operate	 * @param   string   $action    The action to perform	 *	 * @return  boolean  True on success, false on failure	 *	 * @since   1.6	 */	public function batchUser($group_id, $user_ids, $action)	{		// Get the DB object		$db = $this->getDbo();		JArrayHelper::toInteger($user_ids);		// Non-super admin cannot work with super-admin group		if ((!JFactory::getUser()->get('isRoot') && JAccess::checkGroup($group_id, 'core.admin')) || $group_id < 1)		{			$this->setError(JText::_('COM_USERS_ERROR_INVALID_GROUP'));			return false;		}		switch ($action)		{			// Sets users to a selected group			case 'set':				$doDelete	= 'all';				$doAssign	= true;				break;			// Remove users from a selected group			case 'del':				$doDelete	= 'group';				break;			// Add users to a selected group			case 'add':			default:				$doAssign	= true;				break;		}		// Remove the users from the group if requested.		if (isset($doDelete))		{			$query = $db->getQuery(true);			// Remove users from the group			$query->delete($db->quoteName('#__user_usergroup_map'))				->where($db->quoteName('user_id') . ' IN (' . implode(',', $user_ids) . ')');			// Only remove users from selected group			if ($doDelete == 'group')			{				$query->where($db->quoteName('group_id') . ' = ' . (int) $group_id);			}			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		// Assign the users to the group if requested.		if (isset($doAssign))		{			$query = $db->getQuery(true);			// First, we need to check if the user is already assigned to a group			$query->select($db->quoteName('user_id'))				->from($db->quoteName('#__user_usergroup_map'))				->where($db->quoteName('group_id') . ' = ' . (int) $group_id);			$db->setQuery($query);			$users = $db->loadColumn();			// Build the values clause for the assignment query.			$query->clear();			$groups = false;			foreach ($user_ids as $id)			{				if (!in_array($id, $users))				{					$query->values($id . ',' . $group_id);					$groups = true;				}			}			// If we have no users to process, throw an error to notify the user			if (!$groups)			{				$this->setError(JText::_('COM_USERS_ERROR_NO_ADDITIONS'));				return false;			}			$query->insert($db->quoteName('#__user_usergroup_map'))				->columns(array($db->quoteName('user_id'), $db->quoteName('group_id')));			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}	/**	 * Gets the available groups.	 *	 * @return  array  An array of groups	 *	 * @since   1.6	 */	public function getGroups()	{		$user = JFactory::getUser();		if ($user->authorise('core.edit', 'com_users') && $user->authorise('core.manage', 'com_users'))		{			$model = JModelLegacy::getInstance('Groups', 'UsersModel', array('ignore_request' => true));			return $model->getItems();		}		else		{			return null;		}	}	/**	 * Gets the groups this object is assigned to	 *	 * @param   integer  $userId  The user ID to retrieve the groups for	 *	 * @return  array  An array of assigned groups	 *	 * @since   1.6	 */	public function getAssignedGroups($userId = null)	{		$userId = (!empty($userId)) ? $userId : (int) $this->getState('user.id');		if (empty($userId))		{			$result = array();			$config = JComponentHelper::getParams('com_users');			if ($groupId = $config->get('new_usertype'))			{				$result[] = $groupId;			}		}		else		{			$result = JUserHelper::getUserGroups($userId);		}		return $result;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.languagefilter * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('MenusHelper', JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Joomla! Language Filter Plugin * * @package     Joomla.Plugin * @subpackage  System.languagefilter * @since       1.6 */class PlgSystemLanguageFilter extends JPlugin{	protected static $mode_sef;	protected static $tag;	protected static $sefs;	protected static $lang_codes;	protected static $default_lang;	protected static $default_sef;	protected static $cookie;	private static $_user_lang_code;	public function __construct(&$subject, $config)	{		parent::__construct($subject, $config);		// Ensure that constructor is called one time		self::$cookie = SID == '';		if (!self::$default_lang)		{			$app = JFactory::getApplication();			$router = $app->getRouter();			if ($app->isSite())			{				// setup language data				self::$mode_sef 	= ($router->getMode() == JROUTER_MODE_SEF) ? true : false;				self::$sefs 		= JLanguageHelper::getLanguages('sef');				self::$lang_codes 	= JLanguageHelper::getLanguages('lang_code');				self::$default_lang = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');				self::$default_sef 	= self::$lang_codes[self::$default_lang]->sef;				$user = JFactory::getUser();				$levels = $user->getAuthorisedViewLevels();				foreach (self::$sefs as $sef => &$language)				{					if (isset($language->access) && $language->access && !in_array($language->access, $levels))					{						unset(self::$sefs[$sef]);					}				}				$app->setLanguageFilter(true);				jimport('joomla.environment.uri');				$uri = JURI::getInstance();				if (self::$mode_sef)				{					// Get the route path from the request.					$path = JString::substr($uri->toString(), JString::strlen($uri->base()));					// Apache mod_rewrite is Off					$path = JFactory::getConfig()->get('sef_rewrite') ? $path : JString::substr($path, 10);					// Trim any spaces or slashes from the ends of the path and explode into segments.					$path  = JString::trim($path, '/ ');					$parts = explode('/', $path);					// The language segment is always at the beginning of the route path if it exists.					$sef = $uri->getVar('lang');					if (!empty($parts) && empty($sef))					{						$sef = reset($parts);					}				}				else				{					$sef = $uri->getVar('lang');				}				if (isset(self::$sefs[$sef]))				{					$lang_code = self::$sefs[$sef]->lang_code;					// Create a cookie					$conf = JFactory::getConfig();					$cookie_domain 	= $conf->get('config.cookie_domain', '');					$cookie_path 	= $conf->get('config.cookie_path', '/');					setcookie(JApplication::getHash('language'), $lang_code, $this->getLangCookieTime(), $cookie_path, $cookie_domain);					$app->input->cookie->set(JApplication::getHash('language'), $lang_code);					// set the request var					$app->input->set('language', $lang_code);				}			}			parent::__construct($subject, $config);			// 	Detect browser feature			if ($app->isSite())			{				$app->setDetectBrowser($this->params->get('detect_browser', '1') == '1');			}		}	}	public function onAfterInitialise()	{		$app = JFactory::getApplication();		$app->item_associations = $this->params->get('item_associations', 0);		if ($app->isSite())		{			self::$tag = JFactory::getLanguage()->getTag();			$router = $app->getRouter();			// attach build rules for language SEF			$router->attachBuildRule(array($this, 'buildRule'));			// attach parse rules for language SEF			$router->attachParseRule(array($this, 'parseRule'));			// Adding custom site name			$languages = JLanguageHelper::getLanguages('lang_code');			if (isset($languages[self::$tag]) && $languages[self::$tag]->sitename)			{				JFactory::getConfig()->set('sitename', $languages[self::$tag]->sitename);			}		}	}	public function buildRule(&$router, &$uri)	{		$sef = $uri->getVar('lang');		if (empty($sef))		{			$sef = self::$lang_codes[self::$tag]->sef;		}		elseif (!isset(self::$sefs[$sef]))		{			$sef = self::$default_sef;		}		$Itemid = $uri->getVar('Itemid');		if (!is_null($Itemid))		{			if ($item = JFactory::getApplication()->getMenu()->getItem($Itemid))			{				if ($item->home && $uri->getVar('option') != 'com_search')				{					$link = $item->link;					$parts = JString::parse_url($link);					if (isset ($parts['query']) && strpos($parts['query'], '&amp;'))					{						$parts['query'] = str_replace('&amp;', '&', $parts['query']);					}					parse_str($parts['query'], $vars);					// test if the url contains same vars as in menu link					$test = true;					foreach ($uri->getQuery(true) as $key => $value)					{						if (!in_array($key, array('format', 'Itemid', 'lang')) && !(isset($vars[$key]) && $vars[$key] == $value))						{							$test = false;							break;						}					}					if ($test)					{						foreach ($vars as $key => $value)						{							$uri->delVar($key);						}						$uri->delVar('Itemid');					}				}			}			else			{				$uri->delVar('Itemid');			}		}		if (self::$mode_sef)		{			$uri->delVar('lang');			if (				$this->params->get('remove_default_prefix', 0) == 0				|| $sef != self::$default_sef				|| $sef != self::$lang_codes[self::$tag]->sef				|| $this->params->get('detect_browser', 1) && JLanguageHelper::detectLanguage() != self::$tag && !self::$cookie			)			{				$uri->setPath($uri->getPath().'/'.$sef.'/');			}			else			{				$uri->setPath($uri->getPath());			}		}		else		{			$uri->setVar('lang', $sef);		}	}	public function parseRule(&$router, &$uri)	{		$app = JFactory::getApplication();		$array = array();		$lang_code = $app->input->cookie->getString(JApplication::getHash('language'));		// No cookie - let's try to detect browser language or use site default		if (!$lang_code)		{			if ($this->params->get('detect_browser', 1))			{				$lang_code = JLanguageHelper::detectLanguage();			}			else			{				$lang_code = self::$default_lang;			}		}		if (self::$mode_sef)		{			$path = $uri->getPath();			$parts = explode('/', $path);			$sef = $parts[0];			// Redirect only if not in post			if (!empty($lang_code) && ($app->input->getMethod() != "POST" || count($app->input->post) == 0))			{				if ($this->params->get('remove_default_prefix', 0) == 0)				{					// redirect if sef does not exists					if (!isset(self::$sefs[$sef]))					{						// Use the current language sef or the default one						$sef = isset(self::$lang_codes[$lang_code]) ? self::$lang_codes[$lang_code]->sef : self::$default_sef;						$uri->setPath($sef . '/' . $path);						if ($app->getCfg('sef_rewrite'))						{							$app->redirect($uri->base().$uri->toString(array('path', 'query', 'fragment')));						}						else						{							$path = $uri->toString(array('path', 'query', 'fragment'));							$app->redirect($uri->base().'index.php'.($path ? ('/' . $path) : ''));						}					}				}				else				{					// redirect if sef does not exists and language is not the default one					if (!isset(self::$sefs[$sef]) && $lang_code != self::$default_lang)					{						$sef = isset(self::$lang_codes[$lang_code]) ? self::$lang_codes[$lang_code]->sef : self::$default_sef;						$uri->setPath($sef . '/' . $path);						if ($app->getCfg('sef_rewrite'))						{							$app->redirect($uri->base().$uri->toString(array('path', 'query', 'fragment')));						}						else						{							$path = $uri->toString(array('path', 'query', 'fragment'));							$app->redirect($uri->base().'index.php'.($path ? ('/' . $path) : ''));						}					}					// redirect if sef is the default one					elseif (isset(self::$sefs[$sef]) &&						self::$default_lang == self::$sefs[$sef]->lang_code &&						(!$this->params->get('detect_browser', 1) || JLanguageHelper::detectLanguage() == self::$tag || self::$cookie)					)					{						array_shift($parts);						$uri->setPath(implode('/', $parts));						if ($app->getCfg('sef_rewrite'))						{							$app->redirect($uri->base().$uri->toString(array('path', 'query', 'fragment')));						}						else						{							$path = $uri->toString(array('path', 'query', 'fragment'));							$app->redirect($uri->base().'index.php'.($path ? ('/' . $path) : ''));						}					}				}			}			$lang_code = isset(self::$sefs[$sef]) ? self::$sefs[$sef]->lang_code : '';			if ($lang_code && JLanguage::exists($lang_code))			{				array_shift($parts);				$uri->setPath(implode('/', $parts));			}		}		else		{			$sef = $uri->getVar('lang');			if (!isset(self::$sefs[$sef]))			{				$sef = isset(self::$lang_codes[$lang_code]) ? self::$lang_codes[$lang_code]->sef : self::$default_sef;				$uri->setVar('lang', $sef);				if ($app->input->getMethod() != "POST" || count($app->input->post) == 0)				{					$app->redirect(JURI::base(true).'/index.php?'.$uri->getQuery());				}			}		}		$array = array('lang' => $sef);		return $array;	}	/**	 * before store user method	 *	 * Method is called before user data is stored in the database	 *	 * @param   array  $user	Holds the old user data.	 * @param   boolean		$isnew	True if a new user is stored.	 * @param   array  $new	Holds the new user data.	 *	 * @return  void	 * @since   1.6	 */	public function onUserBeforeSave($user, $isnew, $new)	{		if ($this->params->get('automatic_change', '1') == '1' && key_exists('params', $user))		{			$registry = new JRegistry;			$registry->loadString($user['params']);			self::$_user_lang_code = $registry->get('language');			if (empty(self::$_user_lang_code))			{				self::$_user_lang_code = self::$default_lang;			}		}	}	/**	 * after store user method	 *	 * Method is called after user data is stored in the database	 *	 * @param   array  $user		Holds the new user data.	 * @param   boolean		$isnew		True if a new user is stored.	 * @param   boolean		$success	True if user was succesfully stored in the database.	 * @param   string  $msg		Message.	 *	 * @return  void	 * @since   1.6	 */	public function onUserAfterSave($user, $isnew, $success, $msg)	{		if ($this->params->get('automatic_change', '1') == '1' && key_exists('params', $user) && $success)		{			$registry = new JRegistry;			$registry->loadString($user['params']);			$lang_code = $registry->get('language');			if (empty($lang_code))			{				$lang_code = self::$default_lang;			}			$app = JFactory::getApplication();			if ($lang_code == self::$_user_lang_code || !isset(self::$lang_codes[$lang_code]))			{				if ($app->isSite())				{					$app->setUserState('com_users.edit.profile.redirect', null);				}			}			else			{				if ($app->isSite())				{					$app->setUserState('com_users.edit.profile.redirect', 'index.php?Itemid='.$app->getMenu()->getDefault($lang_code)->id.'&lang='.$lang_codes[$lang_code]->sef);					self::$tag = $lang_code;					// Create a cookie					$conf = JFactory::getConfig();					$cookie_domain 	= $conf->get('config.cookie_domain', '');					$cookie_path 	= $conf->get('config.cookie_path', '/');					setcookie(JApplication::getHash('language'), $lang_code, $this->getLangCookieTime(), $cookie_path, $cookie_domain);				}			}		}	}	/**	 * This method should handle any login logic and report back to the subject	 *	 * @param   array  $user		Holds the user data	 * @param   array  $options	Array holding options (remember, autoregister, group)	 *	 * @return  boolean  True on success	 * @since   1.5	 */	public function onUserLogin($user, $options = array())	{		$app  = JFactory::getApplication();		$menu = $app->getMenu();		if ($app->isSite() && $this->params->get('automatic_change', 1))		{			// Load associations			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$active = $menu->getActive();				if ($active)				{					$associations = MenusHelper::getAssociations($active->id);				}			}			$lang_code = $user['language'];			if (empty($lang_code))			{				$lang_code = self::$default_lang;			}			if ($lang_code != self::$tag)			{				// Change language				self::$tag = $lang_code;				// Create a cookie				$conf = JFactory::getConfig();				$cookie_domain 	= $conf->get('config.cookie_domain', '');				$cookie_path 	= $conf->get('config.cookie_path', '/');				setcookie(JApplication::getHash('language'), $lang_code, $this->getLangCookieTime(), $cookie_path, $cookie_domain);				// Change the language code				JFactory::getLanguage()->setLanguage($lang_code);				// Change the redirect (language have changed)				if (isset($associations[$lang_code]) && $menu->getItem($associations[$lang_code]))				{					$itemid = $associations[$lang_code];					$app->setUserState('users.login.form.return', 'index.php?&Itemid='.$itemid);				}				else				{					$itemid = isset($homes[$lang_code]) ? $homes[$lang_code]->id : $homes['*']->id;					$app->setUserState('users.login.form.return', 'index.php?&Itemid='.$itemid);				}			}		}	}	/**	 * This method adds alternate meta tags for associated menu items	 *	 * @return  nothing	 * @since   1.7	 */	public function onAfterDispatch()	{		$app = JFactory::getApplication();		$doc = JFactory::getDocument();		$menu = $app->getMenu();		$server = JURI::getInstance()->toString(array('scheme', 'host', 'port'));		$option = $app->input->get('option');		$eName = JString::ucfirst(JString::str_ireplace('com_', '', $option));		if ($app->isSite() && $this->params->get('alternate_meta') && $doc->getType() == 'html')		{			// Get active menu item			$active = $menu->getActive();			// load menu associations			if ($active)			{				// Get menu item link				if ($app->getCfg('sef'))				{					$active_link = JRoute::_('index.php?Itemid='.$active->id, false);				}				else				{					$active_link = JRoute::_($active->link.'&Itemid='.$active->id, false);				}				if ($active_link == JUri::base(true).'/')				{					$active_link .= 'index.php';				}				// Get current link				$current_link = JURI::getInstance()->toString(array('path', 'query'));				if ($current_link == JUri::base(true).'/')				{					$current_link .= 'index.php';				}				// Check the exact menu item's URL				if ($active_link == $current_link)				{					$associations = MenusHelper::getAssociations($active->id);					unset($associations[$active->language]);				}			}			// load component associations			$cName = JString::ucfirst($eName.'HelperAssociation');			JLoader::register($cName, JPath::clean(JPATH_COMPONENT_SITE . '/helpers/association.php'));			if (class_exists($cName) && is_callable(array($cName, 'getAssociations')))			{				$cassociations = call_user_func(array($cName, 'getAssociations'));				$lang_code = $app->input->cookie->getString(JApplication::getHash('language'));				// No cookie - let's try to detect browser language or use site default				if (!$lang_code)				{					if ($this->params->get('detect_browser', 1)){						$lang_code = JLanguageHelper::detectLanguage();					} else {						$lang_code = self::$default_lang;					}				}				unset($cassociations[$lang_code]);			}			// handle the default associations			if ((!empty($associations) || !empty($cassociations)) && $this->params->get('item_associations'))			{				foreach (JLanguageHelper::getLanguages() as $language)				{					if (!JLanguage::exists($language->lang_code))					{						continue;					}					if (isset($cassociations[$language->lang_code]))					{						$link = JRoute::_($cassociations[$language->lang_code].'&lang='.$language->sef);						$doc->addHeadLink($server . $link, 'alternate', 'rel', array('hreflang' => $language->lang_code));					}					elseif (isset($associations[$language->lang_code]))					{						$item = $menu->getItem($associations[$language->lang_code]);						if ($item)						{							if ($app->getCfg('sef'))							{								$link = JRoute::_('index.php?Itemid='.$item->id.'&lang='.$language->sef);							}							else							{								$link = JRoute::_($item->link.'&Itemid='.$item->id.'&lang='.$language->sef);							}							$doc->addHeadLink($server . $link, 'alternate', 'rel', array('hreflang' => $language->lang_code));						}					}				}			}			// link to the home page of each language			elseif ($active && $active->home)			{				foreach (JLanguageHelper::getLanguages() as $language)				{					if (!JLanguage::exists($language->lang_code))					{						continue;					}					$item = $menu->getDefault($language->lang_code);					if ($item && $item->language != $active->language && $item->language != '*')					{						if ($app->getCfg('sef'))						{							$link = JRoute::_('index.php?Itemid='.$item->id.'&lang='.$language->sef);						}						else						{							$link = JRoute::_($item->link.'&Itemid='.$item->id.'&lang='.$language->sef);						}						$doc->addHeadLink($server . $link, 'alternate', 'rel', array('hreflang' => $language->lang_code));					}				}			}		}	}	/**	 * Getting the Language Cookie settings	 *	 * @return  string  The cookie time.	 *	 * @since   3.0.4	 */	private function getLangCookieTime()	{		if ($this->params->get('lang_cookie', 1) == 1)		{			$lang_cookie = time() + 365 * 86400;		}		else		{			$lang_cookie = 0;		}		return $lang_cookie;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Error * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// Error Definition: Illegal Optionsconst JERROR_ILLEGAL_OPTIONS = 1;// Error Definition: Callback does not existconst JERROR_CALLBACK_NOT_CALLABLE = 2;// Error Definition: Illegal Handlerconst JERROR_ILLEGAL_MODE = 3;/** * Error Handling Class * * This class is inspired in design and concept by patErrorManager <http://www.php-tools.net> * * patErrorManager contributors include: * - gERD Schaufelberger	<gerd@php-tools.net> * - Sebastian Mordziol	<argh@php-tools.net> * - Stephan Schmidt		<scst@php-tools.net> * * @package     Joomla.Legacy * @subpackage  Error * @since       11.1 * @deprecated  12.1   Use PHP Exception */abstract class JError{	/**	 * Legacy error handling marker	 *	 * @var    boolean  True to enable legacy error handling using JError, false to use exception handling.  This flag	 *                  is present to allow an easy transition into exception handling for code written against the	 *                  existing JError API in Joomla.	 * @since  11.1	 */	public static $legacy = false;	/**	 * Array of message levels	 *	 * @var    array	 * @since  11.1	 */	protected static $levels = array(E_NOTICE => 'Notice', E_WARNING => 'Warning', E_ERROR => 'Error');	protected static $handlers = array(		E_NOTICE => array('mode' => 'ignore'),		E_WARNING => array('mode' => 'ignore'),		E_ERROR => array('mode' => 'ignore')	);	protected static $stack = array();	/**	 * Method to determine if a value is an exception object.	 *	 * @param   mixed  $object  Object to check.	 *	 * @return  boolean  True if argument is an exception, false otherwise.	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function isError($object)	{		JLog::add('JError::isError() is deprecated.', JLog::WARNING, 'deprecated');		return $object instanceof Exception;	}	/**	 * Method for retrieving the last exception object in the error stack	 *	 * @param   boolean  $unset  True to remove the error from the stack.	 *	 * @return  mixed  Last exception object in the error stack or boolean false if none exist	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function getError($unset = false)	{		JLog::add('JError::getError() is deprecated.', JLog::WARNING, 'deprecated');		if (!isset(self::$stack[0]))		{			return false;		}		if ($unset)		{			$error = array_shift(self::$stack);		}		else		{			$error = &self::$stack[0];		}		return $error;	}	/**	 * Method for retrieving the exception stack	 *	 * @return  array  Chronological array of errors that have been stored during script execution	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function getErrors()	{		JLog::add('JError::getErrors() is deprecated.', JLog::WARNING, 'deprecated');		return self::$stack;	}	/**	 * Method to add non-JError thrown JExceptions to the JError stack for debugging purposes	 *	 * @param   JException  &$e  Add an exception to the stack.	 *	 * @return  void	 *	 * @since       11.1	 * @deprecated  12.1	 */	public static function addToStack(JException &$e)	{		JLog::add('JError::addToStack() is deprecated.', JLog::WARNING, 'deprecated');		self::$stack[] = &$e;	}	/**	 * Create a new JException object given the passed arguments	 *	 * @param   integer  $level      The error level - use any of PHP's own error levels for	 *                               this: E_ERROR, E_WARNING, E_NOTICE, E_USER_ERROR,	 *                               E_USER_WARNING, E_USER_NOTICE.	 * @param   string   $code       The application-internal error code for this error	 * @param   string   $msg        The error message, which may also be shown the user if need be.	 * @param   mixed    $info       Optional: Additional error information (usually only	 *                               developer-relevant information that the user should never see,	 *                               like a database DSN).	 * @param   boolean  $backtrace  Add a stack backtrace to the exception.	 *	 * @return  mixed    The JException object	 *	 * @since       11.1	 * @deprecated  12.1  Use PHP Exception	 * @see         JException	 */	public static function raise($level, $code, $msg, $info = null, $backtrace = false)	{		JLog::add('JError::raise() is deprecated.', JLog::WARNING, 'deprecated');		// Build error object		$exception = new JException($msg, $code, $level, $info, $backtrace);		return self::throwError($exception);	}	/**	 * Throw an error	 *	 * @param   object  &$exception  An exception to throw.	 *	 * @return  reference	 *	 * @deprecated  12.1  Use PHP Exception	 * @see     JException	 * @since   11.1	 */	public static function throwError(&$exception)	{		JLog::add('JError::throwError() is deprecated.', JLog::WARNING, 'deprecated');		static $thrown = false;		// If thrown is hit again, we've come back to JError in the middle of throwing another JError, so die!		if ($thrown)		{			self::handleEcho($exception, array());			// Inifite loop.			jexit();		}		$thrown = true;		$level = $exception->get('level');		// See what to do with this kind of error		$handler = self::getErrorHandling($level);		$function = 'handle' . ucfirst($handler['mode']);		if (is_callable(array('JError', $function)))		{			$reference = call_user_func_array(array('JError', $function), array(&$exception, (isset($handler['options'])) ? $handler['options'] : array()));		}		else		{			// This is required to prevent a very unhelpful white-screen-of-death			jexit(				'JError::raise -> Static method JError::' . $function . ' does not exist. Contact a developer to debug' .				'<br /><strong>Error was</strong> <br />' . $exception->getMessage()			);		}		// We don't need to store the error, since JException already does that for us!		// Remove loop check		$thrown = false;		return $reference;	}	/**	 * Wrapper method for the raise() method with predefined error level of E_ERROR and backtrace set to true.	 *	 * @param   string  $code  The application-internal error code for this error	 * @param   string  $msg   The error message, which may also be shown the user if need be.	 * @param   mixed   $info  Optional: Additional error information (usually only	 *                         developer-relevant information that the user should	 *                         never see, like a database DSN).	 *	 * @return  object  $error  The configured JError object	 *	 * @deprecated   12.1       Use PHP Exception	 * @see        raise()	 * @since   11.1	 */	public static function raiseError($code, $msg, $info = null)	{		JLog::add('JError::raiseError() is deprecated.', JLog::WARNING, 'deprecated');		return self::raise(E_ERROR, $code, $msg, $info, true);	}	/**	 * Wrapper method for the {@link raise()} method with predefined error level of E_WARNING and	 * backtrace set to false.	 *	 * @param   string  $code  The application-internal error code for this error	 * @param   string  $msg   The error message, which may also be shown the user if need be.	 * @param   mixed   $info  Optional: Additional error information (usually only	 *                         developer-relevant information that	 *                         the user should never see, like a database DSN).	 *	 * @return  object  The configured JError object	 *	 * @deprecated  12.1  Use PHP Exception	 * @see        JError	 * @see        raise()	 * @since      11.1	 */	public static function raiseWarning($code, $msg, $info = null)	{		JLog::add('JError::raiseWarning() is deprecated.', JLog::WARNING, 'deprecated');		return self::raise(E_WARNING, $code, $msg, $info);	}	/**	 * Wrapper method for the {@link raise()} method with predefined error	 * level of E_NOTICE and backtrace set to false.	 *	 * @param   string  $code  The application-internal error code for this error	 * @param   string  $msg   The error message, which may also be shown the user if need be.	 * @param   mixed   $info  Optional: Additional error information (usually only	 *                         developer-relevant information that the user	 *                         should never see, like a database DSN).	 *	 * @return  object   The configured JError object	 *	 * @deprecated       12.1   Use PHP Exception	 * @see     raise()	 * @since   11.1	 */	public static function raiseNotice($code, $msg, $info = null)	{		JLog::add('JError::raiseNotice() is deprecated.', JLog::WARNING, 'deprecated');		return self::raise(E_NOTICE, $code, $msg, $info);	}	/**	 * Method to get the current error handler settings for a specified error level.	 *	 * @param   integer  $level  The error level to retrieve. This can be any of PHP's	 *                           own error levels, e.g. E_ALL, E_NOTICE...	 *	 * @return  array    All error handling details	 *	 * @deprecated   12.1  Use PHP Exception	 * @since   11.1	 */	public static function getErrorHandling($level)	{		JLog::add('JError::getErrorHandling() is deprecated.', JLog::WARNING, 'deprecated');		return self::$handlers[$level];	}	/**	 * Method to set the way the JError will handle different error levels. Use this if you want to override the default settings.	 *	 * Error handling modes:	 * - ignore	 * - echo	 * - verbose	 * - die	 * - message	 * - log	 * - callback	 *	 * You may also set the error handling for several modes at once using PHP's bit operations.	 * Examples:	 * - E_ALL = Set the handling for all levels	 * - E_ERROR | E_WARNING = Set the handling for errors and warnings	 * - E_ALL ^ E_ERROR = Set the handling for all levels except errors	 *	 * @param   integer  $level    The error level for which to set the error handling	 * @param   string   $mode     The mode to use for the error handling.	 * @param   mixed    $options  Optional: Any options needed for the given mode.	 *	 * @return  mixed  True on success or a JException object if failed.	 *	 * @deprecated  12.1  Use PHP Exception	 * @since   11.1	 */	public static function setErrorHandling($level, $mode, $options = null)	{		JLog::add('JError::setErrorHandling() is deprecated.', JLog::WARNING, 'deprecated');		$levels = self::$levels;		$function = 'handle' . ucfirst($mode);		if (!is_callable(array('JError', $function)))		{			return self::raiseError(E_ERROR, 'JError:' . JERROR_ILLEGAL_MODE, 'Error Handling mode is not known', 'Mode: ' . $mode . ' is not implemented.');		}		foreach ($levels as $eLevel => $eTitle)		{			if (($level & $eLevel) != $eLevel)			{				continue;			}			// Set callback options			if ($mode == 'callback')			{				if (!is_array($options))				{					return self::raiseError(E_ERROR, 'JError:' . JERROR_ILLEGAL_OPTIONS, 'Options for callback not valid');				}				if (!is_callable($options))				{					$tmp = array('GLOBAL');					if (is_array($options))					{						$tmp[0] = $options[0];						$tmp[1] = $options[1];					}					else					{						$tmp[1] = $options;					}					return self::raiseError(						E_ERROR,						'JError:' . JERROR_CALLBACK_NOT_CALLABLE,						'Function is not callable',						'Function:' . $tmp[1] . ' scope ' . $tmp[0] . '.'					);				}			}			// Save settings			self::$handlers[$eLevel] = array('mode' => $mode);			if ($options != null)			{				self::$handlers[$eLevel]['options'] = $options;			}		}		return true;	}	/**	 * Method that attaches the error handler to JError	 *	 * @return  void	 *	 * @deprecated  12.1	 * @see     set_error_handler	 * @since   11.1	 */	public static function attachHandler()	{		JLog::add('JError::getErrorHandling() is deprecated.', JLog::WARNING, 'deprecated');		set_error_handler(array('JError', 'customErrorHandler'));	}	/**	 * Method that detaches the error handler from JError	 *	 * @return  void	 *	 * @deprecated  12.1	 * @see     restore_error_handler	 * @since   11.1	 */	public static function detachHandler()	{		JLog::add('JError::detachHandler() is deprecated.', JLog::WARNING, 'deprecated');		restore_error_handler();	}	/**	 * Method to register a new error level for handling errors	 *	 * This allows you to add custom error levels to the built-in	 * - E_NOTICE	 * - E_WARNING	 * - E_NOTICE	 *	 * @param   integer  $level    Error level to register	 * @param   string   $name     Human readable name for the error level	 * @param   string   $handler  Error handler to set for the new error level [optional]	 *	 * @return  boolean  True on success; false if the level already has been registered	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function registerErrorLevel($level, $name, $handler = 'ignore')	{		JLog::add('JError::registerErrorLevel() is deprecated.', JLog::WARNING, 'deprecated');		if (isset(self::$levels[$level]))		{			return false;		}		self::$levels[$level] = $name;		self::setErrorHandling($level, $handler);		return true;	}	/**	 * Translate an error level integer to a human readable string	 * e.g. E_ERROR will be translated to 'Error'	 *	 * @param   integer  $level  Error level to translate	 *	 * @return  mixed  Human readable error level name or boolean false if it doesn't exist	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function translateErrorLevel($level)	{		JLog::add('JError::translateErrorLevel() is deprecated.', JLog::WARNING, 'deprecated');		if (isset(self::$levels[$level]))		{			return self::$levels[$level];		}		return false;	}	/**	 * Ignore error handler	 * - Ignores the error	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object   The exception object	 *	 * @deprecated  12.1	 * @see     raise()	 * @since   11.1	 */	public static function handleIgnore(&$error, $options)	{		JLog::add('JError::handleIgnore() is deprecated.', JLog::WARNING, 'deprecated');		return $error;	}	/**	 * Echo error handler	 * - Echos the error message to output	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleEcho(&$error, $options)	{		JLog::add('JError::handleEcho() is deprecated.', JLog::WARNING, 'deprecated');		$level_human = self::translateErrorLevel($error->get('level'));		// If system debug is set, then output some more information.		if (defined('JDEBUG'))		{			$backtrace = $error->getTrace();			$trace = '';			for ($i = count($backtrace) - 1; $i >= 0; $i--)			{				if (isset($backtrace[$i]['class']))				{					$trace .= sprintf("\n%s %s %s()", $backtrace[$i]['class'], $backtrace[$i]['type'], $backtrace[$i]['function']);				}				else				{					$trace .= sprintf("\n%s()", $backtrace[$i]['function']);				}				if (isset($backtrace[$i]['file']))				{					$trace .= sprintf(' @ %s:%d', $backtrace[$i]['file'], $backtrace[$i]['line']);				}			}		}		if (isset($_SERVER['HTTP_HOST']))		{			// Output as html			echo "<br /><b>jos-$level_human</b>: "				. $error->get('message') . "<br />\n"				. (defined('JDEBUG') ? nl2br($trace) : '');		}		else		{			// Output as simple text			if (defined('STDERR'))			{				fwrite(STDERR, "J$level_human: " . $error->get('message') . "\n");				if (defined('JDEBUG'))				{					fwrite(STDERR, $trace);				}			}			else			{				echo "J$level_human: " . $error->get('message') . "\n";				if (defined('JDEBUG'))				{					echo $trace;				}			}		}		return $error;	}	/**	 * Verbose error handler	 * - Echos the error message to output as well as related info	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleVerbose(&$error, $options)	{		JLog::add('JError::handleVerbose() is deprecated.', JLog::WARNING, 'deprecated');		$level_human = self::translateErrorLevel($error->get('level'));		$info = $error->get('info');		if (isset($_SERVER['HTTP_HOST']))		{			// Output as html			echo "<br /><b>J$level_human</b>: " . $error->get('message') . "<br />\n";			if ($info != null)			{				echo "&#160;&#160;&#160;" . $info . "<br />\n";			}			echo $error->getBacktrace(true);		}		else		{			// Output as simple text			echo "J$level_human: " . $error->get('message') . "\n";			if ($info != null)			{				echo "\t" . $info . "\n";			}		}		return $error;	}	/**	 * Die error handler	 * - Echos the error message to output and then dies	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleDie(&$error, $options)	{		JLog::add('JError::handleDie() is deprecated.', JLog::WARNING, 'deprecated');		$level_human = self::translateErrorLevel($error->get('level'));		if (isset($_SERVER['HTTP_HOST']))		{			// Output as html			jexit("<br /><b>J$level_human</b>: " . $error->get('message') . "<br />\n");		}		else		{			// Output as simple text			if (defined('STDERR'))			{				fwrite(STDERR, "J$level_human: " . $error->get('message') . "\n");				jexit();			}			else			{				jexit("J$level_human: " . $error->get('message') . "\n");			}		}		return $error;	}	/**	 * Message error handler	 * Enqueues the error message into the system queue	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleMessage(&$error, $options)	{		JLog::add('JError::hanleMessage() is deprecated.', JLog::WARNING, 'deprecated');		$appl = JFactory::getApplication();		$type = ($error->get('level') == E_NOTICE) ? 'notice' : 'error';		$appl->enqueueMessage($error->get('message'), $type);		return $error;	}	/**	 * Log error handler	 * Logs the error message to a system log file	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleLog(&$error, $options)	{		JLog::add('JError::handleLog() is deprecated.', JLog::WARNING, 'deprecated');		static $log;		if ($log == null)		{			$options['text_file'] = date('Y-m-d') . '.error.log';			$options['format'] = "{DATE}\t{TIME}\t{LEVEL}\t{CODE}\t{MESSAGE}";			JLog::addLogger($options, JLog::ALL, array('error'));		}		$entry = new JLogEntry(			str_replace(array("\r", "\n"), array('', '\\n'), $error->get('message')),			$error->get('level'),			'error'		);		$entry->code = $error->get('code');		JLog::add($entry);		return $error;	}	/**	 * Callback error handler	 * - Send the error object to a callback method for error handling	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleCallback(&$error, $options)	{		JLog::add('JError::handleCallback() is deprecated.', JLog::WARNING, 'deprecated');		return call_user_func($options, $error);	}	/**	 * Display a custom error page and exit gracefully	 *	 * @param   object  &$error  Exception object	 *	 * @return  void	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function customErrorPage(&$error)	{		JLog::add('JError::customErrorPage() is deprecated.', JLog::WARNING, 'deprecated');		$app = JFactory::getApplication();		$document = JDocument::getInstance('error');		if ($document)		{			$config = JFactory::getConfig();			// Get the current template from the application			$template = $app->getTemplate();			// Push the error object into the document			$document->setError($error);			@ob_end_clean();			$document->setTitle(JText::_('Error') . ': ' . $error->get('code'));			$data = $document->render(false, array('template' => $template, 'directory' => JPATH_THEMES, 'debug' => $config->get('debug')));			// Failsafe to get the error displayed.			if (empty($data))			{				self::handleEcho($error, array());			}			else			{				// Do not allow cache				JResponse::allowCache(false);				JResponse::setBody($data);				echo JResponse::toString();			}		}		else		{			// Just echo the error since there is no document			// This is a common use case for Command Line Interface applications.			self::handleEcho($error, array());		}		$app->close(0);	}	/**	 * Display a message to the user	 *	 * @param   integer  $level  The error level - use any of PHP's own error levels	 *                   for this: E_ERROR, E_WARNING, E_NOTICE, E_USER_ERROR,	 *                   E_USER_WARNING, E_USER_NOTICE.	 * @param   string   $msg    Error message, shown to user if need be.	 *	 * @return  void	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function customErrorHandler($level, $msg)	{		JLog::add('JError::customErrorHandler() is deprecated.', JLog::WARNING, 'deprecated');		self::raise($level, '', $msg);	}	/**	 * Render the backtrace	 *	 * @param   integer  $error  The error	 *	 * @return  string  Contents of the backtrace	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function renderBacktrace($error)	{		JLog::add('JError::renderBacktrace() is deprecated.', JLog::WARNING, 'deprecated');		$contents = null;		$backtrace = $error->getTrace();		if (is_array($backtrace))		{			ob_start();			$j = 1;			echo '<table cellpadding="0" cellspacing="0" class="Table">';			echo '		<tr>';			echo '				<td colspan="3" class="TD"><strong>Call stack</strong></td>';			echo '		</tr>';			echo '		<tr>';			echo '				<td class="TD"><strong>#</strong></td>';			echo '				<td class="TD"><strong>Function</strong></td>';			echo '				<td class="TD"><strong>Location</strong></td>';			echo '		</tr>';			for ($i = count($backtrace) - 1; $i >= 0; $i--)			{				echo '		<tr>';				echo '				<td class="TD">' . $j . '</td>';				if (isset($backtrace[$i]['class']))				{					echo '		<td class="TD">' . $backtrace[$i]['class'] . $backtrace[$i]['type'] . $backtrace[$i]['function'] . '()</td>';				}				else				{					echo '		<td class="TD">' . $backtrace[$i]['function'] . '()</td>';				}				if (isset($backtrace[$i]['file']))				{					echo '				<td class="TD">' . $backtrace[$i]['file'] . ':' . $backtrace[$i]['line'] . '</td>';				}				else				{					echo '				<td class="TD">&#160;</td>';				}				echo '		</tr>';				$j++;			}			echo '</table>';			$contents = ob_get_contents();			ob_end_clean();		}		return $contents;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Article View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewForm extends JViewLegacy{	protected $form;	protected $item;	protected $return_page;	protected $state;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		// Get model data.		$this->state		= $this->get('State');		$this->item			= $this->get('Item');		$this->form			= $this->get('Form');		$this->return_page	= $this->get('ReturnPage');		if (empty($this->item->id))		{			$authorised = $user->authorise('core.create', 'com_content') || (count($user->getAuthorisedCategories('com_content', 'core.create')));		}		else		{			$authorised = $this->item->params->get('access-edit');		}		if ($authorised !== true)		{			JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			return false;		}		$this->item->tags = new JHelperTags;		if (!empty($this->item->id))		{			$this->item->tags->getItemTags('com_content.article.', $this->item->id);		}		if (!empty($this->item) && isset($this->item->id))		{			$this->item->images = json_decode($this->item->images);			$this->item->urls = json_decode($this->item->urls);			$tmp = new stdClass;			$tmp->images = $this->item->images;			$tmp->urls = $this->item->urls;			$this->form->bind($tmp);		}		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Create a shortcut to the parameters.		$params	= &$this->state->params;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params = $params;		$this->user   = $user;		if ($params->get('enable_category') == 1)		{			$this->form->setFieldAttribute('catid', 'default', $params->get('catid', 1));			$this->form->setFieldAttribute('catid', 'readonly', 'true');		}		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTENT_FORM_EDIT_ARTICLE'));		}		$title = $this->params->def('page_title', JText::_('COM_CONTENT_FORM_EDIT_ARTICLE'));		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		$pathway = $app->getPathWay();		$pathway->addItem($title, '');		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');?><form	action="<?php echo JRoute::_('index.php?option=com_banners&task=tracks.display&format=raw');?>"	method="post"	name="adminForm"	id="download-form"	class="form-validate">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_BANNERS_TRACKS_DOWNLOAD');?></legend>		<?php foreach ($this->form->getFieldset() as $field) : ?>			<?php if (!$field->hidden) : ?>				<?php echo $field->label; ?>			<?php endif; ?>			<?php echo $field->input; ?>		<?php endforeach; ?>		<div class="clr"></div>		<button type="button" onclick="this.form.submit();window.top.setTimeout('window.parent.SqueezeBox.close()', 700);"><?php echo JText::_('COM_BANNERS_TRACKS_EXPORT');?></button>		<button type="button" onclick="window.parent.SqueezeBox.close();"><?php echo JText::_('COM_BANNERS_CANCEL');?></button>	</fieldset></form>
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Prototype form model. * * @package     Joomla.Legacy * @subpackage  Model * @see         JForm * @see         JFormField * @see         JFormRule * @since       12.2 */abstract class JModelForm extends JModelLegacy{	/**	 * Array of form objects.	 *	 * @var    array	 * @since  12.2	 */	protected $_forms = array();	/**	 * Method to checkin a row.	 *	 * @param   integer  $pk  The numeric id of the primary key.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   12.2	 */	public function checkin($pk = null)	{		// Only attempt to check the row in if it exists.		if ($pk)		{			$user = JFactory::getUser();			// Get an instance of the row to checkin.			$table = $this->getTable();			if (!$table->load($pk))			{				$this->setError($table->getError());				return false;			}			// Check if this is the user having previously checked out the row.			if ($table->checked_out > 0 && $table->checked_out != $user->get('id') && !$user->authorise('core.admin', 'com_checkin'))			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_CHECKIN_USER_MISMATCH'));				return false;			}			// Attempt to check the row in.			if (!$table->checkin($pk))			{				$this->setError($table->getError());				return false;			}		}		return true;	}	/**	 * Method to check-out a row for editing.	 *	 * @param   integer  $pk  The numeric id of the primary key.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   12.2	 */	public function checkout($pk = null)	{		// Only attempt to check the row in if it exists.		if ($pk)		{			$user = JFactory::getUser();			// Get an instance of the row to checkout.			$table = $this->getTable();			if (!$table->load($pk))			{				$this->setError($table->getError());				return false;			}			// Check if this is the user having previously checked out the row.			if ($table->checked_out > 0 && $table->checked_out != $user->get('id'))			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_CHECKOUT_USER_MISMATCH'));				return false;			}			// Attempt to check the row out.			if (!$table->checkout($user->get('id'), $pk))			{				$this->setError($table->getError());				return false;			}		}		return true;	}	/**	 * Abstract method for getting the form from the model.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   12.2	 */	abstract public function getForm($data = array(), $loadData = true);	/**	 * Method to get a form object.	 *	 * @param   string   $name     The name of the form.	 * @param   string   $source   The form source. Can be XML string if file flag is set to false.	 * @param   array    $options  Optional array of options for the form creation.	 * @param   boolean  $clear    Optional argument to force load a new form.	 * @param   string   $xpath    An optional xpath to search for the fields.	 *	 * @return  mixed  JForm object on success, False on error.	 *	 * @see     JForm	 * @since   12.2	 */	protected function loadForm($name, $source = null, $options = array(), $clear = false, $xpath = false)	{		// Handle the optional arguments.		$options['control'] = JArrayHelper::getValue($options, 'control', false);		// Create a signature hash.		$hash = md5($source . serialize($options));		// Check if we can use a previously loaded form.		if (isset($this->_forms[$hash]) && !$clear)		{			return $this->_forms[$hash];		}		// Get the form.		JForm::addFormPath(JPATH_COMPONENT . '/models/forms');		JForm::addFieldPath(JPATH_COMPONENT . '/models/fields');		try		{			$form = JForm::getInstance($name, $source, $options, false, $xpath);			if (isset($options['load_data']) && $options['load_data'])			{				// Get the data for the form.				$data = $this->loadFormData();			}			else			{				$data = array();			}			// Allow for additional modification of the form, and events to be triggered.			// We pass the data because plugins may require it.			$this->preprocessForm($form, $data);			// Load the data into the form after the plugins have operated.			$form->bind($data);		}		catch (Exception $e)		{			$this->setError($e->getMessage());			return false;		}		// Store the form for later.		$this->_forms[$hash] = $form;		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  array    The default data is an empty array.	 *	 * @since   12.2	 */	protected function loadFormData()	{		return array();	}	/**	 * Method to allow derived classes to preprocess the data.	 *	 * @param   string  $context  The context identifier.	 * @param   mixed   &$data    The data to be processed. It gets altered directly.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function preprocessData($context, &$data)	{		// Get the dispatcher and load the users plugins.		$dispatcher = JEventDispatcher::getInstance();		JPluginHelper::importPlugin('content');		// Trigger the data preparation event.		$results = $dispatcher->trigger('onContentPrepareData', array($context, $data));		// Check for errors encountered while preparing the data.		if (count($results) > 0 && in_array(false, $results, true))		{			$this->setError($dispatcher->getError());		}	}	/**	 * Method to allow derived classes to preprocess the form.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @see     JFormField	 * @since   12.2	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Import the appropriate plugin group.		JPluginHelper::importPlugin($group);		// Get the dispatcher.		$dispatcher = JEventDispatcher::getInstance();		// Trigger the form preparation event.		$results = $dispatcher->trigger('onContentPrepareForm', array($form, $data));		// Check for errors encountered while preparing the form.		if (count($results) && in_array(false, $results, true))		{			// Get the last error.			$error = $dispatcher->getError();			if (!($error instanceof Exception))			{				throw new Exception($error);			}		}	}	/**	 * Method to validate the form data.	 *	 * @param   JForm   $form   The form to validate against.	 * @param   array   $data   The data to validate.	 * @param   string  $group  The name of the field group to validate.	 *	 * @return  mixed  Array of filtered data if valid, false otherwise.	 *	 * @see     JFormRule	 * @see     JFilterInput	 * @since   12.2	 */	public function validate($form, $data, $group = null)	{		// Filter and validate the form data.		$data = $form->filter($data);		$return = $form->validate($data, $group);		// Check for an error.		if ($return instanceof Exception)		{			$this->setError($return->getMessage());			return false;		}		// Check the validation results.		if ($return === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $message)			{				$this->setError($message);			}			return false;		}		return $data;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla! Web application. * * @package     Joomla.Platform * @subpackage  Application * @since       11.4 */class JApplicationWeb extends JApplicationBase{	/**	 * @var    string  Character encoding string.	 * @since  11.3	 */	public $charSet = 'utf-8';	/**	 * @var    string  Response mime type.	 * @since  11.3	 */	public $mimeType = 'text/html';	/**	 * @var    JDate  The body modified date for response headers.	 * @since  11.3	 */	public $modifiedDate;	/**	 * @var    JApplicationWebClient  The application client object.	 * @since  11.3	 */	public $client;	/**	 * @var    JRegistry  The application configuration object.	 * @since  11.3	 */	protected $config;	/**	 * @var    JDocument  The application document object.	 * @since  11.3	 */	protected $document;	/**	 * @var    JLanguage  The application language object.	 * @since  11.3	 */	protected $language;	/**	 * @var    JSession  The application session object.	 * @since  11.3	 */	protected $session;	/**	 * @var    object  The application response object.	 * @since  11.3	 */	protected $response;	/**	 * @var    JApplicationWeb  The application instance.	 * @since  11.3	 */	protected static $instance;	/**	 * Class constructor.	 *	 * @param   mixed  $input   An optional argument to provide dependency injection for the application's	 *                          input object.  If the argument is a JInput object that object will become	 *                          the application's input object, otherwise a default input object is created.	 * @param   mixed  $config  An optional argument to provide dependency injection for the application's	 *                          config object.  If the argument is a JRegistry object that object will become	 *                          the application's config object, otherwise a default config object is created.	 * @param   mixed  $client  An optional argument to provide dependency injection for the application's	 *                          client object.  If the argument is a JApplicationWebClient object that object will become	 *                          the application's client object, otherwise a default client object is created.	 *	 * @since   11.3	 */	public function __construct(JInput $input = null, JRegistry $config = null, JApplicationWebClient $client = null)	{		// If a input object is given use it.		if ($input instanceof JInput)		{			$this->input = $input;		}		// Create the input based on the application logic.		else		{			$this->input = new JInput;		}		// If a config object is given use it.		if ($config instanceof JRegistry)		{			$this->config = $config;		}		// Instantiate a new configuration object.		else		{			$this->config = new JRegistry;		}		// If a client object is given use it.		if ($client instanceof JApplicationWebClient)		{			$this->client = $client;		}		// Instantiate a new web client object.		else		{			$this->client = new JApplicationWebClient;		}		// Load the configuration object.		$this->loadConfiguration($this->fetchConfigurationData());		// Set the execution datetime and timestamp;		$this->set('execution.datetime', gmdate('Y-m-d H:i:s'));		$this->set('execution.timestamp', time());		// Setup the response object.		$this->response = new stdClass;		$this->response->cachable = false;		$this->response->headers = array();		$this->response->body = array();		// Set the system URIs.		$this->loadSystemUris();	}	/**	 * Returns a reference to the global JApplicationWeb object, only creating it if it doesn't already exist.	 *	 * This method must be invoked as: $web = JApplicationWeb::getInstance();	 *	 * @param   string  $name  The name (optional) of the JApplicationWeb class to instantiate.	 *	 * @return  JApplicationWeb	 *	 * @since   11.3	 */	public static function getInstance($name = null)	{		// Only create the object if it doesn't exist.		if (empty(self::$instance))		{			if (class_exists($name) && (is_subclass_of($name, 'JApplicationWeb')))			{				self::$instance = new $name;			}			else			{				self::$instance = new JApplicationWeb;			}		}		return self::$instance;	}	/**	 * Initialise the application.	 *	 * @param   mixed  $session     An optional argument to provide dependency injection for the application's	 *                              session object.  If the argument is a JSession object that object will become	 *                              the application's session object, if it is false then there will be no session	 *                              object, and if it is null then the default session object will be created based	 *                              on the application's loadSession() method.	 * @param   mixed  $document    An optional argument to provide dependency injection for the application's	 *                              document object.  If the argument is a JDocument object that object will become	 *                              the application's document object, if it is false then there will be no document	 *                              object, and if it is null then the default document object will be created based	 *                              on the application's loadDocument() method.	 * @param   mixed  $language    An optional argument to provide dependency injection for the application's	 *                              language object.  If the argument is a JLanguage object that object will become	 *                              the application's language object, if it is false then there will be no language	 *                              object, and if it is null then the default language object will be created based	 *                              on the application's loadLanguage() method.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @deprecated  13.1	 * @see     loadSession()	 * @see     loadDocument()	 * @see     loadLanguage()	 * @see     loadDispatcher()	 * @since   11.3	 */	public function initialise($session = null, $document = null, $language = null, $dispatcher = null)	{		// Create the session based on the application logic.		if ($session !== false)		{			$this->loadSession($session);		}		// Create the document based on the application logic.		if ($document !== false)		{			$this->loadDocument($document);		}		// Create the language based on the application logic.		if ($language !== false)		{			$this->loadLanguage($language);		}		$this->loadDispatcher($dispatcher);		return $this;	}	/**	 * Execute the application.	 *	 * @return  void	 *	 * @since   11.3	 */	public function execute()	{		// Trigger the onBeforeExecute event.		$this->triggerEvent('onBeforeExecute');		// Perform application routines.		$this->doExecute();		// Trigger the onAfterExecute event.		$this->triggerEvent('onAfterExecute');		// If we have an application document object, render it.		if ($this->document instanceof JDocument)		{			// Trigger the onBeforeRender event.			$this->triggerEvent('onBeforeRender');			// Render the application output.			$this->render();			// Trigger the onAfterRender event.			$this->triggerEvent('onAfterRender');		}		// If gzip compression is enabled in configuration and the server is compliant, compress the output.		if ($this->get('gzip') && !ini_get('zlib.output_compression') && (ini_get('output_handler') != 'ob_gzhandler'))		{			$this->compress();		}		// Trigger the onBeforeRespond event.		$this->triggerEvent('onBeforeRespond');		// Send the application response.		$this->respond();		// Trigger the onAfterRespond event.		$this->triggerEvent('onAfterRespond');	}	/**	 * Method to run the Web application routines.  Most likely you will want to instantiate a controller	 * and execute it, or perform some sort of action that populates a JDocument object so that output	 * can be rendered to the client.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.3	 */	protected function doExecute()	{		// Your application routines go here.	}	/**	 * Rendering is the process of pushing the document buffers into the template	 * placeholders, retrieving data from the document and pushing it into	 * the application response buffer.	 *	 * @return  void	 *	 * @since   11.3	 */	protected function render()	{		// Setup the document options.		$options = array(			'template' => $this->get('theme'),			'file' => 'index.php',			'params' => $this->get('themeParams')		);		if ($this->get('themes.base'))		{			$options['directory'] = $this->get('themes.base');		}		// Fall back to constants.		else		{			$options['directory'] = defined('JPATH_THEMES') ? JPATH_THEMES : (defined('JPATH_BASE') ? JPATH_BASE : __DIR__) . '/themes';		}		// Parse the document.		$this->document->parse($options);		// Render the document.		$data = $this->document->render($this->get('cache_enabled'), $options);		// Set the application output data.		$this->setBody($data);	}	/**	 * Checks the accept encoding of the browser and compresses the data before	 * sending it to the client if possible.	 *	 * @return  void	 *	 * @since   11.3	 */	protected function compress()	{		// Supported compression encodings.		$supported = array(			'x-gzip' => 'gz',			'gzip' => 'gz',			'deflate' => 'deflate'		);		// Get the supported encoding.		$encodings = array_intersect($this->client->encodings, array_keys($supported));		// If no supported encoding is detected do nothing and return.		if (empty($encodings))		{			return;		}		// Verify that headers have not yet been sent, and that our connection is still alive.		if ($this->checkHeadersSent() || !$this->checkConnectionAlive())		{			return;		}		// Iterate through the encodings and attempt to compress the data using any found supported encodings.		foreach ($encodings as $encoding)		{			if (($supported[$encoding] == 'gz') || ($supported[$encoding] == 'deflate'))			{				// Verify that the server supports gzip compression before we attempt to gzip encode the data.				// @codeCoverageIgnoreStart				if (!extension_loaded('zlib') || ini_get('zlib.output_compression'))				{					continue;				}				// @codeCoverageIgnoreEnd				// Attempt to gzip encode the data with an optimal level 4.				$data = $this->getBody();				$gzdata = gzencode($data, 4, ($supported[$encoding] == 'gz') ? FORCE_GZIP : FORCE_DEFLATE);				// If there was a problem encoding the data just try the next encoding scheme.				// @codeCoverageIgnoreStart				if ($gzdata === false)				{					continue;				}				// @codeCoverageIgnoreEnd				// Set the encoding headers.				$this->setHeader('Content-Encoding', $encoding);				$this->setHeader('X-Content-Encoded-By', 'Joomla');				// Replace the output with the encoded data.				$this->setBody($gzdata);				// Compression complete, let's break out of the loop.				break;			}		}	}	/**	 * Method to send the application response to the client.  All headers will be sent prior to the main	 * application output data.	 *	 * @return  void	 *	 * @since   11.3	 */	protected function respond()	{		// Send the content-type header.		$this->setHeader('Content-Type', $this->mimeType . '; charset=' . $this->charSet);		// If the response is set to uncachable, we need to set some appropriate headers so browsers don't cache the response.		if (!$this->response->cachable)		{			// Expires in the past.			$this->setHeader('Expires', 'Mon, 1 Jan 2001 00:00:00 GMT', true);			// Always modified.			$this->setHeader('Last-Modified', gmdate('D, d M Y H:i:s') . ' GMT', true);			$this->setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0', false);			// HTTP 1.0			$this->setHeader('Pragma', 'no-cache');		}		else		{			// Expires.			$this->setHeader('Expires', gmdate('D, d M Y H:i:s', time() + 900) . ' GMT');			// Last modified.			if ($this->modifiedDate instanceof JDate)			{				$this->setHeader('Last-Modified', $this->modifiedDate->format('D, d M Y H:i:s'));			}		}		$this->sendHeaders();		echo $this->getBody();	}	/**	 * Redirect to another URL.	 *	 * If the headers have not been sent the redirect will be accomplished using a "301 Moved Permanently"	 * or "303 See Other" code in the header pointing to the new location. If the headers have already been	 * sent this will be accomplished using a JavaScript statement.	 *	 * @param   string   $url    The URL to redirect to. Can only be http/https URL	 * @param   boolean  $moved  True if the page is 301 Permanently Moved, otherwise 303 See Other is assumed.	 *	 * @return  void	 *	 * @since   11.3	 */	public function redirect($url, $moved = false)	{		// Import library dependencies.		jimport('phputf8.utils.ascii');		// Check for relative internal links.		if (preg_match('#^index\.php#', $url))		{			$url = $this->get('uri.base.full') . $url;		}		// Perform a basic sanity check to make sure we don't have any CRLF garbage.		$url = preg_split("/[\r\n]/", $url);		$url = $url[0];		/*		 * Here we need to check and see if the URL is relative or absolute.  Essentially, do we need to		 * prepend the URL with our base URL for a proper redirect.  The rudimentary way we are looking		 * at this is to simply check whether or not the URL string has a valid scheme or not.		 */		if (!preg_match('#^[a-z]+\://#i', $url))		{			// Get a JURI instance for the requested URI.			$uri = JURI::getInstance($this->get('uri.request'));			// Get a base URL to prepend from the requested URI.			$prefix = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			// We just need the prefix since we have a path relative to the root.			if ($url[0] == '/')			{				$url = $prefix . $url;			}			// It's relative to where we are now, so lets add that.			else			{				$parts = explode('/', $uri->toString(array('path')));				array_pop($parts);				$path = implode('/', $parts) . '/';				$url = $prefix . $path . $url;			}		}		// If the headers have already been sent we need to send the redirect statement via JavaScript.		if ($this->checkHeadersSent())		{			echo "<script>document.location.href='$url';</script>\n";		}		else		{			// We have to use a JavaScript redirect here because MSIE doesn't play nice with utf-8 URLs.			if (($this->client->engine == JApplicationWebClient::TRIDENT) && !utf8_is_ascii($url))			{				$html = '<html><head>';				$html .= '<meta http-equiv="content-type" content="text/html; charset=' . $this->charSet . '" />';				$html .= '<script>document.location.href=\'' . $url . '\';</script>';				$html .= '</head><body></body></html>';				echo $html;			}			else			{				// All other cases use the more efficient HTTP header for redirection.				$this->header($moved ? 'HTTP/1.1 301 Moved Permanently' : 'HTTP/1.1 303 See other');				$this->header('Location: ' . $url);				$this->header('Content-Type: text/html; charset=' . $this->charSet);			}		}		// Close the application after the redirect.		$this->close();	}	/**	 * Load an object or array into the application configuration object.	 *	 * @param   mixed  $data  Either an array or object to be loaded into the configuration object.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function loadConfiguration($data)	{		// Load the data into the configuration object.		if (is_array($data))		{			$this->config->loadArray($data);		}		elseif (is_object($data))		{			$this->config->loadObject($data);		}		return $this;	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $key      The name of the property.	 * @param   mixed   $default  The default value (optional) if none is set.	 *	 * @return  mixed   The value of the configuration.	 *	 * @since   11.3	 */	public function get($key, $default = null)	{		return $this->config->get($key, $default);	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $key    The name of the property.	 * @param   mixed   $value  The value of the property to set (optional).	 *	 * @return  mixed   Previous value of the property	 *	 * @since   11.3	 */	public function set($key, $value = null)	{		$previous = $this->config->get($key);		$this->config->set($key, $value);		return $previous;	}	/**	 * Set/get cachable state for the response.  If $allow is set, sets the cachable state of the	 * response.  Always returns the current state.	 *	 * @param   boolean  $allow  True to allow browser caching.	 *	 * @return  boolean	 *	 * @since   11.3	 */	public function allowCache($allow = null)	{		if ($allow !== null)		{			$this->response->cachable = (bool) $allow;		}		return $this->response->cachable;	}	/**	 * Method to set a response header.  If the replace flag is set then all headers	 * with the given name will be replaced by the new one.  The headers are stored	 * in an internal array to be sent when the site is sent to the browser.	 *	 * @param   string   $name     The name of the header to set.	 * @param   string   $value    The value of the header to set.	 * @param   boolean  $replace  True to replace any headers with the same name.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function setHeader($name, $value, $replace = false)	{		// Sanitize the input values.		$name = (string) $name;		$value = (string) $value;		// If the replace flag is set, unset all known headers with the given name.		if ($replace)		{			foreach ($this->response->headers as $key => $header)			{				if ($name == $header['name'])				{					unset($this->response->headers[$key]);				}			}			// Clean up the array as unsetting nested arrays leaves some junk.			$this->response->headers = array_values($this->response->headers);		}		// Add the header to the internal array.		$this->response->headers[] = array('name' => $name, 'value' => $value);		return $this;	}	/**	 * Method to get the array of response headers to be sent when the response is sent	 * to the client.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getHeaders()	{		return $this->response->headers;	}	/**	 * Method to clear any set response headers.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function clearHeaders()	{		$this->response->headers = array();		return $this;	}	/**	 * Send the response headers.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function sendHeaders()	{		if (!$this->checkHeadersSent())		{			foreach ($this->response->headers as $header)			{				if ('status' == strtolower($header['name']))				{					// 'status' headers indicate an HTTP status, and need to be handled slightly differently					$this->header(ucfirst(strtolower($header['name'])) . ': ' . $header['value'], null, (int) $header['value']);				}				else				{					$this->header($header['name'] . ': ' . $header['value']);				}			}		}		return $this;	}	/**	 * Set body content.  If body content already defined, this will replace it.	 *	 * @param   string  $content  The content to set as the response body.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function setBody($content)	{		$this->response->body = array((string) $content);		return $this;	}	/**	 * Prepend content to the body content	 *	 * @param   string  $content  The content to prepend to the response body.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function prependBody($content)	{		array_unshift($this->response->body, (string) $content);		return $this;	}	/**	 * Append content to the body content	 *	 * @param   string  $content  The content to append to the response body.	 *	 * @return  JApplicationWeb  Instance of $this to allow chaining.	 *	 * @since   11.3	 */	public function appendBody($content)	{		array_push($this->response->body, (string) $content);		return $this;	}	/**	 * Return the body content	 *	 * @param   boolean  $asArray  True to return the body as an array of strings.	 *	 * @return  mixed  The response body either as an array or concatenated string.	 *	 * @since   11.3	 */	public function getBody($asArray = false)	{		return $asArray ? $this->response->body : implode((array) $this->response->body);	}	/**	 * Method to get the application document object.	 *	 * @return  JDocument  The document object	 *	 * @since   11.3	 */	public function getDocument()	{		return $this->document;	}	/**	 * Method to get the application language object.	 *	 * @return  JLanguage  The language object	 *	 * @since   11.3	 */	public function getLanguage()	{		return $this->language;	}	/**	 * Method to get the application session object.	 *	 * @return  JSession  The session object	 *	 * @since   11.3	 */	public function getSession()	{		return $this->session;	}	/**	 * Method to check the current client connnection status to ensure that it is alive.  We are	 * wrapping this to isolate the connection_status() function from our code base for testing reasons.	 *	 * @return  boolean  True if the connection is valid and normal.	 *	 * @codeCoverageIgnore	 * @see     connection_status()	 * @since   11.3	 */	protected function checkConnectionAlive()	{		return (connection_status() === CONNECTION_NORMAL);	}	/**	 * Method to check to see if headers have already been sent.  We are wrapping this to isolate the	 * headers_sent() function from our code base for testing reasons.	 *	 * @return  boolean  True if the headers have already been sent.	 *	 * @codeCoverageIgnore	 * @see     headers_sent()	 * @since   11.3	 */	protected function checkHeadersSent()	{		return headers_sent();	}	/**	 * Method to detect the requested URI from server environment variables.	 *	 * @return  string  The requested URI	 *	 * @since   11.3	 */	protected function detectRequestUri()	{		$uri = '';		// First we need to detect the URI scheme.		if (isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS']) != 'off'))		{			$scheme = 'https://';		}		else		{			$scheme = 'http://';		}		/*		 * There are some differences in the way that Apache and IIS populate server environment variables.  To		 * properly detect the requested URI we need to adjust our algorithm based on whether or not we are getting		 * information from Apache or IIS.		 */		// If PHP_SELF and REQUEST_URI are both populated then we will assume "Apache Mode".		if (!empty($_SERVER['PHP_SELF']) && !empty($_SERVER['REQUEST_URI']))		{			// The URI is built from the HTTP_HOST and REQUEST_URI environment variables in an Apache environment.			$uri = $scheme . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];		}		// If not in "Apache Mode" we will assume that we are in an IIS environment and proceed.		else		{			// IIS uses the SCRIPT_NAME variable instead of a REQUEST_URI variable... thanks, MS			$uri = $scheme . $_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME'];			// If the QUERY_STRING variable exists append it to the URI string.			if (isset($_SERVER['QUERY_STRING']) && !empty($_SERVER['QUERY_STRING']))			{				$uri .= '?' . $_SERVER['QUERY_STRING'];			}		}		return trim($uri);	}	/**	 * Method to load a PHP configuration class file based on convention and return the instantiated data object.  You	 * will extend this method in child classes to provide configuration data from whatever data source is relevant	 * for your specific application.	 *	 * @param   string  $file   The path and filename of the configuration file. If not provided, configuration.php	 *                          in JPATH_BASE will be used.	 * @param   string  $class  The class name to instantiate.	 *	 * @return  mixed   Either an array or object to be loaded into the configuration object.	 *	 * @since   11.3	 */	protected function fetchConfigurationData($file = '', $class = 'JConfig')	{		// Instantiate variables.		$config = array();		if (empty($file) && defined('JPATH_BASE'))		{			$file = JPATH_BASE . '/configuration.php';			// Applications can choose not to have any configuration data			// by not implementing this method and not having a config file.			if (!file_exists($file))			{				$file = '';			}		}		if (!empty($file))		{			JLoader::register($class, $file);			if (class_exists($class))			{				$config = new $class;			}			else			{				throw new RuntimeException('Configuration class does not exist.');			}		}		return $config;	}	/**	 * Method to send a header to the client.  We are wrapping this to isolate the header() function	 * from our code base for testing reasons.	 *	 * @param   string   $string   The header string.	 * @param   boolean  $replace  The optional replace parameter indicates whether the header should	 *                             replace a previous similar header, or add a second header of the same type.	 * @param   integer  $code     Forces the HTTP response code to the specified value. Note that	 *                             this parameter only has an effect if the string is not empty.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @see     header()	 * @since   11.3	 */	protected function header($string, $replace = true, $code = null)	{		header($string, $replace, $code);	}	/**	 * Determine if we are using a secure (SSL) connection.	 *	 * @return  boolean  True if using SSL, false if not.	 *	 * @since   12.2	 */	public function isSSLConnection()	{		return ((isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) || getenv('SSL_PROTOCOL_VERSION'));	}	/**	 * Allows the application to load a custom or default document.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create a document,	 * if required, based on more specific needs.	 *	 * @param   JDocument  $document  An optional document object. If omitted, the factory document is created.	 *	 * @return  JApplicationWeb This method is chainable.	 *	 * @since   11.3	 */	public function loadDocument(JDocument $document = null)	{		$this->document = ($document === null) ? JFactory::getDocument() : $document;		return $this;	}	/**	 * Allows the application to load a custom or default language.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create a language,	 * if required, based on more specific needs.	 *	 * @param   JLanguage  $language  An optional language object. If omitted, the factory language is created.	 *	 * @return  JApplicationWeb This method is chainable.	 *	 * @since   11.3	 */	public function loadLanguage(JLanguage $language = null)	{		$this->language = ($language === null) ? JFactory::getLanguage() : $language;		return $this;	}	/**	 * Allows the application to load a custom or default session.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create a session,	 * if required, based on more specific needs.	 *	 * @param   JSession  $session  An optional session object. If omitted, the session is created.	 *	 * @return  JApplicationWeb This method is chainable.	 *	 * @since   11.3	 */	public function loadSession(JSession $session = null)	{		if ($session !== null)		{			$this->session = $session;			return $this;		}		// Generate a session name.		$name = md5($this->get('secret') . $this->get('session_name', get_class($this)));		// Calculate the session lifetime.		$lifetime = (($this->get('sess_lifetime')) ? $this->get('sess_lifetime') * 60 : 900);		// Get the session handler from the configuration.		$handler = $this->get('sess_handler', 'none');		// Initialize the options for JSession.		$options = array(			'name' => $name,			'expire' => $lifetime,			'force_ssl' => $this->get('force_ssl')		);		$this->registerEvent('onAfterSessionStart', array($this, 'afterSessionStart'));		// Instantiate the session object.		$session = JSession::getInstance($handler, $options);		$session->initialise($this->input, $this->dispatcher);		if ($session->getState() == 'expired')		{			$session->restart();		}		else		{			$session->start();		}		// Set the session object.		$this->session = $session;		return $this;	}	/**	 * After the session has been started we need to populate it with some default values.	 *	 * @return  void	 *	 * @since   12.2	 */	public function afterSessionStart()	{		$session = JFactory::getSession();		if ($session->isNew())		{			$session->set('registry', new JRegistry('session'));			$session->set('user', new JUser);		}	}	/**	 * Method to load the system URI strings for the application.	 *	 * @param   string  $requestUri  An optional request URI to use instead of detecting one from the	 *                               server environment variables.	 *	 * @return  void	 *	 * @since   11.3	 */	protected function loadSystemUris($requestUri = null)	{		// Set the request URI.		// @codeCoverageIgnoreStart		if (!empty($requestUri))		{			$this->set('uri.request', $requestUri);		}		else		{			$this->set('uri.request', $this->detectRequestUri());		}		// @codeCoverageIgnoreEnd		// Check to see if an explicit base URI has been set.		$siteUri = trim($this->get('site_uri'));		if ($siteUri != '')		{			$uri = JUri::getInstance($siteUri);		}		// No explicit base URI was set so we need to detect it.		else		{			// Start with the requested URI.			$uri = JUri::getInstance($this->get('uri.request'));			// If we are working from a CGI SAPI with the 'cgi.fix_pathinfo' directive disabled we use PHP_SELF.			if (strpos(php_sapi_name(), 'cgi') !== false && !ini_get('cgi.fix_pathinfo') && !empty($_SERVER['REQUEST_URI']))			{				// We aren't expecting PATH_INFO within PHP_SELF so this should work.				$uri->setPath(rtrim(dirname($_SERVER['PHP_SELF']), '/\\'));			}			// Pretty much everything else should be handled with SCRIPT_NAME.			else			{				$uri->setPath(rtrim(dirname($_SERVER['SCRIPT_NAME']), '/\\'));			}			// Clear the unused parts of the requested URI.			$uri->setQuery(null);			$uri->setFragment(null);		}		// Get the host and path from the URI.		$host = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));		$path = rtrim($uri->toString(array('path')), '/\\');		// Check if the path includes "index.php".		if (strpos($path, 'index.php') !== false)		{			// Remove the index.php portion of the path.			$path = substr_replace($path, '', strpos($path, 'index.php'), 9);			$path = rtrim($path, '/\\');		}		// Set the base URI both as just a path and as the full URI.		$this->set('uri.base.full', $host . $path . '/');		$this->set('uri.base.host', $host);		$this->set('uri.base.path', $path . '/');		// Set the extended (non-base) part of the request URI as the route.		$this->set('uri.route', substr_replace($this->get('uri.request'), '', 0, strlen($this->get('uri.base.full'))));		// Get an explicitly set media URI is present.		$mediaURI = trim($this->get('media_uri'));		if ($mediaURI)		{			if (strpos($mediaURI, '://') !== false)			{				$this->set('uri.media.full', $mediaURI);				$this->set('uri.media.path', $mediaURI);			}			else			{				// Normalise slashes.				$mediaURI = '/' . trim($mediaURI, '/\\') . '/';				$this->set('uri.media.full', $this->get('uri.base.host') . $mediaURI);				$this->set('uri.media.path', $mediaURI);			}		}		// No explicit media URI was set, build it dynamically from the base uri.		else		{			$this->set('uri.media.full', $this->get('uri.base.full') . 'media/');			$this->set('uri.media.path', $this->get('uri.base.path') . 'media/');		}	}}/** * Deprecated class placeholder.  You should use JApplicationWeb instead. * * @package     Joomla.Platform * @subpackage  Application * @since       11.3 * @deprecated  12.3 */class JWeb extends JApplicationWeb{}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Namespace interface. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */interface JFeedParserNamespace{	/**	 * Method to handle an element for the feed given that a certain namespace is present.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeed(JFeed $feed, SimpleXMLElement $el);	/**	 * Method to handle the feed entry element for the feed given that a certain namespace is present.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeedEntry(JFeedEntry $entry, SimpleXMLElement $el);}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?><div id="sidebar">	<div class="sidebar-nav">		<?php if ($displayData->displayMenu) : ?>		<ul id="submenu" class="nav nav-list">			<?php foreach ($displayData->list as $item) :			if (isset ($item[2]) && $item[2] == 1) : ?>				<li class="active">			<?php else : ?>				<li>			<?php endif;			if ($displayData->hide) : ?>				<a class="nolink"><?php echo $item[0]; ?>			<?php else :				if (strlen($item[1])) : ?>					<a href="<?php echo JFilterOutput::ampReplace($item[1]); ?>"><?php echo $item[0]; ?></a>				<?php else : ?>					<?php echo $item[0]; ?>				<?php endif;			endif; ?>			</li>			<?php endforeach; ?>		</ul>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories view class for the Category package. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesViewCategories extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	protected $assoc;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->assoc		= $this->get('Assoc');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Preprocess the list of items to find ordering divisions.		foreach ($this->items as &$item)		{			$this->ordering[$item->parent_id][] = $item->id;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$categoryId	= $this->state->get('filter.category_id');		$component	= $this->state->get('filter.component');		$section	= $this->state->get('filter.section');		$canDo		= null;		$user		= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Avoid nonsense situation.		if ($component == 'com_categories')		{			return;		}		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load($component, JPATH_BASE, null, false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, null, false, false)		||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, $lang->getDefault(), false, false);		// Load the category helper.		require_once JPATH_COMPONENT.'/helpers/categories.php';		// Get the results for each action.		$canDo = CategoriesHelper::getActions($component, $categoryId);		// If a component categories title string is present, let's use it.		if ($lang->hasKey($component_title_key = strtoupper($component.($section?"_$section":'')).'_CATEGORIES_TITLE'))		{			$title = JText::_($component_title_key);		}		// Else if the component section string exits, let's use it		elseif ($lang->hasKey($component_section_key = strtoupper($component.($section?"_$section":''))))		{			$title = JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', $this->escape(JText::_($component_section_key)));		}		// Else use the base title		else		{			$title = JText::_('COM_CATEGORIES_CATEGORIES_BASE_TITLE');		}		// Load specific css component		JHtml::_('stylesheet', $component.'/administrator/categories.css', array(), true);		// Prepare the toolbar.		JToolbarHelper::title($title, 'categories '.substr($component, 4).($section?"-$section":'').'-categories');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories($component, 'core.create'))) > 0 )		{			JToolbarHelper::addNew('category.add');		}		if ($canDo->get('core.edit') || $canDo->get('core.edit.own'))		{			JToolbarHelper::editList('category.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('categories.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('categories.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('categories.archive');		}		if (JFactory::getUser()->authorise('core.admin'))		{			JToolbarHelper::checkin('categories.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete', $component))		{			JToolbarHelper::deleteList('', 'categories.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('categories.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::custom('categories.rebuild', 'refresh.png', 'refresh_f2.png', 'JTOOLBAR_REBUILD', false);			JToolbarHelper::preferences($component);		}		// Compute the ref_key if it does exist in the component		if (!$lang->hasKey($ref_key = strtoupper($component.($section?"_$section":'')).'_CATEGORIES_HELP_KEY'))		{			$ref_key = 'JHELP_COMPONENTS_'.strtoupper(substr($component, 4).($section?"_$section":'')).'_CATEGORIES';		}		// Get help for the categories view for the component by		// -remotely searching in a language defined dedicated URL: *component*_HELP_URL		// -locally  searching in a component help file if helpURL param exists in the component and is set to ''		// -remotely searching in a component URL if helpURL param exists in the component and is NOT set to ''		if ($lang->hasKey($lang_help_url = strtoupper($component).'_HELP_URL'))		{			$debug = $lang->setDebug(false);			$url = JText::_($lang_help_url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($ref_key, JComponentHelper::getParams($component)->exists('helpURL'), $url);		JHtmlSidebar::setAction('index.php?option=com_categories&view=categories');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.lft' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JFormHelper::loadFieldClass('user');/** * Supports an modal select of user that have access to com_messages * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class JFormFieldUserMessages extends JFormFieldUser{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	public $type = 'UserMessages';	/**	 * Method to get the filtering groups (null means no filtering)	 *	 * @return  array|null	array of filtering groups or null.	 * @since   1.6	 */	protected function getGroups()	{		// Compute usergroups		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('id')			->from('#__usergroups');		$db->setQuery($query);		try		{			$groups = $db->loadColumn();		}		catch (RuntimeException $e)		{			JError::raiseNotice(500, $e->getMessage());			return null;		}		foreach ($groups as $i => $group)		{			if (JAccess::checkGroup($group, 'core.admin'))			{				continue;			}			if (!JAccess::checkGroup($group, 'core.manage', 'com_messages'))			{				unset($groups[$i]);				continue;			}			if (!JAccess::checkGroup($group, 'core.login.admin'))			{				unset($groups[$i]);				continue;			}		}		return array_values($groups);	}	/**	 * Method to get the users to exclude from the list of users	 *	 * @return  array|null array of users to exclude or null to to not exclude them	 * @since   1.6	 */	protected function getExcluded()	{		return array(JFactory::getUser()->id);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags view class for the Tags package. * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  This object to support chaining.	 *	 * @since   3.1	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/tags.php';		$view   = $this->input->get('view', 'tags');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'tag' && $layout == 'edit' && !$this->checkEditId('com_tags.edit.tag', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_tags&view=tags', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_NEWSFEEDS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_NEWSFEEDS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_newsfeeds');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('newsfeed.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_stats_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  mod_stats_admin * @since       3.0 */class ModStatsHelper{	/**	 * Method to retrieve information about the site	 *	 * @param   JObject  $params  Params object	 *	 * @return  array  Array containing site information	 *	 * @since   3.0	 */	public static function getStats(&$params)	{		$app   = JFactory::getApplication();		$db    = JFactory::getDbo();		$rows  = array();		$query = $db->getQuery(true);		$serverinfo = $params->get('serverinfo');		$siteinfo   = $params->get('siteinfo');		$counter    = $params->get('counter');		$increase   = $params->get('increase');		$i = 0;		if ($serverinfo)		{			$rows[$i]        = new stdClass;			$rows[$i]->title = JText::_('MOD_STATS_OS');			$rows[$i]->icon  = 'screen';			$rows[$i]->data  = substr(php_uname(), 0, 7);			$i++;			$rows[$i]        = new stdClass;			$rows[$i]->title = JText::_('MOD_STATS_PHP');			$rows[$i]->icon  = 'cogs';			$rows[$i]->data  = phpversion();			$i++;			$rows[$i]        = new stdClass;			$rows[$i]->title = JText::_($db->name);			$rows[$i]->icon  = 'database';			$rows[$i]->data  = $db->getVersion();			$i++;			$rows[$i]        = new stdClass;			$rows[$i]->title = JTEXT::_('MOD_STATS_TIME');			$rows[$i]->icon  = 'clock';			$rows[$i]->data  = JHtml::_('date', 'now', 'H:i');			$i++;			$rows[$i]        = new stdClass;			$rows[$i]->title = JText::_('MOD_STATS_CACHING');			$rows[$i]->icon  = 'dashboard';			$rows[$i]->data  = $app->getCfg('caching') ? JText::_('JENABLED') : JText::_('JDISABLED');			$i++;			$rows[$i]        = new stdClass;			$rows[$i]->title = JText::_('MOD_STATS_GZIP');			$rows[$i]->icon  = 'lightning';			$rows[$i]->data  = $app->getCfg('gzip') ? JText::_('JENABLED') : JText::_('JDISABLED');			$i++;		}		if ($siteinfo)		{			$query->select('COUNT(id) AS count_users')				->from('#__users');			$db->setQuery($query);			$users = $db->loadResult();			$query->clear()				->select('COUNT(id) AS count_items')				->from('#__content')				->where('state = 1');			$db->setQuery($query);			$items = $db->loadResult();			$query->clear()				->select('COUNT(id) AS count_links ')				->from('#__weblinks')				->where('state = 1');			$db->setQuery($query);			$links = $db->loadResult();			if ($users)			{				$rows[$i]        = new stdClass;				$rows[$i]->title = JText::_('MOD_STATS_USERS');				$rows[$i]->icon  = 'users';				$rows[$i]->data  = $users;				$i++;			}			if ($items)			{				$rows[$i]        = new stdClass;				$rows[$i]->title = JText::_('MOD_STATS_ARTICLES');				$rows[$i]->icon  = 'file';				$rows[$i]->data  = $items;				$i++;			}			if ($links)			{				$rows[$i]        = new stdClass;				$rows[$i]->title = JText::_('MOD_STATS_WEBLINKS');				$rows[$i]->icon  = 'out-2';				$rows[$i]->data  = $links;				$i++;			}		}		if ($counter)		{			$query->clear()				->select('SUM(hits) AS count_hits')				->from('#__content')				->where('state = 1');			$db->setQuery($query);			$hits = $db->loadResult();			if ($hits)			{				$rows[$i]        = new stdClass;				$rows[$i]->title = JText::_('MOD_STATS_ARTICLES_VIEW_HITS');				$rows[$i]->icon  = 'eye';				$rows[$i]->data  = $hits + $increase;			}		}		return $rows;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :			if (!isset($this->items[$this->parent->id][$id + 1]))			{				$class = ' class="last"';			}			?>			<div <?php echo $class; ?> >			<?php $class = ''; ?>				<h3 class="page-header item-title">					<a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($item->id)); ?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_CONTACT_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">							<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">						<?php						$this->items[$item->id] = $item->getChildren();						$this->parent = $item;						$this->maxLevelcat--;						echo $this->loadTemplate('items');						$this->parent = $item->getParent();						$this->maxLevelcat++;						?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds */class NewsfeedsTableNewsfeed extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__newsfeeds', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_newsfeeds.newsfeed';	}	/**	 * Overloaded bind function to pre-process the params.	 *	 * @param   array  Named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see     JTable:bind	 * @since   1.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 */	public function check()	{		// Check for valid name.		if (trim($this->name) == '')		{			$this->setError(JText::_('COM_NEWSFEEDS_WARNING_PROVIDE_VALID_NAME'));			return false;		}		if (empty($this->alias))		{			$this->alias = $this->name;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ((int) $this->publish_down > 0 && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		// clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// only process if not empty			$bad_characters = array("\n", "\r", "\"", "<", ">"); // array of characters to remove			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey); // remove bad characters			$keys = explode(',', $after_clean); // create array using commas as delimiter			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key)) {  // ignore blank keywords					$clean_keys[] = trim($key);				}			}			$this->metakey = implode(", ", $clean_keys); // put array back together delimited by ", "		}		// clean up description -- eliminate quotes and <> brackets		if (!empty($this->metadesc))		{			// only process if not empty			$bad_characters = array("\"", "<", ">");			$this->metadesc = JString::str_ireplace($bad_characters, "", $this->metadesc);		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		$this->tagsHelper->typeAlias = 'com_newsfeeds.newsfeed';		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Overriden JTable::store to set modified data.	 *	 * @param   boolean	True to update fields even if they are null.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified		= $date->toSql();			$this->modified_by	= $user->get('id');		}		else		{			// New newsfeed. A feed created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Verify that the alias is unique		$table = JTable::getInstance('Newsfeed', 'NewsfeedsTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_NEWSFEEDS_ERROR_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->typeAlias = 'com_newsfeeds.newsfeed';		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state',	'com_plugins');$saveOrder	= $listOrder == 'ordering';?><form action="<?php echo JRoute::_('index.php?option=com_plugins&view=plugins'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_PLUGINS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', PluginsHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_folder">				<?php echo JText::_('COM_PLUGINS_OPTION_FOLDER'); ?>			</label>			<select name="filter_folder" class="inputbox" id="filter_folder">				<option value=""><?php echo JText::_('COM_PLUGINS_OPTION_FOLDER');?></option>				<?php echo JHtml::_('select.options', PluginsHelper::folderOptions(), 'value', 'text', $this->state->get('filter.folder'));?>			</select>            <label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_NAME_HEADING', 'name', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'JENABLED', 'enabled', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'plugins.saveorder'); ?>					<?php endif; ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_FOLDER_HEADING', 'folder', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_ELEMENT_HEADING', 'element', $listDirn, $listOrder); ?>				</th>                <th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'extension_id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'ordering');			$canEdit    = $user->authorise('core.edit',       'com_plugins');			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_plugins') && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->extension_id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'plugins.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_plugins&task=plugin.edit&extension_id='.(int) $item->extension_id); ?>">							<?php echo $item->name; ?></a>					<?php else : ?>							<?php echo $item->name; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->enabled, $i, 'plugins.', $canChange); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->folder == $item->folder), 'plugins.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->folder == $item->folder), 'plugins.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->folder == $item->folder), 'plugins.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->folder == $item->folder), 'plugins.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="nowrap center">					<?php echo $this->escape($item->folder);?>				</td>				<td class="nowrap center">					<?php echo $this->escape($item->element);?>				</td>                <td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo (int) $item->extension_id;?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');$published	= $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_TAGS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_TAGS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-tag-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('tag.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a one line text field. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.text.html#input.text * @since       11.1 */class JFormFieldNote extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $type = 'Note';	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   11.1	 */	protected function getLabel()	{		if (empty($this->element['label']) && empty($this->element['description']))		{			return '';		}		$title = $this->element['label'] ? (string) $this->element['label'] : ($this->element['title'] ? (string) $this->element['title'] : '');		$heading = $this->element['heading'] ? (string) $this->element['heading'] : 'h4';		$description = (string) $this->element['description'];		$class = $this->element['class'] ? ' class="' . trim((string) $this->element['class']) . '"' : '';		$close = (string) $this->element['close'];		$html = array();		if ($close)		{			$close = $close == 'true' ? 'alert' : $close;			$html[] = '<button type="button" class="close" data-dismiss="' . $close . '">&times;</button>';		}		$html[] = !empty($title) ? '<' . $heading . '>' . JText::_($title) . '</' . $heading . '>' : '';		$html[] = !empty($description) ? JText::_($description) : '';		return '</div><div ' . $class . '>' . implode('', $html);	}	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		return '';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Usergroup table class. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableUsergroup extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__usergroups', 'id', $db);	}	/**	 * Method to check the current record to save	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		// Validate the title.		if ((trim($this->title)) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_USERGROUP_TITLE'));			return false;		}		// Check for a duplicate parent_id, title.		// There is a unique index on the (parent_id, title) field in the table.		$db = $this->_db;		$query = $db->getQuery(true)			->select('COUNT(title)')			->from($this->_tbl)			->where('title = ' . $db->quote(trim($this->title)))			->where('parent_id = ' . (int) $this->parent_id)			->where('id <> ' . (int) $this->id);		$db->setQuery($query);		if ($db->loadResult() > 0)		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_USERGROUP_TITLE_EXISTS'));			return false;		}		return true;	}	/**	 * Method to recursively rebuild the nested set tree.	 *	 * @param   integer  $parent_id  The root of the tree to rebuild.	 * @param   integer  $left       The left id to start with in building the tree.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function rebuild($parent_id = 0, $left = 0)	{		// Get the database object		$db = $this->_db;		// Get all children of this node		$db->setQuery('SELECT id FROM ' . $this->_tbl . ' WHERE parent_id=' . (int) $parent_id . ' ORDER BY parent_id, title');		$children = $db->loadColumn();		// The right value of this node is the left value + 1		$right = $left + 1;		// Execute this function recursively over all children		for ($i = 0, $n = count($children); $i < $n; $i++)		{			// $right is the current right value, which is incremented on recursion return			$right = $this->rebuild($children[$i], $right);			// If there is an update failure, return false to break out of the recursion			if ($right === false)			{				return false;			}		}		// We've got the left value, and now that we've processed		// the children of this node we also know the right value		$db->setQuery('UPDATE ' . $this->_tbl . ' SET lft=' . (int) $left . ', rgt=' . (int) $right . ' WHERE id=' . (int) $parent_id);		// If there is an update failure, return false to break out of the recursion		if (!$db->execute())		{			return false;		}		// Return the right value of this node + 1		return $right + 1;	}	/**	 * Inserts a new row if id is zero or updates an existing row in the database table	 *	 * @param   boolean  $updateNulls  If false, null object variables are not updated	 *	 * @return  boolean  True if successful, false otherwise and an internal error message is set	 *	 * @since   11.1	 */	public function store($updateNulls = false)	{		if ($result = parent::store($updateNulls))		{			// Rebuild the nested set tree.			$this->rebuild();		}		return $result;	}	/**	 * Delete this object and its dependencies	 *	 * @param   integer  $oid  The primary key of the user group to delete.	 *	 * @return  mixed  Boolean or Exception.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 * @throws  UnexpectedValueException on data error.	 */	public function delete($oid = null)	{		if ($oid)		{			$this->load($oid);		}		if ($this->id == 0)		{			throw new UnexpectedValueException('Global Category not found');		}		if ($this->parent_id == 0)		{			throw new UnexpectedValueException('Root categories cannot be deleted.');		}		if ($this->lft == 0 || $this->rgt == 0)		{			throw new UnexpectedValueException('Left-Right data inconsistency. Cannot delete usergroup.');		}		$db = $this->_db;		// Select the usergroup ID and its children		$query = $db->getQuery(true)			->select($db->quoteName('c.id'))			->from($db->quoteName($this->_tbl) . 'AS c')			->where($db->quoteName('c.lft') . ' >= ' . (int) $this->lft)			->where($db->quoteName('c.rgt') . ' <= ' . (int) $this->rgt);		$db->setQuery($query);		$ids = $db->loadColumn();		if (empty($ids))		{			throw new UnexpectedValueException('Left-Right data inconsistency. Cannot delete usergroup.');		}		// Delete the category dependencies		// @todo Remove all related threads, posts and subscriptions		// Delete the usergroup and its children		$query->clear()			->delete($db->quoteName($this->_tbl))			->where($db->quoteName('id') . ' IN (' . implode(',', $ids) . ')');		$db->setQuery($query);		$db->execute();		// Delete the usergroup in view levels		$replace = array();		foreach ($ids as $id)		{			$replace[] = ',' . $db->quote("[$id,") . ',' . $db->quote("[") . ')';			$replace[] = ',' . $db->quote(",$id,") . ',' . $db->quote(",") . ')';			$replace[] = ',' . $db->quote(",$id]") . ',' . $db->quote("]") . ')';			$replace[] = ',' . $db->quote("[$id]") . ',' . $db->quote("[]") . ')';		}		// SQLSsrv change. Alternative for regexp		$query->clear()			->select('id, rules')			->from('#__viewlevels');		$db->setQuery($query);		$rules = $db->loadObjectList();		$match_ids = array();		foreach ($rules as $rule)		{			foreach ($ids as $id)			{				if (strstr($rule->rules, '[' . $id) || strstr($rule->rules, ',' . $id) || strstr($rule->rules, $id . ']'))				{					$match_ids[] = $rule->id;				}			}		}		if (!empty($match_ids))		{			$query = $db->getQuery(true)				->set('rules=' . str_repeat('replace(', 4 * count($ids)) . 'rules' . implode('', $replace))				->update('#__viewlevels')				->where('id IN (' . implode(',', $match_ids) . ')');			$db->setQuery($query);			$db->execute();		}		// Delete the user to usergroup mappings for the group(s) from the database.		$query->clear()			->delete($db->quoteName('#__user_usergroup_map'))			->where($db->quoteName('group_id') . ' IN (' . implode(',', $ids) . ')');		$db->setQuery($query);		$db->execute();		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');jimport('joomla.filesystem.path');jimport('joomla.base.adapter');/** * Joomla base installer class * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstaller extends JAdapter{	/**	 * Array of paths needed by the installer	 *	 * @var    array	 * @since  12.1	 */	protected $paths = array();	/**	 * True if package is an upgrade	 *	 * @var    boolean	 * @since  12.1	 */	protected $upgrade = null;	/**	 * The manifest trigger class	 *	 * @var    object	 * @since  3.1	 */	public $manifestClass = null;	/**	 * True if existing files can be overwritten	 * @var    boolean	 * @since  12.1	 */	protected $overwrite = false;	/**	 * Stack of installation steps	 * - Used for installation rollback	 *	 * @var    array	 * @since  12.1	 */	protected $stepStack = array();	/**	 * Extension Table Entry	 *	 * @var    JTableExtension	 * @since  3.1	 */	public $extension = null;	/**	 * The output from the install/uninstall scripts	 *	 * @var    string	 * @since  3.1	 * */	public $message = null;	/**	 * The installation manifest XML object	 *	 * @var    object	 * @since  3.1	 */	public $manifest = null;	/**	 * The extension message that appears	 *	 * @var    string	 * @since  3.1	 */	protected $extension_message = null;	/**	 * The redirect URL if this extension (can be null if no redirect)	 *	 * @var    string	 * @since  3.1	 */	protected $redirect_url = null;	/**	 * @var    JInstaller  JInstaller instance container.	 * @since  3.1	 */	protected static $instance;	/**	 * Constructor	 *	 * @since   3.1	 */	public function __construct()	{		parent::__construct(__DIR__, 'JInstallerAdapter', __DIR__ . '/adapter');		// Override the default adapter folder		$this->_adapterfolder = 'adapter';	}	/**	 * Returns the global Installer object, only creating it	 * if it doesn't already exist.	 *	 * @return  JInstaller  An installer object	 *	 * @since   3.1	 */	public static function getInstance()	{		if (!isset(self::$instance))		{			self::$instance = new JInstaller;		}		return self::$instance;	}	/**	 * Get the allow overwrite switch	 *	 * @return  boolean  Allow overwrite switch	 *	 * @since   3.1	 */	public function isOverwrite()	{		return $this->overwrite;	}	/**	 * Set the allow overwrite switch	 *	 * @param   boolean  $state  Overwrite switch state	 *	 * @return  boolean  True it state is set, false if it is not	 *	 * @since   3.1	 */	public function setOverwrite($state = false)	{		$tmp = $this->overwrite;		if ($state)		{			$this->overwrite = true;		}		else		{			$this->overwrite = false;		}		return $tmp;	}	/**	 * Get the redirect location	 *	 * @return  string  Redirect location (or null)	 *	 * @since   3.1	 */	public function getRedirectURL()	{		return $this->redirect_url;	}	/**	 * Set the redirect location	 *	 * @param   string  $newurl  New redirect location	 *	 * @return  void	 *	 * @since   3.1	 */	public function setRedirectURL($newurl)	{		$this->redirect_url = $newurl;	}	/**	 * Get the upgrade switch	 *	 * @return  boolean	 *	 * @since   3.1	 */	public function isUpgrade()	{		return $this->upgrade;	}	/**	 * Set the upgrade switch	 *	 * @param   boolean  $state  Upgrade switch state	 *	 * @return  boolean  True if upgrade, false otherwise	 *	 * @since   3.1	 */	public function setUpgrade($state = false)	{		$tmp = $this->upgrade;		if ($state)		{			$this->upgrade = true;		}		else		{			$this->upgrade = false;		}		return $tmp;	}	/**	 * Get the installation manifest object	 *	 * @return  object  Manifest object	 *	 * @since   3.1	 */	public function getManifest()	{		if (!is_object($this->manifest))		{			$this->findManifest();		}		return $this->manifest;	}	/**	 * Get an installer path by name	 *	 * @param   string  $name     Path name	 * @param   string  $default  Default value	 *	 * @return  string  Path	 *	 * @since   3.1	 */	public function getPath($name, $default = null)	{		return (!empty($this->paths[$name])) ? $this->paths[$name] : $default;	}	/**	 * Sets an installer path by name	 *	 * @param   string  $name   Path name	 * @param   string  $value  Path	 *	 * @return  void	 *	 * @since   3.1	 */	public function setPath($name, $value)	{		$this->paths[$name] = $value;	}	/**	 * Pushes a step onto the installer stack for rolling back steps	 *	 * @param   array  $step  Installer step	 *	 * @return  void	 *	 * @since   3.1	 */	public function pushStep($step)	{		$this->stepStack[] = $step;	}	/**	 * Installation abort method	 *	 * @param   string  $msg   Abort message from the installer	 * @param   string  $type  Package type if defined	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 * @throws  RuntimeException	 */	public function abort($msg = null, $type = null)	{		$retval = true;		$step = array_pop($this->stepStack);		// Raise abort warning		if ($msg)		{			JLog::add($msg, JLog::WARNING, 'jerror');		}		while ($step != null)		{			switch ($step['type'])			{				case 'file':					// Remove the file					$stepval = JFile::delete($step['path']);					break;				case 'folder':					// Remove the folder					$stepval = JFolder::delete($step['path']);					break;				case 'query':					// Placeholder in case this is necessary in the future					// $stepval is always false because if this step was called it invariably failed					$stepval = false;					break;				case 'extension':					// Get database connector object					$db = $this->getDBO();					$query = $db->getQuery(true);					// Remove the entry from the #__extensions table					$query->delete($db->quoteName('#__extensions'))						->where($db->quoteName('extension_id') . ' = ' . (int) $step['id']);					$db->setQuery($query);					$stepval = $db->execute();					break;				default:					if ($type && is_object($this->_adapters[$type]))					{						// Build the name of the custom rollback method for the type						$method = '_rollback_' . $step['type'];						// Custom rollback method handler						if (method_exists($this->_adapters[$type], $method))						{							$stepval = $this->_adapters[$type]->$method($step);						}					}					else					{						// Set it to false						$stepval = false;					}					break;			}			// Only set the return value if it is false			if ($stepval === false)			{				$retval = false;			}			// Get the next step and continue			$step = array_pop($this->stepStack);		}		$conf = JFactory::getConfig();		$debug = $conf->get('debug');		if ($debug)		{			throw new RuntimeException('Installation unexpectedly terminated: ' . $msg, 500);		}		return $retval;	}	// Adapter functions	/**	 * Package installation method	 *	 * @param   string  $path  Path to package source folder	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function install($path = null)	{		if ($path && JFolder::exists($path))		{			$this->setPath('source', $path);		}		else		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_NOINSTALLPATH'));			return false;		}		if (!$this->setupInstall())		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_DETECTMANIFEST'));			return false;		}		$type = (string) $this->manifest->attributes()->type;		if (is_object($this->_adapters[$type]))		{			// Add the languages from the package itself			if (method_exists($this->_adapters[$type], 'loadLanguage'))			{				$this->_adapters[$type]->loadLanguage($path);			}			// Fire the onExtensionBeforeInstall event.			JPluginHelper::importPlugin('extension');			$dispatcher = JEventDispatcher::getInstance();			$dispatcher->trigger(				'onExtensionBeforeInstall',				array('method' => 'install', 'type' => $type, 'manifest' => $this->manifest, 'extension' => 0)			);			// Run the install			$result = $this->_adapters[$type]->install();			// Fire the onExtensionAfterInstall			$dispatcher->trigger(				'onExtensionAfterInstall',				array('installer' => clone $this, 'eid' => $result)			);			if ($result !== false)			{				return true;			}			else			{				return false;			}		}		return false;	}	/**	 * Discovered package installation method	 *	 * @param   integer  $eid  Extension ID	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function discover_install($eid = null)	{		if ($eid)		{			$this->extension = JTable::getInstance('extension');			if (!$this->extension->load($eid))			{				$this->abort(JText::_('JLIB_INSTALLER_ABORT_LOAD_DETAILS'));				return false;			}			if ($this->extension->state != -1)			{				$this->abort(JText::_('JLIB_INSTALLER_ABORT_ALREADYINSTALLED'));				return false;			}			// Lazy load the adapter			if (!isset($this->_adapters[$this->extension->type]) || !is_object($this->_adapters[$this->extension->type]))			{				if (!$this->setAdapter($this->extension->type))				{					return false;				}			}			if (is_object($this->_adapters[$this->extension->type]))			{				if (method_exists($this->_adapters[$this->extension->type], 'discover_install'))				{					// Add the languages from the package itself					if (method_exists($this->_adapters[$this->extension->type], 'loadLanguage'))					{						$this->_adapters[$this->extension->type]->loadLanguage();					}					// Fire the onExtensionBeforeInstall event.					JPluginHelper::importPlugin('extension');					$dispatcher = JEventDispatcher::getInstance();					$dispatcher->trigger(						'onExtensionBeforeInstall',						array(							'method' => 'discover_install',							'type' => $this->extension->get('type'),							'manifest' => null,							'extension' => $this->extension->get('extension_id')						)					);					// Run the install					$result = $this->_adapters[$this->extension->type]->discover_install();					// Fire the onExtensionAfterInstall					$dispatcher->trigger(						'onExtensionAfterInstall',						array('installer' => clone $this, 'eid' => $result)					);					if ($result !== false)					{						return true;					}					else					{						return false;					}				}				else				{					$this->abort(JText::_('JLIB_INSTALLER_ABORT_METHODNOTSUPPORTED'));					return false;				}			}			return false;		}		else		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_EXTENSIONNOTVALID'));			return false;		}	}	/**	 * Extension discover method	 * Asks each adapter to find extensions	 *	 * @return  array  JExtension	 *	 * @since   3.1	 */	public function discover()	{		$this->loadAllAdapters();		$results = array();		foreach ($this->_adapters as $adapter)		{			// Joomla! 1.5 installation adapter legacy support			if (method_exists($adapter, 'discover'))			{				$tmp = $adapter->discover();				// If its an array and has entries				if (is_array($tmp) && count($tmp))				{					// Merge it into the system					$results = array_merge($results, $tmp);				}			}		}		return $results;	}	/**	 * Package update method	 *	 * @param   string  $path  Path to package source folder	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function update($path = null)	{		if ($path && JFolder::exists($path))		{			$this->setPath('source', $path);		}		else		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_NOUPDATEPATH'));			return false;		}		if (!$this->setupInstall())		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_DETECTMANIFEST'));			return false;		}		$type = (string) $this->manifest->attributes()->type;		if (is_object($this->_adapters[$type]))		{			// Add the languages from the package itself			if (method_exists($this->_adapters[$type], 'loadLanguage'))			{				$this->_adapters[$type]->loadLanguage($path);			}			// Fire the onExtensionBeforeUpdate event.			JPluginHelper::importPlugin('extension');			$dispatcher = JEventDispatcher::getInstance();			$dispatcher->trigger('onExtensionBeforeUpdate', array('type' => $type, 'manifest' => $this->manifest));			// Run the update			$result = $this->_adapters[$type]->update();			// Fire the onExtensionAfterUpdate			$dispatcher->trigger(				'onExtensionAfterUpdate',				array('installer' => clone $this, 'eid' => $result)			);			if ($result !== false)			{				return true;			}			else			{				return false;			}		}		return false;	}	/**	 * Package uninstallation method	 *	 * @param   string   $type        Package type	 * @param   mixed    $identifier  Package identifier for adapter	 * @param   integer  $cid         Application ID; deprecated in 1.6	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function uninstall($type, $identifier, $cid = 0)	{		if (!isset($this->_adapters[$type]) || !is_object($this->_adapters[$type]))		{			if (!$this->setAdapter($type))			{				// We failed to get the right adapter				return false;			}		}		if (is_object($this->_adapters[$type]))		{			// We don't load languages here, we get the extension adapter to work it out			// Fire the onExtensionBeforeUninstall event.			JPluginHelper::importPlugin('extension');			$dispatcher = JEventDispatcher::getInstance();			$dispatcher->trigger('onExtensionBeforeUninstall', array('eid' => $identifier));			// Run the uninstall			$result = $this->_adapters[$type]->uninstall($identifier);			// Fire the onExtensionAfterInstall			$dispatcher->trigger(				'onExtensionAfterUninstall',				array('installer' => clone $this, 'eid' => $identifier, 'result' => $result)			);			return $result;		}		return false;	}	/**	 * Refreshes the manifest cache stored in #__extensions	 *	 * @param   integer  $eid  Extension ID	 *	 * @return  mixed  void on success, false on error @todo missing return value ?	 *	 * @since   3.1	 */	public function refreshManifestCache($eid)	{		if ($eid)		{			$this->extension = JTable::getInstance('extension');			if (!$this->extension->load($eid))			{				$this->abort(JText::_('JLIB_INSTALLER_ABORT_LOAD_DETAILS'));				return false;			}			if ($this->extension->state == -1)			{				$this->abort(JText::_('JLIB_INSTALLER_ABORT_REFRESH_MANIFEST_CACHE'));				return false;			}			// Lazy load the adapter			if (!isset($this->_adapters[$this->extension->type]) || !is_object($this->_adapters[$this->extension->type]))			{				if (!$this->setAdapter($this->extension->type))				{					return false;				}			}			if (is_object($this->_adapters[$this->extension->type]))			{				if (method_exists($this->_adapters[$this->extension->type], 'refreshManifestCache'))				{					$result = $this->_adapters[$this->extension->type]->refreshManifestCache();					if ($result !== false)					{						return true;					}					else					{						return false;					}				}				else				{					$this->abort(JText::sprintf('JLIB_INSTALLER_ABORT_METHODNOTSUPPORTED_TYPE', $this->extension->type));					return false;				}			}			return false;		}		else		{			$this->abort(JText::_('JLIB_INSTALLER_ABORT_REFRESH_MANIFEST_CACHE_VALID'));			return false;		}	}	// Utility functions	/**	 * Prepare for installation: this method sets the installation directory, finds	 * and checks the installation file and verifies the installation type.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function setupInstall()	{		// We need to find the installation manifest file		if (!$this->findManifest())		{			return false;		}		// Load the adapter(s) for the install manifest		$type = (string) $this->manifest->attributes()->type;		// Lazy load the adapter		if (!isset($this->_adapters[$type]) || !is_object($this->_adapters[$type]))		{			if (!$this->setAdapter($type))			{				return false;			}		}		return true;	}	/**	 * Backward compatible method to parse through a queries element of the	 * installation manifest file and take appropriate action.	 *	 * @param   SimpleXMLElement  $element  The XML node to process	 *	 * @return  mixed  Number of queries processed or False on error	 *	 * @since   3.1	 */	public function parseQueries(SimpleXMLElement $element)	{		// Get the database connector object		$db = & $this->_db;		if (!$element || !count($element->children()))		{			// Either the tag does not exist or has no children therefore we return zero files processed.			return 0;		}		// Get the array of query nodes to process		$queries = $element->children();		if (count($queries) == 0)		{			// No queries to process			return 0;		}		// Process each query in the $queries array (children of $tagName).		foreach ($queries as $query)		{			$db->setQuery($query->data());			if (!$db->execute())			{				JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');				return false;			}		}		return (int) count($queries);	}	/**	 * Method to extract the name of a discreet installation sql file from the installation manifest file.	 *	 * @param   object  $element  The XML node to process	 *	 * @return  mixed  Number of queries processed or False on error	 *	 * @since   3.1	 */	public function parseSQLFiles($element)	{		if (!$element || !count($element->children()))		{			// The tag does not exist.			return 0;		}		$queries = array();		$db = & $this->_db;		$dbDriver = strtolower($db->name);		if ($dbDriver == 'mysqli')		{			$dbDriver = 'mysql';		}		// Get the name of the sql file to process		foreach ($element->children() as $file)		{			$fCharset = (strtolower($file->attributes()->charset) == 'utf8') ? 'utf8' : '';			$fDriver = strtolower($file->attributes()->driver);			if ($fDriver == 'mysqli')			{				$fDriver = 'mysql';			}			if ($fCharset == 'utf8' && $fDriver == $dbDriver)			{				$sqlfile = $this->getPath('extension_root') . '/' . $file;				// Check that sql files exists before reading. Otherwise raise error for rollback				if (!file_exists($sqlfile))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');					return false;				}				$buffer = file_get_contents($sqlfile);				// Graceful exit and rollback if read not successful				if ($buffer === false)				{					JLog::add(JText::_('JLIB_INSTALLER_ERROR_SQL_READBUFFER'), JLog::WARNING, 'jerror');					return false;				}				// Create an array of queries from the sql file				$queries = JDatabaseDriver::splitSql($buffer);				if (count($queries) == 0)				{					// No queries to process					return 0;				}				// Process each query in the $queries array (split out of sql file).				foreach ($queries as $query)				{					$query = trim($query);					if ($query != '' && $query{0} != '#')					{						$db->setQuery($query);						if (!$db->execute())						{							JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');							return false;						}					}				}			}		}		return (int) count($queries);	}	/**	 * Set the schema version for an extension by looking at its latest update	 *	 * @param   SimpleXMLElement  $schema  Schema Tag	 * @param   integer           $eid     Extension ID	 *	 * @return  void	 *	 * @since   3.1	 */	public function setSchemaVersion(SimpleXMLElement $schema, $eid)	{		if ($eid && $schema)		{			$db = JFactory::getDbo();			$schemapaths = $schema->children();			if (!$schemapaths)			{				return;			}			if (count($schemapaths))			{				$dbDriver = strtolower($db->name);				if ($dbDriver == 'mysqli')				{					$dbDriver = 'mysql';				}				$schemapath = '';				foreach ($schemapaths as $entry)				{					$attrs = $entry->attributes();					if ($attrs['type'] == $dbDriver)					{						$schemapath = $entry;						break;					}				}				if (strlen($schemapath))				{					$files = str_replace('.sql', '', JFolder::files($this->getPath('extension_root') . '/' . $schemapath, '\.sql$'));					usort($files, 'version_compare');					// Update the database					$query = $db->getQuery(true)						->delete('#__schemas')						->where('extension_id = ' . $eid);					$db->setQuery($query);					if ($db->execute())					{						$query->clear()							->insert($db->quoteName('#__schemas'))							->columns(array($db->quoteName('extension_id'), $db->quoteName('version_id')))							->values($eid . ', ' . $db->quote(end($files)));						$db->setQuery($query);						$db->execute();					}				}			}		}	}	/**	 * Method to process the updates for an item	 *	 * @param   SimpleXMLElement  $schema  The XML node to process	 * @param   integer           $eid     Extension Identifier	 *	 * @return  boolean           Result of the operations	 *	 * @since   3.1	 */	public function parseSchemaUpdates(SimpleXMLElement $schema, $eid)	{		$files = array();		$update_count = 0;		// Ensure we have an XML element and a valid extension id		if ($eid && $schema)		{			$db = JFactory::getDbo();			$schemapaths = $schema->children();			if (count($schemapaths))			{				$dbDriver = strtolower($db->name);				if ($dbDriver == 'mysqli')				{					$dbDriver = 'mysql';				}				$schemapath = '';				foreach ($schemapaths as $entry)				{					$attrs = $entry->attributes();					if ($attrs['type'] == $dbDriver)					{						$schemapath = $entry;						break;					}				}				if (strlen($schemapath))				{					$files = str_replace('.sql', '', JFolder::files($this->getPath('extension_root') . '/' . $schemapath, '\.sql$'));					usort($files, 'version_compare');					if (!count($files))					{						return false;					}					$query = $db->getQuery(true)						->select('version_id')						->from('#__schemas')						->where('extension_id = ' . $eid);					$db->setQuery($query);					$version = $db->loadResult();					if ($version)					{						// We have a version!						foreach ($files as $file)						{							if (version_compare($file, $version) > 0)							{								$buffer = file_get_contents($this->getPath('extension_root') . '/' . $schemapath . '/' . $file . '.sql');								// Graceful exit and rollback if read not successful								if ($buffer === false)								{									JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_SQL_READBUFFER'), JLog::WARNING, 'jerror');									return false;								}								// Create an array of queries from the sql file								$queries = JDatabaseDriver::splitSql($buffer);								if (count($queries) == 0)								{									// No queries to process									continue;								}								// Process each query in the $queries array (split out of sql file).								foreach ($queries as $query)								{									$query = trim($query);									if ($query != '' && $query{0} != '#')									{										$db->setQuery($query);										if (!$db->execute())										{											JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');											return false;										}										$update_count++;									}								}							}						}					}					// Update the database					$query = $db->getQuery(true)						->delete('#__schemas')						->where('extension_id = ' . $eid);					$db->setQuery($query);					if ($db->execute())					{						$query->clear()							->insert($db->quoteName('#__schemas'))							->columns(array($db->quoteName('extension_id'), $db->quoteName('version_id')))							->values($eid . ', ' . $db->quote(end($files)));						$db->setQuery($query);						$db->execute();					}				}			}		}		return $update_count;	}	/**	 * Method to parse through a files element of the installation manifest and take appropriate	 * action.	 *	 * @param   SimpleXMLElement  $element   The XML node to process	 * @param   integer           $cid       Application ID of application to install to	 * @param   array             $oldFiles  List of old files (SimpleXMLElement's)	 * @param   array             $oldMD5    List of old MD5 sums (indexed by filename with value as MD5)	 *	 * @return  boolean      True on success	 *	 * @since   3.1	 */	public function parseFiles(SimpleXMLElement $element, $cid = 0, $oldFiles = null, $oldMD5 = null)	{		// Get the array of file nodes to process; we checked whether this had children above.		if (!$element || !count($element->children()))		{			// Either the tag does not exist or has no children (hence no files to process) therefore we return zero files processed.			return 0;		}		$copyfiles = array();		// Get the client info		$client = JApplicationHelper::getClientInfo($cid);		/*		 * Here we set the folder we are going to remove the files from.		 */		if ($client)		{			$pathname = 'extension_' . $client->name;			$destination = $this->getPath($pathname);		}		else		{			$pathname = 'extension_root';			$destination = $this->getPath($pathname);		}		/*		 * Here we set the folder we are going to copy the files from.		 *		 * Does the element have a folder attribute?		 *		 * If so this indicates that the files are in a subdirectory of the source		 * folder and we should append the folder attribute to the source path when		 * copying files.		 */		$folder = (string) $element->attributes()->folder;		if ($folder && file_exists($this->getPath('source') . '/' . $folder))		{			$source = $this->getPath('source') . '/' . $folder;		}		else		{			$source = $this->getPath('source');		}		// Work out what files have been deleted		if ($oldFiles && ($oldFiles instanceof SimpleXMLElement))		{			$oldEntries = $oldFiles->children();			if (count($oldEntries))			{				$deletions = $this->findDeletedFiles($oldEntries, $element->children());				foreach ($deletions['folders'] as $deleted_folder)				{					JFolder::delete($destination . '/' . $deleted_folder);				}				foreach ($deletions['files'] as $deleted_file)				{					JFile::delete($destination . '/' . $deleted_file);				}			}		}		$path = array();		// Copy the MD5SUMS file if it exists		if (file_exists($source . '/MD5SUMS'))		{			$path['src'] = $source . '/MD5SUMS';			$path['dest'] = $destination . '/MD5SUMS';			$path['type'] = 'file';			$copyfiles[] = $path;		}		// Process each file in the $files array (children of $tagName).		foreach ($element->children() as $file)		{			$path['src'] = $source . '/' . $file;			$path['dest'] = $destination . '/' . $file;			// Is this path a file or folder?			$path['type'] = ($file->getName() == 'folder') ? 'folder' : 'file';			/*			 * Before we can add a file to the copyfiles array we need to ensure			 * that the folder we are copying our file to exits and if it doesn't,			 * we need to create it.			 */			if (basename($path['dest']) != $path['dest'])			{				$newdir = dirname($path['dest']);				if (!JFolder::create($newdir))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_CREATE_DIRECTORY', $newdir), JLog::WARNING, 'jerror');					return false;				}			}			// Add the file to the copyfiles array			$copyfiles[] = $path;		}		return $this->copyFiles($copyfiles);	}	/**	 * Method to parse through a languages element of the installation manifest and take appropriate	 * action.	 *	 * @param   SimpleXMLElement  $element  The XML node to process	 * @param   integer           $cid      Application ID of application to install to	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function parseLanguages(SimpleXMLElement $element, $cid = 0)	{		// TODO: work out why the below line triggers 'node no longer exists' errors with files		if (!$element || !count($element->children()))		{			// Either the tag does not exist or has no children therefore we return zero files processed.			return 0;		}		$copyfiles = array();		// Get the client info		$client = JApplicationHelper::getClientInfo($cid);		// Here we set the folder we are going to copy the files to.		// 'languages' Files are copied to JPATH_BASE/language/ folder		$destination = $client->path . '/language';		/*		 * Here we set the folder we are going to copy the files from.		 *		 * Does the element have a folder attribute?		 *		 * If so this indicates that the files are in a subdirectory of the source		 * folder and we should append the folder attribute to the source path when		 * copying files.		 */		$folder = (string) $element->attributes()->folder;		if ($folder && file_exists($this->getPath('source') . '/' . $folder))		{			$source = $this->getPath('source') . '/' . $folder;		}		else		{			$source = $this->getPath('source');		}		// Process each file in the $files array (children of $tagName).		foreach ($element->children() as $file)		{			/*			 * Language files go in a subfolder based on the language code, ie.			 * <language tag="en-US">en-US.mycomponent.ini</language>			 * would go in the en-US subdirectory of the language folder.			 */			// We will only install language files where a core language pack			// already exists.			if ((string) $file->attributes()->tag != '')			{				$path['src'] = $source . '/' . $file;				if ((string) $file->attributes()->client != '')				{					// Override the client					$langclient = JApplicationHelper::getClientInfo((string) $file->attributes()->client, true);					$path['dest'] = $langclient->path . '/language/' . $file->attributes()->tag . '/' . basename((string) $file);				}				else				{					// Use the default client					$path['dest'] = $destination . '/' . $file->attributes()->tag . '/' . basename((string) $file);				}				// If the language folder is not present, then the core pack hasn't been installed... ignore				if (!JFolder::exists(dirname($path['dest'])))				{					continue;				}			}			else			{				$path['src'] = $source . '/' . $file;				$path['dest'] = $destination . '/' . $file;			}			/*			 * Before we can add a file to the copyfiles array we need to ensure			 * that the folder we are copying our file to exits and if it doesn't,			 * we need to create it.			 */			if (basename($path['dest']) != $path['dest'])			{				$newdir = dirname($path['dest']);				if (!JFolder::create($newdir))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_CREATE_DIRECTORY', $newdir), JLog::WARNING, 'jerror');					return false;				}			}			// Add the file to the copyfiles array			$copyfiles[] = $path;		}		return $this->copyFiles($copyfiles);	}	/**	 * Method to parse through a media element of the installation manifest and take appropriate	 * action.	 *	 * @param   SimpleXMLElement  $element  The XML node to process	 * @param   integer           $cid      Application ID of application to install to	 *	 * @return  boolean     True on success	 *	 * @since   3.1	 */	public function parseMedia(SimpleXMLElement $element, $cid = 0)	{		if (!$element || !count($element->children()))		{			// Either the tag does not exist or has no children therefore we return zero files processed.			return 0;		}		$copyfiles = array();		// Here we set the folder we are going to copy the files to.		// Default 'media' Files are copied to the JPATH_BASE/media folder		$folder = ((string) $element->attributes()->destination) ? '/' . $element->attributes()->destination : null;		$destination = JPath::clean(JPATH_ROOT . '/media' . $folder);		// Here we set the folder we are going to copy the files from.		/*		 * Does the element have a folder attribute?		 * If so this indicates that the files are in a subdirectory of the source		 * folder and we should append the folder attribute to the source path when		 * copying files.		 */		$folder = (string) $element->attributes()->folder;		if ($folder && file_exists($this->getPath('source') . '/' . $folder))		{			$source = $this->getPath('source') . '/' . $folder;		}		else		{			$source = $this->getPath('source');		}		// Process each file in the $files array (children of $tagName).		foreach ($element->children() as $file)		{			$path['src'] = $source . '/' . $file;			$path['dest'] = $destination . '/' . $file;			// Is this path a file or folder?			$path['type'] = ($file->getName() == 'folder') ? 'folder' : 'file';			/*			 * Before we can add a file to the copyfiles array we need to ensure			 * that the folder we are copying our file to exits and if it doesn't,			 * we need to create it.			 */			if (basename($path['dest']) != $path['dest'])			{				$newdir = dirname($path['dest']);				if (!JFolder::create($newdir))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_CREATE_DIRECTORY', $newdir), JLog::WARNING, 'jerror');					return false;				}			}			// Add the file to the copyfiles array			$copyfiles[] = $path;		}		return $this->copyFiles($copyfiles);	}	/**	 * Method to parse the parameters of an extension, build the INI	 * string for its default parameters, and return the INI string.	 *	 * @return  string   INI string of parameter values	 *	 * @since   3.1	 */	public function getParams()	{		// Validate that we have a fieldset to use		if (!isset($this->manifest->config->fields->fieldset))		{			return '{}';		}		// Getting the fieldset tags		$fieldsets = $this->manifest->config->fields->fieldset;		// Creating the data collection variable:		$ini = array();		// Iterating through the fieldsets:		foreach ($fieldsets as $fieldset)		{			if (!count($fieldset->children()))			{				// Either the tag does not exist or has no children therefore we return zero files processed.				return null;			}			// Iterating through the fields and collecting the name/default values:			foreach ($fieldset as $field)			{				// Check against the null value since otherwise default values like "0"				// cause entire parameters to be skipped.				if (($name = $field->attributes()->name) === null)				{					continue;				}				if (($value = $field->attributes()->default) === null)				{					continue;				}				$ini[(string) $name] = (string) $value;			}		}		return json_encode($ini);	}	/**	 * Copyfiles	 *	 * Copy files from source directory to the target directory	 *	 * @param   array    $files      Array with filenames	 * @param   boolean  $overwrite  True if existing files can be replaced	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function copyFiles($files, $overwrite = null)	{		/*		 * To allow for manual override on the overwriting flag, we check to see if		 * the $overwrite flag was set and is a boolean value.  If not, use the object		 * allowOverwrite flag.		 */		if (is_null($overwrite) || !is_bool($overwrite))		{			$overwrite = $this->overwrite;		}		/*		 * $files must be an array of filenames.  Verify that it is an array with		 * at least one file to copy.		 */		if (is_array($files) && count($files) > 0)		{			foreach ($files as $file)			{				// Get the source and destination paths				$filesource = JPath::clean($file['src']);				$filedest = JPath::clean($file['dest']);				$filetype = array_key_exists('type', $file) ? $file['type'] : 'file';				if (!file_exists($filesource))				{					/*					 * The source file does not exist.  Nothing to copy so set an error					 * and return false.					 */					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_NO_FILE', $filesource), JLog::WARNING, 'jerror');					return false;				}				elseif (($exists = file_exists($filedest)) && !$overwrite)				{					// It's okay if the manifest already exists					if ($this->getPath('manifest') == $filesource)					{						continue;					}					// The destination file already exists and the overwrite flag is false.					// Set an error and return false.					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_FILE_EXISTS', $filedest), JLog::WARNING, 'jerror');					return false;				}				else				{					// Copy the folder or file to the new location.					if ($filetype == 'folder')					{						if (!(JFolder::copy($filesource, $filedest, null, $overwrite)))						{							JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_FAIL_COPY_FOLDER', $filesource, $filedest), JLog::WARNING, 'jerror');							return false;						}						$step = array('type' => 'folder', 'path' => $filedest);					}					else					{						if (!(JFile::copy($filesource, $filedest, null)))						{							JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_FAIL_COPY_FILE', $filesource, $filedest), JLog::WARNING, 'jerror');							return false;						}						$step = array('type' => 'file', 'path' => $filedest);					}					/*					 * Since we copied a file/folder, we want to add it to the installation step stack so that					 * in case we have to roll back the installation we can remove the files copied.					 */					if (!$exists)					{						$this->stepStack[] = $step;					}				}			}		}		else		{			// The $files variable was either not an array or an empty array			return false;		}		return count($files);	}	/**	 * Method to parse through a files element of the installation manifest and remove	 * the files that were installed	 *	 * @param   object   $element  The XML node to process	 * @param   integer  $cid      Application ID of application to remove from	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function removeFiles($element, $cid = 0)	{		if (!$element || !count($element->children()))		{			// Either the tag does not exist or has no children therefore we return zero files processed.			return true;		}		$retval = true;		$debug = false;		if (isset($GLOBALS['installerdebug']) && $GLOBALS['installerdebug'])		{			$debug = true;		}		// Get the client info if we're using a specific client		if ($cid > -1)		{			$client = JApplicationHelper::getClientInfo($cid);		}		else		{			$client = null;		}		// Get the array of file nodes to process		$files = $element->children();		if (count($files) == 0)		{			// No files to process			return true;		}		$folder = '';		/*		 * Here we set the folder we are going to remove the files from.  There are a few		 * special cases that need to be considered for certain reserved tags.		 */		switch ($element->getName())		{			case 'media':				if ((string) $element->attributes()->destination)				{					$folder = (string) $element->attributes()->destination;				}				else				{					$folder = '';				}				$source = $client->path . '/media/' . $folder;				break;			case 'languages':				$lang_client = (string) $element->attributes()->client;				if ($lang_client)				{					$client = JApplicationHelper::getClientInfo($lang_client, true);					$source = $client->path . '/language';				}				else				{					if ($client)					{						$source = $client->path . '/language';					}					else					{						$source = '';					}				}				break;			default:				if ($client)				{					$pathname = 'extension_' . $client->name;					$source = $this->getPath($pathname);				}				else				{					$pathname = 'extension_root';					$source = $this->getPath($pathname);				}				break;		}		// Process each file in the $files array (children of $tagName).		foreach ($files as $file)		{			/*			 * If the file is a language, we must handle it differently.  Language files			 * go in a subdirectory based on the language code, ie.			 * <language tag="en_US">en_US.mycomponent.ini</language>			 * would go in the en_US subdirectory of the languages directory.			 */			if ($file->getName() == 'language' && (string) $file->attributes()->tag != '')			{				if ($source)				{					$path = $source . '/' . $file->attributes()->tag . '/' . basename((string) $file);				}				else				{					$target_client = JApplicationHelper::getClientInfo((string) $file->attributes()->client, true);					$path = $target_client->path . '/language/' . $file->attributes()->tag . '/' . basename((string) $file);				}				// If the language folder is not present, then the core pack hasn't been installed... ignore				if (!JFolder::exists(dirname($path)))				{					continue;				}			}			else			{				$path = $source . '/' . $file;			}			// Actually delete the files/folders			if (is_dir($path))			{				$val = JFolder::delete($path);			}			else			{				$val = JFile::delete($path);			}			if ($val === false)			{				JLog::add('Failed to delete ' . $path, JLog::WARNING, 'jerror');				$retval = false;			}		}		if (!empty($folder))		{			$val = JFolder::delete($source);		}		return $retval;	}	/**	 * Copies the installation manifest file to the extension folder in the given client	 *	 * @param   integer  $cid  Where to copy the installfile [optional: defaults to 1 (admin)]	 *	 * @return  boolean  True on success, False on error	 *	 * @since   3.1	 */	public function copyManifest($cid = 1)	{		// Get the client info		$client = JApplicationHelper::getClientInfo($cid);		$path['src'] = $this->getPath('manifest');		if ($client)		{			$pathname = 'extension_' . $client->name;			$path['dest'] = $this->getPath($pathname) . '/' . basename($this->getPath('manifest'));		}		else		{			$pathname = 'extension_root';			$path['dest'] = $this->getPath($pathname) . '/' . basename($this->getPath('manifest'));		}		return $this->copyFiles(array($path), true);	}	/**	 * Tries to find the package manifest file	 *	 * @return  boolean  True on success, False on error	 *	 * @since 3.1	 */	public function findManifest()	{		// Main folder manifests (higher priority)		$parentXmlfiles = JFolder::files($this->getPath('source'), '.xml$', false, true);		// Search for children manifests (lower priority)		$allXmlFiles    = JFolder::files($this->getPath('source'), '.xml$', 1, true);		// Create an unique array of files ordered by priority		$xmlfiles = array_unique(array_merge($parentXmlfiles, $allXmlFiles));		// If at least one XML file exists		if (!empty($xmlfiles))		{			foreach ($xmlfiles as $file)			{				// Is it a valid Joomla installation manifest file?				$manifest = $this->isManifest($file);				if (!is_null($manifest))				{					// If the root method attribute is set to upgrade, allow file overwrite					if ((string) $manifest->attributes()->method == 'upgrade')					{						$this->upgrade = true;						$this->overwrite = true;					}					// If the overwrite option is set, allow file overwriting					if ((string) $manifest->attributes()->overwrite == 'true')					{						$this->overwrite = true;					}					// Set the manifest object and path					$this->manifest = $manifest;					$this->setPath('manifest', $file);					// Set the installation source path to that of the manifest file					$this->setPath('source', dirname($file));					return true;				}			}			// None of the XML files found were valid install files			JLog::add(JText::_('JLIB_INSTALLER_ERROR_NOTFINDJOOMLAXMLSETUPFILE'), JLog::WARNING, 'jerror');			return false;		}		else		{			// No XML files were found in the install folder			JLog::add(JText::_('JLIB_INSTALLER_ERROR_NOTFINDXMLSETUPFILE'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Is the XML file a valid Joomla installation manifest file.	 *	 * @param   string  $file  An xmlfile path to check	 *	 * @return  mixed  A SimpleXMLElement, or null if the file failed to parse	 *	 * @since   3.1	 */	public function isManifest($file)	{		$xml = simplexml_load_file($file);		// If we cannot load the XML file return null		if (!$xml)		{			return null;		}		// Check for a valid XML root tag.		if ($xml->getName() != 'extension')		{			return null;		}		// Valid manifest file return the object		return $xml;	}	/**	 * Generates a manifest cache	 *	 * @return string serialised manifest data	 *	 * @since   3.1	 */	public function generateManifestCache()	{		return json_encode(self::parseXMLInstallFile($this->getPath('manifest')));	}	/**	 * Cleans up discovered extensions if they're being installed some other way	 *	 * @param   string   $type     The type of extension (component, etc)	 * @param   string   $element  Unique element identifier (e.g. com_content)	 * @param   string   $folder   The folder of the extension (plugins; e.g. system)	 * @param   integer  $client   The client application (administrator or site)	 *	 * @return  object    Result of query	 *	 * @since   3.1	 */	public function cleanDiscoveredExtension($type, $element, $folder = '', $client = 0)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->delete($db->quoteName('#__extensions'))			->where('type = ' . $db->quote($type))			->where('element = ' . $db->quote($element))			->where('folder = ' . $db->quote($folder))			->where('client_id = ' . (int) $client)			->where('state = -1');		$db->setQuery($query);		return $db->execute();	}	/**	 * Compares two "files" entries to find deleted files/folders	 *	 * @param   array  $old_files  An array of SimpleXMLElement objects that are the old files	 * @param   array  $new_files  An array of SimpleXMLElement objects that are the new files	 *	 * @return  array  An array with the delete files and folders in findDeletedFiles[files] and findDeletedFiles[folders] respectively	 *	 * @since   3.1	 */	public function findDeletedFiles($old_files, $new_files)	{		// The magic find deleted files function!		// The files that are new		$files = array();		// The folders that are new		$folders = array();		// The folders of the files that are new		$containers = array();		// A list of files to delete		$files_deleted = array();		// A list of folders to delete		$folders_deleted = array();		foreach ($new_files as $file)		{			switch ($file->getName())			{				case 'folder':					// Add any folders to the list					$folders[] = (string) $file; // add any folders to the list					break;				case 'file':				default:					// Add any files to the list					$files[] = (string) $file;					// Now handle the folder part of the file to ensure we get any containers					// Break up the parts of the directory					$container_parts = explode('/', dirname((string) $file));					// Make sure this is clean and empty					$container = '';					foreach ($container_parts as $part)					{						// Iterate through each part						// Add a slash if its not empty						if (!empty($container))						{							$container .= '/';						}						// Aappend the folder part						$container .= $part;						if (!in_array($container, $containers))						{							// Add the container if it doesn't already exist							$containers[] = $container;						}					}					break;			}		}		foreach ($old_files as $file)		{			switch ($file->getName())			{				case 'folder':					if (!in_array((string) $file, $folders))					{						// See whether the folder exists in the new list						if (!in_array((string) $file, $containers))						{							// Check if the folder exists as a container in the new list							// If it's not in the new list or a container then delete it							$folders_deleted[] = (string) $file;						}					}					break;				case 'file':				default:					if (!in_array((string) $file, $files))					{						// Look if the file exists in the new list						if (!in_array(dirname((string) $file), $folders))						{							// Look if the file is now potentially in a folder							$files_deleted[] = (string) $file; // not in a folder, doesn't exist, wipe it out!						}					}					break;			}		}		return array('files' => $files_deleted, 'folders' => $folders_deleted);	}	/**	 * Loads an MD5SUMS file into an associative array	 *	 * @param   string  $filename  Filename to load	 *	 * @return  array  Associative array with filenames as the index and the MD5 as the value	 *	 * @since   3.1	 */	public function loadMD5Sum($filename)	{		if (!file_exists($filename))		{			// Bail if the file doesn't exist			return false;		}		$data = file($filename, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);		$retval = array();		foreach ($data as $row)		{			// Split up the data			$results = explode('  ', $row);			// Cull any potential prefix			$results[1] = str_replace('./', '', $results[1]);			// Throw into the array			$retval[$results[1]] = $results[0];		}		return $retval;	}	/**	 * Parse a XML install manifest file.	 *	 * XML Root tag should be 'install' except for languages which use meta file.	 *	 * @param   string  $path  Full path to XML file.	 *	 * @return  array  XML metadata.	 *	 * @since   12.1	 */	public static function parseXMLInstallFile($path)	{		// Read the file to see if it's a valid component XML file		$xml = simplexml_load_file($path);		if (!$xml)		{			return false;		}		// Check for a valid XML root tag.		// Extensions use 'extension' as the root tag.  Languages use 'metafile' instead		if ($xml->getName() != 'extension' && $xml->getName() != 'metafile')		{			unset($xml);			return false;		}		$data = array();		$data['name'] = (string) $xml->name;		// Check if we're a language. If so use metafile.		$data['type'] = $xml->getName() == 'metafile' ? 'language' : (string) $xml->attributes()->type;		$data['creationDate'] = ((string) $xml->creationDate) ? (string) $xml->creationDate : JText::_('Unknown');		$data['author'] = ((string) $xml->author) ? (string) $xml->author : JText::_('Unknown');		$data['copyright'] = (string) $xml->copyright;		$data['authorEmail'] = (string) $xml->authorEmail;		$data['authorUrl'] = (string) $xml->authorUrl;		$data['version'] = (string) $xml->version;		$data['description'] = (string) $xml->description;		$data['group'] = (string) $xml->group;		return $data;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * ATOM Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @link        http://www.atomenabled.org/developers/syndication/ * @since       12.3 */class JFeedParserAtom extends JFeedParser{	/**	 * @var    string  The feed format version.	 * @since  12.3	 */	protected $version;	/**	 * Method to handle the <author> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleAuthor(JFeed $feed, SimpleXMLElement $el)	{		// Set the author information from the XML element.		$feed->setAuthor((string) $el->name, (string) $el->email, (string) $el->uri);	}	/**	 * Method to handle the <contributor> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleContributor(JFeed $feed, SimpleXMLElement $el)	{		$feed->addContributor((string) $el->name, (string) $el->email, (string) $el->uri);	}	/**	 * Method to handle the <generator> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleGenerator(JFeed $feed, SimpleXMLElement $el)	{		$feed->generator = (string) $el;	}	/**	 * Method to handle the <id> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleId(JFeed $feed, SimpleXMLElement $el)	{		$feed->uri = (string) $el;	}	/**	 * Method to handle the <link> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLink(JFeed $feed, SimpleXMLElement $el)	{		$link = new JFeedLink;		$link->uri      = (string) $el['href'];		$link->language = (string) $el['hreflang'];		$link->length   = (int) $el['length'];		$link->relation = (string) $el['rel'];		$link->title    = (string) $el['title'];		$link->type     = (string) $el['type'];		$feed->link = $link;	}	/**	 * Method to handle the <rights> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleRights(JFeed $feed, SimpleXMLElement $el)	{		$feed->copyright = (string) $el;	}	/**	 * Method to handle the <subtitle> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleSubtitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->description = (string) $el;	}	/**	 * Method to handle the <title> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleTitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->title = (string) $el;	}	/**	 * Method to handle the <updated> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleUpdated(JFeed $feed, SimpleXMLElement $el)	{		$feed->updatedDate = (string) $el;	}	/**	 * Method to initialise the feed for parsing.  Here we detect the version and advance the stream	 * reader so that it is ready to parse feed elements.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initialise()	{		// Read the version attribute.		$this->version = ($this->stream->getAttribute('version') == '0.3') ? '0.3' : '1.0';		// We want to move forward to the first element after the root element.		$this->moveToNextElement();	}	/**	 * Method to handle the feed entry element for the feed: <entry>.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{		$entry->uri         = (string) $el->id;		$entry->title       = (string) $el->title;		$entry->updatedDate = (string) $el->updated;		$entry->content     = (string) $el->summary;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to install the sample data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallSample extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the options from the session		$options = $model->getOptions();		// Get the database model.		$db = new InstallationModelDatabase;		// Attempt to create the database tables.		$return = $db->installSampleData($options);		$r = new stdClass;		$r->view = 'install';		// Check if the database was initialised		if (!$return)		{			$r->view = 'database';		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for parse XML module files * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.5 */class ModulesHelperXML{	/**	 * @since  1.5	 */	public function parseXMLModuleFile(&$rows)	{		foreach ($rows as $i => $row)		{			if ($row->module == '')			{				$rows[$i]->name    = 'custom';				$rows[$i]->module  = 'custom';				$rows[$i]->descrip = 'Custom created module, using Module Manager New function';			}			else			{				$data = JInstaller::parseXMLInstallFile($row->path . '/' . $row->file);				if ($data['type'] == 'module')				{					$rows[$i]->name    = $data['name'];					$rows[$i]->descrip = $data['description'];				}			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Override Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesControllerOverride extends JControllerForm{	/**	 * Method to edit an existing override	 *	 * @param   	string	$key		The name of the primary key of the URL variable (not used here).	 * @param   	string	$urlVar	The name of the URL variable if different from the primary key (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function edit($key = null, $urlVar = null)	{		$app     = JFactory::getApplication();		$cid     = $this->input->post->get('cid', array(), 'array');		$context = "$this->option.edit.$this->context";		// Get the constant name		$recordId = (count($cid) ? $cid[0] : $this->input->get('id'));		// Access check		if (!$this->allowEdit())		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return;		}		$app->setUserState($context.'.data', null);		$this->setRedirect('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'));	}	/**	 * Method to save an override	 *	 * @param   	string	$key		The name of the primary key of the URL variable (not used here).	 * @param   	string	$urlVar	The name of the URL variable if different from the primary key (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$model   = $this->getModel();		$data    = $this->input->post->get('jform', array(), 'array');		$context = "$this->option.edit.$this->context";		$task    = $this->getTask();		$recordId = $this->input->get('id');		$data['id'] = $recordId;		// Access check		if (!$this->allowSave($data, 'id'))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return;		}		// Validate the posted data		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return;		}		// Require helper for filter functions called by JForm		require_once JPATH_COMPONENT.'/helpers/languages.php';		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session			$app->setUserState($context.'.data', $data);			// Redirect back to the edit screen			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'), false));			return;		}		// Attempt to save the data		if (!$model->save($validData))		{			// Save the data in the session			$app->setUserState($context.'.data', $validData);			// Redirect back to the edit screen			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'), false));			return;		}		// Add message of success		$this->setMessage(JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task		switch ($task)		{			case 'apply':				// Set the record data in the session				$recordId = $model->getState($this->context.'.id');				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($validData['key'], 'id'), false));				break;			case 'save2new':				// Clear the record id and data from the session				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend(null, 'id'), false));				break;			default:				// Clear the record id and data from the session				$app->setUserState($context.'.data', null);				// Redirect to the list screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));				break;		}	}	/**	 * Method to cancel an edit	 *	 * @param   	string	$key	The name of the primary key of the URL variable (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function cancel($key = null, $test = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$context = "$this->option.edit.$this->context";		$app->setUserState($context.'.data',	null);		$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides an input field for files * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.file.html#input.file * @since       11.1 */class JFormFieldFile extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'File';	/**	 * Method to get the field input markup for the file field.	 * Field attributes allow specification of a maximum file size and a string	 * of accepted file extensions.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 *	 * @note    The field does not include an upload mechanism.	 * @see     JFormFieldMedia	 */	protected function getInput()	{		// Initialize some field attributes.		$accept = $this->element['accept'] ? ' accept="' . (string) $this->element['accept'] . '"' : '';		$size = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="file" name="' . $this->name . '" id="' . $this->id . '" value=""' . $accept . $disabled . $class . $size			. $onchange . $required . ' />';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a multi line area for entry of plain text * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/textarea.html#textarea * @since       11.1 */class JFormFieldTextarea extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Textarea';	/**	 * Method to get the textarea field input markup.	 * Use the rows and columns attributes to specify the dimensions of the area.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$columns = $this->element['cols'] ? ' cols="' . (int) $this->element['cols'] . '"' : '';		$rows = $this->element['rows'] ? ' rows="' . (int) $this->element['rows'] . '"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<textarea name="' . $this->name . '" id="' . $this->id . '"' . $columns . $rows . $class . $disabled . $onchange . $required . '>'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '</textarea>';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Oracle database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/pdo * @since       12.1 */class JDatabaseDriverOracle extends JDatabaseDriverPdo{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'oracle';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = '"';	/**	 * Returns the current dateformat	 *	 * @var   string	 * @since 12.1	 */	protected $dateformat;	/**	 * Returns the current character set	 *	 * @var   string	 * @since 12.1	 */	protected $charset;	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		$options['driver'] = 'oci';		$options['charset']    = (isset($options['charset'])) ? $options['charset']   : 'AL32UTF8';		$options['dateformat'] = (isset($options['dateformat'])) ? $options['dateformat'] : 'RRRR-MM-DD HH24:MI:SS';		$this->charset = $options['charset'];		$this->dateformat = $options['dateformat'];		// Finalize initialisation		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		parent::connect();		if (isset($this->options['schema']))		{			$this->setQuery('ALTER SESSION SET CURRENT_SCHEMA = ' . $this->quoteName($this->options['schema']))->execute();		}		$this->setDateFormat($this->dateformat);	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		$this->freeResult();		unset($this->connection);	}	/**	 * Drops a table from the database.	 *	 * Note: The IF EXISTS flag is unused in the Oracle driver.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true)			->setQuery('DROP TABLE :tableName');		$query->bind(':tableName', $tableName);		$this->setQuery($query);		$this->execute();		return $this;	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 */	public function getCollation()	{		return $this->charset;	}	/**	 * Get a query to run and verify the database is operational.	 *	 * @return  string  The query to check the health of the DB.	 *	 * @since   12.2	 */	public function getConnectedQuery()	{		return 'SELECT 1 FROM dual';	}	/**     * Returns the current date format     * This method should be useful in the case that     * somebody actually wants to use a different     * date format and needs to check what the current     * one is to see if it needs to be changed.     *     * @return string The current date format     *     * @since 12.1     */	public function getDateFormat()	{		return $this->dateformat;	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * Note: You must have the correct privileges before this method	 * will return usable results!	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		$result = array();		$query = $this->getQuery(true)			->select('dbms_metadata.get_ddl(:type, :tableName)')			->from('dual')			->bind(':type', 'TABLE');		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		foreach ($tables as $table)		{			$query->bind(':tableName', $table);			$this->setQuery($query);			$statement = (string) $this->loadResult();			$result[$table] = $statement;		}		return $result;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$columns = array();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->select('*')			->from('ALL_TAB_COLUMNS')			->where('table_name = :tableName');		$prefixedTable = str_replace('#__', strtoupper($this->tablePrefix), $table);		$query->bind(':tableName', $prefixedTable);		$this->setQuery($query);		$fields = $this->loadObjectList();		if ($typeOnly)		{			foreach ($fields as $field)			{				$columns[$field->COLUMN_NAME] = $field->DATA_TYPE;			}		}		else		{			foreach ($fields as $field)			{				$columns[$field->COLUMN_NAME] = $field;				$columns[$field->COLUMN_NAME]->Default = null;			}		}		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $columns;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->select('*')			->from('ALL_CONSTRAINTS')			->where('table_name = :tableName')			->bind(':tableName', $table);		$this->setQuery($query);		$keys = $this->loadObjectList();		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $keys;	}	/**	 * Method to get an array of all tables in the database (schema).	 *	 * @param   string   $databaseName         The database (schema) name	 * @param   boolean  $includeDatabaseName  Whether to include the schema name in the results	 *	 * @return  array    An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList($databaseName = null, $includeDatabaseName = false)	{		$this->connect();		$query = $this->getQuery(true);		$tables = array();		if ($includeDatabaseName)		{			$query->select('owner, table_name');		}		else		{			$query->select('table_name');		}		$query->from('all_tables');		if ($databaseName)		{			$query->where('owner = :database')				->bind(':database', $databaseName);		}		$query->order('table_name');		$this->setQuery($query);		if ($includeDatabaseName)		{			$tables = $this->loadAssocList();		}		else		{			$tables = $this->loadResultArray();		}		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$this->setQuery("select value from nls_database_parameters where parameter = 'NLS_RDBMS_VERSION'");		return $this->loadResult();	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		return true;	}	/**     * Sets the Oracle Date Format for the session     * Default date format for Oracle is = DD-MON-RR     * The default date format for this driver is:     * 'RRRR-MM-DD HH24:MI:SS' since it is the format     * that matches the MySQL one used within most Joomla     * tables.     *     * @param   string  $dateFormat  Oracle Date Format String     *     * @return boolean     *     * @since  12.1     */	public function setDateFormat($dateFormat = 'DD-MON-RR')	{		$this->connect();		$this->setQuery("ALTER SESSION SET NLS_DATE_FORMAT = '$dateFormat'");		$this->setQuery("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = '$dateFormat'");		if (!$this->execute())		{			return false;		}		$this->dateformat = $dateFormat;		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * Returns false automatically for the Oracle driver since	 * you can only set the character set when the connection	 * is created.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		return false;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function lockTable($table)	{		$this->setQuery('LOCK TABLE ' . $this->quoteName($table) . ' IN EXCLUSIVE MODE')->execute();		return $this;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by Oracle.	 * @param   string  $prefix    Not used by Oracle.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('RENAME ' . $oldTable . ' TO ' . $newTable)->execute();		return $this;	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->setQuery('COMMIT')->execute();		return $this;	}	/**	 * Test to see if the PDO ODBC connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return class_exists('PDO') && in_array('oci', PDO::getAvailableDrivers());	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   11.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = "'";		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "'", $startPos);			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Frontpage View class * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewFeatured extends JViewLegacy{	public function display($tpl = null)	{		// Parameters		$app       = JFactory::getApplication();		$doc       = JFactory::getDocument();		$params    = $app->getParams();		$feedEmail = $app->getCfg('feed_email', 'author');		$siteEmail = $app->getCfg('mailfrom');		$doc->link	= JRoute::_('index.php?option=com_content&view=featured');		// Get some data from the model		$app->input->set('limit', $app->getCfg('feed_limit'));		$categories = JCategories::getInstance('Content');		$rows       = $this->get('Items');		foreach ($rows as $row)		{			// strip html from feed item title			$title = $this->escape($row->title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// Compute the article slug			$row->slug = $row->alias ? ($row->id . ':' . $row->alias) : $row->id;			// Url link to article			$link = JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catid));			// Get row fulltext			$db = JFactory::getDbo();			$query = 'SELECT' .$db->quoteName('fulltext'). 'FROM #__content WHERE id ='.$row->id;			$db->setQuery($query);			$row->fulltext = $db->loadResult();			$description	= ($params->get('feed_summary', 0) ? $row->introtext.$row->fulltext : $row->introtext);			$author			= $row->created_by_alias ? $row->created_by_alias : $row->author;			// Load individual item creator class			$item				= new JFeedItem;			$item->title		= $title;			$item->link			= $link;			$item->date			= $row->publish_up;			$item_category		= $categories->get($row->catid);			$item->category		= array();			$item->category[]	= JText::_('JFEATURED'); // All featured articles are categorized as "Featured"			for ($item_category = $categories->get($row->catid); $item_category !== null; $item_category = $item_category->getParent())			{				if ($item_category->id > 1) { // Only add non-root categories					$item->category[] = $item_category->title;				}			}			$item->author 		= $author;			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$item->authorEmail = $row->author_email;			}			// Add readmore link to description if introtext is shown, show_readmore is true and fulltext exists			if (!$params->get('feed_summary', 0) && $params->get('feed_show_readmore', 0) && $row->fulltext)			{				$description .= '<p class="feed-readmore"><a target="_blank" href ="' . $item->link . '">' . JText::_('COM_CONTENT_FEED_READMORE') . '</a></p>';			}			// Load item description and add div			$item->description	= '<div class="feed-description">'.$description.'</div>';			// Loads item info into rss array			$doc->addItem($item);		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  helper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utitlity class for associations in multilang * * @package     Joomla.Libraries * @subpackage  Language * @since       3.1 */class JLanguageAssociations{	/**	 * Get the associations.	 *	 * @param   string   $extension   The name of the component.	 * @param   string   $tablename   The name of the table.	 * @param   string   $context     The context	 * @param   integer  $id          The primary key value.	 * @param   string   $pk          The name of the primary key in the given $table.	 * @param   string   $aliasField  If the table has an alias field set it here. Null to not use it	 * @param   string   $catField    If the table has a catid field set it here. Null to not use it	 *	 * @return  array                The associated items	 *	 * @since   3.1	 */	public static function getAssociations($extension, $tablename, $context, $id, $pk = 'id', $aliasField = 'alias', $catField = 'catid')	{		$associations = array();		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('c2.language'))			->from($db->quoteName($tablename, 'c'))			->join('INNER', $db->quoteName('#__associations', 'a') . ' ON a.id = c.id AND a.context=' . $db->quote($context))			->join('INNER', $db->quoteName('#__associations', 'a2') . ' ON a.key = a2.key')			->join('INNER', $db->quoteName($tablename, 'c2') . ' ON a2.id = c2.' . $db->quoteName($pk));		// Use alias field ?		if (!empty($aliasField))		{			$query->select(				$query->concatenate(					array(						$db->quoteName('c2.' . $pk),						$db->quoteName('c2.' . $aliasField)					),					':'				) . ' AS ' . $db->quoteName($pk)			);		}		else		{			$query->select($db->quoteName('c2.' . $pk));		}		// Use catid field ?		if (!empty($catField))		{			$query->join('INNER', $db->quoteName('#__categories', 'ca') . ' ON ' . $db->quoteName('c2.' . $catField) . ' = ca.id AND ca.extension = ' . $db->quote($extension))				->select(					$query->concatenate(						array('ca.id', 'ca.alias'),						':'					) . ' AS ' . $db->quoteName($catField)				);		}		$query->where('c.id =' . (int) $id);		$db->setQuery($query);		try		{			$items = $db->loadObjectList('language');		}		catch (runtimeException $e)		{			throw new Exception($e->getMessage(), 500);			return false;		}		if ($items)		{			foreach ($items as $tag => $item)			{				$associations[$tag] = $item;			}		}		return $associations;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class JFormFieldGroupParent extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.6	 */	protected $type = 'GroupParent';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$db = JFactory::getDbo();		$user = JFactory::getUser();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from('#__usergroups AS a')			->join('LEFT', $db->quoteName('#__usergroups') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Prevent parenting to children of this item.		if ($id = $this->form->getValue('id'))		{			$query->join('LEFT', $db->quoteName('#__usergroups') . ' AS p ON p.id = ' . (int) $id)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');		}		$query->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			// Show groups only if user is super admin or group is not super admin			if ($user->authorise('core.admin') || (!JAccess::checkGroup($options[$i]->value, 'core.admin')))			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;			}			else			{				unset($options[$i]);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$saveOrder	= $listOrder == 'a.ordering';$n			= count($this->items);?><form action="<?php echo JRoute::_('index.php?option=com_tags&view=tags');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TAGS_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true); ?>			</select>			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access')); ?>			</select>			<label class="selectlabel" for="filter_author_id"><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></label>			<select name="filter_author_id" class="inputbox"  id="filter_author_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></option>				<?php echo JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id')); ?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language')); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access', $listDirn, $listOrder); ?>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$item->max_ordering = 0; //??			$canCreate  = $user->authorise('core.create',     'com_tags');			$canEdit    = $user->authorise('core.edit',       'com_tags.tag.' . $item->id);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out_user_id == $userId || $item->checked_out_user_id == 0;			$canChange  = $user->authorise('core.edit.state', 'com_tags.tag.' . $item->id) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->level > 0): ?>					<?php echo str_repeat('<span class="gi">&mdash;</span>', $item->level - 1) ?>					<?php endif; ?>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'tags.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit || $canEditOwn) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_tags&task=tag.edit&id='.$item->id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias)); ?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'tags.', $canChange, 'cb'); ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);if (file_exists(__DIR__ . '/defines.php')){	include_once __DIR__ . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', __DIR__);	require_once JPATH_BASE . '/includes/defines.php';}require_once JPATH_BASE . '/includes/framework.php';// Mark afterLoad in the profiler.JDEBUG ? $_PROFILER->mark('afterLoad') : null;// Instantiate the application.$app = JFactory::getApplication('site');// Initialise the application.$app->initialise();// Mark afterIntialise in the profiler.JDEBUG ? $_PROFILER->mark('afterInitialise') : null;// Route the application.$app->route();// Mark afterRoute in the profiler.JDEBUG ? $_PROFILER->mark('afterRoute') : null;// Dispatch the application.$app->dispatch();// Mark afterDispatch in the profiler.JDEBUG ? $_PROFILER->mark('afterDispatch') : null;// Render the application.$app->render();// Mark afterRender in the profiler.JDEBUG ? $_PROFILER->mark('afterRender') : null;// Return the response.echo $app;
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('text');/** * Form Field class for the Joomla Platform. * Supports a text field telephone numbers. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.tel.html * @see         JFormRuleTel for telephone number validation * @see         JHtmlTel for rendering of telephone numbers * @since       11.1 */class JFormFieldTel extends JFormFieldText{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Tel';}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Contacts * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Contacts. * * @package     Joomla.Plugin * @subpackage  Finder.Contacts * @since       2.5 */class PlgFinderContacts extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Contacts';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_contact';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'contact';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'Contact';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__contact_details';	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'published';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to update the item link information when the item category is	 * changed. This is fired when the item category is published or unpublished	 * from the list view.	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderCategoryChangeState($extension, $pks, $value)	{		// Make sure we're handling com_contact categories		if ($extension == 'com_contact')		{			$this->categoryStateChange($pks, $value);		}	}	/**	 * Method to remove the link information for items that have been deleted.	 *	 * This event will fire when contacts are deleted and when an indexed item is deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_contact.contact')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle contacts here		if ($context == 'com_contact.contact')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		// Check for access changes in the category		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle contacts here		if ($context == 'com_contact.contact')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		// Check for access levels from the category		if ($context == 'com_categories.category')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle contacts here		if ($context == 'com_contact.contact')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = $registry;		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = ContactHelperRoute::getContactRoute($item->slug, $item->catslug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		/*		 * Add the meta-data processing instructions based on the contact		 * configuration parameters.		 */		// Handle the contact position.		if ($item->params->get('show_position', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'position');		}		// Handle the contact street address.		if ($item->params->get('show_street_address', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'address');		}		// Handle the contact city.		if ($item->params->get('show_suburb', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'city');		}		// Handle the contact region.		if ($item->params->get('show_state', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'region');		}		// Handle the contact country.		if ($item->params->get('show_country', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'country');		}		// Handle the contact zip code.		if ($item->params->get('show_postcode', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'zip');		}		// Handle the contact telephone number.		if ($item->params->get('show_telephone', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'telephone');		}		// Handle the contact fax number.		if ($item->params->get('show_fax', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'fax');		}		// Handle the contact e-mail address.		if ($item->params->get('show_email', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'email');		}		// Handle the contact mobile number.		if ($item->params->get('show_mobile', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'mobile');		}		// Handle the contact webpage.		if ($item->params->get('show_webpage', true))		{			$item->addInstruction(FinderIndexer::META_CONTEXT, 'webpage');		}		// Handle the contact user name.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'user');		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Contact');		// Add the category taxonomy data.		$item->addTaxonomy('Category', $item->category, $item->cat_state, $item->cat_access);		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Add the region taxonomy data.		if (!empty($item->region) && $this->params->get('tax_add_region', true))		{			$item->addTaxonomy('Region', $item->region);		}		// Add the country taxonomy data.		if (!empty($item->country) && $this->params->get('tax_add_country', true))		{			$item->addTaxonomy('Country', $item->country);		}		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load dependent classes.		require_once JPATH_SITE . '/components/com_contact/helpers/route.php';		// This is a hack to get around the lack of a route helper.		FinderIndexerHelper::getContentPath('index.php?option=com_contact');		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.name AS title, a.alias, a.con_position AS position, a.address, a.created AS start_date')			->select('a.created_by_alias, a.modified, a.modified_by')			->select('a.metakey, a.metadesc, a.metadata, a.language')			->select('a.sortname1, a.sortname2, a.sortname3')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('a.suburb AS city, a.state AS region, a.country, a.postcode AS zip')			->select('a.telephone, a.fax, a.misc AS summary, a.email_to AS email, a.mobile')			->select('a.webpage, a.access, a.published AS state, a.ordering, a.params, a.catid')			->select('c.title AS category, c.published AS cat_state, c.access AS cat_access');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias);		$case_when_category_alias = ' CASE WHEN ';		$case_when_category_alias .= $query->charLength('c.alias', '!=', '0');		$case_when_category_alias .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when_category_alias .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when_category_alias .= ' ELSE ';		$case_when_category_alias .= $c_id.' END as catslug';		$query->select($case_when_category_alias)			->select('u.name')			->from('#__contact_details AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid')			->join('LEFT', '#__users AS u ON u.id = a.user_id');		return $query;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * * Provides a pop up date picker linked to a button. * Optionally may be filtered to use user's or server's time zone. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldCalendar extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Calendar';	/**	 * Method to get the field input markup.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$format = $this->element['format'] ? (string) $this->element['format'] : '%Y-%m-%d';		// Build the attributes array.		$attributes = array();		if ($this->element['size'])		{			$attributes['size'] = (int) $this->element['size'];		}		if ($this->element['maxlength'])		{			$attributes['maxlength'] = (int) $this->element['maxlength'];		}		if ($this->element['class'])		{			$attributes['class'] = (string) $this->element['class'];		}		if ((string) $this->element['readonly'] == 'true')		{			$attributes['readonly'] = 'readonly';		}		if ((string) $this->element['disabled'] == 'true')		{			$attributes['disabled'] = 'disabled';		}		if ($this->element['onchange'])		{			$attributes['onchange'] = (string) $this->element['onchange'];		}		if ($this->required)		{			$attributes['required'] = 'required';			$attributes['aria-required'] = 'true';		}		// Handle the special case for "now".		if (strtoupper($this->value) == 'NOW')		{			$this->value = strftime($format);		}		// Get some system objects.		$config = JFactory::getConfig();		$user = JFactory::getUser();		// If a known filter is given use it.		switch (strtoupper((string) $this->element['filter']))		{			case 'SERVER_UTC':				// Convert a date to UTC based on the server timezone.				if ((int) $this->value)				{					// Get a date object based on the correct timezone.					$date = JFactory::getDate($this->value, 'UTC');					$date->setTimezone(new DateTimeZone($config->get('offset')));					// Transform the date string.					$this->value = $date->format('Y-m-d H:i:s', true, false);				}				break;			case 'USER_UTC':				// Convert a date to UTC based on the user timezone.				if ((int) $this->value)				{					// Get a date object based on the correct timezone.					$date = JFactory::getDate($this->value, 'UTC');					$date->setTimezone(new DateTimeZone($user->getParam('timezone', $config->get('offset'))));					// Transform the date string.					$this->value = $date->format('Y-m-d H:i:s', true, false);				}				break;		}		return JHtml::_('calendar', $this->value, $this->name, $this->id, $format, $attributes);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// Create shortcuts to some parameters.$params  = $this->item->params;$images  = json_decode($this->item->images);$urls    = json_decode($this->item->urls);$canEdit = $params->get('access-edit');$user    = JFactory::getUser();$info    = $params->get('info_block_position', 0);JHtml::_('behavior.caption');?><div class="item-page<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading') && $params->get('show_title')) : ?>	<div class="page-header">		<h1> <?php echo $this->escape($this->params->get('page_heading')); ?> </h1>	</div>	<?php endif;if (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && $this->item->paginationrelative){	echo $this->item->pagination;}?>	<?php if ($params->get('show_title') || $params->get('show_author')) : ?>	<div class="page-header">		<h2>			<?php if ($this->item->state == 0) : ?>				<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>			<?php endif; ?>			<?php if ($params->get('show_title')) : ?>				<?php if ($params->get('link_titles') && !empty($this->item->readmore_link)) : ?>					<a href="<?php echo $this->item->readmore_link; ?>"> <?php echo $this->escape($this->item->title); ?></a>				<?php else : ?>					<?php echo $this->escape($this->item->title); ?>				<?php endif; ?>			<?php endif; ?>		</h2>	</div>	<?php endif; ?>	<?php if (!$this->print) : ?>		<?php if ($canEdit || $params->get('show_print_icon') || $params->get('show_email_icon')) : ?>		<div class="btn-group pull-right">			<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span> <span class="caret"></span> </a>			<?php // Note the actions class is deprecated. Use dropdown-menu instead. ?>			<ul class="dropdown-menu actions">				<?php if ($params->get('show_print_icon')) : ?>				<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $this->item, $params); ?> </li>				<?php endif; ?>				<?php if ($params->get('show_email_icon')) : ?>				<li class="email-icon"> <?php echo JHtml::_('icon.email', $this->item, $params); ?> </li>				<?php endif; ?>				<?php if ($canEdit) : ?>				<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $this->item, $params); ?> </li>				<?php endif; ?>			</ul>		</div>		<?php endif; ?>		<?php else : ?>		<div class="pull-right">		<?php echo JHtml::_('icon.print_screen', $this->item, $params); ?>		</div>	<?php endif; ?><?php $useDefList = ($params->get('show_modify_date') || $params->get('show_publish_date') || $params->get('show_create_date')	|| $params->get('show_hits') || $params->get('show_category') || $params->get('show_parent_category') || $params->get('show_author')); ?>	<?php if ($useDefList && ($info == 0 || $info == 2)) : ?>		<div class="article-info muted">			<dl class="article-info">			<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>			<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>				<dd class="createdby">					<?php $author = $this->item->created_by_alias ? $this->item->created_by_alias : $this->item->author; ?>					<?php if (!empty($this->item->contactid) && $params->get('link_author') == true) : ?>						<?php						$needle = 'index.php?option=com_contact&view=contact&id=' . $this->item->contactid;						$menu = JFactory::getApplication()->getMenu();						$item = $menu->getItems('link', $needle, true);						$cntlink = !empty($item) ? $needle . '&Itemid=' . $item->id : $needle;						?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', JHtml::_('link', JRoute::_($cntlink), $author)); ?>					<?php else: ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>				<dd class="parent-category-name">					<?php $title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_parent_category') && !empty($this->item->parent_slug)) : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_category')) : ?>				<dd class="category-name">					<?php $title = $this->escape($this->item->category_title);					$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)) . '">' . $title . '</a>';?>					<?php if ($params->get('link_category') && $this->item->catslug) : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_publish_date')) : ?>				<dd class="published">					<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($info == 0) : ?>				<?php if ($params->get('show_modify_date')) : ?>					<dd class="modified">						<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_create_date')) : ?>					<dd class="create">						<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_hits')) : ?>					<dd class="hits">						<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>					</dd>				<?php endif; ?>			<?php endif; ?>			</dl>		</div>	<?php endif; ?>	<?php if ($params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?>	<?php if (!$params->get('show_intro')) : echo $this->item->event->afterDisplayTitle; endif; ?>	<?php echo $this->item->event->beforeDisplayContent; ?>	<?php if (isset($urls) && ((!empty($urls->urls_position) && ($urls->urls_position == '0')) || ($params->get('urls_position') == '0' && empty($urls->urls_position)))		|| (empty($urls->urls_position) && (!$params->get('urls_position')))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($params->get('access-view')):?>	<?php if (isset($images->image_fulltext) && !empty($images->image_fulltext)) : ?>	<?php $imgfloat = (empty($images->float_fulltext)) ? $params->get('float_fulltext') : $images->float_fulltext; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_fulltext_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_fulltext_caption) . '"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_fulltext); ?>" alt="<?php echo htmlspecialchars($images->image_fulltext_alt); ?>"/> </div>	<?php endif; ?>	<?php	if (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && !$this->item->paginationrelative):		echo $this->item->pagination;	endif;	?>	<?php if (isset ($this->item->toc)) :		echo $this->item->toc;	endif; ?>	<?php echo $this->item->text; ?>	<?php if ($useDefList && ($info == 1 || $info == 2)) : ?>		<div class="article-info muted">			<dl class="article-info">			<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>			<?php if ($info == 1) : ?>				<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>					<dd class="createdby">						<?php $author = $this->item->created_by_alias ? $this->item->created_by_alias : $this->item->author; ?>						<?php if (!empty($this->item->contactid) && $params->get('link_author') == true) : ?>						<?php						$needle = 'index.php?option=com_contact&view=contact&id=' . $this->item->contactid;						$menu = JFactory::getApplication()->getMenu();						$item = $menu->getItems('link', $needle, true);						$cntlink = !empty($item) ? $needle . '&Itemid=' . $item->id : $needle;						?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', JHtml::_('link', JRoute::_($cntlink), $author)); ?>						<?php else: ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>					<dd class="parent-category-name">						<?php	$title = $this->escape($this->item->parent_title);						$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)) . '">' . $title . '</a>';?>						<?php if ($params->get('link_parent_category') && $this->item->parent_slug) : ?>							<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>						<?php else : ?>							<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_category')) : ?>					<dd class="category-name">						<?php 	$title = $this->escape($this->item->category_title);						$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)) . '">' . $title . '</a>';?>						<?php if ($params->get('link_category') && $this->item->catslug) : ?>							<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>						<?php else : ?>							<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_publish_date')) : ?>					<dd class="published">						<span class="icon-calendar"></span>						<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>			<?php endif; ?>			<?php if ($params->get('show_create_date')) : ?>				<dd class="create">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_modify_date')) : ?>				<dd class="modified">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_hits')) : ?>				<dd class="hits">					<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>				</dd>			<?php endif; ?>			</dl>		</div>	<?php endif; ?>	<?phpif (!empty($this->item->pagination) && $this->item->pagination && $this->item->paginationposition && !$this->item->paginationrelative):	echo $this->item->pagination;?>	<?php endif; ?>	<?php if (isset($urls) && ((!empty($urls->urls_position) && ($urls->urls_position == '1')) || ($params->get('urls_position') == '1'))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php // Optional teaser intro text for guests ?>	<?php elseif ($params->get('show_noauth') == true && $user->get('guest')) : ?>	<?php echo $this->item->introtext; ?>	<?php //Optional link to let them register to see the whole article. ?>	<?php if ($params->get('show_readmore') && $this->item->fulltext != null) :		$link1 = JRoute::_('index.php?option=com_users&view=login');		$link = new JURI($link1);?>	<p class="readmore">		<a href="<?php echo $link; ?>">		<?php $attribs = json_decode($this->item->attribs); ?>		<?php		if ($attribs->alternative_readmore == null) :			echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');		elseif ($readmore = $this->item->alternative_readmore) :			echo $readmore;			if ($params->get('show_readmore_title', 0) != 0) :				echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));			endif;		elseif ($params->get('show_readmore_title', 0) == 0) :			echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');		else :			echo JText::_('COM_CONTENT_READ_MORE');			echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));		endif; ?>		</a>	</p>	<?php endif; ?>	<?php endif; ?>	<?phpif (!empty($this->item->pagination) && $this->item->pagination && $this->item->paginationposition && $this->item->paginationrelative) :	echo $this->item->pagination;?>	<?php endif; ?>	<?php echo $this->item->event->afterDisplayContent; ?> </div>
<?php/** * @package     Joomla.Plugin * @subpackage  Content.finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Finder Content Plugin * * @package     Joomla.Plugin * @subpackage  Content.finder * @since       2.5 */class PlgContentFinder extends JPlugin{	/**	 * Finder after save content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string  The context of the content passed to the plugin (added in 1.6)	 * @param   object		A JTableContent object	 * @param   bool		If the content has just been created	 * @since	2.5	 */	public function onContentAfterSave($context, $article, $isNew)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderAfterSave event.		$dispatcher->trigger('onFinderAfterSave', array($context, $article, $isNew));	}	/**	 * Finder before save content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string  The context of the content passed to the plugin (added in 1.6)	 * @param   object		A JTableContent object	 * @param   bool		If the content is just about to be created	 * @since   2.5	 */	public function onContentBeforeSave($context, $article, $isNew)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderBeforeSave event.		$dispatcher->trigger('onFinderBeforeSave', array($context, $article, $isNew));	}	/**	 * Finder after delete content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string  The context of the content passed to the plugin (added in 1.6)	 * @param   object		A JTableContent object	 * @since   2.5	 */	public function onContentAfterDelete($context, $article)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderAfterDelete event.		$dispatcher->trigger('onFinderAfterDelete', array($context, $article));	}	/**	 * Finder change state content method	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 * @since   2.5	 */	public function onContentChangeState($context, $pks, $value)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderChangeState event.		$dispatcher->trigger('onFinderChangeState', array($context, $pks, $value));	}	/**	 * Finder change category state content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 * @since   2.5	 */	public function onCategoryChangeState($extension, $pks, $value)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderCategoryChangeState event.		$dispatcher->trigger('onFinderCategoryChangeState', array($extension, $pks, $value));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo	= BannersHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'client.cancel' || document.formvalidator.isValid(document.id('client-form')))		{			Joomla.submitform(task, document.getElementById('client-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_banners&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="client-form" class="form-validate form-horizontal">	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', empty($this->item->id) ? JText::_('COM_BANNERS_NEW_CLIENT', true) : JText::sprintf('COM_BANNERS_EDIT_CLIENT', $this->item->id, true)); ?>			<div class="row-fluid">				<div class="span6">					<?php if ($canDo->get('core.edit.state')) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('state'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('state'); ?>							</div>						</div>					<?php endif; ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('name'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('name'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('contact'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('contact'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('email'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('email'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('purchase_type'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('purchase_type'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('track_impressions'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('track_impressions'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('track_clicks'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('track_clicks'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('id'); ?>						</div>					</div>				</div>				<div class="span6">					<?php foreach ($this->form->getFieldset('extra') as $field) : ?>						<div class="control-group">							<?php if (!$field->hidden) : ?>								<div class="control-label">									<?php echo $field->label; ?>								</div>							<?php endif; ?>							<div class="controls">								<?php echo $field->input; ?>							</div>						</div>					<?php endforeach; ?>				</div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>			<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for com_content. * * @package     Joomla.Plugin * @subpackage  Finder.Content * @since       2.5 */class PlgFinderContent extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Content';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_content';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'article';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'Article';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__content';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to update the item link information when the item category is	 * changed. This is fired when the item category is published or unpublished	 * from the list view.	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderCategoryChangeState($extension, $pks, $value)	{		// Make sure we're handling com_content categories		if ($extension == 'com_content')		{			$this->categoryStateChange($pks, $value);		}	}	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_content.article')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle articles here		if ($context == 'com_content.article' || $context == 'com_content.form')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		// Check for access changes in the category		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle articles here		if ($context == 'com_content.article' || $context == 'com_content.form')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		// Check for access levels from the category		if ($context == 'com_categories.category')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle articles here		if ($context == 'com_content.article' || $context == 'com_content.form')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		$item->setLanguage();		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = JComponentHelper::getParams('com_content', true);		$item->params->merge($registry);		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		// Trigger the onContentPrepare event.		$item->summary = FinderIndexerHelper::prepareContent($item->summary, $item->params);		$item->body = FinderIndexerHelper::prepareContent($item->body, $item->params);		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = ContentHelperRoute::getArticleRoute($item->slug, $item->catslug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Add the meta-data processing instructions.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Translate the state. Articles should only be published if the category is published.		$item->state = $this->translateState($item->state, $item->cat_state);		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Article');		// Add the author taxonomy data.		if (!empty($item->author) || !empty($item->created_by_alias))		{			$item->addTaxonomy('Author', !empty($item->created_by_alias) ? $item->created_by_alias : $item->author);		}		// Add the category taxonomy data.		$item->addTaxonomy('Category', $item->category, $item->cat_state, $item->cat_access);		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load dependent classes.		include_once JPATH_SITE . '/components/com_content/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.introtext AS summary, a.fulltext AS body')			->select('a.state, a.catid, a.created AS start_date, a.created_by')			->select('a.created_by_alias, a.modified, a.modified_by, a.attribs AS params')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.access, a.version, a.ordering')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('c.title AS category, c.published AS cat_state, c.access AS cat_access');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias);		$case_when_category_alias = ' CASE WHEN ';		$case_when_category_alias .= $query->charLength('c.alias', '!=', '0');		$case_when_category_alias .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when_category_alias .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when_category_alias .= ' ELSE ';		$case_when_category_alias .= $c_id.' END as catslug';		$query->select($case_when_category_alias)			->select('u.name AS author')			->from('#__content AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid')			->join('LEFT', '#__users AS u ON u.id = a.created_by');		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of plugin records. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugins extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'extension_id', 'a.extension_id',				'name', 'a.name',				'folder', 'a.folder',				'element', 'a.element',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'state', 'a.state',				'enabled', 'a.enabled',				'access', 'a.access', 'access_level',				'ordering', 'a.ordering',				'client_id', 'a.client_id',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.enabled', 'filter_enabled', '', 'string');		$this->setState('filter.enabled', $state);		$folder = $this->getUserStateFromRequest($this->context . '.filter.folder', 'filter_folder', null, 'cmd');		$this->setState('filter.folder', $folder);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_plugins');		$this->setState('params', $params);		// List state information.		parent::populateState('folder', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.folder');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns an object list	 *	 * @param   string The query	 * @param   int    Offset	 * @param   int    The number of records	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$search = $this->getState('filter.search');		$ordering = $this->getState('list.ordering', 'ordering');		if ($ordering == 'name' || (!empty($search) && stripos($search, 'id:') !== 0))		{			$this->_db->setQuery($query);			$result = $this->_db->loadObjectList();			$this->translate($result);			if (!empty($search))			{				foreach ($result as $i => $item)				{					if (!preg_match("/$search/i", $item->name))					{						unset($result[$i]);					}				}			}			$lang = JFactory::getLanguage();			$direction = ($this->getState('list.direction') == 'desc') ? -1 : 1;			JArrayHelper::sortObjects($result, $ordering, $direction, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			if ($ordering == 'ordering')			{				$query->order('a.folder ASC');				$ordering = 'a.ordering';			}			$query->order($this->_db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			if ($ordering == 'folder')			{				$query->order('a.ordering ASC');			}			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array The array of objects	 * @return  array The array of translated objects	 */	protected function translate(&$items)	{		$lang = JFactory::getLanguage();		foreach ($items as &$item)		{			$source = JPATH_PLUGINS . '/' . $item->folder . '/' . $item->element;			$extension = 'plg_' . $item->folder . '_' . $item->element;			$lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)				|| $lang->load($extension . '.sys', $source, null, false, false)				|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);		}	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id , a.name, a.element, a.folder, a.checked_out, a.checked_out_time,' .					' a.enabled, a.access, a.ordering'			)		)			->from($db->quoteName('#__extensions') . ' AS a')			->where($db->quoteName('type') . ' = ' . $db->quote('plugin'));		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$published = $this->getState('filter.enabled');		if (is_numeric($published))		{			$query->where('a.enabled = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.enabled IN (0, 1))');		}		// Filter by state		$query->where('a.state >= 0');		// Filter by folder.		if ($folder = $this->getState('filter.folder'))		{			$query->where('a.folder = ' . $db->quote($folder));		}		// Filter by search in id		$search = $this->getState('filter.search');		if (!empty($search) && stripos($search, 'id:') === 0)		{			$query->where('a.extension_id = ' . (int) substr($search, 3));		}		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Component Languages Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesModelInstalled extends JModelList{	/**	 * @var object client object	 */	protected $client = null;	/**	 * @var object user object	 */	protected $user = null;	/**	 * @var boolean|JExeption True, if FTP settings should be shown, or an exeption	 */	protected $ftp = null;	/**	 * @var string option name	 */	protected $option = null;	/**	 * @var array languages description	 */	protected $data = null;	/**	 * @var int total number pf languages	 */	protected $total = null;	/**	 * @var int total number pf languages installed	 */	protected $langlist = null;	/**	 * @var string language path	 */	protected $path = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$clientId = $app->input->getInt('client');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_languages');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Method to get the client object	 *	 * @return  object	 * @since   1.6	 */	public function &getClient()	{		if (is_null($this->client))		{			$this->client = JApplicationHelper::getClientInfo($this->getState('filter.client_id', 0));		}		return $this->client;	}	/**	 * Method to get the ftp credentials	 *	 * @return  object	 * @since   1.6	 */	public function &getFtp()	{		if (is_null($this->ftp))		{			$this->ftp = JClientHelper::setCredentialsFromRequest('ftp');		}		return $this->ftp;	}	/**	 * Method to get the option	 *	 * @return  object	 * @since   1.6	 */	public function &getOption()	{		$option = $this->getState('option');		return $option;	}	/**	 * Method to get Languages item data	 *	 * @return  array	 * @since   1.6	 */	public function &getData()	{		if (is_null($this->data)) {			// Get information			$path		= $this->getPath();			$client		= $this->getClient();			$langlist   = $this->getLanguageList();			// Compute all the languages			$data	= array ();			foreach ($langlist as $lang) {				$file = $path . '/' . $lang . '/' . $lang.'.xml';				$info = JApplicationHelper::parseXMLLangMetaFile($file);				$row = new JObject;				$row->language = $lang;				if (!is_array($info))				{					continue;				}				foreach ($info as $key => $value)				{					$row->$key = $value;				}				// if current than set published				$params = JComponentHelper::getParams('com_languages');				if ($params->get($client->name, 'en-GB') == $row->language)				{					$row->published	= 1;				}				else {					$row->published = 0;				}				$row->checked_out = 0;				$data[] = $row;			}			usort($data, array($this, 'compareLanguages'));			// Prepare data			$limit = $this->getState('list.limit');			$start = $this->getState('list.start');			$total = $this->getTotal();			if ($limit == 0)			{				$start = 0;				$end = $total;			}			else {				if ($start > $total)				{					$start = $total - $total % $limit;				}				$end = $start + $limit;				if ($end > $total)				{					$end = $total;				}			}			// Compute the displayed languages			$this->data	= array();			for ($i = $start;$i < $end;$i++)			{				$this->data[] = & $data[$i];			}		}		return $this->data;	}	/**	 * Method to get installed languages data.	 *	 * @return  string	An SQL query	 * @since   1.6	 */	protected function getLanguageList()	{		// Create a new db object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$client = $this->getState('filter.client_id');		$type = "language";		// Select field element from the extensions table.		$query->select($this->getState('list.select', 'a.element'))			->from('#__extensions AS a');		$type = $db->quote($type);		$query->where('(a.type = '.$type.')')			->where('state = 0')			->where('enabled = 1')			->where('client_id=' . (int) $client);		// for client_id = 1 do we need to check language table also ?		$db->setQuery($query);		$this->langlist = $db->loadColumn();		return $this->langlist;	}	/**	 * Method to get the total number of Languages items	 *	 * @return  integer	 * @since   1.6	 */	public function getTotal()	{		if (is_null($this->total))		{			$langlist = $this->getLanguageList();			$this->total = count($langlist);		}		return $this->total;	}	/**	 * Method to set the default language	 *	 * @return  boolean	 * @since   1.6	 */	public function publish($cid)	{		if ($cid)		{			$client	= $this->getClient();			$params = JComponentHelper::getParams('com_languages');			$params->set($client->name, $cid);			$table = JTable::getInstance('extension');			$id = $table->find(array('element' => 'com_languages'));			// Load			if (!$table->load($id))			{				$this->setError($table->getError());				return false;			}			$table->params = (string) $params;			// pre-save checks			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// save the changes			if (!$table->store())			{				$this->setError($table->getError());				return false;			}		}		else		{			$this->setError(JText::_('COM_LANGUAGES_ERR_NO_LANGUAGE_SELECTED'));			return false;		}		// Clean the cache of com_languages and component cache.		$this->cleanCache();		$this->cleanCache('_system');		return true;	}	/**	 * Method to get the folders	 *	 * @return  array  Languages folders	 * @since   1.6	 */	protected function getFolders()	{		if (is_null($this->folders))		{			$path = $this->getPath();			jimport('joomla.filesystem.folder');			$this->folders = JFolder::folders($path, '.', false, false, array('.svn', 'CVS', '.DS_Store', '__MACOSX', 'pdf_fonts', 'overrides'));		}		return $this->folders;	}	/**	 * Method to get the path	 *	 * @return  string	The path to the languages folders	 * @since   1.6	 */	protected function getPath()	{		if (is_null($this->path))		{			$client = $this->getClient();			$this->path = JLanguage::getLanguagePath($client->path);		}		return $this->path;	}	/**	 * Method to compare two languages in order to sort them	 *	 * @param   object	$lang1 the first language	 * @param   object	$lang2 the second language	 *	 * @return  integer	 * @since   1.6	 */	protected function compareLanguages($lang1, $lang2)	{		return strcmp($lang1->name, $lang2->name);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/manual/en/book.mysqli.php * @since       12.1 */class JDatabaseDriverMysqli extends JDatabaseDriver{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'mysqli';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc. The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.2	 */	protected $nameQuote = '`';	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 * @since  12.2	 */	protected $nullDate = '0000-00-00 00:00:00';	/**	 * @var    string  The minimum supported database version.	 * @since  12.2	 */	protected static $dbMinimum = '5.0.4';	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : 'root';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['select'] = (isset($options['select'])) ? (bool) $options['select'] : true;		$options['port'] = null;		$options['socket'] = null;		// Finalize initialisation.		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_callable(array($this->connection, 'close')))		{			mysqli_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		/*		 * Unlike mysql_connect(), mysqli_connect() takes the port and socket as separate arguments. Therefore, we		 * have to extract them from the host string.		 */		$tmp = substr(strstr($this->options['host'], ':'), 1);		if (!empty($tmp))		{			// Get the port number or socket name			if (is_numeric($tmp))			{				$this->options['port'] = $tmp;			}			else			{				$this->options['socket'] = $tmp;			}			// Extract the host name only			$this->options['host'] = substr($this->options['host'], 0, strlen($this->options['host']) - (strlen($tmp) + 1));			// This will take care of the following notation: ":3306"			if ($this->options['host'] == '')			{				$this->options['host'] = 'localhost';			}		}		// Make sure the MySQLi extension for PHP is installed and enabled.		if (!function_exists('mysqli_connect'))		{			throw new RuntimeException('The MySQL adapter mysqli is not available');		}		$this->connection = @mysqli_connect(			$this->options['host'], $this->options['user'], $this->options['password'], null, $this->options['port'], $this->options['socket']		);		// Attempt to connect to the server.		if (!$this->connection)		{			throw new RuntimeException('Could not connect to MySQL.');		}		// Set sql_mode to non_strict mode		mysqli_query($this->connection, "SET @@SESSION.sql_mode = '';");		// If auto-select is enabled select the given database.		if ($this->options['select'] && !empty($this->options['database']))		{			$this->select($this->options['database']);		}		// Set charactersets (needed for MySQL 4.1.2+).		$this->setUTF();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		if (is_callable($this->connection, 'close'))		{			mysqli_close($this->connection);		}		$this->connection = null;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$this->connect();		$result = mysqli_real_escape_string($this->getConnection(), $text);		if ($extra)		{			$result = addcslashes($result, '%_');		}		return $result;	}	/**	 * Test to see if the MySQL connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('mysqli_connect'));	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		if (is_object($this->connection))		{			return mysqli_ping($this->connection);		}		return false;	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true);		$this->setQuery('DROP TABLE ' . ($ifExists ? 'IF EXISTS ' : '') . $query->quoteName($tableName));		$this->execute();		return $this;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		return mysqli_affected_rows($this->connection);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database (string) or boolean false if not supported.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getCollation()	{		$this->connect();		$this->setQuery('SHOW FULL COLUMNS FROM #__users');		$array = $this->loadAssocList();		return $array['2']['Collation'];	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		return mysqli_num_rows($cursor ? $cursor : $this->cursor);	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		$result = array();		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		foreach ($tables as $table)		{			// Set the query to get the table CREATE statement.			$this->setQuery('SHOW CREATE table ' . $this->quoteName($this->escape($table)));			$row = $this->loadRow();			// Populate the result array based on the create statements.			$result[$table] = $row[1];		}		return $result;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$result = array();		// Set the query to get the table fields statement.		$this->setQuery('SHOW FULL COLUMNS FROM ' . $this->quoteName($this->escape($table)));		$fields = $this->loadObjectList();		// If we only want the type as the value add just that to the list.		if ($typeOnly)		{			foreach ($fields as $field)			{				$result[$field->Field] = preg_replace("/[(0-9)]/", '', $field->Type);			}		}		// If we want the whole field data object add that to the list.		else		{			foreach ($fields as $field)			{				$result[$field->Field] = $field;			}		}		return $result;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		// Get the details columns information.		$this->setQuery('SHOW KEYS FROM ' . $this->quoteName($table));		$keys = $this->loadObjectList();		return $keys;	}	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		// Set the query to get the tables statement.		$this->setQuery('SHOW TABLES');		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		return mysqli_get_server_info($this->connection);	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		return mysqli_insert_id($this->connection);	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function lockTable($table)	{		$this->setQuery('LOCK TABLES ' . $this->quoteName($table) . ' WRITE')->execute();		return $this;	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function execute()	{		$this->connect();		if (!is_object($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query .= ' LIMIT ' . $this->offset . ', ' . $this->limit;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @mysqli_query($this->connection, $query);		// If an error occurred handle it.		if (!$this->cursor)		{			$this->errorNum = (int) mysqli_errno($this->connection);			$this->errorMsg = (string) mysqli_error($this->connection) . ' SQL=' . $query;			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->cursor;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by MySQL.	 * @param   string  $prefix    Not used by MySQL.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('RENAME TABLE ' . $oldTable . ' TO ' . $newTable)->execute();		return $this;	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		if (!$database)		{			return false;		}		if (!mysqli_select_db($this->connection, $database))		{			throw new RuntimeException('Could not connect to database.');		}		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return $this->connection->set_charset('utf8');	}	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		$this->setQuery('COMMIT');		$this->execute();	}	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionRollback()	{		$this->connect();		$this->setQuery('ROLLBACK');		$this->execute();	}	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		$this->setQuery('START TRANSACTION');		$this->execute();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return mysqli_fetch_row($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return mysqli_fetch_assoc($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return mysqli_fetch_object($cursor ? $cursor : $this->cursor, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		mysqli_free_result($cursor ? $cursor : $this->cursor);	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverMysqli  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->setQuery('UNLOCK TABLES')->execute();		return $this;	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Factory class * * @package  Joomla.Platform * @since    11.1 */abstract class JFactory{	/**	 * @var    JApplication	 * @since  11.1	 */	public static $application = null;	/**	 * @var    JCache	 * @since  11.1	 */	public static $cache = null;	/**	 * @var    JConfig	 * @since  11.1	 */	public static $config = null;	/**	 * @var    array	 * @since  11.3	 */	public static $dates = array();	/**	 * @var    JSession	 * @since  11.1	 */	public static $session = null;	/**	 * @var    JLanguage	 * @since  11.1	 */	public static $language = null;	/**	 * @var    JDocument	 * @since  11.1	 */	public static $document = null;	/**	 * @var    JAccess	 * @since  11.1	 * @deprecated  13.3	 */	public static $acl = null;	/**	 * @var    JDatabaseDriver	 * @since  11.1	 */	public static $database = null;	/**	 * @var    JMail	 * @since  11.1	 */	public static $mailer = null;	/**	 * Get a application object.	 *	 * Returns the global {@link JApplication} object, only creating it if it doesn't already exist.	 *	 * @param   mixed   $id      A client identifier or name.	 * @param   array   $config  An optional associative array of configuration settings.	 * @param   string  $prefix  Application prefix	 *	 * @return  JApplication object	 *	 * @see     JApplication	 * @since   11.1	 * @throws  Exception	 */	public static function getApplication($id = null, array $config = array(), $prefix = 'J')	{		if (!self::$application)		{			if (!$id)			{				throw new Exception('Application Instantiation Error', 500);			}			self::$application = JApplication::getInstance($id, $config, $prefix);		}		return self::$application;	}	/**	 * Get a configuration object	 *	 * Returns the global {@link JRegistry} object, only creating it if it doesn't already exist.	 *	 * @param   string  $file       The path to the configuration file	 * @param   string  $type       The type of the configuration file	 * @param   string  $namespace  The namespace of the configuration file	 *	 * @return  JRegistry	 *	 * @see     JRegistry	 * @since   11.1	 */	public static function getConfig($file = null, $type = 'PHP', $namespace = '')	{		if (!self::$config)		{			if ($file === null)			{				$file = JPATH_PLATFORM . '/config.php';			}			self::$config = self::createConfig($file, $type, $namespace);		}		return self::$config;	}	/**	 * Get a session object.	 *	 * Returns the global {@link JSession} object, only creating it if it doesn't already exist.	 *	 * @param   array  $options  An array containing session options	 *	 * @return  JSession object	 *	 * @see     JSession	 * @since   11.1	 */	public static function getSession(array $options = array())	{		if (!self::$session)		{			self::$session = self::createSession($options);		}		return self::$session;	}	/**	 * Get a language object.	 *	 * Returns the global {@link JLanguage} object, only creating it if it doesn't already exist.	 *	 * @return  JLanguage object	 *	 * @see     JLanguage	 * @since   11.1	 */	public static function getLanguage()	{		if (!self::$language)		{			self::$language = self::createLanguage();		}		return self::$language;	}	/**	 * Get a document object.	 *	 * Returns the global {@link JDocument} object, only creating it if it doesn't already exist.	 *	 * @return  JDocument object	 *	 * @see     JDocument	 * @since   11.1	 */	public static function getDocument()	{		if (!self::$document)		{			self::$document = self::createDocument();		}		return self::$document;	}	/**	 * Get an user object.	 *	 * Returns the global {@link JUser} object, only creating it if it doesn't already exist.	 *	 * @param   integer  $id  The user to load - Can be an integer or string - If string, it is converted to ID automatically.	 *	 * @return  JUser object	 *	 * @see     JUser	 * @since   11.1	 */	public static function getUser($id = null)	{		$instance = self::getSession()->get('user');		if (is_null($id))		{			if (!($instance instanceof JUser))			{				$instance = JUser::getInstance();			}		}		elseif ($instance->id != $id)		{			$instance = JUser::getInstance($id);		}		return $instance;	}	/**	 * Get a cache object	 *	 * Returns the global {@link JCache} object	 *	 * @param   string  $group    The cache group name	 * @param   string  $handler  The handler to use	 * @param   string  $storage  The storage method	 *	 * @return  JCacheController object	 *	 * @see     JCache	 */	public static function getCache($group = '', $handler = 'callback', $storage = null)	{		$hash = md5($group . $handler . $storage);		if (isset(self::$cache[$hash]))		{			return self::$cache[$hash];		}		$handler = ($handler == 'function') ? 'callback' : $handler;		$options = array('defaultgroup' => $group);		if (isset($storage))		{			$options['storage'] = $storage;		}		$cache = JCache::getInstance($handler, $options);		self::$cache[$hash] = $cache;		return self::$cache[$hash];	}	/**	 * Get an authorization object	 *	 * Returns the global {@link JAccess} object, only creating it	 * if it doesn't already exist.	 *	 * @return  JAccess object	 *	 * @deprecated  13.3  Use JAccess directly.	 */	public static function getACL()	{		JLog::add(__METHOD__ . ' is deprecated. Use JAccess directly.', JLog::WARNING, 'deprecated');		if (!self::$acl)		{			self::$acl = new JAccess;		}		return self::$acl;	}	/**	 * Get a database object.	 *	 * Returns the global {@link JDatabaseDriver} object, only creating it if it doesn't already exist.	 *	 * @return  JDatabaseDriver	 *	 * @see     JDatabaseDriver	 * @since   11.1	 */	public static function getDbo()	{		if (!self::$database)		{			// Get the debug configuration setting			$conf = self::getConfig();			$debug = $conf->get('debug');			self::$database = self::createDbo();			self::$database->setDebug($debug);		}		return self::$database;	}	/**	 * Get a mailer object.	 *	 * Returns the global {@link JMail} object, only creating it if it doesn't already exist.	 *	 * @return  JMail object	 *	 * @see     JMail	 * @since   11.1	 */	public static function getMailer()	{		if (!self::$mailer)		{			self::$mailer = self::createMailer();		}		$copy = clone self::$mailer;		return $copy;	}	/**	 * Get a parsed XML Feed Source	 *	 * @param   string   $url         Url for feed source.	 * @param   integer  $cache_time  Time to cache feed for (using internal cache mechanism).	 *	 * @return  mixed  SimplePie parsed object on success, false on failure.	 *	 * @since   11.1	 * @deprecated  4.0  Use directly JFeedFactory or supply SimplePie instead. Mehod will be proxied to JFeedFactory beginning in 3.2	 */	public static function getFeedParser($url, $cache_time = 0)	{		if (!class_exists('JSimplepieFactory'))		{			throw new BadMethodCallException('JSimplepieFactory not found');		}		JLog::add(__METHOD__ . ' is deprecated.   Use JFeedFactory() or supply SimplePie instead.', JLog::WARNING, 'deprecated');		return JSimplepieFactory::getFeedParser($url, $cache_time);	}	/**	 * Reads a XML file.	 *	 * @param   string   $data    Full path and file name.	 * @param   boolean  $isFile  true to load a file or false to load a string.	 *	 * @return  mixed    JXMLElement or SimpleXMLElement on success or false on error.	 *	 * @see     JXMLElement	 * @since   11.1	 * @note    When JXMLElement is not present a SimpleXMLElement will be returned.	 * @deprecated  13.3 Use SimpleXML directly.	 */	public static function getXML($data, $isFile = true)	{		JLog::add(__METHOD__ . ' is deprecated. Use SimpleXML directly.', JLog::WARNING, 'deprecated');		$class = 'SimpleXMLElement';		if (class_exists('JXMLElement'))		{			$class = 'JXMLElement';		}		// Disable libxml errors and allow to fetch error information as needed		libxml_use_internal_errors(true);		if ($isFile)		{			// Try to load the XML file			$xml = simplexml_load_file($data, $class);		}		else		{			// Try to load the XML string			$xml = simplexml_load_string($data, $class);		}		if ($xml === false)		{			JLog::add(JText::_('JLIB_UTIL_ERROR_XML_LOAD'), JLog::WARNING, 'jerror');			if ($isFile)			{				JLog::add($data, JLog::WARNING, 'jerror');			}			foreach (libxml_get_errors() as $error)			{				JLog::add($error->message, JLog::WARNING, 'jerror');			}		}		return $xml;	}	/**	 * Get an editor object.	 *	 * @param   string  $editor  The editor to load, depends on the editor plugins that are installed	 *	 * @return  JEditor instance of JEditor	 *	 * @since   11.1	 * @deprecated 12.3 Use JEditor directly	 */	public static function getEditor($editor = null)	{		JLog::add(__METHOD__ . ' is deprecated. Use JEditor directly.', JLog::WARNING, 'deprecated');		if (!class_exists('JEditor'))		{			throw new BadMethodCallException('JEditor not found');		}		JLog::add(__METHOD__ . ' is deprecated. Use JEditor directly.', JLog::WARNING, 'deprecated');		// Get the editor configuration setting		if (is_null($editor))		{			$conf = self::getConfig();			$editor = $conf->get('editor');		}		return JEditor::getInstance($editor);	}	/**	 * Return a reference to the {@link JURI} object	 *	 * @param   string  $uri  Uri name.	 *	 * @return  JURI object	 *	 * @see     JURI	 * @since   11.1	 * @deprecated  13.3 Use JURI directly.	 */	public static function getURI($uri = 'SERVER')	{		JLog::add(__METHOD__ . ' is deprecated. Use JURI directly.', JLog::WARNING, 'deprecated');		return JURI::getInstance($uri);	}	/**	 * Return the {@link JDate} object	 *	 * @param   mixed  $time      The initial time for the JDate object	 * @param   mixed  $tzOffset  The timezone offset.	 *	 * @return  JDate object	 *	 * @see     JDate	 * @since   11.1	 */	public static function getDate($time = 'now', $tzOffset = null)	{		static $classname;		static $mainLocale;		$language = self::getLanguage();		$locale = $language->getTag();		if (!isset($classname) || $locale != $mainLocale)		{			// Store the locale for future reference			$mainLocale = $locale;			if ($mainLocale !== false)			{				$classname = str_replace('-', '_', $mainLocale) . 'Date';				if (!class_exists($classname))				{					// The class does not exist, default to JDate					$classname = 'JDate';				}			}			else			{				// No tag, so default to JDate				$classname = 'JDate';			}		}		$key = $time . '-' . ($tzOffset instanceof DateTimeZone ? $tzOffset->getName() : (string) $tzOffset);		if (!isset(self::$dates[$classname][$key]))		{			self::$dates[$classname][$key] = new $classname($time, $tzOffset);		}		$date = clone self::$dates[$classname][$key];		return $date;	}	/**	 * Create a configuration object	 *	 * @param   string  $file       The path to the configuration file.	 * @param   string  $type       The type of the configuration file.	 * @param   string  $namespace  The namespace of the configuration file.	 *	 * @return  JRegistry	 *	 * @see     JRegistry	 * @since   11.1	 */	protected static function createConfig($file, $type = 'PHP', $namespace = '')	{		if (is_file($file))		{			include_once $file;		}		// Create the registry with a default namespace of config		$registry = new JRegistry;		// Sanitize the namespace.		$namespace = ucfirst((string) preg_replace('/[^A-Z_]/i', '', $namespace));		// Build the config name.		$name = 'JConfig' . $namespace;		// Handle the PHP configuration type.		if ($type == 'PHP' && class_exists($name))		{			// Create the JConfig object			$config = new $name;			// Load the configuration values into the registry			$registry->loadObject($config);		}		return $registry;	}	/**	 * Create a session object	 *	 * @param   array  $options  An array containing session options	 *	 * @return  JSession object	 *	 * @since   11.1	 */	protected static function createSession(array $options = array())	{		// Get the editor configuration setting		$conf = self::getConfig();		$handler = $conf->get('session_handler', 'none');		// Config time is in minutes		$options['expire'] = ($conf->get('lifetime')) ? $conf->get('lifetime') * 60 : 900;		$session = JSession::getInstance($handler, $options);		if ($session->getState() == 'expired')		{			$session->restart();		}		return $session;	}	/**	 * Create an database object	 *	 * @return  JDatabaseDriver	 *	 * @see     JDatabaseDriver	 * @since   11.1	 */	protected static function createDbo()	{		$conf = self::getConfig();		$host = $conf->get('host');		$user = $conf->get('user');		$password = $conf->get('password');		$database = $conf->get('db');		$prefix = $conf->get('dbprefix');		$driver = $conf->get('dbtype');		$debug = $conf->get('debug');		$options = array('driver' => $driver, 'host' => $host, 'user' => $user, 'password' => $password, 'database' => $database, 'prefix' => $prefix);		try		{			$db = JDatabaseDriver::getInstance($options);		}		catch (RuntimeException $e)		{			if (!headers_sent())			{				header('HTTP/1.1 500 Internal Server Error');			}			jexit('Database Error: ' . $e->getMessage());		}		$db->setDebug($debug);		return $db;	}	/**	 * Create a mailer object	 *	 * @return  JMail object	 *	 * @see     JMail	 * @since   11.1	 */	protected static function createMailer()	{		$conf = self::getConfig();		$smtpauth = ($conf->get('smtpauth') == 0) ? null : 1;		$smtpuser = $conf->get('smtpuser');		$smtppass = $conf->get('smtppass');		$smtphost = $conf->get('smtphost');		$smtpsecure = $conf->get('smtpsecure');		$smtpport = $conf->get('smtpport');		$mailfrom = $conf->get('mailfrom');		$fromname = $conf->get('fromname');		$mailer = $conf->get('mailer');		// Create a JMail object		$mail = JMail::getInstance();		// Set default sender without Reply-to		$mail->SetFrom(JMailHelper::cleanLine($mailfrom), JMailHelper::cleanLine($fromname), 0);		// Default mailer is to use PHP's mail function		switch ($mailer)		{			case 'smtp':				$mail->useSMTP($smtpauth, $smtphost, $smtpuser, $smtppass, $smtpsecure, $smtpport);				break;			case 'sendmail':				$mail->IsSendmail();				break;			default:				$mail->IsMail();				break;		}		return $mail;	}	/**	 * Create a language object	 *	 * @return  JLanguage object	 *	 * @see     JLanguage	 * @since   11.1	 */	protected static function createLanguage()	{		$conf = self::getConfig();		$locale = $conf->get('language');		$debug = $conf->get('debug_lang');		$lang = JLanguage::getInstance($locale, $debug);		return $lang;	}	/**	 * Create a document object	 *	 * @return  JDocument object	 *	 * @see     JDocument	 * @since   11.1	 */	protected static function createDocument()	{		$lang = self::getLanguage();		$input = self::getApplication()->input;		$type = $input->get('format', 'html', 'word');		$attributes = array('charset' => 'utf-8', 'lineend' => 'unix', 'tab' => '  ', 'language' => $lang->getTag(),			'direction' => $lang->isRTL() ? 'rtl' : 'ltr');		return JDocument::getInstance($type, $attributes);	}	/**	 * Creates a new stream object with appropriate prefix	 *	 * @param   boolean  $use_prefix   Prefix the connections for writing	 * @param   boolean  $use_network  Use network if available for writing; use false to disable (e.g. FTP, SCP)	 * @param   string   $ua           UA User agent to use	 * @param   boolean  $uamask       User agent masking (prefix Mozilla)	 *	 * @return  JStream	 *	 * @see JStream	 * @since   11.1	 */	public static function getStream($use_prefix = true, $use_network = true, $ua = null, $uamask = false)	{		jimport('joomla.filesystem.stream');		// Setup the context; Joomla! UA and overwrite		$context = array();		$version = new JVersion;		// Set the UA for HTTP and overwrite for FTP		$context['http']['user_agent'] = $version->getUserAgent($ua, $uamask);		$context['ftp']['overwrite'] = true;		if ($use_prefix)		{			$FTPOptions = JClientHelper::getCredentials('ftp');			$SCPOptions = JClientHelper::getCredentials('scp');			if ($FTPOptions['enabled'] == 1 && $use_network)			{				$prefix = 'ftp://' . $FTPOptions['user'] . ':' . $FTPOptions['pass'] . '@' . $FTPOptions['host'];				$prefix .= $FTPOptions['port'] ? ':' . $FTPOptions['port'] : '';				$prefix .= $FTPOptions['root'];			}			elseif ($SCPOptions['enabled'] == 1 && $use_network)			{				$prefix = 'ssh2.sftp://' . $SCPOptions['user'] . ':' . $SCPOptions['pass'] . '@' . $SCPOptions['host'];				$prefix .= $SCPOptions['port'] ? ':' . $SCPOptions['port'] : '';				$prefix .= $SCPOptions['root'];			}			else			{				$prefix = JPATH_ROOT . '/';			}			$retval = new JStream($prefix, JPATH_ROOT, $context);		}		else		{			$retval = new JStream('', '', $context);		}		return $retval;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);?>
<?php/** * @package     Joomla.Plugin * @subpackage  User.joomla * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla User plugin * * @package     Joomla.Plugin * @subpackage  User.joomla * @since       1.5 */class PlgUserJoomla extends JPlugin{	/**	 * Remove all sessions for the user name	 *	 * Method is called after user data is deleted from the database	 *	 * @param   array          $user      Holds the user data	 * @param   boolean        $succes    True if user was succesfully stored in the database	 * @param   string         $msg       Message	 *	 * @return  boolean	 * @since   1.6	 */	public function onUserAfterDelete($user, $succes, $msg)	{		if (!$succes)		{			return false;		}		$db = JFactory::getDbo();		$db->setQuery(			'DELETE FROM ' . $db->quoteName('#__session') .				' WHERE ' . $db->quoteName('userid') . ' = ' . (int) $user['id']		);		$db->execute();		return true;	}	/**	 * Utility method to act on a user after it has been saved.	 *	 * This method sends a registration email to new users created in the backend.	 *	 * @param   array          $user         Holds the new user data.	 * @param   boolean        $isnew        True if a new user is stored.	 * @param   boolean        $success      True if user was succesfully stored in the database.	 * @param   string         $msg          Message.	 *	 * @return  void	 * @since   1.6	 */	public function onUserAfterSave($user, $isnew, $success, $msg)	{		$app = JFactory::getApplication();		$config = JFactory::getConfig();		$mail_to_user = $this->params->get('mail_to_user', 1);		if ($isnew)		{			// TODO: Suck in the frontend registration emails here as well. Job for a rainy day.			if ($app->isAdmin())			{				if ($mail_to_user)				{					// Load user_joomla plugin language (not done automatically).					$lang = JFactory::getLanguage();					$lang->load('plg_user_joomla', JPATH_ADMINISTRATOR);					// Compute the mail subject.					$emailSubject = JText::sprintf(						'PLG_USER_JOOMLA_NEW_USER_EMAIL_SUBJECT',						$user['name'],						$config->get('sitename')					);					// Compute the mail body.					$emailBody = JText::sprintf(						'PLG_USER_JOOMLA_NEW_USER_EMAIL_BODY',						$user['name'],						$config->get('sitename'),						JUri::root(),						$user['username'],						$user['password_clear']					);					// Assemble the email data...the sexy way!					$mail = JFactory::getMailer()						->setSender(							array(								$config->get('mailfrom'),								$config->get('fromname')							)						)						->addRecipient($user['email'])						->setSubject($emailSubject)						->setBody($emailBody);					if (!$mail->Send())					{						// TODO: Probably should raise a plugin error but this event is not error checked.						JError::raiseWarning(500, JText::_('ERROR_SENDING_EMAIL'));					}				}			}		}		else		{			// Existing user - nothing to do...yet.		}	}	/**	 * This method should handle any login logic and report back to the subject	 *	 * @param   array  $user        Holds the user data	 * @param   array  $options     Array holding options (remember, autoregister, group)	 *	 * @return  boolean  True on success	 * @since   1.5	 */	public function onUserLogin($user, $options = array())	{		$instance = $this->_getUser($user, $options);		// If _getUser returned an error, then pass it back.		if ($instance instanceof Exception)		{			return false;		}		// If the user is blocked, redirect with an error		if ($instance->get('block') == 1)		{			JError::raiseWarning('SOME_ERROR_CODE', JText::_('JERROR_NOLOGIN_BLOCKED'));			return false;		}		// Authorise the user based on the group information		if (!isset($options['group']))		{			$options['group'] = 'USERS';		}		// Check the user can login.		$result = $instance->authorise($options['action']);		if (!$result)		{			JError::raiseWarning(401, JText::_('JERROR_LOGIN_DENIED'));			return false;		}		// Mark the user as logged in		$instance->set('guest', 0);		// Register the needed session variables		$session = JFactory::getSession();		$session->set('user', $instance);		$db = JFactory::getDbo();		// Check to see the the session already exists.		$app = JFactory::getApplication();		$app->checkSession();		// Update the user related fields for the Joomla sessions table.		$query = $db->getQuery(true)			->update($db->quoteName('#__session'))			->set($db->quoteName('guest') . ' = ' . $db->quote($instance->get('guest')))			->set($db->quoteName('username') . ' = ' . $db->quote($instance->get('username')))			->set($db->quoteName('userid') . ' = ' . (int) $instance->get('id'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($session->getId()));		$db->setQuery($query);		$db->execute();		// Hit the user last visit field		$instance->setLastVisit();		return true;	}	/**	 * This method should handle any logout logic and report back to the subject	 *	 * @param   array  $user        Holds the user data.	 * @param   array  $options     Array holding options (client, ...).	 *	 * @return  object  True on success	 * @since   1.5	 */	public function onUserLogout($user, $options = array())	{		$my = JFactory::getUser();		$session = JFactory::getSession();		$app = JFactory::getApplication();		// Make sure we're a valid user first		if ($user['id'] == 0 && !$my->get('tmp_user'))		{			return true;		}		// Check to see if we're deleting the current session		if ($my->get('id') == $user['id'] && $options['clientid'] == $app->getClientId())		{			// Hit the user last visit field			$my->setLastVisit();			// Destroy the php session for this user			$session->destroy();		}		// Force logout all users with that userid		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->delete($db->quoteName('#__session'))			->where($db->quoteName('userid') . ' = ' . (int) $user['id'])			->where($db->quoteName('client_id') . ' = ' . (int) $options['clientid']);		$db->setQuery($query);		$db->execute();		return true;	}	/**	 * This method will return a user object	 *	 * If options['autoregister'] is true, if the user doesn't exist yet he will be created	 *	 * @param   array  $user        Holds the user data.	 * @param   array  $options     Array holding options (remember, autoregister, group).	 *	 * @return  object  A JUser object	 * @since   1.5	 */	protected function _getUser($user, $options = array())	{		$instance = JUser::getInstance();		$id = (int) JUserHelper::getUserId($user['username']);		if ($id)		{			$instance->load($id);			return $instance;		}		//TODO : move this out of the plugin		$config = JComponentHelper::getParams('com_users');		// Default to Registered.		$defaultUserGroup = $config->get('new_usertype', 2);		$instance->set('id', 0);		$instance->set('name', $user['fullname']);		$instance->set('username', $user['username']);		$instance->set('password_clear', $user['password_clear']);		// Result should contain an email (check)		$instance->set('email', $user['email']);		$instance->set('groups', array($defaultUserGroup));		//If autoregister is set let's register the user		$autoregister = isset($options['autoregister']) ? $options['autoregister'] : $this->params->get('autoregister', 1);		if ($autoregister)		{			if (!$instance->save())			{				return JError::raiseWarning('SOME_ERROR_CODE', $instance->getError());			}		}		else		{			// No existing user and autoregister off, this is a temporary user.			$instance->set('tmp_user', true);		}		return $instance;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsViewTags extends JViewLegacy{	protected $state;	protected $items;	protected $item;	protected $pagination;	protected $params;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$item		= $this->get('Item');		$pagination	= $this->get('Pagination');		// Change to catch		/*if (count($errors = $this->get('Errors'))) {			JError::raiseError(500, implode("\n", $errors));			return false;		}*/		// Check whether access level allows access.		// TODO: SHould already be computed in $item->params->get('access-view')		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!empty($items))		{			foreach ($items as $itemElement)			{				if (!in_array($itemElement->access, $groups))				{					unset($itemElement);				}				// Prepare the data.				$temp = new JRegistry;				$temp->loadString($itemElement->params);				$itemElement->params = clone($params);				$itemElement->params->merge($temp);				$itemElement->params = (array) json_decode($itemElement->params);			}		}		$this->state      = &$state;		$this->items      = &$items;		$this->pagination = &$pagination;		$this->user       = &$user;		$this->item       = &$item;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		// Merge tag params. If this is single-tag view, menu params override tag params		// Otherwise, article params override menu item params		$this->params	= $this->state->get('params');		$active	= $app->getMenu()->getActive();		$temp	= clone ($this->params);		// Check to see which parameters should take priority		if ($active)		{			$currentLink = $active->link;			// If the current view is the active item and the tags view, then the menu item params take priority			if (strpos($currentLink, 'view=tags'))			{				$this->params = $active->params;				$this->params->merge($temp);				// Load layout from active query (in case it is an alternative menu item)				if (isset($active->query['layout']))				{					$this->setLayout($active->query['layout']);				}			}			else			{				// Current view is not a single tag, so the tag params take priority here				// Merge the menu item params with the tag params so that the tag params take priority				$temp->merge($item->params);				$item->params = $temp;				// Check for alternative layouts (since we are not in a single-article menu item)				// Single tag menu item layout takes priority over alt layout for a tag				if ($layout = $item->params->get('tag_layout'))				{					$this->setLayout($layout);				}			}		}		else		{			// Merge so that tag params take priority			$temp->merge($item[0]->params);			$item[0]->params = $temp;			// Check for alternative layouts (since we are not in a single-tag menu item)			// Single-tag menu item layout takes priority over alt layout for a tag			if ($layout = $item[0]->params->get('tag_layout'))			{				$this->setLayout($layout);			}		}		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_TAGS_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_tags'))		{			$this->params->set('page_subheading', $item->title);		}		// If this is not a single tag menu item, set the page title to the tag titles		$title = '';		if (!empty($this->item))		{			foreach ($this->item as $i => $itemElement)			{				if ($itemElement->title)				{					if ($i != 0)					{						$title .= ', ';					}					$title .= $itemElement->title;				}			}			$path = array(array('title' => $title, 'link' => ''));			if (empty($title))			{				$title = $app->getCfg('sitename');			}			elseif ($app->getCfg('sitename_pagetitles', 0) == 1)			{				$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);			}			elseif ($app->getCfg('sitename_pagetitles', 0) == 2)			{				$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));			}			$this->document->setTitle($title);			foreach ($this->item as $j => $itemElement)			{				if ($itemElement->metadesc)				{					$this->document->setDescription($this->item->metadesc);				}				elseif ($itemElement->metadesc && $this->params->get('menu-meta_description'))				{					$this->document->setDescription($this->params->get('menu-meta_description'));				}				if ($itemElement->metakey)				{					$this->document->setMetadata('keywords', $this->tag->metakey);				}				elseif (!$itemElement->metakey && $this->params->get('menu-meta_keywords'))				{					$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));				}				if ($this->params->get('robots'))				{					$this->document->setMetadata('robots', $this->params->get('robots'));				}				if ($app->getCfg('MetaAuthor') == '1')				{					$this->document->setMetaData('author', $itemElement->created_user_id);				}				$mdata = $this->item->metadata->toArray();				foreach ($mdata as $k => $v)				{					if ($v)					{						$this->document->setMetadata($k, $v);					}				}			}		}		// Add alternative feed link		if ($this->params->get('show_feed_link', 1) == 1)		{			$link	= '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link.'&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link.'&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides spacer markup to be used in form layouts. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldSpacer extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Spacer';	/**	 * Method to get the field input markup for a spacer.	 * The spacer does not have accept input.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		return ' ';	}	/**	 * Method to get the field label markup for a spacer.	 * Use the label text or name from the XML element as the spacer or	 * Use a hr="true" to automatically generate plain hr markup	 *	 * @return  string  The field label markup.	 *	 * @since   11.1	 */	protected function getLabel()	{		$html = array();		$class = $this->element['class'] ? (string) $this->element['class'] : '';		$html[] = '<span class="spacer">';		$html[] = '<span class="before"></span>';		$html[] = '<span class="' . $class . '">';		if ((string) $this->element['hr'] == 'true')		{			$html[] = '<hr class="' . $class . '" />';		}		else		{			$label = '';			// Get the label text from the XML element, defaulting to the element name.			$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];			$text = $this->translateLabel ? JText::_($text) : $text;			// Build the class for the label.			$class = !empty($this->description) ? 'hasTip' : '';			$class = $this->required == true ? $class . ' required' : $class;			// Add the opening label tag and main attributes attributes.			$label .= '<label id="' . $this->id . '-lbl" class="' . $class . '"';			// If a description is specified, use it to build a tooltip.			if (!empty($this->description))			{				$label .= ' title="'					. htmlspecialchars(					trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),					ENT_COMPAT, 'UTF-8'				) . '"';			}			// Add the label text and closing tag.			$label .= '>' . $text . '</label>';			$html[] = $label;		}		$html[] = '</span>';		$html[] = '<span class="after"></span>';		$html[] = '</span>';		return implode('', $html);	}	/**	 * Method to get the field title.	 *	 * @return  string  The field title.	 *	 * @since   11.1	 */	protected function getTitle()	{		return $this->getLabel();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Components helper for com_config * * @package     Joomla.Administrator * @subpackage  com_config * @since       3.0 */class ConfigHelperComponent{	/**	 * Get an array of all enabled components.	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getAllComponents()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('element')			->from('#__extensions')			->where('type = ' . $db->quote('component'))			->where('enabled = 1');		$db->setQuery($query);		$result = $db->loadColumn();		return $result;	}	/**	 * Returns true if the component has configuration options.	 *	 * @param   string  $components	 *	 * @return  boolean	 *	 * @since   3.0	 */	public static function hasComponentConfig($component)	{		return is_file(JPATH_ADMINISTRATOR . '/components/' . $component . '/config.xml');	}	/**	 * Returns an array of all components with configuration options. By only	 * components for which the current user has 'core.manage' rights are returned.	 *	 * @param   boolean  $authCheck	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getComponentsWithConfig($authCheck = true)	{		$result = array();		$components = self::getAllComponents();		$user = JFactory::getUser();		// Remove com_config from the array as that may have weird side effects		$components = array_diff($components, array('com_config'));		foreach ($components as $component)		{			if (self::hasComponentConfig($component) && (!$authCheck || $user->authorise('core.manage', $component)))			{				$result[] = $component;			}		}		return $result;	}	/**	 * Load the sys language for the given component.	 *	 * @param   string  $components	 *	 * @return  void	 *	 * @since   3.0	 */	public static function loadLanguageForComponents($components)	{		$lang = JFactory::getLanguage();		foreach ($components as $component)		{			if (!empty($component))				{					// Load the core file then					// Load extension-local file.					$lang->load($component . '.sys', JPATH_BASE, null, false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, null, false, false)				||	$lang->load($component . '.sys', JPATH_BASE, $lang->getDefault(), false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, $lang->getDefault(), false, false);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContactHelper', JPATH_ADMINISTRATOR . '/components/com_contact/helpers/contact.php');/** * Item Model for a Contact. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactModelContact extends JModelAdmin{	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   2.5	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['category_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['category_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['category_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['tag']))		{			if (!$this->batchTag($commands['tag'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (strlen($commands['user_id']) > 0)		{			if (!$this->batchUser($commands['user_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   11.1	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_contact.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->name);			$table->name = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			//$table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch change a linked user.	 *	 * @param   integer  $value     The new value matching a User ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchUser($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->user_id = (int) $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return $user->authorise('core.delete', 'com_contact.category.' . (int) $record->catid);		}	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check against the category.		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_contact.category.' . (int) $record->catid);		}		// Default to component settings if category not known.		else		{			return parent::canEditState($record);		}	}	/**	 * Returns a Table object, always creating it	 *	 * @param   type      $type      The table type to instantiate	 * @param   string    $prefix    A prefix for the table class name. Optional.	 * @param   array     $config    Configuration array for model. Optional.	 *	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Contact', $prefix = 'ContactTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the row form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		JForm::addFieldPath('JPATH_ADMINISTRATOR/components/com_users/models/fields');		// Get the form.		$form = $this->loadForm('com_contact.contact', 'contact', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('featured', 'disabled', 'true');			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('featured', 'filter', 'unset');			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get a single record.	 *	 * @param   integer    $pk    The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		if ($item = parent::getItem($pk))		{			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($item->metadata);			$item->metadata = $registry->toArray();		}		// Load associated contact items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$item->associations = array();			if ($item->id != null)			{				$associations = JLanguageAssociations::getAssociations('com_contact', '#__contact_details', 'com_contact.item', $item->id);				foreach ($associations as $tag => $association)				{					$item->associations[$tag] = $association->id;				}			}		}		// Load item tags		if (!empty($item->id))		{			$item->tags = new JHelperTags;			$item->tags->getTagIds($item->id, 'com_contact.contact');			$item->metadata['tags'] = $item->tags;		}		return $item;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_contact.edit.contact.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('contact.id') == 0)			{				$app = JFactory::getApplication();				$data->set('catid', $app->input->get('catid', $app->getUserState('com_contact.contacts.filter.category_id'), 'int'));			}		}		$this->preprocessData('com_contact.contact', $data);		return $data;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since    3.0	 */	public function save($data)	{		$app = JFactory::getApplication();		// Alter the title for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($name, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['name']);			$data['name'] = $name;			$data['alias'] = $alias;			$data['published'] = 0;		}		if (parent::save($data))		{			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$id = (int) $this->getState($this->getName() . '.id');				$item = $this->getItem($id);				// Adding self to the association				$associations = $data['associations'];				foreach ($associations as $tag => $id)				{					if (empty($id))					{						unset($associations[$tag]);					}				}				// Detecting all item menus				$all_language = $item->language == '*';				if ($all_language && !empty($associations))				{					JError::raiseNotice(403, JText::_('COM_CONTACT_ERROR_ALL_LANGUAGE_ASSOCIATED'));				}				$associations[$item->language] = $item->id;				// Deleting old association for these items				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->delete('#__associations')					->where('context=' . $db->quote('com_contact.item'))					->where('id IN (' . implode(',', $associations) . ')');				$db->setQuery($query);				$db->execute();				if ($error = $db->getErrorMsg())				{					$this->setError($error);					return false;				}				if (!$all_language && count($associations))				{					// Adding new association for these items					$key = md5(json_encode($associations));					$query->clear()						->insert('#__associations');					foreach ($associations as $tag => $id)					{						$query->values($id . ',' . $db->quote('com_contact.item') . ',' . $db->quote($key));					}					$db->setQuery($query);					$db->execute();					if ($error = $db->getErrorMsg())					{						$this->setError($error);						return false;					}				}			}			return true;		}		return false;	}	/**	 * Prepare and sanitise the table prior to saving.	 *	 * @param   JTable    $table	 *	 * @return  void	 * @since   1.6	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		$table->name = htmlspecialchars_decode($table->name, ENT_QUOTES);		$table->alias = JApplication::stringURLSafe($table->alias);		if (empty($table->alias))		{			$table->alias = JApplication::stringURLSafe($table->name);		}		if (empty($table->id))		{			// Set the values			$table->created = $date->toSql();			// Set ordering to the last item if not set			if (empty($table->ordering))			{				$db = JFactory::getDbo();				$db->setQuery('SELECT MAX(ordering) FROM #__contact_details');				$max = $db->loadResult();				$table->ordering = $max + 1;			}		}		else		{			// Set the values			$table->modified = $date->toSql();			$table->modified_by = $user->get('id');		}		// Increment the content version number.		$table->version++;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   JTable    $table    A record object.	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = ' . (int) $table->catid;		return $condition;	}	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Association content items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			// force to array (perhaps move to $this->loadFormData())			$data = (array) $data;			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_CONTACT_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if (empty($data['language']) || $tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'modal_contacts');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');				}			}			if ($add)			{				$form->load($addform, false);			}		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to toggle the featured setting of contacts.	 *	 * @param   array    $pks      The ids of the items to toggle.	 * @param   integer  $value    The value to toggle to.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function featured($pks, $value = 0)	{		// Sanitize the ids.		$pks = (array) $pks;		JArrayHelper::toInteger($pks);		if (empty($pks))		{			$this->setError(JText::_('COM_CONTACT_NO_ITEM_SELECTED'));			return false;		}		$table = $this->getTable();		try		{			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__contact_details' .					' SET featured = ' . (int) $value .					' WHERE id IN (' . implode(',', $pks) . ')'			);			$db->execute();		}		catch (Exception $e)		{			$this->setError($e->getMessage());			return false;		}		$table->reorder();		// Clean component's cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($category_id, $alias, $name)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'catid' => $category_id)))		{			if ($name == $table->name)			{				$name = JString::increment($name);			}			$alias = JString::increment($alias, 'dash');		}		return array($name, $alias);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'category.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_categories&extension=' . $input->getCmd('extension', 'com_content') . '&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_CATEGORIES_FIELDSET_DETAILS', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('title'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('title'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('alias'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('description'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('description'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('extension'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('extension'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_CATEGORIES_FIELDSET_PUBLISHING', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('id'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('hits'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('hits'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('created_user_id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('created_user_id'); ?>						</div>					</div>					<?php if (intval($this->item->created_time)) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('created_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('created_time'); ?>							</div>						</div>					<?php endif; ?>					<?php if ($this->item->modified_user_id) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_user_id'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_user_id'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_time'); ?>							</div>						</div>					<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'options', JText::_('CATEGORIES_FIELDSET_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('options'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('metadata'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo $this->loadTemplate('extrafields'); ?>				<?php if ($this->assoc) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>						<fieldset>							<?php echo $this->loadTemplate('associations'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>				<?php if ($this->canDo->get('core.admin')) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'rules', JText::_('COM_CATEGORIES_FIELDSET_RULES', true)); ?>						<fieldset>							<?php echo $this->form->getInput('rules'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<?php foreach ($this->form->getFieldset('jmetadata') as $field) : ?>						<?php if ($field->name == 'jform[metadata][tags][]') :?>						<div class="control-group">							<div class="control-label"><?php echo $field->label; ?></div>							<div class="controls"><?php echo $field->input; ?></div>						</div>						<?php endif; ?>					<?php endforeach; ?>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Create some shortcuts.$params		= &$this->item->params;$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));// check for at least one editable article$isEditable = false;if (!empty($this->items)){	foreach ($this->items as $article)	{		if ($article->params->get('access-edit'))		{			$isEditable = true;			break;		}	}}?><?php if (empty($this->items)) : ?>	<?php if ($this->params->get('show_no_articles', 1)) : ?>	<p><?php echo JText::_('COM_CONTENT_NO_ARTICLES'); ?></p>	<?php endif; ?><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<?php if ($this->params->get('show_headings') || $this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<table class="category table table-striped table-bordered table-hover">		<?php if ($this->params->get('show_headings')) : ?>		<thead>			<tr>				<th id="categorylist_header_title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<?php if ($date = $this->params->get('list_show_date')) : ?>					<th id="categorylist_header_date">						<?php if ($date == "created") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.created', $listDirn, $listOrder); ?>						<?php elseif ($date == "modified") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.modified', $listDirn, $listOrder); ?>						<?php elseif ($date == "published") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.publish_up', $listDirn, $listOrder); ?>						<?php endif; ?>					</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_author')) : ?>					<th id="categorylist_header_author">						<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'author', $listDirn, $listOrder); ?>					</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_hits')) : ?>					<th id="categorylist_header_hits">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>					</th>				<?php endif; ?>				<?php if ($isEditable) : ?>					<th id="categorylist_header_edit"><?php echo JText::_('COM_CONTENT_EDIT_ITEM'); ?></th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $article) : ?>				<?php if ($this->items[$i]->state == 0) : ?>				 <tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>				<tr class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>					<td headers="categorylist_header_title" class="list-title">						<?php if (in_array($article->access, $this->user->getAuthorisedViewLevels())) : ?>							<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid)); ?>">								<?php echo $this->escape($article->title); ?>							</a>						<?php else: ?>							<?php							echo $this->escape($article->title).' : ';							$menu		= JFactory::getApplication()->getMenu();							$active		= $menu->getActive();							$itemId		= $active->id;							$link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$itemId);							$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($article->slug));							$fullURL = new JURI($link);							$fullURL->setVar('return', base64_encode($returnURL));							?>							<a href="<?php echo $fullURL; ?>" class="register">								<?php echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE'); ?>							</a>						<?php endif; ?>						<?php if ($article->state == 0) : ?>							<span class="list-published label label-warning">								<?php echo JText::_('JUNPUBLISHED'); ?>							</span>						<?php endif; ?>					</td>					<?php if ($this->params->get('list_show_date')) : ?>						<td headers="categorylist_header_date" class="list-date small">							<?php							echo JHtml::_(								'date', $article->displayDate,								$this->escape($this->params->get('date_format', JText::_('DATE_FORMAT_LC3')))							); ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_author', 1)) : ?>						<td headers="categorylist_header_author" class="list-author">							<?php if (!empty($article->author) || !empty($article->created_by_alias)) : ?>								<?php $author = $article->author ?>								<?php $author = ($article->created_by_alias ? $article->created_by_alias : $author);?>								<?php if (!empty($article->contactid ) &&  $this->params->get('link_author') == true):?>									<?php echo JHtml::_(											'link',											JRoute::_('index.php?option=com_contact&view=contact&id='.$article->contactid),											$author									); ?>								<?php else :?>									<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>								<?php endif; ?>							<?php endif; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_hits', 1)) : ?>						<td headers="categorylist_header_hits" class="list-hits">							<span class="badge badge-info">								<?php echo JText::sprintf('JGLOBAL_HITS_COUNT', $article->hits); ?>							</span>						</td>					<?php endif; ?>					<?php if ($isEditable) : ?>						<td headers="categorylist_header_edit" class="list-edit">							<?php if ($article->params->get('access-edit')) : ?>								<?php echo JHtml::_('icon.edit', $article, $params); ?>							<?php endif; ?>						</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table><?php endif; ?><?php // Code to add a link to submit an article. ?><?php if ($this->category->getParams()->get('access-create')) : ?>	<?php echo JHtml::_('icon.create', $this->category, $this->category->params); ?><?php  endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php  endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */class NewsfeedsViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items  = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_NEWSFEEDS_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContactHelper', JPATH_ADMINISTRATOR . '/components/com_contact/helpers/contact.php');/** * @package     Joomla.Administrator * @subpackage  com_contact */abstract class JHtmlContact{	/**	 * Get the associated language flags	 *	 * @param   int  $contactid  The item id to search associations	 *	 * @return  string  The language HTML	 */	public static function association($contactid)	{		// Defaults		$html = '';		// Get the associations		if ($associations = JLanguageAssociations::getAssociations('com_contact', '#__contact_details', 'com_contact.item', $contactid))		{			foreach ($associations as $tag => $associated)			{				$associations[$tag] = (int) $associated->id;			}			// Get the associated contact items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('c.*')				->from('#__contact_details as c')				->select('cat.title as category_title')				->join('LEFT', '#__categories as cat ON cat.id=c.catid')				->where('c.id IN (' . implode(',', array_values($associations)) . ')')				->join('LEFT', '#__languages as l ON c.language=l.lang_code')				->select('l.image')				->select('l.title as language_title');			$db->setQuery($query);			try			{				$items = $db->loadObjectList('id');			}			catch (runtimeException $e)			{				throw new Exception($e->getMessage(), 500);				return false;			}			$flags = array();			// Construct html			foreach ($associations as $tag => $associated)			{				if ($associated != $contactid)				{					$flags[] = JText::sprintf(						'COM_CONTACT_TIP_ASSOCIATED_LANGUAGE',						JHtml::_('image', 'mod_languages/' . $items[$associated]->image . '.gif',							$items[$associated]->language_title,							array('title' => $items[$associated]->language_title),							true						),						$items[$associated]->name, $items[$associated]->category_title					);				}			}			$html = JHtml::_('tooltip', implode('<br />', $flags), JText::_('COM_CONTACT_TIP_ASSOCIATION'), 'admin/icon-16-links.png');		}		return $html;	}	/**	 * @param   int $value	The featured value	 * @param   int $i	 * @param   bool $canChange Whether the value can be changed or not	 *	 * @return  string	The anchor tag to toggle featured/unfeatured contacts.	 * @since   1.6	 */	public static function featured($value = 0, $i, $canChange = true)	{		// Array of image, task, title, action		$states	= array(			0	=> array('disabled.png', 'contacts.featured', 'COM_CONTACT_UNFEATURED', 'COM_CONTACT_TOGGLE_TO_FEATURE'),			1	=> array('featured.png', 'contacts.unfeatured', 'JFEATURED', 'COM_CONTACT_TOGGLE_TO_UNFEATURE'),		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[1]);		$html	= JHtml::_('image', 'admin/'.$state[0], JText::_($state[2]), null, true);		if ($canChange)		{			$html	= '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" title="'.JText::_($state[3]).'">'					. $html .'</a>';		}		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of banners. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewBanners extends JViewLegacy{	protected $categories;	protected $items;	protected $pagination;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$this->categories	= $this->get('CategoryOrders');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		BannersHelper::addSubmenu('banners');		$this->addToolbar();		require_once JPATH_COMPONENT . '/models/fields/bannerclient.php';		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		$canDo = BannersHelper::getActions($this->state->get('filter.category_id'));		$user = JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_BANNERS_MANAGER_BANNERS'), 'banners.png');		if (count($user->getAuthorisedCategories('com_banners', 'core.create')) > 0)		{			JToolbarHelper::addNew('banner.add');		}		if (($canDo->get('core.edit')))		{			JToolbarHelper::editList('banner.edit');		}		if ($canDo->get('core.edit.state'))		{			if ($this->state->get('filter.state') != 2)			{				JToolbarHelper::publish('banners.publish', 'JTOOLBAR_PUBLISH', true);				JToolbarHelper::unpublish('banners.unpublish', 'JTOOLBAR_UNPUBLISH', true);			}			if ($this->state->get('filter.state') != -1)			{				if ($this->state->get('filter.state') != 2)				{					JToolbarHelper::archiveList('banners.archive');				}				elseif ($this->state->get('filter.state') == 2)				{					JToolbarHelper::unarchiveList('banners.publish');				}			}		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::checkin('banners.checkin');		}		if ($this->state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'banners.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('banners.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_banners');		}		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_BANNERS');		JHtmlSidebar::setAction('index.php?option=com_banners&view=banners');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_BANNERS_SELECT_CLIENT'),			'filter_client_id',			JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.name' => JText::_('COM_BANNERS_HEADING_NAME'),			'a.sticky' => JText::_('COM_BANNERS_HEADING_STICKY'),			'client_name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'impmade' => JText::_('COM_BANNERS_HEADING_IMPRESSIONS'),			'clicks' => JText::_('COM_BANNERS_HEADING_CLICKS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Pages class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiPages extends JMediawikiObject{	/**     * Method to edit a page.	 *	 * @param   string  $title         Page title.	 * @param   int     $section       Section number.	 * @param   string  $sectiontitle  The title for a new section.	 * @param   string  $text          Page content.	 * @param   string  $summary       Title of the page you want to delete.     *     * @return  object     *     * @since   12.3     */	public function editPage($title, $section = null, $sectiontitle = null, $text = null, $summary = null)	{		// Get the token.		$token = $this->getToken($title, 'edit');		// Build the request path.		$path = '?action=edit';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'section' => $section,			'sectiontitle' => $section,			'text' => $text,			'summary' => $summary		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to delete a page.	 *	 * @param   string  $title      Title of the page you want to delete.	 * @param   string  $reason     Reason for the deletion.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlis.	 * @param   string  $oldimage   The name of the old image to delete.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deletePageByName($title, $reason = null, $watchlist = null, $oldimage = null)	{		// Get the token.		$token = $this->getToken($title, 'delete');		// Build the request path.		$path = '?action=delete';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'reason' => $reason,			'watchlist' => $watchlist,			'oldimage' => $oldimage		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to delete a page.	 *	 * @param   string  $pageid     Page ID of the page you want to delete.	 * @param   string  $reason     Reason for the deletion.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlis.	 * @param   string  $oldimage   The name of the old image to delete.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deletePageByID($pageid,  $reason = null, $watchlist = null, $oldimage = null)	{		// Get the token.		$token = $this->getToken($pageid, 'delete');		// Build the request path.		$path = '?action=delete';		// Build the request data.		$data = array(			'pageid' => $pageid,			'token' => $token,			'reason' => $reason,			'watchlist' => $watchlist,			'oldimage' => $oldimage		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to restore certain revisions of a deleted page.	 *	 * @param   string  $title      Title of the page you want to restore.	 * @param   string  $reason     Reason for restoring (optional).	 * @param   string  $timestamp  Timestamps of the revisions to restore.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function undeletePage($title, $reason = null, $timestamp = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'undelete');		// Build the request path.		$path = '?action=undelete';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'reason' => $reason,			'timestamp' => $timestamp,			'watchlist' => $watchlist,		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to move a page.	 *	 * @param   string   $from            Title of the page you want to move.	 * @param   string   $to              Title you want to rename the page to.	 * @param   string   $reason          Reason for the move (optional).	 * @param   string   $movetalk        Move the talk page, if it exists.	 * @param   string   $movesubpages    Move subpages, if applicable.	 * @param   boolean  $noredirect      Don't create a redirect.	 * @param   string   $watchlist       Unconditionally add or remove the page from your watchlist.	 * @param   boolean  $ignorewarnings  Ignore any warnings.     *     * @return  object     *     * @since   12.3     */	public function movePageByName($from, $to, $reason = null, $movetalk = null, $movesubpages = null, $noredirect = null,		$watchlist =null, $ignorewarnings = null)	{		// Get the token.		$token = $this->getToken($from, 'move');		// Build the request path.		$path = '?action=move';		// Build the request data.		$data = array(			'from' => $from,			'to' => $reason,			'token' => $token,			'reason' => $reason,			'movetalk' => $movetalk,			'movesubpages' => $movesubpages,			'noredirect' => $noredirect,			'watchlist' => $watchlist,			'ignorewarnings' => $ignorewarnings		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to move a page.	 *	 * @param   int      $fromid          Page ID of the page you want to move.	 * @param   string   $to              Title you want to rename the page to.	 * @param   string   $reason          Reason for the move (optional).	 * @param   string   $movetalk        Move the talk page, if it exists.	 * @param   string   $movesubpages    Move subpages, if applicable.	 * @param   boolean  $noredirect      Don't create a redirect.	 * @param   string   $watchlist       Unconditionally add or remove the page from your watchlist.	 * @param   boolean  $ignorewarnings  Ignore any warnings.	 *	 * @return  object	 *	 * @since   12.3	 */	public function movePageByID($fromid, $to, $reason = null, $movetalk = null, $movesubpages = null, $noredirect = null,		$watchlist =null, $ignorewarnings = null)	{		// Get the token.		$token = $this->getToken($fromid, 'move');		// Build the request path.		$path = '?action=move';		// Build the request data.		$data = array(			'fromid' => $fromid,			'to' => $reason,			'token' => $token,			'reason' => $reason,			'movetalk' => $movetalk,			'movesubpages' => $movesubpages,			'noredirect' => $noredirect,			'watchlist' => $watchlist,			'ignorewarnings' => $ignorewarnings		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to undo the last edit to the page.	 *	 * @param   string  $title      Title of the page you want to rollback.	 * @param   string  $user       Name of the user whose edits are to be rolled back.	 * @param   string  $summary    Custom edit summary. If not set, default summary will be used.	 * @param   string  $markbot    Mark the reverted edits and the revert as bot edits.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function rollback($title, $user, $summary = null, $markbot = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'rollback');		// Build the request path.		$path = '?action=rollback';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'user' => $user,			'expiry' => $summary,			'markbot' => $markbot,			'watchlist' => $watchlist		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to change the protection level of a page.	 *	 * @param   string  $title        Title of the page you want to (un)protect.	 * @param   string  $protections  Pipe-separated list of protection levels.	 * @param   string  $expiry       Expiry timestamps.	 * @param   string  $reason       Reason for (un)protecting (optional).	 * @param   string  $cascade      Enable cascading protection.	 * @param   string  $watchlist    Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function changeProtection($title, $protections, $expiry = null, $reason = null, $cascade = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'unblock');		// Build the request path.		$path = '?action=protect';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'protections' => $protections,			'expiry' => $expiry,			'reason' => $reason,			'cascade' => $cascade,			'watchlist' => $watchlist		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to get basic page information.     *     * @param   array    $titles      Page titles to retrieve info.     * @param   array    $inprop      Which additional properties to get.     * @param   array    $intoken     Request a token to perform a data-modifying action on a page     * @param   boolean  $incontinue  When more results are available, use this to continue.     *     * @return  object     *     * @since   12.3     */	public function getPageInfo(array $titles, array $inprop = null, array $intoken = null, $incontinue = null)	{		// Build the request		$path = '?action=query&prop=info';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($inprop))		{			$path .= '&inprop=' . $this->buildParameter($inprop);		}		if (isset($intoken))		{			$path .= '&intoken=' . $this->buildParameter($intoken);		}		if ($incontinue)		{			$path .= '&incontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get various properties defined in the page content.     *     * @param   array    $titles      Page titles to retrieve properties.     * @param   boolean  $ppcontinue  When more results are available, use this to continue.     * @param   string   $ppprop      Page prop to look on the page for.     *     * @return  object     *     * @since   12.3     */	public function getPageProperties(array $titles, $ppcontinue = null, $ppprop = null)	{		// Build the request		$path = '?action=query&prop=pageprops';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if ($ppcontinue)		{			$path .= '&ppcontinue=';		}		if (isset($ppprop))		{			$path .= '&ppprop=' . $ppprop;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get a list of revisions.     *	 * @param   array    $titles   Page titles to retrieve revisions.	 * @param   array    $rvprop   Which properties to get for each revision.	 * @param   boolean  $rvparse  Parse revision content.	 * @param   int      $rvlimit  Limit how many revisions will be returned.	 *     * @return  object     *     * @since   12.3     */	public function getRevisions(array $titles, array $rvprop = null, $rvparse = null, $rvlimit = null)	{		// Build the request		$path = '?action=query&prop=revisions';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($rvprop))		{			$path .= '&rvprop=' . $this->buildParameter($rvprop);		}		if ($rvparse)		{			$path .= '&rvparse=';		}		if (isset($rvlimit))		{			$path .= '&rvlimit=' . $rvlimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all page templates from the given page.     *     * @param   array    $titles       Page titles to retrieve templates.     * @param   array    $tlnamespace  Show templates in this namespace(s) only.     * @param   integer  $tllimit      How many templates to return.     * @param   boolean  $tlcontinue   When more results are available, use this to continue.     * @param   string   $tltemplates  Only list these templates.     * @param   string   $tldir        The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getPageTemplates(array $titles, array $tlnamespace = null, $tllimit = null, $tlcontinue = null, $tltemplates = null, $tldir = null)	{		// Build the request.		$path = '?action=query&prop=templates';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($tlnamespace))		{			$path .= '&tlnamespace=' . $this->buildParameter($tlnamespace);		}		if (isset($tllimit))		{			$path .= '&tllimit=' . $tllimit;		}		if ($tlcontinue)		{			$path .= '&tlcontinue=';		}		if (isset($tltemplates))		{			$path .= '&tltemplates=' . $tltemplates;		}		if (isset($tldir))		{			$path .= '&tldir=' . $tldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all pages that link to the given page.     *     * @param   string   $bltitle           Title to search.     * @param   integer  $blpageid          Pageid to search.     * @param   boolean  $blcontinue        When more results are available, use this to continue.     * @param   array    $blnamespace       The namespace to enumerate.     * @param   string   $blfilterredirect  How to filter for redirects..     * @param   integer  $bllimit           How many total pages to return.     * @param   boolean  $blredirect        If linking page is a redirect, find all pages that link to that redirect as well.     *     * @return  object     *     * @since   12.3     */	public function getBackLinks($bltitle, $blpageid = null, $blcontinue = null, array $blnamespace = null, $blfilterredirect = null,		$bllimit = null, $blredirect = null)	{		// Build the request.		$path = '?action=query&list=backlinks';		if (isset($bltitle))		{			$path .= '&bltitle=' . $bltitle;		}		if (isset($blpageid))		{			$path .= '&blpageid=' . $blpageid;		}		if ($blcontinue)		{			$path .= '&blcontinue=';		}		if (isset($blnamespace))		{			$path .= '&blnamespace=' . $this->buildParameter($blnamespace);		}		if (isset($blfilterredirect))		{			$path .= '&blfilterredirect=' . $blfilterredirect;		}		if (isset($bllimit))		{			$path .= '&bllimit=' . $bllimit;		}		if ($blredirect)		{			$path .= '&blredirect=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all pages that link to the given interwiki link.     *     * @param   string   $iwbltitle     Interwiki link to search for. Must be used with iwblprefix.     * @param   string   $iwblprefix    Prefix for the interwiki.     * @param   boolean  $iwblcontinue  When more results are available, use this to continue.     * @param   integer  $iwbllimit     How many total pages to return.     * @param   array    $iwblprop      Which properties to get.     *     * @return  object     *     * @since   12.3     */	public function getIWBackLinks($iwbltitle, $iwblprefix = null, $iwblcontinue = null, $iwbllimit = null, array $iwblprop = null)	{		// Build the request		$path = '?action=query&list=iwbacklinks';		if (isset($iwbltitle))		{			$path .= '&iwbltitle=' . $iwbltitle;		}		if (isset($iwblprefix))		{			$path .= '&iwblprefix=' . $iwblprefix;		}		if ($iwblcontinue)		{			$path .= '&iwblcontinue=';		}		if (isset($iwbllimit))		{			$path .= '&bllimit=' . $iwbllimit;		}		if (isset($iwblprop))		{			$path .= '&iwblprop=' . $this->buildParameter($iwblprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**	 * Method to get access token.	 *	 * @param   string  $user     The User to get token.	 * @param   string  $intoken  The type of token.	 *	 * @return  object	 *	 * @since   12.1	 */	public function getToken($user, $intoken)	{		// Build the request path.		$path = '?action=query&prop=info&intoken=' . $intoken . '&titles=User:' . $user;		// Send the request.		$response = $this->client->post($this->fetchUrl($path), null);		return (string) $this->validateResponse($response)->query->pages->page[$intoken . 'token'];	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('MenusHelper', JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Helper for mod_languages * * @package     Joomla.Site * @subpackage  mod_languages */abstract class ModLanguagesHelper{	public static function getList(&$params)	{		$user	= JFactory::getUser();		$lang 	= JFactory::getLanguage();		$app	= JFactory::getApplication();		$menu 	= $app->getMenu();		// Get menu home items		$homes = array();		foreach ($menu->getMenu() as $item)		{			if ($item->home)			{				$homes[$item->language] = $item;			}		}		// Load associations		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$active = $menu->getActive();			if ($active)			{				$associations = MenusHelper::getAssociations($active->id);			}			// load component associations			$option = $app->input->get('option');			$eName = JString::ucfirst(JString::str_ireplace('com_', '', $option));			$cName = JString::ucfirst($eName.'HelperAssociation');			JLoader::register($cName, JPath::clean(JPATH_COMPONENT_SITE . '/helpers/association.php'));			if (class_exists($cName) && is_callable(array($cName, 'getAssociations')))			{				$cassociations = call_user_func(array($cName, 'getAssociations'));			}		}		$levels		= $user->getAuthorisedViewLevels();		$languages	= JLanguageHelper::getLanguages();		// Filter allowed languages		foreach ($languages as $i => &$language) {			// Do not display language without frontend UI			if (!JLanguage::exists($language->lang_code))			{				unset($languages[$i]);			}			// Do not display language without specific home menu			elseif (!isset($homes[$language->lang_code]))			{				unset($languages[$i]);			}			// Do not display language without authorized access level			elseif (isset($language->access) && $language->access && !in_array($language->access, $levels))			{				unset($languages[$i]);			}			else {				$language->active = $language->lang_code == $lang->getTag();				if (JLanguageMultilang::isEnabled())				{					if (isset($cassociations[$language->lang_code]))					{						$language->link = JRoute::_($cassociations[$language->lang_code].'&lang='.$language->sef);					}					elseif (isset($associations[$language->lang_code]) && $menu->getItem($associations[$language->lang_code]))					{						$itemid = $associations[$language->lang_code];						if ($app->getCfg('sef') == '1')						{							$language->link = JRoute::_('index.php?lang='.$language->sef.'&Itemid='.$itemid);						}						else {							$language->link = 'index.php?lang='.$language->sef.'&amp;Itemid='.$itemid;						}					}					else {						if ($app->getCfg('sef') == '1')						{							$itemid = isset($homes[$language->lang_code]) ? $homes[$language->lang_code]->id : $homes['*']->id;							$language->link = JRoute::_('index.php?lang='.$language->sef.'&Itemid='.$itemid);						}						else {							$language->link = 'index.php?lang='.$language->sef;						}					}				}				else {					$language->link = JRoute::_('&Itemid='.$homes['*']->id);				}			}		}		return $languages;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Categories. * * @package     Joomla.Plugin * @subpackage  Finder.Categories * @since       2.5 */class PlgFinderCategories extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Categories';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_categories';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'category';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'Category';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__categories';	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'published';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderDelete($context, $table)	{		if ($context == 'com_categories.category')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);				// Reindex the item				$this->reindex($row->id);			}			// Check if the parent access level is different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// Query the database for the old access level and the parent if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// The category published state is tied to the parent category			// published state so we need to look up all published states			// before we change anything.			foreach ($pks as $pk)			{				$query = clone($this->getStateQuery());				$query->where('a.id = ' . (int) $pk);				// Get the published states.				$this->db->setQuery($query);				$item = $this->db->loadObject();				// Translate the state.				$state = null;				if ($item->parent_id != 1)				{					$state = $item->cat_state;				}				$temp = $this->translateState($value, $state);				// Update the item.				$this->change($pk, 'state', $temp);				// Reindex the item				$this->reindex($pk);			}		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Need to import component route helpers dynamically, hence the reason it's handled here		$path = JPATH_SITE . '/components/' . $item->extension . '/helpers/route.php';		if (is_file($path))		{			include_once $path;		}		$extension = ucfirst(substr($item->extension, 4));		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = $registry;		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		/* Add the meta-data processing instructions based on the categories		 * configuration parameters.		 */		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		//$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Trigger the onContentPrepare event.		$item->summary = FinderIndexerHelper::prepareContent($item->summary, $item->params);		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $item->extension, $this->layout);		$class = $extension . 'HelperRoute';		if (class_exists($class) && method_exists($class, 'getCategoryRoute'))		{			$item->route = $class::getCategoryRoute($item->id);		}		else		{			$item->route = ContentHelperRoute::getCategoryRoute($item->slug, $item->catid);		}		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Translate the state. Categories should only be published if the parent category is published.		$item->state = $this->translateState($item->state);		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Category');		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load com_content route helper as it is the fallback for routing in the indexer in this instance.		include_once JPATH_SITE . '/components/com_content/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.description AS summary, a.extension')			->select('a.created_user_id AS created_by, a.modified_time AS modified, a.modified_user_id AS modified_by')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.lft, a.parent_id, a.level')			->select('a.created_time AS start_date, a.published AS state, a.access, a.params');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias)			->from('#__categories AS a')			->where($db->quoteName('a.id') . ' > 1');		return $query;	}	/**	 * Method to get a SQL query to load the published and access states for	 * an article and category.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('a.id'))			->select('a.' . $this->state_field . ' AS state, c.published AS cat_state')			->select('a.access, c.access AS cat_access')			->from($this->db->quoteName('#__categories') . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.parent_id');		return $query;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for interacting with a Facebook API instance. * * @package     Joomla.Platform * @subpackage  Facebook * @since       13.1 */class JFacebook{	/**	 * @var    JRegistry  Options for the Facebook object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var    JFacebookOAuth  The OAuth client.	 * @since  13.1	 */	protected $oauth;	/**	 * @var    JFacebookUser  Facebook API object for user.	 * @since  13.1	 */	protected $user;	/**	* @var    JFacebookStatus  Facebook API object for status.	* @since  13.1	*/	protected $status;	/**	* @var    JFacebookCheckin  Facebook API object for checkin.	* @since  13.1	*/	protected $checkin;	/**	* @var    JFacebookEvent  Facebook API object for event.	* @since  13.1	*/	protected $event;	/**	* @var    JFacebookGroup  Facebook API object for group.	* @since  13.1	*/	protected $group;	/**	* @var    JFacebookLink  Facebook API object for link.	* @since  13.1	*/	protected $link;	/**	* @var    JFacebookNote  Facebook API object for note.	* @since  13.1	*/	protected $note;	/**	* @var    JFacebookPost  Facebook API object for post.	* @since  13.1	*/	protected $post;	/**	* @var    JFacebookComment  Facebook API object for comment.	* @since  13.1	*/	protected $comment;	/**	* @var    JFacebookPhoto  Facebook API object for photo.	* @since  13.1	*/	protected $photo;	/**	* @var    JFacebookVideo  Facebook API object for video.	* @since  13.1	*/	protected $video;	/**	* @var    JFacebookAlbum  Facebook API object for album.	* @since  13.1	*/	protected $album;	/**	 * Constructor.	 *	 * @param   JFacebookOAuth  $oauth    OAuth client.	 * @param   JRegistry       $options  Facebook options object.	 * @param   JFacebookHttp   $client   The HTTP client object.	 *	 * @since   13.1	 */	public function __construct(JFacebookOAuth $oauth = null, JRegistry $options = null, JHttp $client = null)	{		$this->oauth = $oauth;		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'https://graph.facebook.com/');	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JFacebookObject  Facebook API object (status, user, friends etc).	 *	 * @since   13.1	 */	public function __get($name)	{		switch ($name)		{			case 'user':				if ($this->user == null)				{					$this->user = new JFacebookUser($this->options, $this->client, $this->oauth);				}				return $this->user;			case 'status':				if ($this->status == null)				{					$this->status = new JFacebookStatus($this->options, $this->client, $this->oauth);				}				return $this->status;			case 'checkin':				if ($this->checkin == null)				{					$this->checkin = new JFacebookCheckin($this->options, $this->client, $this->oauth);				}				return $this->checkin;			case 'event':				if ($this->event == null)				{					$this->event = new JFacebookEvent($this->options, $this->client, $this->oauth);				}				return $this->event;			case 'group':				if ($this->group == null)				{					$this->group = new JFacebookGroup($this->options, $this->client, $this->oauth);				}				return $this->group;			case 'link':				if ($this->link == null)				{					$this->link = new JFacebookLink($this->options, $this->client, $this->oauth);				}				return $this->link;			case 'note':				if ($this->note == null)				{					$this->note = new JFacebookNote($this->options, $this->client, $this->oauth);				}				return $this->note;			case 'post':				if ($this->post == null)				{					$this->post = new JFacebookPost($this->options, $this->client, $this->oauth);				}				return $this->post;			case 'comment':				if ($this->comment == null)				{					$this->comment = new JFacebookComment($this->options, $this->client, $this->oauth);				}				return $this->comment;			case 'photo':				if ($this->photo == null)				{					$this->photo = new JFacebookPhoto($this->options, $this->client, $this->oauth);				}				return $this->photo;			case 'video':				if ($this->video == null)				{					$this->video = new JFacebookVideo($this->options, $this->client, $this->oauth);				}				return $this->video;			case 'album':				if ($this->album == null)				{					$this->album = new JFacebookAlbum($this->options, $this->client, $this->oauth);				}				return $this->album;		}	}	/**	 * Get an option from the JFacebook instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JFacebook instance.	 *	* @param   string  $key    The name of the option to set.	* @param   mixed   $value  The option value to set.	*	* @return  JFacebook  This object for method chaining.	*	* @since   13.1	*/	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Frontpage View class * * @package     Joomla.Site * @subpackage  com_contact * @since       1.6 */class ContactViewFeatured extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $categories;	protected $pagination;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Check whether category access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		// Prepare the data.		// Compute the contact slug.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			$temp		= new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);			if ($item->params->get('show_email', 0) == 1)			{				$item->email_to = trim($item->email_to);				if (!empty($item->email_to) && JMailHelper::isEmailAddress($item->email_to))				{					$item->email_to = JHtml::_('email.cloak', $item->email_to);				} else {					$item->email_to = '';				}			}		}		// Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$maxLevel         = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Extension.Joomla * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! master extension plugin. * * @package     Joomla.Plugin * @subpackage  Extension.Joomla * @since       1.6 */class PlgExtensionJoomla extends JPlugin{	/**	 * @var    integer Extension Identifier	 * @since  1.6	 */	private $eid = 0;	/**	 * @var    JInstaller Installer object	 * @since  1.6	 */	private $installer = null;	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Adds an update site to the table if it doesn't exist.	 *	 * @param   string   $name      The friendly name of the site	 * @param   string   $type      The type of site (e.g. collection or extension)	 * @param   string   $location  The URI for the site	 * @param   boolean  $enabled   If this site is enabled	 *	 * @return  void	 *	 * @since   1.6	 */	private function addUpdateSite($name, $type, $location, $enabled)	{		$db = JFactory::getDbo();		// Look if the location is used already; doesn't matter what type you can't have two types at the same address, doesn't make sense		$query = $db->getQuery(true)			->select('update_site_id')			->from('#__update_sites')			->where('location = ' . $db->quote($location));		$db->setQuery($query);		$update_site_id = (int) $db->loadResult();		// If it doesn't exist, add it!		if (!$update_site_id)		{			$query->clear()				->insert('#__update_sites')				->columns(array($db->quoteName('name'), $db->quoteName('type'), $db->quoteName('location'), $db->quoteName('enabled')))				->values($db->quote($name) . ', ' . $db->quote($type) . ', ' . $db->quote($location) . ', ' . (int) $enabled);			$db->setQuery($query);			if ($db->execute())			{				// Link up this extension to the update site				$update_site_id = $db->insertid();			}		}		// Check if it has an update site id (creation might have faileD)		if ($update_site_id)		{			// Look for an update site entry that exists			$query->clear()				->select('update_site_id')				->from('#__update_sites_extensions')				->where('update_site_id = ' . $update_site_id)				->where('extension_id = ' . $this->eid);			$db->setQuery($query);			$tmpid = (int) $db->loadResult();			if (!$tmpid)			{				// Link this extension to the relevant update site				$query->clear()					->insert('#__update_sites_extensions')					->columns(array($db->quoteName('update_site_id'), $db->quoteName('extension_id')))					->values($update_site_id . ', ' . $this->eid);				$db->setQuery($query);				$db->execute();			}		}	}	/**	 * Handle post extension install update sites	 *	 * @param   JInstaller  $installer  Installer object	 * @param   integer     $eid        Extension Identifier	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterInstall($installer, $eid )	{		if ($eid)		{			$this->installer = $installer;			$this->eid = $eid;			// After an install we only need to do update sites			$this->processUpdateSites();		}	}	/**	 * Handle extension uninstall	 *	 * @param   JInstaller  $installer  Installer instance	 * @param   integer     $eid        Extension id	 * @param   integer     $result     Installation result	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterUninstall($installer, $eid, $result)	{		if ($eid)		{			// Wipe out any update_sites_extensions links			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->delete('#__update_sites_extensions')				->where('extension_id = ' . $eid);			$db->setQuery($query);			$db->execute();			// Delete any unused update sites			$query->clear()				->select('update_site_id')				->from('#__update_sites_extensions');			$db->setQuery($query);			$results = $db->loadColumn();			if (is_array($results))			{				// So we need to delete the update sites and their associated updates				$updatesite_delete = $db->getQuery(true);				$updatesite_delete->delete('#__update_sites');				$updatesite_query = $db->getQuery(true);				$updatesite_query->select('update_site_id')					->from('#__update_sites');				// If we get results back then we can exclude them				if (count($results))				{					$updatesite_query->where('update_site_id NOT IN (' . implode(',', $results) . ')');					$updatesite_delete->where('update_site_id NOT IN (' . implode(',', $results) . ')');				}				// So let's find what update sites we're about to nuke and remove their associated extensions				$db->setQuery($updatesite_query);				$update_sites_pending_delete = $db->loadColumn();				if (is_array($update_sites_pending_delete) && count($update_sites_pending_delete))				{					// Nuke any pending updates with this site before we delete it					// TODO: investigate alternative of using a query after the delete below with a query and not in like above					$query->clear()						->delete('#__updates')						->where('update_site_id IN (' . implode(',', $update_sites_pending_delete) . ')');					$db->setQuery($query);					$db->execute();				}				// Note: this might wipe out the entire table if there are no extensions linked				$db->setQuery($updatesite_delete);				$db->execute();			}			// Last but not least we wipe out any pending updates for the extension			$query->clear()				->delete('#__updates')				->where('extension_id = '. $eid);			$db->setQuery($query);			$db->execute();		}	}	/**	 * After update of an extension	 *	 * @param   JInstaller  $installer  Installer object	 * @param   integer     $eid        Extension identifier	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterUpdate($installer, $eid)	{		if ($eid)		{			$this->installer = $installer;			$this->eid = $eid;			// handle any update sites			$this->processUpdateSites();		}	}	/**	 * Processes the list of update sites for an extension.	 *	 * @return  void	 *	 * @since   1.6	 */	private function processUpdateSites()	{		$manifest		= $this->installer->getManifest();		$updateservers	= $manifest->updateservers;		if ($updateservers)		{			$children = $updateservers->children();		}		else		{			$children = array();		}		if (count($children))		{			foreach ($children as $child)			{				$attrs = $child->attributes();				$this->addUpdateSite($attrs['name'], $attrs['type'], $child, true);			}		}		else		{			$data = (string) $updateservers;			if (strlen($data))			{				// We have a single entry in the update server line, let us presume this is an extension line				$this->addUpdateSite(JText::_('PLG_EXTENSION_JOOMLA_UNKNOWN_SITE'), 'extension', $data, true);			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Public cache handler * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheController{	/**	 * @var    JCache	 * @since  11.1	 */	public $cache;	/**	 * @var    array  Array of options	 * @since  11.1	 */	public $options;	/**	 * Constructor	 *	 * @param   array  $options  Array of options	 *	 * @since   11.1	 */	public function __construct($options)	{		$this->cache = new JCache($options);		$this->options = & $this->cache->_options;		// Overwrite default options with given options		foreach ($options as $option => $value)		{			if (isset($options[$option]))			{				$this->options[$option] = $options[$option];			}		}	}	/**	 * Magic method to proxy JCacheControllerMethods	 *	 * @param   string  $name       Name of the function	 * @param   array   $arguments  Array of arguments for the function	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function __call($name, $arguments)	{		$nazaj = call_user_func_array(array($this->cache, $name), $arguments);		return $nazaj;	}	/**	 * Returns a reference to a cache adapter object, always creating it	 *	 * @param   string  $type     The cache object type to instantiate; default is output.	 * @param   array   $options  Array of options	 *	 * @return  JCache  A JCache object	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($type = 'output', $options = array())	{		self::addIncludePath(JPATH_PLATFORM . '/joomla/cache/controller');		$type = strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $type));		$class = 'JCacheController' . ucfirst($type);		if (!class_exists($class))		{			// Search for the class file in the JCache include paths.			jimport('joomla.filesystem.path');			if ($path = JPath::find(self::addIncludePath(), strtolower($type) . '.php'))			{				include_once $path;			}			else			{				throw new RuntimeException('Unable to load Cache Controller: ' . $type, 500);			}		}		return new $class($options);	}	/**	 * Set caching enabled state	 *	 * @param   boolean  $enabled  True to enable caching	 *	 * @return  void	 *	 * @since   11.1	 */	public function setCaching($enabled)	{		$this->cache->setCaching($enabled);	}	/**	 * Set cache lifetime	 *	 * @param   integer  $lt  Cache lifetime	 *	 * @return  void	 *	 * @since   11.1	 */	public function setLifeTime($lt)	{		$this->cache->setLifeTime($lt);	}	/**	 * Add a directory where JCache should search for controllers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array   An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!empty($path) && !in_array($path, $paths))		{			jimport('joomla.filesystem.path');			array_unshift($paths, JPath::clean($path));		}		return $paths;	}	/**	 * Get stored cached data by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  mixed   False on no result, cached object otherwise	 *	 * @since   11.1	 */	public function get($id, $group = null)	{		$data = false;		$data = $this->cache->get($id, $group);		if ($data === false)		{			$locktest = new stdClass;			$locktest->locked = null;			$locktest->locklooped = null;			$locktest = $this->cache->lock($id, $group);			if ($locktest->locked == true && $locktest->locklooped == true)			{				$data = $this->cache->get($id, $group);			}			if ($locktest->locked == true)			{				$this->cache->unlock($id, $group);			}		}		// Check again because we might get it from second attempt		if ($data !== false)		{			// Trim to fix unserialize errors			$data = unserialize(trim($data));		}		return $data;	}	/**	 * Store data to cache by id and group	 *	 * @param   mixed    $data        The data to store	 * @param   string   $id          The cache data id	 * @param   string   $group       The cache data group	 * @param   boolean  $wrkarounds  True to use wrkarounds	 *	 * @return  boolean  True if cache stored	 * 	 * @since   11.1	 */	public function store($data, $id, $group = null, $wrkarounds = true)	{		$locktest = new stdClass;		$locktest->locked = null;		$locktest->locklooped = null;		$locktest = $this->cache->lock($id, $group);		if ($locktest->locked == false && $locktest->locklooped == true)		{			$locktest = $this->cache->lock($id, $group);		}		$sucess = $this->cache->store(serialize($data), $id, $group);		if ($locktest->locked == true)		{			$this->cache->unlock($id, $group);		}		return $sucess;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');$canDo = TemplatesHelper::getActions();$input = JFactory::getApplication()->input;?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=templates'); ?>" method="post" name="adminForm" id="adminForm">	<div class="width-50 fltlft">		<fieldset class="adminform" id="template-manager">			<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_DESCRIPTION');?></legend>			<?php echo JHtml::_('templates.thumb', $this->template->element, $this->template->client_id); ?>			<h2><?php echo ucfirst($this->template->element); ?></h2>			<?php $client = JApplicationHelper::getClientInfo($this->template->client_id); ?>			<p><?php $this->template->xmldata = TemplatesHelper::parseXMLTemplateFile($client->path, $this->template->element);?></p>			<p><?php  echo JText::_($this->template->xmldata->description); ?></p>		</fieldset>		<fieldset class="adminform" id="template-manager">			<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_MASTER_FILES');?></legend>			<ul>				<li>					<?php $id = $this->files['main']['index']->id; ?>					<?php if ($canDo->get('core.edit')) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">					<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_MAIN');?>					<?php if ($canDo->get('core.edit')) : ?>						</a>					<?php endif; ?>				</li>				<?php if ($this->files['main']['error']->exists) : ?>				<li>					<?php $id = $this->files['main']['error']->id; ?>					<?php if ($canDo->get('core.edit')) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">					<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_ERROR');?>					<?php if ($canDo->get('core.edit')) : ?>						</a>					<?php endif; ?>				</li>				<?php endif; ?>				<?php if ($this->files['main']['offline']->exists) : ?>					<li>						<?php $id = $this->files['main']['offline']->id; ?>						<?php if ($canDo->get('core.edit')) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">						<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_OFFLINEVIEW');?>						<?php if ($canDo->get('core.edit')) : ?>							</a>						<?php endif; ?>					</li>				<?php endif; ?>				<?php if ($this->files['main']['print']->exists) : ?>				<li>					<?php $id = $this->files['main']['print']->id; ?>					<?php if ($canDo->get('core.edit')) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">					<?php endif; ?>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_PRINTVIEW');?>					<?php if ($canDo->get('core.edit')) : ?>						</a>					<?php endif; ?>				</li>				<?php endif; ?>			</ul>		</fieldset>		<div class="clr"></div>	</div>	<div class="width-50 fltrt">		<fieldset class="adminform" id="template-manager-css">			<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_CSS');?></legend>			<?php if (!empty($this->files['css'])) : ?>			<ul>				<?php foreach ($this->files['css'] as $file) : ?>				<li>					<?php if ($canDo->get('core.edit')) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$file->id);?>">					<?php endif; ?>						<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_EDIT_CSS', $file->name);?>					<?php if ($canDo->get('core.edit')) : ?>					</a>					<?php endif; ?>				</li>				<?php endforeach; ?>			</ul>			<?php endif; ?>			<!--<div>				<a href="#" class="modal">					<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_ADD_CSS');?></a>			</div>-->		</fieldset>		<div class="clr"></div>		<input type="hidden" name="task" value="" />	</div><div class="width-50 fltrt"></form><form action="<?php echo JRoute::_('index.php?option=com_templates&task=template.copy&id=' . $input->getInt('id')); ?>"		method="post" name="adminForm" id="adminForm">	<fieldset class="adminform" id="template-manager-css">		<legend><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY');?></legend>		<label id="new_name" class="hasTip"  title="<?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_DESC'); ?>"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_LABEL')?></label>		<input class="inputbox" type="text" id="new_name" name="new_name"  />		<button type="submit"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY'); ?></button>	</fieldset>	<?php echo JHtml::_('form.token'); ?></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories Component Categories Model * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesModelCategories extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'published', 'a.published',				'access', 'a.access', 'access_level',				'language', 'a.language',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'created_time', 'a.created_time',				'created_user_id', 'a.created_user_id',				'lft', 'a.lft',				'rgt', 'a.rgt',				'level', 'a.level',				'path', 'a.path',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string    An optional ordering field.	 * @param   string    An optional direction (asc|desc).	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$context = $this->context;		$extension = $app->getUserStateFromRequest('com_categories.categories.filter.extension', 'extension', 'com_content', 'cmd');		$this->setState('filter.extension', $extension);		$parts = explode('.', $extension);		// Extract the component name		$this->setState('filter.component', $parts[0]);		// Extract the optional section name		$this->setState('filter.section', (count($parts) > 1) ? $parts[1] : null);		$search = $this->getUserStateFromRequest($context . '.search', 'filter_search');		$this->setState('filter.search', $search);		$level = $this->getUserStateFromRequest($context . '.filter.level', 'filter_level', 0, 'int');		$this->setState('filter.level', $level);		$access = $this->getUserStateFromRequest($context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$published = $this->getUserStateFromRequest($context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		$language = $this->getUserStateFromRequest($context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		$tag = $this->getUserStateFromRequest($this->context . '.filter.tag', 'filter_tag', '');		$this->setState('filter.tag', $tag);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.extension');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * @return  string	 *	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.note, a.published, a.access' .					', a.checked_out, a.checked_out_time, a.created_user_id' .					', a.path, a.parent_id, a.level, a.lft, a.rgt' .					', a.language'			)		);		$query->from('#__categories AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the users for the author.		$query->select('ua.name AS author_name')			->join('LEFT', '#__users AS ua ON ua.id = a.created_user_id');		// Join over the associations.		$assoc = $this->getAssoc();		if ($assoc)		{			$query->select('COUNT(asso2.id)>1 as association')				->join('LEFT', '#__associations AS asso ON asso.id = a.id AND asso.context=' . $db->quote('com_categories.item'))				->join('LEFT', '#__associations AS asso2 ON asso2.key = asso.key')				->group('a.id');		}		// Filter by extension		if ($extension = $this->getState('filter.extension'))		{			$query->where('a.extension = ' . $db->quote($extension));		}		// Filter on the level.		if ($level = $this->getState('filter.level'))		{			$query->where('a.level <= ' . (int) $level);		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'author:') === 0)			{				$search = $db->quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(ua.name LIKE ' . $search . ' OR ua.username LIKE ' . $search . ')');			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ' OR a.note LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Filter by a single tag.		$tagId = $this->getState('filter.tag');		if (is_numeric($tagId))		{			$query->where($db->quoteName('tagmap.tag_id') . ' = ' . (int) $tagId)				->join(					'LEFT', $db->quoteName('#__contentitem_tag_map', 'tagmap')					. ' ON ' . $db->quoteName('tagmap.content_item_id') . ' = ' . $db->quoteName('a.id')					. ' AND ' . $db->quoteName('tagmap.type_alias') . ' = ' . $db->quote($extension . '.category')				);		}		// Add the list ordering clause		$listOrdering = $this->getState('list.ordering', 'a.lft');		$listDirn = $db->escape($this->getState('list.direction', 'ASC'));		if ($listOrdering == 'a.access')		{			$query->order('a.access ' . $listDirn . ', a.lft ' . $listDirn);		}		else		{			$query->order($db->escape($listOrdering) . ' ' . $listDirn);		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to determine if an association exists	 *	 * @return  boolean  True if the association exists	 *	 * @since  3.0	 */	public function getAssoc()	{		static $assoc = null;		if (!is_null($assoc))		{			return $assoc;		}		$app = JFactory::getApplication();		$extension = $this->getState('filter.extension');		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		$extension = explode('.', $extension);		$component = array_shift($extension);		$cname = str_replace('com_', '', $component);		if (!$assoc || !$component || !$cname)		{			$assoc = false;		}		else		{			$hname = $cname . 'HelperAssociation';			JLoader::register($hname, JPATH_SITE . '/components/' . $component . '/helpers/association.php');			$assoc = class_exists($hname) && !empty($hname::$category_association);		}		return $assoc;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tag Model * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsModelTag extends JModelList{	/**	 * The tags that apply.	 *	 * @var    object	 * @since  3.1	 */	protected $tag = null;	/**	 * The list of items associated with the tags.	 *	 * @var    array	 * @since  3.1	 */	protected $items = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   3.1	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'core_content_id', 'c.core_content_id',				'core_title', 'c.core_title',				'core_type_alias', 'c.core_type_alias',				'core_checked_out_user_id', 'c.core_checked_out_user_id',				'core_checked_out_time', 'c.core_checked_out_time',				'core_catid', 'c.core_catid',				'core_state', 'c.core_state',				'core_access', 'c.core_access',				'core_created_user_id', 'c.core_created_user_id',				'core_created_time', 'c.core_created_time',				'core_modified_time', 'c.core_modified_time',				'core_ordering', 'c.core_ordering',				'core_featured', 'c.core_featured',				'core_language', 'c.core_language',				'core_hits', 'c.core_hits',				'core_publish_up', 'c.core_publish_up',				'core_publish_down', 'c.core_publish_down',				'core_images', 'c.core_images',				'core_urls', 'c.core_urls',				'match_count',			);		}		parent::__construct($config);	}	/**	 * Method to get a list of items for a list of tags.	 *	 * @return  mixed  An array of objects on success, false on failure.	 *	 * @since   3.1	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		if (!empty($items))		{			foreach ($items as $item)			{				$explodedTypeAlias = explode('.', $item->type_alias);				$item->link = 'index.php?option=' . $explodedTypeAlias[0] . '&view=' . $explodedTypeAlias[1] . '&id=' . $item->content_item_id . ':' . $item->core_alias;				// Get display date				switch ($this->state->params->get('tag_list_show_date'))				{					case 'modified':						$item->displayDate = $item->core_modified_time;						break;					case 'created':						$item->displayDate = $item->core_created_time;						break;					default:					case 'published':						$item->displayDate = ($item->core_publish_up == 0) ? $item->core_created_time : $item->core_publish_up;						break;				}			}			return $items;		}		else		{			return false;		}	}	/**	 * Method to build an SQL query to load the list data of all items with a given tag.	 *	 * @return  string  An SQL query	 *	 * @since   3.1	 */	protected function getListQuery()	{		$tagId  = $this->getState('tag.id') ? : '';		$typesr = $this->getState('tag.typesr');		$orderByOption = $this->getState('list.ordering', 'c.core_title');		$includeChildren = $this->state->params->get('include_children', 0);		$orderDir = $this->getState('list.direction', 'ASC');		$matchAll = $this->getState('params')->get('return_any_or_all', 1);		$language = $this->getState('tag.language');		$stateFilter = $this->getState('tag.state');	// Optionally filter on language		if (empty($language))		{			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');		}		$listQuery = New JHelperTags;		$query = $listQuery->getTagItemsQuery($tagId, $typesr, $includeChildren, $orderByOption, $orderDir, $matchAll, $language, $stateFilter);		if ($this->state->get('list.filter'))		{			$query->where($this->_db->quoteName('c.core_title') . ' LIKE ' . $this->_db->quote('%' . $this->state->get('list.filter') . '%'));		}		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState($ordering = 'c.core_title', $direction = 'ASC')	{		$app = JFactory::getApplication('site');		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		// Load state from the request.		$pk = $app->input->getObject('id');		$pk = (array) $pk;		$pkString = '';		foreach ($pk as $id)		{			$pkString .= (int) $id . ',';		}		$pkString = rtrim($pkString, ',');		$this->setState('tag.id', $pkString);		// Get the selected list of types from the request. If none are specified all are used.		$typesr = $app->input->getObject('types');		if ($typesr)		{			$typesr = (array) $typesr;			$this->setState('tag.typesr', $typesr);		}		$language = $app->input->getString('tag_list_language_filter');		$this->setState('tag.language', $language);		// List state information		$format = $app->input->getWord('format');		if ($format == 'feed')		{			$limit = $app->getCfg('feed_limit');		}		else		{			if ($this->state->params->get('show_pagination_limit'))			{				$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');			}			else			{				$limit = $this->state->params->get('maximum', 20);			}		}		$this->setState('list.limit', $limit);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $offset);		$itemid = $pkString . ':' . $app->input->get('Itemid', 0, 'int');		$orderCol = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');		$orderCol = !$orderCol ? $this->state->params->get('tag_list_orderby', 'c.core_title') : $orderCol;		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'c.core_title';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_order_direction', 'filter_order_Dir', '', 'string');		$listOrder = !$listOrder ? $this->state->params->get('tag_list_orderby_direction', 'ASC') : $listOrder;		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$this->setState('tag.state', 1);		// Optional filter text		$filterSearch = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_search', 'filter-search', '', 'string');		$this->setState('list.filter', $filterSearch);	}	/**	 * Method to get tag data for the current tag or tags	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   3.1	 */	public function getItem($pk = null)	{		if (!isset($this->item) ||$this->item === null)		{			$this->item = false;			if (empty($id))			{				$id = $this->getState('tag.id');			}			// Get a level row instance.			$table = JTable::getInstance('Tag', 'TagsTable');			$idsArray = explode(',', $id);			// Attempt to load the rows into an array.			foreach ($idsArray as $id)			{				try				{					$table->load($id);					// Check published state.					if ($published = $this->getState('filter.published'))					{						if ($table->published != $published)						{							return $this->item;						}					}					// Convert the JTable to a clean JObject.					$properties = $table->getProperties(1);					$this->item[] = JArrayHelper::toObject($properties, 'JObject');				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		return $this->item;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API Info class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1*/class JOpenstreetmapInfo extends JOpenstreetmapObject{	/**	 * Method to get capabilities of the API	 * 	 * @return	array The xml response	 * 	 * @since	13.1	 */	public function getCapabilities()	{		// Set the API base		$base = 'capabilities';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', array());		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}	/**	 * Method to retrieve map data of a bounding box	 * 	 * @param   float  $left    left boundary	 * @param   float  $bottom  bottom boundary	 * @param   float  $right   right boundary	 * @param   float  $top     top boundary	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function retrieveMapData($left, $bottom, $right, $top)	{		// Set the API base		$base = 'map?bbox=' . $left . ',' . $bottom . ',' . $right . ',' . $top;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', array());		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}	/**	 * Method to retrieve permissions for current user	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function retrievePermissions()	{		if ($this->oauth != null)		{			$token = $this->oauth->getToken();		}		// Set the API base		$base = 'permissions';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', array());		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Configuration setup model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelConfiguration extends JModelBase{	/**	 * Method to setup the configuration file	 *	 * @param   array  $options  The session options	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function setup($options)	{		// Get the options as an object for easier handling.		$options = JArrayHelper::toObject($options);		// Attempt to create the root user.		if (!$this->_createConfiguration($options))		{			return false;		}		// Attempt to create the root user.		if (!$this->_createRootUser($options))		{			return false;		}		return true;	}	/**	 * Method to create the configuration file	 *	 * @param   array  $options  The session options	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	function _createConfiguration($options)	{		// Create a new registry to build the configuration options.		$registry = new JRegistry;		/* Site Settings */		$registry->set('offline', $options->site_offline);		$registry->set('offline_message', JText::_('INSTL_STD_OFFLINE_MSG'));		$registry->set('display_offline_message', 1);		$registry->set('offline_image', '');		$registry->set('sitename', $options->site_name);		$registry->set('editor', 'tinymce');		$registry->set('captcha', '0');		$registry->set('list_limit', 20);		$registry->set('access', 1);		/* Debug Settings */		$registry->set('debug', 0);		$registry->set('debug_lang', 0);		/* Database Settings */		$registry->set('dbtype', $options->db_type);		$registry->set('host', $options->db_host);		$registry->set('user', $options->db_user);		$registry->set('password', $options->db_pass);		$registry->set('db', $options->db_name);		$registry->set('dbprefix', $options->db_prefix);		/* Server Settings */		$registry->set('live_site', '');		$registry->set('secret', JUserHelper::genRandomPassword(16));		$registry->set('gzip', 0);		$registry->set('error_reporting', 'default');		$registry->set('helpurl', 'http://help.joomla.org/proxy/index.php?option=com_help&amp;keyref=Help{major}{minor}:{keyref}');		$registry->set('ftp_host', isset($options->ftp_host) ? $options->ftp_host : '');		$registry->set('ftp_port', isset($options->ftp_host) ? $options->ftp_port : '');		$registry->set('ftp_user', (isset($options->ftp_save) && $options->ftp_save && isset($options->ftp_user)) ? $options->ftp_user : '');		$registry->set('ftp_pass', (isset($options->ftp_save) && $options->ftp_save && isset($options->ftp_pass)) ? $options->ftp_pass : '');		$registry->set('ftp_root', (isset($options->ftp_save) && $options->ftp_save && isset($options->ftp_root)) ? $options->ftp_root : '');		$registry->set('ftp_enable', isset($options->ftp_host) ? $options->ftp_enable : '');		/* Locale Settings */		$registry->set('offset', 'UTC');		/* Mail Settings */		$registry->set('mailer', 'mail');		$registry->set('mailfrom', $options->admin_email);		$registry->set('fromname', $options->site_name);		$registry->set('sendmail', '/usr/sbin/sendmail');		$registry->set('smtpauth', 0);		$registry->set('smtpuser', '');		$registry->set('smtppass', '');		$registry->set('smtphost', 'localhost');		$registry->set('smtpsecure', 'none');		$registry->set('smtpport', '25');		/* Cache Settings */		$registry->set('caching', 0);		$registry->set('cache_handler', 'file');		$registry->set('cachetime', 15);		/* Meta Settings */		$registry->set('MetaDesc', $options->site_metadesc);		$registry->set('MetaKeys', '');		$registry->set('MetaTitle', 1);		$registry->set('MetaAuthor', 1);		$registry->set('MetaVersion', 0);		$registry->set('robots', '');		/* SEO Settings */		$registry->set('sef', 1);		$registry->set('sef_rewrite', 0);		$registry->set('sef_suffix', 0);		$registry->set('unicodeslugs', 0);		/* Feed Settings */		$registry->set('feed_limit', 10);		$registry->set('log_path', JPATH_ROOT . '/logs');		$registry->set('tmp_path', JPATH_ROOT . '/tmp');		/* Session Setting */		$registry->set('lifetime', 15);		$registry->set('session_handler', 'database');		// Generate the configuration class string buffer.		$buffer = $registry->toString('PHP', array('class' => 'JConfig', 'closingtag' => false));		// Build the configuration file path.		$path = JPATH_CONFIGURATION . '/configuration.php';		// Determine if the configuration file path is writable.		if (file_exists($path))		{			$canWrite = is_writable($path);		}		else		{			$canWrite = is_writable(JPATH_CONFIGURATION . '/');		}		/*		 * If the file exists but isn't writable OR if the file doesn't exist and the parent directory		 * is not writable we need to use FTP		 */		$useFTP = false;		if ((file_exists($path) && !is_writable($path)) || (!file_exists($path) && !is_writable(dirname($path) . '/')))		{			$useFTP = true;		}		// Check for safe mode		if (ini_get('safe_mode'))		{			$useFTP = true;		}		// Enable/Disable override		if (!isset($options->ftpEnable) || ($options->ftpEnable != 1))		{			$useFTP = false;		}		if ($useFTP == true)		{			// Connect the FTP client			jimport('joomla.filesystem.path');			$ftp = JClientFtp::getInstance($options->ftp_host, $options->ftp_port);			$ftp->login($options->ftp_user, $options->ftp_pass);			// Translate path for the FTP account			$file = JPath::clean(str_replace(JPATH_CONFIGURATION, $options->ftp_root, $path), '/');			// Use FTP write buffer to file			if (!$ftp->write($file, $buffer))			{				// Set the config string to the session.				$session = JFactory::getSession();				$session->set('setup.config', $buffer);			}			$ftp->quit();		}		else		{			if ($canWrite)			{				file_put_contents($path, $buffer);				$session = JFactory::getSession();				$session->set('setup.config', null);			}			else			{				// Set the config string to the session.				$session = JFactory::getSession();				$session->set('setup.config', $buffer);			}		}		return true;	}	/**	 * Method to create the root user for the site	 *	 * @param   array  $options  The session options	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	private function _createRootUser($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get a database object.		try		{			$db = InstallationHelperDatabase::getDBO($options->db_type, $options->db_host, $options->db_user, $options->db_pass, $options->db_name, $options->db_prefix);		}		catch (RuntimeException $e)		{			$app->enqueueMessage(JText::sprintf('INSTL_ERROR_CONNECT_DB', $e->getMessage()), 'notice');			return false;		}		// Create random salt/password for the admin user		$salt = JUserHelper::genRandomPassword(32);		$crypt = JUserHelper::getCryptedPassword($options->admin_password, $salt);		$cryptpass = $crypt . ':' . $salt;		// Take the admin user id		$userId = InstallationModelDatabase::getUserId();		// We don't need the randUserId in the session any longer, let's remove it		InstallationModelDatabase::resetRandUserId();		// Create the admin user		date_default_timezone_set('UTC');		$installdate = date('Y-m-d H:i:s');		$nullDate    = $db->getNullDate();		// Sqlsrv change		$query = $db->getQuery(true)			->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('id') . ' = ' . $db->quote($userId));		$db->setQuery($query);		if ($db->loadResult())		{			$query = $db->getQuery(true)				->update($db->quoteName('#__users'))				->set($db->quoteName('name') . ' = ' . $db->quote('Super User'))				->set($db->quoteName('username') . ' = ' . $db->quote($options->admin_user))				->set($db->quoteName('email') . ' = ' . $db->quote($options->admin_email))				->set($db->quoteName('password') . ' = ' . $db->quote($cryptpass))				->set($db->quoteName('block') . ' = 0')				->set($db->quoteName('sendEmail') . ' = 1')				->set($db->quoteName('registerDate') . ' = ' . $db->quote($installdate))				->set($db->quoteName('lastvisitDate') . ' = ' . $db->quote($nullDate))				->set($db->quoteName('activation') . ' = ' . $db->quote('0'))				->set($db->quoteName('params') . ' = ' . $db->quote(''))				->where($db->quoteName('id') . ' = ' . $db->quote($userId));		}		else		{			$query = $db->getQuery(true);			$columns = array($db->quoteName('id'), $db->quoteName('name'), $db->quoteName('username'),							$db->quoteName('email'), $db->quoteName('password'),							$db->quoteName('block'),							$db->quoteName('sendEmail'), $db->quoteName('registerDate'),							$db->quoteName('lastvisitDate'), $db->quoteName('activation'), $db->quoteName('params'));			$query->insert('#__users', true)				->columns($columns)				->values(				$db->quote($userId) . ', ' . $db->quote('Super User') . ', ' . $db->quote($options->admin_user) . ', ' .				$db->quote($options->admin_email) . ', ' . $db->quote($cryptpass) . ', ' .				$db->quote('0') . ', ' . $db->quote('1') . ', ' . $db->quote($installdate) . ', ' . $db->quote($nullDate) . ', ' .				$db->quote('0') . ', ' . $db->quote('')			);		}		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$app->enqueueMessage($e->getMessage(), 'notice');			return false;		}		// Map the super admin to the Super Admin Group		$query = $db->getQuery(true)			->select($db->quoteName('user_id'))			->from($db->quoteName('#__user_usergroup_map'))			->where($db->quoteName('user_id') . ' = ' . $db->quote($userId));		$db->setQuery($query);		if ($db->loadResult())		{			$query = $db->getQuery(true)				->update($db->quoteName('#__user_usergroup_map'))				->set($db->quoteName('user_id') . ' = ' . $db->quote($userId))				->set($db->quoteName('group_id') . ' = 8');		}		else		{			$query = $db->getQuery(true)				->insert($db->quoteName('#__user_usergroup_map'), false)				->columns(array($db->quoteName('user_id'), $db->quoteName('group_id')))				->values($db->quote($userId) . ', 8');		}		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$app->enqueueMessage($e->getMessage(), 'notice');			return false;		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Newsfeed Model * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */class NewsfeedsModelNewsfeed extends JModelItem{	/**	 * Model context string.	 *	 * @var		string	 * @since   1.6	 */	protected $_context = 'com_newsfeeds.newsfeed';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pk = $app->input->getInt('id');		$this->setState('newsfeed.id', $pk);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.offset', $offset);		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_newsfeeds')) &&  (!$user->authorise('core.edit', 'com_newsfeeds'))){			$this->setState('filter.published', 1);			$this->setState('filter.archived', 2);		}	}	/**	 * Method to get newsfeed data.	 *	 * @param   integer	The id of the newsfeed.	 *	 * @return  mixed  Menu item data object on success, false on failure.	 * @since   1.6	 */	public function &getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('newsfeed.id');		if ($this->_item === null)		{			$this->_item = array();		}		if (!isset($this->_item[$pk]))		{			try			{				$db = $this->getDbo();				$query = $db->getQuery(true)					->select($this->getState('item.select', 'a.*'))					->from('#__newsfeeds AS a');				// Join on category table.				$query->select('c.title AS category_title, c.alias AS category_alias, c.access AS category_access')					->join('LEFT', '#__categories AS c on c.id = a.catid');				// Join on user table.				$query->select('u.name AS author')					->join('LEFT', '#__users AS u on u.id = a.created_by');				// Join over the categories to get parent category titles				$query->select('parent.title as parent_title, parent.id as parent_id, parent.path as parent_route, parent.alias as parent_alias')					->join('LEFT', '#__categories as parent ON parent.id = c.parent_id')					->where('a.id = ' . (int) $pk);				// Filter by start and end dates.				$nullDate = $db->quote($db->getNullDate());				$nowDate = $db->quote(JFactory::getDate()->toSql());				// Filter by published state.				$published = $this->getState('filter.published');				$archived = $this->getState('filter.archived');				if (is_numeric($published))				{					$query->where('(a.published = ' . (int) $published . ' OR a.published =' . (int) $archived . ')')						->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')						->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')')						->where('(c.published = ' . (int) $published . ' OR c.published =' . (int) $archived . ')');				}				$db->setQuery($query);				$data = $db->loadObject();				if (empty($data))				{					JError::raiseError(404, JText::_('COM_NEWSFEEDS_ERROR_FEED_NOT_FOUND'));				}				// Check for published state if filter set.				if (((is_numeric($published)) || (is_numeric($archived))) && (($data->published != $published) && ($data->published != $archived)))				{					JError::raiseError(404, JText::_('COM_NEWSFEEDS_ERROR_FEED_NOT_FOUND'));				}				// Convert parameter fields to objects.				$registry = new JRegistry;				$registry->loadString($data->params);				$data->params = clone $this->getState('params');				$data->params->merge($registry);				$registry = new JRegistry;				$registry->loadString($data->metadata);				$data->metadata = $registry;				// Compute access permissions.				if ($access = $this->getState('filter.access'))				{					// If the access filter has been set, we already know this user can view.					$data->params->set('access-view', true);				}				else {					// If no access filter is set, the layout takes some responsibility for display of limited information.					$user = JFactory::getUser();					$groups = $user->getAuthorisedViewLevels();					$data->params->set('access-view', in_array($data->access, $groups) && in_array($data->category_access, $groups));				}				$this->_item[$pk] = $data;			}			catch (Exception $e)			{				$this->setError($e);				$this->_item[$pk] = false;			}		}		return $this->_item[$pk];	}	/**	 * Increment the hit counter for the newsfeed.	 *	 * @param   int  $pk  Optional primary key of the item to increment.	 *	 * @return  boolean  True if successful; false otherwise and internal error set.	 *	 * @since   3.0	 */	public function hit($pk = 0)	{		$input = JFactory::getApplication()->input;		$hitcount = $input->getInt('hitcount', 1);		if ($hitcount)		{			$pk = (!empty($pk)) ? $pk : (int) $this->getState('newsfeed.id');			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__newsfeeds' .				' SET hits = hits + 1' .				' WHERE id = '.(int) $pk			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$client 	= $this->state->get('filter.client_id') ? 'administrator' : 'site';$user 		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_modules');$saveOrder	= $listOrder == 'ordering';?><form action="<?php echo JRoute::_('index.php?option=com_modules'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<?php echo JHtml::_('select.options', ModulesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>            <label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', ModulesHelper::getStateOptions(), 'value', 'text', $this->state->get('filter.state'));?>			</select>            <label class="selectlabel" for="filter_position">				<?php echo JText::_('COM_MODULES_OPTION_SELECT_POSITION'); ?>			</label>			<select name="filter_position" class="inputbox" id="filter_position">				<option value=""><?php echo JText::_('COM_MODULES_OPTION_SELECT_POSITION');?></option>				<?php echo JHtml::_('select.options', ModulesHelper::getPositions($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.position'));?>			</select>			<label class="selectlabel" for="filter_module">				<?php echo JText::_('COM_MODULES_OPTION_SELECT_MODULE'); ?>			</label>			<select name="filter_module" class="inputbox" id="filter_module">				<option value=""><?php echo JText::_('COM_MODULES_OPTION_SELECT_MODULE');?></option>				<?php echo JHtml::_('select.options', ModulesHelper::getModules($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.module'));?>			</select>			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist" id="modules-mgr">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'title', $listDirn, $listOrder); ?>				</th>                <th class="width-5">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'published', $listDirn, $listOrder); ?>				</th>				<th class="width-20">					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_POSITION', 'position', $listDirn, $listOrder); ?>				</th>                <th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'modules.saveorder'); ?>					<?php endif; ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_MODULE', 'name', $listDirn, $listOrder); ?>				</th>                	<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_PAGES', 'pages', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access', $listDirn, $listOrder); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering  = ($listOrder == 'ordering');			$canCreate  = $user->authorise('core.create',     'com_modules');			$canEdit    = $user->authorise('core.edit',       'com_modules');			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_modules') && $canCheckin;		?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'modules.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>							<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<?php if (!empty($item->note)) : ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_NOTE', $this->escape($item->note));?></p>					<?php endif; ?>				</td>                <td class="center">					<?php echo JHtml::_('modules.state', $item->published, $i, $canChange, 'cb'); ?>				</td>				<td class="center">					<?php echo $item->position; ?>				</td>                <td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->position == $item->position), 'modules.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->position == $item->position), 'modules.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->position == $item->position), 'modules.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->position == $item->position), 'modules.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>                <td class="left">					<?php echo $item->name;?>				</td>				<td class="center">					<?php echo $item->pages; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php if ($item->language == ''):?>						<?php echo JText::_('JDEFAULT'); ?>					<?php elseif ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form.is user is allowed ?>	<?php if ($user->authorise('core.create', 'com_modules') || $user->authorise('core.edit', 'com_modules')) : ?>		<?php echo $this->loadTemplate('batch'); ?>	<?php endif;?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_title($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"module-title\"><h6>".$module->title."</h6></div>";		echo $module->content;	}}function modChrome_no($module, &$params, &$attribs){	if ($module->content)	{		echo $module->content;	}}function modChrome_well($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"well well-small\">";		echo "<div class=\"module-title nav-header\">".$module->title."</div>";		echo $module->content;		echo "</div>";	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for all HTML drawing classes. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlRules{	/**	 * Creates the HTML for the permissions widget	 *	 * @param   array    $actions   Array of action objects	 * @param   integer  $assetId   Id of a specific asset to  create a widget for.	 * @param   integer  $parent    Id of the parent of the asset	 * @param   string   $control   The form control	 * @param   string   $idPrefix  Prefix for the ids assigned to specific action-group pairs	 *	 * @return  string   HTML for the permissions widget	 *	 * @since   11.1	 *	 * @see     JAccess	 * @see     JFormFieldRules	 */	public static function assetFormWidget($actions, $assetId = null, $parent = null, $control = 'jform[rules]', $idPrefix = 'jform_rules')	{		$images = self::_getImagesArray();		// Get the user groups.		$groups = self::_getUserGroups();		// Get the incoming inherited rules as well as the asset specific rules.		$inheriting = JAccess::getAssetRules($parent ? $parent : self::_getParentAssetId($assetId), true);		$inherited = JAccess::getAssetRules($assetId, true);		$rules = JAccess::getAssetRules($assetId);		$html = array();		$html[] = '<div class="acl-options">';		$html[] = JHtml::_('tabs.start', 'acl-rules-' . $assetId, array('useCookie' => 1));		$html[] = JHtml::_('tabs.panel', JText::_('JLIB_HTML_ACCESS_SUMMARY'), 'summary');		$html[] = '			<p>' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC') . '</p>';		$html[] = '			<table class="aclsummary-table" summary="' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC') . '">';		$html[] = '			<caption>' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC_CAPTION') . '</caption>';		$html[] = '			<tr>';		$html[] = '				<th class="col1 hidelabeltxt">' . JText::_('JLIB_RULES_GROUPS') . '</th>';		foreach ($actions as $i => $action)		{			$html[] = '				<th class="col' . ($i + 2) . '">' . JText::_($action->title) . '</th>';		}		$html[] = '			</tr>';		foreach ($groups as $i => $group)		{			$html[] = '			<tr class="row' . ($i % 2) . '">';			$html[] = '				<td class="col1">' . $group->text . '</td>';			foreach ($actions as $j => $action)			{				$html[] = '				<td class="col' . ($j + 2) . '">'					. ($assetId ? ($inherited->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])					: ($inheriting->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])) . '</td>';			}			$html[] = '			</tr>';		}		$html[] = ' 		</table>';		foreach ($actions as $action)		{			$actionTitle = JText::_($action->title);			$actionDesc = JText::_($action->description);			$html[] = JHtml::_('tabs.panel', $actionTitle, $action->name);			$html[] = '			<p>' . $actionDesc . '</p>';			$html[] = '			<table class="aclmodify-table" summary="' . strip_tags($actionDesc) . '">';			$html[] = '			<caption>' . JText::_('JLIB_HTML_ACCESS_MODIFY_DESC_CAPTION_ACL') . ' ' . $actionTitle . ' '				. JText::_('JLIB_HTML_ACCESS_MODIFY_DESC_CAPTION_TABLE') . '</caption>';			$html[] = '			<tr>';			$html[] = '				<th class="col1 hidelabeltxt">' . JText::_('JLIB_RULES_GROUP') . '</th>';			$html[] = '				<th class="col2">' . JText::_('JLIB_RULES_INHERIT') . '</th>';			$html[] = '				<th class="col3 hidelabeltxt">' . JText::_('JMODIFY') . '</th>';			$html[] = '				<th class="col4">' . JText::_('JCURRENT') . '</th>';			$html[] = '			</tr>';			foreach ($groups as $i => $group)			{				$selected = $rules->allow($action->name, $group->value);				$html[] = '			<tr class="row' . ($i % 2) . '">';				$html[] = '				<td class="col1">' . $group->text . '</td>';				$html[] = '				<td class="col2">'					. ($inheriting->allow($action->name, $group->identities) ? $images['allow-i'] : $images['deny-i']) . '</td>';				$html[] = '				<td class="col3">';				$html[] = '					<select id="' . $idPrefix . '_' . $action->name . '_' . $group->value					. '" class="inputbox" size="1" name="' . $control . '[' . $action->name . '][' . $group->value . ']" title="'					. JText::sprintf('JLIB_RULES_SELECT_ALLOW_DENY_GROUP', $actionTitle, $group->text) . '">';				$html[] = '						<option value=""' . ($selected === null ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_INHERIT') . '</option>';				$html[] = '						<option value="1"' . ($selected === true ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_ALLOWED') . '</option>';				$html[] = '						<option value="0"' . ($selected === false ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_DENIED') . '</option>';				$html[] = '					</select>';				$html[] = '				</td>';				$html[] = '				<td class="col4">'					. ($assetId ? ($inherited->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])					: ($inheriting->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])) . '</td>';				$html[] = '			</tr>';			}			$html[] = '			</table>';		}		$html[] = JHtml::_('tabs.end');		// Build the footer with legend and special purpose buttons.		$html[] = '	<div class="clr"></div>';		$html[] = '	<ul class="acllegend fltlft">';		$html[] = '		<li class="acl-allowed">' . JText::_('JLIB_RULES_ALLOWED') . '</li>';		$html[] = '		<li class="acl-denied">' . JText::_('JLIB_RULES_DENIED') . '</li>';		$html[] = '	</ul>';		$html[] = '</div>';		return implode("\n", $html);	}	/**	 * Get the id of the parent asset	 *	 * @param   integer  $assetId  The asset for which the parentid will be returned	 *	 * @return  integer  The id of the parent asset	 *	 * @since   11.1	 */	protected static function _getParentAssetId($assetId)	{		// Get a database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get the user groups from the database.		$query->select($db->quoteName('parent_id'))			->from($db->quoteName('#__assets'))			->where($db->quoteName('id') . ' = ' . (int) $assetId);		$db->setQuery($query);		return (int) $db->loadResult();	}	/**	 * Get the user groups	 *	 * @return  array  Array of user groups	 *	 * @since   11.1	 */	protected static function _getUserGroups()	{		// Get a database object.		$db = JFactory::getDbo();		// Get the user groups from the database.		$db->setQuery(			'SELECT a.id AS value, a.title AS text, b.id as parent'			. ' FROM #__usergroups AS a LEFT JOIN #__usergroups AS b ON a.lft >= b.lft AND a.rgt <= b.rgt'			. ' ORDER BY a.lft ASC, b.lft ASC'		);		$result = $db->loadObjectList();		$options = array();		// Pre-compute additional values.		foreach ($result as $option)		{			$end = end($options);			if ($end === false || $end->value != $option->value)			{				$end = $option;				$end->level = 0;				$options[] = $end;			}			else			{				$end->level++;			}			$end->identities[] = $option->parent;		}		return $options;	}	/**	 * Get the array of images associate with specific permissions	 *	 * @return  array  An associative  array of permissions and images	 *	 * @since   11.1	 */	protected static function _getImagesArray()	{		$images['allow-l'] = '<label class="icon-16-allow" title="' . JText::_('JLIB_RULES_ALLOWED') . '">' . JText::_('JLIB_RULES_ALLOWED')			. '</label>';		$images['deny-l'] = '<label class="icon-16-deny" title="' . JText::_('JLIB_RULES_DENIED') . '">' . JText::_('JLIB_RULES_DENIED') . '</label>';		$images['allow'] = '<a class="icon-16-allow" title="' . JText::_('JLIB_RULES_ALLOWED') . '"> </a>';		$images['deny'] = '<a class="icon-16-deny" title="' . JText::_('JLIB_RULES_DENIED') . '"> </a>';		$images['allow-i'] = '<a class="icon-16-allowinactive" title="' . JText::_('JRULE_ALLOWED_INHERITED') . '"> </a>';		$images['deny-i'] = '<a class="icon-16-denyinactive" title="' . JText::_('JRULE_DENIED_INHERITED') . '"> </a>';		return $images;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_content */class ContentControllerArticle extends JControllerForm{	/**	 * The URL view item variable.	 *	 * @var    string	 * @since  1.6	 */	protected $view_item = 'form';	/**	 * The URL view list variable.	 *	 * @var    string	 * @since  1.6	 */	protected $view_list = 'categories';	/**	 * Method to add a new record.	 *	 * @return  mixed  True if the record can be added, a error object if not.	 *	 * @since   1.6	 */	public function add()	{		if (!parent::add())		{			// Redirect to the return page.			$this->setRedirect($this->getReturnPage());		}	}	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user       = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('catid'), 'int');		$allow      = null;		if ($categoryId)		{			// If the category has been passed in the data or URL check it.			$allow	= $user->authorise('core.create', 'com_content.category.'.$categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd();		}		else		{			return $allow;		}	}	/**	 * Method override to check if you can edit an existing record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key; default is id.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$user     = JFactory::getUser();		$userId   = $user->get('id');		$asset    = 'com_content.article.' . $recordId;		// Check general edit permission first.		if ($user->authorise('core.edit', $asset))		{			return true;		}		// Fallback on edit.own.		// First test if the permission is available.		if ($user->authorise('core.edit.own', $asset))		{			// Now test the owner is the user.			$ownerId = (int) isset($data['created_by']) ? $data['created_by'] : 0;			if (empty($ownerId) && $recordId)			{				// Need to do a lookup from the model.				$record = $this->getModel()->getItem($recordId);				if (empty($record))				{					return false;				}				$ownerId = $record->created_by;			}			// If the owner matches 'me' then do the test.			if ($ownerId == $userId)			{				return true;			}		}		// Since there is no asset tracking, revert to the component permissions.		return parent::allowEdit($data, $key);	}	/**	 * Method to cancel an edit.	 *	 * @param   string  $key  The name of the primary key of the URL variable.	 *	 * @return  boolean  True if access level checks pass, false otherwise.	 *	 * @since   1.6	 */	public function cancel($key = 'a_id')	{		parent::cancel($key);		// Redirect to the return page.		$this->setRedirect($this->getReturnPage());	}	/**	 * Method to edit an existing record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key	 * (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if access level check and checkout passes, false otherwise.	 *	 * @since   1.6	 */	public function edit($key = null, $urlVar = 'a_id')	{		$result = parent::edit($key, $urlVar);		return $result;	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.5	 */	public function getModel($name = 'form', $prefix = '', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $urlVar    The name of the URL variable for the id.	 *	 * @return  string	The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = 'a_id')	{		// Need to override the parent method completely.		$tmpl   = $this->input->get('tmpl');		$layout = $this->input->get('layout', 'edit');		$append = '';		// Setup redirect info.		if ($tmpl)		{			$append .= '&tmpl='.$tmpl;		}		// TODO This is a bandaid, not a long term solution.//		if ($layout)//		{//			$append .= '&layout=' . $layout;//		}		$append .= '&layout=edit';		if ($recordId)		{			$append .= '&'.$urlVar.'='.$recordId;		}		$itemId	= $this->input->getInt('Itemid');		$return	= $this->getReturnPage();		$catId  = $this->input->getInt('catid', null, 'get');		if ($itemId)		{			$append .= '&Itemid='.$itemId;		}		if ($catId)		{			$append .= '&catid='.$catId;		}		if ($return)		{			$append .= '&return='.base64_encode($return);		}		return $append;	}	/**	 * Get the return URL.	 *	 * If a "return" variable has been passed in the request	 *	 * @return  string	The return URL.	 *	 * @since   1.6	 */	protected function getReturnPage()	{		$return = $this->input->get('return', null, 'base64');		if (empty($return) || !JUri::isInternal(base64_decode($return)))		{			return JUri::base();		}		else		{			return base64_decode($return);		}	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   array         $validData   The validated data.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		return;	}	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   1.6	 */	public function save($key = null, $urlVar = 'a_id')	{		$result = parent::save($key, $urlVar);		// If ok, redirect to the return page.		if ($result)		{			$this->setRedirect($this->getReturnPage());		}		return $result;	}	/**	 * Method to save a vote.	 *	 * @return  void	 *	 * @since   1.6	 */	public function vote()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user_rating = $this->input->getInt('user_rating', -1);		if ($user_rating > -1)		{			$url = $this->input->getString('url', '');			$id = $this->input->getInt('id', 0);			$viewName = $this->input->getString('view', $this->default_view);			$model = $this->getModel($viewName);			if ($model->storeVote($id, $user_rating))			{				$this->setRedirect($url, JText::_('COM_CONTENT_ARTICLE_VOTE_SUCCESS'));			}			else			{				$this->setRedirect($url, JText::_('COM_CONTENT_ARTICLE_VOTE_FAILURE'));			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class for managing HTTP sessions * * Provides access to session-state values as well as session-level * settings and lifetime management methods. * Based on the standard PHP session handling mechanism it provides * more advanced features such as expire timeouts. * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSession implements IteratorAggregate{	/**	 * Internal state.	 * One of 'inactive'|'active'|'expired'|'destroyed'|'error'	 *	 * @var    string	 * @see    getState()	 * @since  11.1	 */	protected $_state = 'inactive';	/**	 * Maximum age of unused session in minutes	 *	 * @var    string	 * @since  11.1	 */	protected $_expire = 15;	/**	 * The session store object.	 *	 * @var    JSessionStorage	 * @since  11.1	 */	protected $_store = null;	/**	 * Security policy.	 * List of checks that will be done.	 *	 * Default values:	 * - fix_browser	 * - fix_adress	 *	 * @var array	 * @since  11.1	 */	protected $_security = array('fix_browser');	/**	 * Force cookies to be SSL only	 * Default  false	 *	 * @var    boolean	 * @since  11.1	 */	protected $_force_ssl = false;	/**	 * @var    JSession  JSession instances container.	 * @since  11.3	 */	protected static $instance;	/**	 * @var    string	 * @since  12.2	 */	protected $storeName;	/**	 * Holds the JInput object	 *	 * @var    JInput	 * @since  12.2	 */	private $_input = null;	/**	 * Holds the event dispatcher object	 *	 * @var    JEventDispatcher	 * @since  12.2	 */	private $_dispatcher = null;	/**	 * Constructor	 *	 * @param   string  $store    The type of storage for the session.	 * @param   array   $options  Optional parameters	 *	 * @since   11.1	 */	public function __construct($store = 'none', array $options = array())	{		// Need to destroy any existing sessions started with session.auto_start		if (session_id())		{			session_unset();			session_destroy();		}		// Disable transparent sid support		ini_set('session.use_trans_sid', '0');		// Only allow the session ID to come from cookies and nothing else.		ini_set('session.use_only_cookies', '1');		// Create handler		$this->_store = JSessionStorage::getInstance($store, $options);		$this->storeName = $store;		// Set options		$this->_setOptions($options);		$this->_setCookieParams();		$this->_state = 'inactive';	}	/**	 * Magic method to get read-only access to properties.	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  mixed   The value of the property	 *	 * @since   12.2	 */	public function __get($name)	{		if ($name === 'storeName')		{			return $this->$name;		}		if ($name === 'state' || $name === 'expire')		{			$property = '_' . $name;			return $this->$property;		}	}	/**	 * Returns the global Session object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $handler  The type of session handler.	 * @param   array   $options  An array of configuration options.	 *	 * @return  JSession  The Session object.	 *	 * @since   11.1	 */	public static function getInstance($handler, $options)	{		if (!is_object(self::$instance))		{			self::$instance = new JSession($handler, $options);		}		return self::$instance;	}	/**	 * Get current state of session	 *	 * @return  string  The session state	 *	 * @since   11.1	 */	public function getState()	{		return $this->_state;	}	/**	 * Get expiration time in minutes	 *	 * @return  integer  The session expiration time in minutes	 *	 * @since   11.1	 */	public function getExpire()	{		return $this->_expire;	}	/**	 * Get a session token, if a token isn't set yet one will be generated.	 *	 * Tokens are used to secure forms from spamming attacks. Once a token	 * has been generated the system will check the post request to see if	 * it is present, if not it will invalidate the session.	 *	 * @param   boolean  $forceNew  If true, force a new token to be created	 *	 * @return  string  The session token	 *	 * @since   11.1	 */	public function getToken($forceNew = false)	{		$token = $this->get('session.token');		// Create a token		if ($token === null || $forceNew)		{			$token = $this->_createToken(12);			$this->set('session.token', $token);		}		return $token;	}	/**	 * Method to determine if a token exists in the session. If not the	 * session will be set to expired	 *	 * @param   string   $tCheck       Hashed token to be verified	 * @param   boolean  $forceExpire  If true, expires the session	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function hasToken($tCheck, $forceExpire = true)	{		// Check if a token exists in the session		$tStored = $this->get('session.token');		// Check token		if (($tStored !== $tCheck))		{			if ($forceExpire)			{				$this->_state = 'expired';			}			return false;		}		return true;	}	/**	 * Method to determine a hash for anti-spoofing variable names	 *	 * @param   boolean  $forceNew  If true, force a new token to be created	 *	 * @return  string  Hashed var name	 *	 * @since   11.1	 */	public static function getFormToken($forceNew = false)	{		$user    = JFactory::getUser();		$session = JFactory::getSession();		// TODO: Decouple from legacy JApplication class.		if (is_callable(array('JApplication', 'getHash')))		{			$hash = JApplication::getHash($user->get('id', 0) . $session->getToken($forceNew));		}		else		{			$hash = md5(JFactory::getApplication()->get('secret') . $user->get('id', 0) . $session->getToken($forceNew));		}		return $hash;	}	/**	 * Retrieve an external iterator.	 *	 * @return  ArrayIterator  Return an ArrayIterator of $_SESSION.	 *	 * @since   12.2	 */	public function getIterator()	{		return new ArrayIterator($_SESSION);	}	/**	 * Checks for a form token in the request.	 *	 * Use in conjunction with JHtml::_('form.token') or JSession::getFormToken.	 *	 * @param   string  $method  The request method in which to look for the token key.	 *	 * @return  boolean  True if found and valid, false otherwise.	 *	 * @since   12.1	 */	public static function checkToken($method = 'post')	{		$token = self::getFormToken();		$app = JFactory::getApplication();		if (!$app->input->$method->get($token, '', 'alnum'))		{			$session = JFactory::getSession();			if ($session->isNew())			{				// Redirect to login screen.				$app->redirect(JRoute::_('index.php'), JText::_('JLIB_ENVIRONMENT_SESSION_EXPIRED'));				$app->close();			}			else			{				return false;			}		}		else		{			return true;		}	}	/**	 * Get session name	 *	 * @return  string  The session name	 *	 * @since   11.1	 */	public function getName()	{		if ($this->_state === 'destroyed')		{			// @TODO : raise error			return null;		}		return session_name();	}	/**	 * Get session id	 *	 * @return  string  The session name	 *	 * @since   11.1	 */	public function getId()	{		if ($this->_state === 'destroyed')		{			// @TODO : raise error			return null;		}		return session_id();	}	/**	 * Get the session handlers	 *	 * @return  array  An array of available session handlers	 *	 * @since   11.1	 */	public static function getStores()	{		$connectors = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/storage');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JSessionStorage' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$connectors[] = str_ireplace('.php', '', $fileName);			}		}		return $connectors;	}	/**	 * Shorthand to check if the session is active	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function isActive()	{		return (bool) ($this->_state == 'active');	}	/**	 * Check whether this session is currently created	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function isNew()	{		$counter = $this->get('session.counter');		return (bool) ($counter === 1);	}	/**	 * Check whether this session is currently created	 *	 * @param   JInput            $input       JInput object for the session to use.	 * @param   JEventDispatcher  $dispatcher  Dispatcher object for the session to use.	 *	 * @return  void.	 *	 * @since   12.2	 */	public function initialise(JInput $input, JEventDispatcher $dispatcher = null)	{		$this->_input      = $input;		$this->_dispatcher = $dispatcher;	}	/**	 * Get data from the session store	 *	 * @param   string  $name       Name of a variable	 * @param   mixed   $default    Default value of a variable if not set	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  mixed  Value of a variable	 *	 * @since   11.1	 */	public function get($name, $default = null, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active' && $this->_state !== 'expired')		{			// @TODO :: generated error here			$error = null;			return $error;		}		if (isset($_SESSION[$namespace][$name]))		{			return $_SESSION[$namespace][$name];		}		return $default;	}	/**	 * Set data into the session store.	 *	 * @param   string  $name       Name of a variable.	 * @param   mixed   $value      Value of a variable.	 * @param   string  $namespace  Namespace to use, default to 'default'.	 *	 * @return  mixed  Old value of a variable.	 *	 * @since   11.1	 */	public function set($name, $value = null, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		$old = isset($_SESSION[$namespace][$name]) ? $_SESSION[$namespace][$name] : null;		if (null === $value)		{			unset($_SESSION[$namespace][$name]);		}		else		{			$_SESSION[$namespace][$name] = $value;		}		return $old;	}	/**	 * Check whether data exists in the session store	 *	 * @param   string  $name       Name of variable	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  boolean  True if the variable exists	 *	 * @since   11.1	 */	public function has($name, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions.		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		return isset($_SESSION[$namespace][$name]);	}	/**	 * Unset data from the session store	 *	 * @param   string  $name       Name of variable	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  mixed   The value from session or NULL if not set	 *	 * @since   11.1	 */	public function clear($name, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		$value = null;		if (isset($_SESSION[$namespace][$name]))		{			$value = $_SESSION[$namespace][$name];			unset($_SESSION[$namespace][$name]);		}		return $value;	}	/**	 * Start a session.	 *	 * @return  void	 *	 * @since   12.2	 */	public function start()	{		if ($this->_state === 'active')		{			return;		}		$this->_start();		$this->_state = 'active';		// Initialise the session		$this->_setCounter();		$this->_setTimers();		// Perform security checks		$this->_validate();		if ($this->_dispatcher instanceof JEventDispatcher)		{			$this->_dispatcher->trigger('onAfterSessionStart');		}	}	/**	 * Start a session.	 *	 * Creates a session (or resumes the current one based on the state of the session)	 *	 * @return  boolean  true on success	 *	 * @since   11.1	 */	protected function _start()	{		// Start session if not started		if ($this->_state === 'restart')		{			session_regenerate_id(true);		}		else		{			$session_name = session_name();			// Get the JInputCookie object			$cookie = $this->_input->cookie;			if (is_null($cookie->get($session_name)))			{				$session_clean = $this->_input->get($session_name, false, 'string');				if ($session_clean)				{					session_id($session_clean);					$cookie->set($session_name, '', time() - 3600);				}			}		}		/**		 * Write and Close handlers are called after destructing objects since PHP 5.0.5.		 * Thus destructors can use sessions but session handler can't use objects.		 * So we are moving session closure before destructing objects.		 *		 * Replace with session_register_shutdown() when dropping compatibility with PHP 5.3		 */		register_shutdown_function('session_write_close');		session_cache_limiter('none');		session_start();		return true;	}	/**	 * Frees all session variables and destroys all data registered to a session	 *	 * This method resets the $_SESSION variable and destroys all of the data associated	 * with the current session in its storage (file or DB). It forces new session to be	 * started after this method is called. It does not unset the session cookie.	 *	 * @return  boolean  True on success	 *	 * @see     session_destroy()	 * @see     session_unset()	 * @since   11.1	 */	public function destroy()	{		// Session was already destroyed		if ($this->_state === 'destroyed')		{			return true;		}		/*		 * In order to kill the session altogether, such as to log the user out, the session id		 * must also be unset. If a cookie is used to propagate the session id (default behavior),		 * then the session cookie must be deleted.		 */		if (isset($_COOKIE[session_name()]))		{			$config = JFactory::getConfig();			$cookie_domain = $config->get('cookie_domain', '');			$cookie_path = $config->get('cookie_path', '/');			setcookie(session_name(), '', time() - 42000, $cookie_path, $cookie_domain);		}		session_unset();		session_destroy();		$this->_state = 'destroyed';		return true;	}	/**	 * Restart an expired or locked session.	 *	 * @return  boolean  True on success	 *	 * @see     destroy	 * @since   11.1	 */	public function restart()	{		$this->destroy();		if ($this->_state !== 'destroyed')		{			// @TODO :: generated error here			return false;		}		// Re-register the session handler after a session has been destroyed, to avoid PHP bug		$this->_store->register();		$this->_state = 'restart';		// Regenerate session id		session_regenerate_id(true);		$this->_start();		$this->_state = 'active';		$this->_validate();		$this->_setCounter();		return true;	}	/**	 * Create a new session and copy variables from the old one	 *	 * @return  boolean $result true on success	 *	 * @since   11.1	 */	public function fork()	{		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return false;		}		// Save values		$values = $_SESSION;		// Keep session config		$cookie = session_get_cookie_params();		// Kill session		session_destroy();		// Re-register the session store after a session has been destroyed, to avoid PHP bug		$this->_store->register();		// Restore config		session_set_cookie_params($cookie['lifetime'], $cookie['path'], $cookie['domain'], $cookie['secure'], true);		// Restart session with new id		session_regenerate_id(true);		session_start();		return true;	}	/**	 * Writes session data and ends session	 *	 * Session data is usually stored after your script terminated without the need	 * to call JSession::close(), but as session data is locked to prevent concurrent	 * writes only one script may operate on a session at any time. When using	 * framesets together with sessions you will experience the frames loading one	 * by one due to this locking. You can reduce the time needed to load all the	 * frames by ending the session as soon as all changes to session variables are	 * done.	 *	 * @return  void	 *	 * @see     session_write_close()	 * @since   11.1	 */	public function close()	{		session_write_close();	}	/**	 * Set session cookie parameters	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _setCookieParams()	{		$cookie = session_get_cookie_params();		if ($this->_force_ssl)		{			$cookie['secure'] = true;		}		$config = JFactory::getConfig();		if ($config->get('cookie_domain', '') != '')		{			$cookie['domain'] = $config->get('cookie_domain');		}		if ($config->get('cookie_path', '') != '')		{			$cookie['path'] = $config->get('cookie_path');		}		session_set_cookie_params($cookie['lifetime'], $cookie['path'], $cookie['domain'], $cookie['secure'], true);	}	/**	 * Create a token-string	 *	 * @param   integer  $length  Length of string	 *	 * @return  string  Generated token	 *	 * @since   11.1	 */	protected function _createToken($length = 32)	{		static $chars = '0123456789abcdef';		$max = strlen($chars) - 1;		$token = '';		$name = session_name();		for ($i = 0; $i < $length; ++$i)		{			$token .= $chars[(rand(0, $max))];		}		return md5($token . $name);	}	/**	 * Set counter of session usage	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setCounter()	{		$counter = $this->get('session.counter', 0);		++$counter;		$this->set('session.counter', $counter);		return true;	}	/**	 * Set the session timers	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setTimers()	{		if (!$this->has('session.timer.start'))		{			$start = time();			$this->set('session.timer.start', $start);			$this->set('session.timer.last', $start);			$this->set('session.timer.now', $start);		}		$this->set('session.timer.last', $this->get('session.timer.now'));		$this->set('session.timer.now', time());		return true;	}	/**	 * Set additional session options	 *	 * @param   array  $options  List of parameter	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setOptions(array $options)	{		// Set name		if (isset($options['name']))		{			session_name(md5($options['name']));		}		// Set id		if (isset($options['id']))		{			session_id($options['id']);		}		// Set expire time		if (isset($options['expire']))		{			$this->_expire = $options['expire'];		}		// Get security options		if (isset($options['security']))		{			$this->_security = explode(',', $options['security']);		}		if (isset($options['force_ssl']))		{			$this->_force_ssl = (bool) $options['force_ssl'];		}		// Sync the session maxlifetime		ini_set('session.gc_maxlifetime', $this->_expire);		return true;	}	/**	 * Do some checks for security reason	 *	 * - timeout check (expire)	 * - ip-fixiation	 * - browser-fixiation	 *	 * If one check failed, session data has to be cleaned.	 *	 * @param   boolean  $restart  Reactivate session	 *	 * @return  boolean  True on success	 *	 * @see     http://shiflett.org/articles/the-truth-about-sessions	 * @since   11.1	 */	protected function _validate($restart = false)	{		// Allow to restart a session		if ($restart)		{			$this->_state = 'active';			$this->set('session.client.address', null);			$this->set('session.client.forwarded', null);			$this->set('session.client.browser', null);			$this->set('session.token', null);		}		// Check if session has expired		if ($this->_expire)		{			$curTime = $this->get('session.timer.now', 0);			$maxTime = $this->get('session.timer.last', 0) + $this->_expire;			// Empty session variables			if ($maxTime < $curTime)			{				$this->_state = 'expired';				return false;			}		}		// Record proxy forwarded for in the session in case we need it later		if (isset($_SERVER['HTTP_X_FORWARDED_FOR']))		{			$this->set('session.client.forwarded', $_SERVER['HTTP_X_FORWARDED_FOR']);		}		// Check for client address		if (in_array('fix_adress', $this->_security) && isset($_SERVER['REMOTE_ADDR']))		{			$ip = $this->get('session.client.address');			if ($ip === null)			{				$this->set('session.client.address', $_SERVER['REMOTE_ADDR']);			}			elseif ($_SERVER['REMOTE_ADDR'] !== $ip)			{				$this->_state = 'error';				return false;			}		}		// Check for clients browser		if (in_array('fix_browser', $this->_security) && isset($_SERVER['HTTP_USER_AGENT']))		{			$browser = $this->get('session.client.browser');			if ($browser === null)			{				$this->set('session.client.browser', $_SERVER['HTTP_USER_AGENT']);			}			elseif ($_SERVER['HTTP_USER_AGENT'] !== $browser)			{				// @todo remove code: 				$this->_state	=	'error';				// @todo remove code: 				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Indexer class supporting MySQL(i) for the Finder indexer package. * * The indexer class provides the core functionality of the Finder * search engine. It is responsible for adding and updating the * content links table; extracting and scoring tokens; and maintaining * all referential information for the content. * * Note: All exceptions thrown from within this class should be caught * by the controller. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.0 */class FinderIndexerDriverMysql extends FinderIndexer{	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	public function index($item, $format = 'html')	{		// Mark beforeIndexing in the profiler.		static::$profiler ? static::$profiler->mark('beforeIndexing') : null;		$db = JFactory::getDbo();		$nd = $db->getNullDate();		// Check if the item is in the database.		$query = $db->getQuery(true)			->select($db->quoteName('link_id') . ', ' . $db->quoteName('md5sum'))			->from($db->quoteName('#__finder_links'))			->where($db->quoteName('url') . ' = ' . $db->quote($item->url));		// Load the item  from the database.		$db->setQuery($query);		$link = $db->loadObject();		// Get the indexer state.		$state = static::getState();		// Get the signatures of the item.		$curSig = static::getSignature($item);		$oldSig = isset($link->md5sum) ? $link->md5sum : null;		// Get the other item information.		$linkId = empty($link->link_id) ? null : $link->link_id;		$isNew = empty($link->link_id) ? true : false;		// Check the signatures. If they match, the item is up to date.		if (!$isNew && $curSig == $oldSig)		{			return $linkId;		}		/*		 * If the link already exists, flush all the term maps for the item.		 * Maps are stored in 16 tables so we need to iterate through and flush		 * each table one at a time.		 */		if (!$isNew)		{			for ($i = 0; $i <= 15; $i++)			{				// Flush the maps for the link.				$query->clear()					->delete($db->quoteName('#__finder_links_terms' . dechex($i)))					->where($db->quoteName('link_id') . ' = ' . (int) $linkId);				$db->setQuery($query);				$db->execute();			}			// Remove the taxonomy maps.			FinderIndexerTaxonomy::removeMaps($linkId);		}		// Mark afterUnmapping in the profiler.		static::$profiler ? static::$profiler->mark('afterUnmapping') : null;		// Perform cleanup on the item data.		$item->publish_start_date = (int) $item->publish_start_date != 0 ? $item->publish_start_date : $nd;		$item->publish_end_date = (int) $item->publish_end_date != 0 ? $item->publish_end_date : $nd;		$item->start_date = (int) $item->start_date != 0 ? $item->start_date : $nd;		$item->end_date = (int) $item->end_date != 0 ? $item->end_date : $nd;		// Prepare the item description.		$item->description = FinderIndexerHelper::parse($item->summary);		/*		 * Now, we need to enter the item into the links table. If the item		 * already exists in the database, we need to use an UPDATE query.		 * Otherwise, we need to use an INSERT to get the link id back.		 */		if ($isNew)		{			$columnsArray = array(				$db->quoteName('url'), $db->quoteName('route'), $db->quoteName('title'), $db->quoteName('description'),				$db->quoteName('indexdate'), $db->quoteName('published'), $db->quoteName('state'), $db->quoteName('access'),				$db->quoteName('language'), $db->quoteName('type_id'), $db->quoteName('object'), $db->quoteName('publish_start_date'),				$db->quoteName('publish_end_date'), $db->quoteName('start_date'), $db->quoteName('end_date'), $db->quoteName('list_price'),				$db->quoteName('sale_price')			);			// Insert the link.			$query->clear()				->insert($db->quoteName('#__finder_links'))				->columns($columnsArray)				->values(				$db->quote($item->url) . ', '				. $db->quote($item->route) . ', '				. $db->quote($item->title) . ', '				. $db->quote($item->description) . ', '				. $query->currentTimestamp() . ', '				. '1, '				. (int) $item->state . ', '				. (int) $item->access . ', '				. $db->quote($item->language) . ', '				. (int) $item->type_id . ', '				. $db->quote(serialize($item)) . ', '				. $db->quote($item->publish_start_date) . ', '				. $db->quote($item->publish_end_date) . ', '				. $db->quote($item->start_date) . ', '				. $db->quote($item->end_date) . ', '				. (double) ($item->list_price ? $item->list_price : 0) . ', '				. (double) ($item->sale_price ? $item->sale_price : 0)			);			$db->setQuery($query);			$db->execute();			// Get the link id.			$linkId = (int) $db->insertid();		}		else		{			// Update the link.			$query->clear()				->update($db->quoteName('#__finder_links'))				->set($db->quoteName('route') . ' = ' . $db->quote($item->route))				->set($db->quoteName('title') . ' = ' . $db->quote($item->title))				->set($db->quoteName('description') . ' = ' . $db->quote($item->description))				->set($db->quoteName('indexdate') . ' = ' . $query->currentTimestamp())				->set($db->quoteName('state') . ' = ' . (int) $item->state)				->set($db->quoteName('access') . ' = ' . (int) $item->access)				->set($db->quoteName('language') . ' = ' . $db->quote($item->language))				->set($db->quoteName('type_id') . ' = ' . (int) $item->type_id)				->set($db->quoteName('object') . ' = ' . $db->quote(serialize($item)))				->set($db->quoteName('publish_start_date') . ' = ' . $db->quote($item->publish_start_date))				->set($db->quoteName('publish_end_date') . ' = ' . $db->quote($item->publish_end_date))				->set($db->quoteName('start_date') . ' = ' . $db->quote($item->start_date))				->set($db->quoteName('end_date') . ' = ' . $db->quote($item->end_date))				->set($db->quoteName('list_price') . ' = ' . (double) ($item->list_price ? $item->list_price : 0))				->set($db->quoteName('sale_price') . ' = ' . (double) ($item->sale_price ? $item->sale_price : 0))				->where('link_id = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Set up the variables we will need during processing.		$tokens = array();		$count = 0;		// Mark afterLinking in the profiler.		static::$profiler ? static::$profiler->mark('afterLinking') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		/*		 * Process the item's content. The items can customize their		 * processing instructions to define extra properties to process		 * or rearrange how properties are weighted.		 */		foreach ($item->getInstructions() as $group => $properties)		{			// Iterate through the properties of the group.			foreach ($properties as $property)			{				// Check if the property exists in the item.				if (empty($item->$property))				{					continue;				}				// Tokenize the property.				if (is_array($item->$property))				{					// Tokenize an array of content and add it to the database.					foreach ($item->$property as $ip)					{						// If the group is path, we need to a few extra processing						// steps to strip the extension and convert slashes and dashes						// to spaces.						if ($group === static::PATH_CONTEXT)						{							$ip = JFile::stripExt($ip);							$ip = str_replace('/', ' ', $ip);							$ip = str_replace('-', ' ', $ip);						}						// Tokenize a string of content and add it to the database.						$count += $this->tokenizeToDB($ip, $group, $item->language, $format);						// Check if we're approaching the memory limit of the token table.						if ($count > static::$state->options->get('memory_table_limit', 30000))						{							$this->toggleTables(false);						}					}				}				else				{					// If the group is path, we need to a few extra processing					// steps to strip the extension and convert slashes and dashes					// to spaces.					if ($group === static::PATH_CONTEXT)					{						$item->$property = JFile::stripExt($item->$property);						$item->$property = str_replace('/', ' ', $item->$property);						$item->$property = str_replace('-', ' ', $item->$property);					}					// Tokenize a string of content and add it to the database.					$count += $this->tokenizeToDB($item->$property, $group, $item->language, $format);					// Check if we're approaching the memory limit of the token table.					if ($count > static::$state->options->get('memory_table_limit', 30000))					{						$this->toggleTables(false);					}				}			}		}		/*		 * Process the item's taxonomy. The items can customize their		 * taxonomy mappings to define extra properties to map.		 */		foreach ($item->getTaxonomy() as $branch => $nodes)		{			// Iterate through the nodes and map them to the branch.			foreach ($nodes as $node)			{				// Add the node to the tree.				$nodeId = FinderIndexerTaxonomy::addNode($branch, $node->title, $node->state, $node->access);				// Add the link => node map.				FinderIndexerTaxonomy::addMap($linkId, $nodeId);				// Tokenize the node title and add them to the database.				$count += $this->tokenizeToDB($node->title, static::META_CONTEXT, $item->language, $format);			}		}		// Mark afterProcessing in the profiler.		static::$profiler ? static::$profiler->mark('afterProcessing') : null;		/*		 * At this point, all of the item's content has been parsed, tokenized		 * and inserted into the #__finder_tokens table. Now, we need to		 * aggregate all the data into that table into a more usable form. The		 * aggregated data will be inserted into #__finder_tokens_aggregate		 * table.		 */		$query	= 'INSERT INTO ' . $db->quoteName('#__finder_tokens_aggregate') .				' (' . $db->quoteName('term_id') .				', ' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('term_weight') .				', ' . $db->quoteName('context') .				', ' . $db->quoteName('context_weight') .				', ' . $db->quoteName('language') . ')' .				' SELECT' .				' t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, ' .				' ROUND( t1.weight * COUNT( t2.term ) * %F, 8 ) AS context_weight, t1.language' .				' FROM (' .				'   SELECT DISTINCT t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				'   FROM ' . $db->quoteName('#__finder_tokens') . ' AS t1' .				'   WHERE t1.context = %d' .				' ) AS t1' .				' JOIN ' . $db->quoteName('#__finder_tokens') . ' AS t2 ON t2.term = t1.term' .				' LEFT JOIN ' . $db->quoteName('#__finder_terms') . ' AS t ON t.term = t1.term' .				' WHERE t2.context = %d' .				' GROUP BY t1.term' .				' ORDER BY t1.term DESC';		// Iterate through the contexts and aggregate the tokens per context.		foreach ($state->weights as $context => $multiplier)		{			// Run the query to aggregate the tokens for this context..			$db->setQuery(sprintf($query, $multiplier, $context, $context));			$db->execute();		}		// Mark afterAggregating in the profiler.		static::$profiler ? static::$profiler->mark('afterAggregating') : null;		/*		 * When we pulled down all of the aggregate data, we did a LEFT JOIN		 * over the terms table to try to find all the term ids that		 * already exist for our tokens. If any of the rows in the aggregate		 * table have a term of 0, then no term record exists for that		 * term so we need to add it to the terms table.		 */		$db->setQuery(			'INSERT IGNORE INTO ' . $db->quoteName('#__finder_terms') .			' (' . $db->quoteName('term') .			', ' . $db->quoteName('stem') .			', ' . $db->quoteName('common') .			', ' . $db->quoteName('phrase') .			', ' . $db->quoteName('weight') .			', ' . $db->quoteName('soundex') .			', ' . $db->quoteName('language') . ')' .			' SELECT ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term), ta.language' .			' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .			' WHERE ta.term_id = 0' .			' GROUP BY ta.term'		);		$db->execute();		/*		 * Now, we just inserted a bunch of new records into the terms table		 * so we need to go back and update the aggregate table with all the		 * new term ids.		 */		$query = $db->getQuery(true)			->update($db->quoteName('#__finder_tokens_aggregate') . ' AS ta')			->join('INNER', $db->quoteName('#__finder_terms') . ' AS t ON t.term = ta.term')			->set('ta.term_id = t.term_id')			->where('ta.term_id = 0');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * After we've made sure that all of the terms are in the terms table		 * and the aggregate table has the correct term ids, we need to update		 * the links counter for each term by one.		 */		$query->clear()			->update($db->quoteName('#__finder_terms') . ' AS t')			->join('INNER', $db->quoteName('#__finder_tokens_aggregate') . ' AS ta ON ta.term_id = t.term_id')			->set('t.' . $db->quoteName('links') . ' = t.links + 1');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * Before we can insert all of the mapping rows, we have to figure out		 * which mapping table the rows need to be inserted into. The mapping		 * table for each term is based on the first character of the md5 of		 * the first character of the term. In php, it would be expressed as		 * substr(md5(substr($token, 0, 1)), 0, 1)		 */		$query->clear()			->update($db->quoteName('#__finder_tokens_aggregate'))			->set($db->quoteName('map_suffix') . ' = SUBSTR(MD5(SUBSTR(' . $db->quoteName('term') . ', 1, 1)), 1, 1)');		$db->setQuery($query);		$db->execute();		/*		 * At this point, the aggregate table contains a record for each		 * term in each context. So, we're going to pull down all of that		 * data while grouping the records by term and add all of the		 * sub-totals together to arrive at the final total for each token for		 * this link. Then, we insert all of that data into the appropriate		 * mapping table.		 */		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			/*			 * We have to run this query 16 times, one for each link => term			 * mapping table.			 */			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_links_terms' . $suffix) .				' (' . $db->quoteName('link_id') .				', ' . $db->quoteName('term_id') .				', ' . $db->quoteName('weight') . ')' .				' SELECT ' . (int) $linkId . ', ' . $db->quoteName('term_id') . ',' .				' ROUND(SUM(' . $db->quoteName('context_weight') . '), 8)' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') .				' WHERE ' . $db->quoteName('map_suffix') . ' = ' . $db->quote($suffix) .				' GROUP BY ' . $db->quoteName('term') .				' ORDER BY ' . $db->quoteName('term') . ' DESC'			);			$db->execute();		}		// Mark afterMapping in the profiler.		static::$profiler ? static::$profiler->mark('afterMapping') : null;		// Update the signature.		$query->clear()			->update($db->quoteName('#__finder_links'))			->set($db->quoteName('md5sum') . ' = ' . $db->quote($curSig))			->where($db->quoteName('link_id') . ' = ' . $db->quote($linkId));		$db->setQuery($query);		$db->execute();		// Mark afterSigning in the profiler.		static::$profiler ? static::$profiler->mark('afterSigning') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		// Toggle the token tables back to memory tables.		$this->toggleTables(true);		// Mark afterTruncating in the profiler.		static::$profiler ? static::$profiler->mark('afterTruncating') : null;		return $linkId;	}	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function remove($linkId)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get the indexer state.		$state = static::getState();		// Update the link counts and remove the mapping records.		for ($i = 0; $i <= 15; $i++)		{			// Update the link counts for the terms.			$query->update($db->quoteName('#__finder_terms') . ' AS t')				->join('INNER', $db->quoteName('#__finder_links_terms' . dechex($i)) . ' AS m ON m.term_id = t.term_id')				->set('t.links = t.links - 1')				->where('m.link_id = ' . $db->quote((int) $linkId));			$db->setQuery($query);			$db->execute();			// Remove all records from the mapping tables.			$query->clear()				->delete($db->quoteName('#__finder_links_terms' . dechex($i)))				->where($db->quoteName('link_id') . ' = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Delete all orphaned terms.		$query->clear()			->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Delete the link from the index.		$query->clear()			->delete($db->quoteName('#__finder_links'))			->where($db->quoteName('link_id') . ' = ' . $db->quote((int) $linkId));		$db->setQuery($query);		$db->execute();		// Remove the taxonomy maps.		FinderIndexerTaxonomy::removeMaps($linkId);		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	public function optimize()	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Delete all orphaned terms.		$query->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Optimize the links table.		$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_links'));		$db->execute();		for ($i = 0; $i <= 15; $i++)		{			// Optimize the terms mapping table.			$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_links_terms' . dechex($i)));			$db->execute();		}		// Optimize the terms mapping table.		$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_links_terms'));		$db->execute();		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		// Optimize the taxonomy mapping table.		$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_taxonomy_map'));		$db->execute();		return true;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	protected function addTokensToDB($tokens, $context = '')	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Force tokens to an array.		$tokens = is_array($tokens) ? $tokens : array($tokens);		// Count the number of token values.		$values = 0;		// Insert the tokens into the database.		$query->insert($db->quoteName('#__finder_tokens'))			->columns(				array(					$db->quoteName('term'),					$db->quoteName('stem'),					$db->quoteName('common'),					$db->quoteName('phrase'),					$db->quoteName('weight'),					$db->quoteName('context'),					$db->quoteName('language')				)			);		// Iterate through the tokens to create SQL value sets.		foreach ($tokens as $token)		{			$query->values(				$db->quote($token->term) . ', '					. $db->quote($token->stem) . ', '					. (int) $token->common . ', '					. (int) $token->phrase . ', '					. (float) $token->weight . ', '					. (int) $context . ', '					. $db->quote($token->language)			);			$values++;		}		$db->setQuery($query);		$db->execute();		return $values;	}	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	protected function toggleTables($memory)	{		static $state;		// Get the database adapter.		$db = JFactory::getDbo();		// Check if we are setting the tables to the Memory engine.		if ($memory === true && $state !== true)		{			// Set the tokens table to Memory.			$db->setQuery('ALTER TABLE ' . $db->quoteName('#__finder_tokens') . ' ENGINE = MEMORY');			$db->execute();			// Set the tokens aggregate table to Memory.			$db->setQuery('ALTER TABLE ' . $db->quoteName('#__finder_tokens_aggregate') . ' ENGINE = MEMORY');			$db->execute();			// Set the internal state.			$state = $memory;		}		// We must be setting the tables to the MyISAM engine.		elseif ($memory === false && $state !== false)		{			// Set the tokens table to MyISAM.			$db->setQuery('ALTER TABLE ' . $db->quoteName('#__finder_tokens') . ' ENGINE = MYISAM');			$db->execute();			// Set the tokens aggregate table to MyISAM.			$db->setQuery('ALTER TABLE ' . $db->quoteName('#__finder_tokens_aggregate') . ' ENGINE = MYISAM');			$db->execute();			// Set the internal state.			$state = $memory;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">		window.addEvent('domready', function()		{			document.id('jform_searchstring').addEvent('focus', function()			{				if (!Joomla.overrider.states.refreshed)				{					<?php if ($this->state->get('cache_expired')) : ?>					Joomla.overrider.refreshCache();					Joomla.overrider.states.refreshed = true;					<?php endif; ?>				}				this.removeClass('invalid');			});		});	Joomla.submitbutton = function(task)	{		if (task == 'override.cancel' || document.formvalidator.isValid(document.id('override-form')))		{			Joomla.submitform(task, document.getElementById('override-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_languages&id='.$this->item->key); ?>" method="post" name="adminForm" id="override-form" class="form-validate form-horizontal">	<div class="row-fluid">		<div class="span6">			<fieldset>				<legend><?php echo empty($this->item->key) ? JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_NEW_OVERRIDE_LEGEND') : JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_EDIT_OVERRIDE_LEGEND'); ?></legend>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('key'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('key'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('override'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('override'); ?>					</div>				</div>				<?php if ($this->state->get('filter.client') == 'administrator') : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('both'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('both'); ?>					</div>				</div>				<?php endif; ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('language'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('client'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('client'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('file'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('file'); ?>					</div>				</div>			</fieldset>		</div>		<div class="span6">			<fieldset>				<legend><?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SEARCH_LEGEND'); ?></legend>				<div class="alert alert-info"><p><?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SEARCH_TIP'); ?></p></div>				<div class="control-group">					<?php echo $this->form->getInput('searchstring'); ?>					<button type="submit" class="btn btn-primary" onclick="Joomla.overrider.searchStrings();return false;">						<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SEARCH_BUTTON'); ?>					</button>					<span id="refresh-status" class="overrider-spinner  help-block">						<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_REFRESHING'); ?>					</span>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('searchtype'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('searchtype'); ?>					</div>				</div>			</fieldset>			<fieldset id="results-container" class="adminform">				<legend><?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_RESULTS_LEGEND'); ?></legend>				<span id="more-results">					<a href="javascript:Joomla.overrider.searchStrings(Joomla.overrider.states.more);">						<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_MORE_RESULTS'); ?></a>				</span>			</fieldset>			<input type="hidden" name="task" value="" />			<input type="hidden" name="id" value="<?php echo $this->item->key; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for generating Facebook API access token. * * @package     Joomla.Platform * @subpackage  Facebook * * @since       13.1 */class JFacebookOAuth extends JOAuth2Client{	/**	 * @var JRegistry Options for the JFacebookOAuth object.	 * @since 13.1	 */	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  JFacebookOauth options object.	 * @param   JHttp      $client   The HTTP client object.	 * @param   JInput     $input    The input object.	 *	 * @since   13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JInput $input = null)	{		$this->options = isset($options) ? $options : new JRegistry;		// Setup the authentication and token urls if not already set.		$this->options->def('authurl', 'http://www.facebook.com/dialog/oauth');		$this->options->def('tokenurl', 'https://graph.facebook.com/oauth/access_token');		// Call the JOauthOauth2client constructor to setup the object.		parent::__construct($this->options, $client, $input);	}	/**	 * Method used to set permissions.	 *	 * @param   string  $scope  Comma separated list of permissions.	 *	 * @return  JFacebookOauth  This object for method chaining	 *	 * @since   13.1	 */	public function setScope($scope)	{		$this->setOption('scope', $scope);		return $this;	}	/**	 * Method to get the current scope	 *	 * @return  string Comma separated list of permissions.	 *	 * @since   13.1	 */	public function getScope()	{		return $this->getOption('scope');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user      = JFactory::getUser();$userId    = $user->get('id');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$canOrder  = $user->authorise('core.edit.state', 'com_banners.category');$saveOrder = $listOrder == 'ordering';?><form action="<?php echo JRoute::_('index.php?option=com_banners&view=banners'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('Banners_Search_in_title'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('COM_BANNERS_SELECT_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value=""><?php echo JText::_('COM_BANNERS_SELECT_CLIENT');?></option>				<?php echo JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_NAME', 'name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'state', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_STICKY', 'sticky', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLIENT', 'client_name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) : ?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'banners.saveorder'); ?>					<?php endif;?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_IMPRESSIONS', 'impmade', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLICKS', 'clicks', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JText::_('COM_BANNERS_HEADING_METAKEYWORDS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_BANNERS_HEADING_PURCHASETYPE'); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'ordering');			$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_banners&task=edit&type=other&cid[]=' . $item->catid);			$canCreate  = $user->authorise('core.create',     'com_banners.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_banners.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_banners.category.' . $item->catid) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'banners.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_banners&task=banner.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>							<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'banners.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo JHtml::_('banner.pinned', $item->sticky, $i, $canChange);?>				</td>				<td class="center">					<?php echo $item->client_name;?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) : ?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->catid == $item->catid), 'banners.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->catid == $item->catid), 'banners.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->catid == $item->catid), 'banners.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->catid == $item->catid), 'banners.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled; ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo JText::sprintf('COM_BANNERS_IMPRESSIONS', $item->impmade, $item->imptotal ? $item->imptotal : JText::_('COM_BANNERS_UNLIMITED'));?>				</td>				<td class="center">					<?php echo $item->clicks;?> -					<?php echo sprintf('%.2f%%', $item->impmade ? 100 * $item->clicks / $item->impmade : 0);?>				</td>				<td>					<?php echo $item->metakey; ?>				</td>				<td class="center">					<?php if ($item->purchase_type < 0):?>						<?php echo JText::sprintf('COM_BANNERS_DEFAULT', ($item->client_purchase_type > 0) ? JText::_('COM_BANNERS_FIELD_VALUE_'.$item->client_purchase_type) : JText::_('COM_BANNERS_FIELD_VALUE_'.$this->state->params->get('purchase_type')));?>					<?php else:?>						<?php echo JText::_('COM_BANNERS_FIELD_VALUE_'.$item->purchase_type);?>					<?php endif;?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div class="clr"> </div>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_newsfeeds.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_newsfeeds&task=newsfeeds.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="5%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES_HEADING', 'numarticles', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_CACHE_TIME_HEADING', 'a.cache_time', $listDirn, $listOrder); ?>					</th>					<?php if ($assoc) : ?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="11">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'a.ordering');				$canCreate  = $user->authorise('core.create',     'com_newsfeeds.category.' . $item->catid);				$canEdit    = $user->authorise('core.edit',       'com_newsfeeds.category.' . $item->catid);				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_newsfeeds.category.' . $item->catid) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order" />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'newsfeeds.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'newsfeeds.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_newsfeeds&task=newsfeed.edit&id='.(int) $item->id); ?>">									<?php echo $this->escape($item->name); ?></a>							<?php else : ?>									<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<span class="small">								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							</span>							<div class="small">								<?php echo $this->escape($item->category_title); ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'newsfeed.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'newsfeeds.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'newsfeeds.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'newsfeeds.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'newsfeeds.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');								?>						</div>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->numarticles; ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->cache_time; ?>					</td>					<?php if ($assoc) : ?>					<td class="hidden-phone">						<?php if ($item->association) : ?>							<?php echo JHtml::_('newsfeed.association', $item->id); ?>						<?php endif; ?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a contact. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactViewContact extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Initialise variables.		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Since we don't track these assets at the item level, use the category id.		$canDo		= ContactHelper::getActions($this->item->catid, 0);		JToolbarHelper::title(JText::_('COM_CONTACT_MANAGER_CONTACT'), 'contact.png');		// Build the actions for new and existing records.		if ($isNew)		{			// For new records, check the create permission.			if ($isNew && (count($user->getAuthorisedCategories('com_contact', 'core.create')) > 0))			{				JToolbarHelper::apply('contact.apply');				JToolbarHelper::save('contact.save');				JToolbarHelper::save2new('contact.save2new');			}			JToolbarHelper::cancel('contact.cancel');		}		else		{			// Can't save the record if it's checked out.			if (!$checkedOut)			{				// Since it's an existing record, check the edit permission, or fall back to edit own if the owner.				if ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_by == $userId))				{					JToolbarHelper::apply('contact.apply');					JToolbarHelper::save('contact.save');					// We can save this record, but check the create permission to see if we can return to make a new one.					if ($canDo->get('core.create'))					{						JToolbarHelper::save2new('contact.save2new');					}				}			}			// If checked out, we can still save			if ($canDo->get('core.create'))			{				JToolbarHelper::save2copy('contact.save2copy');			}			JToolbarHelper::cancel('contact.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_CONTACTS_CONTACTS_EDIT');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract Form Field class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */abstract class JFormField{	/**	 * The description text for the form field.  Usually used in tooltips.	 *	 * @var    string	 * @since  11.1	 */	protected $description;	/**	 * The SimpleXMLElement object of the <field /> XML element that describes the form field.	 *	 * @var    SimpleXMLElement	 * @since  11.1	 */	protected $element;	/**	 * The JForm object of the form attached to the form field.	 *	 * @var    JForm	 * @since  11.1	 */	protected $form;	/**	 * The form control prefix for field names from the JForm object attached to the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $formControl;	/**	 * The hidden state for the form field.	 *	 * @var    boolean	 * @since  11.1	 */	protected $hidden = false;	/**	 * True to translate the field label string.	 *	 * @var    boolean	 * @since  11.1	 */	protected $translateLabel = true;	/**	 * True to translate the field description string.	 *	 * @var    boolean	 * @since  11.1	 */	protected $translateDescription = true;	/**	 * The document id for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $id;	/**	 * The input for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $input;	/**	 * The label for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $label;	/**	 * The multiple state for the form field.  If true then multiple values are allowed for the	 * field.  Most often used for list field types.	 *	 * @var    boolean	 * @since  11.1	 */	protected $multiple = false;	/**	 * The name of the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $name;	/**	 * The name of the field.	 *	 * @var    string	 * @since  11.1	 */	protected $fieldname;	/**	 * The group of the field.	 *	 * @var    string	 * @since  11.1	 */	protected $group;	/**	 * The required state for the form field.  If true then there must be a value for the field to	 * be considered valid.	 *	 * @var    boolean	 * @since  11.1	 */	protected $required = false;	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type;	/**	 * The validation method for the form field.  This value will determine which method is used	 * to validate the value for a field.	 *	 * @var    string	 * @since  11.1	 */	protected $validate;	/**	 * The value of the form field.	 *	 * @var    mixed	 * @since  11.1	 */	protected $value;	/**	 * The label's CSS class of the form field	 *	 * @var    mixed	 * @since  11.1	 */	protected $labelClass;	/**	 * The count value for generated name field	 *	 * @var    integer	 * @since  11.1	 */	protected static $count = 0;	/**	 * The string used for generated fields names	 *	 * @var    integer	 * @since  11.1	 */	protected static $generated_fieldname = '__field';	/**	 * Method to instantiate the form field object.	 *	 * @param   JForm  $form  The form to attach to the form field object.	 *	 * @since   11.1	 */	public function __construct($form = null)	{		// If there is a form passed into the constructor set the form and form control properties.		if ($form instanceof JForm)		{			$this->form = $form;			$this->formControl = $form->getFormControl();		}		// Detect the field type if not set		if (!isset($this->type))		{			$parts = JStringNormalise::fromCamelCase(get_called_class(), true);			if ($parts[0] == 'J')			{				$this->type = JString::ucfirst($parts[count($parts) - 1], '_');			}			else			{				$this->type = JString::ucfirst($parts[0], '_') . JString::ucfirst($parts[count($parts) - 1], '_');			}		}	}	/**	 * Method to get certain otherwise inaccessible properties from the form field object.	 *	 * @param   string  $name  The property name for which to the the value.	 *	 * @return  mixed  The property value or null.	 *	 * @since   11.1	 */	public function __get($name)	{		switch ($name)		{			case 'description':			case 'formControl':			case 'hidden':			case 'id':			case 'multiple':			case 'name':			case 'required':			case 'type':			case 'validate':			case 'value':			case 'labelClass':			case 'fieldname':			case 'group':				return $this->$name;			case 'input':				// If the input hasn't yet been generated, generate it.				if (empty($this->input))				{					$this->input = $this->getInput();				}				return $this->input;			case 'label':				// If the label hasn't yet been generated, generate it.				if (empty($this->label))				{					$this->label = $this->getLabel();				}				return $this->label;			case 'title':				return $this->getTitle();		}		return null;	}	/**	 * Method to attach a JForm object to the field.	 *	 * @param   JForm  $form  The JForm object to attach to the form field.	 *	 * @return  JFormField  The form field object so that the method can be used in a chain.	 *	 * @since   11.1	 */	public function setForm(JForm $form)	{		$this->form = $form;		$this->formControl = $form->getFormControl();		return $this;	}	/**	 * Method to attach a JForm object to the field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function setup(SimpleXMLElement $element, $value, $group = null)	{		// Make sure there is a valid JFormField XML element.		if ((string) $element->getName() != 'field')		{			return false;		}		// Reset the input and label values.		$this->input = null;		$this->label = null;		// Set the XML element object.		$this->element = $element;		// Get some important attributes from the form field element.		$class = (string) $element['class'];		$id = (string) $element['id'];		$multiple = (string) $element['multiple'];		$name = (string) $element['name'];		$required = (string) $element['required'];		// Set the required and validation options.		$this->required = ($required == 'true' || $required == 'required' || $required == '1');		$this->validate = (string) $element['validate'];		// Add the required class if the field is required.		if ($this->required)		{			if ($class)			{				if (strpos($class, 'required') === false)				{					$this->element['class'] = $class . ' required';				}			}			else			{				$this->element['class'] = 'required';			}		}		// Set the multiple values option.		$this->multiple = ($multiple == 'true' || $multiple == 'multiple');		// Allow for field classes to force the multiple values option.		if (isset($this->forceMultiple))		{			$this->multiple = (bool) $this->forceMultiple;		}		// Set the field description text.		$this->description = (string) $element['description'];		// Set the visibility.		$this->hidden = ((string) $element['type'] == 'hidden' || (string) $element['hidden'] == 'true');		// Determine whether to translate the field label and/or description.		$this->translateLabel = !((string) $this->element['translate_label'] == 'false' || (string) $this->element['translate_label'] == '0');		$this->translateDescription = !((string) $this->element['translate_description'] == 'false'			|| (string) $this->element['translate_description'] == '0');		// Set the group of the field.		$this->group = $group;		// Set the field name and id.		$this->fieldname = $this->getFieldName($name);		$this->name = $this->getName($this->fieldname);		$this->id = $this->getId($id, $this->fieldname);		// Set the field default value.		$this->value = $value;		// Set the CSS class of field label		$this->labelClass = (string) $element['labelclass'];		return true;	}	/**	 * Method to get the id used for the field input tag.	 *	 * @param   string  $fieldId    The field element id.	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The id to be used for the field input tag.	 *	 * @since   11.1	 */	protected function getId($fieldId, $fieldName)	{		$id = '';		// If there is a form control set for the attached form add it first.		if ($this->formControl)		{			$id .= $this->formControl;		}		// If the field is in a group add the group control to the field id.		if ($this->group)		{			// If we already have an id segment add the group control as another level.			if ($id)			{				$id .= '_' . str_replace('.', '_', $this->group);			}			else			{				$id .= str_replace('.', '_', $this->group);			}		}		// If we already have an id segment add the field id/name as another level.		if ($id)		{			$id .= '_' . ($fieldId ? $fieldId : $fieldName);		}		else		{			$id .= ($fieldId ? $fieldId : $fieldName);		}		// Clean up any invalid characters.		$id = preg_replace('#\W#', '_', $id);		return $id;	}	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	abstract protected function getInput();	/**	 * Method to get the field title.	 *	 * @return  string  The field title.	 *	 * @since   11.1	 */	protected function getTitle()	{		$title = '';		if ($this->hidden)		{			return $title;		}		// Get the label text from the XML element, defaulting to the element name.		$title = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$title = $this->translateLabel ? JText::_($title) : $title;		return $title;	}	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   11.1	 */	protected function getLabel()	{		$label = '';		if ($this->hidden)		{			return $label;		}		// Get the label text from the XML element, defaulting to the element name.		$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$text = $this->translateLabel ? JText::_($text) : $text;		// Build the class for the label.		$class = !empty($this->description) ? 'hasTip' : '';		$class = $this->required == true ? $class . ' required' : $class;		$class = !empty($this->labelClass) ? $class . ' ' . $this->labelClass : $class;		// Add the opening label tag and main attributes attributes.		$label .= '<label id="' . $this->id . '-lbl" for="' . $this->id . '" class="' . $class . '"';		// If a description is specified, use it to build a tooltip.		if (!empty($this->description))		{			$label .= ' title="'				. htmlspecialchars(				trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),				ENT_COMPAT, 'UTF-8'			) . '"';		}		// Add the label text and closing tag.		if ($this->required)		{			$label .= '>' . $text . '<span class="star">&#160;*</span></label>';		}		else		{			$label .= '>' . $text . '</label>';		}		return $label;	}	/**	 * Method to get the name used for the field input tag.	 *	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The name to be used for the field input tag.	 *	 * @since   11.1	 */	protected function getName($fieldName)	{		$name = '';		// If there is a form control set for the attached form add it first.		if ($this->formControl)		{			$name .= $this->formControl;		}		// If the field is in a group add the group control to the field name.		if ($this->group)		{			// If we already have a name segment add the group control as another level.			$groups = explode('.', $this->group);			if ($name)			{				foreach ($groups as $group)				{					$name .= '[' . $group . ']';				}			}			else			{				$name .= array_shift($groups);				foreach ($groups as $group)				{					$name .= '[' . $group . ']';				}			}		}		// If we already have a name segment add the field name as another level.		if ($name)		{			$name .= '[' . $fieldName . ']';		}		else		{			$name .= $fieldName;		}		// If the field should support multiple values add the final array segment.		if ($this->multiple)		{			switch (strtolower((string) $this->element['type']))			{				case 'text':				case 'textarea':				case 'email':				case 'password':				case 'radio':				case 'calendar':				case 'editor':				case 'hidden':					break;				default:					$name .= '[]';			}		}		return $name;	}	/**	 * Method to get the field name used.	 *	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The field name	 *	 * @since   11.1	 */	protected function getFieldName($fieldName)	{		if ($fieldName)		{			return $fieldName;		}		else		{			self::$count = self::$count + 1;			return self::$generated_fieldname . self::$count;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo = LanguagesHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'language.cancel' || document.formvalidator.isValid(document.id('language-form')))		{			Joomla.submitform(task, document.getElementById('language-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_languages&layout=edit&lang_id='.(int) $this->item->lang_id); ?>" method="post" name="adminForm" id="language-form" class="form-validate form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('JDETAILS', true)); ?>			<div class="control-group">				<div class="controls">					<?php if ($this->item->lang_id) : ?>						<?php echo JText::sprintf('JGLOBAL_RECORD_NUMBER', $this->item->lang_id); ?>					<?php else : ?>						<?php echo JText::_('COM_LANGUAGES_VIEW_LANGUAGE_EDIT_NEW_TITLE'); ?>					<?php endif; ?>				</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title_native'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title_native'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('sef'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('sef'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('image'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('image'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lang_code'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lang_code'); ?>					</div>			</div>			<?php if ($canDo->get('core.edit.state')) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('published'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('description'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('description'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lang_id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lang_id'); ?>					</div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>			<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'site_name', JText::_('COM_LANGUAGES_FIELDSET_SITE_NAME_LABEL', true)); ?>			<?php foreach ($this->form->getFieldset('site_name') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Default View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerViewDefault extends JViewLegacy{	/**	 * Constructor	 *	 * @param   array  $config  Configuration array	 *	 * @since   1.5	 */	public function __construct($config = null)	{		$app = JFactory::getApplication();		parent::__construct($config);		$this->_addPath('template', $this->_basePath . '/views/default/tmpl');		$this->_addPath('template', JPATH_THEMES . '/' . $app->getTemplate() . '/html/com_installer/default');	}	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.5	 */	public function display($tpl = null)	{		// Get data from the model		$state	= $this->get('State');		// Are there messages to display ?		$showMessage	= false;		if (is_object($state))		{			$message1		= $state->get('message');			$message2		= $state->get('extension_message');			$showMessage	= ($message1 || $message2);		}		$this->showMessage = $showMessage;		$this->state = &$state;		JHtml::_('behavior.tooltip');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= InstallerHelper::getActions();		JToolbarHelper::title(JText::_('COM_INSTALLER_HEADER_' . $this->getName()), 'install.png');		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_installer');			JToolbarHelper::divider();		}		// Document		$document = JFactory::getDocument();		$document->setTitle(JText::_('COM_INSTALLER_TITLE_' . $this->getName()));		// Render side bar		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$userId		= $user->get('id');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_languages');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=languages'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_LANGS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('languages.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist">		<thead>			<tr>				<th class="row-number-col">					<?php echo JText::_('JGRID_HEADING_ROW_NUMBER'); ?>				</th>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HEADING_TITLE_NATIVE', 'a.title_native', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_FIELD_LANG_TAG_LABEL', 'a.lang_code', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_FIELD_LANG_CODE_LABEL', 'a.sef', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HEADING_LANG_IMAGE', 'a.image', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th width="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'languages.saveorder'); ?>					<?php endif; ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_HOMEPAGE', '', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.lang_id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php		foreach ($this->items as $i => $item) :			$ordering  = ($listOrder == 'a.ordering');			$canCreate = $user->authorise('core.create',     'com_languages');			$canEdit   = $user->authorise('core.edit',       'com_languages');			$canChange = $user->authorise('core.edit.state', 'com_languages');		?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo $this->pagination->getRowOffset($i); ?>				</td>				<td>					<?php echo JHtml::_('grid.id', $i, $item->lang_id); ?>				</td>				<td>					<span class="editlinktip hasTip" title="<?php echo JText::_('JGLOBAL_EDIT_ITEM');?>::<?php echo $this->escape($item->title); ?>">					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_languages&task=language.edit&lang_id='.(int) $item->lang_id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>							<?php echo $this->escape($item->title); ?>					<?php endif; ?>					</span>				</td>				<td class="center">					<?php echo $this->escape($item->title_native); ?>				</td>				<td class="center">					<?php echo $this->escape($item->lang_code); ?>				</td>				<td class="center">					<?php echo $this->escape($item->sef); ?>				</td>				<td class="center">					<?php echo $this->escape($item->image); ?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'languages.', $canChange);?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'languages.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'languages.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'languages.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'languages.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php if ($item->home == '1') : ?>						<?php echo JText::_('JYES');?>					<?php else:?>						<?php echo JText::_('JNO');?>					<?php endif;?>				</td>				<td class="center">					<?php echo $this->escape($item->lang_id); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * RSS Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @link        http://cyber.law.harvard.edu/rss/rss.html * @since       12.3 */class JFeedParserRss extends JFeedParser{	/**	 * @var    string  The feed element name for the entry elements.	 * @since  12.3	 */	protected $entryElementName = 'item';	/**	 * @var    string  The feed format version.	 * @since  12.3	 */	protected $version;	/**	 * Method to handle the <category> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleCategory(JFeed $feed, SimpleXMLElement $el)	{		// Get the data from the element.		$domain    = (string) $el['domain'];		$category  = (string) $el;		$feed->addCategory($category, $domain);	}	/**	 * Method to handle the <cloud> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleCloud(JFeed $feed, SimpleXMLElement $el)	{		$cloud = new stdClass;		$cloud->domain            = (string) $el['domain'];		$cloud->port              = (string) $el['port'];		$cloud->path              = (string) $el['path'];		$cloud->protocol          = (string) $el['protocol'];		$cloud->registerProcedure = (string) $el['registerProcedure'];		$feed->cloud = $cloud;	}	/**	 * Method to handle the <copyright> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleCopyright(JFeed $feed, SimpleXMLElement $el)	{		$feed->copyright = (string) $el;	}	/**	 * Method to handle the <description> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleDescription(JFeed $feed, SimpleXMLElement $el)	{		$feed->description = (string) $el;	}	/**	 * Method to handle the <generator> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleGenerator(JFeed $feed, SimpleXMLElement $el)	{		$feed->generator = (string) $el;	}	/**	 * Method to handle the <image> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleImage(JFeed $feed, SimpleXMLElement $el)	{		// Create a feed link object for the image.		$image = new JFeedLink(			(string) $el->url,			null,			'logo',			null,			(string) $el->title		);		// Populate extra fields if they exist.		$image->link         = (string) $el->link;		$image->description  = (string) $el->description;		$image->height       = (string) $el->height;		$image->width        = (string) $el->width;		$feed->image = $image;	}	/**	 * Method to handle the <language> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLanguage(JFeed $feed, SimpleXMLElement $el)	{		$feed->language = (string) $el;	}	/**	 * Method to handle the <lastBuildDate> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLastBuildDate(JFeed $feed, SimpleXMLElement $el)	{		$feed->updatedDate = (string) $el;	}	/**	 * Method to handle the <link> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLink(JFeed $feed, SimpleXMLElement $el)	{		$feed->uri = (string) $el;	}	/**	 * Method to handle the <managingEditor> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleManagingEditor(JFeed $feed, SimpleXMLElement $el)	{		$feed->author = $this->processPerson((string) $el);	}	/**	 * Method to handle the <skipDays> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleSkipDays(JFeed $feed, SimpleXMLElement $el)	{		// Initialise the array.		$days = array();		// Add all of the day values from the feed to the array.		foreach ($el->day as $day)		{			$days[] = (string) $day;		}		$feed->skipDays = $days;	}	/**	 * Method to handle the <skipHours> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleSkipHours(JFeed $feed, SimpleXMLElement $el)	{		// Initialise the array.		$hours = array();		// Add all of the day values from the feed to the array.		foreach ($el->hour as $hour)		{			$hours[] = (int) $hour;		}		$feed->skipHours = $hours;	}	/**	 * Method to handle the <pubDate> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handlePubDate(JFeed $feed, SimpleXMLElement $el)	{		$feed->publishedDate = (string) $el;	}	/**	 * Method to handle the <title> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleTitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->title = (string) $el;	}	/**	 * Method to handle the <ttl> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleTtl(JFeed $feed, SimpleXMLElement $el)	{		$feed->ttl = (integer) $el;	}	/**	 * Method to handle the <webmaster> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleWebmaster(JFeed $feed, SimpleXMLElement $el)	{		// Get the tag contents and split it over the first space.		$tmp = (string) $el;		$tmp = explode(' ', $tmp, 2);		// This is really cheap parsing.  Probably need to create a method to do this more robustly.		$name = null;		if (isset($tmp[1]))		{			$name = trim($tmp[1], ' ()');		}		$email = trim($tmp[0]);		$feed->addContributor($name, $email, null, 'webmaster');	}	/**	 * Method to initialise the feed for parsing.  Here we detect the version and advance the stream	 * reader so that it is ready to parse feed elements.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initialise()	{		// Read the version attribute.		$this->version = $this->stream->getAttribute('version');		// We want to move forward to the first element after the <channel> element.		$this->moveToNextElement('channel');		$this->moveToNextElement();	}	/**	 * Method to handle the feed entry element for the feed: <item>.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{		$entry->uri           = (string) $el->link;		$entry->title         = (string) $el->title;		$entry->publishedDate = (string) $el->pubDate;		$entry->updatedDate   = (string) $el->pubDate;		$entry->content       = (string) $el->description;		$entry->guid          = (string) $el->guid;		$entry->comments      = (string) $el->comments;		// Add the feed entry author if available.		$author = (string) $el->author;		if (!empty($author))		{			$entry->author = $this->processPerson($author);		}		// Add any categories to the entry.		foreach ($el->category as $category)		{			$entry->addCategory((string) $category, (string) $category['domain']);		}		// Add any enclosures to the entry.		foreach ($el->enclosure as $enclosure)		{			$link = new JFeedLink(				(string) $enclosure['url'],				null,				(string) $enclosure['type'],				null,				null,				(int) $enclosure['length']			);			$entry->addLink($link);		}	}	/**	 * Method to parse a string with person data and return a JFeedPerson object.	 *	 * @param   string  $data  The string to parse for a person.	 *	 * @return  JFeedPerson	 *	 * @since   12.3	 */	protected function processPerson($data)	{		// Create a new person object.		$person = new JFeedPerson;		// This is really cheap parsing, but so far good enough. :)		$data = explode(' ', $data, 2);		if (isset($data[1]))		{			$person->name = trim($data[1], ' ()');		}		// Set the email for the person.		$person->email = trim($data[0]);		return $person;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Groups class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinGroups extends JLinkedinObject{	/**	 * Method to get a group.	 *	 * @param   string   $id      The unique identifier for a group.	 * @param   string   $fields  Request fields beyond the default ones.	 * @param   integer  $start   Starting location within the result set for paginated returns.	 * @param   integer  $count   The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getGroup($id, $fields = null, $start = 0, $count = 5)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/groups/' . $id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to find the groups a member belongs to.	 *	 * @param   string   $id                The unique identifier for a user.	 * @param   string   $fields            Request fields beyond the default ones.	 * @param   integer  $start             Starting location within the result set for paginated returns.	 * @param   integer  $count             The number of results returned.	 * @param   string   $membership_state  The state of the callers membership to the specified group.	 * 										Values are: non-member, awaiting-confirmation, awaiting-parent-group-confirmation, member, moderator, manager, owner.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getMemberships($id = null, $fields = null, $start = 0, $count = 5, $membership_state = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if id is specified.		if ($id)		{			$base .= $id . '/group-memberships';		}		else		{			$base .= '~/group-memberships';		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Check if membership_state is specified.		if ($membership_state)		{			$data['membership-state'] = $membership_state;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to find the groups a member belongs to.	 *	 * @param   string   $person_id  The unique identifier for a user.	 * @param   string   $group_id   The unique identifier for a group.	 * @param   string   $fields     Request fields beyond the default ones.	 * @param   integer  $start      Starting location within the result set for paginated returns.	 * @param   integer  $count      The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSettings($person_id = null, $group_id = null, $fields = null, $start = 0, $count = 5)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/group-memberships';		}		else		{			$base .= '~/group-memberships';		}		// Check if group_id is specified.		if ($group_id)		{			$base .= '/' . $group_id;		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to change a groups settings.	 *	 * @param   string   $group_id          The unique identifier for a group.	 * @param   boolean  $show_logo         Show group logo in profile.	 * @param   string   $digest_frequency  E-mail digest frequency.	 * @param   boolean  $announcements     E-mail announcements from managers.	 * @param   boolean  $allow_messages    Allow messages from members.	 * @param   boolean  $new_post          E-mail for every new post.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function changeSettings($group_id, $show_logo = null, $digest_frequency = null, $announcements = null,		$allow_messages = null, $new_post = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/group-memberships/' . $group_id;		// Build xml.		$xml = '<group-membership>';		if (!is_null($show_logo))		{			$xml .= '<show-group-logo-in-profile>' . $this->booleanToString($show_logo) . '</show-group-logo-in-profile>';		}		if ($digest_frequency)		{			$xml .= '<email-digest-frequency><code>' . $digest_frequency . '</code></email-digest-frequency>';		}		if (!is_null($announcements))		{			$xml .= '<email-announcements-from-managers>' . $this->booleanToString($announcements) . '</email-announcements-from-managers>';		}		if (!is_null($allow_messages))		{			$xml .= '<allow-messages-from-members>' . $this->booleanToString($allow_messages) . '</allow-messages-from-members>';		}		if (!is_null($new_post))		{			$xml .= '<email-for-every-new-post>' . $this->booleanToString($new_post) . '</email-for-every-new-post>';		}		$xml .= '</group-membership>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method to join a group.	 *	 * @param   string   $group_id          The unique identifier for a group.	 * @param   boolean  $show_logo         Show group logo in profile.	 * @param   string   $digest_frequency  E-mail digest frequency.	 * @param   boolean  $announcements     E-mail announcements from managers.	 * @param   boolean  $allow_messages    Allow messages from members.	 * @param   boolean  $new_post          E-mail for every new post.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function joinGroup($group_id, $show_logo = null, $digest_frequency = null, $announcements = null,		$allow_messages = null, $new_post = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/group-memberships';		// Build xml.		$xml = '<group-membership><group><id>' . $group_id . '</id></group>';		if (!is_null($show_logo))		{			$xml .= '<show-group-logo-in-profile>' . $this->booleanToString($show_logo) . '</show-group-logo-in-profile>';		}		if ($digest_frequency)		{			$xml .= '<email-digest-frequency><code>' . $digest_frequency . '</code></email-digest-frequency>';		}		if (!is_null($announcements))		{			$xml .= '<email-announcements-from-managers>' . $this->booleanToString($announcements) . '</email-announcements-from-managers>';		}		if (!is_null($allow_messages))		{			$xml .= '<allow-messages-from-members>' . $this->booleanToString($allow_messages) . '</allow-messages-from-members>';		}		if (!is_null($new_post))		{			$xml .= '<email-for-every-new-post>' . $this->booleanToString($new_post) . '</email-for-every-new-post>';		}		$xml .= '<membership-state><code>member</code></membership-state></group-membership>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to leave a group.	 *	 * @param   string  $group_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function leaveGroup($group_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/group-memberships/' . $group_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to get dicussions for a group.	 *	 * @param   string   $id              The unique identifier for a group.	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $order           Sort order for posts. Valid for: recency, popularity.	 * @param   string   $category        Category of posts. Valid for: discussion	 * @param   string   $modified_since  Timestamp filter for posts created after the specified value.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getDiscussions($id, $fields = null, $start = 0, $count = 0, $order = null, $category = 'discussion', $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/groups/' . $id . '/posts';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if order is specified.		if ($order)		{			$data['order'] = $order;		}		// Check if category is specified.		if ($category)		{			$data['category'] = $category;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get posts a user started / participated in / follows for a group.	 *	 * @param   string   $group_id        The unique identifier for a group.	 * @param   string   $role            Filter for posts related to the caller. Valid for: creator, commenter, follower.	 * @param   string   $person_id       The unique identifier for a user.	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $order           Sort order for posts. Valid for: recency, popularity.	 * @param   string   $category        Category of posts. Valid for: discussion	 * @param   string   $modified_since  Timestamp filter for posts created after the specified value.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getUserPosts($group_id, $role, $person_id = null, $fields = null, $start = 0, $count = 0,		$order = null, $category = 'discussion', $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id;		}		else		{			$base .= '~';		}		$base .= '/group-memberships/' . $group_id . '/posts';		$data['format'] = 'json';		$data['role'] = $role;		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if order is specified.		if ($order)		{			$data['order'] = $order;		}		// Check if category is specified.		if ($category)		{			$data['category'] = $category;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve details about a post.	 *	 * @param   string  $post_id  The unique identifier for a post.	 * @param   string  $fields   Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getPost($post_id, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/posts/' . $post_id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve all comments of a post.	 *	 * @param   string   $post_id  The unique identifier for a post.	 * @param   string   $fields   Request fields beyond the default ones.	 * @param   integer  $start    Starting location within the result set for paginated returns.	 * @param   integer  $count    The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getPostComments($post_id, $fields = null, $start = 0, $count = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/posts/' . $post_id . '/comments';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve all comments of a post.	 *	 * @param   string  $group_id  The unique identifier for a group.	 * @param   string  $title     Post title.	 * @param   string  $summary   Post summary.	 *	 * @return  string  The created post's id.	 *	 * @since   13.1	 */	public function createPost($group_id, $title, $summary)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/groups/' . $group_id . '/posts';		// Build xml.		$xml = '<post><title>' . $title . '</title><summary>' . $summary . '</summary></post>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		// Return the post id.		$response = explode('posts/', $response->headers['Location']);		return $response[1];	}	/**	 * Method to like or unlike a post.	 *	 * @param   string   $post_id  The unique identifier for a group.	 * @param   boolean  $like     True to like post, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _likeUnlike($post_id, $like)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/relation-to-viewer/is-liked';		// Build xml.		$xml = '<is-liked>' . $this->booleanToString($like) . '</is-liked>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to like a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function likePost($post_id)	{		return $this->_likeUnlike($post_id, true);	}	/**	 * Method used to unlike a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unlikePost($post_id)	{		return $this->_likeUnlike($post_id, false);	}	/**	 * Method to follow or unfollow a post.	 *	 * @param   string   $post_id  The unique identifier for a group.	 * @param   boolean  $follow   True to like post, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _followUnfollow($post_id, $follow)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/relation-to-viewer/is-following';		// Build xml.		$xml = '<is-following>' . $this->booleanToString($follow) . '</is-following>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to follow a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function followPost($post_id)	{		return $this->_followUnfollow($post_id, true);	}	/**	 * Method used to unfollow a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unfollowPost($post_id)	{		return $this->_followUnfollow($post_id, false);	}	/**	 * Method to flag a post as a Promotion or Job.	 *	 * @param   string  $post_id  The unique identifier for a group.	 * @param   string  $flag     Flag as a 'promotion' or 'job'.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function flagPost($post_id, $flag)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/category/code';		// Build xml.		$xml = '<code>' . $flag . '</code>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method to delete a post if the current user is the creator or flag it as inappropriate otherwise.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deletePost($post_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to access the comments resource.	 *	 * @param   string  $comment_id  The unique identifier for a comment.	 * @param   string  $fields      Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getComment($comment_id, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/comments/' . $comment_id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to add a comment to a post	 *	 * @param   string  $post_id  The unique identifier for a group.	 * @param   string  $comment  The post comment's text.	 *	 * @return  string   The created comment's id.	 *	 * @since   13.1	 */	public function addComment($post_id, $comment)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/posts/' . $post_id . '/comments';		// Build xml.		$xml = '<comment><text>' . $comment . '</text></comment>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		// Return the comment id.		$response = explode('comments/', $response->headers['Location']);		return $response[1];	}	/**	 * Method to delete a comment if the current user is the creator or flag it as inappropriate otherwise.	 *	 * @param   string  $comment_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deleteComment($comment_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/comments/' . $comment_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to get suggested groups for a user.	 *	 * @param   string  $person_id  The unique identifier for a user.	 * @param   string  $fields     Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSuggested($person_id = null, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/suggestions/groups';		}		else		{			$base .= '~/suggestions/groups';		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to delete a group suggestion for a user.	 *	 * @param   string  $suggestion_id  The unique identifier for a suggestion.	 * @param   string  $person_id      The unique identifier for a user.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deleteSuggestion($suggestion_id, $person_id = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/suggestions/groups/' . $suggestion_id;		}		else		{			$base .= '~/suggestions/groups/' . $suggestion_id;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Categories class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiCategories extends JMediawikiObject{	/**     * Method to list all categories the page(s) belong to.     *     * @param   array    $titles        Page titles to retrieve categories.     * @param   array    $clprop        List of additional properties to get.     * @param   array    $clshow        Type of categories to show.     * @param   integer  $cllimit       Number of categories to return.     * @param   boolean  $clcontinue    Continue when more results are available.     * @param   array    $clcategories  Only list these categories.     * @param   string   $cldir         Direction of listing.     *     * @return  object     *     * @since   12.1     */	public function getCategories(array $titles, array $clprop = null, array $clshow = null, $cllimit = null, $clcontinue = false,		array $clcategories = null, $cldir = null)	{		// Build the request.		$path = '?action=query&prop=categories';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($clprop))		{			$path .= '&clprop=' . $this->buildParameter($clprop);		}		if (isset($clshow))		{			$path .= '&$clshow=' . $this->buildParameter($clshow);		}		if (isset($cllimit))		{			$path .= '&cllimit=' . $cllimit;		}		if ($clcontinue)		{			$path .= '&clcontinue=';		}		if (isset($clcategories))		{			$path .= '&clcategories=' . $this->buildParameter($clcategories);		}		if (isset($cldir))		{			$path .= '&cldir=' . $cldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get information about all categories used.     *     * @param   array  $titles  Page titles to retrieve categories.     *     * @return  object     *     * @since   12.3     */	public function getCategoriesUsed(array $titles)	{		// Build the request		$path = '?action=query&generator=categories&prop=info';		// Append titles to the request		$path .= '&titles=' . $this->buildParameter($titles);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get information about the given categories.     *     * @param   array    $titles      Page titles to retrieve categories.     * @param   boolean  $clcontinue  Continue when more results are available.     *     * @return  object     *     * @since   12.3     */	public function getCategoriesInfo(array $titles, $clcontinue = false)	{		// Build the request.		$path = '?action=query&prop=categoryinfo';		// Append titles to the request		$path .= '&titles=' . $this->buildParameter($titles);		if ($clcontinue)		{			$path .= '&clcontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to enumerate all categories.     *     * @param   string   $acfrom    The category to start enumerating from.     * @param   string   $acto      The category to stop enumerating at.     * @param   string   $acprefix  Search for all category titles that begin with this value.     * @param   string   $acdir     Direction to sort in.     * @param   integer  $acmin     Minimum number of category members.     * @param   integer  $acmax     Maximum number of category members.     * @param   integer  $aclimit   How many categories to return.     * @param   array    $acprop    Which properties to get.     *     * @return  object     *     * @since   12.3     */	public function enumerateCategories($acfrom = null, $acto = null, $acprefix = null, $acdir = null, $acmin = null,		$acmax = null, $aclimit = null, array $acprop = null)	{		// Build the request.		$path = '?action=query&list=allcategories';		if (isset($acfrom))		{			$path .= '&acfrom=' . $acfrom;		}		if (isset($acto))		{			$path .= '&acto=' . $acto;		}		if (isset($acprefix))		{			$path .= '&acprefix=' . $acprefix;		}		if (isset($acdir))		{			$path .= '&acdir=' . $acdir;		}		if (isset($acfrom))		{			$path .= '&acfrom=' . $acfrom;		}		if (isset($acmin))		{			$path .= '&acmin=' . $acmin;		}		if (isset($acmax))		{			$path .= '&acmax=' . $acmax;		}		if (isset($aclimit))		{			$path .= '&aclimit=' . $aclimit;		}		if (isset($acprop))		{			$path .= '&acprop=' . $this->buildParameter($acprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to list change tags.     *     * @param   array   $tgprop   List of properties to get.     * @param   string  $tglimit  The maximum number of tags to limit.     *     * @return  object     *     * @since   12.3     */	public function getChangeTags(array $tgprop = null, $tglimit = null)	{		// Build the request.		$path = '?action=query&list=tags';		if (isset($tgprop))		{			$path .= '&tgprop=' . $this->buildParameter($tgprop);		}		if (isset($tglimit))		{			$path .= '&tglimit=' . $tglimit;		}		// @TODO add support for $tgcontinue		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'newsfeed.cancel' || document.formvalidator.isValid(document.id('newsfeed-form')))		{			Joomla.submitform(task, document.getElementById('newsfeed-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="newsfeed-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo empty($this->item->id) ? JText::_('COM_NEWSFEEDS_NEW_NEWSFEED') : JText::sprintf('COM_NEWSFEEDS_EDIT_NEWSFEED', $this->item->id); ?></legend>			<ul class="adminformlist">			<li><?php echo $this->form->getLabel('name'); ?>			<?php echo $this->form->getInput('name'); ?></li>   			<li><?php echo $this->form->getLabel('alias'); ?>			<?php echo $this->form->getInput('alias'); ?></li>			<li><?php echo $this->form->getLabel('link'); ?>			<?php echo $this->form->getInput('link'); ?></li>			<li><?php echo $this->form->getLabel('catid'); ?>			<?php echo $this->form->getInput('catid'); ?></li>			<li><?php echo $this->form->getLabel('published'); ?>			<?php echo $this->form->getInput('published'); ?></li>			<li><?php echo $this->form->getLabel('access'); ?>			<?php echo $this->form->getInput('access'); ?></li>			<li><?php echo $this->form->getLabel('ordering'); ?>			<?php echo $this->form->getInput('ordering'); ?></li>			<li><?php echo $this->form->getLabel('language'); ?>			<?php echo $this->form->getInput('language'); ?></li>			<!-- Tag field -->			<?php foreach ($this->get('form')->getFieldset('jmetadata') as $field) : ?>				<?php if ($field->name == 'jform[metadata][tags][]') :?>					<li>						<?php echo $field->label; ?>						<?php echo $field->input; ?>					</li>				<?php endif; ?>			<?php endforeach; ?>			<li><?php echo $this->form->getLabel('id'); ?>			<?php echo $this->form->getInput('id'); ?></li>			</ul>		</fieldset>	</div>	<div class="col options-section">		<?php echo JHtml::_('sliders.start', 'newsfeed-sliders-' . $this->item->id, array('useCookie' => 1)); ?>			<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_PUBLISHING'), 'publishing-details'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_PUBLISHING'); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('created_by'); ?>				<?php echo $this->form->getInput('created_by'); ?></li>				<li><?php echo $this->form->getLabel('created_by_alias'); ?>				<?php echo $this->form->getInput('created_by_alias'); ?></li>				<li><?php echo $this->form->getLabel('created'); ?>				<?php echo $this->form->getInput('created'); ?></li>				<li><?php echo $this->form->getLabel('publish_up'); ?>				<?php echo $this->form->getInput('publish_up'); ?></li>				<li><?php echo $this->form->getLabel('publish_down'); ?>				<?php echo $this->form->getInput('publish_down'); ?></li>				<?php if ($this->item->modified_by) : ?>					<li><?php echo $this->form->getLabel('modified_by'); ?>					<?php echo $this->form->getInput('modified_by'); ?></li>					<li><?php echo $this->form->getLabel('modified'); ?>					<?php echo $this->form->getInput('modified'); ?></li>				<?php endif; ?>				<li><?php echo $this->form->getLabel('numarticles'); ?>				<?php echo $this->form->getInput('numarticles'); ?></li>				<li><?php echo $this->form->getLabel('cache_time'); ?>				<?php echo $this->form->getInput('cache_time'); ?></li>				<li><?php echo $this->form->getLabel('rtl'); ?>				<?php echo $this->form->getInput('rtl'); ?></li>			</ul>			</fieldset>			<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'), 'meta-options'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'); ?></legend>				<?php echo $this->loadTemplate('metadata'); ?>			</fieldset>			<?php if ($assoc) : ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php endif; ?>		<?php echo JHtml::_('sliders.end'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Pathway * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Class to manage the site application pathway. * * @package     Joomla.Libraries * @subpackage  Pathway * @since       1.5 */class JPathwaySite extends JPathway{	/**	 * Class constructor.	 *	 * @param   array  $options  The class options.	 *	 * @since   1.5	 */	public function __construct($options = array())	{		$this->_pathway = array();		$app  = JApplication::getInstance('site');		$menu = $app->getMenu();		if ($item = $menu->getActive())		{			$menus = $menu->getMenu();			$home  = $menu->getDefault();			if (is_object($home) && ($item->id != $home->id))			{				foreach ($item->tree as $menupath)				{					$url = '';					$link = $menu->getItem($menupath);					switch ($link->type)					{						case 'separator':						case 'heading':							$url = null;							break;						case 'url':							if ((strpos($link->link, 'index.php?') === 0) && (strpos($link->link, 'Itemid=') === false))							{								// If this is an internal Joomla link, ensure the Itemid is set.								$url = $link->link . '&Itemid=' . $link->id;							}							else							{								$url = $link->link;							}							break;						case 'alias':							// If this is an alias use the item id stored in the parameters to make the link.							$url = 'index.php?Itemid=' . $link->params->get('aliasoptions');							break;						default:							$router = JSite::getRouter();							if ($router->getMode() == JROUTER_MODE_SEF)							{								$url = 'index.php?Itemid=' . $link->id;							}							else							{								$url .= $link->link . '&Itemid=' . $link->id;							}							break;					}					$this->addItem($menus[$menupath]->title, $url);				}			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Adsense data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataAdsense extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/adsense');		}	}	/**	 * Method to get an Adsense account's settings from Google	 *	 * @param   string   $accountID    ID of account to get	 * @param   boolean  $subaccounts  Include list of subaccounts	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getAccount($accountID, $subaccounts = true)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . ($subaccounts ? '?tree=true' : '');			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense accounts from Google	 *	 * @param   array  $options   Search settings	 * @param   int    $maxpages  Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listAccounts($options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense clients from Google	 *	 * @param   string  $accountID  ID of account to list the clients from	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listClients($accountID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an AdSense AdUnit	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $adunitID    ID of adunit to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getUnit($accountID, $adclientID, $adunitID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels for a specific Adunit	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $adunitID    ID of adunit to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUnitChannels($accountID, $adclientID, $adunitID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID) . '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an Adsense Channel	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $channelID   ID of channel to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getChannel($accountID, $adclientID, $channelID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/';			$url .= urlencode($adclientID) . '/customchannels/' . urlencode($channelID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Adunits for a specific Custom Channel	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $channelID   ID of channel to list units from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannelUnits($accountID, $adclientID, $channelID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels/' . urlencode($channelID) . '/adunits?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to generate a report from Google AdSense	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUrlChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/urlchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Channel URLs	 *	 * @param   string  $accountID  ID of account	 * @param   mixed   $start      Start day	 * @param   mixed   $end        End day	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function generateReport($accountID, $start, $end = false, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			if (is_int($start))			{				$startobj = new DateTime;				$startobj->setTimestamp($start);			}			elseif (is_string($start))			{				$startobj = new DateTime($start);			}			elseif (is_a($start, 'DateTime'))			{				$startobj = $start;			}			else			{				throw new InvalidArgumentException('Invalid start time.');			}			if (!$end)			{				$endobj = new DateTime;			}			elseif (is_int($end))			{				$endobj = new DateTime;				$endobj->setTimestamp($end);			}			elseif (is_string($end))			{				$endobj = new DateTime($end);			}			elseif (is_a($end, 'DateTime'))			{				$endobj = $end;			}			else			{				throw new InvalidArgumentException('Invalid end time.');			}			$options['startDate'] = $startobj->format('Y-m-d');			$options['endDate'] = $endobj->format('Y-m-d');			$begin = array_key_exists('startIndex', $options) ? $options['startIndex'] : 0;			unset($options['startIndex']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/reports?' . http_build_query($options);			if (strpos($url, '&'))			{				$url .= '&';			}			$i = 0;			$data['rows'] = array();			do			{				$jdata = $this->query($url . 'startIndex=' . count($data['rows']));				$newdata = json_decode($jdata->body, true);				if ($newdata && array_key_exists('rows', $newdata))				{					$newdata['rows'] = array_merge($data['rows'], $newdata['rows']);					$data = $newdata;				}				else				{					throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");				}				$i++;			}			while (count($data['rows']) < $data['totalMatchedRows'] && $i < $maxpages);			return $data;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Registration controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerUser extends UsersController{	/**	 * Method to log in a user.	 *	 * @since   1.6	 */	public function login()	{		JSession::checkToken('post') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		// Populate the data array:		$data = array();		$data['return'] = base64_decode($app->input->post->get('return', '', 'BASE64'));		$data['username'] = JRequest::getVar('username', '', 'method', 'username');		$data['password'] = JRequest::getString('password', '', 'post', JREQUEST_ALLOWRAW);		// Set the return URL if empty.		if (empty($data['return']))		{			$data['return'] = 'index.php?option=com_users&view=profile';		}		// Set the return URL in the user state to allow modification by plugins		$app->setUserState('users.login.form.return', $data['return']);		// Get the log in options.		$options = array();		$options['remember'] = $this->input->getBool('remember', false);		$options['return'] = $data['return'];		// Get the log in credentials.		$credentials = array();		$credentials['username'] = $data['username'];		$credentials['password'] = $data['password'];		// Perform the log in.		if (true === $app->login($credentials, $options))		{			// Success			$app->setUserState('users.login.form.data', array());			$app->redirect(JRoute::_($app->getUserState('users.login.form.return'), false));		}		else		{			// Login failed !			$data['remember'] = (int) $options['remember'];			$app->setUserState('users.login.form.data', $data);			$app->redirect(JRoute::_('index.php?option=com_users&view=login', false));		}	}	/**	 * Method to log out a user.	 *	 * @since   1.6	 */	public function logout()	{		JSession::checkToken('request') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		// Perform the log in.		$error = $app->logout();		// Check if the log out succeeded.		if (!($error instanceof Exception))		{			// Get the return url from the request and validate that it is internal.			$return = JRequest::getVar('return', '', 'method', 'base64');			$return = base64_decode($return);			if (!JURI::isInternal($return))			{				$return = '';			}			// Redirect the user.			$app->redirect(JRoute::_($return, false));		}		else		{			$app->redirect(JRoute::_('index.php?option=com_users&view=login', false));		}	}	/**	 * Method to register a user.	 *	 * @since   1.6	 */	public function register()	{		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		// Get the form data.		$data  = $this->input->post->get('user', array(), 'array');		// Get the model and validate the data.		$model  = $this->getModel('Registration', 'UsersModel');		$return	= $model->validate($data);		// Check for errors.		if ($return === false)		{			// Get the validation messages.			$app	= &JFactory::getApplication();			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'notice');				} else {					$app->enqueueMessage($errors[$i], 'notice');				}			}			// Save the data in the session.			$app->setUserState('users.registration.form.data', $data);			// Redirect back to the registration form.			$this->setRedirect('index.php?option=com_users&view=registration');			return false;		}		// Finish the registration.		$return	= $model->register($data);		// Check for errors.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('users.registration.form.data', $data);			// Redirect back to the registration form.			$message = JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $model->getError());			$this->setRedirect('index.php?option=com_users&view=registration', $message, 'error');			return false;		}		// Flush the data from the session.		$app->setUserState('users.registration.form.data', null);		exit;	}	/**	 * Method to login a user.	 *	 * @since   1.6	 */	public function remind()	{		// Check the request token.		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('User', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Submit the username remind request.		$return	= $model->processRemindRequest($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_REMIND_REQUEST_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=remind'.$itemid;			// Go back to the complete form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// Complete failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=remind'.$itemid;			// Go back to the complete form.			$message = JText::sprintf('COM_USERS_REMIND_REQUEST_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// Complete succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getLoginRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=login'.$itemid;			// Proceed to the login form.			$message = JText::_('COM_USERS_REMIND_REQUEST_SUCCESS');			$this->setRedirect(JRoute::_($route, false), $message);			return true;		}	}	/**	 * Method to login a user.	 *	 * @since   1.6	 */	public function resend()	{		// Check for request forgeries		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Newsfeeds component * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.0 */class NewsfeedsViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $categories;	protected $pagination;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Check whether category access level allows access.		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Prepare the data.		// Compute the newsfeed slug.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			$temp		= new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		$children = array($category->id => $children);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$maxLevel = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $this->category->id) === false)))		{			if ($layout = $category->params->get('category_layout'))		{			$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$this->category->tags = new JHelperTags;		$this->category->tags->getItemTags('com_newsfeeds.category', $this->category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_NEWSFEEDS_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_newsfeeds' || $menu->query['view'] == 'newsfeed' || $id != $this->category->id))		{			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_newsfeeds' || $menu->query['view'] == 'newsfeed' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => NewsfeedsHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');require_once __DIR__ . '/../../helpers/banners.php';/** * Bannerclient Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldBannerClient extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'BannerClient';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	public function getOptions()	{		return BannersHelper::getClientOptions();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentControllerFeatured extends ContentControllerArticles{	/**	 * Removes an item	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user = JFactory::getUser();		$ids  = $this->input->get('cid', array(), 'array');		// Access checks.		foreach ($ids as $i => $id)		{			if (!$user->authorise('core.delete', 'com_content.article.'.(int) $id))			{				// Prune items that you can't delete.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Remove the items.			if (!$model->featured($ids, 0))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_content&view=featured');	}	/**	 * Method to publish a list of articles.	 *	 * @return  void	 * @since   1.0	 */	public function publish()	{		parent::publish();		$this->setRedirect('index.php?option=com_content&view=featured');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Feature', $prefix = 'ContentModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include __DIR__ . '/component.php';
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Media component * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.0 */class MediaViewImagesList extends JViewLegacy{	public function display($tpl = null)	{		// Do not allow cache		JResponse::allowCache(false);		$app = JFactory::getApplication();		$lang	= JFactory::getLanguage();		JHtml::_('stylesheet', 'media/popup-imagelist.css', array(), true);		if ($lang->isRTL()) :			JHtml::_('stylesheet', 'media/popup-imagelist_rtl.css', array(), true);		endif;		$document = JFactory::getDocument();		$document->addScriptDeclaration("var ImageManager = window.parent.ImageManager;");		$images = $this->get('images');		$folders = $this->get('folders');		$state = $this->get('state');		$this->baseURL = COM_MEDIA_BASEURL;		$this->images = &$images;		$this->folders = &$folders;		$this->state = &$state;		parent::display($tpl);	}	function setFolder($index = 0)	{		if (isset($this->folders[$index]))		{			$this->_tmp_folder = &$this->folders[$index];		}		else		{			$this->_tmp_folder = new JObject;		}	}	function setImage($index = 0)	{		if (isset($this->images[$index]))		{			$this->_tmp_img = &$this->images[$index];		}		else		{			$this->_tmp_img = new JObject;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories Component Category Model * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesModelCategory extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_CATEGORIES';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 *	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return $user->authorise('core.delete', $record->extension . '.category.' . (int) $record->id);		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 *	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check for existing category.		if (!empty($record->id))		{			return $user->authorise('core.edit.state', $record->extension . '.category.' . (int) $record->id);		}		// New category, so check against the parent.		elseif (!empty($record->parent_id))		{			return $user->authorise('core.edit.state', $record->extension . '.category.' . (int) $record->parent_id);		}		// Default to component settings if neither category nor parent known.		else		{			return $user->authorise('core.edit.state', $record->extension);		}	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   1.6	 */	public function getTable($type = 'Category', $prefix = 'CategoriesTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		$parentId = $app->input->getInt('parent_id');		$this->setState('category.parent_id', $parentId);		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState($this->getName() . '.id', $pk);		$extension = $app->input->get('extension', 'com_content');		$this->setState('category.extension', $extension);		$parts = explode('.', $extension);		// Extract the component name		$this->setState('category.component', $parts[0]);		// Extract the optional section name		$this->setState('category.section', (count($parts) > 1) ? $parts[1] : null);		// Load the parameters.		$params = JComponentHelper::getParams('com_categories');		$this->setState('params', $params);	}	/**	 * Method to get a category.	 *	 * @param   integer  $pk  An optional id of the object to get, otherwise the id from the model state is used.	 *	 * @return  mixed  Category data object on success, false on failure.	 *	 * @since   1.6	 */	public function getItem($pk = null)	{		if ($result = parent::getItem($pk))		{			// Prime required properties.			if (empty($result->id))			{				$result->parent_id = $this->getState('category.parent_id');				$result->extension = $this->getState('category.extension');			}			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($result->metadata);			$result->metadata = $registry->toArray();			// Convert the created and modified dates to local user time for display in the form.			$tz = new DateTimeZone(JFactory::getApplication()->getCfg('offset'));			if ((int) $result->created_time)			{				$date = new JDate($result->created_time);				$date->setTimezone($tz);				$result->created_time = $date->toSql(true);			}			else			{				$result->created_time = null;			}			if ((int) $result->modified_time)			{				$date = new JDate($result->modified_time);				$date->setTimezone($tz);				$result->modified_time = $date->toSql(true);			}			else			{				$result->modified_time = null;			}			if (!empty($result->id))			{				$db = JFactory::getDbo();				$result->tags = new JHelperTags;				$result->tags->getTagIds($result->id, $result->extension . '.category');				$result->metadata['tags'] = $result->tags;			}		}		$app = JFactory::getApplication();		$assoc = $this->getAssoc();		if ($assoc)		{			if ($result->id != null)			{				$result->associations = CategoriesHelper::getAssociations($result->id, $result->extension);				JArrayHelper::toInteger($result->associations);			}			else			{				$result->associations = array();			}		}		return $result;	}	/**	 * Method to get the row form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$extension = $this->getState('category.extension');		$jinput = JFactory::getApplication()->input;		// A workaround to get the extension into the model for save requests.		if (empty($extension) && isset($data['extension']))		{			$extension = $data['extension'];			$parts = explode('.', $extension);			$this->setState('category.extension', $extension);			$this->setState('category.component', $parts[0]);			$this->setState('category.section', @$parts[1]);		}		// Get the form.		$form = $this->loadForm('com_categories.category' . $extension, 'category', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on Edit State access controls.		if (empty($data['extension']))		{			$data['extension'] = $extension;		}		$user = JFactory::getUser();		if (!$user->authorise('core.edit.state', $extension . '.category.' . $jinput->get('id')))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * A protected method to get the where clause for the reorder	 * This ensures that the row will be moved relative to a row with the same extension	 *	 * @param   JCategoryTable  $table  Current table instance	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 *	 * @since   1.6	 */	protected function getReorderConditions($table)	{		return 'extension = ' . $this->_db->quote($table->extension);	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_categories.edit.' . $this->getName() . '.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_categories.category', $data);		return $data;	}	/**	 * Method to preprocess the form.	 *	 * @param   JForm   $form    A JForm object.	 * @param   mixed   $data    The data expected for the form.	 * @param   string  $group   The name of the plugin group to import.	 *	 * @return  void	 *	 * @see     JFormField	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		jimport('joomla.filesystem.path');		$lang = JFactory::getLanguage();		$extension = $this->getState('category.extension');		$component = $this->getState('category.component');		$section = $this->getState('category.section');		// Get the component form if it exists		$name = 'category' . ($section ? ('.' . $section) : '');		// Looking first in the component models/forms folder		$path = JPath::clean(JPATH_ADMINISTRATOR . "/components/$component/models/forms/$name.xml");		// Old way: looking in the component folder		if (!file_exists($path))		{			$path = JPath::clean(JPATH_ADMINISTRATOR . "/components/$component/$name.xml");		}		if (file_exists($path))		{			$lang->load($component, JPATH_BASE, null, false, false);			$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false);			$lang->load($component, JPATH_BASE . '/components/' . $component, null, false, false);			$lang->load($component, JPATH_BASE . '/components/' . $component, $lang->getDefault(), false, false);			if (!$form->loadFile($path, false))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Try to find the component helper.		$eName = str_replace('com_', '', $component);		$path = JPath::clean(JPATH_ADMINISTRATOR . "/components/$component/helpers/category.php");		if (file_exists($path))		{			require_once $path;			$cName = ucfirst($eName) . ucfirst($section) . 'HelperCategory';			if (class_exists($cName) && is_callable(array($cName, 'onPrepareForm')))			{				$lang->load($component, JPATH_BASE, null, false, false) || $lang->load($component, JPATH_BASE . '/components/' . $component, null, false, false) || $lang->load($component, JPATH_BASE, $lang->getDefault(), false, false) || $lang->load($component, JPATH_BASE . '/components/' . $component, $lang->getDefault(), false, false);				call_user_func_array(array($cName, 'onPrepareForm'), array(&$form));				// Check for an error.				if ($form instanceof Exception)				{					$this->setError($form->getMessage());					return false;				}			}		}		// Set the access control rules field component value.		$form->setFieldAttribute('rules', 'component', $component);		$form->setFieldAttribute('rules', 'section', $name);		// Association category items		$app = JFactory::getApplication();		$assoc = $this->getAssoc();		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			// Force to array (perhaps move to $this->loadFormData())			$data = (array) $data;			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_CATEGORIES_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if (empty($data['language']) || $tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'categoryedit');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');					$option = $field->addChild('option', 'COM_CATEGORIES_ITEM_FIELD_ASSOCIATION_NO_VALUE');					$option->addAttribute('value', '');				}			}			if ($add)			{				$form->load($addform, false);			}		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$input = JFactory::getApplication()->input;		$pk = (!empty($data['id'])) ? $data['id'] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Load the row if saving an existing category.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		// Set the new parent id if parent id not matched OR while New/Save as Copy .		if ($table->parent_id != $data['parent_id'] || $data['id'] == 0)		{			$table->setLocation($data['parent_id'], 'last-child');		}		// Alter the title for save as copy		if ($input->get('task') == 'save2copy')		{			list($title, $alias) = $this->generateNewTitle($data['parent_id'], $data['alias'], $data['title']);			$data['title'] = $title;			$data['alias'] = $alias;			$data['published'] = 0;		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Bind the rules.		if (isset($data['rules']))		{			$rules = new JAccessRules($data['rules']);			$table->setRules($rules);		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onContentBeforeSave event.		$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		$app = JFactory::getApplication();		$assoc = $this->getAssoc();		if ($assoc)		{			// Adding self to the association			$associations = $data['associations'];			foreach ($associations as $tag => $id)			{				if (empty($id))				{					unset($associations[$tag]);				}			}			// Detecting all item menus			$all_language = $table->language == '*';			if ($all_language && !empty($associations))			{				JError::raiseNotice(403, JText::_('COM_CATEGORIES_ERROR_ALL_LANGUAGE_ASSOCIATED'));			}			$associations[$table->language] = $table->id;			// Deleting old association for these items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->delete('#__associations')				->where($db->quoteName('context') . ' = ' . $db->quote('com_categories.item'))				->where($db->quoteName('id') . ' IN (' . implode(',', $associations) . ')');			$db->setQuery($query);			$db->execute();			if ($error = $db->getErrorMsg())			{				$this->setError($error);				return false;			}			if (!$all_language && count($associations))			{				// Adding new association for these items				$key = md5(json_encode($associations));				$query->clear()					->insert('#__associations');				foreach ($associations as $tag => $id)				{					$query->values($id . ',' . $db->quote('com_categories.item') . ',' . $db->quote($key));				}				$db->setQuery($query);				$db->execute();				if ($error = $db->getErrorMsg())				{					$this->setError($error);					return false;				}			}		}		// Trigger the onContentAfterSave event.		$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, &$table, $isNew));		// Rebuild the path for the category:		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		// Rebuild the paths of the category's children:		if (!$table->rebuild($table->id, $table->lft, $table->level, $table->path))		{			$this->setError($table->getError());			return false;		}		$this->setState($this->getName() . '.id', $table->id);		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks    A list of the primary keys to change.	 * @param   integer  $value   The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish(&$pks, $value = 1)	{		if (parent::publish($pks, $value))		{			$dispatcher = JEventDispatcher::getInstance();			$extension = JFactory::getApplication()->input->get('extension');			// Include the content plugins for the change of category state event.			JPluginHelper::importPlugin('content');			// Trigger the onCategoryChangeState event.			$dispatcher->trigger('onCategoryChangeState', array($extension, $pks, $value));			return true;		}	}	/**	 * Method rebuild the entire nested set tree.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   1.6	 */	public function rebuild()	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Method to save the reordered nested set tree.	 * First we save the new order values in the lft values of the changed ids.	 * Then we invoke the table rebuild to implement the new ordering.	 *	 * @param   array    $idArray    An array of primary key ids.	 * @param   integer  $lft_array  The lft value	 *	 * @return  boolean  False on failure or error, True otherwise	 *	 * @since   1.6	 */	public function saveorder($idArray = null, $lft_array = null)	{		// Get an instance of the table object.		$table = $this->getTable();		if (!$table->saveorder($idArray, $lft_array))		{			$this->setError($table->getError());			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy categories to a new category.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   1.6	 */	protected function batchCopy($value, $pks, $contexts)	{		// $value comes as {parent_id}.{extension}		$parts = explode('.', $value);		$parentId = (int) JArrayHelper::getValue($parts, 0, 1);		$table = $this->getTable();		$db = $this->getDbo();		$user = JFactory::getUser();		$extension = JFactory::getApplication()->input->get('extension', '', 'word');		$i = 0;		// Check that the parent exists		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}			// Check that user has create permission for parent category			$canCreate = ($parentId == $table->getRootId()) ? $user->authorise('core.create', $extension) : $user->authorise('core.create', $extension . '.category.' . $parentId);			if (!$canCreate)			{				// Error since user cannot create in parent category				$this->setError(JText::_('COM_CATEGORIES_BATCH_CANNOT_CREATE'));				return false;			}		}		// If the parent is 0, set it to the ID of the root item in the tree		if (empty($parentId))		{			if (!$parentId = $table->getRootId())			{				$this->setError($db->getErrorMsg());				return false;			}			// Make sure we can create in root			elseif (!$user->authorise('core.create', $extension))			{				$this->setError(JText::_('COM_CATEGORIES_BATCH_CANNOT_CREATE'));				return false;			}		}		// We need to log the parent ID		$parents = array();		// Calculate the emergency stop count as a precaution against a runaway loop bug		$query = $db->getQuery(true)			->select('COUNT(id)')			->from($db->quoteName('#__categories'));		$db->setQuery($query);		try		{			$count = $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Parent exists so we let's proceed		while (!empty($pks) && $count > 0)		{			// Pop the first id off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Copy is a bit tricky, because we also need to copy the children			$query->clear()				->select('id')				->from($db->quoteName('#__categories'))				->where('lft > ' . (int) $table->lft)				->where('rgt < ' . (int) $table->rgt);			$db->setQuery($query);			$childIds = $db->loadColumn();			// Add child ID's to the array only if they aren't already there.			foreach ($childIds as $childId)			{				if (!in_array($childId, $pks))				{					array_push($pks, $childId);				}			}			// Make a copy of the old ID and Parent ID			$oldId = $table->id;			$oldParentId = $table->parent_id;			// Reset the id because we are making a copy.			$table->id = 0;			// If we a copying children, the Old ID will turn up in the parents list			// otherwise it's a new top level item			$table->parent_id = isset($parents[$oldParentId]) ? $parents[$oldParentId] : $parentId;			// Set the new location in the tree for the node.			$table->setLocation($table->parent_id, 'last-child');			// TODO: Deal with ordering?			// $table->ordering	= 1;			$table->level = null;			$table->asset_id = null;			$table->lft = null;			$table->rgt = null;			// Alter the title & alias			list($title, $alias) = $this->generateNewTitle($table->parent_id, $table->alias, $table->title);			$table->title = $title;			$table->alias = $alias;			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;			// Now we log the old 'parent' to the new 'parent'			$parents[$oldId] = $table->id;			$count--;		}		// Rebuild the hierarchy.		if (!$table->rebuild())		{			$this->setError($table->getError());			return false;		}		// Rebuild the tree path.		if (!$table->rebuildPath($table->id))		{			$this->setError($table->getError());			return false;		}		return $newIds;	}	/**	 * Batch move categories to a new category.	 *	 * @param   integer  $value     The new category ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	protected function batchMove($value, $pks, $contexts)	{		$parentId = (int) $value;		$table = $this->getTable();		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$extension = JFactory::getApplication()->input->get('extension', '', 'word');		// Check that the parent exists.		if ($parentId)		{			if (!$table->load($parentId))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Non-fatal error					$this->setError(JText::_('JGLOBAL_BATCH_MOVE_PARENT_NOT_FOUND'));					$parentId = 0;				}			}			// Check that user has create permission for parent category			$canCreate = ($parentId == $table->getRootId()) ? $user->authorise('core.create', $extension) : $user->authorise('core.create', $extension . '.category.' . $parentId);			if (!$canCreate)			{				// Error since user cannot create in parent category				$this->setError(JText::_('COM_CATEGORIES_BATCH_CANNOT_CREATE'));				return false;			}			// Check that user has edit permission for every category being moved			// Note that the entire batch operation fails if any category lacks edit permission			foreach ($pks as $pk)			{				if (!$user->authorise('core.edit', $extension . '.category.' . $pk))				{					// Error since user cannot edit this category					$this->setError(JText::_('COM_CATEGORIES_BATCH_CANNOT_EDIT'));					return false;				}			}		}		// We are going to store all the children and just move the category		$children = array();		// Parent exists so we let's proceed		foreach ($pks as $pk)		{			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JGLOBAL_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Set the new location in the tree for the node.			$table->setLocation($parentId, 'last-child');			// Check if we are moving to a different parent			if ($parentId != $table->parent_id)			{				// Add the child node ids to the children array.				$query->clear()					->select('id')					->from($db->quoteName('#__categories'))					->where($db->quoteName('lft') . ' BETWEEN ' . (int) $table->lft . ' AND ' . (int) $table->rgt);				$db->setQuery($query);				try				{					$children = array_merge($children, (array) $db->loadColumn());				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Rebuild the tree path.			if (!$table->rebuildPath())			{				$this->setError($table->getError());				return false;			}		}		// Process the child rows		if (!empty($children))		{			// Remove any duplicates and sanitize ids.			$children = array_unique($children);			JArrayHelper::toInteger($children);		}		return true;	}	/**	 * Custom clean the cache of com_content and content modules	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		$extension = JFactory::getApplication()->input->get('extension');		switch ($extension)		{			case 'com_content':				parent::cleanCache('com_content');				parent::cleanCache('mod_articles_archive');				parent::cleanCache('mod_articles_categories');				parent::cleanCache('mod_articles_category');				parent::cleanCache('mod_articles_latest');				parent::cleanCache('mod_articles_news');				parent::cleanCache('mod_articles_popular');				break;			default:				parent::cleanCache($extension);				break;		}	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   1.7	 */	protected function generateNewTitle($parent_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'parent_id' => $parent_id)))		{			$title = JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}	public function getAssoc()	{		static $assoc = null;		if (!is_null($assoc))		{			return $assoc;		}		$app = JFactory::getApplication();		$extension = $this->getState('category.extension');		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		$extension = explode('.', $extension);		$component = array_shift($extension);		$cname = str_replace('com_', '', $component);		if (!$assoc || !$component || !$cname)		{			$assoc = false;		}		else		{			$hname = $cname . 'HelperAssociation';			JLoader::register($hname, JPATH_SITE . '/components/' . $component . '/helpers/association.php');			$assoc = class_exists($hname) && !empty($hname::$category_association);		}		return $assoc;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds component helper. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsHelper{	public static $extension = 'com_newsfeeds';	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_NEWSFEEDS_SUBMENU_NEWSFEEDS'),			'index.php?option=com_newsfeeds&view=newsfeeds',			$vName == 'newsfeeds'		);		JHtmlSidebar::addEntry(			JText::_('COM_NEWSFEEDS_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_newsfeeds',			$vName == 'categories'		);		if ($vName == 'categories')		{			JToolbarHelper::title(				JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', JText::_('com_newsfeeds')),				'newsfeeds-categories');		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 *	 * @return  JObject	 */	public static function getActions($categoryId = 0, $newsfeedId = 0)	{		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($categoryId))		{			$assetName = 'com_newsfeeds';			$level = 'component';		}		else		{			$assetName = 'com_newsfeeds.category.'.(int) $categoryId;			$level = 'category';		}		$actions = JAccess::getActions('com_newsfeeds', $level);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API Elements class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmapElements extends JOpenstreetmapObject{	/**	 * Method to create a node	 * 	 * @param   int    $changeset  change set id	 * @param   float  $latitude   latitude of the node	 * @param   float  $longitude  longitude of the node	 * @param   arary  $tags       array of tags for a node	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 */	public function createNode($changeset,$latitude,$longitude,$tags)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'node/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$tag_list = "";		// Create XML node		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<node changeset="' . $changeset . '" lat="' . $latitude . '" lon="' . $longitude . '">'				. $tag_list .				'</node>				</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to create a way	 * 	 * @param   int    $changeset  change set id	 * @param   array  $tags       array of tags for a way	 * @param   array  $nds        node ids to refer	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 */	public function createWay($changeset,$tags,$nds)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'way/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$tag_list = "";		// Create XML node		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		$nd_list = "";		if (!empty($nds))		{			foreach ($nds as $value)			{				$nd_list .= '<nd ref="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<way changeset="' . $changeset . '">'					. $tag_list					. $nd_list .				'</way>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to create a relation	 * 	 * @param   int    $changeset  change set id	 * @param   array  $tags       array of tags for a relation	 * @param   array  $members    array of members for a relation 	 *                             eg:$members=array(array("type"=>"node","role"=>"stop","ref"=>"123"),array("type"=>"way","ref"=>"123"))	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 */	public function createRelation($changeset,$tags,$members)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'relation/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$tag_list = "";		// Create XML node		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		// Members		$member_list = "";		if (!empty($members))		{			foreach ($members as $member)			{				if ($member['type'] == "node")				{					$member_list .= '<member type="' . $member['type'] . '" role="' . $member['role'] . '" ref="' . $member['ref'] . '"/>';				}				elseif ($member['type'] == "way")				{					$member_list .= '<member type="' . $member['type'] . '" ref="' . $member['ref'] . '"/>';				}			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<relation relation="' . $changeset . '" >'					. $tag_list					. $member_list .				'</relation>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to read an Element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function readElement($element, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to update an Element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   string  $xml      full reperentation of the element with a version number	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function updateElement($element, $xml, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = $element . '/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to delete an element [node|way|relation]	 * 	 * @param   string  $element    [node|way|relation]	 * @param   int     $id         element identifier	 * @param   int     $version    element versioln	 * @param   int     $changeset  changeset identifier	 * @param   float   $latitude   latitude of the element	 * @param   float   $longitude  longitude of the element	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function deleteElement($element, $id, $version, $changeset, $latitude=null, $longitude=null)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = $element . '/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create xml		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<' . $element . ' id="' . $id . '" version="' . $version . '" changeset="' . $changeset . '"';		if (!empty($latitude) && !empty($longitude))		{			$xml .= ' lat="' . $latitude . '" lon="' . $longitude . '"';		}		$xml .= '/></osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to get history of an element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function historyOfElement($element, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/history';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to get details about a version of an element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * @param   int     $version  element version	 * 	 * @return  array    The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function versionOfElement($element, $id ,$version)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/' . $version;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to get data about multiple ids of an element [node|way|relation]	 *	 * @param   string  $element  [nodes|ways|relations] - use plural word	 * @param   string  $params   Comma separated list ids belongto type $element	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function multiFetchElements($element, $params)	{		if ($element != 'nodes' && $element != 'ways' && $element != 'relations')		{			throw new DomainException("Element should be nodes, ways or relations");		}		// Get singular word		$single_element = substr($element, 0, strlen($element) - 1);		// Set the API base, $params is a string with comma seperated values		$base = $element . '?' . $element . "=" . $params;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$single_element;	}	/**	 * Method to get relations for an Element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function relationsForElement($element, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/relations';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to get ways for a Node element	 *	 * @param   int  $id  node identifier	 * 	 * @return  array    The xml response	 * 	 * @since   13.1	 */	public function waysForNode($id)	{		// Set the API base		$base = 'node/' . $id . '/ways';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->way;	}	/**	 * Method to get full information about an element [way|relation]	 *	 * @param   string  $element  [way|relation]	 * @param   int     $id       identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function fullElement($element, $id)	{		if ($element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/full';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->node;	}	/**	 * Method used by the DWG to hide old versions of elements containing data privacy or copyright infringements	 *  	 * @param   string  $element       [node|way|relation]	 * @param   int     $id            element identifier	 * @param   int     $version       element version	 * @param   int     $redaction_id  redaction id	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function redaction($element, $id, $version, $redaction_id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = $element . '/' . $id . '/' . $version . '/redact?redaction=' . $redaction_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters);		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides a hidden field * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.hidden.html#input.hidden * @since       11.1 */class JFormFieldHidden extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Hidden';	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="hidden" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $class . $disabled . $onchange . ' />';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides and input field for e-mail addresses * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.email.html#input.email * @see         JFormRuleEmail * @since       11.1 */class JFormFieldEMail extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Email';	/**	 * Method to get the field input markup for e-mail addresses.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$size = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$maxLength = $this->element['maxlength'] ? ' maxlength="' . (int) $this->element['maxlength'] . '"' : '';		$class = $this->element['class'] ? ' ' . (string) $this->element['class'] : '';		$readonly = ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="text" name="' . $this->name . '" class="validate-email' . $class . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $size . $disabled . $readonly . $onchange . $maxLength . $required . '/>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Finder language helper class. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderHelperLanguage{	/**	 * Method to return a plural language code for a taxonomy branch.	 *	 * @param   string  Branch title.	 *	 * @return  string  Language key code.	 */	public static function branchPlural($branchName)	{		$return = preg_replace('/[^a-zA-Z0-9]+/', '_', strtoupper($branchName));		return 'PLG_FINDER_QUERY_FILTER_BRANCH_P_'.$return;	}	/**	 * Method to return a singular language code for a taxonomy branch.	 *	 * @param   string  Branch name.	 *	 * @return  string  Language key code.	 */	public static function branchSingular($branchName)	{		$return = preg_replace('/[^a-zA-Z0-9]+/', '_', strtoupper($branchName));		return 'PLG_FINDER_QUERY_FILTER_BRANCH_S_'.$return;	}	/**	 * Method to load Smart Search component language file.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function loadComponentLanguage()	{		$lang = JFactory::getLanguage();		$lang->load('com_finder', JPATH_SITE);	}	/**	 * Method to load Smart Search plug-in language files.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function loadPluginLanguage()	{		static $loaded = false;		// If already loaded, don't load again.		if ($loaded)		{			return;		}		$loaded = true;		// Get array of all the enabled Smart Search plug-in names.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('name')			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' .  $db->quote('plugin'))			->where($db->quoteName('folder') . ' = ' .  $db->quote('finder'))			->where($db->quoteName('enabled') . ' = 1');		$db->setQuery($query);		$plugins = $db->loadObjectList();		if (empty($plugins))		{			return;		}		// Load generic language strings.		$lang = JFactory::getLanguage();		$lang->load('plg_content_finder', JPATH_ADMINISTRATOR);		// Load language file for each plug-in.		foreach ($plugins as $plugin)		{			$lang->load($plugin->name, JPATH_ADMINISTRATOR);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Banner HTML class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       2.5 */abstract class JHtmlBanner{	/**	 * Display a batch widget for the client selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function clients()	{		// Create the batch selector to change the client on a selection list.		$lines = array(			'<label id="batch-client-lbl" for="batch-client" class="hasTip" title="'.JText::_('COM_BANNERS_BATCH_CLIENT_LABEL').'::'.JText::_('COM_BANNERS_BATCH_CLIENT_LABEL_DESC').'">',			JText::_('COM_BANNERS_BATCH_CLIENT_LABEL'),			'</label>',			'<select name="batch[client_id]" class="inputbox" id="batch-client-id">',			'<option value="">'.JText::_('COM_BANNERS_BATCH_CLIENT_NOCHANGE').'</option>',			'<option value="0">'.JText::_('COM_BANNERS_NO_CLIENT').'</option>',			JHtml::_('select.options', self::clientlist(), 'value', 'text'),			'</select>'		);		return implode("\n", $lines);	}	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	public static function clientlist()	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('id As value, name As text')			->from('#__banner_clients AS a')			->order('a.name');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $options;	}	/**	 * Returns a pinned state on a grid	 *	 * @param   integer       $value			The state value.	 * @param   integer       $i				The row index	 * @param   boolean       $enabled		An optional setting for access control on the action.	 * @param   string        $checkbox		An optional prefix for checkboxes.	 *	 * @return  string        The Html code	 *	 * @see JHtmlJGrid::state	 *	 * @since   2.5.5	 */	public static function pinned($value, $i, $enabled = true, $checkbox = 'cb')	{		$states	= array(			1	=> array(				'sticky_unpublish',				'COM_BANNERS_BANNERS_PINNED',				'COM_BANNERS_BANNERS_HTML_PIN_BANNER',				'COM_BANNERS_BANNERS_PINNED',				false,				'publish',				'publish'			),			0	=> array(				'sticky_publish',				'COM_BANNERS_BANNERS_UNPINNED',				'COM_BANNERS_BANNERS_HTML_UNPIN_BANNER',				'COM_BANNERS_BANNERS_UNPINNED',				false,				'unpublish',				'unpublish'			),		);		return JHtml::_('jgrid.state', $states, $value, $i, 'banners.', $enabled, true, $checkbox);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModelInstall', JPATH_ADMINISTRATOR . '/components/com_installer/models/install.php');/** * Template style controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerTemplate extends JControllerLegacy{	/**	 */	public function cancel()	{		$this->setRedirect('index.php?option=com_templates&view=templates');	}	public function copy()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$this->input->set('installtype', 'folder');		$newName    = $this->input->get('new_name');		$newNameRaw = $this->input->get('new_name', null, 'string');		$templateID = $this->input->getInt('id', 0);		$this->setRedirect('index.php?option=com_templates&view=template&id=' . $templateID);		$model = $this->getModel('Template', 'TemplatesModel');		$model->setState('new_name', $newName);		$model->setState('tmp_prefix', uniqid('template_copy_'));		$model->setState('to_path', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));		// Process only if we have a new name entered		if (strlen($newName) > 0)		{			if (!JFactory::getUser()->authorise('core.create', 'com_templates'))			{				// User is not authorised to delete				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_CREATE_NOT_PERMITTED'));				return false;			}			// Set FTP credentials, if given			JClientHelper::setCredentialsFromRequest('ftp');			// Check that new name is valid			if (($newNameRaw !== null) && ($newName !== $newNameRaw))			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_TEMPLATE_NAME'));				return false;			}			// Check that new name doesn't already exist			if (!$model->checkNewName())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_DUPLICATE_TEMPLATE_NAME'));				return false;			}			// Check that from name does exist and get the folder name			$fromName = $model->getFromName();			if (!$fromName)			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_FROM_NAME'));				return false;			}			// Call model's copy method			if (!$model->copy())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_COPY'));				return false;			}			// Call installation model			$this->input->set('install_directory', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));			$installModel = $this->getModel('Install', 'InstallerModel');			JFactory::getLanguage()->load('com_installer');			if (!$installModel->install())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_INSTALL'));				return false;			}			$this->setMessage(JText::sprintf('COM_TEMPLATES_COPY_SUCCESS', $newName));			$model->cleanup();			return true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules list controller class. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesControllerModules extends JControllerAdmin{	/**	 * Method to clone an existing module.	 * @since   1.6	 */	public function duplicate()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		JArrayHelper::toInteger($pks);		try {			if (empty($pks))			{				throw new Exception(JText::_('COM_MODULES_ERROR_NO_MODULES_SELECTED'));			}			$model = $this->getModel();			$model->duplicate($pks);			$this->setMessage(JText::plural('COM_MODULES_N_MODULES_DUPLICATED', count($pks)));		} catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_modules&view=modules');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Module', $prefix = 'ModulesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks   = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Article View class for the Weblinks component * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewForm extends JViewLegacy{	protected $form;	protected $item;	protected $return_page;	protected $state;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		// Get model data.		$this->state		= $this->get('State');		$this->item			= $this->get('Item');		$this->form			= $this->get('Form');		$this->return_page	= $this->get('ReturnPage');		if (empty($this->item->id))		{			$authorised = ($user->authorise('core.create', 'com_weblinks') || (count($user->getAuthorisedCategories('com_weblinks', 'core.create'))));		}		else		{			$authorised = $user->authorise('core.edit', 'com_weblinks.weblink.'.$this->item->id);		}		if ($authorised !== true)		{			JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			return false;		}		if (!empty($this->item))		{			$this->form->bind($this->item);		}		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Create a shortcut to the parameters.		$params	= &$this->state->params;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params	= $params;		$this->user		= $user;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if (empty($this->item->id))	{		$head = JText::_('COM_WEBLINKS_FORM_SUBMIT_WEBLINK');		}		else		{		$head = JText::_('COM_WEBLINKS_FORM_EDIT_WEBLINK');		}		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', $head);		}		$title = $this->params->def('page_title', $head);		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}			if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_templates')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}JLoader::register('TemplatesHelper', __DIR__ . '/helpers/templates.php');$controller	= JControllerLegacy::getInstance('Templates');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link model. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectModelLink extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_REDIRECT';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if ($record->published != -2)		{			return false;		}		$user = JFactory::getUser();		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check the component since there are no categories or other assets.		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Link', $prefix = 'RedirectTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_redirect.link', 'link', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if ($this->canEditState((object) $data) != true)		{			// Disable fields for display.			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_redirect.edit.link.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_redirect.link', $data);		return $data;	}	/**	 * Method to activate links.	 *	 * @param   array     An array of link ids.	 * @param   string    The new URL to set for the redirect.	 * @param   string    A comment for the redirect links.	 * @return  boolean  Returns true on success, false on failure.	 * @since   1.6	 */	public function activate(&$pks, $url, $comment = null)	{		$user = JFactory::getUser();		$db = $this->getDbo();		// Sanitize the ids.		$pks = (array) $pks;		JArrayHelper::toInteger($pks);		// Populate default comment if necessary.		$comment = (!empty($comment)) ? $comment : JText::sprintf('COM_REDIRECT_REDIRECTED_ON', JHtml::_('date', time()));		// Access checks.		if (!$user->authorise('core.admin', 'com_redirect'))		{			$pks = array();			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			return false;		}		if (!empty($pks))		{			// Update the link rows.			$query = $db->getQuery(true)				->update($db->quoteName('#__redirect_links'))				->set($db->quoteName('new_url') . ' = ' . $db->quote($url))				->set($db->quoteName('published') . ' = ' . $db->quote(1))				->set($db->quoteName('comment') . ' = ' . $db->quote($comment))				->where($db->quoteName('id') . ' IN (' . implode(',', $pks) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :			if (!isset($this->items[$this->parent->id][$id + 1]))			{				$class = ' class="last"';			}			?>			<div <?php echo $class; ?> >			<?php $class = ''; ?>				<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($item->id));?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_items_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_NEWSFEEDS_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">					<?php echo JHtml::_('content.prepare', $item->description, '', 'com_newsfeeds.categories'); ?>							<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">					<?php					$this->items[$item->id] = $item->getChildren();					$this->parent = $item;					$this->maxLevelcat--;					echo $this->loadTemplate('items');					$this->parent = $item->getParent();					$this->maxLevelcat++;					?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Plugin * @subpackage  User.contactcreator * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Class for Contact Creator * * A tool to automatically create and synchronise contacts with a user * * @package     Joomla.Plugin * @subpackage  User.contactcreator * @since       1.6 */class PlgUserContactCreator extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	public function onUserAfterSave($user, $isnew, $success, $msg)	{		if (!$success)		{			return false; // if the user wasn't stored we don't resync		}		if (!$isnew)		{			return false; // if the user isn't new we don't sync		}		// ensure the user id is really an int		$user_id = (int) $user['id'];		if (empty($user_id))		{			die('invalid userid');			return false; // if the user id appears invalid then bail out just in case		}		$category = $this->params->get('category', 0);		if (empty($category))		{			JError::raiseWarning(41, JText::_('PLG_CONTACTCREATOR_ERR_NO_CATEGORY'));			return false; // bail out if we don't have a category		}		$db = JFactory::getDbo();		// grab the contact ID for this user; note $user_id is cleaned above		$db->setQuery('SELECT id FROM #__contact_details WHERE user_id = '. $user_id);		$id = $db->loadResult();		JTable::addIncludePath(JPATH_ADMINISTRATOR.'/components/com_contact/tables');		$contact = JTable::getInstance('contact', 'ContactTable');		if (!$contact)		{			return false;		}		if ($id)		{			$contact->load($id);		}		elseif ($this->params->get('autopublish', 0))		{			$contact->published = 1;		}		$contact->name = $user['name'];		$contact->user_id = $user_id;		$contact->email_to = $user['email'];		$contact->catid = $category;		$contact->language = '*';		$autowebpage = $this->params->get('autowebpage', '');		if (!empty($autowebpage))		{			// search terms			$search_array = array('[name]', '[username]', '[userid]', '[email]');			// replacement terms, urlencoded			$replace_array = array_map('urlencode', array($user['name'], $user['username'], $user['id'], $user['email']));			// now replace it in together			$contact->webpage = str_replace($search_array, $replace_array, $autowebpage);		}		if ($contact->check())		{			$result = $contact->store();		}		if (!(isset($result)) || !$result)		{			JError::raiseError(42, JText::sprintf('PLG_CONTACTCREATOR_ERR_FAILED_UPDATE', $contact->getError()));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();JHtml::_('bootstrap.tooltip');?>		<tr>			<td class="imgTotal">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe">					<i class="icon-folder-2"></i></a>			</td>			<td class="description">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe"><?php echo $this->_tmp_folder->name; ?></a>			</td>			<td>&#160;			</td>			<td>&#160;			</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>				<a class="delete-item" target="_top" href="index.php?option=com_media&amp;task=folder.delete&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>&amp;<?php echo JSession::getFormToken(); ?>=1&amp;rm[]=<?php echo $this->_tmp_folder->name; ?>" rel="<?php echo $this->_tmp_folder->name; ?>' :: <?php echo $this->_tmp_folder->files + $this->_tmp_folder->folders; ?>"><i class="icon-remove hasTooltip" title="<?php echo JText::_('JACTION_DELETE');?>"></i></a>				<input type="checkbox" name="rm[]" value="<?php echo $this->_tmp_folder->name; ?>" />			</td>		<?php endif;?>		</tr>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_MAIL_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('mail') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// No access check.$controller	= JControllerLegacy::getInstance('Admin');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Weblink Model * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksModelCategory extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'hits', 'a.hits',				'ordering', 'a.ordering',			);		}		parent::__construct($config);	}	/**	 * The category that applies.	 *	 * @access    protected	 * @var        object	 */	protected $_category = null;	/**	 * The list of other weblink categories.	 *	 * @access    protected	 * @var        array	 */	protected $_categories = null;	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		// Convert the params field into an object, saving original in _params		foreach ($items as $item)		{			if (!isset($this->_params))			{				$params = new JRegistry;				$params->loadString($item->params);				$item->params = $params;			}			// Get the tags			$item->tags = new JHelperTags;			$item->tags->getItemTags('com_weblinks.category', $item->id);		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields from the categories.		$query->select($this->getState('list.select', 'a.*'))			->from($db->quoteName('#__weblinks') . ' AS a')			->where('a.access IN (' . $groups . ')');		// Filter by category.		if ($categoryId = $this->getState('category.id'))		{			$query->where('a.catid = ' . (int) $categoryId)				->join('LEFT', '#__categories AS c ON c.id = a.catid')				->where('c.access IN (' . $groups . ')');			//Filter by published category			$cpublished = $this->getState('filter.c.published');			if (is_numeric($cpublished))			{				$query->where('c.published = ' . (int) $cpublished);			}		}		// Join over the users for the author and modified_by names.		$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author")			->select("ua.email AS author_email")			->join('LEFT', '#__users AS ua ON ua.id = a.created_by')			->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');		// Filter by state		$state = $this->getState('filter.state');		if (is_numeric($state))		{			$query->where('a.state = ' . (int) $state);		}		// do not show trashed links on the front-end		$query->where('a.state != -2');		// Filter by start and end dates.		$nullDate = $db->quote($db->getNullDate());		$date = JFactory::getDate();		$nowDate = $db->quote($date->toSql());		if ($this->getState('filter.publish_date'))		{			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		// Filter by search in title		$search = $this->getState('list.filter');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(a.title LIKE ' . $search . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_weblinks');		// List state information		$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');		$this->setState('list.limit', $limit);		$limitstart = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $limitstart);		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		$orderCol = $app->input->get('filter_order', 'ordering');		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->input->get('filter_order_Dir', 'ASC');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$id = $app->input->get('id', 0, 'int');		$this->setState('category.id', $id);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_weblinks')) && (!$user->authorise('core.edit', 'com_weblinks')))		{			// limit to published for people who can't edit or edit.state.			$this->setState('filter.state', 1);			// Filter by start and end dates.			$this->setState('filter.publish_date', true);		}		$this->setState('filter.language', $app->getLanguageFilter());		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get category data for the current category	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   1.5	 */	public function getCategory()	{		if (!is_object($this->_item))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_num_links_cat', 1) || $params->get('show_empty_categories', 0);			$categories = JCategories::getInstance('Weblinks', $options);			$this->_item = $categories->get($this->getState('category.id', 'root'));			if (is_object($this->_item))			{				$this->_children = $this->_item->getChildren();				$this->_parent = false;				if ($this->_item->getParent())				{					$this->_parent = $this->_item->getParent();				}				$this->_rightsibling = $this->_item->getSibling();				$this->_leftsibling = $this->_item->getSibling(false);			}			else			{				$this->_children = false;				$this->_parent = false;			}		}		return $this->_item;	}	/**	 * Get the parent category	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	public function getParent()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_parent;	}	/**	 * Get the sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getLeftSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_leftsibling;	}	function &getRightSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_rightsibling;	}	/**	 * Get the child categories.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getChildren()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_children;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Indexer class supporting PostgreSQL for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.0 */class FinderIndexerDriverPostgresql extends FinderIndexer{	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	public function index($item, $format = 'html')	{		// Mark beforeIndexing in the profiler.		static::$profiler ? static::$profiler->mark('beforeIndexing') : null;		$db = JFactory::getDbo();		$nd = $db->getNullDate();		// Check if the item is in the database.		$query = $db->getQuery(true)			->select($db->quoteName('link_id') . ', ' . $db->quoteName('md5sum'))			->from($db->quoteName('#__finder_links'))			->where($db->quoteName('url') . ' = ' . $db->quote($item->url));		// Load the item  from the database.		$db->setQuery($query);		$link = $db->loadObject();		// Get the indexer state.		$state = static::getState();		// Get the signatures of the item.		$curSig = static::getSignature($item);		$oldSig = isset($link->md5sum) ? $link->md5sum : null;		// Get the other item information.		$linkId = empty($link->link_id) ? null : $link->link_id;		$isNew = empty($link->link_id) ? true : false;		// Check the signatures. If they match, the item is up to date.		if (!$isNew && $curSig == $oldSig)		{			return $linkId;		}		/*		 * If the link already exists, flush all the term maps for the item.		 * Maps are stored in 16 tables so we need to iterate through and flush		 * each table one at a time.		 */		if (!$isNew)		{			for ($i = 0; $i <= 15; $i++)			{				// Flush the maps for the link.				$query->clear()					->delete($db->quoteName('#__finder_links_terms' . dechex($i)))					->where($db->quoteName('link_id') . ' = ' . (int) $linkId);				$db->setQuery($query);				$db->execute();			}			// Remove the taxonomy maps.			FinderIndexerTaxonomy::removeMaps($linkId);		}		// Mark afterUnmapping in the profiler.		static::$profiler ? static::$profiler->mark('afterUnmapping') : null;		// Perform cleanup on the item data.		$item->publish_start_date = (int) $item->publish_start_date != 0 ? $item->publish_start_date : $nd;		$item->publish_end_date = (int) $item->publish_end_date != 0 ? $item->publish_end_date : $nd;		$item->start_date = (int) $item->start_date != 0 ? $item->start_date : $nd;		$item->end_date = (int) $item->end_date != 0 ? $item->end_date : $nd;		// Prepare the item description.		$item->description = FinderIndexerHelper::parse($item->summary);		/*		 * Now, we need to enter the item into the links table. If the item		 * already exists in the database, we need to use an UPDATE query.		 * Otherwise, we need to use an INSERT to get the link id back.		 */		if ($isNew)		{			$columnsArray = array(				$db->quoteName('url'), $db->quoteName('route'), $db->quoteName('title'), $db->quoteName('description'),				$db->quoteName('indexdate'), $db->quoteName('published'), $db->quoteName('state'), $db->quoteName('access'),				$db->quoteName('language'), $db->quoteName('type_id'), $db->quoteName('object'), $db->quoteName('publish_start_date'),				$db->quoteName('publish_end_date'), $db->quoteName('start_date'), $db->quoteName('end_date'), $db->quoteName('list_price'),				$db->quoteName('sale_price')			);			// Insert the link.			$query->clear()				->insert($db->quoteName('#__finder_links'))				->columns($columnsArray)				->values(				$db->quote($item->url) . ', '				. $db->quote($item->route) . ', '				. $db->quote($item->title) . ', '				. $db->quote($item->description) . ', '				. $query->currentTimestamp() . ', '				. '1, '				. (int) $item->state . ', '				. (int) $item->access . ', '				. $db->quote($item->language) . ', '				. (int) $item->type_id . ', '				. $db->quote(serialize($item)) . ', '				. $db->quote($item->publish_start_date) . ', '				. $db->quote($item->publish_end_date) . ', '				. $db->quote($item->start_date) . ', '				. $db->quote($item->end_date) . ', '				. (double) ($item->list_price ? $item->list_price : 0) . ', '				. (double) ($item->sale_price ? $item->sale_price : 0)			);			$db->setQuery($query);			$db->execute();			// Get the link id.			$linkId = (int) $db->insertid();		}		else		{			// Update the link.			$query->clear()				->update($db->quoteName('#__finder_links'))				->set($db->quoteName('route') . ' = ' . $db->quote($item->route))				->set($db->quoteName('title') . ' = ' . $db->quote($item->title))				->set($db->quoteName('description') . ' = ' . $db->quote($item->description))				->set($db->quoteName('indexdate') . ' = ' . $query->currentTimestamp())				->set($db->quoteName('state') . ' = ' . (int) $item->state)				->set($db->quoteName('access') . ' = ' . (int) $item->access)				->set($db->quoteName('language') . ' = ' . $db->quote($item->language))				->set($db->quoteName('type_id') . ' = ' . (int) $item->type_id)				->set($db->quoteName('object') . ' = ' . $db->quote(serialize($item)))				->set($db->quoteName('publish_start_date') . ' = ' . $db->quote($item->publish_start_date))				->set($db->quoteName('publish_end_date') . ' = ' . $db->quote($item->publish_end_date))				->set($db->quoteName('start_date') . ' = ' . $db->quote($item->start_date))				->set($db->quoteName('end_date') . ' = ' . $db->quote($item->end_date))				->set($db->quoteName('list_price') . ' = ' . (double) ($item->list_price ? $item->list_price : 0))				->set($db->quoteName('sale_price') . ' = ' . (double) ($item->sale_price ? $item->sale_price : 0))				->where('link_id = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Set up the variables we will need during processing.		$tokens = array();		$count = 0;		// Mark afterLinking in the profiler.		static::$profiler ? static::$profiler->mark('afterLinking') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		/*		 * Process the item's content. The items can customize their		 * processing instructions to define extra properties to process		 * or rearrange how properties are weighted.		 */		foreach ($item->getInstructions() as $group => $properties)		{			// Iterate through the properties of the group.			foreach ($properties as $property)			{				// Check if the property exists in the item.				if (empty($item->$property))				{					continue;				}				// Tokenize the property.				if (is_array($item->$property))				{					// Tokenize an array of content and add it to the database.					foreach ($item->$property as $ip)					{						// If the group is path, we need to a few extra processing						// steps to strip the extension and convert slashes and dashes						// to spaces.						if ($group === static::PATH_CONTEXT)						{							$ip = JFile::stripExt($ip);							$ip = str_replace('/', ' ', $ip);							$ip = str_replace('-', ' ', $ip);						}						// Tokenize a string of content and add it to the database.						$count += $this->tokenizeToDB($ip, $group, $item->language, $format);						// Check if we're approaching the memory limit of the token table.						if ($count > static::$state->options->get('memory_table_limit', 30000))						{							$this->toggleTables(false);						}					}				}				else				{					// If the group is path, we need to a few extra processing					// steps to strip the extension and convert slashes and dashes					// to spaces.					if ($group === static::PATH_CONTEXT)					{						$item->$property = JFile::stripExt($item->$property);						$item->$property = str_replace('/', ' ', $item->$property);						$item->$property = str_replace('-', ' ', $item->$property);					}					// Tokenize a string of content and add it to the database.					$count += $this->tokenizeToDB($item->$property, $group, $item->language, $format);					// Check if we're approaching the memory limit of the token table.					if ($count > static::$state->options->get('memory_table_limit', 30000))					{						$this->toggleTables(false);					}				}			}		}		/*		 * Process the item's taxonomy. The items can customize their		 * taxonomy mappings to define extra properties to map.		 */		foreach ($item->getTaxonomy() as $branch => $nodes)		{			// Iterate through the nodes and map them to the branch.			foreach ($nodes as $node)			{				// Add the node to the tree.				$nodeId = FinderIndexerTaxonomy::addNode($branch, $node->title, $node->state, $node->access);				// Add the link => node map.				FinderIndexerTaxonomy::addMap($linkId, $nodeId);				// Tokenize the node title and add them to the database.				$count += $this->tokenizeToDB($node->title, static::META_CONTEXT, $item->language, $format);			}		}		// Mark afterProcessing in the profiler.		static::$profiler ? static::$profiler->mark('afterProcessing') : null;		/*		 * At this point, all of the item's content has been parsed, tokenized		 * and inserted into the #__finder_tokens table. Now, we need to		 * aggregate all the data into that table into a more usable form. The		 * aggregated data will be inserted into #__finder_tokens_aggregate		 * table.		 */		$query	= 'INSERT INTO ' . $db->quoteName('#__finder_tokens_aggregate') .				' (' . $db->quoteName('term_id') .				', ' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('term_weight') .				', ' . $db->quoteName('context') .				', ' . $db->quoteName('context_weight') .				', ' . $db->quoteName('language') . ')' .				' SELECT' .				' t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context,' .				' ROUND( t1.weight * COUNT( t2.term ) * %F, 8 ) AS context_weight, t1.language' .				' FROM (' .				'   SELECT DISTINCT t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				'   FROM ' . $db->quoteName('#__finder_tokens') . ' AS t1' .				'   WHERE t1.context = %d' .				' ) AS t1' .				' JOIN ' . $db->quoteName('#__finder_tokens') . ' AS t2 ON t2.term = t1.term' .				' LEFT JOIN ' . $db->quoteName('#__finder_terms') . ' AS t ON t.term = t1.term' .				' WHERE t2.context = %d' .				' GROUP BY t1.term, t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				' ORDER BY t1.term DESC';		// Iterate through the contexts and aggregate the tokens per context.		foreach ($state->weights as $context => $multiplier)		{			// Run the query to aggregate the tokens for this context..			$db->setQuery(sprintf($query, $multiplier, $context, $context));			$db->execute();		}		// Mark afterAggregating in the profiler.		static::$profiler ? static::$profiler->mark('afterAggregating') : null;		/*		 * When we pulled down all of the aggregate data, we did a LEFT JOIN		 * over the terms table to try to find all the term ids that		 * already exist for our tokens. If any of the rows in the aggregate		 * table have a term of 0, then no term record exists for that		 * term so we need to add it to the terms table.		 */		/* Emulation of IGNORE INTO behaviour */		$db->setQuery(			' SELECT ta.term' .			' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .			' WHERE ta.term_id = 0'		);		if ($db->loadRow() == null)		{			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_terms') .				' (' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('weight') .				', ' . $db->quoteName('soundex') .				', ' . $db->quoteName('language') . ')' .				' SELECT ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term), ta.language' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .				' WHERE ta.term_id = 0' .				' GROUP BY ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term), ta.language'			);			$db->execute();		}		/*		 * Now, we just inserted a bunch of new records into the terms table		 * so we need to go back and update the aggregate table with all the		 * new term ids.		 */		$query = $db->getQuery(true)			->update($db->quoteName('#__finder_tokens_aggregate') . ' AS ta')			->join('INNER', $db->quoteName('#__finder_terms') . ' AS t ON t.term = ta.term')			->set('ta.term_id = t.term_id')			->where('ta.term_id = 0');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * After we've made sure that all of the terms are in the terms table		 * and the aggregate table has the correct term ids, we need to update		 * the links counter for each term by one.		 */		$query->clear()			->update($db->quoteName('#__finder_terms') . ' AS t')			->join('INNER', $db->quoteName('#__finder_tokens_aggregate') . ' AS ta ON ta.term_id = t.term_id')			->set('t.' . $db->quoteName('links') . ' = t.links + 1');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * Before we can insert all of the mapping rows, we have to figure out		 * which mapping table the rows need to be inserted into. The mapping		 * table for each term is based on the first character of the md5 of		 * the first character of the term. In php, it would be expressed as		 * substr(md5(substr($token, 0, 1)), 0, 1)		 */		$query->clear()			->update($db->quoteName('#__finder_tokens_aggregate'))			->set($db->quoteName('map_suffix') . ' = SUBSTR(MD5(SUBSTR(' . $db->quoteName('term') . ', 1, 1)), 1, 1)');		$db->setQuery($query);		$db->execute();		/*		 * At this point, the aggregate table contains a record for each		 * term in each context. So, we're going to pull down all of that		 * data while grouping the records by term and add all of the		 * sub-totals together to arrive at the final total for each token for		 * this link. Then, we insert all of that data into the appropriate		 * mapping table.		 */		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			/*			 * We have to run this query 16 times, one for each link => term			 * mapping table.			 */			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_links_terms' . $suffix) .				' (' . $db->quoteName('link_id') .				', ' . $db->quoteName('term_id') .				', ' . $db->quoteName('weight') . ')' .				' SELECT ' . (int) $linkId . ', ' . $db->quoteName('term_id') . ',' .				' ROUND(SUM(' . $db->quoteName('context_weight') . '), 8)' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') .				' WHERE ' . $db->quoteName('map_suffix') . ' = ' . $db->quote($suffix) .				' GROUP BY ' . $db->quoteName('term') .				' ORDER BY ' . $db->quoteName('term') . ' DESC'			);			$db->execute();		}		// Mark afterMapping in the profiler.		static::$profiler ? static::$profiler->mark('afterMapping') : null;		// Update the signature.		$query->clear()			->update($db->quoteName('#__finder_links'))			->set($db->quoteName('md5sum') . ' = ' . $db->quote($curSig))			->where($db->quoteName('link_id') . ' = ' . $db->quote($linkId));		$db->setQuery($query);		$db->execute();		// Mark afterSigning in the profiler.		static::$profiler ? static::$profiler->mark('afterSigning') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		// Toggle the token tables back to memory tables.		$this->toggleTables(true);		// Mark afterTruncating in the profiler.		static::$profiler ? static::$profiler->mark('afterTruncating') : null;		return $linkId;	}	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function remove($linkId)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get the indexer state.		$state = static::getState();		// Update the link counts and remove the mapping records.		for ($i = 0; $i <= 15; $i++)		{			// Update the link counts for the terms.			$query->update($db->quoteName('#__finder_terms') . ' AS t')				->join('INNER', $db->quoteName('#__finder_links_terms' . dechex($i)) . ' AS m ON m.term_id = t.term_id')				->set('t.links = t.links - 1')				->where('m.link_id = ' . $db->quote((int) $linkId));			$db->setQuery($query);			$db->execute();			// Remove all records from the mapping tables.			$query->clear()				->delete($db->quoteName('#__finder_links_terms' . dechex($i)))				->where($db->quoteName('link_id') . ' = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Delete all orphaned terms.		$query->clear()			->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Delete the link from the index.		$query->clear()			->delete($db->quoteName('#__finder_links'))			->where($db->quoteName('link_id') . ' = ' . $db->quote((int) $linkId));		$db->setQuery($query);		$db->execute();		// Remove the taxonomy maps.		FinderIndexerTaxonomy::removeMaps($linkId);		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function optimize()	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Delete all orphaned terms.		$query->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Optimize the links table.		$db->setQuery('VACUUM ' . $db->quoteName('#__finder_links'));		$db->execute();		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links'));		$db->execute();		for ($i = 0; $i <= 15; $i++)		{			// Optimize the terms mapping table.			$db->setQuery('VACUUM ' . $db->quoteName('#__finder_links_terms' . dechex($i)));			$db->execute();			$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links_terms' . dechex($i)));			$db->execute();		}		// Optimize the terms mapping table.		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links_terms'));		$db->execute();		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		// Optimize the taxonomy mapping table.		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_taxonomy_map'));		$db->execute();		return true;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function addTokensToDB($tokens, $context = '')	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Force tokens to an array.		$tokens = is_array($tokens) ? $tokens : array($tokens);		// Count the number of token values.		$values = 0;		// Insert the tokens into the database.		$query->insert($db->quoteName('#__finder_tokens'))			->columns(				array(					$db->quoteName('term'),					$db->quoteName('stem'),					$db->quoteName('common'),					$db->quoteName('phrase'),					$db->quoteName('weight'),					$db->quoteName('context'),					$db->quoteName('language')				)			);		// Iterate through the tokens to create SQL value sets.		foreach ($tokens as $token)		{			$query->values(				$db->quote($token->term) . ', '					. $db->quote($token->stem) . ', '					. (int) $token->common . ', '					. (int) $token->phrase . ', '					. (float) $token->weight . ', '					. (int) $context . ', '					. $db->quote($token->language)			);			$values++;		}		$db->setQuery($query);		$db->execute();		return $values;	}	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function toggleTables($memory)	{		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$canOrder	= $user->authorise('core.edit.state',	'com_tags');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_tags&task=tags.saveOrderAjax';	JHtml::_('sortablelist.sortable', 'categoryList', 'adminForm', strtolower($listDirn), $saveOrderingUrl, false, true);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function() {		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		} else {			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_tags&view=tags');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)): ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER'); ?>" />			</div>			<div class="btn-group hidden-phone">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>			<div class="clearfix"></div>		</div>		<table class="table table-striped" id="categoryList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>				<th width="10%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort',  'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>				</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php			$originalOrders = array();			foreach ($this->items as $i => $item) :				$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);				$canCreate  = $user->authorise('core.create',     'com_tags');				$canEdit    = $user->authorise('core.edit',       'com_tags');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_tags') && $canCheckin;				// Get the parents of item for sorting				if ($item->level > 1)				{					$parentsStr = "";					$_currentParentId = $item->parent_id;					$parentsStr = " ".$_currentParentId;					for ($j = 0; $j < $item->level; $j++)					{						foreach ($this->ordering as $k => $v)						{							$v = implode("-", $v);							$v = "-" . $v . "-";							if (strpos($v, "-" . $_currentParentId . "-") !== false)							{								$parentsStr .= " " . $k;								$_currentParentId = $k;								break;							}						}					}				}				else				{					$parentsStr = "";				}				?>					<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->parent_id;?>" item-id="<?php echo $item->id?>" parents="<?php echo $parentsStr?>" level="<?php echo $item->level?>">						<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel    = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>						<?php else : ?>							<span class="sortable-handler inactive">								<i class="icon-menu"></i>							</span>						<?php endif; ?>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $orderkey + 1;?>" />						</td>						<td class="center hidden-phone">							<?php echo JHtml::_('grid.id', $i, $item->id); ?>						</td>						<td class="center">							<?php echo JHtml::_('jgrid.published', $item->published, $i, 'tags.', $canChange);?>						</td>						<td>							<?php if ($item->level > 0): ?>							<?php echo str_repeat('<span class="gi">&mdash;</span>', $item->level - 1) ?>							<?php endif; ?>							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'tags.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit || $canEditOwn) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_tags&task=tag.edit&id='.$item->id);?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>								<?php echo $this->escape($item->title); ?>							<?php endif; ?>							<span class="small" title="<?php echo $this->escape($item->path); ?>">								<?php if (empty($item->note)) : ?>									<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>								<?php else : ?>									<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>								<?php endif; ?>							</span>						</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_title); ?>					</td>					<td class="small nowrap hidden-phone">					<?php if ($item->language == '*') : ?>						<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>						</td>						<td class="center hidden-phone">							<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt); ?>">								<?php echo (int) $item->id; ?></span>						</td>					</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Media component * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.0 */class MediaViewImages extends JViewLegacy{	public function display($tpl = null)	{		$config = JComponentHelper::getParams('com_media');		$app	= JFactory::getApplication();		$lang	= JFactory::getLanguage();		$append = '';		JHtml::_('behavior.framework', true);		JHtml::_('script', 'media/popup-imagemanager.js', true, true);		JHtml::_('stylesheet', 'media/popup-imagemanager.css', array(), true);		if ($lang->isRTL())		{			JHtml::_('stylesheet', 'media/popup-imagemanager_rtl.css', array(), true);		}		/*		 * Display form for FTP credentials?		 * Don't set them here, as there are other functions called before this one if there is any file write operation		 */		$ftp = !JClientHelper::hasCredentials('ftp');		$this->session = JFactory::getSession();		$this->config = $config;		$this->state = $this->get('state');		$this->folderList = $this->get('folderList');		$this->require_ftp = $ftp;		parent::display($tpl);	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Application class * * Provide many supporting API functions * * @final * @package  Joomla.Administrator * @since    1.5 */class JAdministrator extends JApplication{	/**	 * Class constructor	 *	 * @param   array  An optional associative array of configuration settings.	 *                 Recognized key values include 'clientId' (this list is not meant to be comprehensive).	 *	 * @since   1.5	 */	public function __construct($config = array())	{		$config['clientId'] = 1;		parent::__construct($config);		//Set the root in the URI based on the application name		JURI::root(null, str_ireplace('/' . $this->getName(), '', JURI::base(true)));	}	/**	 * Initialise the application.	 *	 * @param   array  $options    An optional associative array of configuration settings.	 *	 * @return  void	 * @since   1.5	 */	public function initialise($options = array())	{		$config = JFactory::getConfig();		$user = JFactory::getUser();		// If the user is a guest we populate it with the guest user group.		if ($user->guest)		{			$guestUsergroup = JComponentHelper::getParams('com_users')->get('guest_usergroup', 1);			$user->groups = array($guestUsergroup);		}		// if a language was specified it has priority		// otherwise use user or default language settings		if (empty($options['language']))		{			$lang = $user->getParam('admin_language');			// Make sure that the user's language exists			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}			else			{				$params = JComponentHelper::getParams('com_languages');				$client = JApplicationHelper::getClientInfo($this->getClientId());				$options['language'] = $params->get($client->name, $config->get('language', 'en-GB'));			}		}		// One last check to make sure we have something		if (!JLanguage::exists($options['language']))		{			$lang = $config->get('language', 'en-GB');			if (JLanguage::exists($lang))			{				$options['language'] = $lang;			}			else			{				$options['language'] = 'en-GB'; // as a last ditch fail to english			}		}		// Execute the parent initialise method.		parent::initialise($options);		// Load Library language		$lang = JFactory::getLanguage();		$lang->load('lib_joomla', JPATH_ADMINISTRATOR);	}	/**	 * Route the application	 *	 * @return  void	 * @since   1.5	 */	public function route()	{		$uri = JURI::getInstance();		if ($this->getCfg('force_ssl') >= 1 && strtolower($uri->getScheme()) != 'https')		{			//forward to https			$uri->setScheme('https');			$this->redirect((string) $uri);		}		// Trigger the onAfterRoute event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterRoute');	}	/**	 * Return a reference to the JRouter object.	 *	 * @return  JRouter	 * @since   1.5	 */	static public function getRouter($name = null, array $options = array())	{		$router = parent::getRouter('administrator');		return $router;	}	/**	 * Dispatch the application	 *	 * @param   string    $component    The component to dispatch.	 *	 * @return  void	 * @since   1.5	 */	public function dispatch($component = null)	{		if ($component === null)		{			$component = JAdministratorHelper::findOption();		}		$document = JFactory::getDocument();		$user = JFactory::getUser();		switch ($document->getType())		{			case 'html':				$document->setMetaData('keywords', $this->getCfg('MetaKeys'));				break;			default:				break;		}		$document->setTitle($this->getCfg('sitename') . ' - ' . JText::_('JADMINISTRATION'));		$document->setDescription($this->getCfg('MetaDesc'));		$document->setGenerator('Joomla! - Open Source Content Management');		$contents = JComponentHelper::renderComponent($component);		$document->setBuffer($contents, 'component');		// Trigger the onAfterDispatch event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterDispatch');	}	/**	 * Display the application.	 *	 * @return  void	 * @since   1.5	 */	public function render()	{		$component = $this->input->get('option', 'com_login');		$template = $this->getTemplate(true);		$file = $this->input->get('tmpl', 'index');		if ($component == 'com_login')		{			$file = 'login';		}		// Safety check for when configuration.php root_user is in use.		$config = JFactory::getConfig();		$rootUser = $config->get('root_user');		if (property_exists('JConfig', 'root_user')			&& (JFactory::getUser()->get('username') == $rootUser || JFactory::getUser()->id === (string) $rootUser)		)		{			JError::raiseNotice(200, JText::sprintf('JWARNING_REMOVE_ROOT_USER', 'index.php?option=com_config&task=application.removeroot&' . JSession::getFormToken() . '=1'));		}		$params = array(			'template' => $template->template,			'file' => $file . '.php',			'directory' => JPATH_THEMES,			'params' => $template->params		);		$document = JFactory::getDocument();		$document->parse($params);		$this->triggerEvent('onBeforeRender');		$data = $document->render(false, $params);		JResponse::setBody($data);		$this->triggerEvent('onAfterRender');	}	/**	 * Login authentication function	 *	 * @param   array  Array('username' => string, 'password' => string)	 * @param   array  Array('remember' => boolean)	 *	 * @return  boolean True on success.	 * @see     JApplication::login	 * @since   1.5	 */	public function login($credentials, $options = array())	{		//The minimum group		$options['group'] = 'Public Backend';		//Make sure users are not autoregistered		$options['autoregister'] = false;		//Set the application login entry point		if (!array_key_exists('entry_url', $options))		{			$options['entry_url'] = JURI::base() . 'index.php?option=com_users&task=login';		}		// Set the access control action to check.		$options['action'] = 'core.login.admin';		$result = parent::login($credentials, $options);		if (!($result instanceof Exception))		{			$lang = $this->input->get('lang');			$lang = preg_replace('/[^A-Z-]/i', '', $lang);			$this->setUserState('application.lang', $lang);			self::purgeMessages();		}		return $result;	}	/**	 * Get the template	 *	 * @return  string    The template name	 * @since   1.0	 */	public function getTemplate($params = false)	{		static $template;		if (!isset($template))		{			$admin_style = JFactory::getUser()->getParam('admin_style');			// Load the template name from the database			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('template, s.params')				->from('#__template_styles as s')				->join('LEFT', '#__extensions as e ON e.type=' . $db->quote('template') . ' AND e.element=s.template AND e.client_id=s.client_id');			if ($admin_style)			{				$query->where('s.client_id = 1 AND id = ' . (int) $admin_style . ' AND e.enabled = 1', 'OR');			}			$query->where('s.client_id = 1 AND home = ' . $db->quote('1'), 'OR')				->order('home');			$db->setQuery($query);			$template = $db->loadObject();			$template->template = JFilterInput::getInstance()->clean($template->template, 'cmd');			$template->params = new JRegistry($template->params);			if (!file_exists(JPATH_THEMES . '/' . $template->template . '/index.php'))			{				$this->enqueueMessage(JText::_('JERROR_ALERTNOTEMPLATE'), 'error');				$template->params = new JRegistry;				$template->template = 'isis';			}		}		if (!file_exists(JPATH_THEMES . '/' . $template->template . '/index.php'))		{			throw new InvalidArgumentException(JText::sprintf('JERROR_COULD_NOT_FIND_TEMPLATE', $template->template));		}		if ($params)		{			return $template;		}		return $template->template;	}	/**	 * Purge the jos_messages table of old messages	 *	 * @return  void	 * @since   1.5	 */	public static function purgeMessages()	{		$db = JFactory::getDbo();		$user = JFactory::getUser();		$userid = $user->get('id');		$query = 'SELECT *'			. ' FROM #__messages_cfg'			. ' WHERE user_id = ' . (int) $userid			. ' AND cfg_name = ' . $db->quote('auto_purge');		$db->setQuery($query);		$config = $db->loadObject();		// check if auto_purge value set		if (is_object($config) and $config->cfg_name == 'auto_purge')		{			$purge = $config->cfg_value;		}		else		{			// if no value set, default is 7 days			$purge = 7;		}		// calculation of past date		// if purge value is not 0, then allow purging of old messages		if ($purge > 0)		{			// purge old messages at day set in message configuration			$past = JFactory::getDate(time() - $purge * 86400);			$pastStamp = $past->toSql();			$query = 'DELETE FROM #__messages'				. ' WHERE date_time < ' . $db->quote($pastStamp)				. ' AND user_id_to = ' . (int) $userid;			$db->setQuery($query);			$db->execute();		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsViewTag extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		$this->canDo = TagsHelper::getActions($this->state->get('tags.component'));		$input = JFactory::getApplication()->input;		// Check for errors.		if (count($errors = $this->get('Errors'))) {			JError::raiseError(500, implode("\n", $errors));			return false;		}		$input->set('hidemainmenu', true);		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since  3.1	 */	protected function addToolbar()	{		$input      = JFactory::getApplication()->input;		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load('com_tags', JPATH_BASE, null, false, false)		||	$lang->load('com_tags', JPATH_ADMINISTRATOR.'/components/com_tags', null, false, false)		||	$lang->load('com_tags', JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load('com_tags', JPATH_ADMINISTRATOR.'/components/com_tags', $lang->getDefault(), false, false);		// Load the tags helper.		require_once JPATH_COMPONENT.'/helpers/tags.php';		// Get the results for each action.		$canDo = TagsHelper::getActions('com_tags', $this->item->id);		$title = JText::_('COM_TAGS_BASE_'.($isNew?'ADD':'EDIT').'_TITLE');		// Prepare the toolbar.		JToolbarHelper::title($title, 'tag-'.($isNew?'add':'edit').($isNew?'add':'edit'));		// For new records, check the create permission.		if ($isNew)		{			JToolbarHelper::apply('tag.apply');			JToolbarHelper::save('tag.save');			JToolbarHelper::save2new('tag.save2new');		}		// If not checked out, can save the item.		elseif (!$checkedOut && ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_user_id == $userId))) {			JToolbarHelper::apply('tag.apply');			JToolbarHelper::save('tag.save');			if ($canDo->get('core.create')) {				JToolbarHelper::save2new('tag.save2new');			}		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create')) {			JToolbarHelper::save2copy('tag.save2copy');		}		if (empty($this->item->id))  {			JToolbarHelper::cancel('tag.cancel');		}		else {			JToolbarHelper::cancel('tag.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::help('JHELP_COMPONENTS_TAGS_MANAGER_EDIT');		JToolbarHelper::divider();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Cache output type object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheControllerOutput extends JCacheController{	/**	 * @since   11.1	 */	protected $_id;	/**	 * @since   11.1	 */	protected $_group;	/**	 * @since   11.1	 */	protected $_locktest = null;	/**	 * Start the cache	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True if the cache is hit (false else)	 *	 * @since   11.1	 */	public function start($id, $group = null)	{		// If we have data in cache use that.		$data = $this->cache->get($id, $group);		$this->_locktest = new stdClass;		$this->_locktest->locked = null;		$this->_locktest->locklooped = null;		if ($data === false)		{			$this->_locktest = $this->cache->lock($id, $group);			if ($this->_locktest->locked == true && $this->_locktest->locklooped == true)			{				$data = $this->cache->get($id, $group);			}		}		if ($data !== false)		{			$data = unserialize(trim($data));			echo $data;			if ($this->_locktest->locked == true)			{				$this->cache->unlock($id, $group);			}			return true;		}		else		{			// Nothing in cache... let's start the output buffer and start collecting data for next time.			if ($this->_locktest->locked == false)			{				$this->_locktest = $this->cache->lock($id, $group);			}			ob_start();			ob_implicit_flush(false);			// Set id and group placeholders			$this->_id = $id;			$this->_group = $group;			return false;		}	}	/**	 * Stop the cache buffer and store the cached data	 *	 * @return  boolean  True if cache stored	 *	 * @since   11.1	 */	public function end()	{		// Get data from output buffer and echo it		$data = ob_get_contents();		ob_end_clean();		echo $data;		// Get id and group and reset them placeholders		$id = $this->_id;		$group = $this->_group;		$this->_id = null;		$this->_group = null;		// Get the storage handler and store the cached data		$ret = $this->cache->store(serialize($data), $id, $group);		if ($this->_locktest->locked == true)		{			$this->cache->unlock($id, $group);		}		return $ret;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$html = JHtml::_('icons.buttons', $buttons);?><?php if (!empty($html)) : ?>	<div class="row-striped">		<?php echo $html;?>	</div><?php endif;?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Smart download helper. Automatically uses cURL or URL fopen() wrappers to * fetch the package. * * @package  Joomla.Administrator * @since    2.5.4 */class AdmintoolsHelperDownload{	/**	 * Downloads from a URL and saves the result as a local file	 *	 * @param   string  $url     The URL to download from	 * @param   string  $target  The file path to download to	 *	 * @return  bool	True on success	 *	 * @since   2.5.4	 */	public static function download($url, $target)	{		jimport('joomla.filesystem.file');		$hackPermissions = false;		// Make sure the target does not exist		if (JFile::exists($target))		{			if (!@unlink($target))			{				JFile::delete($target);			}		}		// Try to open the output file for writing		$fp = @fopen($target, 'wb');		if ($fp === false)		{			// The file can not be opened for writing. Let's try a hack.			$empty = '';			if ( JFile::write($target, $empty) )			{				if ( self::chmod($target, 511) )				{					$fp = @fopen($target, 'wb');					$hackPermissions = true;				}			}		}		$result = false;		if ($fp !== false)		{			// First try to download directly to file if $fp !== false			$adapters = self::getAdapters();			$result = false;			while (!empty($adapters) && ($result === false))			{				// Run the current download method				$method = 'get' . strtoupper(array_shift($adapters));				$result = self::$method($url, $fp);				// Check if we have a download				if ($result === true)				{					// The download is complete, close the file pointer					@fclose($fp);					// If the filesize is not at least 1 byte, we consider it failed.					clearstatcache();					$filesize = @filesize($target);					if ($filesize <= 0)					{						$result = false;						$fp = @fopen($target, 'wb');					}				}			}			// If we have no download, close the file pointer			if ($result === false)			{				@fclose($fp);			}		}		if ($result === false)		{			// Delete the target file if it exists			if (file_exists($target))			{				if ( !@unlink($target) )				{					JFile::delete($target);				}			}			// Download and write using JFile::write();			$result = JFile::write($target, self::downloadAndReturn($url));		}		return $result;	}	/**	 * Downloads from a URL and returns the result as a string	 *	 * @param   string  $url  The URL to download from	 *	 * @return  mixed Result string on success, false on failure	 *	 * @since   2.5.4	 */	public static function downloadAndReturn($url)	{		$adapters = self::getAdapters();		$result = false;		while (!empty($adapters) && ($result === false))		{			// Run the current download method			$method = 'get' . strtoupper(array_shift($adapters));			$result = self::$method($url, null);		}		return $result;	}	/**	 * Does the server support PHP's cURL extension?	 *	 * @return  bool True if it is supported	 *	 * @since   2.5.4	 */	private static function hasCURL()	{		static $result = null;		if (is_null($result))		{			$result = function_exists('curl_init');		}		return $result;	}	/**	 * Downloads the contents of a URL and writes them to disk (if $fp is not null)	 * or returns them as a string (if $fp is null)	 *	 * @param   string    $url       The URL to download from	 * @param   resource  $fp        The file pointer to download to. Omit to return the contents.	 * @param   boolean   $nofollow  Should we follow 301/302/307 redirection HTTP headers?	 *	 * @return   bool|string False on failure, true on success ($fp not null) or the URL contents (if $fp is null)	 *	 * @since   2.5.4	 */	private static function &getCURL($url, $fp = null, $nofollow = false)	{		$result = false;		$ch = curl_init($url);		if ( !@curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1) && !$nofollow )		{			// Safe Mode is enabled. We have to fetch the headers and			// parse any redirections present in there.			curl_setopt($ch, CURLOPT_AUTOREFERER, true);			curl_setopt($ch, CURLOPT_FAILONERROR, true);			curl_setopt($ch, CURLOPT_HEADER, true);			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);			curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);			curl_setopt($ch, CURLOPT_TIMEOUT, 30);			// Get the headers			$data = curl_exec($ch);			curl_close($ch);			// Init			$newURL = $url;			// Parse the headers			$lines = explode("\n", $data);			foreach ($lines as $line)			{				if (substr($line, 0, 9) == "Location:")				{					$newURL = trim(substr($line, 9));				}			}			if ($url != $newURL)			{				return self::getCURL($newURL, $fp);			}			else			{				return self::getCURL($newURL, $fp, true);			}		}		else		{			@curl_setopt($ch, CURLOPT_MAXREDIRS, 20);			if (function_exists('set_time_limit'))			{				set_time_limit(0);			}		}		curl_setopt($ch, CURLOPT_HEADER, 0);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);		curl_setopt($ch, CURLOPT_USERAGENT, 'Joomla/' . JVERSION);		if (is_resource($fp))		{			curl_setopt($ch, CURLOPT_FILE, $fp);		}		else		{			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);		}		$result = curl_exec($ch);		curl_close($ch);		return $result;	}	/**	 * Does the server support URL fopen() wrappers?	 *	 * @return  bool	 *	 * @since   2.5.4	 */	private static function hasFOPEN()	{		static $result = null;		if (is_null($result))		{			// If we are not allowed to use ini_get, we assume that URL fopen is			// disabled.			if (!function_exists('ini_get'))			{				$result = false;			}			else			{				$result = ini_get('allow_url_fopen');			}		}		return $result;	}	/**	 * Download from a URL using URL fopen() wrappers	 *	 * @param   string    $url  The URL to download from	 * @param   resource  $fp   The file pointer to download to; leave null to return the d/l file as a string	 *	 * @return  bool|string False on failure, true on success ($fp not null) or the URL contents (if $fp is null)	 *	 * @since   2.5.4	 */	private static function &getFOPEN($url, $fp = null)	{		$result = false;		// Track errors		if ( function_exists('ini_set') )		{			$track_errors = ini_set('track_errors', true);		}		// Open the URL for reading		if (function_exists('stream_context_create'))		{			$httpopts = array('user_agent' => 'Joomla/' . JVERSION);			$context = stream_context_create(array( 'http' => $httpopts ));			$ih = @fopen($url, 'r', false, $context);		}		else		{			// PHP 4 way (actually, it's just a fallback)			if ( function_exists('ini_set') )			{				ini_set('user_agent', 'Joomla/' . JVERSION);			}			$ih = @fopen($url, 'r');		}		// If fopen() fails, abort		if ( !is_resource($ih) )		{			return $result;		}		// Try to download		$bytes = 0;		$result = true;		$return = '';		while (!feof($ih) && $result)		{			$contents = fread($ih, 4096);			if ($contents === false)			{				@fclose($ih);				$result = false;				return $result;			}			else			{				$bytes += strlen($contents);				if (is_resource($fp))				{					$result = @fwrite($fp, $contents);				}				else				{					$return .= $contents;					unset($contents);				}			}		}		@fclose($ih);		if (is_resource($fp))		{			return $result;		}		elseif ( $result === true )		{			return $return;		}		else		{			return $result;		}	}	/**	 * Detect and return available download "adapters" (not really adapters, as	 * we don't follow the Adapter pattern, yet)	 *	 * @return  array	 *	 * @since   2.5.4	 */	private static function getAdapters()	{		// Detect available adapters		$adapters = array();		if (self::hasCURL())		{			$adapters[] = 'curl';		}		if (self::hasFOPEN())		{			$adapters[] = 'fopen';		}		return $adapters;	}	/**	 * Change the permissions of a file, optionally using FTP	 *	 * @param   string  $path  Absolute path to file	 * @param   int     $mode  Permissions, e.g. 0755	 *	 * @return  boolean True on success	 *	 * @since   2.5.4	 */	private static function chmod($path, $mode)	{		if (is_string($mode))		{			$mode = octdec($mode);			if ( ($mode < 0600) || ($mode > 0777) )			{				$mode = 0755;			}		}		$ftpOptions = JClientHelper::getCredentials('ftp');		// Check to make sure the path valid and clean		$path = JPath::clean($path);		if ($ftpOptions['enabled'] == 1)		{			// Connect the FTP client			$ftp = JClientFtp::getInstance(				$ftpOptions['host'], $ftpOptions['port'], null,				$ftpOptions['user'], $ftpOptions['pass']			);		}		if (@chmod($path, $mode))		{			$ret = true;		}		elseif ($ftpOptions['enabled'] == 1)		{			// Translate path and delete			$path = JPath::clean(str_replace(JPATH_ROOT, $ftpOptions['root'], $path), '/');			// FTP connector throws an error			$ret = $ftp->chmod($path, $mode);		} else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto * @since       1.5 */class MailtoController extends JControllerLegacy{	/**	 * Show the form so that the user can send the link to someone	 *	 * @access public	 * @since 1.5	 */	public function mailto()	{		$session = JFactory::getSession();		$session->set('com_mailto.formtime', time());		$this->input->set('view', 'mailto');		$this->display();	}	/**	 * Send the message and display a notice	 *	 * @access public	 * @since 1.5	 */	public function send()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$session = JFactory::getSession();		$timeout = $session->get('com_mailto.formtime', 0);		if ($timeout == 0 || time() - $timeout < 20)		{			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		$SiteName = $app->getCfg('sitename');		$link     = MailtoHelper::validateHash($this->input->get('link', '', 'post'));		// Verify that this is a local link		if (!$link || !JURI::isInternal($link))		{			//Non-local url...			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		// An array of email headers we do not want to allow as input		$headers = array (	'Content-Type:',							'MIME-Version:',							'Content-Transfer-Encoding:',							'bcc:',							'cc:');		// An array of the input fields to scan for injected headers		$fields = array(			'mailto',			'sender',			'from',			'subject',		);		/*		 * Here is the meat and potatoes of the header injection test.  We		 * iterate over the array of form input and check for header strings.		 * If we find one, send an unauthorized header and die.		 */		foreach ($fields as $field)		{			foreach ($headers as $header)			{				if (strpos($_POST[$field], $header) !== false)				{					JError::raiseError(403, '');				}			}		}		/*		 * Free up memory		 */		unset ($headers, $fields);		$email           = $this->input->post->getString('mailto', '');		$sender          = $this->input->post->getString('sender', '');		$from            = $this->input->post->getString('from', '');		$subject_default = JText::sprintf('COM_MAILTO_SENT_BY', $sender);		$subject         = $this->input->post->getString('subject', $subject_default);		// Check for a valid to address		$error	= false;		if (! $email  || ! JMailHelper::isEmailAddress($email))		{			$error	= JText::sprintf('COM_MAILTO_EMAIL_INVALID', $email);			JError::raiseWarning(0, $error);		}		// Check for a valid from address		if (! $from || ! JMailHelper::isEmailAddress($from))		{			$error	= JText::sprintf('COM_MAILTO_EMAIL_INVALID', $from);			JError::raiseWarning(0, $error);		}		if ($error)		{			return $this->mailto();		}		// Build the message to send		$msg	= JText::_('COM_MAILTO_EMAIL_MSG');		$body	= sprintf($msg, $SiteName, $sender, $from, $link);		// Clean the email data		$subject = JMailHelper::cleanSubject($subject);		$body	 = JMailHelper::cleanBody($body);		$sender	 = JMailHelper::cleanAddress($sender);		// Send the email		if (JFactory::getMailer()->sendMail($from, $sender, $email, $subject, $body) !== true)		{			JError::raiseNotice(500, JText::_('COM_MAILTO_EMAIL_NOT_SENT'));			return $this->mailto();		}		$this->input->set('view', 'sent');		$this->display();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Cache component * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheViewCache extends JViewLegacy{	protected $client;	protected $data;	protected $pagination;	protected $state;	public function display($tpl = null)	{		$this->data			= $this->get('Data');		$this->client		= $this->get('Client');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$user = JFactory::getUser();		$condition = ($this->client->name == 'site');		JToolbarHelper::title(JText::_('COM_CACHE_CLEAR_CACHE'), 'clear.png');		JToolbarHelper::custom('delete', 'delete.png', 'delete_f2.png', 'JTOOLBAR_DELETE', true);		JToolbarHelper::divider();		if (JFactory::getUser()->authorise('core.admin', 'com_cache'))		{			JToolbarHelper::preferences('com_cache');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_SITE_MAINTENANCE_CLEAR_CACHE');		JHtmlSidebar::setAction('index.php?option=com_cache');		JHtmlSidebar::addFilter(			// @todo We need an actual label here			'',			'filter_client_id',			JHtml::_('select.options', CacheHelper::getClientOptions(), 'value', 'text', $this->state->get('clientId'))		);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Search.contacts * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Contacts Search plugin * * @package     Joomla.Plugin * @subpackage  Search.contacts * @since       1.6 */class PlgSearchContacts extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * @return array An array of search areas	 */	public function onContentSearchAreas()	{		static $areas = array(			'contacts' => 'PLG_SEARCH_CONTACTS_CONTACTS'		);		return $areas;	}	/**	 * Contacts Search method	 *	 * The sql must return the following fields that are used in a common display	 * routine: href, title, section, created, text, browsernav	 * @param string Target search string	 * @param string matching option, exact|any|all	 * @param string ordering option, newest|oldest|popular|alpha|category	 */	public function onContentSearch($text, $phrase = '', $ordering = '', $areas = null)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		if (is_array($areas))		{			if (!array_intersect($areas, array_keys($this->onContentSearchAreas())))			{				return array();			}		}		$sContent = $this->params->get('search_content', 1);		$sArchived = $this->params->get('search_archived', 1);		$limit = $this->params->def('search_limit', 50);		$state = array();		if ($sContent)		{			$state[] = 1;		}		if ($sArchived)		{			$state[] = 2;		}		$text = trim($text);		if ($text == '')		{			return array();		}		$section = JText::_('PLG_SEARCH_CONTACTS_CONTACTS');		switch ($ordering)		{			case 'alpha':				$order = 'a.name ASC';				break;			case 'category':				$order = 'c.title ASC, a.name ASC';				break;			case 'popular':			case 'newest':			case 'oldest':			default:				$order = 'a.name DESC';		}		$text = $db->quote('%' . $db->escape($text, true) . '%', false);		$rows = array();		if (!empty($state))		{			$query = $db->getQuery(true);			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('c.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('c.id');			$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select(				'a.name AS title, \'\' AS created, a.con_position, a.misc, '					. $case_when . ',' . $case_when1 . ', '					. $query->concatenate(array("a.name", "a.con_position", "a.misc"), ",") . ' AS text,'					. $query->concatenate(array($db->quote($section), "c.title"), " / ") . ' AS section,'					. '\'2\' AS browsernav'			);			$query->from('#__contact_details AS a')				->join('INNER', '#__categories AS c ON c.id = a.catid')				->where(					'(a.name LIKE ' . $text . ' OR a.misc LIKE ' . $text . ' OR a.con_position LIKE ' . $text						. ' OR a.address LIKE ' . $text . ' OR a.suburb LIKE ' . $text . ' OR a.state LIKE ' . $text						. ' OR a.country LIKE ' . $text . ' OR a.postcode LIKE ' . $text . ' OR a.telephone LIKE ' . $text						. ' OR a.fax LIKE ' . $text . ') AND a.published IN (' . implode(',', $state) . ') AND c.published=1 '						. ' AND a.access IN (' . $groups . ') AND c.access IN (' . $groups . ')'				);			$query->group('a.id, a.con_position, a.misc, c.alias, c.id')				->order($order);			// Filter by language			if ($app->isSite() && JLanguageMultilang::isEnabled())			{				$tag = JFactory::getLanguage()->getTag();				$query->where('a.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')')					->where('c.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query, 0, $limit);			$rows = $db->loadObjectList();			if ($rows)			{				foreach ($rows as $key => $row)				{					$rows[$key]->href = 'index.php?option=com_contact&view=contact&id=' . $row->slug . '&catid=' . $row->catslug;					$rows[$key]->text = $row->title;					$rows[$key]->text .= ($row->con_position) ? ', ' . $row->con_position : '';					$rows[$key]->text .= ($row->misc) ? ', ' . $row->misc : '';				}			}		}		return $rows;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink Table class * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksTableWeblink extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__weblinks', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_weblinks.weblink';	}	/**	 * Overloaded bind function to pre-process the params.	 *	 * @param   array  Named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see     JTable:bind	 * @since   1.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overload the store method for the Weblinks table.	 *	 * @param   boolean	Toggle whether null values should be updated.	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified		= $date->toSql();			$this->modified_by	= $user->get('id');		}		else		{			// New weblink. A weblink created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Set publish_up to null date if not set		if (!$this->publish_up)		{			$this->publish_up = $this->_db->getNullDate();		}		// Set publish_down to null date if not set		if (!$this->publish_down)		{			$this->publish_down = $this->_db->getNullDate();		}		// Verify that the alias is unique		$table = JTable::getInstance('Weblink', 'WeblinksTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_WEBLINKS_ERROR_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 */	public function check()	{		if (JFilterInput::checkAttribute(array ('href', $this->url)))		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_PROVIDE_URL'));			return false;		}		// check for valid name		if (trim($this->title) == '')		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_TITLE'));			return false;		}		// check for existing name		$query = 'SELECT id FROM #__weblinks WHERE title = '.$this->_db->quote($this->title).' AND catid = '.(int) $this->catid;		$this->_db->setQuery($query);		$xid = (int) $this->_db->loadResult();		if ($xid && $xid != (int) $this->id)		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_NAME'));			return false;		}		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		// clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// only process if not empty			$bad_characters = array("\n", "\r", "\"", "<", ">"); // array of characters to remove			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey); // remove bad characters			$keys = explode(',', $after_clean); // create array using commas as delimiter			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key)) {  // ignore blank keywords					$clean_keys[] = trim($key);				}			}			$this->metakey = implode(", ", $clean_keys); // put array back together delimited by ", "		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.0.4	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.'='.implode(' OR '.$k.'=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = '.(int) $userId.')';		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl) .			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')' .			$checkin		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.5 */class TemplatesModelSource extends JModelForm{	/**	 * Cache for the template information.	 *	 * @var        object	 */	private $_template = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		jimport('joomla.filesystem.file');		$app = JFactory::getApplication('administrator');		// Load the User state.		$id = $app->getUserState('com_templates.edit.source.id');		// Parse the template id out of the compound reference.		$temp = explode(':', base64_decode($id));		$this->setState('extension.id', (int) array_shift($temp));		$fileName = array_shift($temp);		$this->setState('filename', $fileName);		// Save the syntax for later use		$app->setUserState('editor.source.syntax', JFile::getExt($fileName));		// Load the parameters.		$params = JComponentHelper::getParams('com_templates');		$this->setState('params', $params);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Codemirror or Editor None should be enabled		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('COUNT(*)')			->from('#__extensions as a')			->where('(a.name =' . $db->quote('plg_editors_codemirror') . ' AND a.enabled = 1) OR (a.name =' . $db->quote('plg_editors_none') . ' AND a.enabled = 1)');		$db->setQuery($query);		$state = $db->loadResult();		if ((int) $state < 1)		{			$app->enqueueMessage(JText::_('COM_TEMPLATES_ERROR_EDITOR_DISABLED'), 'warning');		}		// Get the form.		$form = $this->loadForm('com_templates.source', 'source', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_templates.edit.source.data', array());		if (empty($data))		{			$data = $this->getSource();		}		$this->preprocessData('com_templates.source', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function &getSource()	{		$item = new stdClass;		if (!$this->_template)		{			$this->getTemplate();		}		if ($this->_template)		{			$fileName = $this->getState('filename');			$client = JApplicationHelper::getClientInfo($this->_template->client_id);			$filePath = JPath::clean($client->path . '/templates/' . $this->_template->element . '/' . $fileName);			if (file_exists($filePath))			{				$item->extension_id = $this->getState('extension.id');				$item->filename = $this->getState('filename');				$item->source = file_get_contents($filePath);			}			else			{				$this->setError(JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_FOUND'));			}		}		return $item;	}	/**	 * Method to get the template information.	 *	 * @return  mixed  Object if successful, false if not and internal error is set.	 * @since   1.6	 */	public function &getTemplate()	{		$pk = $this->getState('extension.id');		$db = $this->getDbo();		$result = false;		// Get the template information.		$db->setQuery(			'SELECT extension_id, client_id, element' .				' FROM #__extensions' .				' WHERE extension_id = ' . (int) $pk .				'  AND type = ' . $db->quote('template')		);		try		{			$result = $db->loadObject();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			$this->_template = false;			return false;		}		if (empty($result))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_EXTENSION_RECORD_NOT_FOUND'));			$this->_template = false;		}		else		{			$this->_template = $result;		}		return $this->_template;	}	/**	 * Method to store the source file contents.	 *	 * @param   array  The souce data to save.	 *	 * @return  boolean  True on success, false otherwise and internal error set.	 * @since   1.6	 */	public function save($data)	{		jimport('joomla.filesystem.file');		// Get the template.		$template = $this->getTemplate();		if (empty($template))		{			return false;		}		$dispatcher = JEventDispatcher::getInstance();		$fileName = $this->getState('filename');		$client = JApplicationHelper::getClientInfo($template->client_id);		$filePath = JPath::clean($client->path . '/templates/' . $template->element . '/' . $fileName);		// Include the extension plugins for the save events.		JPluginHelper::importPlugin('extension');		// Set FTP credentials, if given.		JClientHelper::setCredentialsFromRequest('ftp');		$ftp = JClientHelper::getCredentials('ftp');		// Try to make the template file writeable.		if (!$ftp['enabled'] && JPath::isOwner($filePath) && !JPath::setPermissions($filePath, '0644'))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_WRITABLE'));			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_templates.source', &$data, false));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		$return = JFile::write($filePath, $data['source']);		// Try to make the template file unwriteable.		if (!$ftp['enabled'] && JPath::isOwner($filePath) && !JPath::setPermissions($filePath, '0444'))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_UNWRITABLE'));			return false;		}		elseif (!$return)		{			$this->setError(JText::sprintf('COM_TEMPLATES_ERROR_FAILED_TO_SAVE_FILENAME', $fileName));			return false;		}		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_templates.source', &$table, false));		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Profile controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerProfile extends UsersController{	/**	 * Method to check out a user for editing and redirect to the edit form.	 *	 * @since   1.6	 */	public function edit()	{		$app			= JFactory::getApplication();		$user			= JFactory::getUser();		$loginUserId	= (int) $user->get('id');		// Get the previous user id (if any) and the current user id.		$previousId = (int) $app->getUserState('com_users.edit.profile.id');		$userId = $this->input->getInt('user_id', null, 'array');		// Check if the user is trying to edit another users profile.		if ($userId != $loginUserId)		{			JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			return false;		}		// Set the user id for the user to edit in the session.		$app->setUserState('com_users.edit.profile.id', $userId);		// Get the model.		$model = $this->getModel('Profile', 'UsersModel');		// Check out the user.		if ($userId)		{			$model->checkout($userId);		}		// Check in the previous user.		if ($previousId)		{			$model->checkin($previousId);		}		// Redirect to the edit screen.		$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile&layout=edit', false));	}	/**	 * Method to save a user's profile data.	 *	 * @return  void	 * @since   1.6	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app	= JFactory::getApplication();		$model	= $this->getModel('Profile', 'UsersModel');		$user	= JFactory::getUser();		$userId	= (int) $user->get('id');		// Get the user data.		$data = $app->input->post->get('jform', array(), 'array');		// Force the ID to this user.		$data['id'] = $userId;		// Validate the posted data.		$form = $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		// Validate the posted data.		$data = $model->validate($form, $data);		// Check for errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_users.edit.profile.data', $data);			// Redirect back to the edit screen.			$userId = (int) $app->getUserState('com_users.edit.profile.id');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile&layout=edit&user_id='.$userId, false));			return false;		}		// Attempt to save the data.		$return	= $model->save($data);		// Check for errors.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('com_users.edit.profile.data', $data);			// Redirect back to the edit screen.			$userId = (int) $app->getUserState('com_users.edit.profile.id');			$this->setMessage(JText::sprintf('COM_USERS_PROFILE_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile&layout=edit&user_id='.$userId, false));			return false;		}		// Redirect the user and adjust session state based on the chosen task.		switch ($this->getTask())		{			case 'apply':				// Check out the profile.				$app->setUserState('com_users.edit.profile.id', $return);				$model->checkout($return);				// Redirect back to the edit screen.				$this->setMessage(JText::_('COM_USERS_PROFILE_SAVE_SUCCESS'));				$this->setRedirect(JRoute::_(($redirect = $app->getUserState('com_users.edit.profile.redirect')) ? $redirect : 'index.php?option=com_users&view=profile&layout=edit&hidemainmenu=1', false));				break;			default:				// Check in the profile.				$userId = (int) $app->getUserState('com_users.edit.profile.id');				if ($userId)				{					$model->checkin($userId);				}				// Clear the profile id from the session.				$app->setUserState('com_users.edit.profile.id', null);				// Redirect to the list screen.				$this->setMessage(JText::_('COM_USERS_PROFILE_SAVE_SUCCESS'));				$this->setRedirect(JRoute::_(($redirect = $app->getUserState('com_users.edit.profile.redirect')) ? $redirect : 'index.php?option=com_users&view=profile&user_id='.$return, false));				break;		}		// Flush the data from the session.		$app->setUserState('com_users.edit.profile.data', null);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		$task = $this->getTask();		$item = $model->getData();		$id = $item->get('id');		$tags = $validData['tags'];		if ($tags)		{			$item->tags = new JHelperTags;			$item->tags->getTagIds($item->id, 'com_users.user');			$item->metadata['tags'] = $item->tags;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Status class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/status/ * @since       13.1 */class JFacebookStatus extends JFacebookObject{	/**	 * Method to get a status message. Requires authentication.	 *	 * @param   string  $status  The status message id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getStatus($status)	{		return $this->get($status);	}	/**	 * Method to get a status message's comments. Requires authentication.	 *	 * @param   string   $status  The status message id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($status, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($status, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a comment to the status message. Requires authentication and publish_stream and user_status or friends_status permission.	 *	 * @param   string  $status   The status message id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($status, $message)	{		// Set POST request parameters.		$data['message'] = $message;		return $this->createConnection($status, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream and user_status or friends_status permission.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get a status message's likes. Requires authentication.	 *	 * @param   string   $status  The status message id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($status, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($status, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like status message. Requires authentication and publish_stream and user_status or friends_status permission.	 *	 * @param   string  $status  The status message id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createLike($status)	{		return $this->createConnection($status, 'likes');	}	/**	 * Method to unlike a status message. Requires authentication and publish_stream and user_status or friends_status permission.	 *	 * @param   string  $status  The status message id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteLike($status)	{		return $this->deleteConnection($status, 'likes');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_content.article');$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$saveOrder	= $listOrder == 'fp.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_content&view=featured'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?></label>				<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC'); ?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'fp.ordering', $listDirn, $listOrder); ?>						<?php if ($canOrder && $saveOrder) :?>							<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'featured.saveorder'); ?>						<?php endif; ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'a.created_by', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="8">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php $count = count($this->items); ?>			<?php foreach ($this->items as $i => $item) :				$item->max_ordering = 0;				$ordering	= ($listOrder == 'fp.ordering');				$assetId	= 'com_content.article.'.$item->id;				$canCreate	= $user->authorise('core.create',     'com_content.category.'.$item->catid);				$canEdit	= $user->authorise('core.edit',       'com_content.article.'.$item->id);				$canCheckin	= $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canChange	= $user->authorise('core.edit.state', 'com_content.article.'.$item->id) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid; ?>">					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">							<?php echo JHtml::_('jgrid.published', $item->state, $i, 'articles.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'articles.', $canCheckin); ?>							<?php endif; ?>							<?php if ($item->language == '*') : ?>								<?php $language = JText::alt('JALL', 'language'); ?>							<?php else : ?>								<?php $language = $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_content&task=article.edit&return=featured&id=' . $item->id);?>" title="<?php echo JText::_('JACTION_EDIT'); ?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>								<span title="<?php echo JText::sprintf('JFIELD_ALIAS_LABEL', $this->escape($item->alias)); ?>"><?php echo $this->escape($item->title); ?></span>							<?php endif; ?>							<div class="small">								<?php echo JText::_('JCATEGORY') . ": " . $this->escape($item->category_title); ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'article.', 'index.php?option=com_content&return=featured');								JHtml::_('dropdown.divider');								if ($item->state) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'articles.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'articles.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'articles.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'articles.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'articles.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'articles.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'articles.');								endif;								// Render dropdown list								echo JHtml::_('dropdown.render');							?>						</div>					</td>					<td class="order">						<?php if ($canChange) : ?>							<div class="input-prepend">							<?php if ($saveOrder) :?>								<?php if ($listDirn == 'asc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'featured.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php elseif ($listDirn == 'desc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'featured.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php endif; ?>							<?php endif; ?>							<?php $disabled = $saveOrder ? '' : 'disabled="disabled"'; ?>						 	<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="width-20 text-area-order" />						 </div>						<?php else : ?>							<?php echo $item->ordering; ?>						<?php endif; ?>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="small hidden-phone">						<?php if ($item->created_by_alias) : ?>							<?php echo $this->escape($item->author_name); ?>							<p class="smallsub"> <?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->created_by_alias)); ?></p>						<?php else : ?>							<?php echo $this->escape($item->author_name); ?>						<?php endif; ?>					</td>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="nowrap small hidden-phone">						<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="featured" value="1" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_contact')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller = JControllerLegacy::getInstance('contact');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_templates */class TemplatesTableStyle extends JTable{	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__template_styles', 'id', $db);	}	/**	 * Overloaded bind function to pre-process the params.	 *	 * @param   array  Named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see JTable:bind	 * @since 1.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		// Verify that the default style is not unset		if ($array['home'] == '0' && $this->home == '1')		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_CANNOT_UNSET_DEFAULT_STYLE'));			return false;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 */	public function check()	{		if (empty($this->title))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_STYLE_REQUIRES_TITLE'));			return false;		}		return true;	}	/**	 * Overloaded store method to ensure unicity of default style.	 *	 * @param   boolean True to update fields even if they are null.	 * @return  boolean  True on success.	 * @since   1.0	 * @link	http://docs.joomla.org/JTable/store	 */	public function store($updateNulls = false)	{		if ($this->home != '0')		{			$query = $this->_db->getQuery(true)				->update('#__template_styles')				->set('home=\'0\'')				->where('client_id=' . (int) $this->client_id)				->where('home='.$this->_db->quote($this->home));			$this->_db->setQuery($query);			$this->_db->execute();		}		return parent::store($updateNulls);	}	/**	 * Overloaded store method to unsure existence of a default style for a template.	 *	 * @param   mixed	An optional primary key value to delete.  If not set the	 *					instance property value is used.	 * @return  boolean  True on success.	 * @since   1.0	 * @link	http://docs.joomla.org/JTable/delete	 */	public function delete($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		if (!is_null($pk))		{			$query = $this->_db->getQuery(true)				->from('#__template_styles')				->select('id')				->where('client_id=' . (int) $this->client_id)				->where('template='.$this->_db->quote($this->template));			$this->_db->setQuery($query);			$results = $this->_db->loadColumn();			if (count($results) == 1 && $results[0] == $pk)			{				$this->setError(JText::_('COM_TEMPLATES_ERROR_CANNOT_DELETE_LAST_STYLE'));				return false;			}		}		return parent::delete($pk);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$cacheparams = new stdClass;$cacheparams->cachemode = 'safeuri';$cacheparams->class = 'ModTagsPopularHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = array('id' => 'array', 'Itemid' => 'int');$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!count($list)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_tags_popular', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include __DIR__ . '/component.php';
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Controller * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  If true, the view output will be cached	 * @param   array    An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController  This object to support chaining.	 *	 * @since   3.1	 */	public function display($cachable = true, $urlparams = false)	{		$user		= JFactory::getUser();		// Set the default view name and format from the Request.		$id = $this->input->getObject('id');		$id = (array) $id;		$vName = $this->input->get('view', 'tags');		$this->input->set('view', $vName);		if ($user->get('id') ||($this->input->getMethod() == 'POST' && $vName = 'tags'))		{			$cachable = false;		}		$safeurlparams = array(			'id'				=> 'ARRAY',			'type'				=> 'ARRAY',			'limit'				=> 'UINT',			'limitstart'		=> 'UINT',			'filter_order'		=> 'CMD',			'filter_order_Dir'	=> 'CMD',			'lang'				=> 'CMD'		);		return parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_FTP_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('ftp') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" ><head>	<link rel="stylesheet" href="templates/system/css/error.css" type="text/css" /></head><body>	<table width="550" align="center" class="outline">	<tr>		<td align="center">			<h1>				<?php echo $this->error->getCode() ?> - <?php echo JText::_('JERROR_AN_ERROR_HAS_OCCURRED') ?>			</h1>		</td>	</tr>	<tr>		<td width="39%" align="center">			<p><?php echo $this->error->getMessage(); ?></p>			<p><a href="index.php"><?php echo JText::_('JGLOBAL_TPL_CPANEL_LINK_TEXT') ?></a></p>			<p>				<?php if ($this->debug) :					echo $this->renderBacktrace();				endif; ?>			</p>		</td>	</tr>	</table></body></html>
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a modal window button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonPopup extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Popup';	/**	 * Fetch the HTML for the button	 *	 * @param   string   $type     Unused string, formerly button type.	 * @param   string   $name     Modal name, used to generate element ID	 * @param   string   $text     The link text	 * @param   string   $url      URL for popup	 * @param   integer  $width    Width of popup	 * @param   integer  $height   Height of popup	 * @param   integer  $top      Top attribute.  [@deprecated  Unused, will be removed in 4.0]	 * @param   integer  $left     Left attribute. [@deprecated  Unused, will be removed in 4.0]	 * @param   string   $onClose  JavaScript for the onClose event.	 * @param   string   $title    The title text	 *	 * @return  string  HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Modal', $name = '', $text = '', $url = '', $width = 640, $height = 480, $top = 0, $left = 0,		$onClose = '', $title = '')	{		// If no $title is set, use the $text element		if (strlen($title) == 0)		{			$title = $text;		}		$text = JText::_($text);		$title = JText::_($title);		$class = 'out-2';		$doTask = $this->_getCommand($url);		$html = "<button class=\"btn btn-small modal\" data-toggle=\"modal\" data-target=\"#modal-" . $name . "\">\n";		$html .= "<i class=\"icon-" . $class . "\">\n";		$html .= "</i>\n";		$html .= "$text\n";		$html .= "</button>\n";		// Build the options array for the modal		$params = array();		$params['title']  = $title;		$params['url']    = $doTask;		$params['height'] = $height;		$params['width']  = $width;		$html .= JHtml::_('bootstrap.renderModal', 'modal-' . $name, $params);		// If an $onClose event is passed, add it to the modal JS object		if (strlen($onClose) >= 1)		{			$html .= "<script>\n";			$html .= "jQuery('#modal-" . $name . "').on('hide', function () {\n";			$html .= $onClose . ";\n";			$html .= "}";			$html .= ");";			$html .= "</script>\n";		}		return $html;	}	/**	 * Get the button id	 *	 * @param   string  $type  Button type	 * @param   string  $name  Button name	 *	 * @return  string	Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type, $name)	{		return $this->_parent->getName() . '-' . "popup-$name";	}	/**	 * Get the JavaScript command for the button	 *	 * @param   string  $url  URL for popup	 *	 * @return  string  JavaScript command string	 *	 * @since   3.0	 */	private function _getCommand($url)	{		if (substr($url, 0, 4) !== 'http')		{			$url = JURI::base() . $url;		}		return $url;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class JFormFieldMenuOrdering extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.7	 */	protected $type = 'MenuOrdering';	/**	 * Method to get the list of siblings in a menu.	 * The method requires that parent be set.	 *	 * @return  array  The field option objects or false if the parent field has not been set	 * @since   1.7	 */	protected function getOptions()	{		$options = array();		// Get the parent		$parent_id = $this->form->getValue('parent_id', 0);		if (empty($parent_id))		{			return false;		}		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text')			->from('#__menu AS a')			->where('a.published >= 0')			->where('a.parent_id =' . (int) $parent_id);		if ($menuType = $this->form->getValue('menutype'))		{			$query->where('a.menutype = ' . $db->quote($menuType));		}		else		{			$query->where('a.menutype != ' . $db->quote(''));		}		$query->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$options = array_merge(			array(array('value' => '-1', 'text' => JText::_('COM_MENUS_ITEM_FIELD_ORDERING_VALUE_FIRST'))),			$options,			array(array('value' => '-2', 'text' => JText::_('COM_MENUS_ITEM_FIELD_ORDERING_VALUE_LAST')))		);		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to get the field input markup	 *	 * @return  string  The field input markup.	 * @since   1.7	 */	protected function getInput()	{		if ($this->form->getValue('id', 0) == 0)		{			return '<span class="readonly">' . JText::_('COM_MENUS_ITEM_FIELD_ORDERING_TEXT') . '</span>';		}		else		{			return parent::getInput();		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><div id="installer-update"><form action="<?php echo JRoute::_('index.php?option=com_installer&view=update');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<?php if ($this->showMessage) : ?>		<?php echo $this->loadTemplate('message'); ?>	<?php endif; ?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<?php if (count($this->items)) : ?>	<table class="adminlist" cellspacing="1">		<thead>			<tr>				<th class="checkmark-col"><input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" /></th>				<th class="nowrap"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?></th>				<th class="nowrap"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_INSTALLTYPE', 'extension_id', $listDirn, $listOrder); ?></th>				<th ><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_TYPE', 'type', $listDirn, $listOrder); ?></th>				<th class="width-10" class="center"><?php echo JText::_('JVERSION'); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_FOLDER', 'folder', $listDirn, $listOrder); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_CLIENT', 'client_id', $listDirn, $listOrder); ?></th>				<th class="width-25"><?php echo JText::_('COM_INSTALLER_HEADING_DETAILSURL'); ?></th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item):			$client	= $item->client_id ? JText::_('JADMINISTRATOR') : JText::_('JSITE');		?>			<tr class="row<?php echo $i % 2; ?>">				<td><?php echo JHtml::_('grid.id', $i, $item->update_id); ?></td>				<td>					<span class="editlinktip hasTip" title="<?php echo JText::_('JGLOBAL_DESCRIPTION');?>::<?php echo $item->description ? $item->description : JText::_('COM_INSTALLER_MSG_UPDATE_NODESC'); ?>">					<?php echo $item->name; ?>					</span>				</td>				<td class="center">					<?php echo $item->extension_id ? JText::_('COM_INSTALLER_MSG_UPDATE_UPDATE') : JText::_('COM_INSTALLER_NEW_INSTALL') ?>				</td>				<td><?php echo JText::_('COM_INSTALLER_TYPE_' . $item->type) ?></td>				<td class="center"><?php echo $item->version ?></td>				<td class="center"><?php echo @$item->folder != '' ? $item->folder : JText::_('COM_INSTALLER_TYPE_NONAPPLICABLE'); ?></td>				<td class="center"><?php echo $client; ?></td>				<td><?php echo $item->detailsurl ?>					<?php if (isset($item->infourl)) : ?>					<br /><a href="<?php echo $item->infourl;?>"><?php echo $item->infourl;?></a>					<?php endif; ?>				</td>			</tr>		<?php endforeach;?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<?php else : ?>		<p class="nowarning"><?php echo JText::_('COM_INSTALLER_MSG_UPDATE_NOUPDATES'); ?></p>	<?php endif; ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form></div>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewLanguagesHtml $this */// Get version of Joomla! to compare it with the version of the language package$version = new JVersion;?><script type="text/javascript">	function installLanguages()	{		document.id(install_languages_desc).hide();		document.id(wait_installing).show();		document.id(wait_installing_spinner).show();		Install.submitform();	}</script><?php echo JHtml::_('installation.stepbarlanguages'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a				class="btn"				href="#"				onclick="return Install.goToPage('remove');"				rel="prev"				title="<?php echo JText::_('JPREVIOUS'); ?>">				<i class="icon-arrow-left"></i>				<?php echo JText::_('JPREVIOUS'); ?>			</a>			<a				class="btn btn-primary"				href="#"				onclick="installLanguages()"				rel="next"				title="<?php echo JText::_('JNEXT'); ?>">				<i class="icon-arrow-right icon-white"></i>				<?php echo JText::_('JNEXT'); ?>			</a>		</div>	</div>	<h3><?php echo JText::_('INSTL_LANGUAGES'); ?></h3>	<hr class="hr-condensed" />	<?php if (!$this->items) : ?>		<p><?php echo JText::_('INSTL_LANGUAGES_WARNING_NO_INTERNET') ?></p>		<p>			<a href="#"			class="btn btn-primary"			onclick="return Install.goToPage('remove');">			<i class="icon-arrow-left icon-white"></i>			<?php echo JText::_('INSTL_LANGUAGES_WARNING_BACK_BUTTON'); ?>			</a>		</p>		<p><?php echo JText::_('INSTL_LANGUAGES_WARNING_NO_INTERNET2') ?></p>	<?php else : ?>		<p id="install_languages_desc"><?php echo JText::_('INSTL_LANGUAGES_DESC'); ?></p>		<p id="wait_installing" style="display: none;">			<?php echo JText::_('INSTL_LANGUAGES_MESSAGE_PLEASE_WAIT') ?><br />			<div id="wait_installing_spinner" class="spinner spinner-img" style="display: none;"></div>		</p>	<table class="table table-striped table-condensed">			<thead>					<tr>						<th>							<?php echo JText::_('INSTL_LANGUAGES_COLUMN_HEADER_LANGUAGE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_LANGUAGES_COLUMN_HEADER_VERSION'); ?>						</th>					</tr>			</thead>			<tbody>				<?php foreach ($this->items as $i => $language) : ?>					<tr>						<td>							<label class="checkbox">								<input									type="checkbox"									id="cb<?php echo $i; ?>"									name="cid[]"									value="<?php echo $language->update_id; ?>"									/> <?php echo $language->name; ?>									<?php // Display a Note if language pack version is not equal to Joomla version ?>									<?php if (substr($language->version, 0, 3) != $version->RELEASE											|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>										<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>									<?php endif; ?>							</label>						</td>						<td>							<span class="badge"><?php echo $language->version; ?></span>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="InstallLanguages" />		<?php echo JHtml::_('form.token'); ?>	<?php endif; ?></form>
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;//// Joomla system checks.//@ini_set('magic_quotes_runtime', 0);//// Installation check, and check on removal of the install directory.//if (!file_exists(JPATH_CONFIGURATION.'/configuration.php') || (filesize(JPATH_CONFIGURATION.'/configuration.php') < 10) || file_exists(JPATH_INSTALLATION.'/index.php')) {	if (file_exists(JPATH_INSTALLATION.'/index.php'))	{		header('Location: '.substr($_SERVER['REQUEST_URI'], 0, strpos($_SERVER['REQUEST_URI'], 'index.php')).'installation/index.php');		exit();	} else {		echo 'No configuration file found and no installation code available. Exiting...';		exit();	}}//// Joomla system startup.//// System includes.require_once JPATH_LIBRARIES.'/import.legacy.php';JError::setErrorHandling(E_NOTICE, 'message');JError::setErrorHandling(E_WARNING, 'message');JError::setErrorHandling(E_ERROR, 'callback', array('JError', 'customErrorPage'));// Botstrap the CMS libraries.require_once JPATH_LIBRARIES.'/cms.php';// Pre-Load configuration.ob_start();require_once JPATH_CONFIGURATION.'/configuration.php';ob_end_clean();// System configuration.$config = new JConfig;// Set the error_reportingswitch ($config->error_reporting){	case 'default':	case '-1':		break;	case 'none':	case '0':		error_reporting(0);		break;	case 'simple':		error_reporting(E_ERROR | E_WARNING | E_PARSE);		ini_set('display_errors', 1);		break;	case 'maximum':		error_reporting(E_ALL);		ini_set('display_errors', 1);		break;	case 'development':		error_reporting(-1);		ini_set('display_errors', 1);		break;	default:		error_reporting($config->error_reporting);		ini_set('display_errors', 1);		break;}define('JDEBUG', $config->debug);unset($config);//// Joomla framework loading.//// System profiler.if (JDEBUG){	$_PROFILER = JProfiler::getInstance('Application');}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('BannersHelper', JPATH_COMPONENT.'/helpers/banners.php');/** * View to edit a banner. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersViewBanner extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Initialiase variables.		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Since we don't track these assets at the item level, use the category id.		$canDo		= BannersHelper::getActions($this->item->catid, 0);		JToolbarHelper::title($isNew ? JText::_('COM_BANNERS_MANAGER_BANNER_NEW') : JText::_('COM_BANNERS_MANAGER_BANNER_EDIT'), 'banners.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit') || count($user->getAuthorisedCategories('com_banners', 'core.create')) > 0))		{			JToolbarHelper::apply('banner.apply');			JToolbarHelper::save('banner.save');			if ($canDo->get('core.create'))			{				JToolbarHelper::save2new('banner.save2new');			}		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('banner.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('banner.cancel');		}		else		{			JToolbarHelper::cancel('banner.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_BANNERS_EDIT');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><div class="remind <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form id="user-registration" action="<?php echo JRoute::_('index.php?option=com_users&task=remind.remind'); ?>" method="post" class="form-validate form-horizontal">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		</fieldset>		<?php endforeach; ?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Helper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for standard content style extensions. * * @package     Joomla.Libraries * @subpackage  Helper * @since       3.1 */class JHelperContent{	/**	 * Configure the Linkbar. Must be implemented by each extension.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   3.1	 */	public static function addSubmenu($vName)	{	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  $categoryId  The category ID.	 * @param   integer  $id          The item ID.	 * @param   string   $assetName   The asset name	 *	 * @return  JObject	 *	 * @since   3.1	 */	public static function getActions($categoryId = 0, $id = 0, $assetName = '')	{		// Reverted a change for version 2.5.6		$user	= JFactory::getUser();		$result	= new JObject;		$actions = array(			'core.admin', 'core.manage', 'core.create', 'core.edit', 'core.edit.own', 'core.edit.state', 'core.delete'		);		foreach ($actions as $action)		{			$result->set($action, $user->authorise($action, $assetName));		}		return $result;	}	/**	 * Gets the current language	 *	 * @param   boolean  $detectBrowser  Flag indicating whether to use the browser language as a fallback.	 *	 * @return  string  The language string	 *	 * @since   3.1	 */	public static function getCurrentLanguage($detectBrowser = true)	{		$app = JFactory::getApplication();		$langCode = $app->input->cookie->getString(JApplication::getHash('language'));		// No cookie - let's try to detect browser language or use site default		if (!$langCode)		{			if ($detectBrowser)			{				$langCode = JLanguageHelper::detectLanguage();			}			else			{				$langCode = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');			}		}		return $langCode;	}	/**	* Gets the associated language ID	*	* @param   string  $langCode  The language code to look up	*	* @return  integer  The language ID	*	* @since   3.1	*/	public static function getLanguageId($langCode)	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('lang_id')			->from('#__languages')			->where($db->quoteName('lang_code') . ' = ' . $db->quote($langCode));		$db->setQuery($query);		$id = $db->loadResult();		return $id;	}	/**	 * Gets a row of data from a table	 *	 * @param   JTable  $table  JTable instance for a row.	 *	 * @return  array  Associative array of all columns and values for a row in a table.	 *	 * @since   3.1	 */	public function getRowData($table)	{		$fields = $table->getFields();		$data = array();		foreach ($fields as &$field)		{			$columnName = $field->Field;			$value = $table->$columnName;			$data[$columnName] = $value;		}		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filters view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewFilters extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load the view data.		$this->items = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->total = $this->get('Total');		$this->state = $this->get('State');		FinderHelper::addSubmenu('filters');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Configure the toolbar.		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Method to configure the toolbar for this view.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		$canDo = FinderHelper::getActions();		JToolbarHelper::title(JText::_('COM_FINDER_FILTERS_TOOLBAR_TITLE'), 'finder');		$toolbar = JToolbar::getInstance('toolbar');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('filter.add');			JToolbarHelper::editList('filter.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publishList('filters.publish');			JToolbarHelper::unpublishList('filters.unpublish');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'filters.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_finder');		}		JToolbarHelper::divider();		$toolbar->appendButton('Popup', 'stats', 'COM_FINDER_STATISTICS', 'index.php?option=com_finder&view=statistics&tmpl=component', 550, 350);		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_FINDER_MANAGE_SEARCH_FILTERS');		JHtmlSidebar::setAction('index.php?option=com_finder&view=filters');		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'),			'filter_state',			JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'))		);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a button to render an HTML element in a slider container * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonSlider extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Slider';	/**	 * Fetch the HTML for the button	 *	 * @param   string   $type     Unused string, formerly button type.	 * @param   string   $name     Button name	 * @param   string   $text     The link text	 * @param   string   $url      URL for popup	 * @param   integer  $width    Width of popup	 * @param   integer  $height   Height of popup	 * @param   string   $onClose  JavaScript for the onClose event.	 *	 * @return  string  HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Slider', $name = '', $text = '', $url = '', $width = 640, $height = 480, $onClose = '')	{		JHtml::_('script', 'jui/cms.js', false, true);		$text = JText::_($text);		$class = 'cog';		$doTask = $this->_getCommand($url);		$html = "<button class=\"btn btn-small\" data-toggle=\"collapse\" data-target=\"#collapse-" . $name . "\" rel=\"{onClose: function() {" . $onClose			. "}}\" onClick=\"Joomla.setcollapse('$doTask', '$name', '$height');\">\n";		$html .= "<i class=\"icon-$class\">\n";		$html .= "</i>\n";		$html .= "$text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button id	 *	 * @param   string  $type  Button type	 * @param   string  $name  Button name	 *	 * @return  string	Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type, $name)	{		return $this->_parent->getName() . '-slider-' . $name;	}	/**	 * Get the JavaScript command for the button	 *	 * @param   string  $url  URL for popup	 *	 * @return  string  JavaScript command string	 *	 * @since   3.0	 */	private function _getCommand($url)	{		if (substr($url, 0, 4) !== 'http')		{			$url = JURI::base() . $url;		}		return $url;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User note edit view * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersViewNote extends JViewLegacy{	/**	 * The edit form.	 *	 * @var    JForm	 * @since  2.5	 */	protected $form;	/**	 * The item data.	 *	 * @var    object	 * @since  2.5	 */	protected $item;	/**	 * The model state.	 *	 * @var    JObject	 * @since  2.5	 */	protected $state;	/**	 * Override the display method for the view.	 *	 * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Initialise view variables.		$this->state = $this->get('State');		$this->item = $this->get('Item');		$this->form = $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			throw new Exception(implode("\n", $errors), 500);		}		// Get the component HTML helpers		JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');		parent::display($tpl);		$this->addToolbar();	}	/**	 * Display the toolbar.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		$input = JFactory::getApplication()->input;		$input->set('hidemainmenu', 1);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		$canDo		= UsersHelper::getActions($this->state->get('filter.category_id'), $this->item->id);		JToolbarHelper::title(JText::_('COM_USERS_NOTES'), 'user');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit') || (count($user->getAuthorisedCategories('com_users', 'core.create')))))		{			JToolbarHelper::apply('note.apply');			JToolbarHelper::save('note.save');		}		if (!$checkedOut && (count($user->getAuthorisedCategories('com_users', 'core.create'))))		{			JToolbarHelper::save2new('note.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && (count($user->getAuthorisedCategories('com_users', 'core.create')) > 0))		{			JToolbarHelper::save2copy('note.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('note.cancel');		}		else		{			JToolbarHelper::cancel('note.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_USER_NOTES_EDIT');	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JMenu class * * @package     Joomla.Libraries * @subpackage  Menu * @since       1.5 */class JMenuSite extends JMenu{	/**	 * Loads the entire menu table into memory.	 *	 * @return  array	 */	public function load()	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('m.id, m.menutype, m.title, m.alias, m.note, m.path AS route, m.link, m.type, m.level, m.language')			->select($db->quoteName('m.browserNav') . ', m.access, m.params, m.home, m.img, m.template_style_id, m.component_id, m.parent_id')			->select('e.element as component')			->from('#__menu AS m')			->join('LEFT', '#__extensions AS e ON m.component_id = e.extension_id')			->where('m.published = 1')			->where('m.parent_id > 0')			->where('m.client_id = 0')			->order('m.lft');		// Set the query		$db->setQuery($query);		try		{			$this->_items = $db->loadObjectList('id');		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, JText::sprintf('JERROR_LOADING_MENUS', $e->getMessage()));			return false;		}		foreach ($this->_items as &$item)		{			// Get parent information.			$parent_tree = array();			if (isset($this->_items[$item->parent_id]))			{				$parent_tree  = $this->_items[$item->parent_id]->tree;			}			// Create tree.			$parent_tree[] = $item->id;			$item->tree = $parent_tree;			// Create the query array.			$url = str_replace('index.php?', '', $item->link);			$url = str_replace('&amp;', '&', $url);			parse_str($url, $item->query);		}	}	/**	 * Gets menu items by attribute	 *	 * @param   string   $attributes  The field name	 * @param   string   $values      The value of the field	 * @param   boolean  $firstonly   If true, only returns the first item found	 *	 * @return  array	 */	public function getItems($attributes, $values, $firstonly = false)	{		$attributes = (array) $attributes;		$values 	= (array) $values;		$app		= JApplication::getInstance('site');		if ($app->isSite())		{			// Filter by language if not set			if (($key = array_search('language', $attributes)) === false)			{				if (JLanguageMultilang::isEnabled())				{					$attributes[] 	= 'language';					$values[] 		= array(JFactory::getLanguage()->getTag(), '*');				}			}			elseif ($values[$key] === null)			{				unset($attributes[$key]);				unset($values[$key]);			}			// Filter by access level if not set			if (($key = array_search('access', $attributes)) === false)			{				$attributes[] = 'access';				$values[] = JFactory::getUser()->getAuthorisedViewLevels();			}			elseif ($values[$key] === null)			{				unset($attributes[$key]);				unset($values[$key]);			}		}		// Reset arrays or we get a notice if some values were unset		$attributes = array_values($attributes);		$values = array_values($values);		return parent::getItems($attributes, $values, $firstonly);	}	/**	 * Get menu item by id	 *	 * @param   string  $language  The language code.	 *	 * @return  object  The item object	 *	 * @since   1.5	 */	public function getDefault($language = '*')	{		if (array_key_exists($language, $this->_default) && JApplication::getInstance('site')->getLanguageFilter())		{			return $this->_items[$this->_default[$language]];		}		elseif (array_key_exists('*', $this->_default))		{			return $this->_items[$this->_default['*']];		}		else		{			return 0;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect component helper. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectHelper{	public static $extension = 'com_redirect';	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 */	public static function addSubmenu($vName)	{		// No submenu for this component.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user		= JFactory::getUser();		$result		= new JObject;		$assetName	= 'com_redirect';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string  	The HTML code for the select tag	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '*', 'JALL');		$options[]	= JHtml::_('select.option', '1', 'JENABLED');		$options[]	= JHtml::_('select.option', '0', 'JDISABLED');		$options[]	= JHtml::_('select.option', '2', 'JARCHIVED');		$options[]	= JHtml::_('select.option', '-2', 'JTRASHED');		return $options;	}	/**	 * Determines if the plugin for Redirect to work is enabled.	 *	 * @return  boolean	 */	public static function isEnabled()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('enabled'))			->from('#__extensions')			->where($db->quoteName('folder') . ' = ' . $db->quote('system'))			->where($db->quoteName('element') . ' = ' . $db->quote('redirect'));		$db->setQuery($query);		try		{			$result = (boolean) $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $result;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Base class for rendering a display layout * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.0 */class JLayoutBase implements JLayout{	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @since   3.0	 */	public function escape($output)	{		return htmlspecialchars($output, ENT_COMPAT, 'UTF-8');	}	/**	 * Method to render the layout.	 *	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 *	 * @return  string  The necessary HTML to display the layout	 *	 * @since   3.0	 */	public function render($displayData)	{		return '';	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Base this model on the backend version.require_once JPATH_ADMINISTRATOR.'/components/com_content/models/article.php';/** * Content Component Article Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelForm extends ContentModelArticle{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication();		// Load state from the request.		$pk = $app->input->getInt('a_id');		$this->setState('article.id', $pk);		$this->setState('article.catid', $app->input->getInt('catid'));		$return = $app->input->get('return', null, 'base64');		$this->setState('return_page', base64_decode($return));		// Load the parameters.		$params	= $app->getParams();		$this->setState('params', $params);		$this->setState('layout', $app->input->get('layout'));	}	/**	 * Method to get article data.	 *	 * @param   integer	The id of the article.	 *	 * @return  mixed  Content item data object on success, false on failure.	 */	public function getItem($itemId = null)	{		$itemId = (int) (!empty($itemId)) ? $itemId : $this->getState('article.id');		// Get a row instance.		$table = $this->getTable();		// Attempt to load the row.		$return = $table->load($itemId);		// Check for a table object error.		if ($return === false && $table->getError())		{			$this->setError($table->getError());			return false;		}		$properties = $table->getProperties(1);		$value = JArrayHelper::toObject($properties, 'JObject');		// Convert attrib field to Registry.		$value->params = new JRegistry;		$value->params->loadString($value->attribs);		// Compute selected asset permissions.		$user	= JFactory::getUser();		$userId	= $user->get('id');		$asset	= 'com_content.article.'. $value->id;		// Check general edit permission first.		if ($user->authorise('core.edit', $asset))		{			$value->params->set('access-edit', true);		}		// Now check if edit.own is available.		elseif (!empty($userId) && $user->authorise('core.edit.own', $asset))		{			// Check for a valid user and that they are the owner.			if ($userId == $value->created_by)			{				$value->params->set('access-edit', true);			}		}		// Check edit state permission.		if ($itemId)		{			// Existing item			$value->params->set('access-change', $user->authorise('core.edit.state', $asset));		}		else		{			// New item.			$catId = (int) $this->getState('article.catid');			if ($catId)			{				$value->params->set('access-change', $user->authorise('core.edit.state', 'com_content.category.'.$catId));				$value->catid = $catId;			}			else			{				$value->params->set('access-change', $user->authorise('core.edit.state', 'com_content'));			}		}		$value->articletext = $value->introtext;		if (!empty($value->fulltext))		{			$value->articletext .= '<hr id="system-readmore" />'.$value->fulltext;		}		// Convert the metadata field to an array.		$registry = new JRegistry;		$registry->loadString($value->metadata);		$value->metadata = $registry->toArray();		if ($itemId)		{			$value->tags = new JHelperTags;			$value->tags->getTagIds($value->id, 'com_content.article');			$value->metadata['tags'] = $value->tags;		}		return $value;	}	/**	 * Get the return URL.	 *	 * @return  string	The return URL.	 * @since   1.6	 */	public function getReturnPage()	{		return base64_encode($this->getState('return_page'));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_tags component * * @param   array  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. * * @since   3.1 */function TagsBuildRoute(&$query){	$segments = array();	// Get a menu item based on Itemid or currently active	$app		= JFactory::getApplication();	$menu		= $app->getMenu();	$params		= JComponentHelper::getParams('com_tags');	$advanced	= $params->get('sef_advanced_link', 0);	// We need a menu item.  Either the one specified in the query, or the current active one if none specified	if (empty($query['Itemid'])) {		$menuItem = $menu->getActive();	}	else {		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mId   = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (is_array($mId))	{		JArrayHelper::toInteger($mId);	}	if (isset($query['view'])) {		$view = $query['view'];		if (empty($query['Itemid'])) {			$segments[] = $query['view'];		}		unset($query['view']);	}	// Are we dealing with a tag that is attached to a menu item?	if (isset($view) && ($mView == $view) and (isset($query['id'])) and ($mId == $query['id']))	{		unset($query['view']);		unset($query['id']);		return $segments;	}	if (isset($view) and $view == 'tag')	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'tag') {				if ($advanced) {					list($tmp, $id) = explode(':', $query['id'], 2);				}				else {					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);	}	if (isset($query['layout'])) {		if (!empty($query['Itemid']) && isset($menuItem->query['layout'])) {			if ($query['layout'] == $menuItem->query['layout']) {				unset($query['layout']);			}		}		else {			if ($query['layout'] == 'default') {				unset($query['layout']);			}		}	};	return $segments;}/** * Parse the segments of a URL. * * @param   array  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. * * @since   3.1 */function TagsParseRoute($segments){	$vars = array();	//Get the active menu item.	$app	= JFactory::getApplication();	$menu	= $app->getMenu();	$item	= $menu->getActive();	$params = JComponentHelper::getParams('com_tags');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for tags.	if (!isset($item))	{		$vars['view']	= $segments[0];		$vars['id']		= $segments[$count - 1];		return $vars;	}	// From the tags view, we can only jump to a tag.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$found = 0;	foreach($segments as $segment)	{		if ($found == 0)		{			$id = $segment;		}			$vars['id'] = $id;			$vars['view'] = 'tag';			break;	}	$found = 0;	return $vars;}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefaultlanguageHtml $this */?><?php echo JHtml::_('installation.stepbarlanguages'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a				class="btn"				href="#"				onclick="return Install.goToPage('languages');"				rel="prev"				title="<?php echo JText::_('JPREVIOUS'); ?>">				<i class="icon-arrow-left"></i>				<?php echo JText::_('JPREVIOUS'); ?>			</a>			<?php			// Check if ther is any languages to list, if not you cannot move forward			if ($this->items->administrator) :				?>				<a					class="btn btn-primary"					href="#"					onclick="Install.submitform();"					rel="next"					title="<?php echo JText::_('JNEXT'); ?>">					<i class="icon-arrow-right icon-white"></i>					<?php echo JText::_('JNEXT'); ?>				</a>				<?php endif; ?>		</div>	</div>	<h3><?php echo JText::_('INSTL_DEFAULTLANGUAGE_ADMINISTRATOR'); ?></h3>	<hr class="hr-condensed" />	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_DESC'); ?></p>	<table class="table table-striped table-condensed">		<tbody>		<tr>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_SELECT'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_LANGUAGE'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_TAG'); ?>			</th>		</tr>		</tbody>		<tbody>			<?php foreach ($this->items->administrator as $lang) : ?>			<tr>				<td>					<input						type="radio"						name="administratorlang"						value="<?php echo $lang->language; ?>"						<?php if ($lang->published) echo 'checked="checked"'; ?>					/>				</td>				<td align="center">					<?php echo $lang->name; ?>				</td>				<td align="center">					<?php echo $lang->language; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<h3><?php echo JText::_('INSTL_DEFAULTLANGUAGE_FRONTEND'); ?></h3>	<hr class="hr-condensed" />	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_DESC_FRONTEND'); ?></p>	<table class="table table-striped table-condensed">		<tbody>		<tr>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_SELECT'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_LANGUAGE'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_TAG'); ?>			</th>		</tr>		</tbody>		<tbody>		<?php foreach ($this->items->frontend as $lang) : ?>		<tr>			<td>				<input					type="radio"					name="frontendlang"					value="<?php echo $lang->language; ?>"					<?php if ($lang->published) echo 'checked="checked"'; ?>				/>			</td>			<td align="center">				<?php echo $lang->name; ?>			</td>			<td align="center">				<?php echo $lang->language; ?>			</td>		</tr>			<?php endforeach; ?>		</tbody>	</table>	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_NOTE'); ?></p>	<input type="hidden" name="task" value="setdefaultlanguage" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items  = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_WEBLINKS_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('text');/** * Form Field class for the Joomla Platform. * Supports a URL text field * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.url.html#input.url * @see         JFormRuleUrl for validation of full urls * @since       11.1 */class JFormFieldUrl extends JFormFieldText{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Url';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Indexer class supporting SQL Server for the Finder indexer package. * * The indexer class provides the core functionality of the Finder * search engine. It is responsible for adding and updating the * content links table; extracting and scoring tokens; and maintaining * all referential information for the content. * * Note: All exceptions thrown from within this class should be caught * by the controller. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.1 */class FinderIndexerDriverSqlsrv extends FinderIndexer{	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function index($item, $format = 'html')	{		// Mark beforeIndexing in the profiler.		static::$profiler ? static::$profiler->mark('beforeIndexing') : null;		$db = JFactory::getDbo();		$nd = $db->getNullDate();		// Check if the item is in the database.		$query = $db->getQuery(true)			->select($db->quoteName('link_id') . ', ' . $db->quoteName('md5sum'))			->from($db->quoteName('#__finder_links'))			->where($db->quoteName('url') . ' = ' . $db->quote($item->url));		// Load the item  from the database.		$db->setQuery($query);		$link = $db->loadObject();		// Get the indexer state.		$state = static::getState();		// Get the signatures of the item.		$curSig = static::getSignature($item);		$oldSig = isset($link->md5sum) ? $link->md5sum : null;		// Get the other item information.		$linkId = empty($link->link_id) ? null : $link->link_id;		$isNew = empty($link->link_id) ? true : false;		// Check the signatures. If they match, the item is up to date.		if (!$isNew && $curSig == $oldSig)		{			return $linkId;		}		/*		 * If the link already exists, flush all the term maps for the item.		 * Maps are stored in 16 tables so we need to iterate through and flush		 * each table one at a time.		 */		if (!$isNew)		{			for ($i = 0; $i <= 15; $i++)			{				// Flush the maps for the link.				$query->clear()					->delete($db->quoteName('#__finder_links_terms' . dechex($i)))					->where($db->quoteName('link_id') . ' = ' . (int) $linkId);				$db->setQuery($query);				$db->execute();			}			// Remove the taxonomy maps.			FinderIndexerTaxonomy::removeMaps($linkId);		}		// Mark afterUnmapping in the profiler.		static::$profiler ? static::$profiler->mark('afterUnmapping') : null;		// Perform cleanup on the item data.		$item->publish_start_date = (int) $item->publish_start_date != 0 ? $item->publish_start_date : $nd;		$item->publish_end_date = (int) $item->publish_end_date != 0 ? $item->publish_end_date : $nd;		$item->start_date = (int) $item->start_date != 0 ? $item->start_date : $nd;		$item->end_date = (int) $item->end_date != 0 ? $item->end_date : $nd;		// Prepare the item description.		$item->description = FinderIndexerHelper::parse($item->summary);		/*		 * Now, we need to enter the item into the links table. If the item		 * already exists in the database, we need to use an UPDATE query.		 * Otherwise, we need to use an INSERT to get the link id back.		 */		if ($isNew)		{			$columnsArray = array(				$db->quoteName('url'), $db->quoteName('route'), $db->quoteName('title'), $db->quoteName('description'),				$db->quoteName('indexdate'), $db->quoteName('published'), $db->quoteName('state'), $db->quoteName('access'),				$db->quoteName('language'), $db->quoteName('type_id'), $db->quoteName('object'), $db->quoteName('publish_start_date'),				$db->quoteName('publish_end_date'), $db->quoteName('start_date'), $db->quoteName('end_date'), $db->quoteName('list_price'),				$db->quoteName('sale_price')			);			// Insert the link.			$query->clear()				->insert($db->quoteName('#__finder_links'))				->columns($columnsArray)				->values(				$db->quote($item->url) . ', '				. $db->quote($item->route) . ', '				. $db->quote($item->title) . ', '				. $db->quote($item->description) . ', '				. $query->currentTimestamp() . ', '				. '1, '				. (int) $item->state . ', '				. (int) $item->access . ', '				. $db->quote($item->language) . ', '				. (int) $item->type_id . ', '				. $db->quote(serialize($item)) . ', '				. $db->quote($item->publish_start_date) . ', '				. $db->quote($item->publish_end_date) . ', '				. $db->quote($item->start_date) . ', '				. $db->quote($item->end_date) . ', '				. (double) ($item->list_price ? $item->list_price : 0) . ', '				. (double) ($item->sale_price ? $item->sale_price : 0)			);			$db->setQuery($query);			$db->execute();			// Get the link id.			$linkId = (int) $db->insertid();		}		else		{			// Update the link.			$query->clear()				->update($db->quoteName('#__finder_links'))				->set($db->quoteName('route') . ' = ' . $db->quote($item->route))				->set($db->quoteName('title') . ' = ' . $db->quote($item->title))				->set($db->quoteName('description') . ' = ' . $db->quote($item->description))				->set($db->quoteName('indexdate') . ' = ' . $query->currentTimestamp())				->set($db->quoteName('state') . ' = ' . (int) $item->state)				->set($db->quoteName('access') . ' = ' . (int) $item->access)				->set($db->quoteName('language') . ' = ' . $db->quote($item->language))				->set($db->quoteName('type_id') . ' = ' . (int) $item->type_id)				->set($db->quoteName('object') . ' = ' . $db->quote(serialize($item)))				->set($db->quoteName('publish_start_date') . ' = ' . $db->quote($item->publish_start_date))				->set($db->quoteName('publish_end_date') . ' = ' . $db->quote($item->publish_end_date))				->set($db->quoteName('start_date') . ' = ' . $db->quote($item->start_date))				->set($db->quoteName('end_date') . ' = ' . $db->quote($item->end_date))				->set($db->quoteName('list_price') . ' = ' . (double) ($item->list_price ? $item->list_price : 0))				->set($db->quoteName('sale_price') . ' = ' . (double) ($item->sale_price ? $item->sale_price : 0))				->where('link_id = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Set up the variables we will need during processing.		$tokens = array();		$count = 0;		// Mark afterLinking in the profiler.		static::$profiler ? static::$profiler->mark('afterLinking') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		/*		 * Process the item's content. The items can customize their		 * processing instructions to define extra properties to process		 * or rearrange how properties are weighted.		 */		foreach ($item->getInstructions() as $group => $properties)		{			// Iterate through the properties of the group.			foreach ($properties as $property)			{				// Check if the property exists in the item.				if (empty($item->$property))				{					continue;				}				// Tokenize the property.				if (is_array($item->$property))				{					// Tokenize an array of content and add it to the database.					foreach ($item->$property as $ip)					{						// If the group is path, we need to a few extra processing						// steps to strip the extension and convert slashes and dashes						// to spaces.						if ($group === static::PATH_CONTEXT)						{							$ip = JFile::stripExt($ip);							$ip = str_replace('/', ' ', $ip);							$ip = str_replace('-', ' ', $ip);						}						// Tokenize a string of content and add it to the database.						$count += $this->tokenizeToDB($ip, $group, $item->language, $format);						// Check if we're approaching the memory limit of the token table.						if ($count > static::$state->options->get('memory_table_limit', 30000))						{							$this->toggleTables(false);						}					}				}				else				{					// If the group is path, we need to a few extra processing					// steps to strip the extension and convert slashes and dashes					// to spaces.					if ($group === static::PATH_CONTEXT)					{						$item->$property = JFile::stripExt($item->$property);						$item->$property = str_replace('/', ' ', $item->$property);						$item->$property = str_replace('-', ' ', $item->$property);					}					// Tokenize a string of content and add it to the database.					$count += $this->tokenizeToDB($item->$property, $group, $item->language, $format);					// Check if we're approaching the memory limit of the token table.					if ($count > static::$state->options->get('memory_table_limit', 30000))					{						$this->toggleTables(false);					}				}			}		}		/*		 * Process the item's taxonomy. The items can customize their		 * taxonomy mappings to define extra properties to map.		 */		foreach ($item->getTaxonomy() as $branch => $nodes)		{			// Iterate through the nodes and map them to the branch.			foreach ($nodes as $node)			{				// Add the node to the tree.				$nodeId = FinderIndexerTaxonomy::addNode($branch, $node->title, $node->state, $node->access);				// Add the link => node map.				FinderIndexerTaxonomy::addMap($linkId, $nodeId);				// Tokenize the node title and add them to the database.				$count += $this->tokenizeToDB($node->title, static::META_CONTEXT, $item->language, $format);			}		}		// Mark afterProcessing in the profiler.		static::$profiler ? static::$profiler->mark('afterProcessing') : null;		/*		 * At this point, all of the item's content has been parsed, tokenized		 * and inserted into the #__finder_tokens table. Now, we need to		 * aggregate all the data into that table into a more usable form. The		 * aggregated data will be inserted into #__finder_tokens_aggregate		 * table.		 */		$query	= 'INSERT INTO ' . $db->quoteName('#__finder_tokens_aggregate') .				' (' . $db->quoteName('term_id') .				', ' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('term_weight') .				', ' . $db->quoteName('context') .				', ' . $db->quoteName('context_weight') .				', ' . $db->quoteName('language') . ')' .				' SELECT' .				' t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context,' .				' ROUND( t1.weight * COUNT( t2.term ) * %F, 8 ) AS context_weight, t1.language' .				' FROM (' .				'   SELECT DISTINCT t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				'   FROM ' . $db->quoteName('#__finder_tokens') . ' AS t1' .				'   WHERE t1.context = %d' .				' ) AS t1' .				' JOIN ' . $db->quoteName('#__finder_tokens') . ' AS t2 ON t2.term = t1.term' .				' LEFT JOIN ' . $db->quoteName('#__finder_terms') . ' AS t ON t.term = t1.term' .				' WHERE t2.context = %d' .				' GROUP BY t1.term, t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				' ORDER BY t1.term DESC';		// Iterate through the contexts and aggregate the tokens per context.		foreach ($state->weights as $context => $multiplier)		{			// Run the query to aggregate the tokens for this context..			$db->setQuery(sprintf($query, $multiplier, $context, $context));			$db->execute();		}		// Mark afterAggregating in the profiler.		static::$profiler ? static::$profiler->mark('afterAggregating') : null;		/*		 * When we pulled down all of the aggregate data, we did a LEFT JOIN		 * over the terms table to try to find all the term ids that		 * already exist for our tokens. If any of the rows in the aggregate		 * table have a term of 0, then no term record exists for that		 * term so we need to add it to the terms table.		 */		$db->setQuery(			'INSERT INTO ' . $db->quoteName('#__finder_terms') .			' (' . $db->quoteName('term') .			', ' . $db->quoteName('stem') .			', ' . $db->quoteName('common') .			', ' . $db->quoteName('phrase') .			', ' . $db->quoteName('weight') .			', ' . $db->quoteName('soundex') . ')' .			' SELECT ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term)' .			' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .			' WHERE ta.term_id IS NULL' .			' GROUP BY ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight'		);		$db->execute();		/*		 * Now, we just inserted a bunch of new records into the terms table		 * so we need to go back and update the aggregate table with all the		 * new term ids.		 */		$query = $db->getQuery(true)			->update('ta')			->set('ta.term_id = t.term_id from #__finder_tokens_aggregate AS ta INNER JOIN #__finder_terms AS t ON t.term = ta.term')			->where('ta.term_id IS NULL');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * After we've made sure that all of the terms are in the terms table		 * and the aggregate table has the correct term ids, we need to update		 * the links counter for each term by one.		 */		$query->clear()			->update('t')			->set('t.links = t.links + 1 FROM #__finder_terms AS t INNER JOIN #__finder_tokens_aggregate AS ta ON ta.term_id = t.term_id');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * Before we can insert all of the mapping rows, we have to figure out		 * which mapping table the rows need to be inserted into. The mapping		 * table for each term is based on the first character of the md5 of		 * the first character of the term. In php, it would be expressed as		 * substr(md5(substr($token, 0, 1)), 0, 1)		 */		$query->clear()			->update($db->quoteName('#__finder_tokens_aggregate'))			->set($db->quoteName('map_suffix') . " = SUBSTRING(HASHBYTES('MD5', SUBSTRING(" . $db->quoteName('term') . ', 1, 1)), 1, 1)');		$db->setQuery($query);		$db->execute();		/*		 * At this point, the aggregate table contains a record for each		 * term in each context. So, we're going to pull down all of that		 * data while grouping the records by term and add all of the		 * sub-totals together to arrive at the final total for each token for		 * this link. Then, we insert all of that data into the appropriate		 * mapping table.		 */		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			/*			 * We have to run this query 16 times, one for each link => term			 * mapping table.			 */			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_links_terms' . $suffix) .				' (' . $db->quoteName('link_id') .				', ' . $db->quoteName('term_id') .				', ' . $db->quoteName('weight') . ')' .				' SELECT ' . (int) $linkId . ', ' . $db->quoteName('term_id') . ',' .				' ROUND(SUM(' . $db->quoteName('context_weight') . '), 8)' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') .				' WHERE ' . $db->quoteName('map_suffix') . ' = ' . $db->quote($suffix) .				' GROUP BY term, term_id' .				' ORDER BY ' . $db->quoteName('term') . ' DESC'			);			$db->execute();		}		// Mark afterMapping in the profiler.		static::$profiler ? static::$profiler->mark('afterMapping') : null;		// Update the signature.		$query->clear()			->update($db->quoteName('#__finder_links'))			->set($db->quoteName('md5sum') . ' = ' . $db->quote($curSig))			->where($db->quoteName('link_id') . ' = ' . $db->quote($linkId));		$db->setQuery($query);		$db->execute();		// Mark afterSigning in the profiler.		static::$profiler ? static::$profiler->mark('afterSigning') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		// Toggle the token tables back to memory tables.		$this->toggleTables(true);		// Mark afterTruncating in the profiler.		static::$profiler ? static::$profiler->mark('afterTruncating') : null;		return $linkId;	}	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function remove($linkId)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Update the link counts and remove the mapping records.		for ($i = 0; $i <= 15; $i++)		{			// Update the link counts for the terms.			$query->update('t')				->set('t.links = t.links - 1 from #__finder_terms AS t INNER JOIN #__finder_links_terms' . dechex($i) . ' AS AS m ON m.term_id = t.term_id')				->where('m.link_id = ' . $db->quote((int) $linkId));			$db->setQuery($query);			$db->execute();			// Remove all records from the mapping tables.			$query->clear()				->delete($db->quoteName('#__finder_links_terms' . dechex($i)))				->where($db->quoteName('link_id') . ' = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Delete all orphaned terms.		$query->clear()			->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Delete the link from the index.		$query->clear()			->delete($db->quoteName('#__finder_links'))			->where($db->quoteName('link_id') . ' = ' . $db->quote((int) $linkId));		$db->setQuery($query);		$db->execute();		// Remove the taxonomy maps.		FinderIndexerTaxonomy::removeMaps($linkId);		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function optimize()	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Delete all orphaned terms.		$query->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	protected function addTokensToDB($tokens, $context = '')	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Force tokens to an array.		$tokens = is_array($tokens) ? $tokens : array($tokens);		// Count the number of token values.		$values = 0;		// Set some variables to count the iterations		$totalTokens = count($tokens);		$remaining   = $totalTokens;		$iterations  = 0;		$loop        = true;		do		{			// Shift the token off the array			$token = array_shift($tokens);			$query->values(				$db->quote($token->term) . ', '				. $db->quote($token->stem) . ', '				. (int) $token->common . ', '				. (int) $token->phrase . ', '				. (float) $token->weight . ', '				. (int) $context . ', '				. $db->quote($token->language)			);			$values++;			$iterations++;			$remaining--;			// Run the query if we've reached 1000 iterations or there are no tokens remaining			if ($iterations == 1000 || $remaining == 0)			{				// Insert the tokens into the database.				$query->insert($db->quoteName('#__finder_tokens'))					->columns(					array(						$db->quoteName('term'),						$db->quoteName('stem'),						$db->quoteName('common'),						$db->quoteName('phrase'),						$db->quoteName('weight'),						$db->quoteName('context'),						$db->quoteName('language')					)				);				$db->setQuery($query);				$db->execute();				// Reset the query				$query->clear();			}			// If there's nothing remaining, we're done looping			if ($remaining == 0)			{				$loop = false;			}		}		while ($loop == true);		return $values;	}	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	protected function toggleTables($memory)	{		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filter table class for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderTableFilter extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  &$db  JDatabaseDriver connector object.	 *	 * @since   2.5	 */	public function __construct(&$db)	{		parent::__construct('#__finder_filters', 'filter_id', $db);	}	/**	 * Method to bind an associative array or object to the JTable instance.  This	 * method only binds properties that are publicly accessible and optionally	 * takes an array of properties to ignore when binding.	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 *                          to ignore while binding. [optional]	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @since   2.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Method to perform sanity checks on the JTable instance properties to ensure	 * they are safe to store in the database.  Child classes should override this	 * method to make sure the data they are storing in the database is safe and	 * as expected before storage.	 *	 * @return  boolean  True if the instance is sane and able to be stored in the database.	 *	 * @since   2.5	 */	public function check()	{		if (trim($this->alias) == '')		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		// Check the end date is not earlier than start up.		if ($this->d2 > $this->_db->getNullDate() && $this->d2 < $this->d1)		{			// Swap the dates.			$temp = $this->d1;			$this->d1 = $this->d2;			$this->d2 = $temp;		}		return true;	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table. The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An array of primary key values to update.  If not	 *                            set the instance property value is used. [optional]	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published] [optional]	 * @param   integer  $userId  The user id of the user performing the operation. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k . '=' . implode(' OR ' . $k . '=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) $userId . ')';		}		// Update the publishing state for rows with the given primary keys.		$query = $this->_db->getQuery(true)			->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('state') . ' = ' . (int) $state)			->where($where);		$this->_db->setQuery($query . $checkin);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if ($this->filter_id)		{			// Existing item			$this->modified = $date->toSql();			$this->modified_by = $user->get('id');		}		else		{			// New item. A filter's created field can be set by the user,			// so we don't touch it if it is set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		if (is_array($this->data))		{			$this->map_count = count($this->data);			$this->data = implode(',', $this->data);		}		else		{			$this->map_count = 0;			$this->data = implode(',', array());		}		// Verify that the alias is unique		$table = JTable::getInstance('Filter', 'FinderTable');		if ($table->load(array('alias' => $this->alias)) && ($table->filter_id != $this->filter_id || $this->filter_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_ARTICLE_UNIQUE_ALIAS'));			return false;		}		return parent::store($updateNulls);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @return  array  A named array * @return  array */function BannersBuildRoute(&$query){	$segments = array();	if (isset($query['task']))	{		$segments[] = $query['task'];		unset($query['task']);	}	if (isset($query['id']))	{		$segments[] = $query['id'];		unset($query['id']);	}	return $segments;}/** * @return  array  A named array * @param   array * * Formats: * * index.php?/banners/task/id/Itemid * * index.php?/banners/id/Itemid */function BannersParseRoute($segments){	$vars = array();	// view is always the first element of the array	$count = count($segments);	if ($count)	{		$count--;		$segment = array_shift($segments);		if (is_numeric($segment))		{			$vars['id'] = $segment;		}		else		{			$vars['task'] = $segment;		}	}	if ($count)	{		$count--;		$segment = array_shift($segments);		if (is_numeric($segment))		{			$vars['id'] = $segment;		}	}	return $vars;}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_login * * @package     Joomla.Site * @subpackage  mod_login * @since       1.5 */class ModLoginHelper{	public static function getReturnURL($params, $type)	{		$app	= JFactory::getApplication();		$router = $app->getRouter();		$url = null;		if ($itemid = $params->get($type))		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select($db->quoteName('link'))				->from($db->quoteName('#__menu'))				->where($db->quoteName('published') . '=1')				->where($db->quoteName('id') . '=' . $db->quote($itemid));			$db->setQuery($query);			if ($link = $db->loadResult())			{				if ($router->getMode() == JROUTER_MODE_SEF)				{					$url = 'index.php?Itemid='.$itemid;				}				else {					$url = $link.'&Itemid='.$itemid;				}			}		}		if (!$url)		{			// Stay on the same page			$uri = clone JURI::getInstance();			$vars = $router->parse($uri);			unset($vars['lang']);			if ($router->getMode() == JROUTER_MODE_SEF)			{				if (isset($vars['Itemid']))				{					$itemid = $vars['Itemid'];					$menu = $app->getMenu();					$item = $menu->getItem($itemid);					unset($vars['Itemid']);					if (isset($item) && $vars == $item->query)					{						$url = 'index.php?Itemid='.$itemid;					}					else {						$url = 'index.php?'.JURI::buildQuery($vars).'&Itemid='.$itemid;					}				}				else				{					$url = 'index.php?'.JURI::buildQuery($vars);				}			}			else			{				$url = 'index.php?'.JURI::buildQuery($vars);			}		}		return base64_encode($url);	}	public static function getType()	{		$user = JFactory::getUser();		return (!$user->get('guest')) ? 'logout' : 'login';	}}
<?php/** * @package     Joomla.Libraries * @subpackage  CMS * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Route Helper * * A class providing basic routing for urls that are for content types found in * the #__content_types table and rows found in the #__ucm_content table. * * @package     Joomla.Libraries * @subpackage  CMS * @since       3.1 */class JHelperRoute{	/**	 * @var    array  Holds the reverse lookup	 * @since  3.1	 */	protected static $lookup;	/**	 * @var    string  Option for the extension (such as com_content)	 * @since  3.1	 */	protected  $extension;	/**	 * @var    string  Value of the primary key in the content type table	 * @since  3.1	 */	protected  $id;	/**	 * @var    string  Name of the view for the url	 * @since  3.1	 */	protected  $view;	/**	 * A method to get the route for a specific item	 *	 * @param   integer  $id         Value of the primary key for the item in its content table	 * @param   string   $typealias  The type_alias for the item being routed. Of the form extension.view.	 * @param   string   $link       The link to be routed	 * @param   string   $language   The language of the content for multilingual sites	 * @param   integer  $catid      Optional category id	 *	 * @return  string  The route of the item	 *	 * @since   3.1	 */	public function getRoute($id, $typealias, $link = '', $language = null, $catid = null)	{		$typeExploded = explode('.', $typealias);		$this->view = $typeExploded[1];		$this->extension = $typeExploded[0];		$name = ucfirst(substr_replace($this->extension, '', 0, 4));		if (isset($this->view))		{			$needles = array(				$this->view  => array((int) $id)			);		}		if (empty($link))		{			// Create the link			$link = 'index.php?option=' . $this->extension . '&view=' . $this->view . '&id=' . $id;		}		if ($catid > 1)		{			$categories = JCategories::getInstance($name);			if ($categories)			{				$category = $categories->get((int) $catid);				if ($category)				{					$needles['category'] = array_reverse($category->getPath());					$needles['categories'] = $needles['category'];					$link .= '&catid=' . $catid;				}			}		}		// Deal with languages only if needed		if (!empty($language) && $language != '*' && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang=' . $lang->sef;					$needles['language'] = $language;				}			}		}			if ($item = self::findItem($needles))			{				$link .= '&Itemid=' . $item;			}			elseif ($item = self::findItem())			{				$link .= '&Itemid=' . $item;			}		return $link;	}	/**	 * Method to find the item in the menu structure	 *	 * @param   array  $needles  Array of lookup values	 *	 * @return  mixed	 *	 * @since   3.1	 */	protected function findItem($needles = array())	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component = JComponentHelper::getComponent($this->extension);			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items = $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];					if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id']))					{						if (is_array($item->query['id']))						{							$item->query['id'] = $item->query['id'][0];						}						/*						 * Here it will become a bit tricky						 * $language != * can override existing entries						 * $language == * cannot override existing entries						 */						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && $active->component == $this->extension && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// If not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$template = $app->getTemplate();// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('bootstrap.framework');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (document.formvalidator.isValid(document.id('component-form')))		{			Joomla.submitform(task, document.getElementById('component-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_config');?>" id="component-form" method="post" name="adminForm" autocomplete="off" class="form-validate">	<?php	echo JHtml::_('tabs.start', 'config-tabs-' . $this->component->option.'_configuration', array('useCookie' => 1));		$fieldSets = $this->form->getFieldsets();		foreach ($fieldSets as $name => $fieldSet) :			$label = empty($fieldSet->label) ? 'COM_CONFIG_'.$name.'_FIELDSET_LABEL' : $fieldSet->label;			echo JHtml::_('tabs.panel', JText::_($label), 'publishing-details');			if (isset($fieldSet->description) && !empty($fieldSet->description)) :				echo '<p class="tab-description">'.JText::_($fieldSet->description).'</p>';			endif;	?>		<ul class="config-option-list">		<?php		foreach ($this->form->getFieldset($name) as $field):		?>			<li>			<?php if (!$field->hidden) : ?>			<?php echo $field->label; ?>			<?php endif; ?>			<?php echo $field->input; ?>			</li>		<?php		endforeach;		?>		</ul>	<div class="clr"></div>	<?php		endforeach;	echo JHtml::_('tabs.end');	?>	<div>		<input type="hidden" name="id" value="<?php echo $this->component->id;?>" />		<input type="hidden" name="component" value="<?php echo $this->component->option;?>" />		<input type="hidden" name="return" value="<?php echo $this->return;?>" />		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>		<li class="imgOutline thumbnail height-80 width-80 center">			<?php if ($user->authorise('core.delete', 'com_media')):?>				<a class="close delete-item" target="_top" href="index.php?option=com_media&amp;task=file.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_img->name; ?>" rel="<?php echo $this->_tmp_img->name; ?>" title="<?php echo JText::_('JACTION_DELETE');?>">x</a>				<input class="pull-left" type="checkbox" name="rm[]" value="<?php echo $this->_tmp_img->name; ?>" />				<div class="clearfix"></div>			<?php endif;?>			<div class="height-50">				<a class="img-preview" href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" >					<?php echo JHtml::_('image', COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_60, 'height' => $this->_tmp_img->height_60)); ?>				</a>			</div>			<div class="small">				<a href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" class="preview"><?php echo JHtml::_('string.truncate', $this->_tmp_img->name, 10, false); ?></a>			</div>		</li><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT_ADMINISTRATOR.'/models/weblink.php';/** * Weblinks model. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.6 */class WeblinksModelForm extends WeblinksModelWeblink{	/**	 * Get the return URL.	 *	 * @return  string	The return URL.	 * @since   1.6	 */	public function getReturnPage()	{		return base64_encode($this->getState('return_page'));	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication();		// Load state from the request.		$pk = $app->input->getInt('w_id');		$this->setState('weblink.id', $pk);		// Add compatibility variable for default naming conventions.		$this->setState('form.id', $pk);		$categoryId	= $app->input->getInt('catid');		$this->setState('weblink.catid', $categoryId);		$return = $app->input->get('return', null, 'base64');		if (!JUri::isInternal(base64_decode($return)))		{			$return = null;		}		$this->setState('return_page', base64_decode($return));		// Load the parameters.		$params	= $app->getParams();		$this->setState('params', $params);		$this->setState('layout', $app->input->get('layout'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_weblinks')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Weblinks');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of user groups. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewGroups extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		UsersHelper::addSubmenu('groups');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= UsersHelper::getActions();		JToolbarHelper::title(JText::_('COM_USERS_VIEW_GROUPS_TITLE'), 'groups');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('group.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('group.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'groups.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_users');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_USERS_GROUPS');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') !== '0') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_TAGS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<?php if ($this->items == false || $n == 0) : ?>		<p> <?php echo JText::_('COM_TAGS_NO_ITEMS'); ?></p></div>	<?php else : ?>		<table class="category table table-striped table-bordered table-hover">			<?php if ($this->params->get('show_headings')) : ?>			<thead>				<tr>					<th id="categorylist_header_title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'c.core_title', $listDirn, $listOrder); ?>					</th>					<?php if ($date = $this->params->get('tag_list_show_date')) : ?>						<th id="categorylist_header_date">							<?php if ($date == "created") : ?>								<?php echo JHtml::_('grid.sort', 'COM_TAGS_'.$date.'_DATE', 'c.core_created_time', $listDirn, $listOrder); ?>							<?php elseif ($date == "modified") : ?>								<?php echo JHtml::_('grid.sort', 'COM_TAGS_'.$date.'_DATE', 'c.core_modified_time', $listDirn, $listOrder); ?>							<?php elseif ($date == "published") : ?>								<?php echo JHtml::_('grid.sort', 'COM_TAGS_'.$date.'_DATE', 'c.core_publish_up', $listDirn, $listOrder); ?>							<?php endif; ?>						</th>					<?php endif; ?>				</tr>			</thead>			<?php endif; ?>			<tbody>				<?php foreach ($this->items as $i => $item) : ?>					<?php if ($this->items[$i]->core_state == 0) : ?>					 <tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">					<?php else: ?>					<tr class="cat-list-row<?php echo $i % 2; ?>" >					<?php endif; ?>						<td headers="categorylist_header_title" class="list-title">							<a href="<?php echo JRoute::_(TagsHelperRoute::getItemRoute($item->content_item_id, $item->core_alias, $item->core_catid, $item->core_language, $item->type_alias, $item->router)); ?>">								<?php echo $this->escape($item->core_title); ?>							</a>							<?php if ($item->core_state == 0) : ?>								<span class="list-published label label-warning">									<?php echo JText::_('JUNPUBLISHED'); ?>								</span>							<?php endif; ?>						</td>						<?php if ($this->params->get('tag_list_show_date')) : ?>							<td headers="categorylist_header_date" class="list-date small">								<?php								echo JHtml::_(									'date', $item->displayDate,									$this->escape($this->params->get('date_format', JText::_('DATE_FORMAT_LC3')))								); ?>							</td>						<?php endif; ?>					</tr>				<?php endforeach; ?>			</tbody>		</table></div>	<?php endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds list controller class. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsControllerNewsfeeds extends JControllerAdmin{	/**	 * Proxy for getModel.	 */	public function getModel($name = 'Newsfeed', $prefix = 'NewsfeedsModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}	protected function postDeleteHook(JModelLegacy $model, $ids = null)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a redirect link. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectViewLink extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$canDo		= RedirectHelper::getActions();		JToolbarHelper::title(JText::_('COM_REDIRECT_MANAGER_LINK'), 'redirect');		// If not checked out, can save the item.		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('link.apply');			JToolbarHelper::save('link.save');		}		// This component does not support Save as Copy due to uniqueness checks.		// While it can be done, it causes too much confusion if the user does		// not change the Old URL.		if ($canDo->get('core.edit') && $canDo->get('core.create'))		{			JToolbarHelper::save2new('link.save2new');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('link.cancel');		}		else		{			JToolbarHelper::cancel('link.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::help('JHELP_COMPONENTS_REDIRECT_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Route Helper * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */abstract class NewsfeedsHelperRoute{	protected static $lookup;	/**	 * @param   integer  The route of the newsfeed	 */	public static function getNewsfeedRoute($id, $catid, $language = 0)	{		$needles = array(			'newsfeed'  => array((int) $id)		);		//Create the link		$link = 'index.php?option=com_newsfeeds&view=newsfeed&id='. $id;		if ((int) $catid > 1)		{			$categories = JCategories::getInstance('Newsfeeds');			$category = $categories->get((int) $catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$needles['category'] = array_reverse($category->getPath());				$needles['categories'] = $needles['category'];				$link .= '&catid='.$catid;			}		}		if ($language && $language != "*" && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang='.$lang->sef;					$needles['language'] = $language;				}			}		}		if ($item = self::_findItem($needles))		{			$link .= '&Itemid='.$item;		}		elseif ($item = self::_findItem())		{			$link .= '&Itemid='.$item;		}		return $link;	}	public static function getCategoryRoute($catid, $language = 0)	{		if ($catid instanceof JCategoryNode)		{			$id = $catid->id;			$category = $catid;		}		else		{			$id = (int) $catid;			$category = JCategories::getInstance('Newsfeeds')->get($id);		}		if ($id < 1)		{			$link = '';		}		else		{			//Create the link			$link = 'index.php?option=com_newsfeeds&view=category&id='.$id;			$needles = array(				'category' => array($id)			);			if ($language && $language != "*" && JLanguageMultilang::isEnabled())			{				$db		= JFactory::getDbo();				$query	= $db->getQuery(true)					->select('a.sef AS sef')					->select('a.lang_code AS lang_code')					->from('#__languages AS a');				$db->setQuery($query);				$langs = $db->loadObjectList();				foreach ($langs as $lang)				{					if ($language == $lang->lang_code)					{						$link .= '&lang='.$lang->sef;						$needles['language'] = $language;					}				}			}			if ($item = self::_findItem($needles))			{				$link .= '&Itemid='.$item;			}			else			{				if ($category)				{					$catids = array_reverse($category->getPath());					$needles = array(						'category' => $catids,						'categories' => $catids					);					if ($item = self::_findItem($needles))					{						$link .= '&Itemid='.$item;					}					elseif ($item = self::_findItem())					{						$link .= '&Itemid='.$item;					}				}			}		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component	= JComponentHelper::getComponent('com_newsfeeds');			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items = $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];				if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id']))					{						// here it will become a bit tricky						// language != * can override existing entries						// language == * cannot override existing entries						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// if not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of available database connections, optionally limiting to * a given list. * * @package     Joomla.Platform * @subpackage  Form * @see         JDatabaseDriver * @since       11.3 */class JFormFieldDatabaseConnection extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.3	 */	public $type = 'DatabaseConnection';	/**	 * Method to get the list of database options.	 *	 * This method produces a drop down list of available databases supported	 * by JDatabaseDriver classes that are also supported by the application.	 *	 * @return  array    The field option objects.	 *	 * @since   11.3	 * @see		JDatabaseDriver	 */	protected function getOptions()	{		// This gets the connectors available in the platform and supported by the server.		$available = JDatabaseDriver::getConnectors();		/**		 * This gets the list of database types supported by the application.		 * This should be entered in the form definition as a comma separated list.		 * If no supported databases are listed, it is assumed all available databases		 * are supported.		 */		$supported = $this->element['supported'];		if (!empty($supported))		{			$supported = explode(',', $supported);			foreach ($supported as $support)			{				if (in_array($support, $available))				{					$options[$support] = JText::_(ucfirst($support));				}			}		}		else		{			foreach ($available as $support)			{				$options[$support] = JText::_(ucfirst($support));			}		}		// This will come into play if an application is installed that requires		// a database that is not available on the server.		if (empty($options))		{			$options[''] = JText::_('JNONE');		}		return $options;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the default application languages for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSetdefaultlanguage extends JControllerBase{	/**	 * Constructor.	 *	 * @since   3.1	 */	public function __construct()	{		parent::__construct();		// Overrides application config and set the configuration.php file so tokens and database works		JFactory::$config = null;		JFactory::getConfig(JPATH_SITE . '/configuration.php');		JFactory::$session = null;	}	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the languages model.		$model = new InstallationModelLanguages;		// Check for request forgeries in the administrator language		$admin_lang = $this->input->getString('administratorlang', false);		// Check that the string is an ISO Language Code avoiding any injection.		if (!preg_match('/^[a-z]{2}(\-[A-Z]{2})?$/', $admin_lang))		{			$admin_lang = 'en-GB';		}		// Attempt to set the default administrator language		if (!$model->setDefault($admin_lang, 'administrator'))		{			// Create a error response message.			$app->enqueueMessage(JText::_('INSTL_DEFAULTLANGUAGE_ADMIN_COULDNT_SET_DEFAULT'), 'error');		}		else		{			// Create a response body.			$app->enqueueMessage(JText::sprintf('INSTL_DEFAULTLANGUAGE_ADMIN_SET_DEFAULT', $admin_lang));		}		// Check for request forgeries in the site language		$frontend_lang = $this->input->getString('frontendlang', false);		// Check that the string is an ISO Language Code avoiding any injection.		if (!preg_match('/^[a-z]{2}(\-[A-Z]{2})?$/', $frontend_lang))		{			$frontend_lang = 'en-GB';		}		// Attempt to set the default site language		if (!$model->setDefault($frontend_lang, 'site'))		{			// Create a error response message.			$app->enqueueMessage(JText::_('INSTL_DEFAULTLANGUAGE_FRONTEND_COULDNT_SET_DEFAULT'), 'error');		}		else		{			// Create a response body.			$app->enqueueMessage(JText::sprintf('INSTL_DEFAULTLANGUAGE_FRONTEND_SET_DEFAULT', $frontend_lang));		}		$r = new stdClass;		// Redirect to the final page.		$r->view = 'remove';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Load tooltips behaviorJHtml::_('behavior.formvalidation');JHtml::_('behavior.tooltip');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'application.cancel' || document.formvalidator.isValid(document.id('application-form')))		{			Joomla.submitform(task, document.getElementById('application-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_config');?>" id="application-form" method="post" name="adminForm" class="form-validate">	<div class="row-fluid">		<!-- Begin Sidebar -->		<div id="sidebar" class="span2">			<div class="sidebar-nav">				<?php echo $this->loadTemplate('navigation'); ?>				<?php					// Display the submenu position modules					$this->submenumodules = JModuleHelper::getModules('submenu');					foreach ($this->submenumodules as $submenumodule)					{						$output = JModuleHelper::renderModule($submenumodule);						$params = new JRegistry;						$params->loadString($submenumodule->params);						echo $output;					}				?>			</div>		</div>		<!-- End Sidebar -->		<!-- Begin Content -->		<div class="span10">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'page-site')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-site', JText::_('JSITE', true)); ?>					<div class="row-fluid">						<div class="span6">							<?php echo $this->loadTemplate('site'); ?>							<?php echo $this->loadTemplate('metadata'); ?>						</div>						<div class="span6">							<?php echo $this->loadTemplate('seo'); ?>							<?php echo $this->loadTemplate('cookie'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-system', JText::_('COM_CONFIG_SYSTEM', true)); ?>					<div class="row-fluid">						<div class="span6">							<?php echo $this->loadTemplate('system'); ?>							<?php echo $this->loadTemplate('debug'); ?>						</div>						<div class="span6">							<?php echo $this->loadTemplate('cache'); ?>							<?php echo $this->loadTemplate('session'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-server', JText::_('COM_CONFIG_SERVER', true)); ?>					<div class="row-fluid">						<div class="span6">							<?php echo $this->loadTemplate('server'); ?>							<?php echo $this->loadTemplate('locale'); ?>							<?php echo $this->loadTemplate('ftp'); ?>						</div>						<div class="span6">							<?php echo $this->loadTemplate('database'); ?>							<?php echo $this->loadTemplate('mail'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-permissions', JText::_('COM_CONFIG_PERMISSIONS', true)); ?>					<div class="row-fluid">						<?php echo $this->loadTemplate('permissions'); ?>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-filters', JText::_('COM_CONFIG_TEXT_FILTERS', true)); ?>					<div class="row-fluid">						<?php echo $this->loadTemplate('filters'); ?>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php if ($this->ftp) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-ftp', JText::_('COM_CONFIG_FTP_SETTINGS', true)); ?>						<?php echo $this->loadTemplate('ftplogin'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTabSet'); ?>				<input type="hidden" name="task" value="" />				<?php echo JHtml::_('form.token'); ?>			</div>		<!-- End Content -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of newsfeeds. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsViewNewsfeeds extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		NewsfeedsHelper::addSubmenu('newsfeeds');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= NewsfeedsHelper::getActions($state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_NEWSFEEDS_MANAGER_NEWSFEEDS'), 'newsfeeds.png');		if (count($user->getAuthorisedCategories('com_newsfeeds', 'core.create')) > 0)		{			JToolbarHelper::addNew('newsfeed.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('newsfeed.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('newsfeeds.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('newsfeeds.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('newsfeeds.archive');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::checkin('newsfeeds.checkin');			}		if ($state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'newsfeeds.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('newsfeeds.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_newsfeeds');		}		JToolbarHelper::help('JHELP_COMPONENTS_NEWSFEEDS_FEEDS');		JHtmlSidebar::setAction('index.php?option=com_newsfeeds&view=newsfeeds');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.name' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'numarticles' => JText::_('COM_NEWSFEEDS_NUM_ARTICLES_HEADING'),			'a.cache_time' => JText::_('COM_NEWSFEEDS_CACHE_TIME_HEADING'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla Controller * * Controller (Controllers are where you put all the actual code.) Provides basic * functionality, such as rendering views (aka displaying templates). * * @package     Joomla.Legacy * @subpackage  Controller * @since       12.2 */class JControllerLegacy extends JObject{	/**	 * The base path of the controller	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _basePath.	 */	protected $basePath;	/**	 * The default view for the display method.	 *	 * @var    string	 * @since  12.2	 */	protected $default_view;	/**	 * The mapped task that was performed.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _doTask.	 */	protected $doTask;	/**	 * Redirect message.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _message.	 */	protected $message;	/**	 * Redirect message type.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _messageType.	 */	protected $messageType;	/**	 * Array of class methods	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _methods.	 */	protected $methods;	/**	 * The name of the controller	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _name.	 */	protected $name;	/**	 * The prefix of the models	 *	 * @var    string	 * @since  12.2	 */	protected $model_prefix;	/**	 * The set of search directories for resources (views).	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _path.	 */	protected $paths;	/**	 * URL for redirection.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _redirect.	 */	protected $redirect;	/**	 * Current or most recently performed task.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _task.	 */	protected $task;	/**	 * Array of class methods to call for a given task.	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _taskMap.	 */	protected $taskMap;	/**	 * Hold a JInput object for easier access to the input variables.	 *	 * @var    JInput	 * @since  12.2	 */	protected $input;	/**	 * Instance container.	 *	 * @var    JControllerLegacy	 * @since  12.2	 */	protected static $instance;	/**	 * Adds to the stack of model paths in LIFO order.	 *	 * @param   mixed   $path    The directory (string), or list of directories (array) to add.	 * @param   string  $prefix  A prefix for models	 *	 * @return  void	 */	public static function addModelPath($path, $prefix = '')	{		JModelLegacy::addIncludePath($path, $prefix);	}	/**	 * Create the filename for a resource.	 *	 * @param   string  $type   The resource type to create the filename for.	 * @param   array   $parts  An associative array of filename information. Optional.	 *	 * @return  string  The filename.	 *	 * @note    Replaced _createFileName.	 * @since   12.2	 */	protected static function createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'controller':				if (!empty($parts['format']))				{					if ($parts['format'] == 'html')					{						$parts['format'] = '';					}					else					{						$parts['format'] = '.' . $parts['format'];					}				}				else				{					$parts['format'] = '';				}				$filename = strtolower($parts['name'] . $parts['format'] . '.php');				break;			case 'view':				if (!empty($parts['type']))				{					$parts['type'] = '.' . $parts['type'];				}				else				{					$parts['type'] = '';				}				$filename = strtolower($parts['name'] . '/view' . $parts['type'] . '.php');				break;		}		return $filename;	}	/**	 * Method to get a singleton controller instance.	 *	 * @param   string  $prefix  The prefix for the controller.	 * @param   array   $config  An array of optional constructor options.	 *	 * @return  JControllerLegacy	 *	 * @since   12.2	 * @throws  Exception if the controller cannot be loaded.	 */	public static function getInstance($prefix, $config = array())	{		if (is_object(self::$instance))		{			return self::$instance;		}		$input = JFactory::getApplication()->input;		// Get the environment configuration.		$basePath = array_key_exists('base_path', $config) ? $config['base_path'] : JPATH_COMPONENT;		$format   = $input->getWord('format');		$command  = $input->get('task', 'display');		// Check for array format.		$filter = JFilterInput::getInstance();		if (is_array($command))		{			$command = $filter->clean(array_pop(array_keys($command)), 'cmd');		}		else		{			$command = $filter->clean($command, 'cmd');		}		// Check for a controller.task command.		if (strpos($command, '.') !== false)		{			// Explode the controller.task command.			list ($type, $task) = explode('.', $command);			// Define the controller filename and path.			$file = self::createFileName('controller', array('name' => $type, 'format' => $format));			$path = $basePath . '/controllers/' . $file;			// Reset the task without the controller context.			$input->set('task', $task);		}		else		{			// Base controller.			$type = null;			$task = $command;			// Define the controller filename and path.			$file       = self::createFileName('controller', array('name' => 'controller', 'format' => $format));			$path       = $basePath . '/' . $file;			$backupfile = self::createFileName('controller', array('name' => 'controller'));			$backuppath = $basePath . '/' . $backupfile;		}		// Get the controller class name.		$class = ucfirst($prefix) . 'Controller' . ucfirst($type);		// Include the class if not present.		if (!class_exists($class))		{			// If the controller file path exists, include it.			if (file_exists($path))			{				require_once $path;			}			elseif (isset($backuppath) && file_exists($backuppath))			{				require_once $backuppath;			}			else			{				throw new InvalidArgumentException(JText::sprintf('JLIB_APPLICATION_ERROR_INVALID_CONTROLLER', $type, $format));			}		}		// Instantiate the class.		if (class_exists($class))		{			self::$instance = new $class($config);		}		else		{			throw new InvalidArgumentException(JText::sprintf('JLIB_APPLICATION_ERROR_INVALID_CONTROLLER_CLASS', $class));		}		return self::$instance;	}	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 * Recognized key values include 'name', 'default_task', 'model_path', and	 * 'view_path' (this list is not meant to be comprehensive).	 *	 * @since   12.2	 */	public function __construct($config = array())	{		$this->methods = array();		$this->message = null;		$this->messageType = 'message';		$this->paths = array();		$this->redirect = null;		$this->taskMap = array();		if (defined('JDEBUG') && JDEBUG)		{			JLog::addLogger(array('text_file' => 'jcontroller.log.php'), JLog::ALL, array('controller'));		}		$this->input = JFactory::getApplication()->input;		// Determine the methods to exclude from the base class.		$xMethods = get_class_methods('JControllerLegacy');		// Get the public methods in this class using reflection.		$r = new ReflectionClass($this);		$rMethods = $r->getMethods(ReflectionMethod::IS_PUBLIC);		foreach ($rMethods as $rMethod)		{			$mName = $rMethod->getName();			// Add default display method if not explicitly declared.			if (!in_array($mName, $xMethods) || $mName == 'display')			{				$this->methods[] = strtolower($mName);				// Auto register the methods as tasks.				$this->taskMap[strtolower($mName)] = $mName;			}		}		// Set the view name		if (empty($this->name))		{			if (array_key_exists('name', $config))			{				$this->name = $config['name'];			}			else			{				$this->name = $this->getName();			}		}		// Set a base path for use by the controller		if (array_key_exists('base_path', $config))		{			$this->basePath = $config['base_path'];		}		else		{			$this->basePath = JPATH_COMPONENT;		}		// If the default task is set, register it as such		if (array_key_exists('default_task', $config))		{			$this->registerDefaultTask($config['default_task']);		}		else		{			$this->registerDefaultTask('display');		}		// Set the models prefix		if (empty($this->model_prefix))		{			if (array_key_exists('model_prefix', $config))			{				// User-defined prefix				$this->model_prefix = $config['model_prefix'];			}			else			{				$this->model_prefix = $this->name . 'Model';			}		}		// Set the default model search path		if (array_key_exists('model_path', $config))		{			// User-defined dirs			$this->addModelPath($config['model_path'], $this->model_prefix);		}		else		{			$this->addModelPath($this->basePath . '/models', $this->model_prefix);		}		// Set the default view search path		if (array_key_exists('view_path', $config))		{			// User-defined dirs			$this->setPath('view', $config['view_path']);		}		else		{			$this->setPath('view', $this->basePath . '/views');		}		// Set the default view.		if (array_key_exists('default_view', $config))		{			$this->default_view = $config['default_view'];		}		elseif (empty($this->default_view))		{			$this->default_view = $this->getName();		}	}	/**	 * Adds to the search path for templates and resources.	 *	 * @param   string  $type  The path type (e.g. 'model', 'view').	 * @param   mixed   $path  The directory string  or stream array to search.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 * @note    Replaces _addPath.	 */	protected function addPath($type, $path)	{		// Just force path to array		settype($path, 'array');		if (!isset($this->paths[$type]))		{			$this->paths[$type] = array();		}		// Loop through the path directories		foreach ($path as $dir)		{			// No surrounding spaces allowed!			$dir = rtrim(JPath::check($dir, '/'), '/') . '/';			// Add to the top of the search dirs			array_unshift($this->paths[$type], $dir);		}		return $this;	}	/**	 * Add one or more view paths to the controller's stack, in LIFO order.	 *	 * @param   mixed  $path  The directory (string) or list of directories (array) to add.	 *	 * @return  JControllerLegacy  This object to support chaining.	 */	public function addViewPath($path)	{		$this->addPath('view', $path);		return $this;	}	/**	 * Authorisation check	 *	 * @param   string  $task  The ACO Section Value to check access on.	 *	 * @return  boolean  True if authorised	 *	 * @since   12.2	 * @deprecated  13.3  Use JAccess instead.	 */	public function authorise($task)	{		JLog::add(__METHOD__ . ' is deprecated. Use JAccess instead.', JLog::WARNING, 'deprecated');		return true;	}	/**	 * Method to check whether an ID is in the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  boolean  True if the ID is in the edit list.	 *	 * @since   12.2	 */	protected function checkEditId($context, $id)	{		if ($id)		{			$app = JFactory::getApplication();			$values = (array) $app->getUserState($context . '.id');			$result = in_array((int) $id, $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Checking edit ID %s.%s: %d %s',						$context,						$id,						(int) $result,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}			return $result;		}		else		{			// No id for a new item.			return true;		}	}	/**	 * Method to load and return a model object.	 *	 * @param   string  $name    The name of the model.	 * @param   string  $prefix  Optional model prefix.	 * @param   array   $config  Configuration array for the model. Optional.	 *	 * @return  mixed   Model object on success; otherwise null failure.	 *	 * @since   12.2	 * @note    Replaces _createModel.	 */	protected function createModel($name, $prefix = '', $config = array())	{		// Clean the model name		$modelName = preg_replace('/[^A-Z0-9_]/i', '', $name);		$classPrefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		$result = JModelLegacy::getInstance($modelName, $classPrefix, $config);		return $result;	}	/**	 * Method to load and return a view object. This method first looks in the	 * current template directory for a match and, failing that, uses a default	 * set path to load the view class file.	 *	 * Note the "name, prefix, type" order of parameters, which differs from the	 * "name, type, prefix" order used in related public methods.	 *	 * @param   string  $name    The name of the view.	 * @param   string  $prefix  Optional prefix for the view class name.	 * @param   string  $type    The type of view.	 * @param   array   $config  Configuration array for the view. Optional.	 *	 * @return  mixed  View object on success; null or error result on failure.	 *	 * @since   12.2	 * @note    Replaces _createView.	 * @throws  Exception	 */	protected function createView($name, $prefix = '', $type = '', $config = array())	{		// Clean the view name		$viewName = preg_replace('/[^A-Z0-9_]/i', '', $name);		$classPrefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		$viewType = preg_replace('/[^A-Z0-9_]/i', '', $type);		// Build the view class name		$viewClass = $classPrefix . $viewName;		if (!class_exists($viewClass))		{			jimport('joomla.filesystem.path');			$path = JPath::find($this->paths['view'], $this->createFileName('view', array('name' => $viewName, 'type' => $viewType)));			if ($path)			{				require_once $path;				if (!class_exists($viewClass))				{					throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_VIEW_CLASS_NOT_FOUND', $viewClass, $path), 500);				}			}			else			{				return null;			}		}		return new $viewClass($config);	}	/**	 * Typical view method for MVC based architecture	 *	 * This function is provide as a default implementation, in most cases	 * you will need to override it in your own controllers.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function display($cachable = false, $urlparams = array())	{		$document = JFactory::getDocument();		$viewType = $document->getType();		$viewName = $this->input->get('view', $this->default_view);		$viewLayout = $this->input->get('layout', 'default');		$view = $this->getView($viewName, $viewType, '', array('base_path' => $this->basePath, 'layout' => $viewLayout));		// Get/Create the model		if ($model = $this->getModel($viewName))		{			// Push the model into the view (as default)			$view->setModel($model, true);		}		$view->document = $document;		$conf = JFactory::getConfig();		// Display the view		if ($cachable && $viewType != 'feed' && $conf->get('caching') >= 1)		{			$option = $this->input->get('option');			$cache = JFactory::getCache($option, 'view');			if (is_array($urlparams))			{				$app = JFactory::getApplication();				if (!empty($app->registeredurlparams))				{					$registeredurlparams = $app->registeredurlparams;				}				else				{					$registeredurlparams = new stdClass;				}				foreach ($urlparams as $key => $value)				{					// Add your safe url parameters with variable type as value {@see JFilterInput::clean()}.					$registeredurlparams->$key = $value;				}				$app->registeredurlparams = $registeredurlparams;			}			$cache->get($view, 'display');		}		else		{			$view->display();		}		return $this;	}	/**	 * Execute a task by triggering a method in the derived class.	 *	 * @param   string  $task  The task to perform. If no matching task is found, the '__default' task is executed, if defined.	 *	 * @return  mixed   The value returned by the called method, false in error case.	 *	 * @since   12.2	 * @throws  Exception	 */	public function execute($task)	{		$this->task = $task;		$task = strtolower($task);		if (isset($this->taskMap[$task]))		{			$doTask = $this->taskMap[$task];		}		elseif (isset($this->taskMap['__default']))		{			$doTask = $this->taskMap['__default'];		}		else		{			throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_TASK_NOT_FOUND', $task), 404);		}		// Record the actual task being fired		$this->doTask = $doTask;		return $this->$doTask();	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   12.2	 */	public function getModel($name = '', $prefix = '', $config = array())	{		if (empty($name))		{			$name = $this->getName();		}		if (empty($prefix))		{			$prefix = $this->model_prefix;		}		if ($model = $this->createModel($name, $prefix, $config))		{			// Task is a reserved state			$model->setState('task', $this->task);			// Let's get the application object and set menu information if it's available			$app = JFactory::getApplication();			$menu = $app->getMenu();			if (is_object($menu))			{				if ($item = $menu->getActive())				{					$params = $menu->getParams($item->id);					// Set default state data					$model->setState('parameters.menu', $params);				}			}		}		return $model;	}	/**	 * Method to get the controller name	 *	 * The dispatcher name is set by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the dispatcher	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->name))		{			$r = null;			if (!preg_match('/(.*)Controller/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_CONTROLLER_GET_NAME'), 500);			}			$this->name = strtolower($r[1]);		}		return $this->name;	}	/**	 * Get the last task that is being performed or was most recently performed.	 *	 * @return  string  The task that is being performed or was most recently performed.	 *	 * @since   12.2	 */	public function getTask()	{		return $this->task;	}	/**	 * Gets the available tasks in the controller.	 *	 * @return  array  Array[i] of task names.	 *	 * @since   12.2	 */	public function getTasks()	{		return $this->methods;	}	/**	 * Method to get a reference to the current view and load it if necessary.	 *	 * @param   string  $name    The view name. Optional, defaults to the controller name.	 * @param   string  $type    The view type. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for view. Optional.	 *	 * @return  JViewLegacy  Reference to the view or an error.	 *	 * @since   12.2	 * @throws  Exception	 */	public function getView($name = '', $type = '', $prefix = '', $config = array())	{		static $views;		if (!isset($views))		{			$views = array();		}		if (empty($name))		{			$name = $this->getName();		}		if (empty($prefix))		{			$prefix = $this->getName() . 'View';		}		if (empty($views[$name]))		{			if ($view = $this->createView($name, $prefix, $type, $config))			{				$views[$name] = & $view;			}			else			{				throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_VIEW_NOT_FOUND', $name, $type, $prefix), 500);			}		}		return $views[$name];	}	/**	 * Method to add a record ID to the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function holdEditId($context, $id)	{		$app = JFactory::getApplication();		$values = (array) $app->getUserState($context . '.id');		// Add the id to the list if non-zero.		if (!empty($id))		{			array_push($values, (int) $id);			$values = array_unique($values);			$app->setUserState($context . '.id', $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Holding edit ID %s.%s %s',						$context,						$id,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}		}	}	/**	 * Redirects the browser or returns false if no redirect is set.	 *	 * @return  boolean  False if no redirect exists.	 *	 * @since   12.2	 */	public function redirect()	{		if ($this->redirect)		{			$app = JFactory::getApplication();			$app->redirect($this->redirect, $this->message, $this->messageType);		}		return false;	}	/**	 * Register the default task to perform if a mapping is not found.	 *	 * @param   string  $method  The name of the method in the derived class to perform if a named task is not found.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function registerDefaultTask($method)	{		$this->registerTask('__default', $method);		return $this;	}	/**	 * Register (map) a task to a method in the class.	 *	 * @param   string  $task    The task.	 * @param   string  $method  The name of the method in the derived class to perform for this task.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function registerTask($task, $method)	{		if (in_array(strtolower($method), $this->methods))		{			$this->taskMap[strtolower($task)] = $method;		}		return $this;	}	/**	 * Unregister (unmap) a task in the class.	 *	 * @param   string  $task  The task.	 *	 * @return  JControllerLegacy  This object to support chaining.	 *	 * @since   12.2	 */	public function unregisterTask($task)	{		unset($this->taskMap[strtolower($task)]);		return $this;	}	/**	 * Method to check whether an ID is in the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function releaseEditId($context, $id)	{		$app = JFactory::getApplication();		$values = (array) $app->getUserState($context . '.id');		// Do a strict search of the edit list values.		$index = array_search((int) $id, $values, true);		if (is_int($index))		{			unset($values[$index]);			$app->setUserState($context . '.id', $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Releasing edit ID %s.%s %s',						$context,						$id,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}		}	}	/**	 * Sets the internal message that is passed with a redirect	 *	 * @param   string  $text  Message to display on redirect.	 * @param   string  $type  Message type. Optional, defaults to 'message'.	 *	 * @return  string  Previous message	 *	 * @since   12.2	 */	public function setMessage($text, $type = 'message')	{		$previous = $this->message;		$this->message = $text;		$this->messageType = $type;		return $previous;	}	/**	 * Sets an entire array of search paths for resources.	 *	 * @param   string  $type  The type of path to set, typically 'view' or 'model'.	 * @param   string  $path  The new set of search paths. If null or false, resets to the current directory only.	 *	 * @return  void	 *	 * @note    Replaces _setPath.	 * @since   12.2	 */	protected function setPath($type, $path)	{		// Clear out the prior search dirs		$this->paths[$type] = array();		// Actually add the user-specified directories		$this->addPath($type, $path);	}	/**	 * Set a URL for browser redirection.	 *	 * @param   string  $url   URL to redirect to.	 * @param   string  $msg   Message to display on redirect. Optional, defaults to value set internally by controller, if any.	 * @param   string  $type  Message type. Optional, defaults to 'message' or the type set by a previous call to setMessage.	 *	 * @return  JControllerLegacy  This object to support chaining.	 *	 * @since   12.2	 */	public function setRedirect($url, $msg = null, $type = null)	{		$this->redirect = $url;		if ($msg !== null)		{			// Controller may have set this directly			$this->message = $msg;		}		// Ensure the type is not overwritten by a previous call to setMessage.		if (empty($type))		{			if (empty($this->messageType))			{				$this->messageType = 'message';			}		}		// If the type is explicitly set, set it.		else		{			$this->messageType = $type;		}		return $this;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Page Cache Plugin * * @package     Joomla.Plugin * @subpackage  System.cache */class PlgSystemCache extends JPlugin{	var $_cache		= null;	var $_cache_key	= null;	/**	 * Constructor	 *	 * @access	protected	 * @param   object	$subject The object to observe	 * @param   array  $config  An array that holds the plugin configuration	 * @since   1.0	 */	function __construct(& $subject, $config)	{		parent::__construct($subject, $config);		//Set the language in the class		$config = JFactory::getConfig();		$options = array(			'defaultgroup'	=> 'page',			'browsercache'	=> $this->params->get('browsercache', false),			'caching'		=> false,		);		$this->_cache		= JCache::getInstance('page', $options);		$this->_cache_key	= JRequest::getURI();	}	/**	* Converting the site URL to fit to the HTTP request	*	*/	function onAfterInitialise()	{		global $_PROFILER;		$app  = JFactory::getApplication();		$user = JFactory::getUser();		if ($app->isAdmin() || JDEBUG)		{			return;		}		if (count($app->getMessageQueue()))		{			return;		}		if ($user->get('guest') && $app->input->getMethod() == 'GET')		{			$this->_cache->setCaching(true);		}		$data = $this->_cache->get($this->_cache_key);		if ($data !== false)		{			JResponse::setBody($data);			echo JResponse::toString($app->getCfg('gzip'));			if (JDEBUG)			{				$_PROFILER->mark('afterCache');				echo implode('', $_PROFILER->getBuffer());			}			$app->close();		}	}	function onAfterRender()	{		$app = JFactory::getApplication();		if ($app->isAdmin() || JDEBUG)		{			return;		}		if (count($app->getMessageQueue()))		{			return;		}		$user = JFactory::getUser();		if ($user->get('guest'))		{			//We need to check again here, because auto-login plugins have not been fired before the first aid check			$this->_cache->store($this->_cache_key);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi import driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseImporterMysqli extends JDatabaseImporter{	/**	 * @var    array  An array of cached data.	 * @since  11.1	 */	protected $cache = array();	/**	 * The database connector to use for exporting structure and/or data.	 *	 * @var    JDatabaseDriverMysql	 * @since  11.1	 */	protected $db = null;	/**	 * The input source.	 *	 * @var    mixed	 * @since  11.1	 */	protected $from = array();	/**	 * The type of input format (XML).	 *	 * @var    string	 * @since  11.1	 */	protected $asFormat = 'xml';	/**	 * An array of options for the exporter.	 *	 * @var    object	 * @since  11.1	 */	protected $options = null;	/**	 * Constructor.	 *	 * Sets up the default options for the exporter.	 *	 * @since   11.1	 */	public function __construct()	{		$this->options = new stdClass;		$this->cache = array('columns' => array(), 'keys' => array());		// Set up the class defaults:		// Import with only structure		$this->withStructure();		// Export as XML.		$this->asXml();		// Default destination is a string using $output = (string) $exporter;	}	/**	 * Set the output option for the exporter to XML format.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function asXml()	{		$this->asFormat = 'xml';		return $this;	}	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseImporterMysqli  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysqli))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Specifies the data source to import.	 *	 * @param   mixed  $from  The data source to import.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function from($from)	{		$this->from = $from;		return $this;	}	/**	 * Get the SQL syntax to add a column.	 *	 * @param   string            $table  The table name.	 * @param   SimpleXMLElement  $field  The XML field definition.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getAddColumnSQL($table, SimpleXMLElement $field)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' ADD COLUMN ' . $this->getColumnSQL($field);		return $query;	}	/**	 * Get the SQL syntax to add a key.	 *	 * @param   string  $table  The table name.	 * @param   array   $keys   An array of the fields pertaining to this key.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getAddKeySQL($table, $keys)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' ADD ' . $this->getKeySQL($keys);		return $query;	}	/**	 * Get alters for table if there is a difference.	 *	 * @param   SimpleXMLElement  $structure  The XML structure pf the table.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function getAlterTableSQL(SimpleXMLElement $structure)	{		$table = $this->getRealTableName($structure['name']);		$oldFields = $this->db->getTableColumns($table);		$oldKeys = $this->db->getTableKeys($table);		$alters = array();		// Get the fields and keys from the XML that we are aiming for.		$newFields = $structure->xpath('field');		$newKeys = $structure->xpath('key');		// Loop through each field in the new structure.		foreach ($newFields as $field)		{			$fName = (string) $field['Field'];			if (isset($oldFields[$fName]))			{				// The field exists, check it's the same.				$column = $oldFields[$fName];				// Test whether there is a change.				$change = ((string) $field['Type'] != $column->Type) || ((string) $field['Null'] != $column->Null)					|| ((string) $field['Default'] != $column->Default) || ((string) $field['Extra'] != $column->Extra);				if ($change)				{					$alters[] = $this->getChangeColumnSQL($table, $field);				}				// Unset this field so that what we have left are fields that need to be removed.				unset($oldFields[$fName]);			}			else			{				// The field is new.				$alters[] = $this->getAddColumnSQL($table, $field);			}		}		// Any columns left are orphans		foreach ($oldFields as $name => $column)		{			// Delete the column.			$alters[] = $this->getDropColumnSQL($table, $name);		}		// Get the lookups for the old and new keys.		$oldLookup = $this->getKeyLookup($oldKeys);		$newLookup = $this->getKeyLookup($newKeys);		// Loop through each key in the new structure.		foreach ($newLookup as $name => $keys)		{			// Check if there are keys on this field in the existing table.			if (isset($oldLookup[$name]))			{				$same = true;				$newCount = count($newLookup[$name]);				$oldCount = count($oldLookup[$name]);				// There is a key on this field in the old and new tables. Are they the same?				if ($newCount == $oldCount)				{					// Need to loop through each key and do a fine grained check.					for ($i = 0; $i < $newCount; $i++)					{						$same = (((string) $newLookup[$name][$i]['Non_unique'] == $oldLookup[$name][$i]->Non_unique)							&& ((string) $newLookup[$name][$i]['Column_name'] == $oldLookup[$name][$i]->Column_name)							&& ((string) $newLookup[$name][$i]['Seq_in_index'] == $oldLookup[$name][$i]->Seq_in_index)							&& ((string) $newLookup[$name][$i]['Collation'] == $oldLookup[$name][$i]->Collation)							&& ((string) $newLookup[$name][$i]['Index_type'] == $oldLookup[$name][$i]->Index_type));						/*						Debug.						echo '<pre>';						echo '<br />Non_unique:   '.							((string) $newLookup[$name][$i]['Non_unique'] == $oldLookup[$name][$i]->Non_unique ? 'Pass' : 'Fail').' '.							(string) $newLookup[$name][$i]['Non_unique'].' vs '.$oldLookup[$name][$i]->Non_unique;						echo '<br />Column_name:  '.							((string) $newLookup[$name][$i]['Column_name'] == $oldLookup[$name][$i]->Column_name ? 'Pass' : 'Fail').' '.							(string) $newLookup[$name][$i]['Column_name'].' vs '.$oldLookup[$name][$i]->Column_name;						echo '<br />Seq_in_index: '.							((string) $newLookup[$name][$i]['Seq_in_index'] == $oldLookup[$name][$i]->Seq_in_index ? 'Pass' : 'Fail').' '.							(string) $newLookup[$name][$i]['Seq_in_index'].' vs '.$oldLookup[$name][$i]->Seq_in_index;						echo '<br />Collation:    '.							((string) $newLookup[$name][$i]['Collation'] == $oldLookup[$name][$i]->Collation ? 'Pass' : 'Fail').' '.							(string) $newLookup[$name][$i]['Collation'].' vs '.$oldLookup[$name][$i]->Collation;						echo '<br />Index_type:   '.							((string) $newLookup[$name][$i]['Index_type'] == $oldLookup[$name][$i]->Index_type ? 'Pass' : 'Fail').' '.							(string) $newLookup[$name][$i]['Index_type'].' vs '.$oldLookup[$name][$i]->Index_type;						echo '<br />Same = '.($same ? 'true' : 'false');						echo '</pre>';						 */						if (!$same)						{							// Break out of the loop. No need to check further.							break;						}					}				}				else				{					// Count is different, just drop and add.					$same = false;				}				if (!$same)				{					$alters[] = $this->getDropKeySQL($table, $name);					$alters[] = $this->getAddKeySQL($table, $keys);				}				// Unset this field so that what we have left are fields that need to be removed.				unset($oldLookup[$name]);			}			else			{				// This is a new key.				$alters[] = $this->getAddKeySQL($table, $keys);			}		}		// Any keys left are orphans.		foreach ($oldLookup as $name => $keys)		{			if (strtoupper($name) == 'PRIMARY')			{				$alters[] = $this->getDropPrimaryKeySQL($table);			}			else			{				$alters[] = $this->getDropKeySQL($table, $name);			}		}		return $alters;	}	/**	 * Get the syntax to alter a column.	 *	 * @param   string            $table  The name of the database table to alter.	 * @param   SimpleXMLElement  $field  The XML definition for the field.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getChangeColumnSQL($table, SimpleXMLElement $field)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' CHANGE COLUMN ' . $this->db->quoteName((string) $field['Field']) . ' '			. $this->getColumnSQL($field);		return $query;	}	/**	 * Get the SQL syntax for a single column that would be included in a table create or alter statement.	 *	 * @param   SimpleXMLElement  $field  The XML field definition.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getColumnSQL(SimpleXMLElement $field)	{		// TODO Incorporate into parent class and use $this.		$blobs = array('text', 'smalltext', 'mediumtext', 'largetext');		$fName = (string) $field['Field'];		$fType = (string) $field['Type'];		$fNull = (string) $field['Null'];		$fDefault = isset($field['Default']) ? (string) $field['Default'] : null;		$fExtra = (string) $field['Extra'];		$query = $this->db->quoteName($fName) . ' ' . $fType;		if ($fNull == 'NO')		{			if (in_array($fType, $blobs) || $fDefault === null)			{				$query .= ' NOT NULL';			}			else			{				// TODO Don't quote numeric values.				$query .= ' NOT NULL DEFAULT ' . $this->db->quote($fDefault);			}		}		else		{			if ($fDefault === null)			{				$query .= ' DEFAULT NULL';			}			else			{				// TODO Don't quote numeric values.				$query .= ' DEFAULT ' . $this->db->quote($fDefault);			}		}		if ($fExtra)		{			$query .= ' ' . strtoupper($fExtra);		}		return $query;	}	/**	 * Get the SQL syntax to drop a column.	 *	 * @param   string  $table  The table name.	 * @param   string  $name   The name of the field to drop.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getDropColumnSQL($table, $name)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' DROP COLUMN ' . $this->db->quoteName($name);		return $query;	}	/**	 * Get the SQL syntax to drop a key.	 *	 * @param   string  $table  The table name.	 * @param   string  $name   The name of the key to drop.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getDropKeySQL($table, $name)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' DROP KEY ' . $this->db->quoteName($name);		return $query;	}	/**	 * Get the SQL syntax to drop a key.	 *	 * @param   string  $table  The table name.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getDropPrimaryKeySQL($table)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' DROP PRIMARY KEY';		return $query;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   array  $keys  An array of objects that comprise the keys for the table.	 *	 * @return  array  The lookup array. array({key name} => array(object, ...))	 *	 * @since   11.1	 * @throws  Exception	 */	protected function getKeyLookup($keys)	{		// First pass, create a lookup of the keys.		$lookup = array();		foreach ($keys as $key)		{			if ($key instanceof SimpleXMLElement)			{				$kName = (string) $key['Key_name'];			}			else			{				$kName = $key->Key_name;			}			if (empty($lookup[$kName]))			{				$lookup[$kName] = array();			}			$lookup[$kName][] = $key;		}		return $lookup;	}	/**	 * Get the SQL syntax for a key.	 *	 * @param   array  $columns  An array of SimpleXMLElement objects comprising the key.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getKeySQL($columns)	{		// TODO Error checking on array and element types.		$kNonUnique = (string) $columns[0]['Non_unique'];		$kName = (string) $columns[0]['Key_name'];		$kColumn = (string) $columns[0]['Column_name'];		$prefix = '';		if ($kName == 'PRIMARY')		{			$prefix = 'PRIMARY ';		}		elseif ($kNonUnique == 0)		{			$prefix = 'UNIQUE ';		}		$nColumns = count($columns);		$kColumns = array();		if ($nColumns == 1)		{			$kColumns[] = $this->db->quoteName($kColumn);		}		else		{			foreach ($columns as $column)			{				$kColumns[] = (string) $column['Column_name'];			}		}		$query = $prefix . 'KEY ' . ($kName != 'PRIMARY' ? $this->db->quoteName($kName) : '') . ' (' . implode(',', $kColumns) . ')';		return $query;	}	/**	 * Get the real name of the table, converting the prefix wildcard string if present.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  string	The real name of the table.	 *	 * @since   11.1	 */	protected function getRealTableName($table)	{		// TODO Incorporate into parent class and use $this.		$prefix = $this->db->getPrefix();		// Replace the magic prefix if found.		$table = preg_replace('|^#__|', $prefix, $table);		return $table;	}	/**	 * Merges the incoming structure definition with the existing structure.	 *	 * @return  void	 *	 * @note    Currently only supports XML format.	 * @since   11.1	 * @throws  Exception on error.	 * @todo    If it's not XML convert to XML first.	 */	protected function mergeStructure()	{		$prefix = $this->db->getPrefix();		$tables = $this->db->getTableList();		if ($this->from instanceof SimpleXMLElement)		{			$xml = $this->from;		}		else		{			$xml = new SimpleXMLElement($this->from);		}		// Get all the table definitions.		$xmlTables = $xml->xpath('database/table_structure');		foreach ($xmlTables as $table)		{			// Convert the magic prefix into the real table name.			$tableName = (string) $table['name'];			$tableName = preg_replace('|^#__|', $prefix, $tableName);			if (in_array($tableName, $tables))			{				// The table already exists. Now check if there is any difference.				if ($queries = $this->getAlterTableSQL($xml->database->table_structure))				{					// Run the queries to upgrade the data structure.					foreach ($queries as $query)					{						$this->db->setQuery($query);						try						{							$this->db->execute();						}						catch (RuntimeException $e)						{							$this->addLog('Fail: ' . $this->db->getQuery());							throw $e;						}						$this->addLog('Pass: ' . $this->db->getQuery());					}				}			}			else			{				// This is a new table.				$query = $this->xmlToCreate($table);				$this->db->setQuery($query);				try				{					$this->db->execute();				}				catch (RuntimeException $e)				{					$this->addLog('Fail: ' . $this->db->getQuery());					throw $e;				}				$this->addLog('Pass: ' . $this->db->getQuery());			}		}	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysqli  $db  The database connector.	 *	 * @return  JDatabaseImporterMysqli  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysqli $db)	{		$this->db = $db;		return $this;	}	/**	 * Sets an internal option to merge the structure based on the input data.	 *	 * @param   boolean  $setting  True to export the structure, false to not.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function withStructure($setting = true)	{		$this->options->withStructure = (boolean) $setting;		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQuerySqlsrv extends JDatabaseQuery{	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $name_quotes = '`';	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $null_date = '1900-01-01 00:00:00';	/**	 * Magic function to convert the query to a string.	 *	 * @return  string	The completed query.	 *	 * @since   11.1	 */	public function __toString()	{		$query = '';		switch ($this->type)		{			case 'insert':				$query .= (string) $this->insert;				// Set method				if ($this->set)				{					$query .= (string) $this->set;				}				// Columns-Values method				elseif ($this->values)				{					if ($this->columns)					{						$query .= (string) $this->columns;					}					$elements = $this->insert->getElements();					$tableName = array_shift($elements);					$query .= 'VALUES ';					$query .= (string) $this->values;					if ($this->autoIncrementField)					{						$query = 'SET IDENTITY_INSERT ' . $tableName . ' ON;' . $query . 'SET IDENTITY_INSERT ' . $tableName . ' OFF;';					}					if ($this->where)					{						$query .= (string) $this->where;					}				}				break;			default:				$query = parent::__toString();				break;		}		return $query;	}	/**	 * Casts a value to a char.	 *	 * Ensure that the value is properly quoted before passing to the method.	 *	 * @param   string  $value  The value to cast as a char.	 *	 * @return  string  Returns the cast value.	 *	 * @since   11.1	 */	public function castAsChar($value)	{		return 'CAST(' . $value . ' as NVARCHAR(10))';	}	/**	 * Gets the function to determine the length of a character string.	 *	 * @param   string  $field      A value.	 * @param   string  $operator   Comparison operator between charLength integer value and $condition	 * @param   string  $condition  Integer value to compare charLength with.	 *	 * @return  string  The required char length call.	 *	 * @since 11.1	 */	public function charLength($field, $operator = null, $condition = null)	{		return 'DATALENGTH(' . $field . ')' . (isset($operator) && isset($condition) ? ' ' . $operator . ' ' . $condition : '');	}	/**	 * Concatenates an array of column names or values.	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.1	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			return '(' . implode('+' . $this->quote($separator) . '+', $values) . ')';		}		else		{			return '(' . implode('+', $values) . ')';		}	}	/**	 * Gets the current date and time.	 *	 * @return  string	 *	 * @since   11.1	 */	public function currentTimestamp()	{		return 'GETDATE()';	}	/**	 * Get the length of a string in bytes.	 *	 * @param   string  $value  The string to measure.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function length($value)	{		return 'LEN(' . $value . ')';	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date to add to; type may be time or datetime.	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @note Not all drivers support all units.	 * @link http://msdn.microsoft.com/en-us/library/ms186819.aspx for more information	 */	public function dateAdd($date, $interval, $datePart)	{		return "DATEADD('" . $datePart . "', '" . $interval . "', '" . $date . "'" . ')';	}}
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Version information class for the Joomla CMS. * * @package  Joomla.Site * @since    1.0 */final class JVersion{	/** @var  string  Product name. */	public $PRODUCT = 'Joomla!';	/** @var  string  Release version. */	public $RELEASE = '3.1';	/** @var  string  Maintenance version. */	public $DEV_LEVEL = '0';	/** @var  string  Development STATUS. */	public $DEV_STATUS = 'Stable';	/** @var  string  Build number. */	public $BUILD = '';	/** @var  string  Code name. */	public $CODENAME = 'Ember';	/** @var  string  Release date. */	public $RELDATE = '24-April-2013';	/** @var  string  Release time. */	public $RELTIME = '14:00';	/** @var  string  Release timezone. */	public $RELTZ = 'GMT';	/** @var  string  Copyright Notice. */	public $COPYRIGHT = 'Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved.';	/** @var  string  Link text. */	public $URL = '<a href="http://www.joomla.org">Joomla!</a> is Free Software released under the GNU General Public License.';	/**	 * Compares two a "PHP standardized" version number against the current Joomla version.	 *	 * @param   string  $minimum  The minimum version of the Joomla which is compatible.	 *	 * @return  bool    True if the version is compatible.	 *	 * @see     http://www.php.net/version_compare	 * @since   1.0	 */	public function isCompatible($minimum)	{		return version_compare(JVERSION, $minimum, 'ge');	}	/**	 * Method to get the help file version.	 *	 * @return  string  Version suffix for help files.	 *	 * @since   1.0	 */	public function getHelpVersion()	{		return '.' . str_replace('.', '', $this->RELEASE);	}	/**	 * Gets a "PHP standardized" version string for the current Joomla.	 *	 * @return  string  Version string.	 *	 * @since   1.5	 */	public function getShortVersion()	{		return $this->RELEASE . '.' . $this->DEV_LEVEL;	}	/**	 * Gets a version string for the current Joomla with all release information.	 *	 * @return  string  Complete version string.	 *	 * @since   1.5	 */	public function getLongVersion()	{		return $this->PRODUCT . ' ' . $this->RELEASE . '.' . $this->DEV_LEVEL . ' '				. $this->DEV_STATUS . ' [ ' . $this->CODENAME . ' ] ' . $this->RELDATE . ' '				. $this->RELTIME . ' ' . $this->RELTZ;	}	/**	 * Returns the user agent.	 *	 * @param   string  $component    Name of the component.	 * @param   bool    $mask         Mask as Mozilla/5.0 or not.	 * @param   bool    $add_version  Add version afterwards to component.	 *	 * @return  string  User Agent.	 *	 * @since   1.0	 */	public function getUserAgent($component = null, $mask = false, $add_version = true)	{		if ($component === null)		{			$component = 'Framework';		}		if ($add_version)		{			$component .= '/' . $this->RELEASE;		}		// If masked pretend to look like Mozilla 5.0 but still identify ourselves.		if ($mask)		{			return 'Mozilla/5.0 ' . $this->PRODUCT . '/' . $this->RELEASE . '.' . $this->DEV_LEVEL . ($component ? ' ' . $component : '');		}		else		{			return $this->PRODUCT . '/' . $this->RELEASE . '.' . $this->DEV_LEVEL . ($component ? ' ' . $component : '');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/extension.php';/** * Installer Manage Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerModelManage extends InstallerModel{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array('name', 'client_id', 'status', 'type', 'folder', 'extension_id',);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		$status = $this->getUserStateFromRequest($this->context . '.filter.status', 'filter_status', '');		$this->setState('filter.status', $status);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type', '');		$this->setState('filter.type', $categoryId);		$group = $this->getUserStateFromRequest($this->context . '.filter.group', 'filter_group', '');		$this->setState('filter.group', $group);		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Enable/Disable an extension.	 *	 * @param   array  &$eid   Extension ids to un/publish	 * @param   int    $value  Publish value	 *	 * @return  boolean  True on success	 *	 * @since   1.5	 */	public function publish(&$eid = array(), $value = 1)	{		$user = JFactory::getUser();		if ($user->authorise('core.edit.state', 'com_installer'))		{			$result = true;			/*			 * Ensure eid is an array of extension ids			 * TODO: If it isn't an array do we want to set an error and fail?			 */			if (!is_array($eid))			{				$eid = array($eid);			}			// Get a table object for the extension type			$table = JTable::getInstance('Extension');			JTable::addIncludePath(JPATH_ADMINISTRATOR . '/components/com_templates/tables');			// Enable the extension in the table and store it in the database			foreach ($eid as $i => $id)			{				$table->load($id);				if ($table->type == 'template')				{					$style = JTable::getInstance('Style', 'TemplatesTable');					if ($style->load(array('template' => $table->element, 'client_id' => $table->client_id, 'home' => 1)))					{						JError::raiseNotice(403, JText::_('COM_INSTALLER_ERROR_DISABLE_DEFAULT_TEMPLATE_NOT_PERMITTED'));						unset($eid[$i]);						continue;					}				}				if ($table->protected == 1)				{					$result = false;					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}				else				{					$table->enabled = $value;				}				if (!$table->store())				{					$this->setError($table->getError());					$result = false;				}			}		}		else		{			$result = false;			JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));		}		return $result;	}	/**	 * Refreshes the cached manifest information for an extension.	 *	 * @param   int  $eid  extension identifier (key in #__extensions)	 *	 * @return  boolean  result of refresh	 *	 * @since   1.6	 */	public function refresh($eid)	{		if (!is_array($eid))		{			$eid = array($eid => 0);		}		// Get an installer object for the extension type		$installer = JInstaller::getInstance();		$result = 0;		// Uninstall the chosen extensions		foreach ($eid as $id)		{			$result |= $installer->refreshManifestCache($id);		}		return $result;	}	/**	 * Remove (uninstall) an extension	 *	 * @param   array  $eid  An array of identifiers	 *	 * @return  boolean  True on success	 *	 * @since   1.5	 */	public function remove($eid = array())	{		$user = JFactory::getUser();		if ($user->authorise('core.delete', 'com_installer'))		{			$failed = array();			/*			 * Ensure eid is an array of extension ids in the form id => client_id			 * TODO: If it isn't an array do we want to set an error and fail?			 */			if (!is_array($eid))			{				$eid = array($eid => 0);			}			// Get an installer object for the extension type			$installer = JInstaller::getInstance();			$row = JTable::getInstance('extension');			// Uninstall the chosen extensions			foreach ($eid as $id)			{				$id = trim($id);				$row->load($id);				if ($row->type && $row->type != 'language')				{					$result = $installer->uninstall($row->type, $id);					// Build an array of extensions that failed to uninstall					if ($result === false)					{						$failed[] = $id;					}				}				else				{					$failed[] = $id;				}			}			$langstring = 'COM_INSTALLER_TYPE_TYPE_' . strtoupper($row->type);			$rowtype = JText::_($langstring);			if (strpos($rowtype, $langstring) !== false)			{				$rowtype = $row->type;			}			if (count($failed))			{				if ($row->type == 'language')				{					// One should always uninstall a language package, not a single language					$msg = JText::_('COM_INSTALLER_UNINSTALL_LANGUAGE');					$result = false;				}				else				{					// There was an error in uninstalling the package					$msg = JText::sprintf('COM_INSTALLER_UNINSTALL_ERROR', $rowtype);					$result = false;				}			}			else			{				// Package uninstalled sucessfully				$msg = JText::sprintf('COM_INSTALLER_UNINSTALL_SUCCESS', $rowtype);				$result = true;			}			$app = JFactory::getApplication();			$app->enqueueMessage($msg);			$this->setState('action', 'remove');			$this->setState('name', $installer->get('name'));			$app->setUserState('com_installer.message', $installer->message);			$app->setUserState('com_installer.extension_message', $installer->get('extension_message'));			return $result;		}		else		{			$result = false;			JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));		}	}	/**	 * Method to get the database query	 *	 * @return  JDatabaseQuery  The database query	 *	 * @since   1.6	 */	protected function getListQuery()	{		$status = $this->getState('filter.status');		$type = $this->getState('filter.type');		$client = $this->getState('filter.client_id');		$group = $this->getState('filter.group');		$query = JFactory::getDbo()->getQuery(true)			->select('*')			->select('2*protected+(1-protected)*enabled as status')			->from('#__extensions')			->where('state=0');		if ($status != '')		{			if ($status == '2')			{				$query->where('protected = 1');			}			else			{				$query->where('protected = 0')					->where('enabled=' . (int) $status);			}		}		if ($type)		{			$query->where('type=' . $this->_db->quote($type));		}		if ($client != '')		{			$query->where('client_id=' . (int) $client);		}		if ($group != '' && in_array($type, array('plugin', 'library', '')))		{			$query->where('folder=' . $this->_db->quote($group == '*' ? '' : $group));		}		// Filter by search in id		$search = $this->getState('filter.search');		if (!empty($search) && stripos($search, 'id:') === 0)		{			$query->where('extension_id = ' . (int) substr($search, 3));		}		return $query;	}}
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Application class * * Provide many supporting API functions * * @package     Joomla.Site * @subpackage  Application * @since       1.5 */final class JSite extends JApplication{	/**	 * Currently active template	 * @var object	 */	private $template = null;	/**	 * Option to filter by language	 */	private $_language_filter = false;	/**	 * Option to detect language by the browser	 */	private $_detect_browser = false;	/**	 * Class constructor	 *	 * @param   array An optional associative array of configuration settings.	 *                Recognized key values include 'clientId' (this list is not meant to be comprehensive).	 */	public function __construct($config = array())	{		$config['clientId'] = 0;		parent::__construct($config);	}	/**	 * Initialise the application.	 *	 * @param   array	 */	public function initialise($options = array())	{		$config = JFactory::getConfig();		$user = JFactory::getUser();		// If the user is a guest we populate it with the guest user group.		if ($user->guest)		{			$guestUsergroup = JComponentHelper::getParams('com_users')->get('guest_usergroup', 1);			$user->groups = array($guestUsergroup);		}		// if a language was specified it has priority		// otherwise use user or default language settings		JPluginHelper::importPlugin('system', 'languagefilter');		if (empty($options['language']))		{			$lang = $this->input->getString('language', null);			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if ($this->_language_filter && empty($options['language']))		{			// Detect cookie language			$lang = $this->input->getString(self::getHash('language'), null, 'cookie');			// Make sure that the user's language exists			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if (empty($options['language']))		{			// Detect user language			$lang = $user->getParam('language');			// Make sure that the user's language exists			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if ($this->_detect_browser && empty($options['language']))		{			// Detect browser language			$lang = JLanguageHelper::detectLanguage();			// Make sure that the user's language exists			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if (empty($options['language']))		{			// Detect default language			$params = JComponentHelper::getParams('com_languages');			$client = JApplicationHelper::getClientInfo($this->getClientId());			$options['language'] = $params->get($client->name, $config->get('language', 'en-GB'));		}		// One last check to make sure we have something		if (!JLanguage::exists($options['language']))		{			$lang = $config->get('language', 'en-GB');			if (JLanguage::exists($lang))			{				$options['language'] = $lang;			}			else			{				$options['language'] = 'en-GB'; // as a last ditch fail to english			}		}		// Execute the parent initialise method.		parent::initialise($options);		// Load Library language		$lang = JFactory::getLanguage();		// Try the lib_joomla file in the current language (without allowing the loading of the file in the default language)		$lang->load('lib_joomla', JPATH_SITE, null, false, false)			|| $lang->load('lib_joomla', JPATH_ADMINISTRATOR, null, false, false)			// Fallback to the lib_joomla file in the default language			|| $lang->load('lib_joomla', JPATH_SITE, null, true)			|| $lang->load('lib_joomla', JPATH_ADMINISTRATOR, null, true);	}	/**	 * Route the application.	 *	 */	public function route()	{		parent::route();		$Itemid = $this->input->getInt('Itemid');		$this->authorise($Itemid);	}	/**	 * Dispatch the application	 *	 * @param   string	 */	public function dispatch($component = null)	{		// Get the component if not set.		if (!$component)		{			$component = $this->input->get('option');		}		$document = JFactory::getDocument();		$user = JFactory::getUser();		$router = $this->getRouter();		$params = $this->getParams();		switch ($document->getType())		{			case 'html':				// Get language				$lang_code = JFactory::getLanguage()->getTag();				$languages = JLanguageHelper::getLanguages('lang_code');				// Set metadata				if (isset($languages[$lang_code]) && $languages[$lang_code]->metakey)				{					$document->setMetaData('keywords', $languages[$lang_code]->metakey);				}				else				{					$document->setMetaData('keywords', $this->getCfg('MetaKeys'));				}				$document->setMetaData('rights', $this->getCfg('MetaRights'));				if ($router->getMode() == JROUTER_MODE_SEF)				{					$document->setBase(htmlspecialchars(JURI::current()));				}				break;			case 'feed':				$document->setBase(htmlspecialchars(JURI::current()));				break;		}		$document->setTitle($params->get('page_title'));		$document->setDescription($params->get('page_description'));		// Add version number or not based on global configuration		if ($this->getCfg('MetaVersion', 0))		{			$document->setGenerator('Joomla! - Open Source Content Management  - Version ' . JVERSION);		}		else		{			$document->setGenerator('Joomla! - Open Source Content Management');		}		$contents = JComponentHelper::renderComponent($component);		$document->setBuffer($contents, 'component');		// Trigger the onAfterDispatch event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterDispatch');	}	/**	 * Display the application.	 */	public function render()	{		$document = JFactory::getDocument();		$user = JFactory::getUser();		// get the format to render		$format = $document->getType();		switch ($format)		{			case 'feed':				$params = array();				break;			case 'html':			default:				$template = $this->getTemplate(true);				$file = $this->input->get('tmpl', 'index');				if (!$this->getCfg('offline') && ($file == 'offline'))				{					$file = 'index';				}				if ($this->getCfg('offline') && !$user->authorise('core.login.offline'))				{					$uri = JURI::getInstance();					$return = (string) $uri;					$this->setUserState('users.login.form.data', array('return' => $return));					$file = 'offline';					JResponse::setHeader('Status', '503 Service Temporarily Unavailable', 'true');				}				if (!is_dir(JPATH_THEMES . '/' . $template->template) && !$this->getCfg('offline'))				{					$file = 'component';				}				$params = array(					'template' => $template->template,					'file' => $file . '.php',					'directory' => JPATH_THEMES,					'params' => $template->params				);				break;		}		// Parse the document.		$document = JFactory::getDocument();		$document->parse($params);		// Trigger the onBeforeRender event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onBeforeRender');		$caching = false;		if ($this->getCfg('caching') && $this->getCfg('caching', 2) == 2 && !$user->get('id'))		{			$caching = true;		}		// Render the document.		JResponse::setBody($document->render($caching, $params));		// Trigger the onAfterRender event.		$this->triggerEvent('onAfterRender');	}	/**	 * Login authentication function	 *	 * @param   array  Array('username' => string, 'password' => string)	 * @param   array  Array('remember' => boolean)	 *	 * @see JApplication::login	 */	public function login($credentials, $options = array())	{		// Set the application login entry point		if (!array_key_exists('entry_url', $options))		{			$options['entry_url'] = JURI::base() . 'index.php?option=com_users&task=user.login';		}		// Set the access control action to check.		$options['action'] = 'core.login.site';		return parent::login($credentials, $options);	}	/**	 * Check if the user can access the application	 */	public function authorise($itemid)	{		$menus = $this->getMenu();		$user = JFactory::getUser();		if (!$menus->authorise($itemid))		{			if ($user->get('id') == 0)			{				// Redirect to login				$uri = JURI::getInstance();				$return = (string) $uri;				$this->setUserState('users.login.form.data', array('return' => $return));				$url = 'index.php?option=com_users&view=login';				$url = JRoute::_($url, false);				$this->redirect($url, JText::_('JGLOBAL_YOU_MUST_LOGIN_FIRST'));			}			else			{				JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			}		}	}	/**	 * Get the appliaction parameters	 *	 * @param   string    The component option	 * @return  object  The parameters object	 * @since   1.5	 */	public function getParams($option = null)	{		static $params = array();		$hash = '__default';		if (!empty($option))		{			$hash = $option;		}		if (!isset($params[$hash]))		{			// Get component parameters			if (!$option)			{				$option = $this->input->get('option');			}			// Get new instance of component global parameters			$params[$hash] = clone JComponentHelper::getParams($option);			// Get menu parameters			$menus = $this->getMenu();			$menu = $menus->getActive();			// Get language			$lang_code = JFactory::getLanguage()->getTag();			$languages = JLanguageHelper::getLanguages('lang_code');			$title = $this->getCfg('sitename');			if (isset($languages[$lang_code]) && $languages[$lang_code]->metadesc)			{				$description = $languages[$lang_code]->metadesc;			}			else			{				$description = $this->getCfg('MetaDesc');			}			$rights = $this->getCfg('MetaRights');			$robots = $this->getCfg('robots');			// Lets cascade the parameters if we have menu item parameters			if (is_object($menu))			{				$temp = new JRegistry;				$temp->loadString($menu->params);				$params[$hash]->merge($temp);				$title = $menu->title;			}			else			{				// get com_menu global settings				$temp = clone JComponentHelper::getParams('com_menus');				$params[$hash]->merge($temp);				// if supplied, use page title				$title = $temp->get('page_title', $title);			}			$params[$hash]->def('page_title', $title);			$params[$hash]->def('page_description', $description);			$params[$hash]->def('page_rights', $rights);			$params[$hash]->def('robots', $robots);		}		return $params[$hash];	}	/**	 * Get the application parameters	 *	 * @param   string    The component option	 *	 * @return  object  The parameters object	 * @since   1.5	 */	public function getPageParameters($option = null)	{		return $this->getParams($option);	}	/**	 * Get the template	 *	 * @return  string The template name	 * @since 1.0	 */	public function getTemplate($params = false)	{		if (is_object($this->template))		{			if (!file_exists(JPATH_THEMES . '/' . $this->template->template . '/index.php'))			{				throw new InvalidArgumentException(JText::sprintf('JERROR_COULD_NOT_FIND_TEMPLATE', $this->template->template));			}			if ($params)			{				return $this->template;			}			return $this->template->template;		}		// Get the id of the active menu item		$menu = $this->getMenu();		$item = $menu->getActive();		if (!$item)		{			$item = $menu->getItem($this->input->getInt('Itemid'));		}		$id = 0;		if (is_object($item))		{ // valid item retrieved			$id = $item->template_style_id;		}		$condition = '';		$tid = $this->input->get('templateStyle', 0, 'uint');		if (is_numeric($tid) && (int) $tid > 0)		{			$id = (int) $tid;		}		$cache = JFactory::getCache('com_templates', '');		if ($this->_language_filter)		{			$tag = JFactory::getLanguage()->getTag();		}		else		{			$tag = '';		}		if (!$templates = $cache->get('templates0' . $tag))		{			// Load styles			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('id, home, template, s.params')				->from('#__template_styles as s')				->where('s.client_id = 0')				->where('e.enabled = 1')				->join('LEFT', '#__extensions as e ON e.element=s.template AND e.type=' . $db->quote('template') . ' AND e.client_id=s.client_id');			$db->setQuery($query);			$templates = $db->loadObjectList('id');			foreach ($templates as &$template)			{				$registry = new JRegistry;				$registry->loadString($template->params);				$template->params = $registry;				// Create home element				//sqlsrv change				if ($template->home == 1 && !isset($templates[0]) || $this->_language_filter && $template->home == $tag)				{					$templates[0] = clone $template;				}			}			$cache->store($templates, 'templates0' . $tag);		}		if (isset($templates[$id]))		{			$template = $templates[$id];		}		else		{			$template = $templates[0];		}		// Allows for overriding the active template from the request		$template->template = $this->input->get('template', $template->template);		$template->template = JFilterInput::getInstance()->clean($template->template, 'cmd'); // need to filter the default value as well		// Fallback template		if (!file_exists(JPATH_THEMES . '/' . $template->template . '/index.php'))		{			$this->enqueueMessage(JText::_('JERROR_ALERTNOTEMPLATE'), 'error');			// try to find data for 'beez3' template			$original_tmpl = $template->template;			foreach ($templates as $tmpl)			{				if ($tmpl->template == 'beez3')				{					$template = $tmpl;					break;				}			}			// check, the data were found and if template really exists			if (!file_exists(JPATH_THEMES . '/' . $template->template . '/index.php'))			{				throw new InvalidArgumentException(JText::sprintf('JERROR_COULD_NOT_FIND_TEMPLATE', $original_tmpl));			}		}		$this->template = $template;		if ($params)		{			return $template;		}		return $template->template;	}	/**	 * Overrides the default template that would be used	 *	 * @param string       The template name	 * @param mixed        The template style parameters	 */	public function setTemplate($template, $styleParams = null)	{		if (is_dir(JPATH_THEMES . '/' . $template))		{			$this->template = new stdClass;			$this->template->template = $template;			if ($styleParams instanceof JRegistry)			{				$this->template->params = $styleParams;			}			else			{				$this->template->params = new JRegistry($styleParams);			}		}	}	/**	 * Return a reference to the JPathway object.	 *	 * @param   string    $name        The name of the application/client.	 * @param   array     $options     An optional associative array of configuration settings.	 *	 * @return  object  JMenu.	 * @since   1.5	 */	public function getMenu($name = null, $options = array())	{		$options = array();		$menu = parent::getMenu('site', $options);		return $menu;	}	/**	 * Return a reference to the JPathway object.	 *	 * @param   string    $name        The name of the application.	 * @param   array     $options     An optional associative array of configuration settings.	 *	 * @return  object JPathway.	 * @since   1.5	 */	public function getPathway($name = null, $options = array())	{		$options = array();		$pathway = parent::getPathway('site', $options);		return $pathway;	}	/**	 * Return a reference to the JRouter object.	 *	 * @param   string    $name        The name of the application.	 * @param   array     $options     An optional associative array of configuration settings.	 *	 * @return  JRouter	 * @since   1.5	 */	static public function getRouter($name = null, array $options = array())	{		$config = JFactory::getConfig();		$options['mode'] = $config->get('sef');		$router = parent::getRouter('site', $options);		return $router;	}	/**	 * Return the current state of the language filter.	 *	 * @return  boolean	 * @since   1.6	 */	public function getLanguageFilter()	{		return $this->_language_filter;	}	/**	 * Set the current state of the language filter.	 *	 * @return  boolean  The old state	 * @since   1.6	 */	public function setLanguageFilter($state = false)	{		$old = $this->_language_filter;		$this->_language_filter = $state;		return $old;	}	/**	 * Return the current state of the detect browser option.	 *	 * @return  boolean	 * @since   1.6	 */	public function getDetectBrowser()	{		return $this->_detect_browser;	}	/**	 * Set the current state of the detect browser option.	 *	 * @return  boolean  The old state	 * @since   1.6	 */	public function setDetectBrowser($state = false)	{		$old = $this->_detect_browser;		$this->_detect_browser = $state;		return $old;	}	/**	 * Redirect to another URL.	 *	 * Optionally enqueues a message in the system message queue (which will be displayed	 * the next time a page is loaded) using the enqueueMessage method. If the headers have	 * not been sent the redirect will be accomplished using a "301 Moved Permanently"	 * code in the header pointing to the new location. If the headers have already been	 * sent this will be accomplished using a JavaScript statement.	 *	 * @param   string     The URL to redirect to. Can only be http/https URL	 * @param   string     An optional message to display on redirect.	 * @param   string     An optional message type.	 * @param   boolean    True if the page is 301 Permanently Moved, otherwise 303 See Other is assumed.	 * @param   boolean    True if the enqueued messages are passed to the redirection, false else.	 * @return  none; calls exit().	 * @since   1.5	 * @see     JApplication::enqueueMessage()	 */	public function redirect($url, $msg = '', $msgType = 'message', $moved = false, $persistMsg = true)	{		if (!$persistMsg)		{			$this->_messageQueue = array();		}		parent::redirect($url, $msg, $msgType, $moved);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModel', __DIR__ . '/extension.php');JLoader::register('JoomlaInstallerScript', JPATH_ADMINISTRATOR . '/components/com_admin/script.php');/** * Installer Manage Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelDatabase extends InstallerModel{	protected $_context = 'com_installer.discover';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Fixes database problems	 *	 * @return  void	 */	public function fix()	{		if (!$changeSet = $this->getItems())		{			return false;		}		$changeSet->fix();		$this->fixSchemaVersion($changeSet);		$this->fixUpdateVersion();		$installer = new JoomlaInstallerScript;		$installer->deleteUnexistingFiles();		$this->fixDefaultTextFilters();	}	/**	 * Gets the changeset object	 *	 * @return  JSchemaChangeset	 */	public function getItems()	{		$folder = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		try		{			$changeSet = JSchemaChangeset::getInstance(JFactory::getDbo(), $folder);		}		catch (RuntimeException $e)		{			JFactory::getApplication()->enqueueMessage($e->getMessage(), 'warning');			return false;		}		return $changeSet;	}	/**	 * Method to get a JPagination object for the data set.	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function getPagination()	{		return true;	}	/**	 * Get version from #__schemas table	 *	 * @return  mixed  the return value from the query, or null if the query fails	 *	 * @throws Exception	 */	public function getSchemaVersion()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('version_id')			->from($db->quoteName('#__schemas'))			->where('extension_id = 700');		$db->setQuery($query);		$result = $db->loadResult();		return $result;	}	/**	 * Fix schema version if wrong	 *	 * @param   JSchemaChangeSet  $changeSet  Schema change set	 *	 * @return   mixed  string schema version if success, false if fail	 */	public function fixSchemaVersion($changeSet)	{		// Get correct schema version -- last file in array		$schema = $changeSet->getSchema();		$db = JFactory::getDbo();		$result = false;		// Check value. If ok, don't do update		$version = $this->getSchemaVersion();		if ($version == $schema)		{			$result = $version;		}		else		{			// Delete old row			$query = $db->getQuery(true)				->delete($db->quoteName('#__schemas'))				->where($db->quoteName('extension_id') . ' = 700');			$db->setQuery($query);			$db->execute();			// Add new row			$query = $db->getQuery(true)				->insert($db->quoteName('#__schemas'))				->set($db->quoteName('extension_id') . '= 700')				->set($db->quoteName('version_id') . '= ' . $db->quote($schema));			$db->setQuery($query);			if ($db->execute())			{				$result = $schema;			}		}		return $result;	}	/**	 * Get current version from #__extensions table	 *	 * @return  mixed   version if successful, false if fail	 */	public function getUpdateVersion()	{		$table = JTable::getInstance('Extension');		$table->load('700');		$cache = new JRegistry($table->manifest_cache);		return $cache->get('version');	}	/**	 * Fix Joomla version in #__extensions table if wrong (doesn't equal JVersion short version)	 *	 * @return   mixed  string update version if success, false if fail	 */	public function fixUpdateVersion()	{		$table = JTable::getInstance('Extension');		$table->load('700');		$cache = new JRegistry($table->manifest_cache);		$updateVersion = $cache->get('version');		$cmsVersion = new JVersion;		if ($updateVersion == $cmsVersion->getShortVersion())		{			return $updateVersion;		}		else		{			$cache->set('version', $cmsVersion->getShortVersion());			$table->manifest_cache = $cache->toString();			if ($table->store())			{				return $cmsVersion->getShortVersion();			}			else			{				return false;			}		}	}	/**	 * For version 2.5.x only	 * Check if com_config parameters are blank.	 *	 * @return  string  default text filters (if any)	 */	public function getDefaultTextFilters()	{		$table = JTable::getInstance('Extension');		$table->load($table->find(array('name' => 'com_config')));		return $table->params;	}	/**	 * For version 2.5.x only	 * Check if com_config parameters are blank. If so, populate with com_content text filters.	 *	 * @return  mixed  boolean true if params are updated, null otherwise	 */	public function fixDefaultTextFilters()	{		$table = JTable::getInstance('Extension');		$table->load($table->find(array('name' => 'com_config')));		// Check for empty $config and non-empty content filters		if (!$table->params)		{			// Get filters from com_content and store if you find them			$contentParams = JComponentHelper::getParams('com_content');			if ($contentParams->get('filters'))			{				$newParams = new JRegistry;				$newParams->set('filters', $contentParams->get('filters'));				$table->params = (string) $newParams;				$table->store();				return true;			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');$input     = JFactory::getApplication()->input;$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectNewsfeed');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds&layout=modal&tmpl=component&function='.$function);?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<fieldset class="filter clearfix">		<div class="btn-toolbar">			<div class="btn-group pull-left">				<label for="filter_search">					<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>				</label>				<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>">					<i class="icon-search"></i></button>				<button type="button" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();">					<i class="icon-remove"></i></button>			</div>				<input onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('0', '<?php echo $this->escape(addslashes(JText::_('COM_NEWSFEEDS_SELECT_A_FEED'))); ?>', null, null);" class="btn" type="button" value="<?php echo JText::_('COM_NEWSFEEDS_FIELD_VALUE_NONE'); ?>" />			<div class="clearfix"></div>		</div>		<hr class="hr-condensed" />		<div class="filters">			<select name="filter_access" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<select name="filter_published" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds', array('filter.language' => array('*', $this->state->get('filter.forcedLanguage')))), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />			<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<select name="filter_language" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<?php endif; ?>		</div>	</fieldset>	<table class="table table-striped table-condensed">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td align="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;foreach ($this->fieldsets as $name => $fieldset) :	$label = !empty($fieldset->label) ? JText::_($fieldset->label, true) : JText::_('COM_PLUGINS_'.$fieldset->name.'_FIELDSET_LABEL', true);	$optionsname = 'options-' . $fieldset->name;	echo JHtml::_('bootstrap.addTab', 'myTab', $optionsname,  $label);	if (isset($fieldset->description) && trim($fieldset->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldset->description)).'</p>';	endif;	?>	<?php $hidden_fields = ''; ?>	<?php foreach ($this->form->getFieldset($name) as $field) : ?>		<?php if (!$field->hidden) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label; ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>		<?php else : $hidden_fields .= $field->input; ?>		<?php endif; ?>	<?php endforeach; ?>	<?php echo $hidden_fields; ?><?php echo JHtml::_('bootstrap.endTab'); ?><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$app		= JFactory::getApplication();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$canOrder	= $user->authorise('core.edit.state',	'com_menus');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_menus&task=items.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'itemList', 'adminForm', strtolower($listDirn), $saveOrderingUrl, false, true);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><?php //Set up the filter bar. ?><form action="<?php echo JRoute::_('index.php?option=com_menus&view=items');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="itemList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MENUS_HEADING_HOME', 'a.home', $listDirn, $listOrder); ?>					</th>				<th width="10%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort',  'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>				<th width="5%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort', 'COM_MENUS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>				</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>					</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php			$originalOrders = array();			foreach ($this->items as $i => $item) :				$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);				$canCreate  = $user->authorise('core.create',     'com_menus');				$canEdit    = $user->authorise('core.edit',       'com_menus');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_menus') && $canCheckin;				// Get the parents of item for sorting				if ($item->level > 1)				{					$parentsStr = "";					$_currentParentId = $item->parent_id;					$parentsStr = " ".$_currentParentId;					for ($j = 0; $j < $item->level; $j++)					{						foreach ($this->ordering as $k => $v)						{							$v = implode("-", $v);							$v = "-" . $v . "-";							if (strpos($v, "-" . $_currentParentId . "-") !== false)							{								$parentsStr .= " " . $k;								$_currentParentId = $k;								break;							}						}					}				}				else				{					$parentsStr = "";				}				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->parent_id;?>" item-id="<?php echo $item->id?>" parents="<?php echo $parentsStr?>" level="<?php echo $item->level?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>					<?php else : ?>						<span class="sortable-handler inactive">							<i class="icon-menu"></i>						</span>					<?php endif; ?>					<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $orderkey + 1;?>" />					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('MenusHtml.Menus.state', $item->published, $i, $canChange, 'cb'); ?>					</td>					<td>						<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level - 1) ?>						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'items.', $canCheckin); ?>						<?php endif; ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_menus&task=item.edit&id='.(int) $item->id);?>">								<?php echo $this->escape($item->title); ?></a>						<?php else : ?>							<?php echo $this->escape($item->title); ?>						<?php endif; ?>						<span class="small">						<?php if ($item->type != 'url') : ?>							<?php if (empty($item->note)) : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							<?php else : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>							<?php endif; ?>						<?php elseif ($item->type == 'url' && $item->note) : ?>							<?php echo JText::sprintf('JGLOBAL_LIST_NOTE', $this->escape($item->note));?>						<?php endif; ?>						</span>						<div class="small" title="<?php echo $this->escape($item->path);?>">							<?php echo str_repeat('<span class="gtr">&mdash;</span>', $item->level - 1) ?>							<span title="<?php echo isset($item->item_type_desc) ? htmlspecialchars($this->escape($item->item_type_desc), ENT_COMPAT, 'UTF-8') : ''; ?>">								<?php echo $this->escape($item->item_type); ?></span>						</div>					</td>					<td class="center hidden-phone">						<?php if ($item->type == 'component') : ?>							<?php if ($item->language == '*' || $item->home == '0'):?>								<?php echo JHtml::_('jgrid.isdefault', $item->home, $i, 'items.', ($item->language != '*' || !$item->home) && $canChange);?>							<?php elseif ($canChange):?>								<a href="<?php echo JRoute::_('index.php?option=com_menus&task=items.unsetDefault&cid[]='.$item->id.'&'.JSession::getFormToken().'=1');?>">									<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => JText::sprintf('COM_MENUS_GRID_UNSET_LANGUAGE', $item->language_title)), true);?>								</a>							<?php else:?>								<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => $item->language_title), true);?>							<?php endif;?>						<?php endif; ?>					</td>				<td class="small hidden-phone">					<?php echo $this->escape($item->access_level); ?>				</td>				<?php if ($assoc):?>				<td class="small hidden-phone">					<?php if ($item->association):?>						<?php echo JHtml::_('MenusHtml.Menus.association', $item->id);?>						<?php endif;?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == ''):?>							<?php echo JText::_('JDEFAULT'); ?>						<?php elseif ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt);?>">							<?php echo (int) $item->id; ?></span>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form.is user is allowed ?>		<?php if ($user->authorise('core.create', 'com_menus') || $user->authorise('core.edit', 'com_menus')) : ?>			<?php echo $this->loadTemplate('batch'); ?>		<?php endif;?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @since       13.1 */abstract class JFacebookObject{	/**	 * @var    JRegistry  Options for the Facebook object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var    JFacebookOAuth  The OAuth client.	 * @since  13.1	 */	protected $oauth;	/**	 * Constructor.	 *	 * @param   JRegistry       $options  Facebook options object.	 * @param   JHttp           $client   The HTTP client object.	 * @param   JFacebookOAuth  $oauth    The OAuth client.	 *	 * @since   13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JFacebookOAuth $oauth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JHttp($this->options);		$this->oauth = $oauth;	}	/**	 * Method to build and return a full request URL for the request.  This method will	 * add appropriate pagination details if necessary and also prepend the API url	 * to have a complete URL for the request.	 *	 * @param   string     $path    URL to inflect.	 * @param   integer    $limit   The number of objects per page.	 * @param   integer    $offset  The object's number on the page.	 * @param   timestamp  $until   A unix timestamp or any date accepted by strtotime.	 * @param   timestamp  $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  string  The request URL.	 *	 * @since   13.1	 */	protected function fetchUrl($path, $limit = 0, $offset = 0, $until = null, $since = null)	{		// Get a new JUri object fousing the api url and given path.		$uri = new JUri($this->options->get('api.url') . $path);		if ($limit > 0)		{			$uri->setVar('limit', (int) $limit);		}		if ($offset > 0)		{			$uri->setVar('offset', (int) $offset);		}		if ($until != null)		{			$uri->setVar('until', $until);		}		if ($since != null)		{			$uri->setVar('since', $since);		}		return (string) $uri;	}	/**	 * Method to send the request.	 *	 * @param   string   $path     The path of the request to make.	 * @param   mixed    $data     Either an associative array or a string to be sent with the post request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return   mixed  The request response.	 *	 * @since    13.1	 * @throws   DomainException	 */	public function sendRequest($path, $data = '', array $headers = null, $limit = 0, $offset = 0, $until = null, $since = null)	{		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $limit, $offset, $until, $since), $headers);		$response = json_decode($response->body);		// Validate the response.		if (property_exists($response, 'error'))		{			throw new RuntimeException($response->error->message);		}		return $response;	}	/**	 * Method to get an object.	 *	 * @param   string  $object  The object id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function get($object)	{		if ($this->oauth != null)		{			if ($this->oauth->isAuthenticated())			{				$response = $this->oauth->query($this->fetchUrl($object));				return json_decode($response->body);			}			else			{				return false;			}		}		// Send the request.		return $this->sendRequest($object);	}	/**	 * Method to get object's connection.	 *	 * @param   string   $object        The object id.	 * @param   string   $connection    The object's connection name.	 * @param   string   $extra_fields  URL fields.	 * @param   integer  $limit         The number of objects per page.	 * @param   integer  $offset        The object's number on the page.	 * @param   string   $until         A unix timestamp or any date accepted by strtotime.	 * @param   string   $since         A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getConnection($object, $connection = null, $extra_fields = '', $limit = 0, $offset = 0, $until = null, $since = null)	{		$path = $object . '/' . $connection . $extra_fields;		if ($this->oauth != null)		{			if ($this->oauth->isAuthenticated())			{				$response = $this->oauth->query($this->fetchUrl($path, $limit, $offset, $until, $since));				if (strcmp($response->body, ''))				{					return json_decode($response->body);				}				else				{					return $response->headers['Location'];				}			}			else			{				return false;			}		}		// Send the request.		return $this->sendRequest($path, '', null, $limit, $offset, $until, $since);	}	/**	 * Method to create a connection.	 *	 * @param   string  $object      The object id.	 * @param   string  $connection  The object's connection name.	 * @param   array   $parameters  The POST request parameters.	 * @param   array   $headers     An array of name-value pairs to include in the header of the request	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createConnection($object, $connection = null, $parameters = null, array $headers = null)	{		if ($this->oauth->isAuthenticated())		{			// Build the request path.			if ($connection != null)			{				$path = $object . '/' . $connection;			}			else			{				$path = $object;			}			// Send the post request.			$response = $this->oauth->query($this->fetchUrl($path), $parameters, $headers, 'post');			return json_decode($response->body);		}		else		{			return false;		}	}	/**	 * Method to delete a connection.	 *	 * @param   string  $object        The object id.	 * @param   string  $connection    The object's connection name.	 * @param   string  $extra_fields  URL fields.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteConnection($object, $connection = null, $extra_fields = '')	{		if ($this->oauth->isAuthenticated())		{			// Build the request path.			if ($connection != null)			{				$path = $object . '/' . $connection . $extra_fields;			}			else			{				$path = $object . $extra_fields;			}			// Send the delete request.			$response = $this->oauth->query($this->fetchUrl($path), null, array(), 'delete');			return json_decode($response->body);		}		else		{			return false;		}	}	/**	 * Method used to set the OAuth client.	 *	 * @param   JFacebookOAuth  $oauth  The OAuth client object.	 *	 * @return  JFacebookObject  This object for method chaining.	 *	 * @since   13.1	 */	public function setOAuth($oauth)	{		$this->oauth = $oauth;		return $this;	}	/**	 * Method used to get the OAuth client.	 *	 * @return  JFacebookOAuth  The OAuth client	 *	 * @since   13.1	 */	public function getOAuth()	{		return $this->oauth;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt is a Joomla Platform class for handling basic encryption/decryption of data. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCrypt{	/**	 * @var    JCryptCipher  The encryption cipher object.	 * @since  12.1	 */	private $_cipher;	/**	 * @var    JCryptKey  The encryption key[/pair)].	 * @since  12.1	 */	private $_key;	/**	 * Object Constructor takes an optional key to be used for encryption/decryption. If no key is given then the	 * secret word from the configuration object is used.	 *	 * @param   JCryptCipher  $cipher  The encryption cipher object.	 * @param   JCryptKey     $key     The encryption key[/pair)].	 *	 * @since   12.1	 */	public function __construct(JCryptCipher $cipher = null, JCryptKey $key = null)	{		// Set the encryption key[/pair)].		$this->_key = $key;		// Set the encryption cipher.		$this->_cipher = isset($cipher) ? $cipher : new JCryptCipherSimple;	}	/**	 * Method to decrypt a data string.	 *	 * @param   string  $data  The encrypted string to decrypt.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 */	public function decrypt($data)	{		return $this->_cipher->decrypt($data, $this->_key);	}	/**	 * Method to encrypt a data string.	 *	 * @param   string  $data  The data string to encrypt.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 */	public function encrypt($data)	{		return $this->_cipher->encrypt($data, $this->_key);	}	/**	 * Method to generate a new encryption key[/pair] object.	 *	 * @param   array  $options  Key generation options.	 *	 * @return  JCryptKey	 *	 * @since   12.1	 */	public function generateKey(array $options = array())	{		return $this->_cipher->generateKey($options);	}	/**	 * Method to set the encryption key[/pair] object.	 *	 * @param   JCryptKey  $key  The key object to set.	 *	 * @return  JCrypt	 *	 * @since   12.1	 */	public function setKey(JCryptKey $key)	{		$this->_key = $key;		return $this;	}	/**	 * Generate random bytes.	 *	 * @param   integer  $length  Length of the random data to generate	 *	 * @return  string  Random binary data	 *	 * @since  12.1	 */	public static function genRandomBytes($length = 16)	{		$sslStr = '';		/*		 * if a secure randomness generator exists and we don't		 * have a buggy PHP version use it.		 */		if (function_exists('openssl_random_pseudo_bytes')			&& (version_compare(PHP_VERSION, '5.3.4') >= 0 || IS_WIN))		{			$sslStr = openssl_random_pseudo_bytes($length, $strong);			if ($strong)			{				return $sslStr;			}		}		/*		 * Collect any entropy available in the system along with a number		 * of time measurements of operating system randomness.		 */		$bitsPerRound = 2;		$maxTimeMicro = 400;		$shaHashLength = 20;		$randomStr = '';		$total = $length;		// Check if we can use /dev/urandom.		$urandom = false;		$handle = null;		// This is PHP 5.3.3 and up		if (function_exists('stream_set_read_buffer') && @is_readable('/dev/urandom'))		{			$handle = @fopen('/dev/urandom', 'rb');			if ($handle)			{				$urandom = true;			}		}		while ($length > strlen($randomStr))		{			$bytes = ($total > $shaHashLength)? $shaHashLength : $total;			$total -= $bytes;			/*			 * Collect any entropy available from the PHP system and filesystem.			 * If we have ssl data that isn't strong, we use it once.			 */			$entropy = rand() . uniqid(mt_rand(), true) . $sslStr;			$entropy .= implode('', @fstat(fopen(__FILE__, 'r')));			$entropy .= memory_get_usage();			$sslStr = '';			if ($urandom)			{				stream_set_read_buffer($handle, 0);				$entropy .= @fread($handle, $bytes);			}			else			{				/*				 * There is no external source of entropy so we repeat calls				 * to mt_rand until we are assured there's real randomness in				 * the result.				 *				 * Measure the time that the operations will take on average.				 */				$samples = 3;				$duration = 0;				for ($pass = 0; $pass < $samples; ++$pass)				{					$microStart = microtime(true) * 1000000;					$hash = sha1(mt_rand(), true);					for ($count = 0; $count < 50; ++$count)					{						$hash = sha1($hash, true);					}					$microEnd = microtime(true) * 1000000;					$entropy .= $microStart . $microEnd;					if ($microStart >= $microEnd)					{						$microEnd += 1000000;					}					$duration += $microEnd - $microStart;				}				$duration = $duration / $samples;				/*				 * Based on the average time, determine the total rounds so that				 * the total running time is bounded to a reasonable number.				 */				$rounds = (int) (($maxTimeMicro / $duration) * 50);				/*				 * Take additional measurements. On average we can expect				 * at least $bitsPerRound bits of entropy from each measurement.				 */				$iter = $bytes * (int) ceil(8 / $bitsPerRound);				for ($pass = 0; $pass < $iter; ++$pass)				{					$microStart = microtime(true);					$hash = sha1(mt_rand(), true);					for ($count = 0; $count < $rounds; ++$count)					{						$hash = sha1($hash, true);					}					$entropy .= $microStart . microtime(true);				}			}			$randomStr .= sha1($entropy, true);		}		if ($urandom)		{			@fclose($handle);		}		return substr($randomStr, 0, $length);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User profile controller class. * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminControllerProfile extends JControllerForm{	/**	 * Method to check if you can add a new record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		return isset($data['id']) && $data['id'] == JFactory::getUser()->id;	}	/**	 * Overrides parent save method to check the submitted passwords match.	 *	 * @return  mixed  Boolean or JError.	 * @since   1.6	 */	public function save($key = null, $urlVar = null)	{		$data = $this->input->post->get('jform', array(), 'array');		// TODO: JForm should really have a validation handler for this.		if (isset($data['password']) && isset($data['password2']))		{			// Check the passwords match.			if ($data['password'] != $data['password2'])			{				$this->setMessage(JText::_('JLIB_USER_ERROR_PASSWORD_NOT_MATCH'), 'warning');				$this->setRedirect(JRoute::_('index.php?option=com_admin&view=profile&layout=edit&id='.JFactory::getUser()->id, false));				return false;			}			unset($data['password2']);		}		$return = parent::save();		if ($this->getTask() != 'apply')		{			// Redirect to the main page.			$this->setRedirect(JRoute::_('index.php', false));		}		return $return;	}	/**	 * Method to cancel an edit.	 *	 * @param   string	$key	The name of the primary key of the URL variable.	 *	 * @return  Boolean	True if access level checks pass, false otherwise.	 * @since   1.6	 */	public function cancel($key = null)	{		$return = parent::cancel($key);		// Redirect to the main page.		$this->setRedirect(JRoute::_('index.php', false));		return $return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of weblinks. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblinks extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		WeblinksHelper::addSubmenu('weblinks');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/weblinks.php';		$state	= $this->get('State');		$canDo	= WeblinksHelper::getActions($state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_WEBLINKS_MANAGER_WEBLINKS'), 'weblinks.png');		if (count($user->getAuthorisedCategories('com_weblinks', 'core.create')) > 0)		{			JToolbarHelper::addNew('weblink.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('weblink.edit');		}		if ($canDo->get('core.edit.state')) {			JToolbarHelper::publish('weblinks.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('weblinks.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('weblinks.archive');			JToolbarHelper::checkin('weblinks.checkin');		}		if ($state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'weblinks.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('weblinks.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_weblinks');		}		JToolbarHelper::help('JHELP_COMPONENTS_WEBLINKS_LINKS');		JHtmlSidebar::setAction('index.php?option=com_weblinks&view=weblinks');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_weblinks'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'a.hits' => JText::_('JGLOBAL_HITS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die();JFormHelper::loadFieldClass('list');/** * Search Filter field for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class JFormFieldSearchFilter extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  2.5	 */	protected $type = 'SearchFilter';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   2.5	 */	public function getOptions()	{		$options = array();		// Build the query.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('f.title AS text, f.filter_id AS value')			->from($db->quoteName('#__finder_filters') . ' AS f')			->where('f.state = 1')			->order('f.title ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		array_unshift($options, JHtml::_('select.option', '', JText::_('COM_FINDER_SELECT_SEARCH_FILTER'), 'value', 'text'));		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Interface * * @package     Joomla.Platform * @subpackage  Database * @since       11.2 */interface JDatabaseInterface{	/**	 * Test to see if the connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.2	 */	public static function isSupported();}/** * Joomla Platform Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 * * @method      string  q()   q($text, $escape = true)  Alias for quote method * @method      string  qn()  qn($name, $as = null)     Alias for quoteName method */abstract class JDatabaseDriver extends JDatabase implements JDatabaseInterface{	/**	 * The name of the database.	 *	 * @var    string	 * @since  11.4	 */	private $_database;	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  11.1	 */	public $name;	/**	 * @var    resource  The database connection resource.	 * @since  11.1	 */	protected $connection;	/**	 * @var    integer  The number of SQL statements executed by the database driver.	 * @since  11.1	 */	protected $count = 0;	/**	 * @var    resource  The database connection cursor from the last query.	 * @since  11.1	 */	protected $cursor;	/**	 * @var    boolean  The database driver debugging state.	 * @since  11.1	 */	protected $debug = false;	/**	 * @var    integer  The affected row limit for the current SQL statement.	 * @since  11.1	 */	protected $limit = 0;	/**	 * @var    array  The log of executed SQL statements by the database driver.	 * @since  11.1	 */	protected $log = array();	/**	 * @var    string  The character(s) used to quote SQL statement names such as table names or field names,	 *                 etc.  The child classes should define this as necessary.  If a single character string the	 *                 same character is used for both sides of the quoted name, else the first character will be	 *                 used for the opening quote and the second for the closing quote.	 * @since  11.1	 */	protected $nameQuote;	/**	 * @var    string  The null or zero representation of a timestamp for the database driver.  This should be	 *                 defined in child classes to hold the appropriate value for the engine.	 * @since  11.1	 */	protected $nullDate;	/**	 * @var    integer  The affected row offset to apply for the current SQL statement.	 * @since  11.1	 */	protected $offset = 0;	/**	 * @var    array  Passed in upon instantiation and saved.	 * @since  11.1	 */	protected $options;	/**	 * @var    mixed  The current SQL statement to execute.	 * @since  11.1	 */	protected $sql;	/**	 * @var    string  The common database table prefix.	 * @since  11.1	 */	protected $tablePrefix;	/**	 * @var    boolean  True if the database engine supports UTF-8 character encoding.	 * @since  11.1	 */	protected $utf = true;	/**	 * @var         integer  The database error number	 * @since       11.1	 * @deprecated  12.1	 */	protected $errorNum = 0;	/**	 * @var         string  The database error message	 * @since       11.1	 * @deprecated  12.1	 */	protected $errorMsg;	/**	 * @var    array  JDatabaseDriver instances container.	 * @since  11.1	 */	protected static $instances = array();	/**	 * @var    string  The minimum supported database version.	 * @since  12.1	 */	protected static $dbMinimum;	/**	 * Get a list of available database connectors.  The list will only be populated with connectors that both	 * the class exists and the static test method returns true.  This gives us the ability to have a multitude	 * of connector classes that are self-aware as to whether or not they are able to be used on a given system.	 *	 * @return  array  An array of available database connectors.	 *	 * @since   11.1	 */	public static function getConnectors()	{		$connectors = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/driver');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JDatabaseDriver' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$connectors[] = str_ireplace('.php', '', $fileName);			}		}		return $connectors;	}	/**	 * Method to return a JDatabaseDriver instance based on the given options.  There are three global options and then	 * the rest are specific to the database driver.  The 'driver' option defines which JDatabaseDriver class is	 * used for the connection -- the default is 'mysqli'.  The 'database' option determines which database is to	 * be used for the connection.  The 'select' option determines whether the connector should automatically select	 * the chosen database.	 *	 * Instances are unique to the given options and new objects are only created when a unique options array is	 * passed into the method.  This ensures that we don't end up with unnecessary database connection resources.	 *	 * @param   array  $options  Parameters to be passed to the database driver.	 *	 * @return  JDatabaseDriver  A database object.	 *	 * @since   11.1	 */	public static function getInstance($options = array())	{		// Sanitize the database connector options.		$options['driver']   = (isset($options['driver'])) ? preg_replace('/[^A-Z0-9_\.-]/i', '', $options['driver']) : 'mysqli';		$options['database'] = (isset($options['database'])) ? $options['database'] : null;		$options['select']   = (isset($options['select'])) ? $options['select'] : true;		// Get the options signature for the database connector.		$signature = md5(serialize($options));		// If we already have a database connector instance for these options then just use that.		if (empty(self::$instances[$signature]))		{			// Derive the class name from the driver.			$class = 'JDatabaseDriver' . ucfirst(strtolower($options['driver']));			// If the class still doesn't exist we have nothing left to do but throw an exception.  We did our best.			if (!class_exists($class))			{				throw new RuntimeException(sprintf('Unable to load Database Driver: %s', $options['driver']));			}			// Create our new JDatabaseDriver connector based on the options given.			try			{				$instance = new $class($options);			}			catch (RuntimeException $e)			{				throw new RuntimeException(sprintf('Unable to connect to the Database: %s', $e->getMessage()));			}			// Set the new connector to the global instances based on signature.			self::$instances[$signature] = $instance;		}		return self::$instances[$signature];	}	/**	 * Splits a string of multiple queries into an array of individual queries.	 *	 * @param   string  $query  Input SQL string with which to split into individual queries.	 *	 * @return  array  The queries from the input string separated into an array.	 *	 * @since   11.1	 */	public static function splitSql($query)	{		$start = 0;		$open = false;		$char = '';		$end = strlen($query);		$queries = array();		for ($i = 0; $i < $end; $i++)		{			$current = substr($query, $i, 1);			if (($current == '"' || $current == '\''))			{				$n = 2;				while (substr($query, $i - $n + 1, 1) == '\\' && $n < $i)				{					$n++;				}				if ($n % 2 == 0)				{					if ($open)					{						if ($current == $char)						{							$open = false;							$char = '';						}					}					else					{						$open = true;						$char = $current;					}				}			}			if (($current == ';' && !$open) || $i == $end - 1)			{				$queries[] = substr($query, $start, ($i - $start + 1));				$start = $i + 1;			}		}		return $queries;	}	/**	 * Magic method to provide method alias support for quote() and quoteName().	 *	 * @param   string  $method  The called method.	 * @param   array   $args    The array of arguments passed to the method.	 *	 * @return  string  The aliased method's return value or null.	 *	 * @since   11.1	 */	public function __call($method, $args)	{		if (empty($args))		{			return;		}		switch ($method)		{			case 'q':				return $this->quote($args[0], isset($args[1]) ? $args[1] : true);				break;			case 'qn':				return $this->quoteName($args[0], isset($args[1]) ? $args[1] : null);				break;		}	}	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   11.1	 */	public function __construct($options)	{		// Initialise object variables.		$this->_database = (isset($options['database'])) ? $options['database'] : '';		$this->tablePrefix = (isset($options['prefix'])) ? $options['prefix'] : 'jos_';		$this->count = 0;		$this->errorNum = 0;		$this->log = array();		// Set class options.		$this->options = $options;	}	/**	 * Alter database's character set, obtaining query string from protected member.	 *	 * @param   string  $dbName  The database name that will be altered	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function alterDbCharacterSet($dbName)	{		if (is_null($dbName))		{			throw new RuntimeException('Database name must not be null.');		}		$this->setQuery($this->getAlterDbCharacterSet($dbName));		return $this->execute();	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	abstract public function connect();	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   11.1	 */	abstract public function connected();	/**	 * Create a new database using information from $options object, obtaining query string	 * from protected member.	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function createDatabase($options, $utf = true)	{		if (is_null($options))		{			throw new RuntimeException('$options object must not be null.');		}		elseif (empty($options->db_name))		{			throw new RuntimeException('$options object must have db_name set.');		}		elseif (empty($options->db_user))		{			throw new RuntimeException('$options object must have db_user set.');		}		$this->setQuery($this->getCreateDatabaseQuery($options, $utf));		return $this->execute();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	abstract public function disconnect();	/**	 * Drops a table from the database.	 *	 * @param   string   $table     The name of the database table to drop.	 * @param   boolean  $ifExists  Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriver     Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function dropTable($table, $ifExists = true);	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string   The escaped string.	 *	 * @since   11.1	 */	abstract public function escape($text, $extra = false);	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchArray($cursor = null);	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchAssoc($cursor = null);	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchObject($cursor = null, $class = 'stdClass');	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   11.1	 */	abstract protected function freeResult($cursor = null);	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   11.1	 */	abstract public function getAffectedRows();	/**	 * Return the query string to alter the database character set.	 *	 * @param   string  $dbName  The database name	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 */	protected function getAlterDbCharacterSet($dbName)	{		$query = 'ALTER DATABASE ' . $this->quoteName($dbName) . ' CHARACTER SET `utf8`';		return $query;	}	/**	 * Return the query string to create new Database.	 * Each database driver, other than MySQL, need to override this member to return correct string.	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database	 *	 * @since   12.2	 */	protected function getCreateDatabaseQuery($options, $utf)	{		if ($utf)		{			$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name) . ' CHARACTER SET `utf8`';		}		else		{			$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name);		}		return $query;	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   11.1	 */	abstract public function getCollation();	/**	 * Method that provides access to the underlying database connection. Useful for when you need to call a	 * proprietary method such as postgresql's lo_* methods.	 *	 * @return  resource  The underlying database connection resource.	 *	 * @since   11.1	 */	public function getConnection()	{		return $this->connection;	}	/**	 * Get the total number of SQL statements executed by the database driver.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function getCount()	{		return $this->count;	}	/**	 * Gets the name of the database used by this conneciton.	 *	 * @return  string	 *	 * @since   11.4	 */	protected function getDatabase()	{		return $this->_database;	}	/**	 * Returns a PHP date() function compliant date format for the database driver.	 *	 * @return  string  The format string.	 *	 * @since   11.1	 */	public function getDateFormat()	{		return 'Y-m-d H:i:s';	}	/**	 * Get the database driver SQL statement log.	 *	 * @return  array  SQL statements executed by the database driver.	 *	 * @since   11.1	 */	public function getLog()	{		return $this->log;	}	/**	 * Get the minimum supported database version.	 *	 * @return  string  The minimum version number for the database driver.	 *	 * @since   12.1	 */	public function getMinimum()	{		return static::$dbMinimum;	}	/**	 * Get the null or zero representation of a timestamp for the database driver.	 *	 * @return  string  Null or zero representation of a timestamp.	 *	 * @since   11.1	 */	public function getNullDate()	{		return $this->nullDate;	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   11.1	 */	abstract public function getNumRows($cursor = null);	/**	 * Get the common table prefix for the database driver.	 *	 * @return  string  The common database table prefix.	 *	 * @since   11.1	 */	public function getPrefix()	{		return $this->tablePrefix;	}	/**	 * Gets an exporter class object.	 *	 * @return  JDatabaseExporter  An exporter object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getExporter()	{		// Derive the class name from the driver.		$class = 'JDatabaseExporter' . ucfirst($this->name);		// Make sure we have an exporter class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Exporter not found.');		}		$o = new $class;		$o->setDbo($this);		return $o;	}	/**	 * Gets an importer class object.	 *	 * @return  JDatabaseImporter  An importer object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getImporter()	{		// Derive the class name from the driver.		$class = 'JDatabaseImporter' . ucfirst($this->name);		// Make sure we have an importer class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Importer not found');		}		$o = new $class;		$o->setDbo($this);		return $o;	}	/**	 * Get the current query object or a new JDatabaseQuery object.	 *	 * @param   boolean  $new  False to return the current query object, True to return a new JDatabaseQuery object.	 *	 * @return  JDatabaseQuery  The current query object or a new object extending the JDatabaseQuery class.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function getQuery($new = false)	{		if ($new)		{			// Derive the class name from the driver.			$class = 'JDatabaseQuery' . ucfirst($this->name);			// Make sure we have a query class for this driver.			if (!class_exists($class))			{				// If it doesn't exist we are at an impasse so throw an exception.				throw new RuntimeException('Database Query Class not found.');			}			return new $class($this);		}		else		{			return $this->sql;		}	}	/**	 * Get a new iterator on the current query.	 *	 * @param   string  $column  An option column to use as the iterator key.	 * @param   string  $class   The class of object that is returned.	 *	 * @return  JDatabaseIterator  A new database iterator.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getIterator($column = null, $class = 'stdClass')	{		// Derive the class name from the driver.		$iteratorClass = 'JDatabaseIterator' . ucfirst($this->name);		// Make sure we have an iterator class for this driver.		if (!class_exists($iteratorClass))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException(sprintf('class *%s* is not defined', $iteratorClass));		}		// Return a new iterator		return new $iteratorClass($this->execute(), $column, $class);	}	/**	 * Retrieves field information about the given tables.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True (default) to only return field types.	 *	 * @return  array  An array of fields by table.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableColumns($table, $typeOnly = true);	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableCreate($tables);	/**	 * Retrieves field information about the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  An array of keys for the table(s).	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableKeys($tables);	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableList();	/**	 * Determine whether or not the database engine supports UTF-8 character encoding.	 *	 * @return  boolean  True if the database engine supports UTF-8 character encoding.	 *	 * @since   11.1	 * @deprecated 12.3 Use hasUTFSupport() instead	 */	public function getUTFSupport()	{		JLog::add('JDatabase::getUTFSupport() is deprecated. Use JDatabase::hasUTFSupport() instead.', JLog::WARNING, 'deprecated');		return $this->hasUTFSupport();	}	/**	 * Determine whether or not the database engine supports UTF-8 character encoding.	 *	 * @return  boolean  True if the database engine supports UTF-8 character encoding.	 *	 * @since   12.1	 */	public function hasUTFSupport()	{		return $this->utf;	}	/**	 * Get the version of the database connector	 *	 * @return  string  The database connector version.	 *	 * @since   11.1	 */	abstract public function getVersion();	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   11.1	 */	abstract public function insertid();	/**	 * Inserts a row into a table based on an object's properties.	 *	 * @param   string  $table    The name of the database table to insert into.	 * @param   object  &$object  A reference to an object whose public properties match the table fields.	 * @param   string  $key      The name of the primary key. If provided the object property is updated.	 *	 * @return  boolean    True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function insertObject($table, &$object, $key = null)	{		$fields = array();		$values = array();		// Iterate over the object variables to build the query fields and values.		foreach (get_object_vars($object) as $k => $v)		{			// Only process non-null scalars.			if (is_array($v) or is_object($v) or $v === null)			{				continue;			}			// Ignore any internal fields.			if ($k[0] == '_')			{				continue;			}			// Prepare and sanitize the fields and values for the database query.			$fields[] = $this->quoteName($k);			$values[] = $this->quote($v);		}		// Create the base insert statement.		$query = $this->getQuery(true)			->insert($this->quoteName($table))				->columns($fields)				->values(implode(',', $values));		// Set the query and execute the insert.		$this->setQuery($query);		if (!$this->execute())		{			return false;		}		// Update the primary key if it exists.		$id = $this->insertid();		if ($key && $id && is_string($key))		{			$object->$key = $id;		}		return true;	}	/**	 * Method to check whether the installed database version is supported by the database driver	 *	 * @return  boolean  True if the database version is supported	 *	 * @since   12.1	 */	public function isMinimumVersion()	{		return version_compare($this->getVersion(), static::$dbMinimum) >= 0;	}	/**	 * Method to get the first row of the result set from the database query as an associative array	 * of ['field_name' => 'row_value'].	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadAssoc()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an associative array.		if ($array = $this->fetchAssoc($cursor))		{			$ret = $array;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an associative array	 * of ['field_name' => 'row_value'].  The array of rows can optionally be keyed by a field name, but defaults to	 * a sequential numeric array.	 *	 * NOTE: Chosing to key the result array by a non-unique field name can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key     The name of a field on which to key the result array.	 * @param   string  $column  An optional column name. Instead of the whole row, only this column value will be in	 * the result array.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadAssocList($key = null, $column = null)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set.		while ($row = $this->fetchAssoc($cursor))		{			$value = ($column) ? (isset($row[$column]) ? $row[$column] : $row) : $row;			if ($key)			{				$array[$row[$key]] = $value;			}			else			{				$array[] = $value;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get an array of values from the <var>$offset</var> field in each row of the result set from	 * the database query.	 *	 * @param   integer  $offset  The row offset to use to build the result array.	 *	 * @return  mixed    The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadColumn($offset = 0)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as arrays.		while ($row = $this->fetchArray($cursor))		{			$array[] = $row[$offset];		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get the next row in the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The result of the query as an array, false if there are no more rows.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadNextObject($class = 'stdClass')	{		JLog::add(__METHOD__ . '() is deprecated. Use JDatabase::getIterator() instead.', JLog::WARNING, 'deprecated');		$this->connect();		static $cursor = null;		// Execute the query and get the result set cursor.		if ( is_null($cursor) )		{			if (!($cursor = $this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchObject($cursor, $class))		{			return $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		$cursor = null;		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadNextRow()	{		JLog::add('JDatabase::loadNextRow() is deprecated. Use JDatabase::getIterator() instead.', JLog::WARNING, 'deprecated');		$this->connect();		static $cursor = null;		// Execute the query and get the result set cursor.		if ( is_null($cursor) )		{			if (!($cursor = $this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchArray($cursor))		{			return $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		$cursor = null;		return false;	}	/**	 * Method to get the first row of the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadObject($class = 'stdClass')	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an object of type $class.		if ($object = $this->fetchObject($cursor, $class))		{			$ret = $object;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an object.  The array	 * of objects can optionally be keyed by a field name, but defaults to a sequential numeric array.	 *	 * NOTE: Choosing to key the result array by a non-unique field name can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key    The name of a field on which to key the result array.	 * @param   string  $class  The class name to use for the returned row objects.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadObjectList($key = '', $class = 'stdClass')	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as objects of type $class.		while ($row = $this->fetchObject($cursor, $class))		{			if ($key)			{				$array[$row->$key] = $row;			}			else			{				$array[] = $row;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get the first field of the first row of the result set from the database query.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadResult()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = $this->fetchArray($cursor))		{			$ret = $row[0];		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get the first row of the result set from the database query as an array.  Columns are indexed	 * numerically so the first column in the result set would be accessible via <var>$row[0]</var>, etc.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRow()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = $this->fetchArray($cursor))		{			$ret = $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an array.  The array	 * of objects can optionally be keyed by a field offset, but defaults to a sequential numeric array.	 *	 * NOTE: Choosing to key the result array by a non-unique field can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key  The name of a field on which to key the result array.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRowList($key = null)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as arrays.		while ($row = $this->fetchArray($cursor))		{			if ($key !== null)			{				$array[$row[$key]] = $row;			}			else			{				$array[] = $row;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $tableName  The name of the table to unlock.	 *	 * @return  JDatabaseDriver     Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function lockTable($tableName);	/**	 * Method to quote and optionally escape a string to database requirements for insertion into the database.	 *	 * @param   string   $text    The string to quote.	 * @param   boolean  $escape  True (default) to escape the string, false to leave it unchanged.	 *	 * @return  string  The quoted input string.	 *	 * @since   11.1	 */	public function quote($text, $escape = true)	{		return '\'' . ($escape ? $this->escape($text) : $text) . '\'';	}	/**	 * Wrap an SQL statement identifier name such as column, table or database names in quotes to prevent injection	 * risks and reserved word conflicts.	 *	 * @param   mixed  $name  The identifier name to wrap in quotes, or an array of identifier names to wrap in quotes.	 *                        Each type supports dot-notation name.	 * @param   mixed  $as    The AS query part associated to $name. It can be string or array, in latter case it has to be	 *                        same length of $name; if is null there will not be any AS part for string or array element.	 *	 * @return  mixed  The quote wrapped name, same type of $name.	 *	 * @since   11.1	 */	public function quoteName($name, $as = null)	{		if (is_string($name))		{			$quotedName = $this->quoteNameStr(explode('.', $name));			$quotedAs = '';			if (!is_null($as))			{				settype($as, 'array');				$quotedAs .= ' AS ' . $this->quoteNameStr($as);			}			return $quotedName . $quotedAs;		}		else		{			$fin = array();			if (is_null($as))			{				foreach ($name as $str)				{					$fin[] = $this->quoteName($str);				}			}			elseif (is_array($name) && (count($name) == count($as)))			{				$count = count($name);				for ($i = 0; $i < $count; $i++)				{					$fin[] = $this->quoteName($name[$i], $as[$i]);				}			}			return $fin;		}	}	/**	 * Quote strings coming from quoteName call.	 *	 * @param   array  $strArr  Array of strings coming from quoteName dot-explosion.	 *	 * @return  string  Dot-imploded string of quoted parts.	 *	 * @since 11.3	 */	protected function quoteNameStr($strArr)	{		$parts = array();		$q = $this->nameQuote;		foreach ($strArr as $part)		{			if (is_null($part))			{				continue;			}			if (strlen($q) == 1)			{				$parts[] = $q . $part . $q;			}			else			{				$parts[] = $q{0} . $part . $q{1};			}		}		return implode('.', $parts);	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   11.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = '';		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "'", $startPos);			$k = strpos($query, '"', $startPos);			if (($k !== false) && (($k < $j) || ($j === false)))			{				$quoteChar = '"';				$j = $k;			}			else			{				$quoteChar = "'";			}			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Table prefix	 * @param   string  $prefix    For the table - used to rename constraints in non-mysql databases	 *	 * @return  JDatabaseDriver    Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function renameTable($oldTable, $newTable, $backup = null, $prefix = null);	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function select($database);	/**	 * Sets the database debugging state for the driver.	 *	 * @param   boolean  $level  True to enable debugging.	 *	 * @return  boolean  The old debugging level.	 *	 * @since   11.1	 */	public function setDebug($level)	{		$previous = $this->debug;		$this->debug = (bool) $level;		return $previous;	}	/**	 * Sets the SQL statement string for later execution.	 *	 * @param   mixed    $query   The SQL statement to set either as a JDatabaseQuery object or a string.	 * @param   integer  $offset  The affected row offset to set.	 * @param   integer  $limit   The maximum affected rows to set.	 *	 * @return  JDatabaseDriver  This object to support method chaining.	 *	 * @since   11.1	 */	public function setQuery($query, $offset = 0, $limit = 0)	{		$this->sql = $query;		$this->limit = (int) max(0, $limit);		$this->offset = (int) max(0, $offset);		return $this;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	abstract public function setUTF();	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionCommit();	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionRollback();	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionStart();	/**	 * Method to truncate a table.	 *	 * @param   string  $table  The table to truncate	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function truncateTable($table)	{		$this->setQuery('TRUNCATE TABLE ' . $this->quoteName($table));		$this->execute();	}	/**	 * Updates a row in a table based on an object's properties.	 *	 * @param   string   $table    The name of the database table to update.	 * @param   object   &$object  A reference to an object whose public properties match the table fields.	 * @param   array    $key      The name of the primary key.	 * @param   boolean  $nulls    True to update null fields or false to ignore them.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function updateObject($table, &$object, $key, $nulls = false)	{		$fields = array();		$where = array();		if (is_string($key))		{			$key = array($key);		}		if (is_object($key))		{			$key = (array) $key;		}		// Create the base update statement.		$statement = 'UPDATE ' . $this->quoteName($table) . ' SET %s WHERE %s';		// Iterate over the object variables to build the query fields/value pairs.		foreach (get_object_vars($object) as $k => $v)		{			// Only process scalars that are not internal fields.			if (is_array($v) or is_object($v) or $k[0] == '_')			{				continue;			}			// Set the primary key to the WHERE clause instead of a field to update.			if (in_array($k, $key))			{				$where[] = $this->quoteName($k) . '=' . $this->quote($v);				continue;			}			// Prepare and sanitize the fields and values for the database query.			if ($v === null)			{				// If the value is null and we want to update nulls then set it.				if ($nulls)				{					$val = 'NULL';				}				// If the value is null and we do not want to update nulls then ignore this field.				else				{					continue;				}			}			// The field is not null so we prep it for update.			else			{				$val = $this->quote($v);			}			// Add the field to be updated.			$fields[] = $this->quoteName($k) . '=' . $val;		}		// We don't have any fields to update.		if (empty($fields))		{			return true;		}		// Set the query and execute the update.		$this->setQuery(sprintf($statement, implode(",", $fields), implode(' AND ', $where)));		return $this->execute();	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	abstract public function execute();	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriver  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function unlockTables();}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('NewsfeedsHelper', JPATH_ADMINISTRATOR . '/components/com_newsfeeds/helpers/newsfeeds.php');/** * Utility class for creating HTML Grids * * @static * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.5 */class JHtmlNewsfeed{	/**	 * Get the associated language flags	 *	 * @param   int  $newsfeedid  The item id to search associations	 *	 * @return  string  The language HTML	 */	public static function association($newsfeedid)	{		// Defaults		$html = '';		// Get the associations		if ($associations = JLanguageAssociations::getAssociations('com_newsfeeds', '#__newsfeeds', 'com_newsfeeds.item', $newsfeedid))		{			foreach ($associations as $tag => $associated)			{				$associations[$tag] = (int) $associated->id;			}			// Get the associated newsfeed items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('c.*')				->from('#__newsfeeds as c')				->select('cat.title as category_title')				->join('LEFT', '#__categories as cat ON cat.id=c.catid')				->where('c.id IN (' . implode(',', array_values($associations)) . ')')				->join('LEFT', '#__languages as l ON c.language=l.lang_code')				->select('l.image')				->select('l.title as language_title');			$db->setQuery($query);			try			{				$items = $db->loadObjectList('id');			}			catch (runtimeException $e)			{				throw new Exception($e->getMessage(), 500);				return false;			}			$tags = array();			// Construct html			foreach ($associations as $tag => $associated)			{				if ($associated != $newsfeedid)				{					$tags[] = JText::sprintf('COM_NEWSFEEDS_TIP_ASSOCIATED_LANGUAGE',						JHtml::_('image', 'mod_languages/' . $items[$associated]->image . '.gif',							$items[$associated]->language_title,							array('title' => $items[$associated]->language_title),							true						),						$items[$associated]->name, $items[$associated]->category_title					);				}			}			$html = JHtml::_('tooltip', implode('<br />', $tags), JText::_('COM_NEWSFEEDS_TIP_ASSOCIATION'), 'admin/icon-16-links.png');		}		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();if ($app->isSite()){	JSession::checkToken('get') or die(JText::_('JINVALID_TOKEN'));}require_once JPATH_ROOT . '/components/com_content/helpers/route.php';JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');$function  = $app->input->getCmd('function', 'jSelectArticle');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_content&view=articles&layout=modal&tmpl=component&function='.$function.'&'.JSession::getFormToken().'=1');?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<fieldset class="filter clearfix">		<div class="btn-toolbar">			<div class="btn-group pull-left">				<label for="filter_search">					<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>				</label>			</div>			<div class="btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>">					<span class="icon-search"></span><?php echo '&#160;' . JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>				<button type="button" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();">					<span class="icon-remove"></span><?php echo '&#160;' . JText::_('JSEARCH_FILTER_CLEAR'); ?></button>			</div>			<?php if ($app->isAdmin()) : ?>				<input onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('0', '<?php echo $this->escape(addslashes(JText::_('COM_CONTENT_SELECT_AN_ARTICLE'))); ?>', null, null);" class="btn" type="button" value="<?php echo JText::_('COM_CONTENT_NONE'); ?>" />			<?php endif; ?>			<div class="clearfix"></div>		</div>		<hr class="hr-condensed" />		<div class="filters pull-left">			<select name="filter_access" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<select name="filter_published" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content', array('filter.language' => array('*', $this->state->get('filter.forcedLanguage')))), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />			<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<select name="filter_language" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<?php endif; ?>		</div>	</fieldset>	<table class="table table-striped table-condensed">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<?php if ($item->language && JLanguageMultilang::isEnabled())			{				$tag = strlen($item->language);				if ($tag == 5)				{					$lang = substr($item->language, 0, 2);				}				elseif ($tag == 6)				{					$lang = substr($item->language, 0, 3);				}				else {					$lang = "";				}			}			elseif (!JLanguageMultilang::isEnabled())			{				$lang = "";			}			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->title)); ?>', '<?php echo $this->escape($item->catid); ?>', null, '<?php echo $this->escape(ContentHelperRoute::getArticleRoute($item->id, $item->catid, $item->language)); ?>', '<?php echo $this->escape($lang); ?>', null);">						<?php echo $this->escape($item->title); ?></a>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with phpsetting * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlPhpSetting{	/**	 * Method to generate a boolean message for a value	 *	 * @param boolean $val is the value set?	 *	 * @return  string html code	 */	public static function boolean($val)	{		if ($val)		{			return JText::_('JON');		}		else		{			return JText::_('JOFF');		}	}	/**	 * Method to generate a boolean message for a value	 *	 * @param boolean $val is the value set?	 *	 * @return  string html code	 */	public static function set($val)	{		if ($val)		{			return JText::_('JYES');		}		else		{			return JText::_('JNO');		}	}	/**	 * Method to generate a string message for a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 */	public static function string($val)	{		if (empty($val))		{			return JText::_('JNONE');		}		else		{			return $val;		}	}	/**	 * Method to generate an integer from a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 *	 * @deprecated  4.0  Use intval() or casting instead.	 */	public static function integer($val)	{		JLog::add('JHtmlPhpSetting::integer() is deprecated. Use intval() or casting instead.', JLog::WARNING, 'deprecated');		return (int) $val;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Prototype admin model. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelAdmin extends JModelForm{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  12.2	 */	protected $text_prefix = null;	/**	 * The event to trigger after deleting the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_after_delete = null;	/**	 * The event to trigger after saving the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_after_save = null;	/**	 * The event to trigger before deleting the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_before_delete = null;	/**	 * The event to trigger before saving the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_before_save = null;	/**	 * The event to trigger after changing the published state of the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_change_state = null;	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JModelLegacy	 * @since   12.2	 */	public function __construct($config = array())	{		parent::__construct($config);		if (isset($config['event_after_delete']))		{			$this->event_after_delete = $config['event_after_delete'];		}		elseif (empty($this->event_after_delete))		{			$this->event_after_delete = 'onContentAfterDelete';		}		if (isset($config['event_after_save']))		{			$this->event_after_save = $config['event_after_save'];		}		elseif (empty($this->event_after_save))		{			$this->event_after_save = 'onContentAfterSave';		}		if (isset($config['event_before_delete']))		{			$this->event_before_delete = $config['event_before_delete'];		}		elseif (empty($this->event_before_delete))		{			$this->event_before_delete = 'onContentBeforeDelete';		}		if (isset($config['event_before_save']))		{			$this->event_before_save = $config['event_before_save'];		}		elseif (empty($this->event_before_save))		{			$this->event_before_save = 'onContentBeforeSave';		}		if (isset($config['event_change_state']))		{			$this->event_change_state = $config['event_change_state'];		}		elseif (empty($this->event_change_state))		{			$this->event_change_state = 'onContentChangeState';		}		// Guess the JText message prefix. Defaults to the option.		if (isset($config['text_prefix']))		{			$this->text_prefix = strtoupper($config['text_prefix']);		}		elseif (empty($this->text_prefix))		{			$this->text_prefix = strtoupper($this->option);		}	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   12.2	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['category_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['category_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['category_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['tag']))		{			if (!$this->batchTag($commands['tag'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch access level changes for a group of rows.	 *	 * @param   integer  $value     The new value matching an Asset Group ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   12.2	 */	protected function batchAccess($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->access = (int) $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since	12.2	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$extension = JFactory::getApplication()->input->get('option', '');		$user = JFactory::getUser();		if (!$user->authorise('core.create', $extension . '.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->title);			$table->title = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			// $table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i]	= $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch language changes for a group of rows.	 *	 * @param   string  $value     The new value matching a language.	 * @param   array   $pks       An array of row IDs.	 * @param   array   $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   11.3	 */	protected function batchLanguage($value, $pks, $contexts)	{		// Set the variables		$user	= JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->language = $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch move items to a new category	 *	 * @param   integer  $value     The new category ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since	12.2	 */	protected function batchMove($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that user has create and edit permission for the component		$extension = JFactory::getApplication()->input->get('option', '');		$user = JFactory::getUser();		if (!$user->authorise('core.create', $extension . '.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we proceed		foreach ($pks as $pk)		{			if (!$user->authorise('core.edit', $contexts[$pk]))			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Set the new category ID			$table->catid = $categoryId;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch tag a list of item.	 *	 * @param   integer  $value     The value of the new tag.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  void.	 *	 * @since   3.1	 */	protected function batchTag($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$metaObject = json_decode($table->metadata);				$metaObject->tags = (isset($metaObject->tags) && is_array($metaObject->tags)) ? $metaObject->tags : array();				$metaObject->tags[] = (int) $value;				$metaObject->tags = array_unique($metaObject->tags);				$table->metadata = json_encode($metaObject);				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission for the component.	 *	 * @since   12.2	 */	protected function canDelete($record)	{		$user = JFactory::getUser();		return $user->authorise('core.delete', $this->option);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission for the component.	 *	 * @since   12.2	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return $user->authorise('core.edit.state', $this->option);	}	/**	 * Method override to check-in a record or an array of record	 *	 * @param   mixed  $pks  The ID of the primary key or an array of IDs	 *	 * @return  mixed  Boolean false if there is an error, otherwise the count of records checked in.	 *	 * @since   12.2	 */	public function checkin($pks = array())	{		$pks = (array) $pks;		$table = $this->getTable();		$count = 0;		if (empty($pks))		{			$pks = array((int) $this->getState($this->getName() . '.id'));		}		// Check in all items.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				if ($table->checked_out > 0)				{					if (!parent::checkin($pk))					{						return false;					}					$count++;				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return $count;	}	/**	 * Method override to check-out a record.	 *	 * @param   integer  $pk  The ID of the primary key.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   12.2	 */	public function checkout($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState($this->getName() . '.id');		return parent::checkout($pk);	}	/**	 * Method to delete one or more records.	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   12.2	 */	public function delete(&$pks)	{		$dispatcher = JEventDispatcher::getInstance();		$pks = (array) $pks;		$table = $this->getTable();		// Include the content plugins for the on delete events.		JPluginHelper::importPlugin('content');		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if ($this->canDelete($table))				{					$context = $this->option . '.' . $this->name;					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger($this->event_before_delete, array($context, $table));					if (in_array(false, $result, true))					{						$this->setError($table->getError());						return false;					}					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					// Trigger the onContentAfterDelete event.					$dispatcher->trigger($this->event_after_delete, array($context, $table));				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					$error = $this->getError();					if ($error)					{						JLog::add($error, JLog::WARNING, 'jerror');						return false;					}					else					{						JLog::add(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'), JLog::WARNING, 'jerror');						return false;					}				}			}			else			{				$this->setError($table->getError());				return false;			}		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $category_id  The id of the category.	 * @param   string   $alias        The alias.	 * @param   string   $title        The title.	 *	 * @return	array  Contains the modified title and alias.	 *	 * @since	12.2	 */	protected function generateNewTitle($category_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'catid' => $category_id)))		{			$title = JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed    Object on success, false on failure.	 *	 * @since   12.2	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState($this->getName() . '.id');		$table = $this->getTable();		if ($pk > 0)		{			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $table->getError())			{				$this->setError($table->getError());				return false;			}		}		// Convert to the JObject before adding other data.		$properties = $table->getProperties(1);		$item = JArrayHelper::toObject($properties, 'JObject');		if (property_exists($item, 'params'))		{			$registry = new JRegistry;			$registry->loadString($item->params);			$item->params = $registry->toArray();		}		return $item;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   JTable  $table  A JTable object.	 *	 * @return  array  An array of conditions to add to ordering queries.	 *	 * @since   12.2	 */	protected function getReorderConditions($table)	{		return array();	}	/**	 * Stock method to auto-populate the model state.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function populateState()	{		$table = $this->getTable();		$key = $table->getKeyName();		// Get the pk of the record from the request.		$pk = JFactory::getApplication()->input->getInt($key);		$this->setState($this->getName() . '.id', $pk);		// Load the parameters.		$value = JComponentHelper::getParams($this->option);		$this->setState('params', $value);	}	/**	 * Prepare and sanitise the table data prior to saving.	 *	 * @param   JTable  $table  A reference to a JTable object.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function prepareTable($table)	{		// Derived class will provide its own implementation if required.	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks   A list of the primary keys to change.	 * @param   integer  $value  The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   12.2	 */	public function publish(&$pks, $value = 1)	{		$dispatcher = JEventDispatcher::getInstance();		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Include the content plugins for the change of state event.		JPluginHelper::importPlugin('content');		// Access checks.		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');					return false;				}			}		}		// Attempt to change the state of the records.		if (!$table->publish($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		$context = $this->option . '.' . $this->name;		// Trigger the onContentChangeState event.		$result = $dispatcher->trigger($this->event_change_state, array($context, $pks, $value));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to adjust the ordering of a row.	 *	 * Returns NULL if the user did not have edit	 * privileges for any of the selected primary keys.	 *	 * @param   integer  $pks    The ID of the primary key to move.	 * @param   integer  $delta  Increment, usually +1 or -1	 *	 * @return  mixed  False on failure or error, true on success, null if the $pk is empty (no items selected).	 *	 * @since   12.2	 */	public function reorder($pks, $delta = 0)	{		$table = $this->getTable();		$pks = (array) $pks;		$result = true;		$allowed = true;		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk) && $this->checkout($pk))			{				// Access checks.				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					$this->checkin($pk);					JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');					$allowed = false;					continue;				}				$where = array();				$where = $this->getReorderConditions($table);				if (!$table->move($delta, $where))				{					$this->setError($table->getError());					unset($pks[$i]);					$result = false;				}				$this->checkin($pk);			}			else			{				$this->setError($table->getError());				unset($pks[$i]);				$result = false;			}		}		if ($allowed === false && empty($pks))		{			$result = null;		}		// Clear the component's cache		if ($result == true)		{			$this->cleanCache();		}		return $result;	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success, False on error.	 *	 * @since   12.2	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$key = $table->getKeyName();		$pk = (!empty($data[$key])) ? $data[$key] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Allow an exception to be thrown.		try		{			// Load the row if saving an existing record.			if ($pk > 0)			{				$table->load($pk);				$isNew = false;			}			// Bind the data.			if (!$table->bind($data))			{				$this->setError($table->getError());				return false;			}			// Prepare the row for saving			$this->prepareTable($table);			// Check the data.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Trigger the onContentBeforeSave event.			$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, $table, $isNew));			if (in_array(false, $result, true))			{				$this->setError($table->getError());				return false;			}			// Store the data.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Clean the cache.			$this->cleanCache();			// Trigger the onContentAfterSave event.			$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, $table, $isNew));		}		catch (Exception $e)		{			$this->setError($e->getMessage());			return false;		}		$pkName = $table->getKeyName();		if (isset($table->$pkName))		{			$this->setState($this->getName() . '.id', $table->$pkName);		}		$this->setState($this->getName() . '.new', $isNew);		return true;	}	/**	 * Saves the manually set order of records.	 *	 * @param   array    $pks    An array of primary key ids.	 * @param   integer  $order  +1 or -1	 *	 * @return  mixed	 *	 * @since   12.2	 */	public function saveorder($pks = null, $order = null)	{		$table = $this->getTable();		$conditions = array();		if (empty($pks))		{			return JError::raiseWarning(500, JText::_($this->text_prefix . '_ERROR_NO_ITEMS_SELECTED'));		}		// Update ordering values		foreach ($pks as $i => $pk)		{			$table->load((int) $pk);			// Access checks.			if (!$this->canEditState($table))			{				// Prune items that you can't change.				unset($pks[$i]);				JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');			}			elseif ($table->ordering != $order[$i])			{				$table->ordering = $order[$i];				if (!$table->store())				{					$this->setError($table->getError());					return false;				}				// Remember to reorder within position and client_id				$condition = $this->getReorderConditions($table);				$found = false;				foreach ($conditions as $cond)				{					if ($cond[1] == $condition)					{						$found = true;						break;					}				}				if (!$found)				{					$key = $table->getKeyName();					$conditions[] = array($table->$key, $condition);				}			}		}		// Execute reorder for each category.		foreach ($conditions as $cond)		{			$table->load($cond[0]);			$table->reorder($cond[1]);		}		// Clear the component's cache		$this->cleanCache();		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of banner records. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelClients extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'contact', 'a.contact',				'state', 'a.state',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'nbanners',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id AS id,' .					'a.name AS name,' .					'a.contact AS contact,' .					'a.checked_out AS checked_out,' .					'a.checked_out_time AS checked_out_time, ' .					'a.state AS state,' .					'a.metakey AS metakey,' .					'a.purchase_type as purchase_type'			)		);		$query->from($db->quoteName('#__banner_clients') . ' AS a');		// Join over the banners for counting		$query->select('COUNT(b.id) as nbanners')			->join('LEFT', '#__banners AS b ON a.id = b.cid');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Filter by published state		$published = $this->getState('filter.state');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state IN (0, 1))');		}		$query->group('a.id, a.name, a.contact, a.checked_out, a.checked_out_time, a.state, a.metakey, a.purchase_type, editor');		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.name LIKE ' . $search);			}		}		$ordering_o = $this->getState('list.ordering', 'ordering');		if ($ordering_o == 'nbanners')		{			$ordering_o = 'COUNT(b.id)';		}		// Add the list ordering clause.		$query->order($db->escape($ordering_o) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'menu.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><div class="menu-edit"><form action="<?php echo JRoute::_('index.php?option=com_menus&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form"><div class="col main-section">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_MENUS_MENU_DETAILS');?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<li><?php echo $this->form->getLabel('menutype'); ?>				<?php echo $this->form->getInput('menutype'); ?></li>				<li><?php echo $this->form->getLabel('description'); ?>				<?php echo $this->form->getInput('description'); ?></li>			</ul>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?>	</div></form><div class="clr"></div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Articles list controller class. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactControllerContacts extends JControllerAdmin{	/**	 * Constructor.	 *	 * @param   array  $config	An optional associative array of configuration settings.	 *	 * @return  ContactControllerContacts	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unfeatured',	'featured');	}	/**	 * Method to toggle the featured setting of a list of contacts.	 *	 * @return  void	 * @since   1.6	 */	public function featured()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user   = JFactory::getUser();		$ids    = $this->input->get('cid', array(), 'array');		$values = array('featured' => 1, 'unfeatured' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		// Get the model.		$model  = $this->getModel();		// Access checks.		foreach ($ids as $i => $id)		{			$item = $model->getItem($id);			if (!$user->authorise('core.edit.state', 'com_contact.category.'.(int) $item->catid))			{				// Prune items that you can't change.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_CONTACT_NO_ITEM_SELECTED'));		}		else		{			// Publish the items.			if (!$model->featured($ids, $value))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_contact&view=contacts');	}	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the PHP class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Contact', $prefix = 'ContactModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$pks   = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}	/**	 * Function that allows child controller access to model data	 * after the item has been deleted.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   integer       $ids    The array of ids for items being deleted.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postDeleteHook(JModelLegacy $model, $ids = null)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');$user = JFactory::getUser();$canDo = TemplatesHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'style.cancel' || document.formvalidator.isValid(document.id('style-form')))		{			Joomla.submitform(task, document.getElementById('style-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_templates&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="style-form" class="form-validate">	<div class="width-60 fltlft">		<fieldset class="adminform">			<legend><?php echo JText::_('JDETAILS');?></legend>			<ul class="adminformlist">			<li><?php echo $this->form->getLabel('title'); ?>			<?php echo $this->form->getInput('title'); ?></li>			<li><?php echo $this->form->getLabel('template'); ?>			<?php echo $this->form->getInput('template'); ?>			<?php echo $this->form->getLabel('client_id'); ?>			<?php echo $this->form->getInput('client_id'); ?>			<input type="text" size="35" value="<?php echo $this->item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>	" class="readonly" readonly="readonly" /></li>			<li><?php echo $this->form->getLabel('home'); ?>			<?php echo $this->form->getInput('home'); ?></li>			<?php if ($this->item->id) : ?>				<li><?php echo $this->form->getLabel('id'); ?>				<span class="readonly"><?php echo $this->item->id; ?></span></li>			<?php endif; ?>			</ul>			<div class="clr"></div>			<?php if ($this->item->xml) : ?>				<?php if ($text = trim($this->item->xml->description)) : ?>					<label>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_DESCRIPTION'); ?>					</label>					<span class="readonly mod-desc"><?php echo JText::_($text); ?></span>				<?php endif; ?>			<?php else : ?>				<p class="error"><?php echo JText::_('COM_TEMPLATES_ERR_XML'); ?></p>			<?php endif; ?>			<div class="clr"></div>		</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<div class="width-40 fltrt">	<?php echo JHtml::_('sliders.start', 'template-sliders-'.$this->item->id); ?>		<?php //get the menu parameters that are automatically set but may be modified.			echo $this->loadTemplate('options'); ?>		<div class="clr"></div>	<?php echo JHtml::_('sliders.end'); ?>	</div>	<?php if ($user->authorise('core.edit', 'com_menu') && $this->item->client_id == 0):?>		<?php if ($canDo->get('core.edit.state')) : ?>			<div class="width-60 fltlft">			<?php echo $this->loadTemplate('assignment'); ?>			</div>			<?php endif; ?>		<?php endif;?>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/debug.php';/** * Methods supporting a list of user records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelDebugGroup extends JModelList{	/**	 * Get a list of the actions.	 *	 * @return  array	 * @since   1.6	 */	public function getDebugActions()	{		$component = $this->getState('filter.component');		return UsersHelperDebug::getDebugActions($component);	}	/**	 * Override getItems method.	 *	 * @return  array	 * @since   1.6	 */	public function getItems()	{		$groupId = $this->getState('filter.group_id');		if (($assets = parent::getItems()) && $groupId)		{			$actions = $this->getDebugActions();			foreach ($assets as &$asset)			{				$asset->checks = array();				foreach ($actions as $action)				{					$name = $action[0];					$level = $action[1];					// Check that we check this action for the level of the asset.					if ($action[1] === null || $action[1] >= $asset->level)					{						// We need to test this action.						$asset->checks[$name] = JAccess::checkGroup($groupId, $action[0], $asset->name);					}					else					{						// We ignore this action.						$asset->checks[$name] = 'skip';					}				}			}		}		return $assets;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Adjust the context to support modal layouts.		$layout = $app->input->get('layout', 'default');		if ($layout)		{			$this->context .= '.' . $layout;		}		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$value = $this->getUserStateFromRequest($this->context . '.filter.group_id', 'group_id', 0, 'int', false);		$this->setState('filter.group_id', $value);		$levelStart = $this->getUserStateFromRequest($this->context . '.filter.level_start', 'filter_level_start', 0, 'int');		$this->setState('filter.level_start', $levelStart);		$value = $this->getUserStateFromRequest($this->context . '.filter.level_end', 'filter_level_end', 0, 'int');		if ($value > 0 && $value < $levelStart)		{			$value = $levelStart;		}		$this->setState('filter.level_end', $value);		$component = $this->getUserStateFromRequest($this->context . '.filter.component', 'filter_component');		$this->setState('filter.component', $component);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.level_start');		$id .= ':' . $this->getState('filter.level_end');		$id .= ':' . $this->getState('filter.component');		return parent::getStoreId($id);	}	/**	 * Get the group being debugged.	 *	 * @return  JObject	 * @since   1.6	 */	public function getGroup()	{		$groupId = (int) $this->getState('filter.group_id');		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('id, title')			->from('#__usergroups')			->where('id = ' . $groupId);		$db->setQuery($query);		try		{			$group = $db->loadObject();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return $group;	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.name, a.title, a.level, a.lft, a.rgt'			)		);		$query->from($db->quoteName('#__assets') . ' AS a');		// Filter the items over the search string if set.		if ($this->getState('filter.search'))		{			// Escape the search token.			$token = $db->quote('%' . $db->escape($this->getState('filter.search')) . '%');			// Compile the different search clauses.			$searches = array();			$searches[] = 'a.name LIKE ' . $token;			$searches[] = 'a.title LIKE ' . $token;			// Add the clauses to the query.			$query->where('(' . implode(' OR ', $searches) . ')');		}		// Filter on the start and end levels.		$levelStart = (int) $this->getState('filter.level_start');		$levelEnd = (int) $this->getState('filter.level_end');		if ($levelEnd > 0 && $levelEnd < $levelStart)		{			$levelEnd = $levelStart;		}		if ($levelStart > 0)		{			$query->where('a.level >= ' . $levelStart);		}		if ($levelEnd > 0)		{			$query->where('a.level <= ' . $levelEnd);		}		// Filter the items over the component if set.		if ($this->getState('filter.component'))		{			$component = $this->getState('filter.component');			$query->where('(a.name = ' . $db->quote($component) . ' OR a.name LIKE ' . $db->quote($component . '.%') . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Getting params from template$params = JFactory::getApplication()->getTemplate(true)->params;$app = JFactory::getApplication();$doc = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;// Detecting Active Variables$option   = $app->input->getCmd('option', '');$view     = $app->input->getCmd('view', '');$layout   = $app->input->getCmd('layout', '');$task     = $app->input->getCmd('task', '');$itemid   = $app->input->getCmd('Itemid', '');$sitename = $app->getCfg('sitename');if($task == "edit" || $layout == "form" ){	$fullWidth = 1;}else{	$fullWidth = 0;}// Add JavaScript FrameworksJHtml::_('bootstrap.framework');// Add Stylesheets$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Add current user information$user = JFactory::getUser();// Adjusting content widthif ($this->countModules('position-7') && $this->countModules('position-8')){	$span = "span6";}elseif ($this->countModules('position-7') && !$this->countModules('position-8')){	$span = "span9";}elseif (!$this->countModules('position-7') && $this->countModules('position-8')){	$span = "span9";}else{	$span = "span12";}// Logo file or site title paramif ($this->params->get('logoFile')){	$logo = '<img src="'. JURI::root() . $this->params->get('logoFile') .'" alt="'. $sitename .'" />';}elseif ($this->params->get('sitetitle')){	$logo = '<span class="site-title" title="'. $sitename .'">'. htmlspecialchars($this->params->get('sitetitle')) .'</span>';}else{	$logo = '<span class="site-title" title="'. $sitename .'">'. $sitename .'</span>';}?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0" />	<jdoc:include type="head" />	<?php	// Use of Google Font	if ($this->params->get('googleFont'))	{	?>		<link href='http://fonts.googleapis.com/css?family=<?php echo $this->params->get('googleFontName');?>' rel='stylesheet' type='text/css' />		<style type="text/css">			h1,h2,h3,h4,h5,h6,.site-title{				font-family: '<?php echo str_replace('+', ' ', $this->params->get('googleFontName'));?>', sans-serif;			}		</style>	<?php	}	?>	<?php	// Template color	if ($this->params->get('templateColor'))	{	?>	<style type="text/css">		body.site		{			border-top: 3px solid <?php echo $this->params->get('templateColor');?>;			background-color: <?php echo $this->params->get('templateBackgroundColor');?>		}		a		{			color: <?php echo $this->params->get('templateColor');?>;		}		.navbar-inner, .nav-list > .active > a, .nav-list > .active > a:hover, .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover, .nav-pills > .active > a, .nav-pills > .active > a:hover,		.btn-primary		{			background: <?php echo $this->params->get('templateColor');?>;		}		.navbar-inner		{			-moz-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			-webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);		}	</style>	<?php	}	?>	<!--[if lt IE 9]>		<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script>	<![endif]--></head><body class="site <?php echo $option	. ' view-' . $view	. ($layout ? ' layout-' . $layout : ' no-layout')	. ($task ? ' task-' . $task : ' no-task')	. ($itemid ? ' itemid-' . $itemid : '')	. ($params->get('fluidContainer') ? ' fluid' : '');?>">	<!-- Body -->	<div class="body">		<div class="container<?php echo ($params->get('fluidContainer') ? '-fluid' : '');?>">			<!-- Header -->			<div class="header">				<div class="header-inner clearfix">					<a class="brand pull-left" href="<?php echo $this->baseurl; ?>">						<?php echo $logo;?> <?php if ($this->params->get('sitedescription')) { echo '<div class="site-description">'. htmlspecialchars($this->params->get('sitedescription')) .'</div>'; } ?>					</a>					<div class="header-search pull-right">						<jdoc:include type="modules" name="position-0" style="none" />					</div>				</div>			</div>			<?php if ($this->countModules('position-1')) : ?>			<div class="navigation">				<jdoc:include type="modules" name="position-1" style="none" />			</div>			<?php endif; ?>			<jdoc:include type="modules" name="banner" style="xhtml" />			<div class="row-fluid">				<?php if ($this->countModules('position-8')) : ?>				<!-- Begin Sidebar -->				<div id="sidebar" class="span3">					<div class="sidebar-nav">						<jdoc:include type="modules" name="position-8" style="xhtml" />					</div>				</div>				<!-- End Sidebar -->				<?php endif; ?>				<div id="content" class="<?php echo $span;?>">					<!-- Begin Content -->					<jdoc:include type="modules" name="position-3" style="xhtml" />					<jdoc:include type="message" />					<jdoc:include type="component" />					<jdoc:include type="modules" name="position-2" style="none" />					<!-- End Content -->				</div>				<?php if ($this->countModules('position-7')) : ?>				<div id="aside" class="span3">					<!-- Begin Right Sidebar -->					<jdoc:include type="modules" name="position-7" style="well" />					<!-- End Right Sidebar -->				</div>				<?php endif; ?>			</div>		</div>	</div>	<!-- Footer -->	<div class="footer">		<div class="container<?php echo ($params->get('fluidContainer') ? '-fluid' : '');?>">			<hr />			<jdoc:include type="modules" name="footer" style="none" />			<p class="pull-right"><a href="#top" id="back-top"><?php echo JText::_('TPL_PROTOSTAR_BACKTOTOP'); ?></a></p>			<p>&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>		</div>	</div>	<jdoc:include type="modules" name="debug" style="none" /></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');/** * Menu Item Types Model for Menus. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusModelMenutypes extends JModelLegacy{	/**	 * A reverse lookup of the base link URL to Title	 *	 * @var	array	 */	protected $rlu = array();	/**	 * Method to get the reverse lookup of the base link URL to Title	 *	 * @return  array  Array of reverse lookup of the base link URL to Title	 * @since   1.6	 */	public function getReverseLookup()	{		if (empty($this->rlu))		{			$this->getTypeOptions();		}		return $this->rlu;	}	/**	 * Method to get the available menu item type options.	 *	 * @return  array  Array of groups with menu item types.	 * @since   1.6	 */	public function getTypeOptions()	{		jimport('joomla.filesystem.file');		$lang = JFactory::getLanguage();		$list = array();		// Get the list of components.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('name, element AS ' . $db->quoteName('option'))			->from('#__extensions')			->where('type = ' . $db->quote('component'))			->where('enabled = 1')			->order('name ASC');		$db->setQuery($query);		$components = $db->loadObjectList();		foreach ($components as $component)		{			if ($options = $this->getTypeOptionsByComponent($component->option))			{				$list[$component->name] = $options;				// Create the reverse lookup for link-to-name.				foreach ($options as $option)				{					if (isset($option->request))					{						$this->rlu[MenusHelper::getLinkKey($option->request)] = $option->get('title');						if (isset($option->request['option']))						{								$lang->load($option->request['option'].'.sys', JPATH_ADMINISTRATOR, null, false, false)							||	$lang->load($option->request['option'].'.sys', JPATH_ADMINISTRATOR.'/components/'.$option->request['option'], null, false, false)							||	$lang->load($option->request['option'].'.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)							||	$lang->load($option->request['option'].'.sys', JPATH_ADMINISTRATOR.'/components/'.$option->request['option'], $lang->getDefault(), false, false);						}					}				}			}		}		return $list;	}	protected function getTypeOptionsByComponent($component)	{		$options = array();		$mainXML = JPATH_SITE.'/components/'.$component.'/metadata.xml';		if (is_file($mainXML))		{			$options = $this->getTypeOptionsFromXML($mainXML, $component);		}		if (empty($options))		{			$options = $this->getTypeOptionsFromMVC($component);		}		return $options;	}	protected function getTypeOptionsFromXML($file, $component)	{		$options = array();		// Attempt to load the xml file.		if (!$xml = simplexml_load_file($file))		{			return false;		}		// Look for the first menu node off of the root node.		if (!$menu = $xml->xpath('menu[1]'))		{			return false;		}		else		{			$menu = $menu[0];		}		// If we have no options to parse, just add the base component to the list of options.		if (!empty($menu['options']) && $menu['options'] == 'none')		{			// Create the menu option for the component.			$o = new JObject;			$o->title		= (string) $menu['name'];			$o->description	= (string) $menu['msg'];			$o->request		= array('option' => $component);			$options[] = $o;			return $options;		}		// Look for the first options node off of the menu node.		if (!$optionsNode = $menu->xpath('options[1]'))		{			return false;		}		else		{			$optionsNode = $optionsNode[0];		}		// Make sure the options node has children.		if (!$children = $optionsNode->children())		{			return false;		}		else		{			// Process each child as an option.			foreach ($children as $child)			{				if ($child->getName() == 'option')				{					// Create the menu option for the component.					$o = new JObject;					$o->title		= (string) $child['name'];					$o->description	= (string) $child['msg'];					$o->request		= array('option' => $component, (string) $optionsNode['var'] => (string) $child['value']);					$options[] = $o;				}				elseif ($child->getName() == 'default')				{					// Create the menu option for the component.					$o = new JObject;					$o->title		= (string) $child['name'];					$o->description	= (string) $child['msg'];					$o->request		= array('option' => $component);					$options[] = $o;				}			}		}		return $options;	}	protected function getTypeOptionsFromMVC($component)	{		$options = array();		// Get the views for this component.		$path = JPATH_SITE . '/components/' . $component . '/views';		if (is_dir($path))		{			$views = JFolder::folders($path);		}		else		{			return false;		}		foreach ($views as $view)		{			// Ignore private views.			if (strpos($view, '_') !== 0)			{				// Determine if a metadata file exists for the view.				$file = $path.'/'.$view.'/metadata.xml';				if (is_file($file))				{					// Attempt to load the xml file.					if ($xml = simplexml_load_file($file))					{						// Look for the first view node off of the root node.						if ($menu = $xml->xpath('view[1]'))						{							$menu = $menu[0];							// If the view is hidden from the menu, discard it and move on to the next view.							if (!empty($menu['hidden']) && $menu['hidden'] == 'true')							{								unset($xml);								continue;							}							// Do we have an options node or should we process layouts?							// Look for the first options node off of the menu node.							if ($optionsNode = $menu->xpath('options[1]'))							{								$optionsNode = $optionsNode[0];								// Make sure the options node has children.								if ($children = $optionsNode->children())								{									// Process each child as an option.									foreach ($children as $child)									{										if ($child->getName() == 'option')										{											// Create the menu option for the component.											$o = new JObject;											$o->title		= (string) $child['name'];											$o->description	= (string) $child['msg'];											$o->request		= array('option' => $component, 'view' => $view, (string) $optionsNode['var'] => (string) $child['value']);											$options[] = $o;										}										elseif ($child->getName() == 'default')										{											// Create the menu option for the component.											$o = new JObject;											$o->title		= (string) $child['name'];											$o->description	= (string) $child['msg'];											$o->request		= array('option' => $component, 'view' => $view);											$options[] = $o;										}									}								}							}							else {								$options = array_merge($options, (array) $this->getTypeOptionsFromLayouts($component, $view));							}						}						unset($xml);					}				}				else {					$options = array_merge($options, (array) $this->getTypeOptionsFromLayouts($component, $view));				}			}		}		return $options;	}	protected function getTypeOptionsFromLayouts($component, $view)	{		$options = array();		$layouts = array();		$layoutNames = array();		$templateLayouts = array();		$lang = JFactory::getLanguage();		// Get the layouts from the view folder.		$path = JPATH_SITE . '/components/' . $component . '/views/' . $view . '/tmpl';		if (is_dir($path))		{			$layouts = array_merge($layouts, JFolder::files($path, '.xml$', false, true));		}		else		{			return $options;		}		// build list of standard layout names		foreach ($layouts as $layout)		{			// Ignore private layouts.			if (strpos(basename($layout), '_') === false)			{				$file = $layout;				// Get the layout name.				$layoutNames[] = basename($layout, '.xml');			}		}		// get the template layouts		// TODO: This should only search one template -- the current template for this item (default of specified)		$folders = JFolder::folders(JPATH_SITE . '/templates', '', false, true);		// Array to hold association between template file names and templates		$templateName = array();		foreach ($folders as $folder)		{			if (is_dir($folder . '/html/' . $component . '/' . $view))			{				$template = basename($folder);				$lang->load('tpl_'.$template.'.sys', JPATH_SITE, null, false, false)				||	$lang->load('tpl_'.$template.'.sys', JPATH_SITE.'/templates/'.$template, null, false, false)				||	$lang->load('tpl_'.$template.'.sys', JPATH_SITE, $lang->getDefault(), false, false)				||	$lang->load('tpl_'.$template.'.sys', JPATH_SITE.'/templates/'.$template, $lang->getDefault(), false, false);				$templateLayouts = JFolder::files($folder . '/html/' . $component . '/' . $view, '.xml$', false, true);				foreach ($templateLayouts as $layout)				{					$file = $layout;					// Get the layout name.					$templateLayoutName = basename($layout, '.xml');					// add to the list only if it is not a standard layout					if (array_search($templateLayoutName, $layoutNames) === false)					{						$layouts[] = $layout;						// Set template name array so we can get the right template for the layout						$templateName[$layout] = basename($folder);					}				}			}		}		// Process the found layouts.		foreach ($layouts as $layout)		{			// Ignore private layouts.			if (strpos(basename($layout), '_') === false)			{				$file = $layout;				// Get the layout name.				$layout = basename($layout, '.xml');				// Create the menu option for the layout.				$o = new JObject;				$o->title		= ucfirst($layout);				$o->description	= '';				$o->request		= array('option' => $component, 'view' => $view);				// Only add the layout request argument if not the default layout.				if ($layout != 'default')				{					// If the template is set, add in format template:layout so we save the template name					$o->request['layout'] = (isset($templateName[$file])) ? $templateName[$file] . ':' . $layout : $layout;				}				// Load layout metadata if it exists.				if (is_file($file))				{					// Attempt to load the xml file.					if ($xml = simplexml_load_file($file))					{						// Look for the first view node off of the root node.						if ($menu = $xml->xpath('layout[1]'))						{							$menu = $menu[0];							// If the view is hidden from the menu, discard it and move on to the next view.							if (!empty($menu['hidden']) && $menu['hidden'] == 'true')							{								unset($xml);								unset($o);								continue;							}							// Populate the title and description if they exist.							if (!empty($menu['title']))							{								$o->title = trim((string) $menu['title']);							}							if (!empty($menu->message[0]))							{								$o->description = trim((string) $menu->message[0]);							}						}					}				}				// Add the layout to the options array.				$options[] = $o;			}		}		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app   = JFactory::getApplication();$doc   = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;// Add JavaScript FrameworksJHtml::_('bootstrap.framework');// Add Stylesheets$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load optional rtl Bootstrap css and Bootstrap bugfixesJHtmlBootstrap::loadCss($includeMaincss = false, $this->direction);?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head><jdoc:include type="head" /><!--[if lt IE 9]>	<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script><![endif]--></head><body class="contentpane modal">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');JFormHelper::loadFieldClass('radio');/** * Sample data Form Field class. * * @package  Joomla.Installation * @since    1.6 */class JFormFieldSample extends JFormFieldRadio{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Sample';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6	 */	protected function getOptions()	{		$lang = JFactory::getLanguage();		$options = array();		$type = $this->form->getValue('db_type');		// Some database drivers share DDLs; point these drivers to the correct parent		if ($type == 'mysqli')		{			$type = 'mysql';		}		elseif ($type == 'sqlsrv')		{			$type = 'sqlazure';		}		// Get a list of files in the search path with the given filter.		$files = JFolder::files(JPATH_INSTALLATION . '/sql/' . $type, '^sample.*\.sql$');		// Add option to not install sampledata.		$options[] = JHtml::_('select.option', '', 'INSTL_SITE_INSTALL_SAMPLE_NONE');		// Build the options list from the list of files.		if (is_array($files))		{			foreach ($files as $file)			{				$options[] = JHtml::_('select.option', $file, $lang->hasKey($key = 'INSTL_' . ($file = JFile::stripExt($file)) . '_SET') ? $key : $file);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		if (!$this->value)		{			$conf = JFactory::getConfig();			if ($conf->get('sampledata'))			{				$this->value = $conf->get('sampledata');			}			else			{				$this->value = '';			}		}		return parent::getInput();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules component helper. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */abstract class ModulesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 */	public static function addSubmenu($vName)	{		// Not used in this component.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$actions = JAccess::getActions('com_modules');		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, 'com_modules'));		}		return $result;	}	/**	 * Get a list of filter options for the state of a module.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getStateOptions()	{		// Build the filter options.		$options	= array();		$options[]	= JHtml::_('select.option',	'1',	JText::_('JPUBLISHED'));		$options[]	= JHtml::_('select.option',	'0',	JText::_('JUNPUBLISHED'));		$options[]	= JHtml::_('select.option',	'-2',	JText::_('JTRASHED'));		return $options;	}	/**	 * Get a list of filter options for the application clients.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getClientOptions()	{		// Build the filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '0', JText::_('JSITE'));		$options[]	= JHtml::_('select.option', '1', JText::_('JADMINISTRATOR'));		return $options;	}	/**	 * Get a list of modules positions	 *	 * @param   integer  $clientId  Client ID	 *	 * @return  array  A list of positions	 */	public static function getPositions($clientId, $editPositions = false)	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('DISTINCT(position)')			->from('#__modules')			->where($db->quoteName('client_id') . ' = ' . (int) $clientId)			->order('position');		$db->setQuery($query);		try		{			$positions = $db->loadColumn();			$positions = is_array($positions) ? $positions : array();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return;		}		// Build the list		$options = array();		foreach ($positions as $position)		{			if (!$position && !$editPositions)			{				$options[]	= JHtml::_('select.option', 'none', ':: ' . JText::_('JNONE') . ' ::');			}			else			{				$options[]	= JHtml::_('select.option', $position, $position);			}		}		return $options;	}	/**	 * Return a list of templates	 *	 * @param   integer  $clientId  Client ID	 * @param   string   $state     State	 * @param   string   $template  Template name	 *	 * @return  array  List of templates	 */	public static function getTemplates($clientId = 0, $state = '', $template = '')	{		$db = JFactory::getDbo();		// Get the database object and a new query object.		$query	= $db->getQuery(true);		// Build the query.		$query->select('element, name, enabled')			->from('#__extensions')			->where('client_id = ' . (int) $clientId)			->where('type = ' . $db->quote('template'));		if ($state != '')		{			$query->where('enabled = ' . $db->quote($state));		}		if ($template != '')		{			$query->where('element = ' . $db->quote($template));		}		// Set the query and load the templates.		$db->setQuery($query);		$templates = $db->loadObjectList('element');		return $templates;	}	/**	 * Get a list of the unique modules installed in the client application.	 *	 * @param   int  $clientId  The client id.	 *	 * @return  array  Array of unique modules	 */	public static function getModules($clientId)	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('element AS value, name AS text')			->from('#__extensions as e')			->where('e.client_id = ' . (int) $clientId)			->where('type = ' . $db->quote('module'))			->join('LEFT', '#__modules as m ON m.module=e.element AND m.client_id=e.client_id')			->where('m.module IS NOT NULL')			->group('element,name');		$db->setQuery($query);		$modules = $db->loadObjectList();		$lang = JFactory::getLanguage();		foreach ($modules as $i => $module)		{			$extension = $module->value;			$path = $clientId ? JPATH_ADMINISTRATOR : JPATH_SITE;			$source = $path . "/modules/$extension";				$lang->load("$extension.sys", $path, null, false, false)			||	$lang->load("$extension.sys", $source, null, false, false)			||	$lang->load("$extension.sys", $path, $lang->getDefault(), false, false)			||	$lang->load("$extension.sys", $source, $lang->getDefault(), false, false);			$modules[$i]->text = JText::_($module->text);		}		JArrayHelper::sortObjects($modules, 'text', 1, true, $lang->getLocale());		return $modules;	}	/**	 * Get a list of the assignment options for modules to menus.	 *	 * @param   int  $clientId  The client id.	 *	 * @return  array	 */	public static function getAssignmentOptions($clientId)	{		$options = array();		$options[] = JHtml::_('select.option', '0', 'COM_MODULES_OPTION_MENU_ALL');		$options[] = JHtml::_('select.option', '-', 'COM_MODULES_OPTION_MENU_NONE');		if ($clientId == 0)		{			$options[] = JHtml::_('select.option', '1', 'COM_MODULES_OPTION_MENU_INCLUDE');			$options[] = JHtml::_('select.option', '-1', 'COM_MODULES_OPTION_MENU_EXCLUDE');		}		return $options;	}	/**	 * Return a translated module position name	 *	 * @param   string  $template  Template name	 * @param   string  $position  Position name	 *	 * @return  string  Return a translated position name	 *	 * @since   3.0	 */	public static function getTranslatedModulePosition($clientId, $template, $position)	{		// Template translation		$lang = JFactory::getLanguage();		$path = $clientId ? JPATH_ADMINISTRATOR : JPATH_SITE;		$lang->load('tpl_'.$template.'.sys', $path, null, false, false)		||	$lang->load('tpl_'.$template.'.sys', $path.'/templates/'.$template, null, false, false)		||	$lang->load('tpl_'.$template.'.sys', $path, $lang->getDefault(), false, false)		||	$lang->load('tpl_'.$template.'.sys', $path.'/templates/'.$template, $lang->getDefault(), false, false);		$langKey = strtoupper('TPL_' . $template . '_POSITION_' . $position);		$text = JText::_($langKey);		// Avoid untranslated strings		if (!self::isTranslatedText($langKey, $text))		{			// Modules component translation			$langKey = strtoupper('COM_MODULES_POSITION_' . $position);			$text = JText::_($langKey);			// Avoid untranslated strings			if (!self::isTranslatedText($langKey, $text))			{				// Try to humanize the position name				$text = ucfirst(preg_replace('/^' . $template . '\-/', '', $position));				$text = ucwords(str_replace(array('-', '_'), ' ', $text));			}		}		return $text;	}	/**	 * Check if the string was translated	 *	 * @param   string  $langKey  Language file text key	 * @param   string  $text     The "translated" text to be checked	 *	 * @return  boolean  Return true for translated text	 *	 * @since   3.0	 */	public static function isTranslatedText($langKey, $text)	{		return $text !== $langKey;	}	/**	 * Create and return a new Option	 *	 * @param   string  $value  The option value [optional]	 * @param   string  $text   The option text [optional]	 *	 * @return  object  The option as an object (stdClass instance)	 *	 * @since   3.0	 */	public static function createOption($value = '', $text = '')	{		if (empty($text))		{			$text = $value;		}		$option = new stdClass;		$option->value = $value;		$option->text  = $text;		return $option;	}	/**	 * Create and return a new Option Group	 *	 * @param   string  $label    Value and label for group [optional]	 * @param   array   $options  Array of options to insert into group [optional]	 *	 * @return  array  Return the new group as an array	 *	 * @since   3.0	 */	public static function createOptionGroup($label = '', $options = array())	{		$group = array();		$group['value'] = $label;		$group['text']  = $label;		$group['items'] = $options;		return $group;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-vertical">	<legend><?php echo JText::_('COM_CONFIG_PERMISSION_SETTINGS'); ?></legend>	<?php foreach ($this->form->getFieldset('permissions') as $field) : ?>		<div class="control-group">			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Languages View class for the Languages component * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesViewLanguages extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		LanguagesHelper::addSubmenu('languages');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_LANGUAGES_TITLE'), 'langmanager.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('language.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('language.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit.state'))		{			if ($this->state->get('filter.published') != 2)			{				JToolbarHelper::publishList('languages.publish');				JToolbarHelper::unpublishList('languages.unpublish');			}		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'languages.delete', 'JTOOLBAR_EMPTY_TRASH');			JToolbarHelper::divider();		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('languages.trash');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			// Add install languages link to the lang installer component			$bar = JToolbar::getInstance('toolbar');			$bar->appendButton('Link', 'upload', 'COM_LANGUAGES_INSTALL', 'index.php?option=com_installer&view=languages');			JToolbarHelper::divider();			JToolbarHelper::preferences('com_languages');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_CONTENT');		JHtmlSidebar::setAction('index.php?option=com_languages&view=languages');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksControllerWeblink extends JControllerForm{	/**	 * @since   1.6	 */	protected $view_item = 'form';	/**	 * @since   1.6	 */	protected $view_list = 'categories';	/**	 * Method to add a new record.	 *	 * @return  boolean  True if the article can be added, false if not.	 * @since   1.6	 */	public function add()	{		if (!parent::add())		{			// Redirect to the return page.			$this->setRedirect($this->getReturnPage());		}	}	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data	An array of input data.	 * @return  boolean	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user		= JFactory::getUser();		$categoryId	= JArrayHelper::getValue($data, 'catid', $this->input->getInt('id'), 'int');		$allow		= null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow	= $user->authorise('core.create', $this->option.'.category.'.$categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data	An array of input data.	 * @param   string	$key	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId	= (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return JFactory::getUser()->authorise('core.edit', $this->option.'.category.'.$categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to cancel an edit.	 *	 * @param   string	$key	The name of the primary key of the URL variable.	 *	 * @return  Boolean	True if access level checks pass, false otherwise.	 * @since   1.6	 */	public function cancel($key = 'w_id')	{		parent::cancel($key);		// Redirect to the return page.		$this->setRedirect($this->getReturnPage());	}	/**	 * Method to edit an existing record.	 *	 * @param   string	$key	The name of the primary key of the URL variable.	 * @param   string	$urlVar	The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  Boolean	True if access level check and checkout passes, false otherwise.	 * @since   1.6	 */	public function edit($key = null, $urlVar = 'w_id')	{		$result = parent::edit($key, $urlVar);		return $result;	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string	$name	The model name. Optional.	 * @param   string	$prefix	The class prefix. Optional.	 * @param   array  $config	Configuration array for model. Optional.	 *	 * @return  object  The model.	 * @since   1.5	 */	public function getModel($name = 'form', $prefix = '', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId	The primary key id for the item.	 * @param   string	$urlVar		The name of the URL variable for the id.	 *	 * @return  string	The arguments to append to the redirect URL.	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = null)	{		$append = parent::getRedirectToItemAppend($recordId, $urlVar);		$itemId	= $this->input->getInt('Itemid');		$return	= $this->getReturnPage();		if ($itemId)		{			$append .= '&Itemid='.$itemId;		}		if ($return)		{			$append .= '&return='.base64_encode($return);		}		return $append;	}	/**	 * Get the return URL.	 *	 * If a "return" variable has been passed in the request	 *	 * @return  string	The return URL.	 * @since   1.6	 */	protected function getReturnPage()	{		$return = $this->input->get('return', null, 'base64');		if (empty($return) || !JUri::isInternal(base64_decode($return)))		{			return JURI::base();		}		else		{			return base64_decode($return);		}	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 * @since   1.6	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{			$task = $this->getTask();	}	/**	 * Method to save a record.	 *	 * @param   string	$key	The name of the primary key of the URL variable.	 * @param   string	$urlVar	The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  Boolean	True if successful, false otherwise.	 * @since   1.6	 */	public function save($key = null, $urlVar = 'w_id')	{		$result = parent::save($key, $urlVar);		// If ok, redirect to the return page.		if ($result)		{			$this->setRedirect($this->getReturnPage());		}		$model = $this->getModel();		return $result;	}	/**	 * Go to a weblink	 *	 * @return  void	 * @since   1.6	 */	public function go()	{		// Get the ID from the request		$id = $this->input->getInt('id');		// Get the model, requiring published items		$modelLink	= $this->getModel('Weblink', '', array('ignore_request' => true));		$modelLink->setState('filter.published', 1);		// Get the item		$link	= $modelLink->getItem($id);		// Make sure the item was found.		if (empty($link))		{			return JError::raiseWarning(404, JText::_('COM_WEBLINKS_ERROR_WEBLINK_NOT_FOUND'));		}		// Check whether item access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($link->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Check whether category access level allows access.		$modelCat = $this->getModel('Category', 'WeblinksModel', array('ignore_request' => true));		$modelCat->setState('filter.published', 1);		// Get the category		$category = $modelCat->getCategory($link->catid);		// Make sure the category was found.		if (empty($category))		{			return JError::raiseWarning(404, JText::_('COM_WEBLINKS_ERROR_WEBLINK_NOT_FOUND'));		}		// Check whether item access level allows access.		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Redirect to the URL		// TODO: Probably should check for a valid http link		if ($link->url)		{			$modelLink->hit($id);			JFactory::getApplication()->redirect($link->url);		}		else		{			return JError::raiseWarning(404, JText::_('COM_WEBLINKS_ERROR_WEBLINK_URL_INVALID'));		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');jimport('joomla.filesystem.path');/** * Installer helper class * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */abstract class JInstallerHelper{	/**	 * Downloads a package	 *	 * @param   string  $url     URL of file to download	 * @param   string  $target  Download target filename [optional]	 *	 * @return  mixed  Path to downloaded package or boolean false on failure	 *	 * @since   3.1	 */	public static function downloadPackage($url, $target = false)	{		$config = JFactory::getConfig();		// Capture PHP errors		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		// Set user agent		$version = new JVersion;		ini_set('user_agent', $version->getUserAgent('Installer'));		$http = JHttpFactory::getHttp();		$response = $http->get($url);		if (302 == $response->code && isset($response->headers['Location']))		{			return self::downloadPackage($response->headers['Location']);		}		elseif (200 != $response->code)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_DOWNLOAD_SERVER_CONNECT'), JLog::WARNING, 'jerror');			return false;		}		if (isset($response->headers['Content-Disposition']))		{			$contentfilename = explode("\"", $response->headers['Content-Disposition']);			$target = $contentfilename[1];		}		// Set the target path if not given		if (!$target)		{			$target = $config->get('tmp_path') . '/' . self::getFilenameFromURL($url);		}		else		{			$target = $config->get('tmp_path') . '/' . basename($target);		}		// Write buffer to file		JFile::write($target, $response->body);		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Bump the max execution time because not using built in php zip libs are slow		@set_time_limit(ini_get('max_execution_time'));		// Return the name of the downloaded package		return basename($target);	}	/**	 * Unpacks a file and verifies it as a Joomla element package	 * Supports .gz .tar .tar.gz and .zip	 *	 * @param   string  $p_filename  The uploaded package filename or install directory	 *	 * @return  mixed  Array on success or boolean false on failure	 *	 * @since   3.1	 */	public static function unpack($p_filename)	{		// Path to the archive		$archivename = $p_filename;		// Temporary folder to extract the archive into		$tmpdir = uniqid('install_');		// Clean the paths to use for archive extraction		$extractdir = JPath::clean(dirname($p_filename) . '/' . $tmpdir);		$archivename = JPath::clean($archivename);		// Do the unpacking of the archive		try		{			JArchive::extract($archivename, $extractdir);		}		catch (Exception $e)		{			return false;		}		/*		 * Let's set the extraction directory and package file in the result array so we can		 * cleanup everything properly later on.		 */		$retval['extractdir'] = $extractdir;		$retval['packagefile'] = $archivename;		/*		 * Try to find the correct install directory.  In case the package is inside a		 * subdirectory detect this and set the install directory to the correct path.		 *		 * List all the items in the installation directory.  If there is only one, and		 * it is a folder, then we will set that folder to be the installation folder.		 */		$dirList = array_merge(JFolder::files($extractdir, ''), JFolder::folders($extractdir, ''));		if (count($dirList) == 1)		{			if (JFolder::exists($extractdir . '/' . $dirList[0]))			{				$extractdir = JPath::clean($extractdir . '/' . $dirList[0]);			}		}		/*		 * We have found the install directory so lets set it and then move on		 * to detecting the extension type.		 */		$retval['dir'] = $extractdir;		/*		 * Get the extension type and return the directory/type array on success or		 * false on fail.		 */		$retval['type'] = self::detectType($extractdir);		if ($retval['type'])		{			return $retval;		}		else		{			return false;		}	}	/**	 * Method to detect the extension type from a package directory	 *	 * @param   string  $p_dir  Path to package directory	 *	 * @return  mixed  Extension type string or boolean false on fail	 *	 * @since   3.1	 */	public static function detectType($p_dir)	{		// Search the install dir for an XML file		$files = JFolder::files($p_dir, '\.xml$', 1, true);		if (!count($files))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_NOTFINDXMLSETUPFILE'), JLog::WARNING, 'jerror');			return false;		}		foreach ($files as $file)		{			$xml = simplexml_load_file($file);			if (!$xml)			{				continue;			}			if ($xml->getName() != 'extension')			{				unset($xml);				continue;			}			$type = (string) $xml->attributes()->type;			// Free up memory			unset($xml);			return $type;		}		JLog::add(JText::_('JLIB_INSTALLER_ERROR_NOTFINDJOOMLAXMLSETUPFILE'), JLog::WARNING, 'jerror');		// Free up memory.		unset($xml);		return false;	}	/**	 * Gets a file name out of a url	 *	 * @param   string  $url  URL to get name from	 *	 * @return  mixed   String filename or boolean false if failed	 *	 * @since   3.1	 */	public static function getFilenameFromURL($url)	{		if (is_string($url))		{			$parts = explode('/', $url);			return $parts[count($parts) - 1];		}		return false;	}	/**	 * Clean up temporary uploaded package and unpacked extension	 *	 * @param   string  $package    Path to the uploaded package file	 * @param   string  $resultdir  Path to the unpacked extension	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public static function cleanupInstall($package, $resultdir)	{		$config = JFactory::getConfig();		// Does the unpacked extension directory exist?		if (is_dir($resultdir))		{			JFolder::delete($resultdir);		}		// Is the package file a valid file?		if (is_file($package))		{			JFile::delete($package);		}		elseif (is_file(JPath::clean($config->get('tmp_path') . '/' . $package)))		{			// It might also be just a base filename			JFile::delete(JPath::clean($config->get('tmp_path') . '/' . $package));		}	}	/**	 * Splits contents of a sql file into array of discreet queries.	 * Queries need to be delimited with end of statement marker ';'	 *	 * @param   string  $query  The SQL statement.	 *	 * @return  array  Array of queries	 *	 * @since   3.1	 * @deprecated  13.3  Use JDatabaseDriver::splitSql() directly	 * @codeCoverageIgnore	 */	public static function splitSql($query)	{		JLog::add('JInstallerHelper::splitSql() is deprecated. Use JDatabaseDriver::splitSql() instead.', JLog::WARNING, 'deprecated');		$db = JFactory::getDbo();		return $db->splitSql($query);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_no($module, &$params, &$attribs){	if ($module->content)	{		echo $module->content;	}}function modChrome_well($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"well " . htmlspecialchars($params->get('moduleclass_sfx')) . "\">";		if ($module->showtitle)		{			echo "<h3 class=\"page-header\">" . $module->title . "</h3>";		}		echo $module->content;		echo "</div>";	}}?>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Category Tree * * @package     Joomla.Site * @subpackage  com_content * @since       1.6 */class ContentCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__content';		$options['extension'] = 'com_content';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  OAuth * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();jimport('joomla.environment.response');/** * Joomla Platform class for interacting with an OAuth 1.0 and 1.0a server. * * @package     Joomla.Platform * @subpackage  OAuth * * @since       13.1 */abstract class JOAuth1Client{	/**	 * @var    JRegistry  Options for the JOAuth1Client object.	 * @since  13.1	 */	protected $options;	/**	 * @var array  Contains access token key, secret and verifier.	 * @since 13.1	 */	protected $token = array();	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var    JInput The input object to use in retrieving GET/POST data.	 * @since  13.1	 */	protected $input;	/**	 * @var   JApplicationWeb  The application object to send HTTP headers for redirects.	 * @since 13.1	 */	protected $application;	/**	 * @var   string  Selects which version of OAuth to use: 1.0 or 1.0a.	 * @since 13.1	 */	protected $version;	/**	 * Constructor.	 *	 * @param   JRegistry        $options      OAuth1Client options object.	 * @param   JHttp            $client       The HTTP client object.	 * @param   JInput           $input        The input object	 * @param   JApplicationWeb  $application  The application object	 * @param   string           $version      Specify the OAuth version. By default we are using 1.0a.	 *	 * @since 13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JInput $input = null, JApplicationWeb $application = null,		$version = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : JHttpFactory::getHttp($this->options);		$this->input = isset($input) ? $input : JFactory::getApplication()->input;		$this->application = isset($application) ? $application : new JApplicationWeb;		$this->version = isset($version) ? $version : '1.0a';	}	/**	 * Method to for the oauth flow.	 *	 * @return void	 *	 * @since  13.1	 *	 * @throws DomainException	 */	public function authenticate()	{		// Already got some credentials stored?		if ($this->token)		{			$response = $this->verifyCredentials();			if ($response)			{				return $this->token;			}			else			{				$this->token = null;			}		}		// Check for callback.		if (strcmp($this->version, '1.0a') === 0)		{			$verifier = $this->input->get('oauth_verifier');		}		else		{			$verifier = $this->input->get('oauth_token');		}		if (empty($verifier))		{			// Generate a request token.			$this->_generateRequestToken();			// Authenticate the user and authorise the app.			$this->_authorise();		}		// Callback		else		{			$session = JFactory::getSession();			// Get token form session.			$this->token = array('key' => $session->get('key', null, 'oauth_token'), 'secret' => $session->get('secret', null, 'oauth_token'));			// Verify the returned request token.			if (strcmp($this->token['key'], $this->input->get('oauth_token')) !== 0)			{				throw new DomainException('Bad session!');			}			// Set token verifier for 1.0a.			if (strcmp($this->version, '1.0a') === 0)			{				$this->token['verifier'] = $this->input->get('oauth_verifier');			}			// Generate access token.			$this->_generateAccessToken();			// Return the access token.			return $this->token;		}	}	/**	 * Method used to get a request token.	 *	 * @return void	 *	 * @since  13.1	 * @throws  DomainException	 */	private function _generateRequestToken()	{		// Set the callback URL.		if ($this->getOption('callback'))		{			$parameters = array(				'oauth_callback' => $this->getOption('callback')			);		}		else		{			$parameters = array();		}		// Make an OAuth request for the Request Token.		$response = $this->oauthRequest($this->getOption('requestTokenURL'), 'POST', $parameters);		parse_str($response->body, $params);		if (strcmp($this->version, '1.0a') === 0 && strcmp($params['oauth_callback_confirmed'], 'true') !== 0)		{			throw new DomainException('Bad request token!');		}		// Save the request token.		$this->token = array('key' => $params['oauth_token'], 'secret' => $params['oauth_token_secret']);		// Save the request token in session		$session = JFactory::getSession();		$session->set('key', $this->token['key'], 'oauth_token');		$session->set('secret', $this->token['secret'], 'oauth_token');	}	/**	 * Method used to authorise the application.	 *	 * @return void	 *	 * @since  13.1	 */	private function _authorise()	{		$url = $this->getOption('authoriseURL') . '?oauth_token=' . $this->token['key'];		if ($this->getOption('scope'))		{			$scope = is_array($this->getOption('scope')) ? implode(' ', $this->getOption('scope')) : $this->getOption('scope');			$url .= '&scope=' . urlencode($scope);		}		if ($this->getOption('sendheaders'))		{			$this->application->redirect($url);		}	}	/**	 * Method used to get an access token.	 *	 * @return void	 *	 * @since  13.1	 */	private function _generateAccessToken()	{		// Set the parameters.		$parameters = array(			'oauth_token' => $this->token['key']		);		if (strcmp($this->version, '1.0a') === 0)		{			$parameters = array_merge($parameters, array('oauth_verifier' => $this->token['verifier']));		}		// Make an OAuth request for the Access Token.		$response = $this->oauthRequest($this->getOption('accessTokenURL'), 'POST', $parameters);		parse_str($response->body, $params);		// Save the access token.		$this->token = array('key' => $params['oauth_token'], 'secret' => $params['oauth_token_secret']);	}	/**	 * Method used to make an OAuth request.	 *	 * @param   string  $url         The request URL.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 * @param   mixed   $data        The POST request data.	 * @param   array   $headers     An array of name-value pairs to include in the header of the request	 *	 * @return  object  The JHttpResponse object.	 *	 * @since 13.1	 * @throws  DomainException	 */	public function oauthRequest($url, $method, $parameters, $data = array(), $headers = array())	{		// Set the parameters.		$defaults = array(			'oauth_consumer_key' => $this->getOption('consumer_key'),			'oauth_signature_method' => 'HMAC-SHA1',			'oauth_version' => '1.0',			'oauth_nonce' => $this->generateNonce(),			'oauth_timestamp' => time()		);		$parameters = array_merge($parameters, $defaults);		// Do not encode multipart parameters. Do not include $data in the signature if $data is not array.		if (isset($headers['Content-Type']) && strpos($headers['Content-Type'], 'multipart/form-data') !== false || !is_array($data))		{			$oauth_headers = $parameters;		}		else		{			// Use all parameters for the signature.			$oauth_headers = array_merge($parameters, $data);		}		// Sign the request.		$oauth_headers = $this->_signRequest($url, $method, $oauth_headers);		// Get parameters for the Authorisation header.		if (is_array($data))		{			$oauth_headers = array_diff_key($oauth_headers, $data);		}		// Send the request.		switch ($method)		{			case 'GET':				$url = $this->toUrl($url, $data);				$response = $this->client->get($url, array('Authorization' => $this->_createHeader($oauth_headers)));				break;			case 'POST':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->post($url, $data, $headers);				break;			case 'PUT':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->put($url, $data, $headers);				break;			case 'DELETE':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->delete($url, $headers);				break;		}		// Validate the response code.		$this->validateResponse($url, $response);		return $response;	}	/**	 * Method to validate a response.	 *	 * @param   string         $url       The request URL.	 * @param   JHttpResponse  $response  The response to validate.	 *	 * @return  void	 *	 * @since  13.1	 * @throws DomainException	 */	abstract public function validateResponse($url, $response);	/**	 * Method used to create the header for the POST request.	 *	 * @param   array  $parameters  Array containing request parameters.	 *	 * @return  string  The header.	 *	 * @since 13.1	 */	private function _createHeader($parameters)	{		$header = 'OAuth ';		foreach ($parameters as $key => $value)		{			if (!strcmp($header, 'OAuth '))			{				$header .= $key . '="' . $this->safeEncode($value) . '"';			}			else			{				$header .= ', ' . $key . '="' . $value . '"';			}		}		return $header;	}	/**	 * Method to create the URL formed string with the parameters.	 *	 * @param   string  $url         The request URL.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return  string  The formed URL.	 *	 * @since  13.1	 */	public function toUrl($url, $parameters)	{		foreach ($parameters as $key => $value)		{			if (is_array($value))			{				foreach ($value as $k => $v)				{					if (strpos($url, '?') === false)					{						$url .= '?' . $key . '=' . $v;					}					else					{						$url .= '&' . $key . '=' . $v;					}				}			}			else			{				if (strpos($value, ' ') !== false)				{					$value = $this->safeEncode($value);				}				if (strpos($url, '?') === false)				{					$url .= '?' . $key . '=' . $value;				}				else				{					$url .= '&' . $key . '=' . $value;				}			}		}		return $url;	}	/**	 * Method used to sign requests.	 *	 * @param   string  $url         The URL to sign.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return  void	 *	 * @since   13.1	 */	private function _signRequest($url, $method, $parameters)	{		// Create the signature base string.		$base = $this->_baseString($url, $method, $parameters);		$parameters['oauth_signature'] = $this->safeEncode(			base64_encode(				hash_hmac('sha1', $base, $this->_prepareSigningKey(), true)				)			);		return $parameters;	}	/**	 * Prepare the signature base string.	 *	 * @param   string  $url         The URL to sign.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return string  The base string.	 *	 * @since 13.1	 */	private function _baseString($url, $method, $parameters)	{		// Sort the parameters alphabetically		uksort($parameters, 'strcmp');		// Encode parameters.		foreach ($parameters as $key => $value)		{			$key = $this->safeEncode($key);			if (is_array($value))			{				foreach ($value as $k => $v)				{					$v = $this->safeEncode($v);					$kv[] = "{$key}={$v}";				}			}			else			{				$value = $this->safeEncode($value);				$kv[] = "{$key}={$value}";			}		}		// Form the parameter string.		$params = implode('&', $kv);		// Signature base string elements.		$base = array(			$method,			$url,			$params			);		// Return the base string.		return implode('&', $this->safeEncode($base));	}	/**	 * Encodes the string or array passed in a way compatible with OAuth.	 * If an array is passed each array value will will be encoded.	 *	 * @param   mixed  $data  The scalar or array to encode.	 *	 * @return  string  $data encoded in a way compatible with OAuth.	 *	 * @since 13.1	 */	public function safeEncode($data)	{		if (is_array($data))		{			return array_map(array($this, 'safeEncode'), $data);		}		elseif (is_scalar($data))		{			return str_ireplace(				array('+', '%7E'),				array(' ', '~'),				rawurlencode($data)				);		}		else		{			return '';		}	}	/**	 * Method used to generate the current nonce.	 *	 * @return  string  The current nonce.	 *	 * @since 13.1	 */	public static function generateNonce()	{		$mt = microtime();		$rand = mt_rand();		// The md5s look nicer than numbers.		return md5($mt . $rand);	}	/**	 * Prepares the OAuth signing key.	 *	 * @return string  The prepared signing key.	 *	 * @since 13.1	 */	private function _prepareSigningKey()	{		return $this->safeEncode($this->getOption('consumer_secret')) . '&' . $this->safeEncode(($this->token) ? $this->token['secret'] : '');	}	/**	 * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;	 * returns a 401 status code and an error message if not.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	abstract public function verifyCredentials();	/**	 * Get an option from the JOauth1aClient instance.	 *	 * @param   string  $key  The name of the option to get	 *	 * @return  mixed  The option value	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JOauth1aClient instance.	 *	 * @param   string  $key    The name of the option to set	 * @param   mixed   $value  The option value to set	 *	 * @return  JOAuth1Client  This object for method chaining	 *	 * @since   13.1	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}	/**	 * Get the oauth token key or secret.	 *	 * @return  array  The oauth token key and secret.	 *	 * @since   13.1	 */	public function getToken()	{		return $this->token;	}	/**	 * Set the oauth token.	 *	 * @param   array  $token  The access token key and secret.	 *	 * @return  JOAuth1Client  This object for method chaining.	 *	 * @since   13.1	 */	public function setToken($token)	{		$this->token = $token;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_banners.category');$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$params		= (isset($this->state->params)) ? $this->state->params : new JObject;$saveOrder	= $listOrder == 'ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_banners&task=banners.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_banners&view=banners'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn hasTooltip" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button type="button" class="btn hasTooltip" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_NAME', 'a.name', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_STICKY', 'a.sticky', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLIENT', 'client_name', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_IMPRESSIONS', 'impmade', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLICKS', 'clicks', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="13">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering  = ($listOrder == 'ordering');				$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_banners&task=edit&type=other&cid[]='. $item->catid);				$canCreate  = $user->authorise('core.create',     'com_banners.category.' . $item->catid);				$canEdit    = $user->authorise('core.edit',       'com_banners.category.' . $item->catid);				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_banners.category.' . $item->catid) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>						<input type="text" style="display:none" name="order[]" size="5"							value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />					<?php else : ?>						<span class="sortable-handler inactive" >							<i class="icon-menu"></i>						</span>					<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->state, $i, 'banners.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'banners.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_banners&task=banner.edit&id='.(int) $item->id); ?>">									<?php echo $this->escape($item->name); ?></a>							<?php else : ?>								<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<div class="small">								<?php echo $this->escape($item->category_title); ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'banner.');								JHtml::_('dropdown.divider');								if ($item->state) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'banners.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'banners.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'banners.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'banners.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'banners.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'banners.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'banners.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');								?>						</div>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('banner.pinned', $item->sticky, $i, $canChange); ?>					</td>					<td class="small hidden-phone">						<?php echo $item->client_name;?>					</td>					<td class="small hidden-phone">						<?php echo JText::sprintf('COM_BANNERS_IMPRESSIONS', $item->impmade, $item->imptotal ? $item->imptotal : JText::_('COM_BANNERS_UNLIMITED'));?>					</td>					<td class="center small hidden-phone">						<?php echo $item->clicks;?> -						<?php echo sprintf('%.2f%%', $item->impmade ? 100 * $item->clicks / $item->impmade : 0);?>					</td>					<td class="small nowrap hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_contact.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_contact&task=contacts.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_contact'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>					</th>					<th class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<?php if ($assoc) : ?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tbody>			<?php			$n = count($this->items);			foreach ($this->items as $i => $item) :				$ordering	= $listOrder == 'a.ordering';				$canCreate	= $user->authorise('core.create',     'com_contact.category.'.$item->catid);				$canEdit	= $user->authorise('core.edit',       'com_contact.category.'.$item->catid);				$canCheckin	= $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canEditOwn	= $user->authorise('core.edit.own',   'com_contact.category.'.$item->catid) && $item->created_by == $userId;				$canChange	= $user->authorise('core.edit.state', 'com_contact.category.'.$item->catid) && $canCheckin;				$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_contact&task=edit&type=other&id='.$item->catid);				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip<?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5"							value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'contacts.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'contacts.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit || $canEditOwn) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_contact&task=contact.edit&id='.(int) $item->id); ?>">								<?php echo $this->escape($item->name); ?></a>							<?php else : ?>								<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<span class="small">								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							</span>							<div class="small">								<?php echo $item->category_title; ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'contact.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'contacts.');								endif;								if ($item->featured) :									JHtml::_('dropdown.unfeatured', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.featured', 'cb' . $i, 'contacts.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'contacts.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'contacts.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'contacts.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');							?>						</div>					</td>					<td align="small hidden-phone">						<?php if (!empty($item->linked_user)) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.$item->user_id);?>"><?php echo $item->linked_user;?></a>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('contact.featured', $item->featured, $i, $canChange); ?>					</td>					<td align="small hidden-phone">						<?php echo $item->access_level; ?>					</td>					<?php if ($assoc) : ?>					<td class="hidden-phone">						<?php if ($item->association) : ?>							<?php echo JHtml::_('contact.association', $item->id); ?>						<?php endif; ?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td align="center hidden-phone">						<?php echo $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Base class for rendering a display layout * loaded from from a layout file * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.0 */class JLayoutFile extends JLayoutBase{	/**	 * @var    string  Dot separated path to the layout file, relative to base path	 * @since  3.0	 */	protected $layoutId = '';	/**	 * @var    string  Base path to use when loading layout files	 * @since  3.0	 */	protected $basePath = null;	/**	 * @var    string  Full path to actual layout files, after possible template override check	 * @since  3.0.3	 */	protected $fullPath = null;	/**	 * Method to instantiate the file-based layout.	 *	 * @param   string  $layoutId  Dot separated path to the layout file, relative to base path	 * @param   string  $basePath  Base path to use when loading layout files	 *	 * @since   3.0	 */	public function __construct($layoutId, $basePath = null)	{		$this->layoutId = $layoutId;		$this->basePath = is_null($basePath) ? JPATH_ROOT . '/layouts' : rtrim($basePath, DIRECTORY_SEPARATOR);	}	/**	 * Method to render the layout.	 *	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 *	 * @return  string  The necessary HTML to display the layout	 *	 * @since   3.0	 */	public function render($displayData)	{		$layoutOutput = '';		// Check possible overrides, and build the full path to layout file		$path = $this->getPath();		// If there exists such a layout file, include it and collect its output		if (!empty($path))		{			ob_start();			include $path;			$layoutOutput = ob_get_contents();			ob_end_clean();		}		return $layoutOutput;	}	/**	 * Method to finds the full real file path, checking possible overrides	 *	 * @return  string  The full path to the layout file	 *	 * @since   3.0	 */	protected function getPath()	{		if (is_null($this->fullPath) && !empty($this->layoutId))		{			$rawPath = str_replace('.', '/', $this->layoutId) . '.php';			$fileName = basename($rawPath);			$filePath = dirname($rawPath);			$possiblePaths = array(				JPATH_THEMES . '/' . JFactory::getApplication()->getTemplate() . '/html/layouts/' . $filePath,				$this->basePath . '/' . $filePath			);			$this->fullPath = JPath::find($possiblePaths, $fileName);		}		return $this->fullPath;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Editors.codemirror * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * CodeMirror Editor Plugin. * * @package     Joomla.Plugin * @subpackage  Editors.codemirror * @since       1.6 */class PlgEditorCodemirror extends JPlugin{	/**	 * Base path for editor files	 */	protected $_basePath = 'media/editors/codemirror/';	/**	 * Initialises the Editor.	 *	 * @return  string	JavaScript Initialization string.	 */	public function onInit()	{		JHtml::_('behavior.framework');		$uncompressed	= JFactory::getApplication()->getCfg('debug') ? '-uncompressed' : '';		JHtml::_('script', $this->_basePath . 'js/codemirror'.$uncompressed.'.js', false, false, false, false);		JHtml::_('stylesheet', $this->_basePath . 'css/codemirror.css');		return '';	}	/**	 * Copy editor content to form field.	 *	 * @param   string	$id	The id of the editor field.	 *	 * @return  string Javascript	 */	public function onSave($id)	{		return "document.getElementById('$id').value = Joomla.editors.instances['$id'].getCode();\n";	}	/**	 * Get the editor content.	 *	 * @param   string	$id	The id of the editor field.	 *	 * @return  string Javascript	 */	public function onGetContent($id)	{		return "Joomla.editors.instances['$id'].getCode();\n";	}	/**	 * Set the editor content.	 *	 * @param   string	$id			The id of the editor field.	 * @param   string	$content	The content to set.	 *	 * @return  string Javascript	 */	public function onSetContent($id, $content)	{		return "Joomla.editors.instances['$id'].setCode($content);\n";	}	/**	 * Adds the editor specific insert method.	 *	 * @return  boolean	 */	public function onGetInsertMethod()	{		static $done = false;		// Do this only once.		if (!$done)		{			$done = true;			$doc = JFactory::getDocument();			$js = "\tfunction jInsertEditorText(text, editor)				{					Joomla.editors.instances[editor].replaceSelection(text);\n			}";			$doc->addScriptDeclaration($js);		}		return true;	}	/**	 * Display the editor area.	 *	 * @param   string	$name		The control name.	 * @param   string	$html		The contents of the text area.	 * @param   string	$width		The width of the text area (px or %).	 * @param   string	$height		The height of the text area (px or %).	 * @param   integer  $col		The number of columns for the textarea.	 * @param   integer  $row		The number of rows for the textarea.	 * @param   boolean	$buttons	True and the editor buttons will be displayed.	 * @param   string	$id			An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string	$asset	 * @param   object	$author	 * @param   array  $params		Associative array of editor parameters.	 *	 * @return  string HTML	 */	public function onDisplay($name, $content, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		if (empty($id))		{			$id = $name;		}		// Only add "px" to width and height if they are not given as a percentage		if (is_numeric($width))		{			$width .= 'px';		}		if (is_numeric($height))		{			$height .= 'px';		}		// Must pass the field id to the buttons in this editor.		$buttons = $this->_displayButtons($id, $buttons, $asset, $author);		$compressed	= JFactory::getApplication()->getCfg('debug') ? '-uncompressed' : '';		// Default syntax		$parserFile = 'parsexml.js';		$styleSheet = array('xmlcolors.css');		// Look if we need special syntax coloring.		$syntax = JFactory::getApplication()->getUserState('editor.source.syntax');		if ($syntax)		{			switch($syntax)			{				case 'css':					$parserFile = 'parsecss.js';					$styleSheet = array('csscolors.css');					break;				case 'js':					$parserFile = array('tokenizejavascript.js', 'parsejavascript.js');					$styleSheet = array('jscolors.css');					break;				case 'html':					$parserFile = array('parsexml.js', 'parsecss.js', 'tokenizejavascript.js', 'parsejavascript.js', 'parsehtmlmixed.js');					$styleSheet = array('xmlcolors.css', 'jscolors.css', 'csscolors.css');					break;				case 'php':					$parserFile = array('parsexml.js', 'parsecss.js', 'tokenizejavascript.js', 'parsejavascript.js', 'tokenizephp.js', 'parsephp.js', 'parsephphtmlmixed.js');					$styleSheet = array('xmlcolors.css', 'jscolors.css', 'csscolors.css', 'phpcolors.css');					break;				default:					break;			} //switch		}		foreach ($styleSheet as &$style)		{			$style = JURI::root(true).'/'.$this->_basePath.'css/'.$style;		}		$options	= new stdClass;		$options->basefiles		= array('basefiles'.$compressed.'.js');		$options->path			= JURI::root(true).'/'.$this->_basePath.'js/';		$options->parserfile	= $parserFile;		$options->stylesheet	= $styleSheet;		$options->height		= $height;		$options->width			= $width;		$options->continuousScanning = 500;		if ($this->params->get('linenumbers', 0))		{			$options->lineNumbers	= true;			$options->textWrapping	= false;		}		if ($this->params->get('tabmode', '') == 'shift')		{			$options->tabMode = 'shift';		}		$html = array();		$html[]	= "<textarea name=\"$name\" id=\"$id\" cols=\"$col\" rows=\"$row\">$content</textarea>";		$html[] = $buttons;		$html[] = '<script type="text/javascript">';		$html[] = '(function() {';		$html[] = 'var editor = CodeMirror.fromTextArea("'.$id.'", '.json_encode($options).');';		$html[] = 'Joomla.editors.instances[\''.$id.'\'] = editor;';		$html[] = '})()';		$html[] = '</script>';		return implode("\n", $html);	}	/**	 * Displays the editor buttons.	 *	 * @param string $name	 * @param mixed $buttons [array with button objects | boolean true to display buttons]	 *	 * @return  string HTML	 */	protected function _displayButtons($name, $buttons, $asset, $author)	{		// Load modal popup behavior		JHtml::_('behavior.modal', 'a.modal-button');		$args['name'] = $name;		$args['event'] = 'onGetInsertMethod';		$html = array();		$results[] = $this->update($args);		foreach ($results as $result)		{			if (is_string($result) && trim($result))			{				$html[] = $result;			}		}		if (is_array($buttons) || (is_bool($buttons) && $buttons))		{			$results = $this->_subject->getButtons($name, $buttons, $asset, $author);			// This will allow plugins to attach buttons or change the behavior on the fly using AJAX			$html[] = '<div id="editor-xtd-buttons">';			$html[] = '<div class="btn-toolbar">';			foreach ($results as $button)			{				// Results should be an object				if ($button->get('name'))				{					$modal		= ($button->get('modal')) ? 'class="modal-button btn"' : null;					$href		= ($button->get('link')) ? ' class="btn" href="'.JURI::base().$button->get('link').'"' : null;					$onclick	= ($button->get('onclick')) ? 'onclick="'.$button->get('onclick').'"' : null;					$title      = ($button->get('title')) ? $button->get('title') : $button->get('text');					$html[] = '<a '.$modal.' title="'.$title.'" '.$href.' '.$onclick.' rel="'.$button->get('options').'">';					$html[] = '<i class="icon-' . $button->get('name'). '"></i> ';					$html[] = $button->get('text').'</a>';				}			}			$html[] = '</div>';			$html[] = '</div>';		}		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?>		<li class="imgOutline thumbnail height-80 width-80 center">			<?php if ($user->authorise('core.delete', 'com_media')):?>				<a class="close delete-item" target="_top" href="index.php?option=com_media&amp;task=folder.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_folder->name; ?>" rel="<?php echo $this->_tmp_folder->name; ?> :: <?php echo $this->_tmp_folder->files + $this->_tmp_folder->folders; ?>" title="<?php echo JText::_('JACTION_DELETE');?>">x</a>				<input class="pull-left" type="checkbox" name="rm[]" value="<?php echo $this->_tmp_folder->name; ?>" />				<div class="clearfix"></div>			<?php endif;?>			<div class="height-50">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe">					<i class="icon-folder-2"></i>				</a>			</div>			<div class="small">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe"><?php echo JHtml::_('string.truncate', $this->_tmp_folder->name, 10, false); ?></a>			</div>		</li>
<?php/** * @package     Joomla.Libraries * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags table * * @package     Joomla.Libraries * @subpackage  Table * @since       3.1 */class JTableContenttype extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   3.1	 */	public function __construct($db)	{		parent::__construct('#__content_types', 'type_id', $db);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function check()	{		// Check for valid name.		if (trim($this->type_title) == '')		{			throw new UnexpectedValueException(sprintf('The title is empty'));		}		$this->type_title = ucfirst($this->type_title);		if (empty($this->type_alias))		{			throw new UnexpectedValueException(sprintf('The type_alias is empty'));		}		return true;	}	/**	 * Overridden JTable::store.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function store($updateNulls = false)	{		// Verify that the alias is unique		$table = JTable::getInstance('Contenttype', 'JTable');		if ($table->load(array('type_alias' => $this->type_alias)) && ($table->type_id != $this->type_id || $this->type_id == 0))		{			$this->setError(JText::_('COM_TAGS_ERROR_UNIQUE_ALIAS'));			return false;		}		return parent::store($updateNulls);	}	/**	 * Method to expand the field mapping	 *	 * @param   boolean  $assoc  True to return an associative array.	 *	 * @return  mixed  Array or object with field mappings. Defaults to object.	 *	 * @since   3.1	 */	public function fieldmapExpand($assoc = true)	{		return $this->fieldmap = json_decode($this->fieldmappings, $assoc);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactModelCategory extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * The category that applies.	 *	 * @access    protected	 * @var        object	 */	protected $_category = null;	/**	 * The list of other newfeed categories.	 *	 * @access    protected	 * @var        array	 */	protected $_categories = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'con_position', 'a.con_position',				'suburb', 'a.suburb',				'state', 'a.state',				'country', 'a.country',				'ordering', 'a.ordering',				'sortname',				'sortname1', 'a.sortname1',				'sortname2', 'a.sortname2',				'sortname3', 'a.sortname3'			);		}		parent::__construct($config);	}	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		// Convert the params field into an object, saving original in _params		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item = & $items[$i];			if (!isset($this->_params))			{				$params = new JRegistry;				$params->loadString($item->params);				$item->params = $params;			}		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields from the categories.		//sqlsrv changes		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('a.alias', '!=', '0');		$case_when .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $a_id . ' END as slug';		$case_when1 = ' CASE WHEN ';		$case_when1 .= $query->charLength('c.alias', '!=', '0');		$case_when1 .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when1 .= ' ELSE ';		$case_when1 .= $c_id . ' END as catslug';		$query->select($this->getState('list.select', 'a.*') . ',' . $case_when . ',' . $case_when1)		// TODO: we actually should be doing it but it's wrong this way		//	. ' CASE WHEN CHAR_LENGTH(a.alias) THEN CONCAT_WS(\':\', a.id, a.alias) ELSE a.id END as slug, '		//	. ' CASE WHEN CHAR_LENGTH(c.alias) THEN CONCAT_WS(\':\', c.id, c.alias) ELSE c.id END AS catslug ');			->from($db->quoteName('#__contact_details') . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid')			->where('a.access IN (' . $groups . ')');		// Filter by category.		if ($categoryId = $this->getState('category.id'))		{			$query->where('a.catid = ' . (int) $categoryId)				->where('c.access IN (' . $groups . ')');		}		// Join over the users for the author and modified_by names.		$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author")			->select("ua.email AS author_email")			->join('LEFT', '#__users AS ua ON ua.id = a.created_by')			->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');		// Filter by state		$state = $this->getState('filter.published');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);		}		// Filter by start and end dates.		$nullDate = $db->quote($db->getNullDate());		$nowDate = $db->quote(JFactory::getDate()->toSql());		if ($this->getState('filter.publish_date'))		{			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		}		// Filter by search in title		$search = $this->getState('list.filter');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(a.name LIKE ' . $search . ')');		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		// Set sortname ordering if selected		if ($this->getState('list.ordering') == 'sortname')		{			$query->order($db->escape('a.sortname1') . ' ' . $db->escape($this->getState('list.direction', 'ASC')))				->order($db->escape('a.sortname2') . ' ' . $db->escape($this->getState('list.direction', 'ASC')))				->order($db->escape('a.sortname3') . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		}		else		{			$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		}		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_contact');		$db = $this->getDbo();		// List state information		$format = $app->input->getWord('format');		if ($format == 'feed')		{			$limit = $app->getCfg('feed_limit');		}		else		{			$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');		}		$this->setState('list.limit', $limit);		$limitstart = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $limitstart);		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		// Get list ordering default from the parameters		$menuParams = new JRegistry;		if ($menu = $app->getMenu()->getActive())		{			$menuParams->loadString($menu->params);		}		$mergedParams = clone $params;		$mergedParams->merge($menuParams);		$orderCol = $app->input->get('filter_order', $mergedParams->get('initial_sort', 'ordering'));		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->input->get('filter_order_Dir', 'ASC');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$id = $app->input->get('id', 0, 'int');		$this->setState('category.id', $id);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_contact')) && (!$user->authorise('core.edit', 'com_contact')))		{			// limit to published for people who can't edit or edit.state.			$this->setState('filter.published', 1);			// Filter by start and end dates.			$this->setState('filter.publish_date', true);		}		$this->setState('filter.language', $app->getLanguageFilter());		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get category data for the current category	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   1.5	 */	public function getCategory()	{		if (!is_object($this->_item))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items', 1) || $params->get('show_empty_categories', 0);			$categories = JCategories::getInstance('Contact', $options);			$this->_item = $categories->get($this->getState('category.id', 'root'));			if (is_object($this->_item))			{				$this->_children = $this->_item->getChildren();				$this->_parent = false;				if ($this->_item->getParent())				{					$this->_parent = $this->_item->getParent();				}				$this->_rightsibling = $this->_item->getSibling();				$this->_leftsibling = $this->_item->getSibling(false);			}			else			{				$this->_children = false;				$this->_parent = false;			}		}		$this->tags = new JHelperTags;		$this->tags->getItemTags('com_contact.category', $this->_item->get('id'));		return $this->_item;	}	/**	 * Get the parent category.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	public function getParent()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_parent;	}	/**	 * Get the sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getLeftSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_leftsibling;	}	function &getRightSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_rightsibling;	}	/**	 * Get the child categories.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getChildren()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_children;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$version = new JVersion;?><div id="installer-languages">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=languages');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if (count($this->items) || $this->escape($this->state->get('filter.search'))) : ?>			<?php echo $this->loadTemplate('filter'); ?>			<table class="table table-striped">				<thead>					<tr>						<th width="20" class="nowrap hidden-phone">							<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />						</th>						<th class="nowrap">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>						</th>						<th width="10%" class="center">							<?php echo JText::_('JVERSION'); ?>						</th>						<th class="center nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_TYPE'); ?>						</th>						<th width="35%" class="nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_DETAILS_URL'); ?>						</th>						<th width="30" class="nowrap hidden-phone">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'update_id', $listDirn, $listOrder); ?>						</th>					</tr>				</thead>				<tfoot>					<tr>						<td colspan="6">							<?php echo $this->pagination->getListFooter(); ?>						</td>					</tr>				</tfoot>				<tbody>					<?php foreach ($this->items as $i => $language) :				?>					<tr class="row<?php echo $i % 2; ?>">						<td class="hidden-phone">							<?php echo JHtml::_('grid.id', $i, $language->update_id, false, 'cid'); ?>						</td>						<td>							<?php echo $language->name; ?>							<?php // Display a Note if language pack version is not equal to Joomla version ?>							<?php if (substr($language->version, 0, 3) != $version->RELEASE									|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>								<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>							<?php endif; ?>						</td>						<td class="center small">							<?php echo $language->version; ?>						</td>						<td class="center small hidden-phone">							<?php echo JText::_('COM_INSTALLER_TYPE_' . strtoupper($language->type)); ?>						</td>						<td class="small hidden-phone">							<?php echo $language->detailsurl; ?>						</td>						<td class="small hidden-phone">							<?php echo $language->update_id; ?>						</td>					</tr>					<?php endforeach; ?>				</tbody>			</table>		<?php else : ?>			<div class="alert"><?php echo JText::_('COM_INSTALLER_MSG_LANGUAGES_NOLANGUAGES'); ?></div>		<?php endif; ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of user access level records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelLevels extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'ordering', 'a.ordering',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.*'			)		);		$query->from($db->quoteName('#__viewlevels') . ' AS a');		// Add the level in the tree.		$query->group('a.id, a.title, a.ordering, a.rules');		// Filter the items over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.title LIKE ' . $search);			}		}		$query->group('a.id');		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to adjust the ordering of a row.	 *	 * @param   integer    The ID of the primary key to move.	 * @param   integer    Increment, usually +1 or -1	 * @return  boolean  False on failure or error, true otherwise.	 */	public function reorder($pk, $direction = 0)	{		// Sanitize the id and adjustment.		$pk = (!empty($pk)) ? $pk : (int) $this->getState('level.id');		$user = JFactory::getUser();		// Get an instance of the record's table.		$table = JTable::getInstance('viewlevel');		// Load the row.		if (!$table->load($pk))		{			$this->setError($table->getError());			return false;		}		// Access checks.		$allow = $user->authorise('core.edit.state', 'com_users');		if (!$allow)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			return false;		}		// Move the row.		// TODO: Where clause to restrict category.		$table->move($pk);		return true;	}	/**	 * Saves the manually set order of records.	 *	 * @param   array    An array of primary key ids.	 * @param   integer  +/-1	 */	public function saveorder($pks, $order)	{		$table = JTable::getInstance('viewlevel');		$user = JFactory::getUser();		$conditions = array();		if (empty($pks))		{			return JError::raiseWarning(500, JText::_('COM_USERS_ERROR_LEVELS_NOLEVELS_SELECTED'));		}		// update ordering values		foreach ($pks as $i => $pk)		{			$table->load((int) $pk);			// Access checks.			$allow = $user->authorise('core.edit.state', 'com_users');			if (!$allow)			{				// Prune items that you can't change.				unset($pks[$i]);				JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			}			elseif ($table->ordering != $order[$i])			{				$table->ordering = $order[$i];				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}		}		// Execute reorder for each category.		foreach ($conditions as $cond)		{			$table->load($cond[0]);			$table->reorder($cond[1]);		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('filelist');/** * Supports an HTML select list of image * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldImageList extends JFormFieldFileList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'ImageList';	/**	 * Method to get the list of images field options.	 * Use the filter attribute to specify allowable file extensions.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		// Define the image file type filter.		$filter = '\.png$|\.gif$|\.jpg$|\.bmp$|\.ico$|\.jpeg$|\.psd$|\.eps$';		// Set the form field element attribute for file type filter.		$this->element->addAttribute('filter', $filter);		// Get the field options.		return parent::getOptions();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_contact.category');$saveOrder	= $listOrder == 'a.ordering';$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><form action="<?php echo JRoute::_('index.php?option=com_contact'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="nowrap featured-col">					<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder, null, 'desc'); ?>				</th>				<th class="title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'contacts.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>					<th width="5%">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>				<?php endif;?>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php		$n = count($this->items);		foreach ($this->items as $i => $item) :			$ordering   = $listOrder == 'a.ordering';			$canCreate  = $user->authorise('core.create',     'com_contact.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_contact.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;			$canEditOwn = $user->authorise('core.edit.own',   'com_contact.category.' . $item->catid) && $item->created_by == $userId;			$canChange  = $user->authorise('core.edit.state', 'com_contact.category.' . $item->catid) && $canCheckin;			$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_contact&task=edit&type=other&id='.$item->catid);			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'contacts.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit || $canEditOwn) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_contact&task=contact.edit&id='.(int) $item->id); ?>">						<?php echo $this->escape($item->name); ?></a>					<?php else : ?>						<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td align="center">					<?php if (!empty($item->linked_user)) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.$item->user_id);?>"><?php echo $item->linked_user;?></a>					<?php endif; ?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'contacts.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo JHtml::_('contact.featured', $item->featured, $i, $canChange); ?>				</td>				<td class="center">					<?php echo $item->category_title; ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'contacts.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $n, ($item->catid == @$this->items[$i + 1]->catid), 'contacts.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'contacts.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $n, ($item->catid == @$this->items[$i + 1]->catid), 'contacts.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $item->access_level; ?>				</td>				<?php if ($assoc) : ?>					<td class="center">						<?php if ($item->association) : ?>							<?php echo JHtml::_('contact.association', $item->id); ?>						<?php endif; ?>					</td>				<?php endif;?>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/extension.php';/** * Installer Manage Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelDiscover extends InstallerModel{	protected $_context = 'com_installer.discover';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Method to get the database query.	 *	 * @return  JDatabaseQuery  the database query	 *	 * @since   1.6	 */	protected function getListQuery()	{		$db		= JFactory::getDbo();		$query = $db->getQuery(true)			->select('*')			->from('#__extensions')			->where('state=-1');		return $query;	}	/**	 * Discover extensions.	 *	 * Finds uninstalled extensions	 *	 * @return  void	 *	 * @since   1.6	 */	public function discover()	{		// Purge the list of discovered extensions		$this->purge();		$installer	= JInstaller::getInstance();		$results	= $installer->discover();		// Get all templates, including discovered ones		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('extension_id, element, folder, client_id, type')			->from('#__extensions');		$db->setQuery($query);		$installedtmp = $db->loadObjectList();		$extensions = array();		foreach ($installedtmp as $install)		{			$key = implode(':', array($install->type, $install->element, $install->folder, $install->client_id));			$extensions[$key] = $install;		}		unset($installedtmp);		foreach ($results as $result)		{			// Check if we have a match on the element			$key = implode(':', array($result->type, $result->element, $result->folder, $result->client_id));			if (!array_key_exists($key, $extensions))			{				// Put it into the table				$result->store();			}		}	}	/**	 * Installs a discovered extension.	 *	 * @return  void	 *	 * @since   1.6	 */	public function discover_install()	{		$app = JFactory::getApplication();		$installer = JInstaller::getInstance();		$eid = JRequest::getVar('cid', 0);		if (is_array($eid) || $eid)		{			if (!is_array($eid))			{				$eid = array($eid);			}			JArrayHelper::toInteger($eid);			$app = JFactory::getApplication();			$failed = false;			foreach ($eid as $id)			{				$result = $installer->discover_install($id);				if (!$result)				{					$failed = true;					$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_INSTALLFAILED') . ': ' . $id);				}			}			$this->setState('action', 'remove');			$this->setState('name', $installer->get('name'));			$app->setUserState('com_installer.message', $installer->message);			$app->setUserState('com_installer.extension_message', $installer->get('extension_message'));			if (!$failed)			{				$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_INSTALLSUCCESSFUL'));			}		}		else		{			$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_NOEXTENSIONSELECTED'));		}	}	/**	 * Cleans out the list of discovered extensions.	 *	 * @return  bool True on success	 *	 * @since   1.6	 */	public function purge()	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->delete('#__extensions')			->where('state = -1');		$db->setQuery($query);		if ($db->execute())		{			$this->_message = JText::_('COM_INSTALLER_MSG_DISCOVER_PURGEDDISCOVEREDEXTENSIONS');			return true;		}		else		{			$this->_message = JText::_('COM_INSTALLER_MSG_DISCOVER_FAILEDTOPURGEEXTENSIONS');			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// JLayout for standard handling of the details sidebar in administrator edit screens.$title = $displayData->get('form')->getValue('title');$published = $displayData->get('form')->getValue('published');?><div class="span2"><h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<?php if (empty($title)) : ?>					<div class="control-group">						<div class="controls">							<?php echo $displayData->get('form')->getValue('name'); ?>						</div>					</div>				<?php else : ?>				<div class="control-group">					<div class="controls">						<?php echo $displayData->get('form')->getValue('title'); ?>					</div>				</div>				<?php endif; ?>				<?php if ($published) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $displayData->get('form')->getLabel('published'); ?>						</div>						<div class="controls">							<?php echo $displayData->get('form')->getInput('published'); ?>						</div>					</div>				<?php else : ?>					<div class="control-group">						<div class="control-label">							<?php echo $displayData->get('form')->getLabel('state'); ?>						</div>						<div class="controls">							<?php echo $displayData->get('form')->getInput('state'); ?>						</div>					</div>				<?php endif; ?>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('featured'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('featured'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('language'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<?php foreach ($displayData->get('form')->getFieldset('jmetadata') as $field) : ?>						<?php if ($field->name == 'jform[metadata][tags][]') :?>						<div class="control-group">							<div class="control-label"><?php echo $field->label; ?></div>							<div class="controls"><?php echo $field->input; ?></div>						</div>						<?php endif; ?>					<?php endforeach; ?>				</div>			</fieldset>		</div>
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Component installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterComponent extends JAdapterInstance{	/**	 * Copy of the XML manifest file	 *	 * @var    string	 * @since  3.1	 */	protected $manifest = null;	/**	 * Name of the extension	 *	 * @var    string	 * @since  3.1	 * */	protected $name = null;	/**	 * The unique identifier for the extension (e.g. mod_login)	 *	 * @var    string	 * @since  3.1	 * */	protected $element = null;	/**	 * The list of current files fo the Joomla! CMS administrator that are installed and is read	 * from the manifest on disk in the update area to handle doing a diff	 * and deleting files that are in the old files list and not in the new	 * files list.	 *	 * @var    array	 * @since  3.1	 * */	protected $oldAdminFiles = null;	/**	 * The list of current files that are installed and is read	 * from the manifest on disk in the update area to handle doing a diff	 * and deleting files that are in the old files list and not in the new	 * files list.	 *	 * @var    array	 * @since  3.1	 * */	protected $oldFiles = null;	/**	 * A path to the PHP file that the scriptfile declaration in	 * the manifest refers to.	 *	 * @var    string	 * @since  3.1	 * */	protected $manifest_script = null;	/**	 * For legacy installations this is a path to the PHP file that the scriptfile declaration in the	 * manifest refers to.	 *	 * @var    string	 * @since  3.1	 * */	protected $install_script = null;	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path language files are on.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent				->setPath(				'source',				($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) .				'/components/' . $this->parent->extension->element			);		}		$this->manifest = $this->parent->getManifest();		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		if (substr($name, 0, 4) == 'com_')		{			$extension = $name;		}		else		{			$extension = 'com_' . $name;		}		$lang = JFactory::getLanguage();		$source = $path ? $path : ($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/components/' . $extension;		if ($this->manifest->administration->files)		{			$element = $this->manifest->administration->files;		}		elseif ($this->manifest->files)		{			$element = $this->manifest->files;		}		else		{			$element = null;		}		if ($element)		{			$folder = (string) $element->attributes()->folder;			if ($folder && file_exists($path . '/' . $folder))			{				$source = $path . '/' . $folder;			}		}		$lang->load($extension . '.sys', $source, null, false, false) || $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false);	}	/**	 * Custom install method for components	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get a database connector object		$db = $this->parent->getDbo();		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension's name		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		if (substr($name, 0, 4) == 'com_')		{			$element = $name;		}		else		{			$element = 'com_' . $name;		}		$this->set('name', $name);		$this->set('element', $element);		// Get the component description		$this->parent->set('message', JText::_((string) $this->manifest->description));		// Set the installation target paths		$this->parent->setPath('extension_site', JPath::clean(JPATH_SITE . '/components/' . $this->get('element')));		$this->parent->setPath('extension_administrator', JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $this->get('element')));		// Copy the admin path as it's used as a common base		$this->parent->setPath('extension_root', $this->parent->getPath('extension_administrator'));		/*		 * ---------------------------------------------------------------------------------------------		 * Basic Checks Section		 * ---------------------------------------------------------------------------------------------		 */		// Make sure that we have an admin element		if (!$this->manifest->administration)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_INSTALL_ADMIN_ELEMENT'), JLog::WARNING, 'jerror');			return false;		}		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		/*		 * If the component site or admin directory already exists, then we will assume that the component is already		 * installed or another component is using that directory.		 */		if (file_exists($this->parent->getPath('extension_site')) || file_exists($this->parent->getPath('extension_administrator')))		{			// Look for an update function or update tag			$updateElement = $this->manifest->update;			// Upgrade manually set or update function available or update tag detected			if ($this->parent->isUpgrade() || ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'update'))				|| $updateElement)			{				// Transfer control to the update function				return $this->update();			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is set.				// We didn't have overwrite set, find an update function or find an update tag so lets call it safe				if (file_exists($this->parent->getPath('extension_site')))				{					// If the site exists say so.					JLog::add(						JText::sprintf('JLIB_INSTALLER_ERROR_COMP_INSTALL_DIR_SITE', $this->parent->getPath('extension_site')),						JLog::WARNING, 'jerror'					);				}				else				{					// If the admin exists say so					JLog::add(						JText::sprintf('JLIB_INSTALLER_ERROR_COMP_INSTALL_DIR_ADMIN', $this->parent->getPath('extension_administrator')),						JLog::WARNING, 'jerror'					);				}				return false;			}		}		/*		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $this->get('element') . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight('install', $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		// If the component directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_site')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_site')))			{				JLog::add(					JText::sprintf('JLIB_INSTALLER_ERROR_COMP_INSTALL_FAILED_TO_CREATE_DIRECTORY_SITE', $this->parent->getPath('extension_site')),					JLog::WARNING, 'jerror'				);				return false;			}		}		/*		 * Since we created the component directory and we will want to remove it if we have to roll back		 * the installation, let's add it to the installation step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_site')));		}		// If the component admin directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_administrator')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_administrator')))			{				JLog::add(					JText::sprintf('JLIB_INSTALLER_ERROR_COMP_INSTALL_FAILED_TO_CREATE_DIRECTORY_ADMIN', $this->parent->getPath('extension_administrator')),					JLog::WARNING, 'jerror'				);				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		/*		 * Since we created the component admin directory and we will want to remove it if we have to roll		 * back the installation, let's add it to the installation step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_administrator')));		}		// Copy site files		if ($this->manifest->files)		{			if ($this->parent->parseFiles($this->manifest->files) === false)			{				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		// Copy admin files		if ($this->manifest->administration->files)		{			if ($this->parent->parseFiles($this->manifest->administration->files, 1) === false)			{				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		// Parse optional tags		$this->parent->parseMedia($this->manifest->media);		$this->parent->parseLanguages($this->manifest->languages);		$this->parent->parseLanguages($this->manifest->administration->languages, 1);		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_administrator') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_MANIFEST'));					return false;				}			}		}		/*		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Run the install queries for the component		if (isset($this->manifest->install->sql))		{			$result = $this->parent->parseSQLFiles($this->manifest->install->sql);			if ($result === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_SQL_ERROR', $db->stderr(true)));				return false;			}		}		/**		 * ---------------------------------------------------------------------------------------------		 * Custom Installation Script Section		 * ---------------------------------------------------------------------------------------------		 */		/*		 * If we have an install script, let's include it, execute the custom		 * install method, and append the return value from the custom install		 * method to the installation message.		 */		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'install'))		{			if ($this->parent->manifestClass->install($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Add an entry to the extension table with a whole heap of defaults		$row = JTable::getInstance('extension');		$row->set('name', $this->get('name'));		$row->set('type', 'component');		$row->set('element', $this->get('element'));		// There is no folder for components		$row->set('folder', '');		$row->set('enabled', 1);		$row->set('protected', 0);		$row->set('access', 0);		$row->set('client_id', 1);		$row->set('params', $this->parent->getParams());		$row->set('manifest_cache', $this->parent->generateManifestCache());		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_ROLLBACK', $db->stderr(true)));			return false;		}		$eid = $row->extension_id;		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('element'), 'type' => 'component', 'client_id' => 1, 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		// We will copy the manifest file to its appropriate place.		if (!$this->parent->copyManifest())		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_COPY_SETUP'));			return false;		}		// Time to build the admin menus		if (!$this->_buildAdminMenus($row->extension_id))		{			JLog::add(JText::_('JLIB_INSTALLER_ABORT_COMP_BUILDADMINMENUS_FAILED'), JLog::WARNING, 'jerror');			// @todo remove code: $this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_ROLLBACK', $db->stderr(true)));			// @todo remove code: return false;		}		// Set the schema version to be the latest update version		if ($this->manifest->update)		{			$this->parent->setSchemaVersion($this->manifest->update->schemas, $eid);		}		// Register the component container just under root in the assets table.		$asset = JTable::getInstance('Asset');		$asset->name = $row->element;		$asset->parent_id = 1;		$asset->rules = '{}';		$asset->title = $row->name;		$asset->setLocation(1, 'last-child');		if (!$asset->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_ROLLBACK', $db->stderr(true)));			return false;		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight('install', $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->extension_id;	}	/**	 * Custom update method for components	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		// Get a database connector object		$db = $this->parent->getDbo();		// Set the overwrite setting		$this->parent->setOverwrite(true);		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/**		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension's name		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		if (substr($name, 0, 4) == 'com_')		{			$element = $name;		}		else		{			$element = 'com_' . $name;		}		$this->set('name', $name);		$this->set('element', $element);		// Get the component description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Set the installation target paths		$this->parent->setPath('extension_site', JPath::clean(JPATH_SITE . '/components/' . $this->get('element')));		$this->parent->setPath('extension_administrator', JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $this->get('element')));		// Copy the admin path as it's used as a common base		$this->parent->setPath('extension_root', $this->parent->getPath('extension_administrator'));		// Hunt for the original XML file		$old_manifest = null;		// Create a new installer because findManifest sets stuff		// Look in the administrator first		$tmpInstaller = new JInstaller;		$tmpInstaller->setPath('source', $this->parent->getPath('extension_administrator'));		if (!$tmpInstaller->findManifest())		{			// Then the site			$tmpInstaller->setPath('source', $this->parent->getPath('extension_site'));			if ($tmpInstaller->findManifest())			{				$old_manifest = $tmpInstaller->getManifest();			}		}		else		{			$old_manifest = $tmpInstaller->getManifest();		}		// Should do this above perhaps?		if ($old_manifest)		{			$this->oldAdminFiles = $old_manifest->administration->files;			$this->oldFiles = $old_manifest->files;		}		else		{			$this->oldAdminFiles = null;			$this->oldFiles = null;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Basic Checks Section		 * ---------------------------------------------------------------------------------------------		 */		// Make sure that we have an admin element		if (!$this->manifest->administration)		{			JLog::add(JText::_('JLIB_INSTALLER_ABORT_COMP_UPDATE_ADMIN_ELEMENT'), JLog::WARNING, 'jerror');			return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight('update', $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// If the component directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_site')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_site')))			{				JLog::add(					JText::sprintf('JLIB_INSTALLER_ERROR_COMP_UPDATE_FAILED_TO_CREATE_DIRECTORY_SITE', $this->parent->getPath('extension_site')),					JLog::WARNING, 'jerror'				);				return false;			}		}		/*		 * Since we created the component directory and will want to remove it if we have to roll back		 * the installation, lets add it to the installation step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_site')));		}		// If the component admin directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_administrator')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_administrator')))			{				JLog::add(					JText::sprintf('JLIB_INSTALLER_ERROR_COMP_UPDATE_FAILED_TO_CREATE_DIRECTORY_ADMIN', $this->parent->getPath('extension_administrator')),					JLog::WARNING, 'jerror'				);				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		/*		 * Since we created the component admin directory and we will want to remove it if we have to roll		 * back the installation, let's add it to the installation step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_administrator')));		}		// Find files to copy		if ($this->manifest->files)		{			if ($this->parent->parseFiles($this->manifest->files, 0, $this->oldFiles) === false)			{				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		if ($this->manifest->administration->files)		{			if ($this->parent->parseFiles($this->manifest->administration->files, 1, $this->oldAdminFiles) === false)			{				// Install failed, rollback any changes				$this->parent->abort();				return false;			}		}		// Parse optional tags		$this->parent->parseMedia($this->manifest->media);		$this->parent->parseLanguages($this->manifest->languages);		$this->parent->parseLanguages($this->manifest->administration->languages, 1);		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_administrator') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_UPDATE_MANIFEST'));					return false;				}			}		}		/**		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Let's run the update queries for the component		$row = JTable::getInstance('extension');		$eid = $row->find(array('element' => strtolower($this->get('element')), 'type' => 'component'));		if ($this->manifest->update)		{			$result = $this->parent->parseSchemaUpdates($this->manifest->update->schemas, $eid);			if ($result === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_UPDATE_SQL_ERROR', $db->stderr(true)));				return false;			}		}		// Time to build the admin menus		if (!$this->_buildAdminMenus($eid))		{			JLog::add(JText::_('JLIB_INSTALLER_ABORT_COMP_BUILDADMINMENUS_FAILED'), JLog::WARNING, 'jerror');			// $this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_ROLLBACK', $db->stderr(true)));			// Return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Custom Installation Script Section		 * ---------------------------------------------------------------------------------------------		 */		/*		 * If we have an install script, let's include it, execute the custom		 * update method, and append the return value from the custom update		 * method to the installation message.		 */		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'update'))		{			if ($this->parent->manifestClass->update($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('element'), 'type' => 'component', 'client_id' => 1, 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		// Update an entry to the extension table		if ($eid)		{			$row->load($eid);		}		else		{			// Set the defaults			// There is no folder for components			$row->folder = '';			$row->enabled = 1;			$row->protected = 0;			$row->access = 1;			$row->client_id = 1;			$row->params = $this->parent->getParams();		}		$row->name = $this->get('name');		$row->type = 'component';		$row->element = $this->get('element');		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_UPDATE_ROLLBACK', $db->stderr(true)));			return false;		}		// We will copy the manifest file to its appropriate place.		if (!$this->parent->copyManifest())		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_UPDATE_COPY_SETUP'));			return false;		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight('update', $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->extension_id;	}	/**	 * Custom uninstall method for components	 *	 * @param   integer  $id  The unique extension id of the component to uninstall	 *	 * @return  mixed  Return value for uninstall method in component uninstall file	 *	 * @since   3.1	 */	public function uninstall($id)	{		$db = $this->parent->getDbo();		$row = null;		$retval = true;		// First order of business will be to load the component object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the component we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_WARNCORECOMPONENT'), JLog::WARNING, 'jerror');			return false;		}		// Get the admin and site paths for the component		$this->parent->setPath('extension_administrator', JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $row->element));		$this->parent->setPath('extension_site', JPath::clean(JPATH_SITE . '/components/' . $row->element));		// Copy the admin path as it's used as a common base		$this->parent->setPath('extension_root', $this->parent->getPath('extension_administrator'));		/**		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Find and load the XML install file for the component		$this->parent->setPath('source', $this->parent->getPath('extension_administrator'));		// Get the package manifest object		// We do findManifest to avoid problem when uninstalling a list of extension: getManifest cache its manifest file		$this->parent->findManifest();		$this->manifest = $this->parent->getManifest();		if (!$this->manifest)		{			// Make sure we delete the folders if no manifest exists			JFolder::delete($this->parent->getPath('extension_administrator'));			JFolder::delete($this->parent->getPath('extension_site'));			// Remove the menu			$this->_removeAdminMenus($row);			// Raise a warning			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_ERRORREMOVEMANUALLY'), JLog::WARNING, 'jerror');			// Return			return false;		}		// Set the extensions name		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		if (substr($name, 0, 4) == 'com_')		{			$element = $name;		}		else		{			$element = 'com_' . $name;		}		$this->set('name', $name);		$this->set('element', $element);		// Attempt to load the admin language file; might have uninstall strings		$this->loadLanguage(JPATH_ADMINISTRATOR . '/components/' . $element);		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading and Uninstall		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$scriptFile = (string) $this->manifest->scriptfile;		if ($scriptFile)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $scriptFile;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $row->element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $scriptFile);			}		}		ob_start();		ob_implicit_flush(false);		// Run uninstall if possible		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))		{			$this->parent->manifestClass->uninstall($this);		}		$msg = ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		/**		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Let's run the uninstall queries for the component		if (isset($this->manifest->uninstall->sql))		{			$result = $this->parent->parseSQLFiles($this->manifest->uninstall->sql);			if ($result === false)			{				// Install failed, rollback changes				JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');				$retval = false;			}		}		$this->_removeAdminMenus($row);		/**		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Let's remove those language files and media in the JROOT/images/ folder that are		// associated with the component we are uninstalling		$this->parent->removeFiles($this->manifest->media);		$this->parent->removeFiles($this->manifest->languages);		$this->parent->removeFiles($this->manifest->administration->languages, 1);		// Remove the schema version		$query = $db->getQuery(true)			->delete('#__schemas')			->where('extension_id = ' . $id);		$db->setQuery($query);		$db->execute();		// Remove the component container in the assets table.		$asset = JTable::getInstance('Asset');		if ($asset->loadByName($element))		{			$asset->delete();		}		// Remove categories for this component		$query = $db->getQuery(true)			->delete('#__categories')			->where('extension=' . $db->quote($element), 'OR')			->where('extension LIKE ' . $db->quote($element . '.%'));		$db->setQuery($query);		$db->execute();		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $row->element, 'type' => 'component', 'client_id' => 1, 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		// Now we need to delete the installation directories. This is the final step in uninstalling the component.		if (trim($row->element))		{			// Delete the component site directory			if (is_dir($this->parent->getPath('extension_site')))			{				if (!JFolder::delete($this->parent->getPath('extension_site')))				{					JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_FAILED_REMOVE_DIRECTORY_SITE'), JLog::WARNING, 'jerror');					$retval = false;				}			}			// Delete the component admin directory			if (is_dir($this->parent->getPath('extension_administrator')))			{				if (!JFolder::delete($this->parent->getPath('extension_administrator')))				{					JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_FAILED_REMOVE_DIRECTORY_ADMIN'), JLog::WARNING, 'jerror');					$retval = false;				}			}			// Now we will no longer need the extension object, so let's delete it and free up memory			$row->delete($row->extension_id);			unset($row);			return $retval;		}		else		{			// No component option defined... cannot delete what we don't know about			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_UNINSTALL_NO_OPTION'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Method to build menu database entries for a component	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	protected function _buildAdminMenus()	{		$db = $this->parent->getDbo();		$table = JTable::getInstance('menu');		$option = $this->get('element');		// If a component exists with this option in the table then we don't need to add menus		$query = $db->getQuery(true)			->select('m.id, e.extension_id')			->from('#__menu AS m')			->join('LEFT', '#__extensions AS e ON m.component_id = e.extension_id')			->where('m.parent_id = 1')			->where('m.client_id = 1')			->where('e.element = ' . $db->quote($option));		$db->setQuery($query);		$componentrow = $db->loadObject();		// Check if menu items exist		if ($componentrow)		{			// Don't do anything if overwrite has not been enabled			if (!$this->parent->isOverwrite())			{				return true;			}			// Remove existing menu items if overwrite has been enabled			if ($option)			{				// If something goes wrong, there's no way to rollback TODO: Search for better solution				$this->_removeAdminMenus($componentrow);			}			$component_id = $componentrow->extension_id;		}		else		{			// Lets find the extension id			$query->clear()				->select('e.extension_id')				->from('#__extensions AS e')				->where('e.element = ' . $db->quote($option));			$db->setQuery($query);			// TODO Find Some better way to discover the component_id			$component_id = $db->loadResult();		}		// Ok, now its time to handle the menus.  Start with the component root menu, then handle submenus.		$menuElement = $this->manifest->administration->menu;		if ($menuElement)		{			$data = array();			$data['menutype'] = 'main';			$data['client_id'] = 1;			$data['title'] = (string) trim($menuElement);			$data['alias'] = (string) $menuElement;			$data['link'] = 'index.php?option=' . $option;			$data['type'] = 'component';			$data['published'] = 0;			$data['parent_id'] = 1;			$data['component_id'] = $component_id;			$data['img'] = ((string) $menuElement->attributes()->img) ? (string) $menuElement->attributes()->img : 'class:component';			$data['home'] = 0;			try			{				$table->setLocation(1, 'last-child');			}			catch (InvalidArgumentException $e)			{				JLog::add($e->getMessage(), JLog::WARNING, 'jerror');				return false;			}			if (!$table->bind($data) || !$table->check() || !$table->store())			{				// The menu item already exists. Delete it and retry instead of throwing an error.				$query = $db->getQuery(true)					->select('id')					->from('#__menu')					->where('menutype = ' . $db->quote('main'))					->where('client_id = 1')					->where('link = ' . $db->quote('index.php?option=' . $option))					->where('type = ' . $db->quote('component'))					->where('parent_id = 1')					->where('home = 0');				$db->setQuery($query);				$menu_id = $db->loadResult();				if (!$menu_id)				{					// Oops! Could not get the menu ID. Go back and rollback changes.					JError::raiseWarning(1, $table->getError());					return false;				}				else				{					// Remove the old menu item					$query = $db->getQuery(true)						->delete('#__menu')						->where('id = ' . (int) $menu_id);					$db->setQuery($query);					$db->query();					// Retry creating the menu item					$table->setLocation(1, 'last-child');					if (!$table->bind($data) || !$table->check() || !$table->store())					{						// Install failed, warn user and rollback changes						JError::raiseWarning(1, $table->getError());						return false;					}				}			}			/*			 * Since we have created a menu item, we add it to the installation step stack			 * so that if we have to rollback the changes we can undo it.			 */			$this->parent->pushStep(array('type' => 'menu', 'id' => $component_id));		}		// No menu element was specified, Let's make a generic menu item		else		{			$data = array();			$data['menutype'] = 'main';			$data['client_id'] = 1;			$data['title'] = $option;			$data['alias'] = $option;			$data['link'] = 'index.php?option=' . $option;			$data['type'] = 'component';			$data['published'] = 0;			$data['parent_id'] = 1;			$data['component_id'] = $component_id;			$data['img'] = 'class:component';			$data['home'] = 0;			try			{				$table->setLocation(1, 'last-child');			}			catch (InvalidArgumentException $e)			{				JLog::add($e->getMessage(), JLog::WARNING, 'jerror');				return false;			}			if (!$table->bind($data) || !$table->check() || !$table->store())			{				// Install failed, warn user and rollback changes				JLog::add($table->getError(), JLog::WARNING, 'jerror');				return false;			}			/*			 * Since we have created a menu item, we add it to the installation step stack			 * so that if we have to rollback the changes we can undo it.			 */			$this->parent->pushStep(array('type' => 'menu', 'id' => $component_id));		}		/*		 * Process SubMenus		 */		if (!$this->manifest->administration->submenu)		{			return true;		}		$parent_id = $table->id;		foreach ($this->manifest->administration->submenu->menu as $child)		{			$data = array();			$data['menutype'] = 'main';			$data['client_id'] = 1;			$data['title'] = (string) trim($child);			$data['alias'] = (string) $child;			$data['type'] = 'component';			$data['published'] = 0;			$data['parent_id'] = $parent_id;			$data['component_id'] = $component_id;			$data['img'] = ((string) $child->attributes()->img) ? (string) $child->attributes()->img : 'class:component';			$data['home'] = 0;			// Set the sub menu link			if ((string) $child->attributes()->link)			{				$data['link'] = 'index.php?' . $child->attributes()->link;			}			else			{				$request = array();				if ((string) $child->attributes()->act)				{					$request[] = 'act=' . $child->attributes()->act;				}				if ((string) $child->attributes()->task)				{					$request[] = 'task=' . $child->attributes()->task;				}				if ((string) $child->attributes()->controller)				{					$request[] = 'controller=' . $child->attributes()->controller;				}				if ((string) $child->attributes()->view)				{					$request[] = 'view=' . $child->attributes()->view;				}				if ((string) $child->attributes()->layout)				{					$request[] = 'layout=' . $child->attributes()->layout;				}				if ((string) $child->attributes()->sub)				{					$request[] = 'sub=' . $child->attributes()->sub;				}				$qstring = (count($request)) ? '&' . implode('&', $request) : '';				$data['link'] = 'index.php?option=' . $option . $qstring;			}			$table = JTable::getInstance('menu');			try			{				$table->setLocation($parent_id, 'last-child');			}			catch (InvalidArgumentException $e)			{				return false;			}			if (!$table->bind($data) || !$table->check() || !$table->store())			{				// Install failed, rollback changes				return false;			}			/*			 * Since we have created a menu item, we add it to the installation step stack			 * so that if we have to rollback the changes we can undo it.			 */			$this->parent->pushStep(array('type' => 'menu', 'id' => $component_id));		}		return true;	}	/**	 * Method to remove admin menu references to a component	 *	 * @param   object  &$row  Component table object.	 *	 * @return  boolean  True if successful.	 *	 * @since   3.1	 */	protected function _removeAdminMenus(&$row)	{		$db = $this->parent->getDbo();		$table = JTable::getInstance('menu');		$id = $row->extension_id;		// Get the ids of the menu items		$query = $db->getQuery(true)			->select('id')			->from('#__menu')			->where($db->quoteName('client_id') . ' = 1')			->where($db->quoteName('component_id') . ' = ' . (int) $id);		$db->setQuery($query);		$ids = $db->loadColumn();		// Check for error		if (!empty($ids))		{			// Iterate the items to delete each one.			foreach ($ids as $menuid)			{				if (!$table->delete((int) $menuid))				{					$this->setError($table->getError());					return false;				}			}			// Rebuild the whole tree			$table->rebuild();		}		return true;	}	/**	 * Custom rollback method	 * - Roll back the component menu item	 *	 * @param   array  $step  Installation step to rollback.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	protected function _rollback_menu($step)	{		return $this->_removeAdminMenus((object) array('extension_id' => $step['id']));	}	/**	 * Discover unregistered extensions.	 *	 * @return  array  A list of extensions.	 *	 * @since   3.1	 */	public function discover()	{		$results = array();		$site_components = JFolder::folders(JPATH_SITE . '/components');		$admin_components = JFolder::folders(JPATH_ADMINISTRATOR . '/components');		foreach ($site_components as $component)		{			if (file_exists(JPATH_SITE . '/components/' . $component . '/' . str_replace('com_', '', $component) . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(					JPATH_SITE . '/components/' . $component . '/' . str_replace('com_', '', $component) . '.xml'				);				$extension = JTable::getInstance('extension');				$extension->set('type', 'component');				$extension->set('client_id', 0);				$extension->set('element', $component);				$extension->set('folder', '');				$extension->set('name', $component);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		foreach ($admin_components as $component)		{			if (file_exists(JPATH_ADMINISTRATOR . '/components/' . $component . '/' . str_replace('com_', '', $component) . '.xml'))			{				$manifest_details = JInstaller::parseXMLInstallFile(					JPATH_ADMINISTRATOR . '/components/' . $component . '/' . str_replace('com_', '', $component) . '.xml'				);				$extension = JTable::getInstance('extension');				$extension->set('type', 'component');				$extension->set('client_id', 1);				$extension->set('element', $component);				$extension->set('folder', '');				$extension->set('name', $component);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}		}		return $results;	}	/**	 * Install unregistered extensions that have been discovered.	 *	 * @return  mixed	 *	 * @since   3.1	 */	public function discover_install()	{		// Need to find to find where the XML file is since we don't store this normally		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$short_element = str_replace('com_', '', $this->parent->extension->element);		$manifestPath = $client->path . '/components/' . $this->parent->extension->element . '/' . $short_element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$this->parent->setPath('source', $client->path . '/components/' . $this->parent->extension->element);		$this->parent->setPath('extension_root', $this->parent->getPath('source'));		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		$this->parent->extension->params = $this->parent->getParams();		try		{			$this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}		// Now we need to run any SQL it has, languages, media or menu stuff		// Get a database connector object		$db = $this->parent->getDbo();		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/**		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extensions name		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		if (substr($name, 0, 4) == 'com_')		{			$element = $name;		}		else		{			$element = 'com_' . $name;		}		$this->set('name', $name);		$this->set('element', $element);		// Get the component description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_((string) $description));		}		else		{			$this->parent->set('message', '');		}		// Set the installation target paths		$this->parent->setPath('extension_site', JPath::clean(JPATH_SITE . '/components/' . $this->get('element')));		$this->parent->setPath('extension_administrator', JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $this->get('element')));		// Copy the admin path as it's used as a common base		$this->parent->setPath('extension_root', $this->parent->getPath('extension_administrator'));		/**		 * ---------------------------------------------------------------------------------------------		 * Basic Checks Section		 * ---------------------------------------------------------------------------------------------		 */		// Make sure that we have an admin element		if (!$this->manifest->administration)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_INSTALL_ADMIN_ELEMENT'), JLog::WARNING, 'jerror');			return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight('discover_install', $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		/*		 *		 * Normally we would copy files and create directories, lets skip to the optional files		 * Note: need to dereference things!		 * Parse optional tags		 * @todo remove code: $this->parent->parseMedia($this->manifest->media);		 *		 * We don't do language because 1.6 suggests moving to extension based languages		 * @todo remove code: $this->parent->parseLanguages($this->manifest->languages);		 * @todo remove code: $this->parent->parseLanguages($this->manifest->administration->languages, 1);		 */		/**		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Let's run the install queries for the component		if (isset($this->manifest->install->sql))		{			$utfresult = $this->parent->parseSQLFiles($this->manifest->install->sql);			if ($utfresult === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_SQL_ERROR', $db->stderr(true)));				return false;			}		}		// Time to build the admin menus		if (!$this->_buildAdminMenus($this->parent->extension->extension_id))		{			JLog::add(JText::_('JLIB_INSTALLER_ABORT_COMP_BUILDADMINMENUS_FAILED'), JLog::WARNING, 'jerror');			// @todo remove code: $this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_COMP_INSTALL_ROLLBACK', $db->stderr(true)));			// @todo remove code: return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Custom Installation Script Section		 * ---------------------------------------------------------------------------------------------		 */		/*		 * If we have an install script, lets include it, execute the custom		 * discover_install method, and append the return value from the custom discover_install		 * method to the installation message.		 */		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'install'))		{			if ($this->parent->manifestClass->install($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_COMP_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(array('element' => $this->get('element'), 'type' => 'component', 'client_id' => 1, 'folder' => ''));		if ($uid)		{			$update->delete($uid);		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight('discover_install', $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $this->parent->extension->extension_id;	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$short_element = str_replace('com_', '', $this->parent->extension->element);		$manifestPath = $client->path . '/components/' . $this->parent->extension->element . '/' . $short_element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_COMP_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterComponent instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerComponent extends JInstallerAdapterComponent{}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Newsfeeds component * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.0 */class NewsfeedsViewNewsfeed extends JViewLegacy{	/**	 * @var		object	 * @since   1.6	 */	protected $state;	/**	 * @var		object	 * @since   1.6	 */	protected $item;	/**	 * @var		boolean	 * @since   1.6	 */	protected $print;	/**	 * @since   1.6	 */	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		$dispatcher	= JEventDispatcher::getInstance();		// Get view related request variables.		$print = $app->input->getBool('print');		// Get model data.		$state = $this->get('State');		$item = $this->get('Item');		if ($item)		{			// Get Category Model data			$categoryModel = JModelLegacy::getInstance('Category', 'NewsfeedsModel', array('ignore_request' => true));			$categoryModel->setState('category.id', $item->catid);			$categoryModel->setState('list.ordering', 'a.name');			$categoryModel->setState('list.direction', 'asc');			$items = $categoryModel->getItems();		}		// Check for errors.		// @TODO Maybe this could go into JComponentHelper::raiseErrors($this->get('Errors'))		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Add router helpers.		$item->slug = $item->alias ? ($item->id . ':' . $item->alias) : $item->id;		$item->catslug = $item->category_alias ? ($item->catid . ':' . $item->category_alias) : $item->catid;		$item->parent_slug = $item->category_alias ? ($item->parent_id . ':' . $item->parent_alias) : $item->parent_id;		// check if cache directory is writeable		$cacheDir = JPATH_CACHE . '/';		if (!is_writable($cacheDir))		{			JError::raiseNotice('0', JText::_('COM_NEWSFEEDS_CACHE_DIRECTORY_UNWRITABLE'));			return;		}		// Merge newsfeed params. If this is single-newsfeed view, menu params override newsfeed params		// Otherwise, newsfeed params override menu item params		$params = $state->get('params');		$newsfeed_params = clone $item->params;		$active = $app->getMenu()->getActive();		$temp = clone ($params);		// Check to see which parameters should take priority		if ($active)		{			$currentLink = $active->link;			// If the current view is the active item and an newsfeed view for this feed, then the menu item params take priority			if (strpos($currentLink, 'view=newsfeed') && (strpos($currentLink, '&id='.(string) $item->id)))			{				// $item->params are the newsfeed params, $temp are the menu item params				// Merge so that the menu item params take priority				$newsfeed_params->merge($temp);				$item->params = $newsfeed_params;				// Load layout from active query (in case it is an alternative menu item)				if (isset($active->query['layout']))				{					$this->setLayout($active->query['layout']);				}			}			else			{				// Current view is not a single newsfeed, so the newsfeed params take priority here				// Merge the menu item params with the newsfeed params so that the newsfeed params take priority				$temp->merge($newsfeed_params);				$item->params = $temp;				// Check for alternative layouts (since we are not in a single-newsfeed menu item)				if ($layout = $item->params->get('newsfeed_layout'))				{					$this->setLayout($layout);				}			}		}		else		{			// Merge so that newsfeed params take priority			$temp->merge($newsfeed_params);			$item->params = $temp;			// Check for alternative layouts (since we are not in a single-newsfeed menu item)			if ($layout = $item->params->get('newsfeed_layout'))			{				$this->setLayout($layout);			}		}		$offset = $state->get('list.offset');		// Check the access to the newsfeed		$levels = $user->getAuthorisedViewLevels();		if (!in_array($item->access, $levels) or ((in_array($item->access, $levels) and (!in_array($item->category_access, $levels)))))		{			JError::raiseWarning(403, JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		// Get the current menu item		$menus	= $app->getMenu();		$menu	= $menus->getActive();		$params	= $app->getParams();		// Get the newsfeed		$newsfeed = $item;		$temp = new JRegistry;		$temp->loadString($item->params);		$params->merge($temp);		try		{			$feed = new JFeedFactory;			$this->rssDoc = $feed->getFeed($newsfeed->link);		}		catch (InvalidArgumentException $e)		{			$msg = JText::_('COM_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		catch (RunTimeException $e)		{			$msg = JText::_('COM_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		if (empty($this->rssDoc))		{			$msg = JText::_('COM_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		$lists = array();		$feed_display_order = $params->get('feed_display_order', 'des');		if ($feed_display_order == 'asc')		{			$newsfeed->items = array_reverse($newsfeed->items);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->assignRef('params', $params);		$this->assignRef('newsfeed', $newsfeed);		$this->assignRef('state', $state);		$this->assignRef('item', $item);		$this->assignRef('user', $user);		if (!empty($msg))		{			$this->assignRef('msg', $msg);		}		$this->print = $print;		$item->tags = new JHelperTags;		$item->tags->getItemTags('com_newsfeeds.newsfeed', $item->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 *	 * @return  void	 * @since   1.6	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_NEWSFEEDS_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		$id = (int) @$menu->query['id'];		// if the menu item does not concern this newsfeed		if ($menu && ($menu->query['option'] != 'com_newsfeeds' || $menu->query['view'] != 'newsfeed' || $id != $this->item->id))		{			// If this is not a single newsfeed menu item, set the page title to the newsfeed title			if ($this->item->name)			{				$title = $this->item->name;			}			$path = array(array('title' => $this->item->name, 'link' => ''));			$category = JCategories::getInstance('Newsfeeds')->get($this->item->catid);			while (($menu->query['option'] != 'com_newsfeeds' || $menu->query['view'] == 'newsfeed' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => NewsfeedsHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		if (empty($title))		{			$title = $this->item->name;		}		$this->document->setTitle($title);		if ($this->item->metadesc)		{			$this->document->setDescription($this->item->metadesc);		}		elseif (!$this->item->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->item->metakey)		{			$this->document->setMetadata('keywords', $this->item->metakey);		}		elseif (!$this->item->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaTitle') == '1')		{			$this->document->setMetaData('title', $this->item->name);		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->item->author);		}		$mdata = $this->item->metadata->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Categories List Controller * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesControllerCategories extends JControllerAdmin{	/**	 * Proxy for getModel	 *	 * @param   string	$name	The model name. Optional.	 * @param   string	$prefix	The class prefix. Optional.	 *	 * @return  object  The model.	 * @since   1.6	 */	public function getModel($name = 'Category', $prefix = 'CategoriesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Rebuild the nested set tree.	 *	 * @return  bool	False on failure or error, true on success.	 * @since   1.6	 */	public function rebuild()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$extension = $this->input->get('extension');		$this->setRedirect(JRoute::_('index.php?option=com_categories&view=categories&extension=' . $extension, false));		$model = $this->getModel();		if ($model->rebuild())		{			// Rebuild succeeded.			$this->setMessage(JText::_('COM_CATEGORIES_REBUILD_SUCCESS'));			return true;		}		else		{			// Rebuild failed.			$this->setMessage(JText::_('COM_CATEGORIES_REBUILD_FAILURE'));			return false;		}	}	/**	 * Save the manual order inputs from the categories list page.	 *	 * @return  void	 * @since   1.6	 */	public function saveorder()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			parent::saveorder();		}		else		{			// Nothing to reorder			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));			return true;		}	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$pks   = $this->input->post->get('cid', null, 'array');		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			// Get the model			$model = $this->getModel();			// Save the ordering			$return = $model->saveorder($pks, $order);			if ($return)			{				echo "1";			}		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users component helper. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersHelper{	/**	 * @var    JObject  A cache for the available actions.	 * @since  1.6	 */	protected static $actions;	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_USERS_SUBMENU_USERS'),			'index.php?option=com_users&view=users',			$vName == 'users'		);		// Groups and Levels are restricted to core.admin		$canDo = self::getActions();		if ($canDo->get('core.admin'))		{			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_GROUPS'),				'index.php?option=com_users&view=groups',				$vName == 'groups'			);			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_LEVELS'),				'index.php?option=com_users&view=levels',				$vName == 'levels'			);			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_NOTES'),				'index.php?option=com_users&view=notes',				$vName == 'notes'			);			$extension = JFactory::getApplication()->input->getString('extension');			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_NOTE_CATEGORIES'),				'index.php?option=com_categories&extension=com_users',				$vName == 'categories' || $extension == 'com_users'			);		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   1.6	 * @todo    Refactor to work with notes	 */	public static function getActions()	{		if (empty(self::$actions))		{			$user = JFactory::getUser();			self::$actions = new JObject;			$actions = JAccess::getActions('com_users');			foreach ($actions as $action)			{				self::$actions->set($action->name, $user->authorise($action->name, 'com_users'));			}		}		return self::$actions;	}	/**	 * Get a list of filter options for the blocked state of a user.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getStateOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('JENABLED'));		$options[] = JHtml::_('select.option', '1', JText::_('JDISABLED'));		return $options;	}	/**	 * Get a list of filter options for the activated state of a user.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getActiveOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('COM_USERS_ACTIVATED'));		$options[] = JHtml::_('select.option', '1', JText::_('COM_USERS_UNACTIVATED'));		return $options;	}	/**	 * Get a list of the user groups for filtering.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getGroups()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value')			->select('a.title AS text')			->select('COUNT(DISTINCT b.id) AS level')			->from('#__usergroups as a')			->join('LEFT', '#__usergroups  AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseNotice(500, $e->getMessage());			return null;		}		foreach ($options as &$option)		{			$option->text = str_repeat('- ', $option->level).$option->text;		}		return $options;	}	/**	 * Creates a list of range options used in filter select list	 * used in com_users on users view	 *	 * @return  array	 *	 * @since   2.5	 */	public static function getRangeOptions()	{		$options = array(			JHtml::_('select.option', 'today', JText::_('COM_USERS_OPTION_RANGE_TODAY')),			JHtml::_('select.option', 'past_week', JText::_('COM_USERS_OPTION_RANGE_PAST_WEEK')),			JHtml::_('select.option', 'past_1month', JText::_('COM_USERS_OPTION_RANGE_PAST_1MONTH')),			JHtml::_('select.option', 'past_3month', JText::_('COM_USERS_OPTION_RANGE_PAST_3MONTH')),			JHtml::_('select.option', 'past_6month', JText::_('COM_USERS_OPTION_RANGE_PAST_6MONTH')),			JHtml::_('select.option', 'past_year', JText::_('COM_USERS_OPTION_RANGE_PAST_YEAR')),			JHtml::_('select.option', 'post_year', JText::_('COM_USERS_OPTION_RANGE_POST_YEAR')),		);		return $options;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.p3p * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! P3P Header Plugin * * @package     Joomla.Plugin * @subpackage  System.p3p * @since       1.6 */class PlgSystemP3p extends JPlugin{	/*	 * @since   1.6	 */	public function onAfterInitialise()	{		// Get the header		$header = $this->params->get('header', 'NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM');		$header = trim($header);		// Bail out on empty header (why would anyone do that?!)		if ( empty($header) )		{			return;		}		// Replace any existing P3P headers in the response		JResponse::setHeader('P3P', 'CP="'.$header.'"', true);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><div id="filter-bar" class="btn-toolbar">	<div class="btn-group pull-right hidden-phone">		<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>			<?php echo $this->pagination->getLimitBox(); ?>	</div>	<div class="filter-search btn-group pull-left">		<label for="filter_search" class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL');?></label>		<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_INSTALLER_LANGUAGES_FILTER_SEARCH_DESC'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_INSTALLER_LANGUAGES_FILTER_SEARCH_DESC'); ?>" />	</div>	<div class="btn-group pull-left hidden-phone">		<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>		<button class="btn hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>	</div></div><div class="clearfix"> </div>
<?php/** * @package     Joomla.Plugin * @subpackage  Editors-xtd.readmore * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Editor Readmore buton * * @package     Joomla.Plugin * @subpackage  Editors-xtd.readmore * @since       1.5 */class PlgButtonReadmore extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * readmore button	 * @return array A two element array of (imageName, textToInsert)	 */	public function onDisplay($name)	{		$doc = JFactory::getDocument();		// button is not active in specific content components		$getContent = $this->_subject->getContent($name);		$present = JText::_('PLG_READMORE_ALREADY_EXISTS', true);		$js = "			function insertReadmore(editor)			{				var content = $getContent				if (content.match(/<hr\s+id=(\"|')system-readmore(\"|')\s*\/*>/i))				{					alert('$present');					return false;				} else {					jInsertEditorText('<hr id=\"system-readmore\" />', editor);				}			}			";		$doc->addScriptDeclaration($js);		$button = new JObject;		$button->modal = false;		$button->onclick = 'insertReadmore(\''.$name.'\');return false;';		$button->text = JText::_('PLG_READMORE_BUTTON_READMORE');		$button->name = 'arrow-down';		// TODO: The button writer needs to take into account the javascript directive		//$button->link', 'javascript:void(0)');		$button->link = '#';		return $button;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerBanners extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_BANNERS_BANNERS';	/**	 * Constructor.	 *	 * @param   array An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('sticky_unpublish',	'sticky_publish');	}	/**	 * Proxy for getModel.	 * @since   1.6	 */	public function getModel($name = 'Banner', $prefix = 'BannersModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * @since   1.6	 */	public function sticky_publish()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('sticky_publish' => 1, 'sticky_unpublish' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_BANNERS_NO_BANNERS_SELECTED'));		}		else		{			// Get the model.			$model	= $this->getModel();			// Change the state of the records.			if (!$model->stick($ids, $value))			{				JError::raiseWarning(500, $model->getError());			} else {				if ($value == 1)				{					$ntext = 'COM_BANNERS_N_BANNERS_STUCK';				} else {					$ntext = 'COM_BANNERS_N_BANNERS_UNSTUCK';				}				$this->setMessage(JText::plural($ntext, count($ids)));			}		}		$this->setRedirect('index.php?option=com_banners&view=banners');	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Script file of Joomla CMS * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6.4 */class JoomlaInstallerScript{	/**	 * Method to update Joomla!	 *	 * @param   JInstallerFile    $installer    The class calling this method	 *	 * @return void	 */	public function update($installer)	{		$this->deleteUnexistingFiles();		$this->updateManifestCaches();		$this->updateDatabase();	}	protected function updateDatabase()	{		$db = JFactory::getDbo();		if (substr($db->name, 0, 5) == 'mysql')		{			$query = 'SHOW ENGINES';			$db->setQuery($query);			$results = $db->loadObjectList();			if ($db->getErrorNum())			{				echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';				return;			}			foreach ($results as $result)			{				if ($result->Support == 'DEFAULT')				{					$query = 'ALTER TABLE #__update_sites_extensions ENGINE = ' . $result->Engine;					$db->setQuery($query);					$db->execute();					if ($db->getErrorNum())					{						echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';						return;					}					break;				}			}		}	}	protected function updateManifestCaches()	{		$extensions = array();		// Components		//`type`, `element`, `folder`, `client_id`		$extensions[] = array('component', 'com_mailto', '', 0);		$extensions[] = array('component', 'com_wrapper', '', 0);		$extensions[] = array('component', 'com_admin', '', 1);		$extensions[] = array('component', 'com_banners', '', 1);		$extensions[] = array('component', 'com_cache', '', 1);		$extensions[] = array('component', 'com_categories', '', 1);		$extensions[] = array('component', 'com_checkin', '', 1);		$extensions[] = array('component', 'com_contact', '', 1);		$extensions[] = array('component', 'com_cpanel', '', 1);		$extensions[] = array('component', 'com_installer', '', 1);		$extensions[] = array('component', 'com_languages', '', 1);		$extensions[] = array('component', 'com_login', '', 1);		$extensions[] = array('component', 'com_media', '', 1);		$extensions[] = array('component', 'com_menus', '', 1);		$extensions[] = array('component', 'com_messages', '', 1);		$extensions[] = array('component', 'com_modules', '', 1);		$extensions[] = array('component', 'com_newsfeeds', '', 1);		$extensions[] = array('component', 'com_plugins', '', 1);		$extensions[] = array('component', 'com_search', '', 1);		$extensions[] = array('component', 'com_templates', '', 1);		$extensions[] = array('component', 'com_weblinks', '', 1);		$extensions[] = array('component', 'com_content', '', 1);		$extensions[] = array('component', 'com_config', '', 1);		$extensions[] = array('component', 'com_redirect', '', 1);		$extensions[] = array('component', 'com_users', '', 1);		$extensions[] = array('component', 'com_tags', '', 1);		// Libraries		$extensions[] = array('library', 'phpmailer', '', 0);		$extensions[] = array('library', 'simplepie', '', 0);		$extensions[] = array('library', 'phputf8', '', 0);		$extensions[] = array('library', 'joomla', '', 0);		// Modules site		// Site		$extensions[] = array('module', 'mod_articles_archive', '', 0);		$extensions[] = array('module', 'mod_articles_latest', '', 0);		$extensions[] = array('module', 'mod_articles_popular', '', 0);		$extensions[] = array('module', 'mod_banners', '', 0);		$extensions[] = array('module', 'mod_breadcrumbs', '', 0);		$extensions[] = array('module', 'mod_custom', '', 0);		$extensions[] = array('module', 'mod_feed', '', 0);		$extensions[] = array('module', 'mod_footer', '', 0);		$extensions[] = array('module', 'mod_login', '', 0);		$extensions[] = array('module', 'mod_menu', '', 0);		$extensions[] = array('module', 'mod_articles_news', '', 0);		$extensions[] = array('module', 'mod_random_image', '', 0);		$extensions[] = array('module', 'mod_related_items', '', 0);		$extensions[] = array('module', 'mod_search', '', 0);		$extensions[] = array('module', 'mod_stats', '', 0);		$extensions[] = array('module', 'mod_syndicate', '', 0);		$extensions[] = array('module', 'mod_users_latest', '', 0);		$extensions[] = array('module', 'mod_weblinks', '', 0);		$extensions[] = array('module', 'mod_whosonline', '', 0);		$extensions[] = array('module', 'mod_wrapper', '', 0);		$extensions[] = array('module', 'mod_articles_category', '', 0);		$extensions[] = array('module', 'mod_articles_categories', '', 0);		$extensions[] = array('module', 'mod_languages', '', 0);		$extensions[] = array('module', 'mod_tags_popular', '', 0);		$extensions[] = array('module', 'mod_tags_similar', '', 0);		// Administrator		$extensions[] = array('module', 'mod_custom', '', 1);		$extensions[] = array('module', 'mod_feed', '', 1);		$extensions[] = array('module', 'mod_latest', '', 1);		$extensions[] = array('module', 'mod_logged', '', 1);		$extensions[] = array('module', 'mod_login', '', 1);		$extensions[] = array('module', 'mod_menu', '', 1);		$extensions[] = array('module', 'mod_popular', '', 1);		$extensions[] = array('module', 'mod_quickicon', '', 1);		$extensions[] = array('module', 'mod_stats_admin', '', 1);		$extensions[] = array('module', 'mod_status', '', 1);		$extensions[] = array('module', 'mod_submenu', '', 1);		$extensions[] = array('module', 'mod_title', '', 1);		$extensions[] = array('module', 'mod_toolbar', '', 1);		$extensions[] = array('module', 'mod_multilangstatus', '', 1);		// Plug-ins		$extensions[] = array('plugin', 'gmail', 'authentication', 0);		$extensions[] = array('plugin', 'joomla', 'authentication', 0);		$extensions[] = array('plugin', 'ldap', 'authentication', 0);		$extensions[] = array('plugin', 'emailcloak', 'content', 0);		$extensions[] = array('plugin', 'loadmodule', 'content', 0);		$extensions[] = array('plugin', 'pagebreak', 'content', 0);		$extensions[] = array('plugin', 'pagenavigation', 'content', 0);		$extensions[] = array('plugin', 'vote', 'content', 0);		$extensions[] = array('plugin', 'codemirror', 'editors', 0);		$extensions[] = array('plugin', 'none', 'editors', 0);		$extensions[] = array('plugin', 'tinymce', 'editors', 0);		$extensions[] = array('plugin', 'article', 'editors-xtd', 0);		$extensions[] = array('plugin', 'image', 'editors-xtd', 0);		$extensions[] = array('plugin', 'pagebreak', 'editors-xtd', 0);		$extensions[] = array('plugin', 'readmore', 'editors-xtd', 0);		$extensions[] = array('plugin', 'categories', 'search', 0);		$extensions[] = array('plugin', 'contacts', 'search', 0);		$extensions[] = array('plugin', 'content', 'search', 0);		$extensions[] = array('plugin', 'newsfeeds', 'search', 0);		$extensions[] = array('plugin', 'weblinks', 'search', 0);		$extensions[] = array('plugin', 'languagefilter', 'system', 0);		$extensions[] = array('plugin', 'p3p', 'system', 0);		$extensions[] = array('plugin', 'cache', 'system', 0);		$extensions[] = array('plugin', 'debug', 'system', 0);		$extensions[] = array('plugin', 'log', 'system', 0);		$extensions[] = array('plugin', 'redirect', 'system', 0);		$extensions[] = array('plugin', 'remember', 'system', 0);		$extensions[] = array('plugin', 'sef', 'system', 0);		$extensions[] = array('plugin', 'logout', 'system', 0);		$extensions[] = array('plugin', 'contactcreator', 'user', 0);		$extensions[] = array('plugin', 'joomla', 'user', 0);		$extensions[] = array('plugin', 'profile', 'user', 0);		$extensions[] = array('plugin', 'joomla', 'extension', 0);		$extensions[] = array('plugin', 'joomla', 'content', 0);		$extensions[] = array('plugin', 'languagecode', 'system', 0);		$extensions[] = array('plugin', 'joomlaupdate', 'quickicon', 0);		$extensions[] = array('plugin', 'extensionupdate', 'quickicon', 0);		$extensions[] = array('plugin', 'recaptcha', 'captcha', 0);		$extensions[] = array('plugin', 'categories', 'finder', 0);		$extensions[] = array('plugin', 'contacts', 'finder', 0);		$extensions[] = array('plugin', 'content', 'finder', 0);		$extensions[] = array('plugin', 'newsfeeds', 'finder', 0);		$extensions[] = array('plugin', 'weblinks', 'finder', 0);		$extensions[] = array('plugin', 'tags', 'finder', 0);		// Templates		$extensions[] = array('template', 'beez3', '', 0);		$extensions[] = array('template', 'hathor', '', 1);		$extensions[] = array('template', 'protostar', '', 0);		$extensions[] = array('template', 'isis', '', 1);		// Languages		$extensions[] = array('language', 'en-GB', '', 0);		$extensions[] = array('language', 'en-GB', '', 1);		// Files		$extensions[] = array('file', 'joomla', '', 0);		// Packages		// None in core at this time		// Attempt to refresh manifest caches		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('*')			->from('#__extensions');		foreach ($extensions as $extension)		{			$query->where('type=' . $db->quote($extension[0]) . ' AND element=' . $db->quote($extension[1]) . ' AND folder=' . $db->quote($extension[2]) . ' AND client_id=' . $extension[3], 'OR');		}		$db->setQuery($query);		$extensions = $db->loadObjectList();		$installer = new JInstaller;		// Check for a database error.		if ($db->getErrorNum())		{			echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';			return;		}		foreach ($extensions as $extension)		{			if (!$installer->refreshManifestCache($extension->extension_id))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_MANIFEST', $extension->type, $extension->element, $extension->name, $extension->client_id) . '<br />';			}		}	}	public function deleteUnexistingFiles()	{		$files = array(			'/libraries/cms/cmsloader.php',			'/libraries/joomla/form/fields/templatestyle.php',			'/libraries/joomla/form/fields/user.php',			'/libraries/joomla/form/fields/menu.php',			'/libraries/joomla/form/fields/helpsite.php',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/2.5.2-2012-03-05.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/2.5.3-2012-03-13.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/index.html',			'/administrator/components/com_users/controllers/config.php',			'/administrator/language/en-GB/en-GB.plg_system_finder.ini',			'/administrator/language/en-GB/en-GB.plg_system_finder.sys.ini',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advhr/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advimage/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advlink/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advlist/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autolink/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autoresize/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autosave/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/bbcode/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/contextmenu/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/directionality/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/emotions/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/fullpage/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/fullscreen/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/iespell/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/inlinepopups/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/insertdatetime/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/layer/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/lists/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/media/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/nonbreaking/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/noneditable/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/pagebreak/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/paste/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/preview/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/print/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/save/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/searchreplace/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/spellchecker/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/style/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/tabfocus/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/table/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/template/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/visualchars/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/wordcount/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/xhtmlxtras/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/themes/advanced/editor_template_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/themes/simple/editor_template_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/tiny_mce_src.js',			'/media/com_finder/images/calendar.png',			'/media/com_finder/images/mime/index.html',			'/media/com_finder/images/mime/pdf.png',			'/components/com_media/controller.php',			'/components/com_media/helpers/index.html',			'/components/com_media/helpers/media.php',			// Joomla 3.0			'/administrator/components/com_admin/sql/updates/mysql/1.7.0-2011-06-06-2.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0-2011-06-06.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-2.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-3.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-4.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-17.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-20.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-10-15.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-10-19.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-11-10.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-11-19.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-11-23.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-12-12.sql',			'/administrator/components/com_admin/views/sysinfo/tmpl/default_navigation.php',			'/administrator/components/com_categories/config.xml',			'/administrator/components/com_categories/helpers/categoriesadministrator.php',			'/administrator/components/com_contact/elements/contact.php',			'/administrator/components/com_contact/elements/index.html',			'/administrator/components/com_content/elements/article.php',			'/administrator/components/com_content/elements/author.php',			'/administrator/components/com_content/elements/index.html',			'/administrator/components/com_installer/models/fields/client.php',			'/administrator/components/com_installer/models/fields/group.php',			'/administrator/components/com_installer/models/fields/index.html',			'/administrator/components/com_installer/models/fields/search.php',			'/administrator/components/com_installer/models/fields/type.php',			'/administrator/components/com_installer/models/forms/index.html',			'/administrator/components/com_installer/models/forms/manage.xml',			'/administrator/components/com_installer/views/install/tmpl/default_form.php',			'/administrator/components/com_installer/views/manage/tmpl/default_filter.php',			'/administrator/components/com_languages/views/installed/tmpl/default_ftp.php',			'/administrator/components/com_languages/views/installed/tmpl/default_navigation.php',			'/administrator/components/com_modules/models/fields/index.html',			'/administrator/components/com_modules/models/fields/moduleorder.php',			'/administrator/components/com_modules/models/fields/moduleposition.php',			'/administrator/components/com_newsfeeds/elements/index.html',			'/administrator/components/com_newsfeeds/elements/newsfeed.php',			'/administrator/components/com_templates/views/prevuuw/index.html',			'/administrator/components/com_templates/views/prevuuw/tmpl/default.php',			'/administrator/components/com_templates/views/prevuuw/tmpl/index.html',			'/administrator/components/com_templates/views/prevuuw/view.html.php',			'/administrator/includes/menu.php',			'/administrator/includes/router.php',			'/administrator/manifests/packages/pkg_joomla.xml',			'/administrator/modules/mod_submenu/helper.php',			'/administrator/templates/hathor/css/ie6.css',			'/administrator/templates/hathor/html/mod_submenu/index.html',			'/administrator/templates/hathor/html/mod_submenu/default.php',			'/components/com_media/controller.php',			'/components/com_media/helpers/index.html',			'/components/com_media/helpers/media.php',			'/includes/menu.php',			'/includes/pathway.php',			'/includes/router.php',			'/language/en-GB/en-GB.pkg_joomla.sys.ini',			'/libraries/cms/controller/index.html',			'/libraries/cms/controller/legacy.php',			'/libraries/cms/model/index.html',			'/libraries/cms/model/legacy.php',			'/libraries/cms/schema/changeitemmysql.php',			'/libraries/cms/schema/changeitemsqlazure.php',			'/libraries/cms/schema/changeitemsqlsrv.php',			'/libraries/cms/view/index.html',			'/libraries/cms/view/legacy.php',			'/libraries/joomla/application/application.php',			'/libraries/joomla/application/categories.php',			'/libraries/joomla/application/cli/daemon.php',			'/libraries/joomla/application/cli/index.html',			'/libraries/joomla/application/component/controller.php',			'/libraries/joomla/application/component/controlleradmin.php',			'/libraries/joomla/application/component/controllerform.php',			'/libraries/joomla/application/component/helper.php',			'/libraries/joomla/application/component/index.html',			'/libraries/joomla/application/component/model.php',			'/libraries/joomla/application/component/modeladmin.php',			'/libraries/joomla/application/component/modelform.php',			'/libraries/joomla/application/component/modelitem.php',			'/libraries/joomla/application/component/modellist.php',			'/libraries/joomla/application/component/view.php',			'/libraries/joomla/application/helper.php',			'/libraries/joomla/application/input.php',			'/libraries/joomla/application/input/cli.php',			'/libraries/joomla/application/input/cookie.php',			'/libraries/joomla/application/input/files.php',			'/libraries/joomla/application/input/index.html',			'/libraries/joomla/application/menu.php',			'/libraries/joomla/application/module/helper.php',			'/libraries/joomla/application/module/index.html',			'/libraries/joomla/application/pathway.php',			'/libraries/joomla/application/web/webclient.php',			'/libraries/joomla/base/node.php',			'/libraries/joomla/base/object.php',			'/libraries/joomla/base/observable.php',			'/libraries/joomla/base/observer.php',			'/libraries/joomla/base/tree.php',			'/libraries/joomla/cache/storage/eaccelerator.php',			'/libraries/joomla/cache/storage/helpers/helper.php',			'/libraries/joomla/cache/storage/helpers/index.html',			'/libraries/joomla/database/database/index.html',			'/libraries/joomla/database/database/mysql.php',			'/libraries/joomla/database/database/mysqlexporter.php',			'/libraries/joomla/database/database/mysqli.php',			'/libraries/joomla/database/database/mysqliexporter.php',			'/libraries/joomla/database/database/mysqliimporter.php',			'/libraries/joomla/database/database/mysqlimporter.php',			'/libraries/joomla/database/database/mysqliquery.php',			'/libraries/joomla/database/database/mysqlquery.php',			'/libraries/joomla/database/database/sqlazure.php',			'/libraries/joomla/database/database/sqlazurequery.php',			'/libraries/joomla/database/database/sqlsrv.php',			'/libraries/joomla/database/database/sqlsrvquery.php',			'/libraries/joomla/database/exception.php',			'/libraries/joomla/database/table.php',			'/libraries/joomla/database/table/asset.php',			'/libraries/joomla/database/table/category.php',			'/libraries/joomla/database/table/content.php',			'/libraries/joomla/database/table/extension.php',			'/libraries/joomla/database/table/index.html',			'/libraries/joomla/database/table/language.php',			'/libraries/joomla/database/table/menu.php',			'/libraries/joomla/database/table/menutype.php',			'/libraries/joomla/database/table/module.php',			'/libraries/joomla/database/table/session.php',			'/libraries/joomla/database/table/update.php',			'/libraries/joomla/database/table/user.php',			'/libraries/joomla/database/table/usergroup.php',			'/libraries/joomla/database/table/viewlevel.php',			'/libraries/joomla/database/tablenested.php',			'/libraries/joomla/environment/request.php',			'/libraries/joomla/environment/uri.php',			'/libraries/joomla/error/error.php',			'/libraries/joomla/error/exception.php',			'/libraries/joomla/error/index.html',			'/libraries/joomla/error/log.php',			'/libraries/joomla/error/profiler.php',			'/libraries/joomla/filesystem/archive.php',			'/libraries/joomla/filesystem/archive/bzip2.php',			'/libraries/joomla/filesystem/archive/gzip.php',			'/libraries/joomla/filesystem/archive/index.html',			'/libraries/joomla/filesystem/archive/tar.php',			'/libraries/joomla/filesystem/archive/zip.php',			'/libraries/joomla/form/fields/category.php',			'/libraries/joomla/form/fields/componentlayout.php',			'/libraries/joomla/form/fields/contentlanguage.php',			'/libraries/joomla/form/fields/editor.php',			'/libraries/joomla/form/fields/editors.php',			'/libraries/joomla/form/fields/media.php',			'/libraries/joomla/form/fields/menuitem.php',			'/libraries/joomla/form/fields/modulelayout.php',			'/libraries/joomla/html/editor.php',			'/libraries/joomla/html/html/access.php',			'/libraries/joomla/html/html/batch.php',			'/libraries/joomla/html/html/behavior.php',			'/libraries/joomla/html/html/category.php',			'/libraries/joomla/html/html/content.php',			'/libraries/joomla/html/html/contentlanguage.php',			'/libraries/joomla/html/html/date.php',			'/libraries/joomla/html/html/email.php',			'/libraries/joomla/html/html/form.php',			'/libraries/joomla/html/html/grid.php',			'/libraries/joomla/html/html/image.php',			'/libraries/joomla/html/html/index.html',			'/libraries/joomla/html/html/jgrid.php',			'/libraries/joomla/html/html/list.php',			'/libraries/joomla/html/html/menu.php',			'/libraries/joomla/html/html/number.php',			'/libraries/joomla/html/html/rules.php',			'/libraries/joomla/html/html/select.php',			'/libraries/joomla/html/html/sliders.php',			'/libraries/joomla/html/html/string.php',			'/libraries/joomla/html/html/tabs.php',			'/libraries/joomla/html/html/tel.php',			'/libraries/joomla/html/html/user.php',			'/libraries/joomla/html/pagination.php',			'/libraries/joomla/html/pane.php',			'/libraries/joomla/html/parameter.php',			'/libraries/joomla/html/parameter/element.php',			'/libraries/joomla/html/parameter/element/calendar.php',			'/libraries/joomla/html/parameter/element/category.php',			'/libraries/joomla/html/parameter/element/componentlayouts.php',			'/libraries/joomla/html/parameter/element/contentlanguages.php',			'/libraries/joomla/html/parameter/element/editors.php',			'/libraries/joomla/html/parameter/element/filelist.php',			'/libraries/joomla/html/parameter/element/folderlist.php',			'/libraries/joomla/html/parameter/element/helpsites.php',			'/libraries/joomla/html/parameter/element/hidden.php',			'/libraries/joomla/html/parameter/element/imagelist.php',			'/libraries/joomla/html/parameter/element/index.html',			'/libraries/joomla/html/parameter/element/languages.php',			'/libraries/joomla/html/parameter/element/list.php',			'/libraries/joomla/html/parameter/element/menu.php',			'/libraries/joomla/html/parameter/element/menuitem.php',			'/libraries/joomla/html/parameter/element/modulelayouts.php',			'/libraries/joomla/html/parameter/element/password.php',			'/libraries/joomla/html/parameter/element/radio.php',			'/libraries/joomla/html/parameter/element/spacer.php',			'/libraries/joomla/html/parameter/element/sql.php',			'/libraries/joomla/html/parameter/element/templatestyle.php',			'/libraries/joomla/html/parameter/element/text.php',			'/libraries/joomla/html/parameter/element/textarea.php',			'/libraries/joomla/html/parameter/element/timezones.php',			'/libraries/joomla/html/parameter/element/usergroup.php',			'/libraries/joomla/html/parameter/index.html',			'/libraries/joomla/html/toolbar.php',			'/libraries/joomla/html/toolbar/button.php',			'/libraries/joomla/html/toolbar/button/confirm.php',			'/libraries/joomla/html/toolbar/button/custom.php',			'/libraries/joomla/html/toolbar/button/help.php',			'/libraries/joomla/html/toolbar/button/index.html',			'/libraries/joomla/html/toolbar/button/link.php',			'/libraries/joomla/html/toolbar/button/popup.php',			'/libraries/joomla/html/toolbar/button/separator.php',			'/libraries/joomla/html/toolbar/button/standard.php',			'/libraries/joomla/html/toolbar/index.html',			'/libraries/joomla/image/filters/brightness.php',			'/libraries/joomla/image/filters/contrast.php',			'/libraries/joomla/image/filters/edgedetect.php',			'/libraries/joomla/image/filters/emboss.php',			'/libraries/joomla/image/filters/grayscale.php',			'/libraries/joomla/image/filters/index.html',			'/libraries/joomla/image/filters/negate.php',			'/libraries/joomla/image/filters/sketchy.php',			'/libraries/joomla/image/filters/smooth.php',			'/libraries/joomla/language/help.php',			'/libraries/joomla/language/latin_transliterate.php',			'/libraries/joomla/log/logexception.php',			'/libraries/joomla/log/loggers/database.php',			'/libraries/joomla/log/loggers/echo.php',			'/libraries/joomla/log/loggers/formattedtext.php',			'/libraries/joomla/log/loggers/index.html',			'/libraries/joomla/log/loggers/messagequeue.php',			'/libraries/joomla/log/loggers/syslog.php',			'/libraries/joomla/log/loggers/w3c.php',			'/libraries/joomla/methods.php',			'/libraries/joomla/session/storage/eaccelerator.php',			'/libraries/joomla/string/stringnormalize.php',			'/libraries/joomla/utilities/date.php',			'/libraries/joomla/utilities/simplecrypt.php',			'/libraries/joomla/utilities/simplexml.php',			'/libraries/joomla/utilities/string.php',			'/libraries/joomla/utilities/xmlelement.php',			'/media/plg_quickicon_extensionupdate/extensionupdatecheck.js',			'/media/plg_quickicon_joomlaupdate/jupdatecheck.js',			// Joomla! 3.1			'/libraries/joomla/form/rules/boolean.php',			'/libraries/joomla/form/rules/color.php',			'/libraries/joomla/form/rules/email.php',			'/libraries/joomla/form/rules/equals.php',			'/libraries/joomla/form/rules/index.html',			'/libraries/joomla/form/rules/options.php',			'/libraries/joomla/form/rules/rules.php',			'/libraries/joomla/form/rules/tel.php',			'/libraries/joomla/form/rules/url.php',			'/libraries/joomla/form/rules/username.php',			'/libraries/joomla/installer/adapters/component.php',			'/libraries/joomla/installer/adapters/file.php',			'/libraries/joomla/installer/adapters/index.html',			'/libraries/joomla/installer/adapters/language.php',			'/libraries/joomla/installer/adapters/library.php',			'/libraries/joomla/installer/adapters/module.php',			'/libraries/joomla/installer/adapters/package.php',			'/libraries/joomla/installer/adapters/plugin.php',			'/libraries/joomla/installer/adapters/template.php',			'/libraries/joomla/installer/extension.php',			'/libraries/joomla/installer/helper.php',			'/libraries/joomla/installer/index.html',			'/libraries/joomla/installer/librarymanifest.php',			'/libraries/joomla/installer/packagemanifest.php',			'/media/system/css/mooRainbow.css',			'/media/system/js/mooRainbow-uncompressed.js',			'/media/system/js/mooRainbow.js',			'/media/system/js/swf-uncompressed.js',			'/media/system/js/swf.js',			'/media/system/js/uploader-uncompressed.js',			'/media/system/js/uploader.js',			'/media/system/swf/index.html',			'/media/system/swf/uploader.swf',		);		// TODO There is an issue while deleting folders using the ftp mode		$folders = array(			'/administrator/components/com_admin/sql/updates/sqlsrv',			'/media/com_finder/images/mime',			'/media/com_finder/images',			'/components/com_media/helpers',			// Joomla 3.0			'/administrator/components/com_contact/elements',			'/administrator/components/com_content/elements',			'/administrator/components/com_installer/models/fields',			'/administrator/components/com_installer/models/forms',			'/administrator/components/com_modules/models/fields',			'/administrator/components/com_newsfeeds/elements',			'/administrator/components/com_templates/views/prevuuw/tmpl',			'/administrator/components/com_templates/views/prevuuw',			'/libraries/cms/controller',			'/libraries/cms/model',			'/libraries/cms/view',			'/libraries/joomla/application/cli',			'/libraries/joomla/application/component',			'/libraries/joomla/application/input',			'/libraries/joomla/application/module',			'/libraries/joomla/cache/storage/helpers',			'/libraries/joomla/database/table',			'/libraries/joomla/database/database',			'/libraries/joomla/error',			'/libraries/joomla/filesystem/archive',			'/libraries/joomla/html/html',			'/libraries/joomla/html/toolbar',			'/libraries/joomla/html/toolbar/button',			'/libraries/joomla/html/parameter',			'/libraries/joomla/html/parameter/element',			'/libraries/joomla/image/filters',			'/libraries/joomla/log/loggers',			// Joomla! 3.1			'/libraries/joomla/form/rules',			'/libraries/joomla/installer/adapters',			'/libraries/joomla/installer',			'/media/system/swf/',		);		jimport('joomla.filesystem.file');		foreach ($files as $file)		{			if (JFile::exists(JPATH_ROOT . $file) && !JFile::delete(JPATH_ROOT . $file))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_FILE_FOLDER', $file) . '<br />';			}		}		jimport('joomla.filesystem.folder');		foreach ($folders as $folder)		{			if (JFolder::exists(JPATH_ROOT . $folder) && !JFolder::delete(JPATH_ROOT . $folder))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_FILE_FOLDER', $folder) . '<br />';			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();// This checks if the config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params['show_publishing_options']);$input = JFactory::getApplication()->input;if (!$editoroptions):	$params['show_publishing_options'] = '1';	$params['show_article_options'] = '1';	$params['show_urls_images_backend'] = '0';	$params['show_urls_images_frontend'] = '0';endif;// Check if the article uses configuration settings besides global. If so, use them.if (!empty($this->item->attribs['show_publishing_options'])):		$params['show_publishing_options'] = $this->item->attribs['show_publishing_options'];endif;if (!empty($this->item->attribs['show_article_options'])):		$params['show_article_options'] = $this->item->attribs['show_article_options'];endif;if (!empty($this->item->attribs['show_urls_images_backend'])):		$params['show_urls_images_backend'] = $this->item->attribs['show_urls_images_backend'];endif;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><div class="article-edit"><form action="<?php echo JRoute::_('index.php?option=com_content&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo empty($this->item->id) ? JText::_('COM_CONTENT_NEW_ARTICLE') : JText::sprintf('COM_CONTENT_EDIT_ARTICLE', $this->item->id); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<li><?php echo $this->form->getLabel('alias'); ?>				<?php echo $this->form->getInput('alias'); ?></li>				<li><?php echo $this->form->getLabel('catid'); ?>				<?php echo $this->form->getInput('catid'); ?></li>				<li><?php echo $this->form->getLabel('state'); ?>				<?php echo $this->form->getInput('state'); ?></li>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<?php if ($this->canDo->get('core.admin')) : ?>					<li><span class="faux-label"><?php echo JText::_('JGLOBAL_ACTION_PERMISSIONS_LABEL'); ?></span>						<button type="button" onclick="document.location.href='#access-rules';">							<?php echo JText::_('JGLOBAL_PERMISSIONS_ANCHOR'); ?>						</button>					</li>				<?php endif; ?>				<li><?php echo $this->form->getLabel('featured'); ?>				<?php echo $this->form->getInput('featured'); ?></li>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<!-- Tag field -->				<?php foreach ($this->get('form')->getFieldset('jmetadata') as $field) : ?>					<?php if ($field->name == 'jform[metadata][tags][]') :?>						<li>							<?php echo $field->label; ?>							<div class="is-tagbox">								<?php echo $field->input; ?>							</div>						</li>					<?php endif; ?>				<?php endforeach; ?>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>			</ul>			<div class="clr"></div>			<?php echo $this->form->getLabel('articletext'); ?>			<div class="clr"></div>			<?php echo $this->form->getInput('articletext'); ?>			<div class="clr"></div>		</fieldset>	</div>	<div class="col options-section">		<?php echo JHtml::_('sliders.start', 'content-sliders-' . $this->item->id, array('useCookie' => 1)); ?>		<?php // Do not show the publishing options if the edit form is configured not to. ?>		<?php  if ($params['show_publishing_options'] || ( $params['show_publishing_options'] = '' && !empty($editoroptions)) ) : ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_FIELDSET_PUBLISHING'), 'publishing-details'); ?>			<fieldset class="panelform">				<ul class="adminformlist">					<li><?php echo $this->form->getLabel('created_by'); ?>					<?php echo $this->form->getInput('created_by'); ?></li>					<li><?php echo $this->form->getLabel('created_by_alias'); ?>					<?php echo $this->form->getInput('created_by_alias'); ?></li>					<li><?php echo $this->form->getLabel('created'); ?>					<?php echo $this->form->getInput('created'); ?></li>						<li><?php echo $this->form->getLabel('publish_up'); ?>						<?php echo $this->form->getInput('publish_up'); ?></li>					<li><?php echo $this->form->getLabel('publish_down'); ?>					<?php echo $this->form->getInput('publish_down'); ?></li>					<?php if ($this->item->modified_by) : ?>						<li><?php echo $this->form->getLabel('modified_by'); ?>						<?php echo $this->form->getInput('modified_by'); ?></li>						<li><?php echo $this->form->getLabel('modified'); ?>						<?php echo $this->form->getInput('modified'); ?></li>					<?php endif; ?>					<?php if ($this->item->version) : ?>						<li><?php echo $this->form->getLabel('version'); ?>						<?php echo $this->form->getInput('version'); ?></li>					<?php endif; ?>					<?php if ($this->item->hits) : ?>						<li><?php echo $this->form->getLabel('hits'); ?>						<?php echo $this->form->getInput('hits'); ?></li>					<?php endif; ?>				</ul>			</fieldset>		<?php  endif; ?>		<?php  $fieldSets = $this->form->getFieldsets('attribs'); ?>			<?php foreach ($fieldSets as $name => $fieldSet) : ?>				<?php					// If the parameter says to show the article options or if the parameters have never been set, we will					// show the article options.					if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))):					// Go through all the fieldsets except the configuration and basic-limited, which are					// handled separately below.					if ($name != 'editorConfig' && $name != 'basic-limited') : ?>						<?php echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-options'); ?>						<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>							<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>						<?php endif; ?>						<fieldset class="panelform">							<ul class="adminformlist">							<?php foreach ($this->form->getFieldset($name) as $field) : ?>								<li><?php echo $field->label; ?>								<?php echo $field->input; ?></li>							<?php endforeach; ?>							</ul>						</fieldset>					<?php endif ?>					<?php // If we are not showing the options we need to use the hidden fields so the values are not lost.  ?>				<?php  elseif ($name == 'basic-limited') : ?>						<?php foreach ($this->form->getFieldset('basic-limited') as $field) : ?>							<?php  echo $field->input; ?>						<?php endforeach; ?>				<?php endif; ?>			<?php endforeach; ?>			<?php // Not the best place, but here for continuity with 1.5/1/6/1.7 ?>				<fieldset class="panelform">				</fieldset>				<?php					// We need to make a separate space for the configuration					// so that those fields always show to those wih permissions					if ( $this->canDo->get('core.admin')   ):  ?>					<?php  echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_SLIDER_EDITOR_CONFIG'), 'configure-sliders'); ?>						<fieldset  class="panelform" >							<ul class="adminformlist">							<?php foreach ($this->form->getFieldset('editorConfig') as $field) : ?>								<li><?php echo $field->label; ?>								<?php echo $field->input; ?></li>							<?php endforeach; ?>							</ul>						</fieldset>				<?php endif ?>		<?php // The url and images fields only show if the configuration is set to allow them.  ?>		<?php // This is for legacy reasons. ?>		<?php if ($params['show_urls_images_backend']) : ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_FIELDSET_URLS_AND_IMAGES'), 'urls_and_images-options'); ?>				<fieldset class="panelform">				<ul class="adminformlist">					<li>					<?php echo $this->form->getLabel('images'); ?>					<?php echo $this->form->getInput('images'); ?></li>					<?php foreach ($this->form->getGroup('images') as $field) : ?>						<li>							<?php if (!$field->hidden) : ?>								<?php echo $field->label; ?>							<?php endif; ?>							<?php echo $field->input; ?>						</li>					<?php endforeach; ?>						<?php foreach ($this->form->getGroup('urls') as $field) : ?>						<li>							<?php if (!$field->hidden) : ?>								<?php echo $field->label; ?>							<?php endif; ?>							<?php echo $field->input; ?>						</li>					<?php endforeach; ?>				</ul>				</fieldset>		<?php endif; ?>		<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'), 'meta-options'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'); ?></legend>				<?php echo $this->loadTemplate('metadata'); ?>			</fieldset>		<?php			$fieldSets = $this->form->getFieldsets('associations');			foreach ($fieldSets as $name => $fieldSet) :				$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CONTENT_'.$name.'_FIELDSET_LABEL';				echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');					if (isset($fieldSet->description) && trim($fieldSet->description)) :						echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';					endif;					?>				<div class="clr"></div>				<fieldset class="panelform">					<ul class="adminformlist">						<?php foreach ($this->form->getFieldset($name) as $field) : ?>							<li><?php echo $field->label; ?>							<?php echo $field->input; ?></li>						<?php endforeach; ?>					</ul>				</fieldset>			<?php endforeach;?>		<?php echo JHtml::_('sliders.end'); ?>	</div>	<div class="clr"></div>	<?php if ($this->canDo->get('core.admin')) : ?>		<div  class="col rules-section">			<?php echo JHtml::_('sliders.start', 'permissions-sliders-' . $this->item->id, array('useCookie' => 1)); ?>				<?php echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_FIELDSET_RULES'), 'access-rules'); ?>				<fieldset class="panelform">					<legend class="element-invisible"><?php echo JText::_('COM_CONTENT_FIELDSET_RULES'); ?></legend>					<?php echo $this->form->getLabel('rules'); ?>					<?php echo $this->form->getInput('rules'); ?>				</fieldset>			<?php echo JHtml::_('sliders.end'); ?>		</div>	<?php endif; ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="return" value="<?php echo $input->getCmd('return');?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form><div class="clr"></div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_CACHE_SETTINGS'); ?></legend>			<?php			foreach ($this->form->getFieldset('cache') as $field):			?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php			endforeach;			?>		<?php if (isset($this->data['cache_handler']) &&				$this->data['cache_handler'] == 'memcache' ||				$this->data['session_handler'] == 'memcache' ||				$this->data['cache_handler'] == 'memcached' ||				$this->data['session_handler'] == 'memcached'				) : ?>					<?php			foreach ($this->form->getFieldset('memcache') as $mfield):			?>				<div class="control-group">					<div class="control-label"><?php echo $mfield->label; ?></div>					<div class="controls"><?php echo $mfield->input; ?></div>				</div>			<?php			endforeach;			?>		<?php endif; ?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelTracks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'name', 'b.name',				'cl.name', 'client_name',				'cat.title', 'category_title',				'track_type', 'a.track_type',				'count', 'a.count',				'track_date', 'a.track_date',			);		}		parent::__construct($config);	}	/**	 * @since   1.6	 */	protected $basename;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$type = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type');		$this->setState('filter.type', $type);		$begin = $this->getUserStateFromRequest($this->context . '.filter.begin', 'filter_begin', '', 'string');		$this->setState('filter.begin', $begin);		$end = $this->getUserStateFromRequest($this->context . '.filter.end', 'filter_end', '', 'string');		$this->setState('filter.end', $end);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('b.name', 'asc');	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			'a.track_date as track_date,'				. 'a.track_type as track_type,'				. $db->quoteName('a.count') . ' as ' . $db->quoteName('count')		);		$query->from($db->quoteName('#__banner_tracks') . ' AS a');		// Join with the banners		$query->join('LEFT', $db->quoteName('#__banners') . ' as b ON b.id=a.banner_id')			->select('b.name as name');		// Join with the client		$query->join('LEFT', $db->quoteName('#__banner_clients') . ' as cl ON cl.id=b.cid')			->select('cl.name as client_name');		// Join with the category		$query->join('LEFT', $db->quoteName('#__categories') . ' as cat ON cat.id=b.catid')			->select('cat.title as category_title');		// Filter by type		$type = $this->getState('filter.type');		if (!empty($type))		{			$query->where('a.track_type = ' . (int) $type);		}		// Filter by client		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('b.cid = ' . (int) $clientId);		}		// Filter by category		$catedoryId = $this->getState('filter.category_id');		if (is_numeric($catedoryId))		{			$query->where('b.catid = ' . (int) $catedoryId);		}		// Filter by begin date		$begin = $this->getState('filter.begin');		if (!empty($begin))		{			$query->where('a.track_date >= ' . $db->quote($begin));		}		// Filter by end date		$end = $this->getState('filter.end');		if (!empty($end))		{			$query->where('a.track_date <= ' . $db->quote($end));		}		// Add the list ordering clause.		$orderCol = $this->getState('list.ordering', 'name');		$query->order($db->escape($orderCol) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to delete rows.	 *	 * @param   array  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 */	public function delete()	{		$user = JFactory::getUser();		$categoryId = $this->getState('category_id');		// Access checks.		if ($categoryId)		{			$allow = $user->authorise('core.delete', 'com_banners.category.' . (int) $categoryId);		}		else		{			$allow = $user->authorise('core.delete', 'com_banners');		}		if ($allow)		{			// Delete tracks from this banner			$db = $this->getDbo();			$query = $db->getQuery(true)				->delete($db->quoteName('#__banner_tracks'));			// Filter by type			$type = $this->getState('filter.type');			if (!empty($type))			{				$query->where('track_type = ' . (int) $type);			}			// Filter by begin date			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$query->where('track_date >= ' . $db->quote($begin));			}			// Filter by end date			$end = $this->getState('filter.end');			if (!empty($end))			{				$query->where('track_date <= ' . $db->quote($end));			}			$where = '1';			// Filter by client			$clientId = $this->getState('filter.client_id');			if (!empty($clientId))			{				$where .= ' AND cid = ' . (int) $clientId;			}			// Filter by category			if (!empty($categoryId))			{				$where .= ' AND catid = ' . (int) $categoryId;			}			$query->where('banner_id IN (SELECT id FROM ' . $db->quoteName('#__banners') . ' WHERE ' . $where . ')');			$db->setQuery($query);			$this->setError((string) $query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));		}		return true;	}	/**	 * Get file name	 *	 * @return  string    The file name	 * @since   1.6	 */	public function getBaseName()	{		if (!isset($this->basename))		{			$app = JFactory::getApplication();			$basename = $this->getState('basename');			$basename = str_replace('__SITE__', $app->getCfg('sitename'), $basename);			$categoryId = $this->getState('filter.category_id');			if (is_numeric($categoryId))			{				if ($categoryId > 0)				{					$basename = str_replace('__CATID__', $categoryId, $basename);				}				else				{					$basename = str_replace('__CATID__', '', $basename);				}				$categoryName = $this->getCategoryName();				$basename = str_replace('__CATNAME__', $categoryName, $basename);			}			else			{				$basename = str_replace('__CATID__', '', $basename);				$basename = str_replace('__CATNAME__', '', $basename);			}			$clientId = $this->getState('filter.client_id');			if (is_numeric($clientId))			{				if ($clientId > 0)				{					$basename = str_replace('__CLIENTID__', $clientId, $basename);				}				else				{					$basename = str_replace('__CLIENTID__', '', $basename);				}				$clientName = $this->getClientName();				$basename = str_replace('__CLIENTNAME__', $clientName, $basename);			}			else			{				$basename = str_replace('__CLIENTID__', '', $basename);				$basename = str_replace('__CLIENTNAME__', '', $basename);			}			$type = $this->getState('filter.type');			if ($type > 0)			{				$basename = str_replace('__TYPE__', $type, $basename);				$typeName = JText::_('COM_BANNERS_TYPE' . $type);				$basename = str_replace('__TYPENAME__', $typeName, $basename);			}			else			{				$basename = str_replace('__TYPE__', '', $basename);				$basename = str_replace('__TYPENAME__', '', $basename);			}			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$basename = str_replace('__BEGIN__', $begin, $basename);			}			else			{				$basename = str_replace('__BEGIN__', '', $basename);			}			$end = $this->getState('filter.end');			if (!empty($end))			{				$basename = str_replace('__END__', $end, $basename);			}			else			{				$basename = str_replace('__END__', '', $basename);			}			$this->basename = $basename;		}		return $this->basename;	}	/**	 * Get the category name.	 *	 * @return  string    The category name	 * @since   1.6	 */	protected function getCategoryName()	{		$categoryId = $this->getState('filter.category_id');		if ($categoryId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('title')				->from($db->quoteName('#__categories'))				->where($db->quoteName('id') . '=' . $db->quote($categoryId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCATEGORYNAME');		}		return $name;	}	/**	 * Get the category name	 *	 * @return  string    The category name.	 * @since   1.6	 */	protected function getClientName()	{		$clientId = $this->getState('filter.client_id');		if ($clientId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('name')				->from($db->quoteName('#__banner_clients'))				->where($db->quoteName('id') . '=' . $db->quote($clientId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCLIENTNAME');		}		return $name;	}	/**	 * Get the file type.	 *	 * @return  string    The file type	 * @since   1.6	 */	public function getFileType()	{		return $this->getState('compressed') ? 'zip' : 'csv';	}	/**	 * Get the mime type.	 *	 * @return  string    The mime type.	 * @since   1.6	 */	public function getMimeType()	{		return $this->getState('compressed') ? 'application/zip' : 'text/csv';	}	/**	 * Get the content	 *	 * @return  string    The content.	 * @since   1.6	 */	public function getContent()	{		if (!isset($this->content))		{			$this->content = '';			$this->content .=				'"' . str_replace('"', '""', JText::_('COM_BANNERS_HEADING_NAME')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_CLIENT')) . '","' .					str_replace('"', '""', JText::_('JCATEGORY')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_TYPE')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_COUNT')) . '","' .					str_replace('"', '""', JText::_('JDATE')) . '"' . "\n";			foreach ($this->getItems() as $item)			{				$this->content .=					'"' . str_replace('"', '""', $item->name) . '","' .						str_replace('"', '""', $item->client_name) . '","' .						str_replace('"', '""', $item->category_title) . '","' .						str_replace('"', '""', ($item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION') : JText::_('COM_BANNERS_CLICK'))) . '","' .						str_replace('"', '""', $item->count) . '","' .						str_replace('"', '""', $item->track_date) . '"' . "\n";			}			if ($this->getState('compressed'))			{				$app = JFactory::getApplication('administrator');				$files = array();				$files['track'] = array();				$files['track']['name'] = $this->getBasename() . '.csv';				$files['track']['data'] = $this->content;				$files['track']['time'] = time();				$ziproot = $app->getCfg('tmp_path') . '/' . uniqid('banners_tracks_') . '.zip';				// run the packager				jimport('joomla.filesystem.folder');				jimport('joomla.filesystem.file');				$delete = JFolder::files($app->getCfg('tmp_path') . '/', uniqid('banners_tracks_'), false, true);				if (!empty($delete))				{					if (!JFile::delete($delete))					{						// JFile::delete throws an error						$this->setError(JText::_('COM_BANNERS_ERR_ZIP_DELETE_FAILURE'));						return false;					}				}				if (!$packager = JArchive::getAdapter('zip'))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_ADAPTER_FAILURE'));					return false;				}				elseif (!$packager->create($ziproot, $files))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_CREATE_FAILURE'));					return false;				}				$this->content = file_get_contents($ziproot);			}		}		return $this->content;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Access checks are done internally because of different requirements for the two controllers.// Tell the browser not to cache this page.JResponse::setHeader('Expires', 'Mon, 26 Jul 1997 05:00:00 GMT', true);$controller = JControllerLegacy::getInstance('Config');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * HTML behavior class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class JHtmlFinder{	/**	 * Creates a list of types to filter on.	 *	 * @return  array  An array containing the types that can be selected.	 *	 * @since   2.5	 */	public static function typeslist()	{		$lang = JFactory::getLanguage();		// Load the finder types.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT t.title AS text, t.id AS value')			->from($db->quoteName('#__finder_types') . ' AS t')			->join('LEFT', $db->quoteName('#__finder_links') . ' AS l ON l.type_id = t.id')			->order('t.title ASC');		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return;		}		// Compile the options.		$options = array();		foreach ($rows as $row)		{			$key = $lang->hasKey(FinderHelperLanguage::branchPlural($row->text))					? FinderHelperLanguage::branchPlural($row->text) : $row->text;			$string = JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_($key));			$options[] = JHtml::_('select.option', $row->value, $string);		}		return $options;	}	/**	 * Creates a list of maps.	 *	 * @return  array  An array containing the maps that can be selected.	 *	 * @since   2.5	 */	public static function mapslist()	{		$lang = JFactory::getLanguage();		// Load the finder types.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('title AS text, id AS value')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' = 1')			->order('ordering, title ASC');		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return;		}		// Compile the options.		$options = array();		$options[] = JHtml::_('select.option', '1', JText::_('COM_FINDER_MAPS_BRANCHES'));		foreach ($rows as $row)		{			$key = $lang->hasKey(FinderHelperLanguage::branchPlural($row->text))					? FinderHelperLanguage::branchPlural($row->text) : $row->text;			$string = JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_($key));			$options[] = JHtml::_('select.option', $row->value, $string);		}		return $options;	}	/**	 * Creates a list of published states.	 *	 * @return  array  An array containing the states that can be selected.	 *	 * @since   2.5	 */	public static function statelist()	{		$options = array();		$options[] = JHtml::_('select.option', '1', JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_('JPUBLISHED')));		$options[] = JHtml::_('select.option', '0', JText::sprintf('COM_FINDER_ITEM_X_ONLY', JText::_('JUNPUBLISHED')));		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_modules')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Modules');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Links class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiLinks extends JMediawikiObject{	/**     * Method to return all links from the given page(s).     *     * @param   array   $titles       Page titles to retrieve links.     * @param   array   $plnamespace  Namespaces to get links.     * @param   string  $pllimit      Number of links to return.     * @param   string  $plcontinue   Continue when more results are available.     * @param   array   $pltitles     List links to these titles.     * @param   string  $pldir        Direction of listing.     *     * @return  object     *     * @since   12.3     */	public function getLinks(array $titles, array $plnamespace = null, $pllimit = null, $plcontinue = null, array $pltitles = null, $pldir = null)	{		// Build the request.		$path = '?action=query&prop=links';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($plnamespace))		{			$path .= '&plnamespace=' . $this->buildParameter($plnamespace);		}		if (isset($pllimit))		{			$path .= '&pllimit=' . $pllimit;		}		if (isset($plcontinue))		{			$path .= '&plcontinue=' . $plcontinue;		}		if (isset($pltitles))		{			$path .= '&pltitles=' . $this->buildParameter($pltitles);		}		if (isset($pldir))		{			$path .= '&pldir=' . $pldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to return info about the link pages.     *     * @param   array  $titles  Page titles to retrieve links.     *     * @return  object     *     * @since   12.3     */	public function getLinksUsed(array $titles)	{		// Build the request.		$path = '?action=query&generator=links&prop=info';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to return all interwiki links from the given page(s).     *     * @param   array    $titles      Page titles to retrieve links.     * @param   boolean  $iwurl       Whether to get the full url.     * @param   integer  $iwlimit     Number of interwiki links to return.     * @param   boolean  $iwcontinue  When more results are available, use this to continue.     * @param   string   $iwprefix    Prefix for the interwiki.     * @param   string   $iwtitle     Interwiki link to search for.     * @param   string   $iwdir       The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getIWLinks(array $titles, $iwurl = false, $iwlimit = null, $iwcontinue = false, $iwprefix = null, $iwtitle = null, $iwdir = null)	{		// Build the request.		$path = '?action=query&prop=links';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if ($iwurl)		{			$path .= '&iwurl=';		}		if (isset($iwlimit))		{			$path .= '&iwlimit=' . $iwlimit;		}		if ($iwcontinue)		{			$path .= '&iwcontinue=';		}		if (isset($iwprefix))		{			$path .= '&iwprefix=' . $iwprefix;		}		if (isset($iwtitle))		{			$path .= '&iwtitle=' . $iwtitle;		}		if (isset($iwdir))		{			$path .= '&iwdir=' . $iwdir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to return all interlanguage links from the given page(s).     *     * @param   array    $titles      Page titles to retrieve links.     * @param   integer  $lllimit     Number of langauge links to return.     * @param   boolean  $llcontinue  When more results are available, use this to continue.     * @param   string   $llurl       Whether to get the full URL.     * @param   string   $lllang      Language code.     * @param   string   $lltitle     Link to search for.     * @param   string   $lldir       The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getLangLinks(array $titles, $lllimit = null, $llcontinue = false, $llurl = null, $lllang = null, $lltitle = null, $lldir = null)	{		// Build the request.		$path = '?action=query&prop=langlinks';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($lllimit))		{			$path .= '&lllimit=' . $lllimit;		}		if ($llcontinue)		{			$path .= '&llcontinue=';		}		if (isset($llurl))		{			$path .= '&llurl=' . $llurl;		}		if (isset($lllang))		{			$path .= '&lllang=' . $lllang;		}		if (isset($lltitle))		{			$path .= '&lltitle=' . $lltitle;		}		if (isset($lldir))		{			$path .= '&lldir=' . $lldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to return all external urls from the given page(s).     *     * @param   array    $titles      Page titles to retrieve links.     * @param   integer  $ellimit     Number of links to return.     * @param   string   $eloffset    When more results are available, use this to continue.     * @param   string   $elprotocol  Protocol of the url.     * @param   string   $elquery     Search string without protocol.     *     * @return  object     *     * @since   12.3     */	public function getExtLinks(array $titles, $ellimit = null, $eloffset = null, $elprotocol = null, $elquery = null)	{		// Build the request.		$path = '?action=query&prop=extlinks';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($ellimit))		{			$path .= '&ellimit=' . $ellimit;		}		if (isset($eloffset))		{			$path .= '&eloffset=' . $eloffset;		}		if (isset($elprotocol))		{			$path .= '&elprotocol=' . $elprotocol;		}		if (isset($elquery))		{			$path .= '&elquery=' . $elquery;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to enumerate all links that point to a given namespace.     *     * @param   boolean  $alcontinue   When more results are available, use this to continue.     * @param   string   $alfrom       Start listing at this title. The title need not exist.     * @param   string   $alto         The page title to stop enumerating at.     * @param   string   $alprefix     Search for all page titles that begin with this value.     * @param   string   $alunique     Only show unique links.     * @param   array    $alprop       What pieces of information to include.     * @param   string   $alnamespace  The namespace to enumerate.     * @param   integer  $allimit      Number of links to return.     *     * @return  object     *     * @since   12.3     */	public function enumerateLinks($alcontinue = false, $alfrom = null, $alto = null, $alprefix = null, $alunique = null, array $alprop = null,		$alnamespace = null, $allimit = null)	{		// Build the request.		$path = '?action=query&meta=siteinfo';		if ($alcontinue)		{			$path .= '&alcontinue=';		}		if (isset($alfrom))		{			$path .= '&alfrom=' . $alfrom;		}		if (isset($alto))		{			$path .= '&alto=' . $alto;		}		if (isset($alprefix))		{			$path .= '&alprefix=' . $alprefix;		}		if (isset($alunique))		{			$path .= '&alunique=' . $alunique;		}		if (isset($alprop))		{			$path .= '&alprop=' . $this->buildParameter($alprop);		}		if (isset($alnamespace))		{			$path .= '&alnamespace=' . $alnamespace;		}		if (isset($allimit))		{			$path .= '&allimit=' . $allimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><form action="<?php echo JRoute::_('index.php?option=com_admin&amp;view=help'); ?>" method="post" name="adminForm" id="adminForm">	<div class="row-fluid">		<div id="sidebar" class="span3">			<div id="filter-bar" class="btn-toolbar">				<div class="filter-search input-append">					<label for="helpsearch" class="element-invisible"><?php echo JText::_('COM_ADMIN_SEARCH');?></label>					<input type="text" name="helpsearch" class="input-small" placeholder="<?php echo JText::_('COM_ADMIN_SEARCH'); ?>" id="helpsearch" value="<?php echo $this->escape($this->help_search);?>" title="<?php echo JText::_('COM_ADMIN_SEARCH'); ?>" /><button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button><button class="btn tip" type="button" onclick="f=document.adminForm;f.helpsearch.value='';f.submit()" class="hasTooltip" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>				</div>			</div>			<div class="clearfix"> </div>			<div class="sidebar-nav">				<ul class="nav nav-list">					<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_START_HERE'), JText::_('COM_ADMIN_START_HERE'), array('target' => 'helpFrame')) ?></li>					<li><?php echo JHtml::_('link', $this->latest_version_check, JText::_('COM_ADMIN_LATEST_VERSION_CHECK'), array('target' => 'helpFrame')) ?></li>					<li><?php echo JHtml::_('link', 'http://www.gnu.org/licenses/gpl-2.0.html', JText::_('COM_ADMIN_LICENSE'), array('target' => 'helpFrame')) ?></li>					<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_GLOSSARY'), JText::_('COM_ADMIN_GLOSSARY'), array('target' => 'helpFrame')) ?></li>					<hr class="hr-condensed" />					<li class="nav-header"><?php echo JText::_('COM_ADMIN_ALPHABETICAL_INDEX'); ?></li>					<?php foreach ($this->toc as $k => $v):?>						<li>						    <?php $url = JHelp::createUrl('JHELP_'.strtoupper($k)); ?>							<?php echo JHtml::_('link', $url, $v, array('target' => 'helpFrame'));?>						</li>					<?php endforeach;?>				</ul>			</div>		</div>		<div class="span9">			<iframe name="helpFrame" height="2100px" src="<?php echo $this->page;?>" class="helpFrame table table-bordered"></iframe>		</div>	</div>	<input class="textarea" type="hidden" name="option" value="com_admin" /></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_status * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$config	= JFactory::getConfig();$user   = JFactory::getUser();$db     = JFactory::getDbo();$lang   = JFactory::getLanguage();$input  = JFactory::getApplication()->input;// Get the number of unread messages in your inbox.$query	= $db->getQuery(true)	->select('COUNT(*)')	->from('#__messages')	->where('state = 0 AND user_id_to = '.(int) $user->get('id'));$db->setQuery($query);$unread = (int) $db->loadResult();// Get the number of back-end logged in users.$query->clear()	->select('COUNT(session_id)')	->from('#__session')	->where('guest = 0 AND client_id = 1');$db->setQuery($query);$count = '<span class="badge">' . (int) $db->loadResult() . '</span>';// Set the inbox link.if ($input->getBool('hidemainmenu')){	$inboxLink = '';}else{	$inboxLink = JRoute::_('index.php?option=com_messages');}// Set the inbox class.if ($unread){	$inboxClass = 'unread-messages';} else {	$inboxClass = 'no-unread-messages';}// Get the number of frontend logged in users.$query->clear()	->select('COUNT(session_id)')	->from('#__session')	->where('guest = 0 AND client_id = 0');$db->setQuery($query);$online_num = '<span class="badge">' . (int) $db->loadResult() . '</span>';require JModuleHelper::getLayoutPath('mod_status', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_banners')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}// Execute the task.$controller	= JControllerLegacy::getInstance('Banners');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Form Field class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldTimezone extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Timezone';	/**	 * The list of available timezone groups to use.	 *	 * @var    array	 *	 * @since  11.1	 */	protected static $zones = array('Africa', 'America', 'Antarctica', 'Arctic', 'Asia', 'Atlantic', 'Australia', 'Europe', 'Indian', 'Pacific');	/**	 * Method to get the time zone field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   11.1	 */	protected function getGroups()	{		$groups = array();		$keyField = $this->element['key_field'] ? (string) $this->element['key_field'] : 'id';		$keyValue = $this->form->getValue($keyField);		// If the timezone is not set use the server setting.		if (strlen($this->value) == 0 && empty($keyValue))		{			$this->value = JFactory::getConfig()->get('offset');		}		// Get the list of time zones from the server.		$zones = DateTimeZone::listIdentifiers();		// Build the group lists.		foreach ($zones as $zone)		{			// Time zones not in a group we will ignore.			if (strpos($zone, '/') === false)			{				continue;			}			// Get the group/locale from the timezone.			list ($group, $locale) = explode('/', $zone, 2);			// Only use known groups.			if (in_array($group, self::$zones))			{				// Initialize the group if necessary.				if (!isset($groups[$group]))				{					$groups[$group] = array();				}				// Only add options where a locale exists.				if (!empty($locale))				{					$groups[$group][$zone] = JHtml::_('select.option', $zone, str_replace('_', ' ', $locale), 'value', 'text', false);				}			}		}		// Sort the group lists.		ksort($groups);		foreach ($groups as $zone => & $location)		{			sort($location);		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component HTML Helper * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */abstract class JHtmlIcon{	/**	 * Method to generate a link to the create item page for the given category	 *	 * @param   object     $category  The category information	 * @param   JRegistry  $params    The item parameters	 * @param   array      $attribs   Optional attributes for the link	 * @param   boolean    $legacy    True to use legacy images, false to use icomoon based graphic	 *	 * @return  string  The HTML markup for the create item link	 */	public static function create($category, $params, $attribs = array(), $legacy = false)	{		$uri = JURI::getInstance();		$url = 'index.php?option=com_content&task=article.add&return=' . base64_encode($uri) . '&a_id=0&catid=' . $category->id;		if ($params->get('show_icons'))		{			if ($legacy)			{				$text = JHtml::_('image', 'system/new.png', JText::_('JNEW'), null, true);			}			else			{				$text = '<span class="icon-plus"></span>&#160;' . JText::_('JNEW') . '&#160;';			}		}		else		{			$text = JText::_('JNEW') . '&#160;';		}		// Add the button classes to the attribs array		if (isset($attribs['class']))		{			$attribs['class'] = $attribs['class'] . ' btn btn-primary';		}		else		{			$attribs['class'] = 'btn btn-primary';		}		$button = JHtml::_('link', JRoute::_($url), $text, $attribs);		$output = '<span class="hasTip" title="' . JText::_('COM_CONTENT_CREATE_ARTICLE') . '">' . $button . '</span>';		return $output;	}	/**	 * Method to generate a link to the email item page for the given article	 *	 * @param   object     $article  The article information	 * @param   JRegistry  $params   The item parameters	 * @param   array      $attribs  Optional attributes for the link	 * @param   boolean    $legacy   True to use legacy images, false to use icomoon based graphic	 *	 * @return  string  The HTML markup for the email item link	 */	public static function email($article, $params, $attribs = array(), $legacy = false)	{		require_once JPATH_SITE . '/components/com_mailto/helpers/mailto.php';		$uri      = JURI::getInstance();		$base     = $uri->toString(array('scheme', 'host', 'port'));		$template = JFactory::getApplication()->getTemplate();		$link     = $base . JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid), false);		$url      = 'index.php?option=com_mailto&tmpl=component&template=' . $template . '&link=' . MailToHelper::addLink($link);		$status = 'width=400,height=350,menubar=yes,resizable=yes';		if ($params->get('show_icons'))		{			if ($legacy)			{				$text = JHtml::_('image', 'system/emailButton.png', JText::_('JGLOBAL_EMAIL'), null, true);			}			else			{				$text = '<span class="icon-envelope"></span> ' . JText::_('JGLOBAL_EMAIL');			}		}		else		{			$text = JText::_('JGLOBAL_EMAIL');		}		$attribs['title']   = JText::_('JGLOBAL_EMAIL');		$attribs['onclick'] = "window.open(this.href,'win2','" . $status . "'); return false;";		$output = JHtml::_('link', JRoute::_($url), $text, $attribs);		return $output;	}	/**	 * Display an edit icon for the article.	 *	 * This icon will not display in a popup window, nor if the article is trashed.	 * Edit access checks must be performed in the calling code.	 *	 * @param   object     $article  The article information	 * @param   JRegistry  $params   The item parameters	 * @param   array      $attribs  Optional attributes for the link	 * @param   boolean    $legacy   True to use legacy images, false to use icomoon based graphic	 *	 * @return  string	The HTML for the article edit icon.	 * @since   1.6	 */	public static function edit($article, $params, $attribs = array(), $legacy = false)	{		$user = JFactory::getUser();		$uri  = JURI::getInstance();		// Ignore if in a popup window.		if ($params && $params->get('popup'))		{			return;		}		// Ignore if the state is negative (trashed).		if ($article->state < 0)		{			return;		}		JHtml::_('behavior.tooltip');		// Show checked_out icon if the article is checked out by a different user		if (property_exists($article, 'checked_out') && property_exists($article, 'checked_out_time') && $article->checked_out > 0 && $article->checked_out != $user->get('id'))		{			$checkoutUser = JFactory::getUser($article->checked_out);			$button       = JHtml::_('image', 'system/checked_out.png', null, null, true);			$date         = JHtml::_('date', $article->checked_out_time);			$tooltip      = JText::_('JLIB_HTML_CHECKED_OUT') . ' :: ' . JText::sprintf('COM_CONTENT_CHECKED_OUT_BY', $checkoutUser->name) . ' <br /> ' . $date;			return '<span class="hasTip" title="' . htmlspecialchars($tooltip, ENT_COMPAT, 'UTF-8') . '">' . $button . '</span>';		}		$url = 'index.php?option=com_content&task=article.edit&a_id=' . $article->id . '&return=' . base64_encode($uri);		if ($article->state == 0)		{			$overlib = JText::_('JUNPUBLISHED');		}		else		{			$overlib = JText::_('JPUBLISHED');		}		$date   = JHtml::_('date', $article->created);		$author = $article->created_by_alias ? $article->created_by_alias : $article->author;		$overlib .= '&lt;br /&gt;';		$overlib .= $date;		$overlib .= '&lt;br /&gt;';		$overlib .= JText::sprintf('COM_CONTENT_WRITTEN_BY', htmlspecialchars($author, ENT_COMPAT, 'UTF-8'));		if ($legacy)		{			$icon = $article->state ? 'edit.png' : 'edit_unpublished.png';			$text = JHtml::_('image', 'system/' . $icon, JText::_('JGLOBAL_EDIT'), null, true);		}		else		{			$icon = $article->state ? 'edit' : 'eye-close';			$text = '<span class="hasTip icon-' . $icon . ' tip" title="' . JText::_('COM_CONTENT_EDIT_ITEM') . ' :: ' . $overlib . '"></span>&#160;' . JText::_('JGLOBAL_EDIT') . '&#160;';		}		$output = JHtml::_('link', JRoute::_($url), $text, $attribs);		return $output;	}	/**	 * Method to generate a popup link to print an article	 *	 * @param   object     $article  The article information	 * @param   JRegistry  $params   The item parameters	 * @param   array      $attribs  Optional attributes for the link	 * @param   boolean    $legacy   True to use legacy images, false to use icomoon based graphic	 *	 * @return  string  The HTML markup for the popup link	 */	public static function print_popup($article, $params, $attribs = array(), $legacy = false)	{		$url  = ContentHelperRoute::getArticleRoute($article->slug, $article->catid);		$url .= '&tmpl=component&print=1&layout=default&page=' . @ $request->limitstart;		$status = 'status=no,toolbar=no,scrollbars=yes,titlebar=no,menubar=no,resizable=yes,width=640,height=480,directories=no,location=no';		// checks template image directory for image, if non found default are loaded		if ($params->get('show_icons'))		{			if ($legacy)			{				$text = JHtml::_('image', 'system/printButton.png', JText::_('JGLOBAL_PRINT'), null, true);			}			else			{				$text = '<span class="icon-print"></span>&#160;' . JText::_('JGLOBAL_PRINT') . '&#160;';			}		}		else		{			$text = JText::_('JGLOBAL_PRINT');		}		$attribs['title']   = JText::_('JGLOBAL_PRINT');		$attribs['onclick'] = "window.open(this.href,'win2','" . $status . "'); return false;";		$attribs['rel']     = 'nofollow';		return JHtml::_('link', JRoute::_($url), $text, $attribs);	}	/**	 * Method to generate a link to print an article	 *	 * @param   object     $article  Not used, @deprecated for 4.0	 * @param   JRegistry  $params   The item parameters	 * @param   array      $attribs  Not used, @deprecated for 4.0	 * @param   boolean    $legacy   True to use legacy images, false to use icomoon based graphic	 *	 * @return  string  The HTML markup for the popup link	 */	public static function print_screen($article, $params, $attribs = array(), $legacy = false)	{		// Checks template image directory for image, if none found default are loaded		if ($params->get('show_icons'))		{			if ($legacy)			{				$text = JHtml::_('image', 'system/printButton.png', JText::_('JGLOBAL_PRINT'), null, true);			}			else			{				$text = '<span class="icon-print"></span>&#160;' . JText::_('JGLOBAL_PRINT') . '&#160;';			}		}		else		{			$text = JText::_('JGLOBAL_PRINT');		}		return '<a href="#" onclick="window.print();return false;">' . $text . '</a>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Template style controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerStyle extends JControllerForm{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_TEMPLATES_STYLE';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canDo		= SearchHelper::getActions();?><form action="<?php echo JRoute::_('index.php?option=com_search&view=searches'); ?>" method="post" name="adminForm" id="adminForm">	<div id="filter-bar" class="btn-toolbar">		<div class="filter-search btn-group pull-left">			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_SEARCH_SEARCH_IN_PHRASE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_SEARCH_SEARCH_IN_PHRASE'); ?>" />		</div>		<div class="filter-search btn-group pull-left">			<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>			<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>		</div>		<div class="btn-group pull-right hidden-phone">			<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>			<?php echo $this->pagination->getLimitBox(); ?>		</div>		<div class="filter-select btn-group pull-left">			<span class="adminlist-searchstatus">			<?php if ($this->state->get('filter.results')) : ?>				<a class="btn" href="<?php echo JRoute::_('index.php?option=com_search&filter_results=0');?>">					<i class="icon-zoom-out"></i> <?php echo JText::_('COM_SEARCH_HIDE_SEARCH_RESULTS'); ?></a>			<?php else : ?>				<a class="btn" href="<?php echo JRoute::_('index.php?option=com_search&filter_results=1');?>">					<i class="icon-zoom-in"></i> <?php echo JText::_('COM_SEARCH_SHOW_SEARCH_RESULTS'); ?></a>			<?php endif; ?>			</span>		</div>	</div>	<div class="clearfix"> </div>	<?php if ($this->enabled) : ?>	<div class="alert alert-info">		<a class="close" data-dismiss="alert"></a>		<span class="enabled"><?php echo JText::_('COM_SEARCH_LOGGING_ENABLED'); ?></span>	</div>	<?php else : ?>	<div class="alert alert-error">		<a class="close" data-dismiss="alert"></a>		<span class="disabled"><?php echo JText::_('COM_SEARCH_LOGGING_DISABLED'); ?></span>	</div>	<?php endif; ?>	<table class="table table-striped">		<thead>			<tr>				<th width="20">					<?php echo JText::_('JGRID_HEADING_ROW_NUMBER'); ?>				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_SEARCH_HEADING_PHRASE', 'a.search_term', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center">					<?php echo JText::_('COM_SEARCH_HEADING_RESULTS'); ?>				</th>				<th width="30%">					&#160;				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="11">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">					<td class="right">						<?php echo $i + 1 + $this->pagination->limitstart; ?>					</td>					<td>						<?php echo $this->escape($item->search_term); ?>					</td>					<td class="center">						<?php echo (int) $item->hits; ?>					</td>					<td class="center">					<?php if ($this->state->get('filter.results')) : ?>						<?php echo (int) $item->returns; ?>					<?php else: ?>						<?php echo JText::_('COM_SEARCH_NO_RESULTS'); ?>					<?php endif; ?>					</td>					<td>						&#160;					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$options = array(	JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),	JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_MENUS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_MENUS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0)		{		?>			<div id="batch-choose-action" class="combo control-group">				<label id="batch-choose-action-lbl" class="control-label" for="batch-choose-action">					<?php echo JText::_('COM_MENUS_BATCH_MENU_LABEL'); ?>				</label>				<div class="controls">					<select name="batch[menu_id]" class="inputbox" id="batch-menu-id">						<option value=""><?php echo JText::_('JSELECT') ?></option>						<?php echo JHtml::_('select.options', JHtml::_('menu.menuitems', array('published' => $published)));?>					</select>				</div>			</div>			<div id="batch-copy-move" class="control-group radio">				<?php echo JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'); ?>			</div>		<?php		}		?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-menu-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('item.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$script = "\t".'Joomla.submitbutton = function(pressbutton) {'."\n";$script .= "\t\t".'var form = document.adminForm;'."\n";$script .= "\t\t".'if (pressbutton == \'mail.cancel\') {'."\n";$script .= "\t\t\t".'Joomla.submitform(pressbutton);'."\n";$script .= "\t\t\t".'return;'."\n";$script .= "\t\t".'}'."\n";$script .= "\t\t".'// do field validation'."\n";$script .= "\t\t".'if (form.jform_subject.value == ""){'."\n";$script .= "\t\t\t".'alert("'.JText::_('COM_USERS_MAIL_PLEASE_FILL_IN_THE_SUBJECT', true).'");'."\n";$script .= "\t\t".'} else if (getSelectedValue(\'adminForm\',\'jform[group]\') < 0){'."\n";$script .= "\t\t\t".'alert("'.JText::_('COM_USERS_MAIL_PLEASE_SELECT_A_GROUP', true).'");'."\n";$script .= "\t\t".'} else if (form.jform_message.value == ""){'."\n";$script .= "\t\t\t".'alert("'.JText::_('COM_USERS_MAIL_PLEASE_FILL_IN_THE_MESSAGE', true).'");'."\n";$script .= "\t\t".'} else {'."\n";$script .= "\t\t\t".'Joomla.submitform(pressbutton);'."\n";$script .= "\t\t".'}'."\n";$script .= "\t\t".'}'."\n";// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('formbehavior.chosen', 'select');JFactory::getDocument()->addScriptDeclaration($script);?><form action="<?php echo JRoute::_('index.php?option=com_users&view=mail'); ?>" name="adminForm" method="post" id="adminForm">	<div class="row-fluid">		<div class="span9">			<fieldset class="adminform">				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('subject'); ?></div>					<div class="controls"><?php echo $this->form->getInput('subject'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('message'); ?></div>					<div class="controls"><?php echo $this->form->getInput('message'); ?></div>				</div>			</fieldset>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		</div>		<div class="span3">			<fieldset class="form-inline">				<div class="control-group checkbox">					<div class="controls"><?php echo $this->form->getInput('recurse'); ?> <?php echo $this->form->getLabel('recurse'); ?></div>				</div>				<div class="control-group checkbox">					<div class="control-label"><?php echo $this->form->getInput('mode'); ?> <?php echo $this->form->getLabel('mode'); ?></div>				</div>				<div class="control-group checkbox">					<div class="control-label"><?php echo $this->form->getInput('disabled'); ?> <?php echo $this->form->getLabel('disabled'); ?></div>				</div>				<div class="control-group checkbox">					<div class="control-label"><?php echo $this->form->getInput('bcc'); ?> <?php echo $this->form->getLabel('bcc'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('group'); ?></div>					<div class="controls"><?php echo $this->form->getInput('group'); ?></div>				</div>			</fieldset>		</div>	</div></form>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);// Bootstrap the applicationrequire_once dirname(__FILE__) . '/application/bootstrap.php';// Get the application$app = JApplicationWeb::getInstance('InstallationApplicationWeb');// Execute the application$app->execute();
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'weblink.cancel' || document.formvalidator.isValid(document.id('weblink-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('weblink-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_weblinks&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="weblink-form" class="form-validate">	<div class="row-fluid">		<!-- Begin Weblinks -->		<div class="span10 form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_WEBLINKS_NEW_WEBLINK', true) : JText::sprintf('COM_WEBLINKS_EDIT_WEBLINK', $this->item->id, true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('title'); ?></div>					<div class="controls"><?php echo $this->form->getInput('title'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('url'); ?></div>					<div class="controls"><?php echo $this->form->getInput('url'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>					<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>					<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('description'); ?></div>					<div class="controls"><?php echo $this->form->getInput('description'); ?></div>				</div>				<h4><?php echo JText::_('COM_WEBLINKS_FIELDSET_IMAGES');?></h4>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('images'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('images'); ?>					</div>				</div>				<?php foreach ($this->form->getGroup('images') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label">								<?php echo $field->label; ?>							</div>						<?php endif; ?>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('id'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('version'); ?></div>					<div class="controls"><?php echo $this->form->getInput('version'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>				</div>				<?php if ($this->item->hits) : ?>					<div class="control-group">						<div class="control-label"><?php echo $this->form->getLabel('hits'); ?></div>						<div class="controls"><?php echo $this->form->getInput('hits'); ?></div>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php $fieldSets = $this->form->getFieldsets('params'); ?>			<?php foreach ($fieldSets as $name => $fieldSet) : ?>				<?php $paramstabs = 'params-' . $name; ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true)); ?>					<?php echo $this->loadTemplate('params'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endforeach; ?>			<?php $fieldSets = $this->form->getFieldsets('metadata'); ?>			<?php foreach ($fieldSets as $name => $fieldSet) : ?>				<?php $metadatatabs = 'metadata-' . $name; ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', $metadatatabs, JText::_($fieldSet->label, true)); ?>					<?php echo $this->loadTemplate('metadata'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endforeach; ?>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>		</fieldset>		</div>		<!-- End Weblinks -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_category * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$com_path = JPATH_SITE.'/components/com_content/';require_once $com_path.'router.php';require_once $com_path.'helpers/route.php';JModelLegacy::addIncludePath($com_path . '/models', 'ContentModel');/** * Helper for mod_articles_category * * @package     Joomla.Site * @subpackage  mod_articles_category */abstract class ModArticlesCategoryHelper{	public static function getList(&$params)	{		// Get an instance of the generic articles model		$articles = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set application parameters in model		$app = JFactory::getApplication();		$appParams = $app->getParams();		$articles->setState('params', $appParams);		// Set the filters based on the module params		$articles->setState('list.start', 0);		$articles->setState('list.limit', (int) $params->get('count', 0));		$articles->setState('filter.published', 1);		// Access filter		$access = !JComponentHelper::getParams('com_content')->get('show_noauth');		$authorised = JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id'));		$articles->setState('filter.access', $access);		// Prep for Normal or Dynamic Modes		$mode = $params->get('mode', 'normal');		switch ($mode)		{			case 'dynamic':				$option = $app->input->get('option');				$view = $app->input->get('view');				if ($option === 'com_content')				{					switch($view)					{						case 'category':							$catids = array($app->input->getInt('id'));							break;						case 'categories':							$catids = array($app->input->getInt('id'));							break;						case 'article':							if ($params->get('show_on_article_page', 1))							{								$article_id = $app->input->getInt('id');								$catid = $app->input->getInt('catid');								if (!$catid)								{									// Get an instance of the generic article model									$article = JModelLegacy::getInstance('Article', 'ContentModel', array('ignore_request' => true));									$article->setState('params', $appParams);									$article->setState('filter.published', 1);									$article->setState('article.id', (int) $article_id);									$item = $article->getItem();									$catids = array($item->catid);								}								else								{									$catids = array($catid);								}							}							else {								// Return right away if show_on_article_page option is off								return;							}							break;						case 'featured':						default:							// Return right away if not on the category or article views							return;					}				}				else {					// Return right away if not on a com_content page					return;				}				break;			case 'normal':			default:				$catids = $params->get('catid');				$articles->setState('filter.category_id.include', (bool) $params->get('category_filtering_type', 1));				break;		}		// Category filter		if ($catids)		{			if ($params->get('show_child_category_articles', 0) && (int) $params->get('levels', 0) > 0)			{				// Get an instance of the generic categories model				$categories = JModelLegacy::getInstance('Categories', 'ContentModel', array('ignore_request' => true));				$categories->setState('params', $appParams);				$levels = $params->get('levels', 1) ? $params->get('levels', 1) : 9999;				$categories->setState('filter.get_children', $levels);				$categories->setState('filter.published', 1);				$categories->setState('filter.access', $access);				$additional_catids = array();				foreach ($catids as $catid)				{					$categories->setState('filter.parentId', $catid);					$recursive = true;					$items = $categories->getItems($recursive);					if ($items)					{						foreach ($items as $category)						{							$condition = (($category->level - $categories->getParent()->level) <= $levels);							if ($condition)							{								$additional_catids[] = $category->id;							}						}					}				}				$catids = array_unique(array_merge($catids, $additional_catids));			}			$articles->setState('filter.category_id', $catids);		}		// Ordering		$articles->setState('list.ordering', $params->get('article_ordering', 'a.ordering'));		$articles->setState('list.direction', $params->get('article_ordering_direction', 'ASC'));		// New Parameters		$articles->setState('filter.featured', $params->get('show_front', 'show'));		$articles->setState('filter.author_id', $params->get('created_by', ""));		$articles->setState('filter.author_id.include', $params->get('author_filtering_type', 1));		$articles->setState('filter.author_alias', $params->get('created_by_alias', ""));		$articles->setState('filter.author_alias.include', $params->get('author_alias_filtering_type', 1));		$excluded_articles = $params->get('excluded_articles', '');		if ($excluded_articles)		{			$excluded_articles = explode("\r\n", $excluded_articles);			$articles->setState('filter.article_id', $excluded_articles);			$articles->setState('filter.article_id.include', false); // Exclude		}		$date_filtering = $params->get('date_filtering', 'off');		if ($date_filtering !== 'off')		{			$articles->setState('filter.date_filtering', $date_filtering);			$articles->setState('filter.date_field', $params->get('date_field', 'a.created'));			$articles->setState('filter.start_date_range', $params->get('start_date_range', '1000-01-01 00:00:00'));			$articles->setState('filter.end_date_range', $params->get('end_date_range', '9999-12-31 23:59:59'));			$articles->setState('filter.relative_date', $params->get('relative_date', 30));		}		// Filter by language		$articles->setState('filter.language', $app->getLanguageFilter());		$items = $articles->getItems();		// Display options		$show_date = $params->get('show_date', 0);		$show_date_field = $params->get('show_date_field', 'created');		$show_date_format = $params->get('show_date_format', 'Y-m-d H:i:s');		$show_category = $params->get('show_category', 0);		$show_hits = $params->get('show_hits', 0);		$show_author = $params->get('show_author', 0);		$show_introtext = $params->get('show_introtext', 0);		$introtext_limit = $params->get('introtext_limit', 100);		// Find current Article ID if on an article page		$option = $app->input->get('option');		$view = $app->input->get('view');		if ($option === 'com_content' && $view === 'article')		{			$active_article_id = $app->input->getInt('id');		}		else		{			$active_article_id = 0;		}		// Prepare data for display using display options		foreach ($items as &$item)		{			$item->slug = $item->id.':'.$item->alias;			$item->catslug = $item->catid ? $item->catid .':'.$item->category_alias : $item->catid;			if ($access || in_array($item->access, $authorised))			{				// We know that user has the privilege to view the article				$item->link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug));			}			else			{				$app  = JFactory::getApplication();				$menu = $app->getMenu();				$menuitems = $menu->getItems('link', 'index.php?option=com_users&view=login');				if (isset($menuitems[0]))				{					$Itemid = $menuitems[0]->id;				}				elseif ($app->input->getInt('Itemid') > 0)				{					// Use Itemid from requesting page only if there is no existing menu					$Itemid = $app->input->getInt('Itemid');				}				$item->link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$Itemid);			}			// Used for styling the active article			$item->active = $item->id == $active_article_id ? 'active' : '';			$item->displayDate = '';			if ($show_date)			{				$item->displayDate = JHTML::_('date', $item->$show_date_field, $show_date_format);			}			if ($item->catid)			{				$item->displayCategoryLink = JRoute::_(ContentHelperRoute::getCategoryRoute($item->catid));				$item->displayCategoryTitle = $show_category ? '<a href="'.$item->displayCategoryLink.'">'.$item->category_title.'</a>' : '';			}			else {				$item->displayCategoryTitle = $show_category ? $item->category_title : '';			}			$item->displayHits = $show_hits ? $item->hits : '';			$item->displayAuthorName = $show_author ? $item->author : '';			if ($show_introtext)			{				$item->introtext = JHtml::_('content.prepare', $item->introtext, '', 'mod_articles_category.content');				$item->introtext = self::_cleanIntrotext($item->introtext);			}			$item->displayIntrotext = $show_introtext ? self::truncate($item->introtext, $introtext_limit) : '';			$item->displayReadmore = $item->alternative_readmore;		}		return $items;	}	public static function _cleanIntrotext($introtext)	{		$introtext = str_replace('<p>', ' ', $introtext);		$introtext = str_replace('</p>', ' ', $introtext);		$introtext = strip_tags($introtext, '<a><em><strong>');		$introtext = trim($introtext);		return $introtext;	}	/**	* Method to truncate introtext	*	* The goal is to get the proper length plain text string with as much of	* the html intact as possible with all tags properly closed.	*	* @param string   $html       The content of the introtext to be truncated	* @param integer  $maxLength  The maximum number of charactes to render	*	* @return  string  The truncated string	*/	public static function truncate($html, $maxLength = 0)	{		$baseLength = strlen($html);		$diffLength = 0;		// First get the plain text string. This is the rendered text we want to end up with.		$ptString = JHtml::_('string.truncate', $html, $maxLength, $noSplit = true, $allowHtml = false);		for ($maxLength; $maxLength < $baseLength;)		{			// Now get the string if we allow html.			$htmlString = JHtml::_('string.truncate', $html, $maxLength, $noSplit = true, $allowHtml = true);			// Now get the plain text from the html string.			$htmlStringToPtString = JHtml::_('string.truncate', $htmlString, $maxLength, $noSplit = true, $allowHtml = false);			// If the new plain text string matches the original plain text string we are done.			if ($ptString == $htmlStringToPtString)			{				return $htmlString;			}			// Get the number of html tag characters in the first $maxlength characters			$diffLength = strlen($ptString) - strlen($htmlStringToPtString);			// Set new $maxlength that adjusts for the html tags			$maxLength += $diffLength;			if ($baseLength <= $maxLength || $diffLength <= 0)			{				return $htmlString;			}		}		return $html;	}	public static function groupBy($list, $fieldName, $article_grouping_direction, $fieldNameToKeep = null)	{		$grouped = array();		if (!is_array($list))		{			if ($list == '')			{				return $grouped;			}			$list = array($list);		}		foreach ($list as $key => $item)		{			if (!isset($grouped[$item->$fieldName]))			{				$grouped[$item->$fieldName] = array();			}			if (is_null($fieldNameToKeep))			{				$grouped[$item->$fieldName][$key] = $item;			}			else {				$grouped[$item->$fieldName][$key] = $item->$fieldNameToKeep;			}			unset($list[$key]);		}		$article_grouping_direction($grouped);		return $grouped;	}	public static function groupByDate($list, $type = 'year', $article_grouping_direction, $month_year_format = 'F Y')	{		$grouped = array();		if (!is_array($list))		{			if ($list == '')			{				return $grouped;			}			$list = array($list);		}		foreach ($list as $key => $item)		{			switch($type)			{				case 'month_year':					$month_year = JString::substr($item->created, 0, 7);					if (!isset($grouped[$month_year]))					{						$grouped[$month_year] = array();					}					$grouped[$month_year][$key] = $item;					break;				case 'year':				default:					$year = JString::substr($item->created, 0, 4);					if (!isset($grouped[$year]))					{						$grouped[$year] = array();					}					$grouped[$year][$key] = $item;					break;			}			unset($list[$key]);		}		$article_grouping_direction($grouped);		if ($type === 'month_year')		{			foreach ($grouped as $group => $items)			{				$date = new JDate($group);				$formatted_group = $date->format($month_year_format);				$grouped[$formatted_group] = $items;				unset($grouped[$group]);			}		}		return $grouped;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User note model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersModelNote extends JModelAdmin{	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   2.5	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.note', 'note', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   2.5	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		// Get the dispatcher and load the users plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		// Trigger the data preparation event.		$results = $dispatcher->trigger('onContentPrepareData', array('com_users.note', $result));		return $result;	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $name     The table name. Optional.	 * @param   string  $prefix   The class prefix. Optional.	 * @param   array   $options  Configuration array for model. Optional.	 *	 * @return  JTable  The table object	 *	 * @since   2.5	 */	public function getTable($name = 'Note', $prefix = 'UsersTable', $options = array())	{		return JTable::getInstance($name, $prefix, $options);	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Get the application		$app = JFactory::getApplication();		// Check the session for previously entered form data.		$data = $app->getUserState('com_users.edit.note.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('note.id') == 0)			{				$data->set('catid', $app->input->get('catid', $app->getUserState('com_users.notes.filter.category_id'), 'int'));			}			$userId = $app->input->get('u_id', 0, 'int');			if ($userId != 0)			{				$data->user_id = $userId;			}		}		$this->preprocessData('com_users.note', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState()	{		parent::populateState();		$userId = JFactory::getApplication()->input->get('u_id', 0, 'int');		$this->setState('note.user_id', $userId);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	/*public function save($data)	{		$pk		= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('note.id');		$table	= $this->getTable();		$isNew	= empty($pk);		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// JTableCategory doesn't bind the params, so we need to do that by hand.		if (isset($data['params']) && is_array($data['params']))		{			$registry = new JRegistry();			$registry->loadArray($data['params']);			$table->params = $registry->toString();			// This will give us INI format.		}		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		$this->setState('note.id', $table->id);		return true;	}*/}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=templates'); ?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>    	<div id="filter-bar" class="btn-toolbar">  		<div class="filter-search btn-group pull-left">  			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_TEMPLATES_TEMPLATES_FILTER_SEARCH_DESC'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TEMPLATES_TEMPLATES_FILTER_SEARCH_DESC'); ?>" />  		</div>  		<div class="btn-group pull-left">  			<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>  			<button class="btn tip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>  		</div>  	</div>  	<div class="clearfix"> </div>  	<table class="table table-striped" id="template-mgr">  		<thead>  			<tr>  				<th class="col1template">  					&#160;  				</th>  				<th>  					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_TEMPLATE', 'a.element', $listDirn, $listOrder); ?>  				</th>  				<th width="10%">  					<?php echo JHtml::_('grid.sort', 'JCLIENT', 'a.client_id', $listDirn, $listOrder); ?>  				</th>  				<th width="10%">  					<?php echo JText::_('JVERSION'); ?>  				</th>  				<th width="15%">  					<?php echo JText::_('JDATE'); ?>  				</th>  				<th width="25%" >  					<?php echo JText::_('JAUTHOR'); ?>  				</th>  			</tr>  		</thead>  		<tfoot>  			<tr>  				<td colspan="8">  					<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  		<tbody>  		<?php foreach ($this->items as $i => $item) : ?>  			<tr class="row<?php echo $i % 2; ?>">  				<td class="center">  					<?php echo JHtml::_('templates.thumb', $item->element, $item->client_id); ?>  				</td>  				<td class="template-name">  					<a href="<?php echo JRoute::_('index.php?option=com_templates&view=template&id='.(int) $item->extension_id); ?>">  						<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_DETAILS', ucfirst($item->name)); ?></a>  					<p>  					<?php if ($this->preview && $item->client_id == '0') : ?>  						<a href="<?php echo JURI::root().'index.php?tp=1&template='.$item->element; ?>" target="_blank">  							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_PREVIEW'); ?></a>  					<?php elseif ($item->client_id == '1') : ?>  						<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN'); ?>  					<?php else: ?>  						<span class="hasTip" title="<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?>::<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_DESC'); ?>">  							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?></span>  					<?php endif; ?>  					</p>  				</td>  				<td class="small">  					<?php echo $item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>  				</td>  				<td class="small">  					<?php echo $this->escape($item->xmldata->get('version')); ?>  				</td>  				<td class="small">  					<?php echo $this->escape($item->xmldata->get('creationDate')); ?>  				</td>  				<td>  					<?php if ($author = $item->xmldata->get('author')) : ?>  						<p><?php echo $this->escape($author); ?></p>  					<?php else : ?>  						&mdash;  					<?php endif; ?>  					<?php if ($email = $item->xmldata->get('authorEmail')) : ?>  						<p><?php echo $this->escape($email); ?></p>  					<?php endif; ?>  					<?php if ($url = $item->xmldata->get('authorUrl')) : ?>  						<p><a href="<?php echo $this->escape($url); ?>">  							<?php echo $this->escape($url); ?></a></p>  					<?php endif; ?>  				</td>  			</tr>  			<?php endforeach; ?>  		</tbody>  	</table>    	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Helper to render a JLayout object, storing a base path * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.1 */class JLayoutHelper{	/**	 * A default base path that will be used if none is provided when calling the render method.	 * Note that JLayoutFile itself will defaults to JPATH_ROOT . '/layouts' if no basePath is supplied at all	 *	 * @var    string	 * @since  3.1	 */	public static $defaultBasePath = '';	/**	 * Method to render the layout.	 *	 * @param   string  $layoutFile   Dot separated path to the layout file, relative to base path	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 * @param   string  $basePath     Base path to use when loading layout files	 *	 * @return  string	 *	 * @since   3.1	 */	public static function render($layoutFile, $displayData = null, $basePath = '')	{		$basePath = empty($basePath) ? self::$defaultBasePath : $basePath;		// Make sure we send null to JLayoutFile if no path set		$basePath = empty($basePath) ? null : $basePath;		$layout = new JLayoutFile($layoutFile, $basePath);		$renderedLayout = $layout->render($displayData);		return $renderedLayout;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Menu table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableMenu extends JTableNested{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__menu', 'id', $db);		// Set the default access level.		$this->access = (int) JFactory::getConfig()->get('access');	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Verify that the default home menu is not unset		if ($this->home == '1' && $this->language == '*' && ($array['home'] == '0'))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_CANNOT_UNSET_DEFAULT_DEFAULT'));			return false;		}		// Verify that the default home menu set to "all" languages" is not unset		if ($this->home == '1' && $this->language == '*' && ($array['language'] != '*'))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_CANNOT_UNSET_DEFAULT'));			return false;		}		// Verify that the default home menu is not unpublished		if ($this->home == '1' && $this->language == '*' && $array['published'] != '1')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNPUBLISH_DEFAULT_HOME'));			return false;		}		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// If the alias field is empty, set it to the title.		$this->alias = trim($this->alias);		if ((empty($this->alias)) && ($this->type != 'alias' && $this->type != 'url'))		{			$this->alias = $this->title;		}		// Make the alias URL safe.		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		// Cast the home property to an int for checking.		$this->home = (int) $this->home;		// Verify that a first level menu item alias is not 'component'.		if ($this->parent_id == 1 && $this->alias == 'component')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_ROOT_ALIAS_COMPONENT'));			return false;		}		// Verify that a first level menu item alias is not the name of a folder.		jimport('joomla.filesystem.folder');		if ($this->parent_id == 1 && in_array($this->alias, JFolder::folders(JPATH_ROOT)))		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_MENU_ROOT_ALIAS_FOLDER', $this->alias, $this->alias));			return false;		}		// Verify that the home item a component.		if ($this->home && $this->type != 'component')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_HOME_NOT_COMPONENT'));			return false;		}		return true;	}	/**	 * Overloaded store function	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  mixed  False on failure, positive integer on success.	 *	 * @see     JTable::store	 * @since   11.1	 */	public function store($updateNulls = false)	{		$db = JFactory::getDbo();		// Verify that the alias is unique		$table = JTable::getInstance('Menu', 'JTable', array('dbo' => $this->getDbo()));		if ($table->load(array('alias' => $this->alias, 'parent_id' => $this->parent_id, 'client_id' => (int) $this->client_id, 'language' => $this->language))			&& ($table->id != $this->id || $this->id == 0))		{			if ($this->menutype == $table->menutype)			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNIQUE_ALIAS'));			}			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNIQUE_ALIAS_ROOT'));			}			return false;		}		// Verify that the home page for this language is unique		if ($this->home == '1')		{			$table = JTable::getInstance('Menu', 'JTable', array('dbo' => $this->getDbo()));			if ($table->load(array('home' => '1', 'language' => $this->language)))			{				if ($table->checked_out && $table->checked_out != $this->checked_out)				{					$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_DEFAULT_CHECKIN_USER_MISMATCH'));					return false;				}				$table->home = 0;				$table->checked_out = 0;				$table->checked_out_time = $db->getNullDate();				$table->store();			}			// Verify that the home page for this menu is unique.			if ($table->load(array('home' => '1', 'menutype' => $this->menutype)) && ($table->id != $this->id || $this->id == 0))			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_HOME_NOT_UNIQUE_IN_MENU'));				return false;			}		}		if (!parent::store($updateNulls))		{			return false;		}		// Get the new path in case the node was moved		$pathNodes = $this->getPath();		$segments = array();		foreach ($pathNodes as $node)		{			// Don't include root in path			if ($node->alias != 'root')			{				$segments[] = $node->alias;			}		}		$newPath = trim(implode('/', $segments), ' /\\');		// Use new path for partial rebuild of table		// Rebuild will return positive integer on success, false on failure		return ($this->rebuild($this->{$this->_tbl_key}, $this->lft, $this->level, $newPath) > 0);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Modules component * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewSelect extends JViewLegacy{	protected $state;	protected $items;	/**	 * Display the view	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->state = &$state;		$this->items = &$items;		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   3.0	 */	protected function addToolbar()	{		// Add page title		JToolbarHelper::title(JText::_('COM_MODULES_MANAGER_MODULES'), 'module.png');		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Cancel		$title = JText::_('JTOOLBAR_CANCEL');		$dhtml = "<button onClick=\"location.href='index.php?option=com_modules'\" class=\"btn\">					<i class=\"icon-remove\" title=\"$title\"></i>					$title</button>";		$bar->appendButton('Custom', $dhtml, 'new');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.utilities.arrayhelper');/** * Class that handles all access authorisation routines. * * @package     Joomla.Platform * @subpackage  Access * @since       11.1 */class JAccess{	/**	 * Array of view levels	 *	 * @var    array	 * @since  11.1	 */	protected static $viewLevels = array();	/**	 * Array of rules for the asset	 *	 * @var    array	 * @since  11.1	 */	protected static $assetRules = array();	/**	 * Array of user groups.	 *	 * @var    array	 * @since  11.1	 */	protected static $userGroups = array();	/**	 * Array of user group paths.	 *	 * @var    array	 * @since  11.1	 */	protected static $userGroupPaths = array();	/**	 * Array of cached groups by user.	 *	 * @var    array	 * @since  11.1	 */	protected static $groupsByUser = array();	/**	 * Method for clearing static caches.	 *	 * @return  void	 *	 * @since   11.3	 */	public static function clearStatics()	{		self::$viewLevels = array();		self::$assetRules = array();		self::$userGroups = array();		self::$userGroupPaths = array();		self::$groupsByUser = array();	}	/**	 * Method to check if a user is authorised to perform an action, optionally on an asset.	 *	 * @param   integer  $userId  Id of the user for which to check authorisation.	 * @param   string   $action  The name of the action to authorise.	 * @param   mixed    $asset   Integer asset id or the name of the asset as a string.  Defaults to the global asset node.	 *	 * @return  boolean  True if authorised.	 *	 * @since   11.1	 */	public static function check($userId, $action, $asset = null)	{		// Sanitise inputs.		$userId = (int) $userId;		$action = strtolower(preg_replace('#[\s\-]+#', '.', trim($action)));		$asset = strtolower(preg_replace('#[\s\-]+#', '.', trim($asset)));		// Default to the root asset node.		if (empty($asset))		{			$db = JFactory::getDbo();			$assets = JTable::getInstance('Asset', 'JTable', array('dbo' => $db));			$rootId = $assets->getRootId();			$asset = $rootId;		}		// Get the rules for the asset recursively to root if not already retrieved.		if (empty(self::$assetRules[$asset]))		{			self::$assetRules[$asset] = self::getAssetRules($asset, true);		}		// Get all groups against which the user is mapped.		$identities = self::getGroupsByUser($userId);		array_unshift($identities, $userId * -1);		return self::$assetRules[$asset]->allow($action, $identities);	}	/**	 * Method to check if a group is authorised to perform an action, optionally on an asset.	 *	 * @param   integer  $groupId  The path to the group for which to check authorisation.	 * @param   string   $action   The name of the action to authorise.	 * @param   mixed    $asset    Integer asset id or the name of the asset as a string.  Defaults to the global asset node.	 *	 * @return  boolean  True if authorised.	 *	 * @since   11.1	 */	public static function checkGroup($groupId, $action, $asset = null)	{		// Sanitize inputs.		$groupId = (int) $groupId;		$action = strtolower(preg_replace('#[\s\-]+#', '.', trim($action)));		$asset = strtolower(preg_replace('#[\s\-]+#', '.', trim($asset)));		// Get group path for group		$groupPath = self::getGroupPath($groupId);		// Default to the root asset node.		if (empty($asset))		{			$db = JFactory::getDbo();			$assets = JTable::getInstance('Asset', 'JTable', array('dbo' => $db));			$rootId = $assets->getRootId();		}		// Get the rules for the asset recursively to root if not already retrieved.		if (empty(self::$assetRules[$asset]))		{			self::$assetRules[$asset] = self::getAssetRules($asset, true);		}		return self::$assetRules[$asset]->allow($action, $groupPath);	}	/**	 * Gets the parent groups that a leaf group belongs to in its branch back to the root of the tree	 * (including the leaf group id).	 *	 * @param   mixed  $groupId  An integer or array of integers representing the identities to check.	 *	 * @return  mixed  True if allowed, false for an explicit deny, null for an implicit deny.	 *	 * @since   11.1	 */	protected static function getGroupPath($groupId)	{		// Preload all groups		if (empty(self::$userGroups))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('parent.id, parent.lft, parent.rgt')				->from('#__usergroups AS parent')				->order('parent.lft');			$db->setQuery($query);			self::$userGroups = $db->loadObjectList('id');		}		// Make sure groupId is valid		if (!array_key_exists($groupId, self::$userGroups))		{			return array();		}		// Get parent groups and leaf group		if (!isset(self::$userGroupPaths[$groupId]))		{			self::$userGroupPaths[$groupId] = array();			foreach (self::$userGroups as $group)			{				if ($group->lft <= self::$userGroups[$groupId]->lft && $group->rgt >= self::$userGroups[$groupId]->rgt)				{					self::$userGroupPaths[$groupId][] = $group->id;				}			}		}		return self::$userGroupPaths[$groupId];	}	/**	 * Method to return the JAccessRules object for an asset.  The returned object can optionally hold	 * only the rules explicitly set for the asset or the summation of all inherited rules from	 * parent assets and explicit rules.	 *	 * @param   mixed    $asset      Integer asset id or the name of the asset as a string.	 * @param   boolean  $recursive  True to return the rules object with inherited rules.	 *	 * @return  JAccessRules   JAccessRules object for the asset.	 *	 * @since   11.1	 */	public static function getAssetRules($asset, $recursive = false)	{		// Get the database connection object.		$db = JFactory::getDbo();		// Build the database query to get the rules for the asset.		$query = $db->getQuery(true)			->select($recursive ? 'b.rules' : 'a.rules')			->from('#__assets AS a');		// SQLsrv change		$query->group($recursive ? 'b.id, b.rules, b.lft' : 'a.id, a.rules, a.lft');		// If the asset identifier is numeric assume it is a primary key, else lookup by name.		if (is_numeric($asset))		{			$query->where('(a.id = ' . (int) $asset . ')');		}		else		{			$query->where('(a.name = ' . $db->quote($asset) . ')');		}		// If we want the rules cascading up to the global asset node we need a self-join.		if ($recursive)		{			$query->join('LEFT', '#__assets AS b ON b.lft <= a.lft AND b.rgt >= a.rgt')				->order('b.lft');		}		// Execute the query and load the rules from the result.		$db->setQuery($query);		$result = $db->loadColumn();		// Get the root even if the asset is not found and in recursive mode		if (empty($result))		{			$db = JFactory::getDbo();			$assets = JTable::getInstance('Asset', 'JTable', array('dbo' => $db));			$rootId = $assets->getRootId();			$query = $db->getQuery(true)				->select('rules')				->from('#__assets')				->where('id = ' . $db->quote($rootId));			$db->setQuery($query);			$result = $db->loadResult();			$result = array($result);		}		// Instantiate and return the JAccessRules object for the asset rules.		$rules = new JAccessRules;		$rules->mergeCollection($result);		return $rules;	}	/**	 * Method to return a list of user groups mapped to a user. The returned list can optionally hold	 * only the groups explicitly mapped to the user or all groups both explicitly mapped and inherited	 * by the user.	 *	 * @param   integer  $userId     Id of the user for which to get the list of groups.	 * @param   boolean  $recursive  True to include inherited user groups.	 *	 * @return  array    List of user group ids to which the user is mapped.	 *	 * @since   11.1	 */	public static function getGroupsByUser($userId, $recursive = true)	{		// Creates a simple unique string for each parameter combination:		$storeId = $userId . ':' . (int) $recursive;		if (!isset(self::$groupsByUser[$storeId]))		{			// TODO: Uncouple this from JComponentHelper and allow for a configuration setting or value injection.			if (class_exists('JComponentHelper'))			{				$guestUsergroup = JComponentHelper::getParams('com_users')->get('guest_usergroup', 1);			}			else			{				$guestUsergroup = 1;			}			// Guest user (if only the actually assigned group is requested)			if (empty($userId) && !$recursive)			{				$result = array($guestUsergroup);			}			// Registered user and guest if all groups are requested			else			{				$db = JFactory::getDbo();				// Build the database query to get the rules for the asset.				$query = $db->getQuery(true)					->select($recursive ? 'b.id' : 'a.id');				if (empty($userId))				{					$query->from('#__usergroups AS a')						->where('a.id = ' . (int) $guestUsergroup);				}				else				{					$query->from('#__user_usergroup_map AS map')						->where('map.user_id = ' . (int) $userId)						->join('LEFT', '#__usergroups AS a ON a.id = map.group_id');				}				// If we want the rules cascading up to the global asset node we need a self-join.				if ($recursive)				{					$query->join('LEFT', '#__usergroups AS b ON b.lft <= a.lft AND b.rgt >= a.rgt');				}				// Execute the query and load the rules from the result.				$db->setQuery($query);				$result = $db->loadColumn();				// Clean up any NULL or duplicate values, just in case				JArrayHelper::toInteger($result);				if (empty($result))				{					$result = array('1');				}				else				{					$result = array_unique($result);				}			}			self::$groupsByUser[$storeId] = $result;		}		return self::$groupsByUser[$storeId];	}	/**	 * Method to return a list of user Ids contained in a Group	 *	 * @param   integer  $groupId    The group Id	 * @param   boolean  $recursive  Recursively include all child groups (optional)	 *	 * @return  array	 *	 * @since   11.1	 * @todo    This method should move somewhere else	 */	public static function getUsersByGroup($groupId, $recursive = false)	{		// Get a database object.		$db = JFactory::getDbo();		$test = $recursive ? '>=' : '=';		// First find the users contained in the group		$query = $db->getQuery(true)			->select('DISTINCT(user_id)')			->from('#__usergroups as ug1')			->join('INNER', '#__usergroups AS ug2 ON ug2.lft' . $test . 'ug1.lft AND ug1.rgt' . $test . 'ug2.rgt')			->join('INNER', '#__user_usergroup_map AS m ON ug2.id=m.group_id')			->where('ug1.id=' . $db->quote($groupId));		$db->setQuery($query);		$result = $db->loadColumn();		// Clean up any NULL values, just in case		JArrayHelper::toInteger($result);		return $result;	}	/**	 * Method to return a list of view levels for which the user is authorised.	 *	 * @param   integer  $userId  Id of the user for which to get the list of authorised view levels.	 *	 * @return  array    List of view levels for which the user is authorised.	 *	 * @since   11.1	 */	public static function getAuthorisedViewLevels($userId)	{		// Get all groups that the user is mapped to recursively.		$groups = self::getGroupsByUser($userId);		// Only load the view levels once.		if (empty(self::$viewLevels))		{			// Get a database object.			$db = JFactory::getDbo();			// Build the base query.			$query = $db->getQuery(true)				->select('id, rules')				->from($db->quoteName('#__viewlevels'));			// Set the query for execution.			$db->setQuery($query);			// Build the view levels array.			foreach ($db->loadAssocList() as $level)			{				self::$viewLevels[$level['id']] = (array) json_decode($level['rules']);			}		}		// Initialise the authorised array.		$authorised = array(1);		// Find the authorised levels.		foreach (self::$viewLevels as $level => $rule)		{			foreach ($rule as $id)			{				if (($id < 0) && (($id * -1) == $userId))				{					$authorised[] = $level;					break;				}				// Check to see if the group is mapped to the level.				elseif (($id >= 0) && in_array($id, $groups))				{					$authorised[] = $level;					break;				}			}		}		return $authorised;	}	/**	 * Method to return a list of actions for which permissions can be set given a component and section.	 *	 * @param   string  $component  The component from which to retrieve the actions.	 * @param   string  $section    The name of the section within the component from which to retrieve the actions.	 *	 * @return  array  List of actions available for the given component and section.	 *	 * @since   11.1	 *	 * @deprecated  12.3  Use JAccess::getActionsFromFile or JAccess::getActionsFromData instead.	 *	 * @codeCoverageIgnore	 *	 */	public static function getActions($component, $section = 'component')	{		JLog::add(__METHOD__ . ' is deprecated. Use JAccess::getActionsFromFile or JAcces::getActionsFromData instead.', JLog::WARNING, 'deprecated');		$actions = self::getActionsFromFile(			JPATH_ADMINISTRATOR . '/components/' . $component . '/access.xml',			"/access/section[@name='" . $section . "']/"		);		if (empty($actions))		{			return array();		}		else		{			return $actions;		}	}	/**	 * Method to return a list of actions from a file for which permissions can be set.	 *	 * @param   string  $file   The path to the XML file.	 * @param   string  $xpath  An optional xpath to search for the fields.	 *	 * @return  boolean|array   False if case of error or the list of actions available.	 *	 * @since   12.1	 */	public static function getActionsFromFile($file, $xpath = "/access/section[@name='component']/")	{		if (!is_file($file) || !is_readable($file))		{			// If unable to find the file return false.			return false;		}		else		{			// Else return the actions from the xml.			$xml = simplexml_load_file($file);			return self::getActionsFromData($xml, $xpath);		}	}	/**	 * Method to return a list of actions from a string or from an xml for which permissions can be set.	 *	 * @param   string|SimpleXMLElement  $data   The XML string or an XML element.	 * @param   string                   $xpath  An optional xpath to search for the fields.	 *	 * @return  boolean|array   False if case of error or the list of actions available.	 *	 * @since   12.1	 */	public static function getActionsFromData($data, $xpath = "/access/section[@name='component']/")	{		// If the data to load isn't already an XML element or string return false.		if ((!($data instanceof SimpleXMLElement)) && (!is_string($data)))		{			return false;		}		// Attempt to load the XML if a string.		if (is_string($data))		{			try			{				$data = new SimpleXMLElement($data);			}			catch (Exception $e)			{				return false;			}			// Make sure the XML loaded correctly.			if (!$data)			{				return false;			}		}		// Initialise the actions array		$actions = array();		// Get the elements from the xpath		$elements = $data->xpath($xpath . 'action[@name][@title][@description]');		// If there some elements, analyse them		if (!empty($elements))		{			foreach ($elements as $action)			{				// Add the action to the actions array				$actions[] = (object) array(					'name' => (string) $action['name'],					'title' => (string) $action['title'],					'description' => (string) $action['description']				);			}		}		// Finally return the actions array		return $actions;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_weblinks component * * @return  array  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. */function WeblinksBuildRoute(&$query){	$segments = array();	// get a menu item based on Itemid or currently active	$app = JFactory::getApplication();	$menu = $app->getMenu();	$params = JComponentHelper::getParams('com_weblinks');	$advanced = $params->get('sef_advanced_link', 0);	// we need a menu item.  Either the one specified in the query, or the current active one if none specified	if (empty($query['Itemid']))	{		$menuItem = $menu->getActive();	}	else	{		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mId = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (isset($query['view']))	{		$view = $query['view'];		if (empty($query['Itemid']) || empty($menuItem) || $menuItem->component != 'com_weblinks')		{			$segments[] = $query['view'];		}		// We need to keep the view for forms since they never have their own menu item		if ($view != 'form')		{			unset($query['view']);		}	}	// are we dealing with an weblink that is attached to a menu item?	if (isset($query['view']) && ($mView == $query['view']) and (isset($query['id'])) and ($mId == (int) $query['id']))	{		unset($query['view']);		unset($query['catid']);		unset($query['id']);		return $segments;	}	if (isset($view) and ($view == 'category' or $view == 'weblink'))	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'weblink' && isset($query['catid']))			{				$catid = $query['catid'];			}			elseif (isset($query['id']))			{				$catid = $query['id'];			}			$menuCatid = $mId;			$categories = JCategories::getInstance('Weblinks');			$category = $categories->get($catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$path = $category->getPath();				$path = array_reverse($path);				$array = array();				foreach ($path as $id)				{					if ((int) $id == (int) $menuCatid)					{						break;					}					if ($advanced)					{						list($tmp, $id) = explode(':', $id, 2);					}					$array[] = $id;				}				$segments = array_merge($segments, array_reverse($array));			}			if ($view == 'weblink')			{				if ($advanced)				{					list($tmp, $id) = explode(':', $query['id'], 2);				}				else				{					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);		unset($query['catid']);	}	if (isset($query['layout']))	{		if (!empty($query['Itemid']) && isset($menuItem->query['layout']))		{			if ($query['layout'] == $menuItem->query['layout'])			{				unset($query['layout']);			}		}		else		{			if ($query['layout'] == 'default')			{				unset($query['layout']);			}		}	}	return $segments;}/** * Parse the segments of a URL. * * @return  array  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. */function WeblinksParseRoute($segments){	$vars = array();	//Get the active menu item.	$app = JFactory::getApplication();	$menu = $app->getMenu();	$item = $menu->getActive();	$params = JComponentHelper::getParams('com_weblinks');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for weblinks.	if (!isset($item))	{		$vars['view'] = $segments[0];		$vars['id'] = $segments[$count - 1];		return $vars;	}	// From the categories view, we can only jump to a category.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$category = JCategories::getInstance('Weblinks')->get($id);	$categories = $category->getChildren();	$found = 0;	foreach ($segments as $segment)	{		foreach ($categories as $category)		{			if (($category->slug == $segment) || ($advanced && $category->alias == str_replace(':', '-', $segment)))			{				$vars['id'] = $category->id;				$vars['view'] = 'category';				$categories = $category->getChildren();				$found = 1;				break;			}		}		if ($found == 0)		{			if ($advanced)			{				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('id'))					->from('#__weblinks')					->where($db->quoteName('catid') . ' = ' . (int) $vars['catid'])					->where($db->quoteName('alias') . ' = ' . $db->quote($db->quote(str_replace(':', '-', $segment))));				$db->setQuery($query);				$id = $db->loadResult();			}			else			{				$id = $segment;			}			$vars['id'] = $id;			$vars['view'] = 'weblink';			break;		}		$found = 0;	}	return $vars;}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Get the user object.$user = JFactory::getUser();// Check if user is allowed to add/edit based on tags permissions.// Do we really have to make it so people can see unpublished tags???$canEdit = $user->authorise('core.edit', 'com_tags');$canCreate = $user->authorise('core.create', 'com_tags');$canEditState = $user->authorise('core.edit.state', 'com_tags');$items = $this->items;$n = count($this->items);?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<?php if ($this->params->get('show_headings') || $this->params->get('filter_field') !== '0' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_TAGS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<?php if ($this->items == false || $n == 0) : ?>		<p> <?php echo JText::_('COM_TAGS_NO_ITEMS'); ?></p>	<?php else : ?>	<ul class="category list-striped list-condensed">		<?php foreach ($items as $i => $item) : ?>			<?php if ($item->core_state == 0) : ?>				<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">			<?php else: ?>				<li class="cat-list-row<?php echo $i % 2; ?>" >				<h3>					<a href="<?php echo JRoute::_(TagsHelperRoute::getItemRoute($item->content_item_id, $item->core_alias, $item->core_catid, $item->core_language, $item->type_alias, $item->router)); ?>">						<?php echo $this->escape($item->core_title); ?>					</a>				</h3>			<?php endif; ?>			<?php $images  = json_decode($item->core_images);?>			<?php if ($this->params->get('tag_list_show_item_image', 1) == 1 && !empty($images->image_intro)) :?>				<img src="<?php echo htmlspecialchars($images->image_intro);?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>">			<?php endif; ?>			<?php if ($this->params->get('tag_list_show_item_description', 1)) : ?>				<span class="tag-body">					<?php echo JHtml::_('string.truncate', $item->core_body, $this->params->get('tag_list_item_maximum_characters')); ?>				</span>			<?php endif; ?>				</li>			<div class="clearfix"></div>		<?php endforeach; ?>	</ul>	<?php if ($this->params->get('show_pagination')) : ?>	 <div class="pagination">		<?php if ($this->params->get('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>			<?php echo $this->pagination->getPagesLinks(); ?>		</div>		</br>	<?php endif; ?></form><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the WebLinks component * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.0 */class WeblinksViewCategory extends JViewLegacy{	public function display($tpl = null)	{		$app      = JFactory::getApplication();		$document = JFactory::getDocument();		$document->link = JRoute::_(WeblinksHelperRoute::getCategoryRoute($app->input->getInt('id')));		$app->input->set('limit', $app->getCfg('feed_limit'));		$params = $app->getParams();		$siteEmail = $app->getCfg('mailfrom');		$fromName  = $app->getCfg('fromname');		$feedEmail = $app->getCfg('feed_email', 'author');		$document->editor = $fromName;		if ($feedEmail != "none")		{			$document->editorEmail = $siteEmail;		}		// Get some data from the model		$items    = $this->get('Items');		$category = $this->get('Category');		foreach ($items as $item)		{			// strip html from feed item title			$title = $this->escape($item->title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// url link to article			$link = JRoute::_(WeblinksHelperRoute::getWeblinkRoute($item->id, $item->catid));			// strip html from feed item description text			$description = $item->description;			$author			= $item->created_by_alias ? $item->created_by_alias : $item->author;			$date = ($item->date ? date('r', strtotime($item->date)) : '');			// load individual item creator class			$feeditem = new JFeedItem;			$feeditem->title       = $title;			$feeditem->link        = $link;			$feeditem->description = $description;			$feeditem->date        = $date;			$feeditem->category    = $category->title;			$feeditem->author      = $author;			// We don't have the author email so we have to use site in both cases.			if ($feedEmail == 'site')			{				$feeditem->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$feeditem->authorEmail = $item->author_email;			}			// loads item info into rss array			$document->addItem($feeditem);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul class="list-striped list-condensed"><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :		if (!isset($this->children[$this->category->id][$id + 1]))		{			$class = ' class="last"';		}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<h4 class="item-title">				<a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($child->id)); ?>">				<?php echo $this->escape($child->title); ?>				</a>				<?php if ($this->params->get('show_cat_items') == 1) :?>					<span class="badge badge-info pull-right" title="<?php echo JText::_('COM_CONTACT_CAT_NUM'); ?>"><?php echo $child->numitems; ?></span>				<?php endif; ?>			</h4>			<?php if ($this->params->get('show_subcat_desc') == 1) : ?>				<?php if ($child->description) : ?>					<small class="category-desc">						<?php echo JHtml::_('content.prepare', $child->description, '', 'com_contact.category'); ?>					</small>				<?php endif; ?>			<?php endif; ?>			<?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument Module renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererModule extends JDocumentRenderer{	/**	 * Renders a module script and returns the results as a string	 *	 * @param   string  $module   The name of the module to render	 * @param   array   $attribs  Associative array of values	 * @param   string  $content  If present, module information from the buffer will be used	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($module, $attribs = array(), $content = null)	{		if (!is_object($module))		{			$title = isset($attribs['title']) ? $attribs['title'] : null;			$module = JModuleHelper::getModule($module, $title);			if (!is_object($module))			{				if (is_null($content))				{					return '';				}				else				{					/**					 * If module isn't found in the database but data has been pushed in the buffer					 * we want to render it					 */					$tmp = $module;					$module = new stdClass;					$module->params = null;					$module->module = $tmp;					$module->id = 0;					$module->user = 0;				}			}		}		// Get the user and configuration object		// $user = JFactory::getUser();		$conf = JFactory::getConfig();		// Set the module content		if (!is_null($content))		{			$module->content = $content;		}		// Get module parameters		$params = new JRegistry;		$params->loadString($module->params);		// Use parameters from template		if (isset($attribs['params']))		{			$template_params = new JRegistry;			$template_params->loadString(html_entity_decode($attribs['params'], ENT_COMPAT, 'UTF-8'));			$params->merge($template_params);			$module = clone $module;			$module->params = (string) $params;		}		$contents = '';		// Default for compatibility purposes. Set cachemode parameter or use JModuleHelper::moduleCache from within the		// module instead		$cachemode = $params->get('cachemode', 'oldstatic');		if ($params->get('cache', 0) == 1 && $conf->get('caching') >= 1 && $cachemode != 'id' && $cachemode != 'safeuri')		{			// Default to itemid creating method and workarounds on			$cacheparams = new stdClass;			$cacheparams->cachemode = $cachemode;			$cacheparams->class = 'JModuleHelper';			$cacheparams->method = 'renderModule';			$cacheparams->methodparams = array($module, $attribs);			$contents = JModuleHelper::ModuleCache($module, $params, $cacheparams);		}		else		{			$contents = JModuleHelper::renderModule($module, $attribs);		}		return $contents;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?><div class="row-fluid">	<div class="span2">		<div class="sidebar-nav">			<ul class="nav nav-list">				<li class="nav-header"><?php echo JText::_('COM_CPANEL_HEADER_SUBMENU'); ?></li>				<li class="active"><a href="<?php echo $this->baseurl; ?>"><?php echo JText::_('COM_CPANEL_LINK_DASHBOARD'); ?></a></li>				<li class="nav-header"><?php echo JText::_('COM_CPANEL_HEADER_SYSTEM'); ?></li>			<?php if ($user->authorise('core.admin')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_config"><?php echo JText::_('COM_CPANEL_LINK_GLOBAL_CONFIG'); ?></a></li>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_admin&view=sysinfo"><?php echo JText::_('COM_CPANEL_LINK_SYSINFO'); ?></a></li>			<?php endif;?>			<?php if ($user->authorise('core.manage', 'com_cache')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_cache"><?php echo JText::_('COM_CPANEL_LINK_CLEAR_CACHE'); ?></a></li>			<?php endif;?>			<?php if ($user->authorise('core.admin', 'com_checkin')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_checkin"><?php echo JText::_('COM_CPANEL_LINK_CHECKIN'); ?></a></li>			<?php endif;?>			<?php if ($user->authorise('core.manage', 'com_installer')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_installer"><?php echo JText::_('COM_CPANEL_LINK_EXTENSIONS'); ?></a></li>			<?php endif;?>			</ul>		</div>	</div>	<div class="span6">		<?php		foreach ($this->modules as $module)		{			$output = JModuleHelper::renderModule($module, array('style' => 'well'));			$params = new JRegistry;			$params->loadString($module->params);			echo $output;		}		?>	</div>	<div class="span4">		<?php		// Display the submenu position modules		$this->iconmodules = JModuleHelper::getModules('icon');		foreach ($this->iconmodules as $iconmodule)		{			$output = JModuleHelper::renderModule($iconmodule, array('style' => 'well'));			$params = new JRegistry;			$params->loadString($iconmodule->params);			echo $output;		}		?>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of users. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewDebugUser extends JViewLegacy{	protected $actions;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Access check.		if (!JFactory::getUser()->authorise('core.manage', 'com_users') || !JFactory::getConfig()->get('debug'))		{			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));		}		$this->actions		= $this->get('DebugActions');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->user			= $this->get('User');		$this->levels		= UsersHelperDebug::getLevelsOptions();		$this->components	= UsersHelperDebug::getComponents();		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::sprintf('COM_USERS_VIEW_DEBUG_USER_TITLE', $this->user->id, $this->user->name), 'user');		JToolbarHelper::help('JHELP_USERS_DEBUG_USERS');		JHtmlSidebar::setAction('index.php?option=com_users&view=debuguser&user_id=' . (int) $this->state->get('filter.user_id'));		$option = '';		if (!empty($this->components))		{			$option = JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));		}		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_COMPONENT'),			'filter_component',			$option		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'),			'filter_level_start',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'))		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'),			'filter_level_end',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'))		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Gzip format adapter for the JArchive class * * This class is inspired from and draws heavily in code and concept from the Compress package of * The Horde Project <http://www.horde.org> * * @contributor  Michael Slusarz <slusarz@horde.org> * @contributor  Michael Cochrane <mike@graftonhall.co.nz> * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveGzip implements JArchiveExtractable{	/**	 * Gzip file flags.	 *	 * @var    array	 * @since  11.1	 */	private $_flags = array('FTEXT' => 0x01, 'FHCRC' => 0x02, 'FEXTRA' => 0x04, 'FNAME' => 0x08, 'FCOMMENT' => 0x10);	/**	 * Gzip file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * Extract a Gzip compressed file to a given path	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive to	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function extract($archive, $destination, array $options = array ())	{		$this->_data = null;		if (!extension_loaded('zlib'))		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'The zlib extension is not available.');			}			else			{				throw new RuntimeException('The zlib extension is not available.');			}		}		if (!isset($options['use_streams']) || $options['use_streams'] == false)		{			$this->_data = file_get_contents($archive);			if (!$this->_data)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive');				}				else				{					throw new RuntimeException('Unable to read archive');				}			}			$position = $this->_getFilePosition();			$buffer = gzinflate(substr($this->_data, $position, strlen($this->_data) - $position));			if (empty($buffer))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to decompress data');				}				else				{					throw new RuntimeException('Unable to decompress data');				}			}			if (JFile::write($destination, $buffer) === false)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive');				}				else				{					throw new RuntimeException('Unable to write archive');				}			}		}		else		{			// New style! streams!			$input = JFactory::getStream();			// Use gz			$input->set('processingmethod', 'gz');			if (!$input->open($archive))			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to read archive (gz)');				}				else				{					throw new RuntimeException('Unable to read archive (gz)');				}			}			$output = JFactory::getStream();			if (!$output->open($destination, 'w'))			{				$input->close();				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to write archive (gz)');				}				else				{					throw new RuntimeException('Unable to write archive (gz)');				}			}			do			{				$this->_data = $input->read($input->get('chunksize', 8196));				if ($this->_data)				{					if (!$output->write($this->_data))					{						$input->close();						if (class_exists('JError'))						{							return JError::raiseWarning(100, 'Unable to write file (gz)');						}						else						{							throw new RuntimeException('Unable to write file (gz)');						}					}				}			}			while ($this->_data);			$output->close();			$input->close();		}		return true;	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return extension_loaded('zlib');	}	/**	 * Get file data offset for archive	 *	 * @return  integer  Data position marker for archive	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function _getFilePosition()	{		// Gzipped file... unpack it first		$position = 0;		$info = @ unpack('CCM/CFLG/VTime/CXFL/COS', substr($this->_data, $position + 2));		if (!$info)		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to decompress data.');			}			else			{				throw new RuntimeException('Unable to decompress data.');			}		}		$position += 10;		if ($info['FLG'] & $this->_flags['FEXTRA'])		{			$XLEN = unpack('vLength', substr($this->_data, $position + 0, 2));			$XLEN = $XLEN['Length'];			$position += $XLEN + 2;		}		if ($info['FLG'] & $this->_flags['FNAME'])		{			$filenamePos = strpos($this->_data, "\x0", $position);			$position = $filenamePos + 1;		}		if ($info['FLG'] & $this->_flags['FCOMMENT'])		{			$commentPos = strpos($this->_data, "\x0", $position);			$position = $commentPos + 1;		}		if ($info['FLG'] & $this->_flags['FHCRC'])		{			$hcrc = unpack('vCRC', substr($this->_data, $position + 0, 2));			$hcrc = $hcrc['CRC'];			$position += 2;		}		return $position;	}}
