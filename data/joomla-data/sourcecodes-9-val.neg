<?php/** * @package     Joomla.Libraries * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags table * * @package     Joomla.Libraries * @subpackage  Table * @since       3.1 */class JTableContenttype extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   3.1	 */	public function __construct($db)	{		parent::__construct('#__content_types', 'type_id', $db);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function check()	{		// Check for valid name.		if (trim($this->type_title) == '')		{			throw new UnexpectedValueException(sprintf('The title is empty'));		}		$this->type_title = ucfirst($this->type_title);		if (empty($this->type_alias))		{			throw new UnexpectedValueException(sprintf('The type_alias is empty'));		}		return true;	}	/**	 * Overridden JTable::store.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function store($updateNulls = false)	{		// Verify that the alias is unique		$table = JTable::getInstance('Contenttype', 'JTable');		if ($table->load(array('type_alias' => $this->type_alias)) && ($table->type_id != $this->type_id || $this->type_id == 0))		{			$this->setError(JText::_('COM_TAGS_ERROR_UNIQUE_ALIAS'));			return false;		}		return parent::store($updateNulls);	}	/**	 * Method to expand the field mapping	 *	 * @param   boolean  $assoc  True to return an associative array.	 *	 * @return  mixed  Array or object with field mappings. Defaults to object.	 *	 * @since   3.1	 */	public function fieldmapExpand($assoc = true)	{		return $this->fieldmap = json_decode($this->fieldmappings, $assoc);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('BannersHelper', JPATH_COMPONENT.'/helpers/banners.php');/** * View to edit a banner. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersViewBanner extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Initialiase variables.		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Since we don't track these assets at the item level, use the category id.		$canDo		= BannersHelper::getActions($this->item->catid, 0);		JToolbarHelper::title($isNew ? JText::_('COM_BANNERS_MANAGER_BANNER_NEW') : JText::_('COM_BANNERS_MANAGER_BANNER_EDIT'), 'banners.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit') || count($user->getAuthorisedCategories('com_banners', 'core.create')) > 0))		{			JToolbarHelper::apply('banner.apply');			JToolbarHelper::save('banner.save');			if ($canDo->get('core.create'))			{				JToolbarHelper::save2new('banner.save2new');			}		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('banner.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('banner.cancel');		}		else		{			JToolbarHelper::cancel('banner.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_BANNERS_EDIT');	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Contains a set of JSchemaChange objects for a particular instance of Joomla. * Each of these objects contains a DDL query that should have been run against * the database when this database was created or updated. This enables the * Installation Manager to check that the current database schema is up to date. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeset{	/**	 * Array of JSchemaChangeitem objects	 *	 * @var    array	 * @since  2.5	 */	protected $changeItems = array();	/**	 * JDatabaseDriver object	 *	 * @var    JDatabaseDriver	 * @since  2.5	 */	protected $db = null;	/**	 * Folder where SQL update files will be found	 *	 * @var    string	 */	protected $folder = null;	/**	 * Constructor: builds array of $changeItems by processing the .sql files in a folder.	 * The folder for the Joomla core updates is administrator/components/com_admin/sql/updates/<database>.	 *	 * @param   JDatabaseDriver  $db      The current database object	 * @param   string           $folder  The full path to the folder containing the update queries	 *	 * @since   2.5	 */	public function __construct($db, $folder = null)	{		$this->db = $db;		$this->folder = $folder;		$updateFiles = $this->getUpdateFiles();		$updateQueries = $this->getUpdateQueries($updateFiles);		foreach ($updateQueries as $obj)		{			$this->changeItems[] = JSchemaChangeitem::getInstance($db, $obj->file, $obj->updateQuery);		}	}	/**	 * Returns a reference to the JSchemaChangeset object, only creating it if it doesn't already exist.	 *	 * @param   JDatabaseDriver  $db      The current database object	 * @param   string           $folder  The full path to the folder containing the update queries	 *	 * @return  JSchemaChangeset	 *	 * @since   2.5	 */	public static function getInstance($db, $folder)	{		static $instance;		if (!is_object($instance))		{			$instance = new JSchemaChangeset($db, $folder);		}		return $instance;	}	/**	 * Checks the database and returns an array of any errors found.	 * Note these are not database errors but rather situations where	 * the current schema is not up to date.	 *	 * @return   array Array of errors if any.	 *	 * @since    2.5	 */	public function check()	{		$errors = array();		foreach ($this->changeItems as $item)		{			if ($item->check() === -2)			{				// Error found				$errors[] = $item;			}		}		return $errors;	}	/**	 * Runs the update query to apply the change to the database	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		$this->check();		foreach ($this->changeItems as $item)		{			$item->fix();		}	}	/**	* Returns an array of results for this set	*	* @return  array  associative array of changeitems grouped by unchecked, ok, error, and skipped	*	* @since   2.5	*/	public function getStatus()	{		$result = array('unchecked' => array(), 'ok' => array(), 'error' => array(), 'skipped' => array());		foreach ($this->changeItems as $item)		{			switch ($item->checkStatus)			{				case 0:					$result['unchecked'][] = $item;					break;				case 1:					$result['ok'][] = $item;					break;				case -2:					$result['error'][] = $item;					break;				case -1:					$result['skipped'][] = $item;					break;			}		}		return $result;	}	/**	 * Gets the current database schema, based on the highest version number.	 * Note that the .sql files are named based on the version and date, so	 * the file name of the last file should match the database schema version	 * in the #__schemas table.	 *	 * @return  string  the schema version for the database	 *	 * @since   2.5	 */	public function getSchema()	{		$updateFiles = $this->getUpdateFiles();		$result = new SplFileInfo(array_pop($updateFiles));		return $result->getBasename('.sql');	}	/**	 * Get list of SQL update files for this database	 *	 * @return  array  list of sql update full-path names	 *	 * @since   2.5	 */	private function getUpdateFiles()	{		// Get the folder from the database name		$sqlFolder = $this->db->name;		if ($sqlFolder == 'mysqli')		{			$sqlFolder = 'mysql';		}		elseif ($sqlFolder == 'sqlsrv')		{			$sqlFolder = 'sqlazure';		}		// Default folder to core com_admin		if (!$this->folder)		{			$this->folder = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		}		return JFolder::files($this->folder . '/' . $sqlFolder, '\.sql$', 1, true);	}	/**	 * Get array of SQL queries	 *	 * @param   array  $sqlfiles  Array of .sql update filenames.	 *	 * @return  array  Array of stdClass objects where:	 *                    file=filename,	 *                    update_query = text of SQL update query	 *	 * @since   2.5	 */	private function getUpdateQueries(array $sqlfiles)	{		// Hold results as array of objects		$result = array();		foreach ($sqlfiles as $file)		{			$buffer = file_get_contents($file);			// Create an array of queries from the sql file			$queries = JDatabaseDriver::splitSql($buffer);			foreach ($queries as $query)			{				if (trim($query))				{					$fileQueries = new stdClass;					$fileQueries->file = $file;					$fileQueries->updateQuery = $query;					$result[] = $fileQueries;				}			}		}		return $result;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Query Helper * * @static * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentHelperQuery{	/**	 * Translate an order code to a field for primary category ordering.	 *	 * @param   string	$orderby	The ordering code.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.5	 */	public static function orderbyPrimary($orderby)	{		switch ($orderby)		{			case 'alpha' :				$orderby = 'c.path, ';				break;			case 'ralpha' :				$orderby = 'c.path DESC, ';				break;			case 'order' :				$orderby = 'c.lft, ';				break;			default :				$orderby = '';				break;		}		return $orderby;	}	/**	 * Translate an order code to a field for secondary category ordering.	 *	 * @param   string	$orderby	The ordering code.	 * @param   string	$orderDate	The ordering code for the date.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.5	 */	public static function orderbySecondary($orderby, $orderDate = 'created')	{		$queryDate = self::getQueryDate($orderDate);		switch ($orderby)		{			case 'date' :				$orderby = $queryDate;				break;			case 'rdate' :				$orderby = $queryDate . ' DESC ';				break;			case 'alpha' :				$orderby = 'a.title';				break;			case 'ralpha' :				$orderby = 'a.title DESC';				break;			case 'hits' :				$orderby = 'a.hits DESC';				break;			case 'rhits' :				$orderby = 'a.hits';				break;			case 'order' :				$orderby = 'a.ordering';				break;			case 'author' :				$orderby = 'author';				break;			case 'rauthor' :				$orderby = 'author DESC';				break;			case 'front' :				$orderby = 'a.featured DESC, fp.ordering';				break;			default :				$orderby = 'a.ordering';				break;		}		return $orderby;	}	/**	 * Translate an order code to a field for primary category ordering.	 *	 * @param   string	$orderDate	The ordering code.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.6	 */	public static function getQueryDate($orderDate)	{		$db = JFactory::getDbo();		switch ($orderDate)		{			case 'modified' :				$queryDate = ' CASE WHEN a.modified = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.modified END';				break;			// use created if publish_up is not set			case 'published' :				$queryDate = ' CASE WHEN a.publish_up = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.publish_up END ';				break;			case 'created' :			default :				$queryDate = ' a.created ';				break;		}		return $queryDate;	}	/**	 * Get join information for the voting query.	 *	 * @param   JRegistry	$param	An options object for the article.	 *	 * @return  array  	A named array with "select" and "join" keys.	 * @since   1.5	 */	public static function buildVotingQuery($params=null)	{		if (!$params)		{			$params = JComponentHelper::getParams('com_content');		}		$voting = $params->get('show_vote');		if ($voting)		{			// calculate voting count			$select = ' , ROUND(v.rating_sum / v.rating_count) AS rating, v.rating_count';			$join = ' LEFT JOIN #__content_rating AS v ON a.id = v.content_id';		}		else		{			$select = '';			$join = '';		}		$results = array ('select' => $select, 'join' => $join);		return $results;	}	/**	 * Method to order the intro articles array for ordering	 * down the columns instead of across.	 * The layout always lays the introtext articles out across columns.	 * Array is reordered so that, when articles are displayed in index order	 * across columns in the layout, the result is that the	 * desired article ordering is achieved down the columns.	 *	 * @param   array  $articles	Array of intro text articles	 * @param   integer	$numColumns	Number of columns in the layout	 *	 * @return  array  Reordered array to achieve desired ordering down columns	 * @since   1.6	 */	public static function orderDownColumns(&$articles, $numColumns = 1)	{		$count = count($articles);		// just return the same array if there is nothing to change		if ($numColumns == 1 || !is_array($articles) || $count <= $numColumns)		{			$return = $articles;		}		// we need to re-order the intro articles array		else {			// we need to preserve the original array keys			$keys = array_keys($articles);			$maxRows = ceil($count / $numColumns);			$numCells = $maxRows * $numColumns;			$numEmpty = $numCells - $count;			$index = array();			// calculate number of empty cells in the array			// fill in all cells of the array			// put -1 in empty cells so we can skip later			for ($row = 1, $i = 1; $row <= $maxRows; $row++)			{				for ($col = 1; $col <= $numColumns; $col++)				{					if ($numEmpty > ($numCells - $i))					{						// put -1 in empty cells						$index[$row][$col] = -1;					}					else {						// put in zero as placeholder						$index[$row][$col] = 0;					}					$i++;				}			}			// layout the articles in column order, skipping empty cells			$i = 0;			for ($col = 1; ($col <= $numColumns) && ($i < $count); $col++)			{				for ($row = 1; ($row <= $maxRows) && ($i < $count); $row++)				{					if ($index[$row][$col] != - 1)					{						$index[$row][$col] = $keys[$i];						$i++;					}				}			}			// now read the $index back row by row to get articles in right row/col			// so that they will actually be ordered down the columns (when read by row in the layout)			$return = array();			$i = 0;			for ($row = 1; ($row <= $maxRows) && ($i < $count); $row++)			{				for ($col = 1; ($col <= $numColumns) && ($i < $count); $col++)				{					$return[$keys[$i]] = $articles[$index[$row][$col]];					$i++;				}			}		}		return $return;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefaultlanguageHtml $this */?><?php echo JHtml::_('installation.stepbarlanguages'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a				class="btn"				href="#"				onclick="return Install.goToPage('languages');"				rel="prev"				title="<?php echo JText::_('JPREVIOUS'); ?>">				<i class="icon-arrow-left"></i>				<?php echo JText::_('JPREVIOUS'); ?>			</a>			<?php			// Check if ther is any languages to list, if not you cannot move forward			if ($this->items->administrator) :				?>				<a					class="btn btn-primary"					href="#"					onclick="Install.submitform();"					rel="next"					title="<?php echo JText::_('JNEXT'); ?>">					<i class="icon-arrow-right icon-white"></i>					<?php echo JText::_('JNEXT'); ?>				</a>				<?php endif; ?>		</div>	</div>	<h3><?php echo JText::_('INSTL_DEFAULTLANGUAGE_ADMINISTRATOR'); ?></h3>	<hr class="hr-condensed" />	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_DESC'); ?></p>	<table class="table table-striped table-condensed">		<tbody>		<tr>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_SELECT'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_LANGUAGE'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_TAG'); ?>			</th>		</tr>		</tbody>		<tbody>			<?php foreach ($this->items->administrator as $lang) : ?>			<tr>				<td>					<input						type="radio"						name="administratorlang"						value="<?php echo $lang->language; ?>"						<?php if ($lang->published) echo 'checked="checked"'; ?>					/>				</td>				<td align="center">					<?php echo $lang->name; ?>				</td>				<td align="center">					<?php echo $lang->language; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<h3><?php echo JText::_('INSTL_DEFAULTLANGUAGE_FRONTEND'); ?></h3>	<hr class="hr-condensed" />	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_DESC_FRONTEND'); ?></p>	<table class="table table-striped table-condensed">		<tbody>		<tr>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_SELECT'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_LANGUAGE'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_TAG'); ?>			</th>		</tr>		</tbody>		<tbody>		<?php foreach ($this->items->frontend as $lang) : ?>		<tr>			<td>				<input					type="radio"					name="frontendlang"					value="<?php echo $lang->language; ?>"					<?php if ($lang->published) echo 'checked="checked"'; ?>				/>			</td>			<td align="center">				<?php echo $lang->name; ?>			</td>			<td align="center">				<?php echo $lang->language; ?>			</td>		</tr>			<?php endforeach; ?>		</tbody>	</table>	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_NOTE'); ?></p>	<input type="hidden" name="task" value="setdefaultlanguage" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Smart download helper. Automatically uses cURL or URL fopen() wrappers to * fetch the package. * * @package  Joomla.Administrator * @since    2.5.4 */class AdmintoolsHelperDownload{	/**	 * Downloads from a URL and saves the result as a local file	 *	 * @param   string  $url     The URL to download from	 * @param   string  $target  The file path to download to	 *	 * @return  bool	True on success	 *	 * @since   2.5.4	 */	public static function download($url, $target)	{		jimport('joomla.filesystem.file');		$hackPermissions = false;		// Make sure the target does not exist		if (JFile::exists($target))		{			if (!@unlink($target))			{				JFile::delete($target);			}		}		// Try to open the output file for writing		$fp = @fopen($target, 'wb');		if ($fp === false)		{			// The file can not be opened for writing. Let's try a hack.			$empty = '';			if ( JFile::write($target, $empty) )			{				if ( self::chmod($target, 511) )				{					$fp = @fopen($target, 'wb');					$hackPermissions = true;				}			}		}		$result = false;		if ($fp !== false)		{			// First try to download directly to file if $fp !== false			$adapters = self::getAdapters();			$result = false;			while (!empty($adapters) && ($result === false))			{				// Run the current download method				$method = 'get' . strtoupper(array_shift($adapters));				$result = self::$method($url, $fp);				// Check if we have a download				if ($result === true)				{					// The download is complete, close the file pointer					@fclose($fp);					// If the filesize is not at least 1 byte, we consider it failed.					clearstatcache();					$filesize = @filesize($target);					if ($filesize <= 0)					{						$result = false;						$fp = @fopen($target, 'wb');					}				}			}			// If we have no download, close the file pointer			if ($result === false)			{				@fclose($fp);			}		}		if ($result === false)		{			// Delete the target file if it exists			if (file_exists($target))			{				if ( !@unlink($target) )				{					JFile::delete($target);				}			}			// Download and write using JFile::write();			$result = JFile::write($target, self::downloadAndReturn($url));		}		return $result;	}	/**	 * Downloads from a URL and returns the result as a string	 *	 * @param   string  $url  The URL to download from	 *	 * @return  mixed Result string on success, false on failure	 *	 * @since   2.5.4	 */	public static function downloadAndReturn($url)	{		$adapters = self::getAdapters();		$result = false;		while (!empty($adapters) && ($result === false))		{			// Run the current download method			$method = 'get' . strtoupper(array_shift($adapters));			$result = self::$method($url, null);		}		return $result;	}	/**	 * Does the server support PHP's cURL extension?	 *	 * @return  bool True if it is supported	 *	 * @since   2.5.4	 */	private static function hasCURL()	{		static $result = null;		if (is_null($result))		{			$result = function_exists('curl_init');		}		return $result;	}	/**	 * Downloads the contents of a URL and writes them to disk (if $fp is not null)	 * or returns them as a string (if $fp is null)	 *	 * @param   string    $url       The URL to download from	 * @param   resource  $fp        The file pointer to download to. Omit to return the contents.	 * @param   boolean   $nofollow  Should we follow 301/302/307 redirection HTTP headers?	 *	 * @return   bool|string False on failure, true on success ($fp not null) or the URL contents (if $fp is null)	 *	 * @since   2.5.4	 */	private static function &getCURL($url, $fp = null, $nofollow = false)	{		$result = false;		$ch = curl_init($url);		if ( !@curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1) && !$nofollow )		{			// Safe Mode is enabled. We have to fetch the headers and			// parse any redirections present in there.			curl_setopt($ch, CURLOPT_AUTOREFERER, true);			curl_setopt($ch, CURLOPT_FAILONERROR, true);			curl_setopt($ch, CURLOPT_HEADER, true);			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);			curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);			curl_setopt($ch, CURLOPT_TIMEOUT, 30);			// Get the headers			$data = curl_exec($ch);			curl_close($ch);			// Init			$newURL = $url;			// Parse the headers			$lines = explode("\n", $data);			foreach ($lines as $line)			{				if (substr($line, 0, 9) == "Location:")				{					$newURL = trim(substr($line, 9));				}			}			if ($url != $newURL)			{				return self::getCURL($newURL, $fp);			}			else			{				return self::getCURL($newURL, $fp, true);			}		}		else		{			@curl_setopt($ch, CURLOPT_MAXREDIRS, 20);			if (function_exists('set_time_limit'))			{				set_time_limit(0);			}		}		curl_setopt($ch, CURLOPT_HEADER, 0);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);		curl_setopt($ch, CURLOPT_USERAGENT, 'Joomla/' . JVERSION);		if (is_resource($fp))		{			curl_setopt($ch, CURLOPT_FILE, $fp);		}		else		{			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);		}		$result = curl_exec($ch);		curl_close($ch);		return $result;	}	/**	 * Does the server support URL fopen() wrappers?	 *	 * @return  bool	 *	 * @since   2.5.4	 */	private static function hasFOPEN()	{		static $result = null;		if (is_null($result))		{			// If we are not allowed to use ini_get, we assume that URL fopen is			// disabled.			if (!function_exists('ini_get'))			{				$result = false;			}			else			{				$result = ini_get('allow_url_fopen');			}		}		return $result;	}	/**	 * Download from a URL using URL fopen() wrappers	 *	 * @param   string    $url  The URL to download from	 * @param   resource  $fp   The file pointer to download to; leave null to return the d/l file as a string	 *	 * @return  bool|string False on failure, true on success ($fp not null) or the URL contents (if $fp is null)	 *	 * @since   2.5.4	 */	private static function &getFOPEN($url, $fp = null)	{		$result = false;		// Track errors		if ( function_exists('ini_set') )		{			$track_errors = ini_set('track_errors', true);		}		// Open the URL for reading		if (function_exists('stream_context_create'))		{			$httpopts = array('user_agent' => 'Joomla/' . JVERSION);			$context = stream_context_create(array( 'http' => $httpopts ));			$ih = @fopen($url, 'r', false, $context);		}		else		{			// PHP 4 way (actually, it's just a fallback)			if ( function_exists('ini_set') )			{				ini_set('user_agent', 'Joomla/' . JVERSION);			}			$ih = @fopen($url, 'r');		}		// If fopen() fails, abort		if ( !is_resource($ih) )		{			return $result;		}		// Try to download		$bytes = 0;		$result = true;		$return = '';		while (!feof($ih) && $result)		{			$contents = fread($ih, 4096);			if ($contents === false)			{				@fclose($ih);				$result = false;				return $result;			}			else			{				$bytes += strlen($contents);				if (is_resource($fp))				{					$result = @fwrite($fp, $contents);				}				else				{					$return .= $contents;					unset($contents);				}			}		}		@fclose($ih);		if (is_resource($fp))		{			return $result;		}		elseif ( $result === true )		{			return $return;		}		else		{			return $result;		}	}	/**	 * Detect and return available download "adapters" (not really adapters, as	 * we don't follow the Adapter pattern, yet)	 *	 * @return  array	 *	 * @since   2.5.4	 */	private static function getAdapters()	{		// Detect available adapters		$adapters = array();		if (self::hasCURL())		{			$adapters[] = 'curl';		}		if (self::hasFOPEN())		{			$adapters[] = 'fopen';		}		return $adapters;	}	/**	 * Change the permissions of a file, optionally using FTP	 *	 * @param   string  $path  Absolute path to file	 * @param   int     $mode  Permissions, e.g. 0755	 *	 * @return  boolean True on success	 *	 * @since   2.5.4	 */	private static function chmod($path, $mode)	{		if (is_string($mode))		{			$mode = octdec($mode);			if ( ($mode < 0600) || ($mode > 0777) )			{				$mode = 0755;			}		}		$ftpOptions = JClientHelper::getCredentials('ftp');		// Check to make sure the path valid and clean		$path = JPath::clean($path);		if ($ftpOptions['enabled'] == 1)		{			// Connect the FTP client			$ftp = JClientFtp::getInstance(				$ftpOptions['host'], $ftpOptions['port'], null,				$ftpOptions['user'], $ftpOptions['pass']			);		}		if (@chmod($path, $mode))		{			$ret = true;		}		elseif ($ftpOptions['enabled'] == 1)		{			// Translate path and delete			$path = JPath::clean(str_replace(JPATH_ROOT, $ftpOptions['root'], $path), '/');			// FTP connector throws an error			$ret = $ftp->chmod($path, $mode);		} else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');JHtml::_('behavior.tooltip');if (isset($this->error)) : ?>	<div class="contact-error">		<?php echo $this->error; ?>	</div><?php endif; ?><div class="contact-form">	<form id="contact-form" action="<?php echo JRoute::_('index.php'); ?>" method="post" class="form-validate form-horizontal">		<fieldset>			<legend><?php echo JText::_('COM_CONTACT_FORM_LABEL'); ?></legend>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_name'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_name'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_email'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_email'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_subject'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_subject'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_message'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_message'); ?></div>			</div>				<?php 	if ($this->params->get('show_email_copy')){ ?>					<div class="control-group">						<div class="control-label"><?php echo $this->form->getLabel('contact_email_copy'); ?></div>						<div class="controls"><?php echo $this->form->getInput('contact_email_copy'); ?></div>					</div>				<?php 	} ?>			<?php //Dynamically load any additional fields from plugins. ?>			     <?php foreach ($this->form->getFieldsets() as $fieldset) : ?>			          <?php if ($fieldset->name != 'contact'):?>			               <?php $fields = $this->form->getFieldset($fieldset->name);?>			               <?php foreach ($fields as $field) : ?>			               	<div class="control-group">			                    <?php if ($field->hidden) : ?>			                    	<div class="controls">			                         <?php echo $field->input;?>			                        </div>			                    <?php else:?>			                         <div class="control-label">			                            <?php echo $field->label; ?>			                            <?php if (!$field->required && $field->type != "Spacer") : ?>			                               <span class="optional"><?php echo JText::_('COM_CONTACT_OPTIONAL');?></span>			                            <?php endif; ?>			                         </div>			                         <div class="controls"><?php echo $field->input;?></div>			                    <?php endif;?>			                   </div>			               <?php endforeach;?>			          <?php endif ?>			     <?php endforeach;?>				<div class="form-actions"><button class="btn btn-primary validate" type="submit"><?php echo JText::_('COM_CONTACT_CONTACT_SEND'); ?></button>					<input type="hidden" name="option" value="com_contact" />					<input type="hidden" name="task" value="contact.submit" />					<input type="hidden" name="return" value="<?php echo $this->return_page;?>" />					<input type="hidden" name="id" value="<?php echo $this->contact->slug; ?>" />					<?php echo JHtml::_('form.token'); ?>				</div>		</fieldset>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Categories List Controller * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesControllerCategories extends JControllerAdmin{	/**	 * Proxy for getModel	 *	 * @param   string	$name	The model name. Optional.	 * @param   string	$prefix	The class prefix. Optional.	 *	 * @return  object  The model.	 * @since   1.6	 */	public function getModel($name = 'Category', $prefix = 'CategoriesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Rebuild the nested set tree.	 *	 * @return  bool	False on failure or error, true on success.	 * @since   1.6	 */	public function rebuild()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$extension = $this->input->get('extension');		$this->setRedirect(JRoute::_('index.php?option=com_categories&view=categories&extension=' . $extension, false));		$model = $this->getModel();		if ($model->rebuild())		{			// Rebuild succeeded.			$this->setMessage(JText::_('COM_CATEGORIES_REBUILD_SUCCESS'));			return true;		}		else		{			// Rebuild failed.			$this->setMessage(JText::_('COM_CATEGORIES_REBUILD_FAILURE'));			return false;		}	}	/**	 * Save the manual order inputs from the categories list page.	 *	 * @return  void	 * @since   1.6	 */	public function saveorder()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			parent::saveorder();		}		else		{			// Nothing to reorder			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));			return true;		}	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$pks   = $this->input->post->get('cid', null, 'array');		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			// Get the model			$model = $this->getModel();			// Save the ordering			$return = $model->saveorder($pks, $order);			if ($return)			{				echo "1";			}		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Social Stream class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinStream extends JLinkedinObject{	/**	 * Method to add a new share. Note: post must contain comment and/or (title and url).	 *	 * @param   string   $visibility   One of anyone: all members or connections-only: connections only.	 * @param   string   $comment      Text of member's comment.	 * @param   string   $title        Title of shared document.	 * @param   string   $url          URL for shared content.	 * @param   string   $image        URL for image of shared content.	 * @param   string   $description  Description of shared content.	 * @param   boolean  $twitter      True to have LinkedIn pass the status message along to a member's tethered Twitter account.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 * @throws  RuntimeException	 */	public function share($visibility, $comment = null, $title = null, $url = null, $image = null, $description = null, $twitter = false)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/shares';		// Check if twitter is true.		if ($twitter)		{			$base .= '?twitter-post=true';		}		// Build xml.		$xml = '<share>				  <visibility>					 <code>' . $visibility . '</code>				  </visibility>';		// Check if comment specified.		if ($comment)		{			$xml .= '<comment>' . $comment . '</comment>';		}		// Check if title and url are specified.		if ($title && $url)		{			$xml .= '<content>					   <title>' . $title . '</title>					   <submitted-url>' . $url . '</submitted-url>';			// Check if image is specified.			if ($image)			{				$xml .= '<submitted-image-url>' . $image . '</submitted-image-url>';			}			// Check if descrption id specified.			if ($description)			{				$xml .= '<description>' . $description . '</description>';			}			$xml .= '</content>';		}		elseif (!$comment)		{			throw new RuntimeException('Post must contain comment and/or (title and url).');		}		$xml .= '</share>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to reshare an existing share.	 *	 * @param   string   $visibility  One of anyone: all members or connections-only: connections only.	 * @param   string   $id          The unique identifier for a share.	 * @param   string   $comment     Text of member's comment.	 * @param   boolean  $twitter     True to have LinkedIn pass the status message along to a member's tethered Twitter account.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 * @throws  RuntimeException	 */	public function reshare($visibility, $id, $comment = null, $twitter = false)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/shares';		// Check if twitter is true.		if ($twitter)		{			$base .= '?twitter-post=true';		}		// Build xml.		$xml = '<share>				  <visibility>					 <code>' . $visibility . '</code>				  </visibility>';		// Check if comment specified.		if ($comment)		{			$xml .= '<comment>' . $comment . '</comment>';		}		$xml .= '   <attribution>					   <share>					   	  <id>' . $id . '</id>					   </share>					</attribution>				 </share>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to get a particular member's current share.	 *	 * @param   string  $id   Member id of the profile you want.	 * @param   string  $url  The public profile URL.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getCurrentShare($id = null, $url = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if a member id is specified.		if ($id)		{			$base .= 'id=' . $id;		}		elseif (!$url)		{			$base .= '~';		}		// Check if profile url is specified.		if ($url)		{			$base .= 'url=' . $this->oauth->safeEncode($url);		}		$base .= ':(current-share)';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get a particular member's current share.	 *	 * @param   string   $id    Member id of the profile you want.	 * @param   string   $url   The public profile URL.	 * @param   boolean  $self  Used to return member's feed. Omitted to return aggregated network feed.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getShareStream($id = null, $url = null, $self = true)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if a member id is specified.		if ($id)		{			$base .= $id;		}		elseif (!$url)		{			$base .= '~';		}		// Check if profile url is specified.		if ($url)		{			$base .= 'url=' . $this->oauth->safeEncode($url);		}		$base .= '/network';		// Set request parameters.		$data['format'] = 'json';		$data['type'] = 'SHAR';		// Check if self is true		if ($self)		{			$data['scope'] = 'self';		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get the users network updates.	 *	 * @param   string   $id      Member id.	 * @param   boolean  $self    Used to return member's feed. Omitted to return aggregated network feed.	 * @param   mixed    $type    String containing any valid Network Update Type from the table or an array of strings	 * 							  to specify more than one Network Update type.	 * @param   integer  $count   Number of updates to return, with a maximum of 250.	 * @param   integer  $start   The offset by which to start Network Update pagination.	 * @param   string   $after   Timestamp after which to retrieve updates.	 * @param   string   $before  Timestamp before which to retrieve updates.	 * @param   boolean  $hidden  Whether to display updates from people the member has chosen to "hide" from their update stream.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getNetworkUpdates($id = null, $self = true, $type = null, $count = 0, $start = 0, $after = null, $before = null,		$hidden = false)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if a member id is specified.		if ($id)		{			$base .= $id;		}		else		{			$base .= '~';		}		$base .= '/network/updates';		// Set request parameters.		$data['format'] = 'json';		// Check if self is true.		if ($self)		{			$data['scope'] = 'self';		}		// Check if type is specified.		if ($type)		{			$data['type'] = $type;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if after is specified.		if ($after)		{			$data['after'] = $after;		}		// Check if before is specified.		if ($before > 0)		{			$data['before'] = $before;		}		// Check if hidden is true.		if ($hidden)		{			$data['hidden'] = $hidden;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get information about the current member's network.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getNetworkStats()	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/network/network-stats';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get the users network updates.	 *	 * @param   string  $body  The actual content of the update. You can use HTML to include links to the user name and the content the user	 *                         created. Other HTML tags are not supported. All body text should be HTML entity escaped and UTF-8 compliant.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function postNetworkUpdate($body)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/person-activities';		// Build the xml.		$xml = '<activity locale="en_US">					<content-type>linkedin-html</content-type>				    <body>' . $body . '</body>				</activity>';		$header['Content-Type'] = 'text/xml';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to retrieve all comments for a given network update.	 *	 * @param   string  $key  update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getComments($key)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/update-comments';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to post a new comment to an existing update.	 *	 * @param   string  $key      update/update-key representing an update.	 * @param   string  $comment  Maximum length of 700 characters	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function postComment($key, $comment)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/update-comments';		// Build the xml.		$xml = '<update-comment>				  <comment>' . $comment . '</comment>				</update-comment>';		$header['Content-Type'] = 'text/xml';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to retrieve the complete list of people who liked an update.	 *	 * @param   string  $key  update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getLikes($key)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/likes';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to like or unlike an update.	 *	 * @param   string   $key   Update/update-key representing an update.	 * @param   boolean  $like  True to like update, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _likeUnlike($key, $like)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/is-liked';		// Build xml.		$xml = '<is-liked>' . $this->booleanToString($like) . '</is-liked>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to like an update.	 *	 * @param   string  $key  Update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function like($key)	{		return $this->_likeUnlike($key, true);	}	/**	 * Method used to unlike an update.	 *	 * @param   string  $key  Update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unlike($key)	{		return $this->_likeUnlike($key, false);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModel', __DIR__ . '/extension.php');JLoader::register('JoomlaInstallerScript', JPATH_ADMINISTRATOR . '/components/com_admin/script.php');/** * Installer Manage Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelDatabase extends InstallerModel{	protected $_context = 'com_installer.discover';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Fixes database problems	 *	 * @return  void	 */	public function fix()	{		if (!$changeSet = $this->getItems())		{			return false;		}		$changeSet->fix();		$this->fixSchemaVersion($changeSet);		$this->fixUpdateVersion();		$installer = new JoomlaInstallerScript;		$installer->deleteUnexistingFiles();		$this->fixDefaultTextFilters();	}	/**	 * Gets the changeset object	 *	 * @return  JSchemaChangeset	 */	public function getItems()	{		$folder = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		try		{			$changeSet = JSchemaChangeset::getInstance(JFactory::getDbo(), $folder);		}		catch (RuntimeException $e)		{			JFactory::getApplication()->enqueueMessage($e->getMessage(), 'warning');			return false;		}		return $changeSet;	}	/**	 * Method to get a JPagination object for the data set.	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function getPagination()	{		return true;	}	/**	 * Get version from #__schemas table	 *	 * @return  mixed  the return value from the query, or null if the query fails	 *	 * @throws Exception	 */	public function getSchemaVersion()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('version_id')			->from($db->quoteName('#__schemas'))			->where('extension_id = 700');		$db->setQuery($query);		$result = $db->loadResult();		return $result;	}	/**	 * Fix schema version if wrong	 *	 * @param   JSchemaChangeSet  $changeSet  Schema change set	 *	 * @return   mixed  string schema version if success, false if fail	 */	public function fixSchemaVersion($changeSet)	{		// Get correct schema version -- last file in array		$schema = $changeSet->getSchema();		$db = JFactory::getDbo();		$result = false;		// Check value. If ok, don't do update		$version = $this->getSchemaVersion();		if ($version == $schema)		{			$result = $version;		}		else		{			// Delete old row			$query = $db->getQuery(true)				->delete($db->quoteName('#__schemas'))				->where($db->quoteName('extension_id') . ' = 700');			$db->setQuery($query);			$db->execute();			// Add new row			$query = $db->getQuery(true)				->insert($db->quoteName('#__schemas'))				->set($db->quoteName('extension_id') . '= 700')				->set($db->quoteName('version_id') . '= ' . $db->quote($schema));			$db->setQuery($query);			if ($db->execute())			{				$result = $schema;			}		}		return $result;	}	/**	 * Get current version from #__extensions table	 *	 * @return  mixed   version if successful, false if fail	 */	public function getUpdateVersion()	{		$table = JTable::getInstance('Extension');		$table->load('700');		$cache = new JRegistry($table->manifest_cache);		return $cache->get('version');	}	/**	 * Fix Joomla version in #__extensions table if wrong (doesn't equal JVersion short version)	 *	 * @return   mixed  string update version if success, false if fail	 */	public function fixUpdateVersion()	{		$table = JTable::getInstance('Extension');		$table->load('700');		$cache = new JRegistry($table->manifest_cache);		$updateVersion = $cache->get('version');		$cmsVersion = new JVersion;		if ($updateVersion == $cmsVersion->getShortVersion())		{			return $updateVersion;		}		else		{			$cache->set('version', $cmsVersion->getShortVersion());			$table->manifest_cache = $cache->toString();			if ($table->store())			{				return $cmsVersion->getShortVersion();			}			else			{				return false;			}		}	}	/**	 * For version 2.5.x only	 * Check if com_config parameters are blank.	 *	 * @return  string  default text filters (if any)	 */	public function getDefaultTextFilters()	{		$table = JTable::getInstance('Extension');		$table->load($table->find(array('name' => 'com_config')));		return $table->params;	}	/**	 * For version 2.5.x only	 * Check if com_config parameters are blank. If so, populate with com_content text filters.	 *	 * @return  mixed  boolean true if params are updated, null otherwise	 */	public function fixDefaultTextFilters()	{		$table = JTable::getInstance('Extension');		$table->load($table->find(array('name' => 'com_config')));		// Check for empty $config and non-empty content filters		if (!$table->params)		{			// Get filters from com_content and store if you find them			$contentParams = JComponentHelper::getParams('com_content');			if ($contentParams->get('filters'))			{				$newParams = new JRegistry;				$newParams->set('filters', $contentParams->get('filters'));				$table->params = (string) $newParams;				$table->store();				return true;			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Mediawiki * @since       12.3 */abstract class JMediawikiObject{	/**	 * @var    JRegistry  Options for the MediaWiki object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JMediawikiHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $client;	/**     * Constructor.     *     * @param   JRegistry       $options  Mediawiki options object.     * @param   JMediawikiHttp  $client   The HTTP client object.     *     * @since   12.3     */	public function __construct(JRegistry $options = null, JMediawikiHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JMediawikiHttp($this->options);	}	/**     * Method to build and return a full request URL for the request.     *     * @param   string  $path  URL to inflect     *     * @return  string   The request URL.     *     * @since   12.3     */	protected function fetchUrl($path)	{		// Append the path with output format		$path .= '&format=xml';		$uri = new JUri($this->options->get('api.url') . '/api.php' . $path);		if ($this->options->get('api.username', false))		{			$uri->setUser($this->options->get('api.username'));		}		if ($this->options->get('api.password', false))		{			$uri->setPass($this->options->get('api.password'));		}		return (string) $uri;	}	/**     * Method to build request parameters from a string array.     *     * @param   array  $params  string array that contains the parameters     *     * @return  string   request parameter     *     * @since   12.3     */	public function buildParameter(array $params)	{		$path = '';		foreach ($params as $param)		{			$path .= $param;			if (next($params) == true)			{				$path .= '|';			}		}		return $path;	}	/**     * Method to validate response for errors     *     * @param   JHttpresponse  $response  reponse from the mediawiki server     *     * @return  Object     *     * @since   12.3     */	public function validateResponse($response)	{		$xml = simplexml_load_string($response->body);		if (isset($xml->warnings))		{			throw new DomainException($xml->warnings->info);		}		if (isset($xml->error))		{			throw new DomainException($xml->error['info']);		}		return $xml;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Adapter Class * Retains common adapter pattern functions * Class harvested from joomla.installer.installer * * @package     Joomla.Platform * @subpackage  Base * @since       11.1 */class JAdapter extends JObject{	/**	 * Associative array of adapters	 *	 * @var    array	 * @since  11.1	 */	protected $_adapters = array();	/**	 * Adapter Folder	 * @var    string	 * @since  11.1	 */	protected $_adapterfolder = 'adapters';	/**	 * @var    string	Adapter Class Prefix	 * @since  11.1	 */	protected $_classprefix = 'J';	/**	 * Base Path for the adapter instance	 *	 * @var    string	 * @since  11.1	 */	protected $_basepath = null;	/**	 * Database Connector Object	 *	 * @var    JDatabaseDriver	 * @since  11.1	 */	protected $_db;	/**	 * Constructor	 *	 * @param   string  $basepath       Base Path of the adapters	 * @param   string  $classprefix    Class prefix of adapters	 * @param   string  $adapterfolder  Name of folder to append to base path	 *	 * @since   11.1	 */	public function __construct($basepath, $classprefix = null, $adapterfolder = null)	{		$this->_basepath = $basepath;		$this->_classprefix = $classprefix ? $classprefix : 'J';		$this->_adapterfolder = $adapterfolder ? $adapterfolder : 'adapters';		$this->_db = JFactory::getDbo();	}	/**	 * Get the database connector object	 *	 * @return  JDatabaseDriver  Database connector object	 *	 * @since   11.1	 */	public function getDBO()	{		return $this->_db;	}	/**	 * Set an adapter by name	 *	 * @param   string  $name      Adapter name	 * @param   object  &$adapter  Adapter object	 * @param   array   $options   Adapter options	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 */	public function setAdapter($name, &$adapter = null, $options = array())	{		if (!is_object($adapter))		{			$fullpath = $this->_basepath . '/' . $this->_adapterfolder . '/' . strtolower($name) . '.php';			if (!file_exists($fullpath))			{				return false;			}			// Try to load the adapter object			require_once $fullpath;			$class = $this->_classprefix . ucfirst($name);			if (!class_exists($class))			{				return false;			}			$adapter = new $class($this, $this->_db, $options);		}		$this->_adapters[$name] = &$adapter;		return true;	}	/**	 * Return an adapter.	 *	 * @param   string  $name     Name of adapter to return	 * @param   array   $options  Adapter options	 *	 * @return  object  Adapter of type 'name' or false	 *	 * @since   11.1	 */	public function getAdapter($name, $options = array())	{		if (!array_key_exists($name, $this->_adapters))		{			if (!$this->setAdapter($name, $options))			{				$false = false;				return $false;			}		}		return $this->_adapters[$name];	}	/**	 * Loads all adapters.	 *	 * @param   array  $options  Adapter options	 *	 * @return  void	 *	 * @since   11.1	 */	public function loadAllAdapters($options = array())	{		$files = new DirectoryIterator($this->_basepath . '/' . $this->_adapterfolder);		foreach ($files as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Try to load the adapter object			require_once $this->_basepath . '/' . $this->_adapterfolder . '/' . $fileName;			// Derive the class name from the filename.			$name = str_ireplace('.php', '', ucfirst(trim($fileName)));			$class = $this->_classprefix . ucfirst($name);			if (!class_exists($class))			{				// Skip to next one				continue;			}			$adapter = new $class($this, $this->_db, $options);			$this->_adapters[$name] = clone $adapter;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Getting params from template$params = JFactory::getApplication()->getTemplate(true)->params;$app = JFactory::getApplication();$doc = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;// Detecting Active Variables$option   = $app->input->getCmd('option', '');$view     = $app->input->getCmd('view', '');$layout   = $app->input->getCmd('layout', '');$task     = $app->input->getCmd('task', '');$itemid   = $app->input->getCmd('Itemid', '');$sitename = $app->getCfg('sitename');if($task == "edit" || $layout == "form" ){	$fullWidth = 1;}else{	$fullWidth = 0;}// Add JavaScript FrameworksJHtml::_('bootstrap.framework');// Add Stylesheets$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Add current user information$user = JFactory::getUser();// Adjusting content widthif ($this->countModules('position-7') && $this->countModules('position-8')){	$span = "span6";}elseif ($this->countModules('position-7') && !$this->countModules('position-8')){	$span = "span9";}elseif (!$this->countModules('position-7') && $this->countModules('position-8')){	$span = "span9";}else{	$span = "span12";}// Logo file or site title paramif ($this->params->get('logoFile')){	$logo = '<img src="'. JURI::root() . $this->params->get('logoFile') .'" alt="'. $sitename .'" />';}elseif ($this->params->get('sitetitle')){	$logo = '<span class="site-title" title="'. $sitename .'">'. htmlspecialchars($this->params->get('sitetitle')) .'</span>';}else{	$logo = '<span class="site-title" title="'. $sitename .'">'. $sitename .'</span>';}?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0" />	<jdoc:include type="head" />	<?php	// Use of Google Font	if ($this->params->get('googleFont'))	{	?>		<link href='http://fonts.googleapis.com/css?family=<?php echo $this->params->get('googleFontName');?>' rel='stylesheet' type='text/css' />		<style type="text/css">			h1,h2,h3,h4,h5,h6,.site-title{				font-family: '<?php echo str_replace('+', ' ', $this->params->get('googleFontName'));?>', sans-serif;			}		</style>	<?php	}	?>	<?php	// Template color	if ($this->params->get('templateColor'))	{	?>	<style type="text/css">		body.site		{			border-top: 3px solid <?php echo $this->params->get('templateColor');?>;			background-color: <?php echo $this->params->get('templateBackgroundColor');?>		}		a		{			color: <?php echo $this->params->get('templateColor');?>;		}		.navbar-inner, .nav-list > .active > a, .nav-list > .active > a:hover, .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover, .nav-pills > .active > a, .nav-pills > .active > a:hover,		.btn-primary		{			background: <?php echo $this->params->get('templateColor');?>;		}		.navbar-inner		{			-moz-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			-webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);		}	</style>	<?php	}	?>	<!--[if lt IE 9]>		<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script>	<![endif]--></head><body class="site <?php echo $option	. ' view-' . $view	. ($layout ? ' layout-' . $layout : ' no-layout')	. ($task ? ' task-' . $task : ' no-task')	. ($itemid ? ' itemid-' . $itemid : '')	. ($params->get('fluidContainer') ? ' fluid' : '');?>">	<!-- Body -->	<div class="body">		<div class="container<?php echo ($params->get('fluidContainer') ? '-fluid' : '');?>">			<!-- Header -->			<div class="header">				<div class="header-inner clearfix">					<a class="brand pull-left" href="<?php echo $this->baseurl; ?>">						<?php echo $logo;?> <?php if ($this->params->get('sitedescription')) { echo '<div class="site-description">'. htmlspecialchars($this->params->get('sitedescription')) .'</div>'; } ?>					</a>					<div class="header-search pull-right">						<jdoc:include type="modules" name="position-0" style="none" />					</div>				</div>			</div>			<?php if ($this->countModules('position-1')) : ?>			<div class="navigation">				<jdoc:include type="modules" name="position-1" style="none" />			</div>			<?php endif; ?>			<jdoc:include type="modules" name="banner" style="xhtml" />			<div class="row-fluid">				<?php if ($this->countModules('position-8')) : ?>				<!-- Begin Sidebar -->				<div id="sidebar" class="span3">					<div class="sidebar-nav">						<jdoc:include type="modules" name="position-8" style="xhtml" />					</div>				</div>				<!-- End Sidebar -->				<?php endif; ?>				<div id="content" class="<?php echo $span;?>">					<!-- Begin Content -->					<jdoc:include type="modules" name="position-3" style="xhtml" />					<jdoc:include type="message" />					<jdoc:include type="component" />					<jdoc:include type="modules" name="position-2" style="none" />					<!-- End Content -->				</div>				<?php if ($this->countModules('position-7')) : ?>				<div id="aside" class="span3">					<!-- Begin Right Sidebar -->					<jdoc:include type="modules" name="position-7" style="well" />					<!-- End Right Sidebar -->				</div>				<?php endif; ?>			</div>		</div>	</div>	<!-- Footer -->	<div class="footer">		<div class="container<?php echo ($params->get('fluidContainer') ? '-fluid' : '');?>">			<hr />			<jdoc:include type="modules" name="footer" style="none" />			<p class="pull-right"><a href="#top" id="back-top"><?php echo JText::_('TPL_PROTOSTAR_BACKTOTOP'); ?></a></p>			<p>&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>		</div>	</div>	<jdoc:include type="modules" name="debug" style="none" /></body></html>
