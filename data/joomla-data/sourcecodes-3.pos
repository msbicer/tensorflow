<?php/** * @package     Joomla.Site * @subpackage  mod_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$headerText	= JString::trim($params->get('header_text'));$footerText	= JString::trim($params->get('footer_text'));$list = ModLanguagesHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_languages', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.path');/** * FTP configuration model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelFtp extends JModelBase{	/**	 * Find the ftp filesystem root for a given user/pass pair.	 *	 * @param   array  $options  Configuration options.	 *	 * @return  mixed  FTP root for given FTP user, or boolean false if not found.	 *	 * @since   3.1	 */	public function detectFtpRoot($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Connect and login to the FTP server.		// Use binary transfer mode to be able to compare files.		@$ftp = JClientFtp::getInstance($options->get('ftp_host'), $options->get('ftp_port'), array('type' => FTP_BINARY));		// Check to make sure FTP is connected and authenticated.		if (!$ftp->isConnected())		{			$app->enqueueMessage($options->get('ftp_host') . ':' . $options->get('ftp_port') . ' ' . JText::_('INSTL_FTP_NOCONNECT'), 'error');			return false;		}		if (!$ftp->login($options->get('ftp_user'), $options->get('ftp_pass')))		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOLOGIN'), 'error');			return false;		}		// Get the current working directory from the FTP server.		$cwd = $ftp->pwd();		if ($cwd === false)		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOPWD'), 'error');			return false;		}		$cwd = rtrim($cwd, '/');		// Get a list of folders in the current working directory.		$cwdFolders = $ftp->listDetails(null, 'folders');		if ($cwdFolders === false || count($cwdFolders) == 0)		{			$app->enqueueMessage(JText::_('INSTL_FTP_NODIRECTORYLISTING'), 'error');			return false;		}		// Get just the folder names from the list of folder data.		for ($i = 0, $n = count($cwdFolders); $i < $n; $i++)		{			$cwdFolders[$i] = $cwdFolders[$i]['name'];		}		// Check to see if Joomla is installed at the FTP current working directory.		$paths = array();		$known = array('administrator', 'components', 'installation', 'language', 'libraries', 'plugins');		if (count(array_diff($known, $cwdFolders)) == 0)		{			$paths[] = $cwd . '/';		}		// Search through the segments of JPATH_SITE looking for root possibilities.		$parts = explode(DIRECTORY_SEPARATOR, JPATH_SITE);		$tmp = '';		for ($i = count($parts) - 1; $i >= 0; $i--)		{			$tmp = '/' . $parts[$i] . $tmp;			if (in_array($parts[$i], $cwdFolders))			{				$paths[] = $cwd . $tmp;			}		}		// Check all possible paths for the real Joomla installation by comparing version files.		$rootPath = false;		$checkValue = file_get_contents(JPATH_LIBRARIES . '/cms/version/version.php');		foreach ($paths as $tmp)		{			$filePath = rtrim($tmp, '/') . '/libraries/cms/version/version.php';			$buffer = null;			@ $ftp->read($filePath, $buffer);			if ($buffer == $checkValue)			{				$rootPath = $tmp;				break;			}		}		// Close the FTP connection.		$ftp->quit();		// Return an error if no root path was found.		if ($rootPath === false)		{			$app->enqueueMessage(JText::_('INSTL_FTP_UNABLE_DETECT_ROOT_FOLDER'), 'error');			return false;		}		return $rootPath;	}	/**	 * Verify the FTP settings as being functional and correct.	 *	 * @param   array  $options  Configuration options.	 *	 * @return  mixed  FTP root for given FTP user, or boolean false if not found.	 *	 * @since   3.1	 */	public function verifyFtpSettings($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Connect and login to the FTP server.		@$ftp = JClientFtp::getInstance($options->get('ftp_host'), $options->get('ftp_port'));		// Check to make sure FTP is connected and authenticated.		if (!$ftp->isConnected())		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOCONNECT'), 'error');			return false;		}		if (!$ftp->login($options->get('ftp_user'), $options->get('ftp_pass')))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOLOGIN'), 'error');			return false;		}		// Since the root path will be trimmed when it gets saved to configuration.php,		// we want to test with the same value as well.		$root = rtrim($options->get('ftp_root'), '/');		// Verify PWD function		if ($ftp->pwd() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOPWD'), 'error');			return false;		}		// Verify root path exists		if (!$ftp->chdir($root))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOROOT'), 'error');			return false;		}		// Verify NLST function		if (($rootList = $ftp->listNames()) === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NONLST'), 'error');			return false;		}		// Verify LIST function		if ($ftp->listDetails() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOLIST'), 'error');			return false;		}		// Verify SYST function		if ($ftp->syst() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOSYST'), 'error');			return false;		}		// Verify valid root path, part one		$checkList = array('robots.txt', 'index.php');		if (count(array_diff($checkList, $rootList)))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_INVALIDROOT'), 'error');			return false;		}		// Verify RETR function		$buffer = null;		if ($ftp->read($root . '/libraries/cms/version/version.php', $buffer) === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NORETR'), 'error');			return false;		}		// Verify valid root path, part two		$checkValue = file_get_contents(JPATH_ROOT . '/libraries/cms/version/version.php');		if ($buffer !== $checkValue)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_INVALIDROOT'), 'error');			return false;		}		// Verify STOR function		if ($ftp->create($root . '/ftp_testfile') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOSTOR'), 'error');			return false;		}		// Verify DELE function		if ($ftp->delete($root . '/ftp_testfile') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NODELE'), 'error');			return false;		}		// Verify MKD function		if ($ftp->mkdir($root . '/ftp_testdir') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOMKD'), 'error');			return false;		}		// Verify RMD function		if ($ftp->delete($root . '/ftp_testdir') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NORMD'), 'error');			return false;		}		$ftp->quit();		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for form elements * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlForm{	/**	 * Displays a hidden token field to reduce the risk of CSRF exploits	 *	 * Use in conjunction with JSession::checkToken	 *	 * @return  string  A hidden input field with a token	 *	 * @see     JSession::checkToken	 * @since   11.1	 */	public static function token()	{		return '<input type="hidden" name="' . JSession::getFormToken() . '" value="1" />';	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;// Activate the highlighter if enabled.if (!empty($this->query->highlight) && $this->params->get('highlight_terms', 1)){	JHtml::_('behavior.highlighter', $this->query->highlight);}// Get the application object.$app = JFactory::getApplication();// Display the suggested search if it is different from the current search.if (($this->suggested && $this->params->get('show_suggested_query', 1)) || ($this->explained && $this->params->get('show_explained_query', 1))):?>	<div id="search-query-explained">		<?php		// Display the suggested search query.		if ($this->suggested && $this->params->get('show_suggested_query', 1))		{			// Replace the base query string with the suggested query string.			$uri = JUri::getInstance($this->query->toURI());			$uri->setVar('q', $this->suggested);			// Compile the suggested query link.			$link	= '<a href="' . JRoute::_($uri->toString(array('path', 'query'))) . '">'					. $this->escape($this->suggested)					. '</a>';			echo JText::sprintf('COM_FINDER_SEARCH_SIMILAR', $link);		}		// Display the explained search query.		elseif ($this->explained && $this->params->get('show_explained_query', 1))		{			echo $this->explained;		}		?>	</div><?phpendif;if ($this->total == 0):?>	<div id="search-result-empty">		<h2><?php echo JText::_('COM_FINDER_SEARCH_NO_RESULTS_HEADING'); ?></h2>		<?php if ($app->getLanguageFilter()) : ?>		<p><?php echo JText::sprintf('COM_FINDER_SEARCH_NO_RESULTS_BODY_MULTILANG', $this->escape($this->query->input)); ?></p>		<?php else : ?>		<p><?php echo JText::sprintf('COM_FINDER_SEARCH_NO_RESULTS_BODY', $this->escape($this->query->input)); ?></p>		<?php endif; ?>	</div><?phpelse:	// Prepare the pagination string.  Results X - Y of Z	$start	= (int) $this->pagination->get('limitstart') + 1;	$total	= (int) $this->pagination->get('total');	$limit	= (int) $this->pagination->get('limit') * $this->pagination->pagesTotal;	$limit	= (int) ($limit > $total ? $total : $limit);	$pages	= JText::sprintf('COM_FINDER_SEARCH_RESULTS_OF', $start, $limit, $total);?>	<br id="highlighter-start" />	<ul class="search-results<?php echo $this->pageclass_sfx; ?> list-striped">		<?php		for ($i = 0, $n = count($this->results); $i < $n; $i++):			$this->result	= &$this->results[$i];			$layout			= $this->getLayoutFile($this->result->layout);		?>		<?php echo $this->loadTemplate($layout); ?>		<?php		endfor;		?>	</ul>	<br id="highlighter-end" />	<div class="search-pagination">		<div class="pagination">			<?php echo $this->pagination->getPagesLinks(); ?>		</div>		<div class="search-pages-counter">			<?php echo $pages; ?>		</div>	</div><?phpendif;
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="registration-complete<?php echo $this->pageclass_sfx;?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Rijndael 256 encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipherRijndael256 extends JCryptCipherMcrypt{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type = MCRYPT_RIJNDAEL_256;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode = MCRYPT_MODE_CBC;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType = 'rijndael256';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;?><h3>	<?php echo JText::_('COM_FINDER_STATISTICS_TITLE') ?></h3><div class="row-fluid">	<div class="span6">		<p class="tab-description"><?php echo JText::sprintf('COM_FINDER_STATISTICS_STATS_DESCRIPTION', number_format($this->data->term_count), number_format($this->data->link_count), number_format($this->data->taxonomy_node_count), number_format($this->data->taxonomy_branch_count)); ?></p>		<table class="table table-striped table-condensed">			<thead>				<tr>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_HEADING');?>					</th>					<th class="center">						<?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_COUNT');?>					</th>				</tr>			</thead>			<tbody>				<?php foreach ($this->data->type_list as $type) :?>				<tr>					<td>						<?php echo $type->type_title;?>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($type->link_count);?></span>					</td>				</tr>				<?php endforeach; ?>				<tr>					<td>						<strong><?php echo JText::_('COM_FINDER_STATISTICS_LINK_TYPE_TOTAL'); ?></strong>					</td>					<td>						<span class="badge badge-info"><?php echo number_format($this->data->link_count); ?></span>					</td>				</tr>			</tbody>		</table>	</div></div>
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Controller * * @package     Joomla.Site * @subpackage  com_wrapper * @since       1.5 */class WrapperController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Set the default view name and format from the Request.		$vName = $this->input->get('view', 'wrapper');		$this->input->set('view', $vName);		return parent::display($cachable, array('Itemid' => 'INT'));	}}
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */// Initialize Joomla frameworkconst _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';/** * Cron job to trash expired cache data * * @package  Joomla.CLI * @since    2.5 */class GarbageCron extends JApplicationCli{	/**	 * Entry point for the script	 *	 * @return  void	 *	 * @since   2.5	 */	public function doExecute()	{		$cache = JFactory::getCache();		$cache->gc();	}}JApplicationCli::getInstance('GarbageCron')->execute();
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="createdby">				<?php $author = $displayData['item']->author; ?>				<?php $author = ($displayData['item']->created_by_alias ? $displayData['item']->created_by_alias : $author); ?>				<?php if (!empty($displayData['item']->contactid ) && $displayData['params']->get('link_author') == true) : ?>					<?php					echo JText::sprintf('COM_CONTENT_WRITTEN_BY',						JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$displayData['item']->contactid), $author)					); ?>				<?php else :?>					<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache Model * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheModelCache extends JModelList{	/**	 * An Array of CacheItems indexed by cache group ID	 *	 * @var Array	 */	protected $_data = array();	/**	 * Group total	 *	 * @var integer	 */	protected $_total = null;	/**	 * Pagination object	 *	 * @var object	 */	protected $_pagination = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$clientId = $this->getUserStateFromRequest($this->context.'.filter.client_id', 'filter_client_id', 0, 'int');		$this->setState('clientId', $clientId == 1 ? 1 : 0);		$client	= JApplicationHelper::getClientInfo($clientId);		$this->setState('client', $client);		parent::populateState('group', 'asc');	}	/**	 * Method to get cache data	 *	 * @return array	 */	public function getData()	{		if (empty($this->_data))		{			$cache = $this->getCache();			$data  = $cache->getAll();			if ($data != false)			{				$this->_data = $data;				$this->_total = count($data);				if ($this->_total)				{					// Apply custom ordering					$ordering 	= $this->getState('list.ordering');					$direction 	= ($this->getState('list.direction') == 'asc') ? 1 : -1;					jimport('joomla.utilities.arrayhelper');					$this->_data = JArrayHelper::sortObjects($data, $ordering, $direction);					// Apply custom pagination					if ($this->_total > $this->getState('list.limit') && $this->getState('list.limit'))					{						$this->_data = array_slice($this->_data, $this->getState('list.start'), $this->getState('list.limit'));					}				}			} else {				$this->_data = array();			}		}		return $this->_data;	}	/**	 * Method to get cache instance	 *	 * @return object	 */	public function getCache()	{		$conf = JFactory::getConfig();		$options = array(			'defaultgroup'	=> '',			'storage' 		=> $conf->get('cache_handler', ''),			'caching'		=> true,			'cachebase'		=> ($this->getState('clientId') == 1) ? JPATH_ADMINISTRATOR . '/cache' : $conf->get('cache_path', JPATH_SITE . '/cache')		);		$cache = JCache::getInstance('', $options);		return $cache;	}	/**	 * Method to get client data	 *	 * @return array	 */	public function getClient()	{		return $this->getState('client');	}	/**	 * Get the number of current Cache Groups	 *	 * @return  int	 */	public function getTotal()	{		if (empty($this->_total))		{			$this->_total = count($this->getData());		}		return $this->_total;	}	/**	 * Method to get a pagination object for the cache	 *	 * @return  integer	 */	public function getPagination()	{		if (empty($this->_pagination))		{			$this->_pagination = new JPagination($this->getTotal(), $this->getState('list.start'), $this->getState('list.limit'));		}		return $this->_pagination;	}	/**	 * Clean out a cache group as named by param.	 * If no param is passed clean all cache groups.	 *	 * @param String $group	 */	public function clean($group = '')	{		$cache = $this->getCache();		$cache->clean($group);	}	public function cleanlist($array)	{		foreach ($array as $group)		{			$this->clean($group);		}	}	public function purge()	{		$cache = JFactory::getCache('');		return $cache->gc();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_SYSTEM_INFORMATION'); ?></legend>	<table class="table table-striped">		<thead>			<tr>				<th width="25%">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_BUILT_ON'); ?></strong>				</td>				<td>					<?php echo $this->info['php'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_COLLATION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbcollation'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['phpversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEB_SERVER'); ?></strong>				</td>				<td>					<?php echo JHtml::_('system.server', $this->info['server']); ?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEBSERVER_TO_PHP_INTERFACE'); ?></strong>				</td>				<td>					<?php echo $this->info['sapi_name'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_JOOMLA_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['version'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PLATFORM_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['platform'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_USER_AGENT'); ?></strong>				</td>				<td>					<?php echo htmlspecialchars($this->info['useragent']);?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Form Rule class for the prefix DB. * * @package  Joomla.Installation * @since    1.7 */class JFormRulePrefix extends JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  1.7	 */	protected $regex = '^[a-z][a-z0-9]*_$';	/**	 * The regular expression modifiers to use when testing a form field value.	 *	 * @var    string	 * @since  1.7	 */	protected $modifiers = 'i';}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorSqlite extends JDatabaseIteratorPdo{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app	= JFactory::getApplication();$style = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');?><div class="media btn-group">	<a href="#" id="thumbs" onclick="MediaManager.setViewType('thumbs')" class="btn <?php echo ($style == "thumbs") ? 'active' : '';?>">	<i class="icon-grid-view-2"></i> <?php echo JText::_('COM_MEDIA_THUMBNAIL_VIEW'); ?></a>	<a href="#" id="details" onclick="MediaManager.setViewType('details')" class="btn <?php echo ($style == "details") ? 'active' : '';?>">	<i class="icon-list-view"></i> <?php echo JText::_('COM_MEDIA_DETAIL_VIEW'); ?></a></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');jimport('joomla.html.html.bootstrap');?><div class="contact<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif; ?>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<div class="page-header">			<h2>				<?php if ($this->item->published == 0) : ?>					<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>				<?php endif; ?>				<span class="contact-name"><?php echo $this->contact->name; ?></span>			</h2>		</div>	<?php endif;  ?>	<?php if ($this->params->get('show_contact_category') == 'show_no_link') : ?>		<h3>			<span class="contact-category"><?php echo $this->contact->category_title; ?></span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_category') == 'show_with_link') : ?>		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid); ?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_list') && count($this->contacts) > 1) : ?>		<form action="#" method="get" name="selectForm" id="selectForm">			<?php echo JText::_('COM_CONTACT_SELECT_CONTACT'); ?>			<?php echo JHtml::_('select.genericlist', $this->contacts, 'id', 'class="inputbox" onchange="document.location.href = this.value"', 'link', 'name', $this->contact->link);?>		</form>	<?php endif; ?>	<?php if ($this->params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?> 	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.startAccordion', 'slide-contact', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_DETAILS'), 'basic-details'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic-details', JText::_('COM_CONTACT_DETAILS', true)); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'plain'):?>		<?php  echo '<h3>'. JText::_('COM_CONTACT_DETAILS').'</h3>';  ?>	<?php endif; ?>	<?php if ($this->contact->image && $this->params->get('show_image')) : ?>		<div class="thumbnail pull-right">			<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle')); ?>		</div>	<?php endif; ?>	<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>		<dl class="contact-position dl-horizontal">			<dd>				<?php echo $this->contact->con_position; ?>			</dd>		</dl>	<?php endif; ?>	<?php echo $this->loadTemplate('address'); ?>	<?php if ($this->params->get('allow_vcard')) :	?>		<?php echo JText::_('COM_CONTACT_DOWNLOAD_INFORMATION_AS');?>		<a href="<?php echo JRoute::_('index.php?option=com_contact&amp;view=contact&amp;id='.$this->contact->id . '&amp;format=vcf'); ?>">		<?php echo JText::_('COM_CONTACT_VCARD');?></a>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endSlide'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_email_form') && ($this->contact->email_to || $this->contact->user_id)) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_EMAIL_FORM'), 'display-form'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-form', JText::_('COM_CONTACT_EMAIL_FORM', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_EMAIL_FORM').'</h3>';  ?>		<?php endif; ?>		<?php  echo $this->loadTemplate('form');  ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>			<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_links')) : ?>		<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_articles') && $this->contact->user_id && $this->contact->articles) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('JGLOBAL_ARTICLES'), 'display-articles'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-articles', JText::_('JGLOBAL_ARTICLES', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('JGLOBAL_ARTICLES').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('articles'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_profile') && $this->contact->user_id && JPluginHelper::isEnabled('user', 'profile')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_PROFILE'), 'display-profile'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-profile', JText::_('COM_CONTACT_PROFILE', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_PROFILE').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('profile'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->contact->misc && $this->params->get('show_misc')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_OTHER_INFORMATION'), 'display-misc'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-misc', JText::_('COM_CONTACT_OTHER_INFORMATION', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_OTHER_INFORMATION').'</h3>';  ?>		<?php endif; ?>		<div class="contact-miscinfo">			<dl class="dl-horizontal">				<dt>					<span class="<?php echo $this->params->get('marker_class'); ?>">					<?php echo $this->params->get('marker_misc'); ?>					</span>				</dt>				<dd>					<span class="contact-misc">						<?php echo $this->contact->misc; ?>					</span>				</dd>			</dl>		</div>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endAccordion'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $displayData['item']->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_MESSAGES_ADD'),			'index.php?option=com_messages&view=message&layout=edit',			$vName == 'message'		);		JHtmlSidebar::addEntry(			JText::_('COM_MESSAGES_READ'),			'index.php?option=com_messages',			$vName == 'messages'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$actions = JAccess::getActions('com_messages');		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, 'com_messages'));		}		return $result;	}	/**	 * Get a list of filter options for the state of a module.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getStateOptions()	{		// Build the filter options.		$options	= array();		$options[]	= JHtml::_('select.option',	'1',	JText::_('COM_MESSAGES_OPTION_READ'));		$options[]	= JHtml::_('select.option',	'0',	JText::_('COM_MESSAGES_OPTION_UNREAD'));		$options[]	= JHtml::_('select.option',	'-2',	JText::_('JTRASHED'));		return $options;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML utility class for creating a sortable table list * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlSortablelist{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the Sortable script and make table sortable	 *	 * @param   string   $tableId                 DOM id of the table	 * @param   string   $formId                  DOM id of the form	 * @param   string   $sortDir                 Sort direction	 * @param   string   $saveOrderingUrl         Save ordering url, ajax-load after an item dropped	 * @param   boolean  $proceedSaveOrderButton  Set whether a save order button is displayed	 * @param   boolean  $nestedList              Set whether the list is a nested list	 *	 * @return  void	 *	 * @since   3.0	 */	public static function sortable($tableId, $formId, $sortDir = 'asc', $saveOrderingUrl, $proceedSaveOrderButton = true, $nestedList = false)	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Depends on jQuery UI		JHtml::_('jquery.ui', array('core', 'sortable'));		JHtml::_('script', 'jui/sortablelist.js', false, true);		JHtml::_('stylesheet', 'jui/sortablelist.css', false, true, false);		// Attach sortable to document		JFactory::getDocument()->addScriptDeclaration("			(function ($){				$(document).ready(function (){					var sortableList = new $.JSortableList('#" . $tableId . " tbody','" . $formId . "','" . $sortDir . "' , '" . $saveOrderingUrl . "','','" . $nestedList . "');				});			})(jQuery);			"		);		if ($proceedSaveOrderButton)		{			self::_proceedSaveOrderButton();		}		// Set static array		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to inject script for enabled and disable Save order button	 * when changing value of ordering input boxes	 *	 * @return  void	 *	 * @since   3.0	 */	public static function _proceedSaveOrderButton()	{		JFactory::getDocument()->addScriptDeclaration(			"(function ($){				$(document).ready(function (){					var saveOrderButton = $('.saveorder');					saveOrderButton.css({'opacity':'0.2', 'cursor':'default'}).attr('onclick','return false;');					var oldOrderingValue = '';					$('.text-area-order').focus(function ()					{						oldOrderingValue = $(this).attr('value');					})					.keyup(function (){						var newOrderingValue = $(this).attr('value');						if (oldOrderingValue != newOrderingValue)						{							saveOrderButton.css({'opacity':'1', 'cursor':'pointer'}).removeAttr('onclick')						}					});				});			})(jQuery);"		);		return;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Rest model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelLogin extends JModelForm{	/**	 * Method to get the login form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.login', 'login', array('load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  array  The default data is an empty array.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered login form data.		$app  = JFactory::getApplication();		$data = $app->getUserState('users.login.form.data', array());		// check for return URL from the request first		if ($return = JRequest::getVar('return', '', 'method', 'base64'))		{			$data['return'] = base64_decode($return);			if (!JURI::isInternal($data['return']))			{				$data['return'] = '';			}		}		// Set the return URL if empty.		if (!isset($data['return']) || empty($data['return']))		{			$data['return'] = 'index.php?option=com_users&view=profile';		}		$app->setUserState('users.login.form.data', $data);		$this->preprocessData('com_users.login', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$params	= JFactory::getApplication()->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Override JModelAdmin::preprocessForm to ensure the correct plugin group is loaded.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewSummaryHtml $this */// Determine if the configuration file path is writable.$path = JPATH_CONFIGURATION . '/configuration.php';$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');$prev = $useftp ? 'ftp' : 'database';?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('<?php echo $prev; ?>');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('INSTL_SUMMARY_INSTALL'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('INSTL_SUMMARY_INSTALL'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_FINALISATION'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('sample_file'); ?>		</div>		<div class="controls">			<div class="help-block">				<?php echo $this->form->getInput('sample_file'); ?>			</div>			<p class="help-block">				<?php echo JText::_('INSTL_SITE_INSTALL_SAMPLE_DESC'); ?>			</p>		</div>	</div>	<h3><?php echo JText::_('INSTL_STEP_SUMMARY_LABEL'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group" id="summary_email">		<div class="control-label">			<?php echo $this->form->getLabel('summary_email'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('summary_email'); ?>			<p class="help-block">				<?php echo JText::sprintf('INSTL_SUMMARY_EMAIL_DESC', '<span class="label">' . $this->options['admin_email'] . '</span>'); ?>			</p>		</div>	</div>	<div class="control-group" id="email_passwords" style="display:none;">		<div class="control-label">			<?php echo $this->form->getLabel('summary_email_passwords'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('summary_email_passwords'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_SUMMARY_EMAIL_PASSWORDS_DESC'); ?>			</p>		</div>	</div>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_SITE'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('INSTL_SITE_NAME_LABEL'); ?>						</td>						<td>							<?php echo $this->options['site_name']; ?>						</td>					</tr>					<?php if ($this->options['site_metadesc']) : ?>					<tr>						<td class="item">							<?php echo JText::_('INSTL_SITE_METADESC_LABEL'); ?>						</td>						<td>							<?php echo $this->options['site_metadesc']; ?>						</td>					</tr>					<?php endif; ?>					<tr>						<td class="item">							<?php echo JText::_('INSTL_SITE_OFFLINE_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['site_offline']) ? 'success' : 'important'; ?>">								<?php echo JText::_(($this->options['site_offline']) ? 'JYES' : 'JNO'); ?>							</span>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_ADMIN_EMAIL_LABEL'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_email']; ?></span>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_ADMIN_USER_LABEL'); ?>						</td>						<td>							<span class="label"><?php echo $this->options['admin_user']; ?></span>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_ADMIN_PASSWORD_LABEL'); ?>						</td>						<td>							<?php echo $this->options['admin_password'] ? '***': ''; ?>						</td>					</tr>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_DATABASE'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_TYPE_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_type']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_HOST_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_host']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_USER_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_user']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_PASSWORD_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_pass'] ? '***': ''; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_NAME_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_name']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_PREFIX_LABEL'); ?>						</td>						<td>							<?php echo $this->options['db_prefix']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_DATABASE_OLD_PROCESS_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['db_old'] == 'remove') ? 'important' : 'success'; ?>">								<?php echo JText::_(($this->options['db_old'] == 'remove') ? 'INSTL_DATABASE_FIELD_VALUE_REMOVE' : 'INSTL_DATABASE_FIELD_VALUE_BACKUP'); ?>							</span>						</td>					</tr>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<?php if ($useftp) : ?>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_FTP'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_ENABLE_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['ftp_enable']) ? 'success' : 'important'; ?>">								<?php echo JText::_(($this->options['ftp_enable']) ? 'JYES' : 'JNO'); ?>							</span>						</td>					</tr>					<?php if($this->options['ftp_enable']) : ?>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_USER_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_user']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_PASSWORD_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_pass'] ? '***': ''; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_HOST_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_host']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_PORT_LABEL'); ?>						</td>						<td>							<?php echo $this->options['ftp_port']; ?>						</td>					</tr>					<tr>						<td class="item">							<?php echo JText::_('INSTL_FTP_SAVE_LABEL'); ?>						</td>						<td>							<span class="label label-<?php echo ($this->options['ftp_save']) ? 'important' : 'success'; ?>">								<?php echo JText::_(($this->options['ftp_save']) ? 'JYES' : 'JNO'); ?>							</span>						</td>					</tr>					<?php endif; ?>				</tbody>				<tfoot>				<tr>					<td colspan="2"></td>				</tr>				</tfoot>			</table>		</div>	</div>	<?php endif; ?>	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_TITLE'); ?></h3>			<hr class="hr-condensed" />			<table class="table table-striped table-condensed">				<tbody>				<?php foreach ($this->phpoptions as $option) : ?>					<tr>						<td class="item">							<?php echo $option->label; ?>						</td>						<td>							<span class="label label-<?php echo ($option->state) ? 'success' : 'important'; ?>">								<?php echo JText::_(($option->state) ? 'JYES' : 'JNO'); ?>								<?php if ($option->notice):?>								<i class="icon-info-sign icon-white hasTooltip" title="<?php echo $option->notice; ?>"></i>								<?php endif;?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<thead>					<tr>						<th>							<?php echo JText::_('INSTL_PRECHECK_DIRECTIVE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_ACTUAL'); ?>						</th>					</tr>				</thead>				<tbody>				<?php foreach ($this->phpsettings as $setting) : ?>					<tr>						<td>							<?php echo $setting->label; ?>						</td>						<td>							<span class="label label-success disabled">								<?php echo JText::_(($setting->recommended) ? 'JON' : 'JOFF'); ?>							</span>						</td>						<td>							<span class="label label-<?php echo ($setting->state === $setting->recommended) ? 'success' : 'warning'; ?>">								<?php echo JText::_(($setting->state) ? 'JON' : 'JOFF'); ?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="3"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<input type="hidden" name="task" value="summary" />	<?php echo JHtml::_('form.token'); ?></form><script type="text/javascript">	window.addEvent('domready', function() {		document.getElements('input[name=jform[summary_email]]').each(function(el){			el.addEvent('click', function(){Install.toggle('email_passwords', 'summary_email', 1);});		});		Install.toggle('email_passwords', 'summary_email', 1);	});</script>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of contacts * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$contactId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text' .				' FROM #__contact_details' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $contactId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $contactId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Login Controller * * @package     Joomla.Administrator * @subpackage  com_login * @since       1.5 */class LoginController extends JControllerLegacy{	/**	 * Typical view method for MVC based architecture	 *	 * This function is provide as a default implementation, in most cases	 * you will need to override it in your own controllers.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		// Special treatment is required for this component, as this view may be called		// after a session timeout. We must reset the view and layout prior to display		// otherwise an error will occur.		$this->input->set('view', 'login');		$this->input->set('layout', 'default');		parent::display();	}	/**	 * Method to log in a user.	 *	 * @return  void	 */	public function login()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$model = $this->getModel('login');		$credentials = $model->getState('credentials');		$return = $model->getState('return');		$result = $app->login($credentials, array('action' => 'core.login.admin'));		if (!($result instanceof Exception))		{			$app->redirect($return);		}		parent::display();	}	/**	 * Method to log out a user.	 *	 * @return  void	 */	public function logout()	{		JSession::checkToken('request') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		$userid = $this->input->getInt('uid', null);		$options = array(			'clientid' => ($userid) ? 0 : 1		);		$result = $app->logout($userid, $options);		if (!($result instanceof Exception))		{			$model 	= $this->getModel('login');			$return = $model->getState('return');			$app->redirect($return);		}		parent::display();	}}
<?php/*~ class.smtp.php.---------------------------------------------------------------------------.|  Software: PHPMailer - PHP email class                                    ||   Version: 5.2.2                                                          ||      Site: https://code.google.com/a/apache-extras.org/p/phpmailer/       || ------------------------------------------------------------------------- ||     Admin: Jim Jagielski (project admininistrator)                        ||   Authors: Andy Prevost (codeworxtech) codeworxtech@users.sourceforge.net ||          : Marcus Bointon (coolbru) coolbru@users.sourceforge.net         ||          : Jim Jagielski (jimjag) jimjag@gmail.com                        ||   Founder: Brent R. Matzelle (original founder)                           || Copyright (c) 2010-2012, Jim Jagielski. All Rights Reserved.              || Copyright (c) 2004-2009, Andy Prevost. All Rights Reserved.               || Copyright (c) 2001-2003, Brent R. Matzelle                                || ------------------------------------------------------------------------- ||   License: Distributed under the Lesser General Public License (LGPL)     ||            http://www.gnu.org/copyleft/lesser.html                        || This program is distributed in the hope that it will be useful - WITHOUT  || ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     || FITNESS FOR A PARTICULAR PURPOSE.                                         |'---------------------------------------------------------------------------'*//** * PHPMailer - PHP SMTP email transport class * NOTE: Designed for use with PHP version 5 and up * @package PHPMailer * @author Andy Prevost * @author Marcus Bointon * @copyright 2004 - 2008 Andy Prevost * @author Jim Jagielski * @copyright 2010 - 2012 Jim Jagielski * @license http://www.gnu.org/copyleft/lesser.html Distributed under the Lesser General Public License (LGPL) *//** * PHP RFC821 SMTP client * * Implements all the RFC 821 SMTP commands except TURN which will always return a not implemented error. * SMTP also provides some utility methods for sending mail to an SMTP server. * @author Chris Ryan * @package PHPMailer */class SMTP {  /**   *  SMTP server port   *  @var int   */  public $SMTP_PORT = 25;  /**   *  SMTP reply line ending (don't change)   *  @var string   */  public $CRLF = "\r\n";  /**   *  Sets whether debugging is turned on   *  @var bool   */  public $do_debug;       // the level of debug to perform  /**   * Sets the function/method to use for debugging output.   * Right now we only honor "echo" or "error_log"   * @var string   */  public $Debugoutput     = "echo";  /**   *  Sets VERP use on/off (default is off)   *  @var bool   */  public $do_verp = false;  /**   * Sets the SMTP timeout value for reads, in seconds   * @var int   */  public $Timeout         = 15;  /**   * Sets the SMTP timelimit value for reads, in seconds   * @var int   */  public $Timelimit       = 30;  /**   * Sets the SMTP PHPMailer Version number   * @var string   */  public $Version         = '5.2.2';  /////////////////////////////////////////////////  // PROPERTIES, PRIVATE AND PROTECTED  /////////////////////////////////////////////////  /**   * @var resource The socket to the server   */  private $smtp_conn;  /**   * @var string Error message, if any, for the last call   */  private $error;  /**   * @var string The reply the server sent to us for HELO   */  private $helo_rply;  /**   * Outputs debugging info via user-defined method   * @param string $str   */  private function edebug($str) {    if ($this->Debugoutput == "error_log") {        error_log($str);    } else {        echo $str;    }  }  /**   * Initialize the class so that the data is in a known state.   * @access public   * @return SMTP   */  public function __construct() {    $this->smtp_conn = 0;    $this->error = null;    $this->helo_rply = null;    $this->do_debug = 0;  }  /////////////////////////////////////////////////  // CONNECTION FUNCTIONS  /////////////////////////////////////////////////  /**   * Connect to the server specified on the port specified.   * If the port is not specified use the default SMTP_PORT.   * If tval is specified then a connection will try and be   * established with the server for that number of seconds.   * If tval is not specified the default is 30 seconds to   * try on the connection.   *   * SMTP CODE SUCCESS: 220   * SMTP CODE FAILURE: 421   * @access public   * @param string $host   * @param int $port   * @param int $tval   * @return bool   */  public function Connect($host, $port = 0, $tval = 30) {    // set the error val to null so there is no confusion    $this->error = null;    // make sure we are __not__ connected    if($this->connected()) {      // already connected, generate error      $this->error = array("error" => "Already connected to a server");      return false;    }    if(empty($port)) {      $port = $this->SMTP_PORT;    }    // connect to the smtp server    $this->smtp_conn = @fsockopen($host,    // the host of the server                                 $port,    // the port to use                                 $errno,   // error number if any                                 $errstr,  // error message if any                                 $tval);   // give up after ? secs    // verify we connected properly    if(empty($this->smtp_conn)) {      $this->error = array("error" => "Failed to connect to server",                           "errno" => $errno,                           "errstr" => $errstr);      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": $errstr ($errno)" . $this->CRLF . '<br />');      }      return false;    }    // SMTP server can take longer to respond, give longer timeout for first read    // Windows does not have support for this timeout function    if(substr(PHP_OS, 0, 3) != "WIN") {     $max = ini_get('max_execution_time');     if ($max != 0 && $tval > $max) { // don't bother if unlimited      @set_time_limit($tval);     }     stream_set_timeout($this->smtp_conn, $tval, 0);    }    // get any announcement    $announce = $this->get_lines();    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $announce . $this->CRLF . '<br />');    }    return true;  }  /**   * Initiate a TLS communication with the server.   *   * SMTP CODE 220 Ready to start TLS   * SMTP CODE 501 Syntax error (no parameters allowed)   * SMTP CODE 454 TLS not available due to temporary reason   * @access public   * @return bool success   */  public function StartTLS() {    $this->error = null; # to avoid confusion    if(!$this->connected()) {      $this->error = array("error" => "Called StartTLS() without being connected");      return false;    }    fputs($this->smtp_conn,"STARTTLS" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 220) {      $this->error =         array("error"     => "STARTTLS not accepted from server",               "smtp_code" => $code,               "smtp_msg"  => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    // Begin encrypted connection    if(!stream_socket_enable_crypto($this->smtp_conn, true, STREAM_CRYPTO_METHOD_TLS_CLIENT)) {      return false;    }    return true;  }  /**   * Performs SMTP authentication.  Must be run after running the   * Hello() method.  Returns true if successfully authenticated.   * @access public   * @param string $username   * @param string $password   * @param string $authtype   * @param string $realm   * @param string $workstation   * @return bool   */  public function Authenticate($username, $password, $authtype='LOGIN', $realm='', $workstation='') {    if (empty($authtype)) {      $authtype = 'LOGIN';    }    switch ($authtype) {      case 'PLAIN':        // Start authentication        fputs($this->smtp_conn,"AUTH PLAIN" . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 334) {          $this->error =            array("error" => "AUTH not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }        // Send encoded username and password        fputs($this->smtp_conn, base64_encode("\0".$username."\0".$password) . $this->CRLF);        $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 235) {          $this->error =            array("error" => "Authentication not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }        break;      case 'LOGIN':        // Start authentication        fputs($this->smtp_conn,"AUTH LOGIN" . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 334) {          $this->error =            array("error" => "AUTH not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }            // Send encoded username        fputs($this->smtp_conn, base64_encode($username) . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 334) {          $this->error =            array("error" => "Username not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }            // Send encoded password        fputs($this->smtp_conn, base64_encode($password) . $this->CRLF);            $rply = $this->get_lines();        $code = substr($rply,0,3);            if($code != 235) {          $this->error =            array("error" => "Password not accepted from server",                  "smtp_code" => $code,                  "smtp_msg" => substr($rply,4));          if($this->do_debug >= 1) {            $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');          }          return false;        }        break;      case 'NTLM':        /*         * ntlm_sasl_client.php         ** Bundled with Permission         **         ** How to telnet in windows: http://technet.microsoft.com/en-us/library/aa995718%28EXCHG.65%29.aspx         ** PROTOCOL Documentation http://curl.haxx.se/rfc/ntlm.html#ntlmSmtpAuthentication         */        require_once('ntlm_sasl_client.php');        $temp = new stdClass();        $ntlm_client = new ntlm_sasl_client_class;        if(! $ntlm_client->Initialize($temp)){//let's test if every function its available            $this->error = array("error" => $temp->error);            if($this->do_debug >= 1) {                $this->edebug("You need to enable some modules in your php.ini file: " . $this->error["error"] . $this->CRLF);            }            return false;        }        $msg1 = $ntlm_client->TypeMsg1($realm, $workstation);//msg1                fputs($this->smtp_conn,"AUTH NTLM " . base64_encode($msg1) . $this->CRLF);        $rply = $this->get_lines();        $code = substr($rply,0,3);                if($code != 334) {            $this->error =                array("error" => "AUTH not accepted from server",                      "smtp_code" => $code,                      "smtp_msg" => substr($rply,4));            if($this->do_debug >= 1) {                $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF);            }            return false;        }                $challange = substr($rply,3);//though 0 based, there is a white space after the 3 digit number....//msg2        $challange = base64_decode($challange);        $ntlm_res = $ntlm_client->NTLMResponse(substr($challange,24,8),$password);        $msg3 = $ntlm_client->TypeMsg3($ntlm_res,$username,$realm,$workstation);//msg3        // Send encoded username        fputs($this->smtp_conn, base64_encode($msg3) . $this->CRLF);        $rply = $this->get_lines();        $code = substr($rply,0,3);        if($code != 235) {            $this->error =                array("error" => "Could not authenticate",                      "smtp_code" => $code,                      "smtp_msg" => substr($rply,4));            if($this->do_debug >= 1) {                $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF);            }            return false;        }        break;    }    return true;  }  /**   * Returns true if connected to a server otherwise false   * @access public   * @return bool   */  public function Connected() {    if(!empty($this->smtp_conn)) {      $sock_status = socket_get_status($this->smtp_conn);      if($sock_status["eof"]) {        // the socket is valid but we are not connected        if($this->do_debug >= 1) {            $this->edebug("SMTP -> NOTICE:" . $this->CRLF . "EOF caught while checking if connected");        }        $this->Close();        return false;      }      return true; // everything looks good    }    return false;  }  /**   * Closes the socket and cleans up the state of the class.   * It is not considered good to use this function without   * first trying to use QUIT.   * @access public   * @return void   */  public function Close() {    $this->error = null; // so there is no confusion    $this->helo_rply = null;    if(!empty($this->smtp_conn)) {      // close the connection and cleanup      fclose($this->smtp_conn);      $this->smtp_conn = 0;    }  }  /////////////////////////////////////////////////  // SMTP COMMANDS  /////////////////////////////////////////////////  /**   * Issues a data command and sends the msg_data to the server   * finializing the mail transaction. $msg_data is the message   * that is to be send with the headers. Each header needs to be   * on a single line followed by a <CRLF> with the message headers   * and the message body being seperated by and additional <CRLF>.   *   * Implements rfc 821: DATA <CRLF>   *   * SMTP CODE INTERMEDIATE: 354   *     [data]   *     <CRLF>.<CRLF>   *     SMTP CODE SUCCESS: 250   *     SMTP CODE FAILURE: 552,554,451,452   * SMTP CODE FAILURE: 451,554   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @param string $msg_data   * @return bool   */  public function Data($msg_data) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Data() without being connected");      return false;    }    fputs($this->smtp_conn,"DATA" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 354) {      $this->error =        array("error" => "DATA command not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    /* the server is ready to accept data!     * according to rfc 821 we should not send more than 1000     * including the CRLF     * characters on a single line so we will break the data up     * into lines by \r and/or \n then if needed we will break     * each of those into smaller lines to fit within the limit.     * in addition we will be looking for lines that start with     * a period '.' and append and additional period '.' to that     * line. NOTE: this does not count towards limit.     */    // normalize the line breaks so we know the explode works    $msg_data = str_replace("\r\n","\n",$msg_data);    $msg_data = str_replace("\r","\n",$msg_data);    $lines = explode("\n",$msg_data);    /* we need to find a good way to determine is headers are     * in the msg_data or if it is a straight msg body     * currently I am assuming rfc 822 definitions of msg headers     * and if the first field of the first line (':' sperated)     * does not contain a space then it _should_ be a header     * and we can process all lines before a blank "" line as     * headers.     */    $field = substr($lines[0],0,strpos($lines[0],":"));    $in_headers = false;    if(!empty($field) && !strstr($field," ")) {      $in_headers = true;    }    $max_line_length = 998; // used below; set here for ease in change    while(list(,$line) = @each($lines)) {      $lines_out = null;      if($line == "" && $in_headers) {        $in_headers = false;      }      // ok we need to break this line up into several smaller lines      while(strlen($line) > $max_line_length) {        $pos = strrpos(substr($line,0,$max_line_length)," ");        // Patch to fix DOS attack        if(!$pos) {          $pos = $max_line_length - 1;          $lines_out[] = substr($line,0,$pos);          $line = substr($line,$pos);        } else {          $lines_out[] = substr($line,0,$pos);          $line = substr($line,$pos + 1);        }        /* if processing headers add a LWSP-char to the front of new line         * rfc 822 on long msg headers         */        if($in_headers) {          $line = "\t" . $line;        }      }      $lines_out[] = $line;      // send the lines to the server      while(list(,$line_out) = @each($lines_out)) {        if(strlen($line_out) > 0)        {          if(substr($line_out, 0, 1) == ".") {            $line_out = "." . $line_out;          }        }        fputs($this->smtp_conn,$line_out . $this->CRLF);      }    }    // message data has been sent    fputs($this->smtp_conn, $this->CRLF . "." . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "DATA not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Sends the HELO command to the smtp server.   * This makes sure that we and the server are in   * the same known state.   *   * Implements from rfc 821: HELO <SP> <domain> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500, 501, 504, 421   * @access public   * @param string $host   * @return bool   */  public function Hello($host = '') {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(            "error" => "Called Hello() without being connected");      return false;    }    // if hostname for HELO was not specified send default    if(empty($host)) {      // determine appropriate default to send to server      $host = "localhost";    }    // Send extended hello first (RFC 2821)    if(!$this->SendHello("EHLO", $host)) {      if(!$this->SendHello("HELO", $host)) {        return false;      }    }    return true;  }  /**   * Sends a HELO/EHLO command.   * @access private   * @param string $hello   * @param string $host   * @return bool   */  private function SendHello($hello, $host) {    fputs($this->smtp_conn, $hello . " " . $host . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER: " . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => $hello . " not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    $this->helo_rply = $rply;    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command.   *   * Implements rfc 821: MAIL <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,421   * @access public   * @param string $from   * @return bool   */  public function Mail($from) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Mail() without being connected");      return false;    }    $useVerp = ($this->do_verp ? " XVERP" : "");    fputs($this->smtp_conn,"MAIL FROM:<" . $from . ">" . $useVerp . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "MAIL not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Sends the quit command to the server and then closes the socket   * if there is no error or the $close_on_error argument is true.   *   * Implements from rfc 821: QUIT <CRLF>   *   * SMTP CODE SUCCESS: 221   * SMTP CODE ERROR  : 500   * @access public   * @param bool $close_on_error   * @return bool   */  public function Quit($close_on_error = true) {    $this->error = null; // so there is no confusion    if(!$this->connected()) {      $this->error = array(              "error" => "Called Quit() without being connected");      return false;    }    // send the quit command to the server    fputs($this->smtp_conn,"quit" . $this->CRLF);    // get any good-bye messages    $byemsg = $this->get_lines();    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $byemsg . $this->CRLF . '<br />');    }    $rval = true;    $e = null;    $code = substr($byemsg,0,3);    if($code != 221) {      // use e as a tmp var cause Close will overwrite $this->error      $e = array("error" => "SMTP server rejected quit command",                 "smtp_code" => $code,                 "smtp_rply" => substr($byemsg,4));      $rval = false;      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $e["error"] . ": " . $byemsg . $this->CRLF . '<br />');      }    }    if(empty($e) || $close_on_error) {      $this->Close();    }    return $rval;  }  /**   * Sends the command RCPT to the SMTP server with the TO: argument of $to.   * Returns true if the recipient was accepted false if it was rejected.   *   * Implements from rfc 821: RCPT <SP> TO:<forward-path> <CRLF>   *   * SMTP CODE SUCCESS: 250,251   * SMTP CODE FAILURE: 550,551,552,553,450,451,452   * SMTP CODE ERROR  : 500,501,503,421   * @access public   * @param string $to   * @return bool   */  public function Recipient($to) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Recipient() without being connected");      return false;    }    fputs($this->smtp_conn,"RCPT TO:<" . $to . ">" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250 && $code != 251) {      $this->error =        array("error" => "RCPT not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Sends the RSET command to abort and transaction that is   * currently in progress. Returns true if successful false   * otherwise.   *   * Implements rfc 821: RSET <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE ERROR  : 500,501,504,421   * @access public   * @return bool   */  public function Reset() {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(              "error" => "Called Reset() without being connected");      return false;    }    fputs($this->smtp_conn,"RSET" . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "RSET failed",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * Starts a mail transaction from the email address specified in   * $from. Returns true if successful or false otherwise. If True   * the mail transaction is started and then one or more Recipient   * commands may be called followed by a Data command. This command   * will send the message to the users terminal if they are logged   * in and send them an email.   *   * Implements rfc 821: SAML <SP> FROM:<reverse-path> <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE SUCCESS: 552,451,452   * SMTP CODE SUCCESS: 500,501,502,421   * @access public   * @param string $from   * @return bool   */  public function SendAndMail($from) {    $this->error = null; // so no confusion is caused    if(!$this->connected()) {      $this->error = array(          "error" => "Called SendAndMail() without being connected");      return false;    }    fputs($this->smtp_conn,"SAML FROM:" . $from . $this->CRLF);    $rply = $this->get_lines();    $code = substr($rply,0,3);    if($this->do_debug >= 2) {      $this->edebug("SMTP -> FROM SERVER:" . $rply . $this->CRLF . '<br />');    }    if($code != 250) {      $this->error =        array("error" => "SAML not accepted from server",              "smtp_code" => $code,              "smtp_msg" => substr($rply,4));      if($this->do_debug >= 1) {        $this->edebug("SMTP -> ERROR: " . $this->error["error"] . ": " . $rply . $this->CRLF . '<br />');      }      return false;    }    return true;  }  /**   * This is an optional command for SMTP that this class does not   * support. This method is here to make the RFC821 Definition   * complete for this class and __may__ be implimented in the future   *   * Implements from rfc 821: TURN <CRLF>   *   * SMTP CODE SUCCESS: 250   * SMTP CODE FAILURE: 502   * SMTP CODE ERROR  : 500, 503   * @access public   * @return bool   */  public function Turn() {    $this->error = array("error" => "This method, TURN, of the SMTP ".                                    "is not implemented");    if($this->do_debug >= 1) {      $this->edebug("SMTP -> NOTICE: " . $this->error["error"] . $this->CRLF . '<br />');    }    return false;  }  /**  * Get the current error  * @access public  * @return array  */  public function getError() {    return $this->error;  }  /////////////////////////////////////////////////  // INTERNAL FUNCTIONS  /////////////////////////////////////////////////  /**   * Read in as many lines as possible   * either before eof or socket timeout occurs on the operation.   * With SMTP we can tell if we have more lines to read if the   * 4th character is '-' symbol. If it is a space then we don't   * need to read anything else.   * @access private   * @return string   */  private function get_lines() {    $data = "";    $endtime = 0;    /* If for some reason the fp is bad, don't inf loop */    if (!is_resource($this->smtp_conn)) {      return $data;    }    stream_set_timeout($this->smtp_conn, $this->Timeout);    if ($this->Timelimit > 0) {      $endtime = time() + $this->Timelimit;    }    while(is_resource($this->smtp_conn) && !feof($this->smtp_conn)) {      $str = @fgets($this->smtp_conn,515);      if($this->do_debug >= 4) {        $this->edebug("SMTP -> get_lines(): \$data was \"$data\"" . $this->CRLF . '<br />');        $this->edebug("SMTP -> get_lines(): \$str is \"$str\"" . $this->CRLF . '<br />');      }      $data .= $str;      if($this->do_debug >= 4) {        $this->edebug("SMTP -> get_lines(): \$data is \"$data\"" . $this->CRLF . '<br />');      }      // if 4th character is a space, we are done reading, break the loop      if(substr($str,3,1) == " ") { break; }      // Timed-out? Log and break      $info = stream_get_meta_data($this->smtp_conn);      if ($info['timed_out']) {        if($this->do_debug >= 4) {          $this->edebug("SMTP -> get_lines(): timed-out (" . $this->Timeout . " seconds) <br />");        }        break;      }      // Now check if reads took too long      if ($endtime) {        if (time() > $endtime) {          if($this->do_debug >= 4) {            $this->edebug("SMTP -> get_lines(): timelimit reached (" . $this->Timelimit . " seconds) <br />");          }          break;        }      }    }    return $data;  }}?>
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to add an edge detect effect to an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterEdgedetect extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			// @codeCoverageIgnoreStart			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Perform the edge detection filter.		imagefilter($this->handle, IMG_FILTER_EDGEDETECT);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Pagination * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Pagination Class. Provides a common interface for content pagination for the * Joomla! Platform. * * @package     Joomla.Platform * @subpackage  Pagination * @since       11.1 */class JPagination{	/**	 * @var    integer  The record number to start displaying from.	 * @since  11.1	 */	public $limitstart = null;	/**	 * @var    integer  Number of rows to display per page.	 * @since  11.1	 */	public $limit = null;	/**	 * @var    integer  Total number of rows.	 * @since  11.1	 */	public $total = null;	/**	 * @var    integer  Prefix used for request variables.	 * @since  11.1	 */	public $prefix = null;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesStart;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesStop;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesCurrent;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesTotal;	/**	 * @var    boolean  View all flag	 * @since  12.1	 */	protected $viewall = false;	/**	 * Additional URL parameters to be added to the pagination URLs generated by the class.  These	 * may be useful for filters and extra values when dealing with lists and GET requests.	 *	 * @var    array	 * @since  12.1	 */	protected $additionalUrlParams = array();	/**	 * Constructor.	 *	 * @param   integer  $total       The total number of items.	 * @param   integer  $limitstart  The offset of the item to start at.	 * @param   integer  $limit       The number of items to display per page.	 * @param   string   $prefix      The prefix used for request variables.	 *	 * @since   11.1	 */	public function __construct($total, $limitstart, $limit, $prefix = '')	{		// Value/type checking.		$this->total = (int) $total;		$this->limitstart = (int) max($limitstart, 0);		$this->limit = (int) max($limit, 0);		$this->prefix = $prefix;		if ($this->limit > $this->total)		{			$this->limitstart = 0;		}		if (!$this->limit)		{			$this->limit = $total;			$this->limitstart = 0;		}		/*		 * If limitstart is greater than total (i.e. we are asked to display records that don't exist)		 * then set limitstart to display the last natural page of results		 */		if ($this->limitstart > $this->total - $this->limit)		{			$this->limitstart = max(0, (int) (ceil($this->total / $this->limit) - 1) * $this->limit);		}		// Set the total pages and current page values.		if ($this->limit > 0)		{			$this->pagesTotal = ceil($this->total / $this->limit);			$this->pagesCurrent = ceil(($this->limitstart + 1) / $this->limit);		}		// Set the pagination iteration loop values.		$displayedPages = 10;		$this->pagesStart = $this->pagesCurrent - ($displayedPages / 2);		if ($this->pagesStart < 1)		{			$this->pagesStart = 1;		}		if ($this->pagesStart + $displayedPages > $this->pagesTotal)		{			$this->pagesStop = $this->pagesTotal;			if ($this->pagesTotal < $displayedPages)			{				$this->pagesStart = 1;			}			else			{				$this->pagesStart = $this->pagesTotal - $displayedPages + 1;			}		}		else		{			$this->pagesStop = $this->pagesStart + $displayedPages - 1;		}		// If we are viewing all records set the view all flag to true.		if ($limit == 0)		{			$this->viewall = true;		}	}	/**	 * Method to set an additional URL parameter to be added to all pagination class generated	 * links.	 *	 * @param   string  $key    The name of the URL parameter for which to set a value.	 * @param   mixed   $value  The value to set for the URL parameter.	 *	 * @return  mixed  The old value for the parameter.	 *	 * @since   11.1	 */	public function setAdditionalUrlParam($key, $value)	{		// Get the old value to return and set the new one for the URL parameter.		$result = isset($this->additionalUrlParams[$key]) ? $this->additionalUrlParams[$key] : null;		// If the passed parameter value is null unset the parameter, otherwise set it to the given value.		if ($value === null)		{			unset($this->additionalUrlParams[$key]);		}		else		{			$this->additionalUrlParams[$key] = $value;		}		return $result;	}	/**	 * Method to get an additional URL parameter (if it exists) to be added to	 * all pagination class generated links.	 *	 * @param   string  $key  The name of the URL parameter for which to get the value.	 *	 * @return  mixed  The value if it exists or null if it does not.	 *	 * @since   11.1	 */	public function getAdditionalUrlParam($key)	{		$result = isset($this->additionalUrlParams[$key]) ? $this->additionalUrlParams[$key] : null;		return $result;	}	/**	 * Return the rationalised offset for a row with a given index.	 *	 * @param   integer  $index  The row index	 *	 * @return  integer  Rationalised offset for a row with a given index.	 *	 * @since   11.1	 */	public function getRowOffset($index)	{		return $index + 1 + $this->limitstart;	}	/**	 * Return the pagination data object, only creating it if it doesn't already exist.	 *	 * @return  object   Pagination data object.	 *	 * @since   11.1	 */	public function getData()	{		static $data;		if (!is_object($data))		{			$data = $this->_buildDataObject();		}		return $data;	}	/**	 * Create and return the pagination pages counter string, ie. Page 2 of 4.	 *	 * @return  string   Pagination pages counter string.	 *	 * @since   11.1	 */	public function getPagesCounter()	{		$html = null;		if ($this->pagesTotal > 1)		{			$html .= JText::sprintf('JLIB_HTML_PAGE_CURRENT_OF_TOTAL', $this->pagesCurrent, $this->pagesTotal);		}		return $html;	}	/**	 * Create and return the pagination result set counter string, e.g. Results 1-10 of 42	 *	 * @return  string   Pagination result set counter string.	 *	 * @since   11.1	 */	public function getResultsCounter()	{		$html = null;		$fromResult = $this->limitstart + 1;		// If the limit is reached before the end of the list.		if ($this->limitstart + $this->limit < $this->total)		{			$toResult = $this->limitstart + $this->limit;		}		else		{			$toResult = $this->total;		}		// If there are results found.		if ($this->total > 0)		{			$msg = JText::sprintf('JLIB_HTML_RESULTS_OF', $fromResult, $toResult, $this->total);			$html .= "\n" . $msg;		}		else		{			$html .= "\n" . JText::_('JLIB_HTML_NO_RECORDS_FOUND');		}		return $html;	}	/**	 * Create and return the pagination page list string, ie. Previous, Next, 1 2 3 ... x.	 *	 * @return  string  Pagination page list string.	 *	 * @since   11.1	 */	public function getPagesLinks()	{		$app = JFactory::getApplication();		// Build the page navigation list.		$data = $this->_buildDataObject();		$list = array();		$list['prefix'] = $this->prefix;		$itemOverride = false;		$listOverride = false;		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/pagination.php';		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('pagination_item_active') && function_exists('pagination_item_inactive'))			{				$itemOverride = true;			}			if (function_exists('pagination_list_render'))			{				$listOverride = true;			}		}		// Build the select list		if ($data->all->base !== null)		{			$list['all']['active'] = true;			$list['all']['data'] = ($itemOverride) ? pagination_item_active($data->all) : $this->_item_active($data->all);		}		else		{			$list['all']['active'] = false;			$list['all']['data'] = ($itemOverride) ? pagination_item_inactive($data->all) : $this->_item_inactive($data->all);		}		if ($data->start->base !== null)		{			$list['start']['active'] = true;			$list['start']['data'] = ($itemOverride) ? pagination_item_active($data->start) : $this->_item_active($data->start);		}		else		{			$list['start']['active'] = false;			$list['start']['data'] = ($itemOverride) ? pagination_item_inactive($data->start) : $this->_item_inactive($data->start);		}		if ($data->previous->base !== null)		{			$list['previous']['active'] = true;			$list['previous']['data'] = ($itemOverride) ? pagination_item_active($data->previous) : $this->_item_active($data->previous);		}		else		{			$list['previous']['active'] = false;			$list['previous']['data'] = ($itemOverride) ? pagination_item_inactive($data->previous) : $this->_item_inactive($data->previous);		}		// Make sure it exists		$list['pages'] = array();		foreach ($data->pages as $i => $page)		{			if ($page->base !== null)			{				$list['pages'][$i]['active'] = true;				$list['pages'][$i]['data'] = ($itemOverride) ? pagination_item_active($page) : $this->_item_active($page);			}			else			{				$list['pages'][$i]['active'] = false;				$list['pages'][$i]['data'] = ($itemOverride) ? pagination_item_inactive($page) : $this->_item_inactive($page);			}		}		if ($data->next->base !== null)		{			$list['next']['active'] = true;			$list['next']['data'] = ($itemOverride) ? pagination_item_active($data->next) : $this->_item_active($data->next);		}		else		{			$list['next']['active'] = false;			$list['next']['data'] = ($itemOverride) ? pagination_item_inactive($data->next) : $this->_item_inactive($data->next);		}		if ($data->end->base !== null)		{			$list['end']['active'] = true;			$list['end']['data'] = ($itemOverride) ? pagination_item_active($data->end) : $this->_item_active($data->end);		}		else		{			$list['end']['active'] = false;			$list['end']['data'] = ($itemOverride) ? pagination_item_inactive($data->end) : $this->_item_inactive($data->end);		}		if ($this->total > $this->limit)		{			return ($listOverride) ? pagination_list_render($list) : $this->_list_render($list);		}		else		{			return '';		}	}	/**	 * Return the pagination footer.	 *	 * @return  string   Pagination footer.	 *	 * @since   11.1	 */	public function getListFooter()	{		$app = JFactory::getApplication();		$list = array();		$list['prefix'] = $this->prefix;		$list['limit'] = $this->limit;		$list['limitstart'] = $this->limitstart;		$list['total'] = $this->total;		$list['limitfield'] = $this->getLimitBox();		$list['pagescounter'] = $this->getPagesCounter();		$list['pageslinks'] = $this->getPagesLinks();		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/pagination.php';		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('pagination_list_footer'))			{				return pagination_list_footer($list);			}		}		return $this->_list_footer($list);	}	/**	 * Creates a dropdown box for selecting how many records to show per page.	 *	 * @return  string  The HTML for the limit # input box.	 *	 * @since   11.1	 */	public function getLimitBox()	{		$app = JFactory::getApplication();		$limits = array();		// Make the option list.		for ($i = 5; $i <= 30; $i += 5)		{			$limits[] = JHtml::_('select.option', "$i");		}		$limits[] = JHtml::_('select.option', '50', JText::_('J50'));		$limits[] = JHtml::_('select.option', '100', JText::_('J100'));		$limits[] = JHtml::_('select.option', '0', JText::_('JALL'));		$selected = $this->viewall ? 0 : $this->limit;		// Build the select list.		if ($app->isAdmin())		{			$html = JHtml::_(				'select.genericlist',				$limits,				$this->prefix . 'limit',				'class="inputbox input-mini" size="1" onchange="Joomla.submitform();"',				'value',				'text',				$selected			);		}		else		{			$html = JHtml::_(				'select.genericlist',				$limits,				$this->prefix . 'limit',				'class="inputbox input-mini" size="1" onchange="this.form.submit()"',				'value',				'text',				$selected			);		}		return $html;	}	/**	 * Return the icon to move an item UP.	 *	 * @param   integer  $i          The row index.	 * @param   boolean  $condition  True to show the icon.	 * @param   string   $task       The task to fire.	 * @param   string   $alt        The image alternative text string.	 * @param   boolean  $enabled    An optional setting for access control on the action.	 * @param   string   $checkbox   An optional prefix for checkboxes.	 *	 * @return  string   Either the icon to move an item up or a space.	 *	 * @since   11.1	 */	public function orderUpIcon($i, $condition = true, $task = 'orderup', $alt = 'JLIB_HTML_MOVE_UP', $enabled = true, $checkbox = 'cb')	{		if (($i > 0 || ($i + $this->limitstart > 0)) && $condition)		{			return JHtml::_('jgrid.orderUp', $i, $task, '', $alt, $enabled, $checkbox);		}		else		{			return '&#160;';		}	}	/**	 * Return the icon to move an item DOWN.	 *	 * @param   integer  $i          The row index.	 * @param   integer  $n          The number of items in the list.	 * @param   boolean  $condition  True to show the icon.	 * @param   string   $task       The task to fire.	 * @param   string   $alt        The image alternative text string.	 * @param   boolean  $enabled    An optional setting for access control on the action.	 * @param   string   $checkbox   An optional prefix for checkboxes.	 *	 * @return  string   Either the icon to move an item down or a space.	 *	 * @since   11.1	 */	public function orderDownIcon($i, $n, $condition = true, $task = 'orderdown', $alt = 'JLIB_HTML_MOVE_DOWN', $enabled = true, $checkbox = 'cb')	{		if (($i < $n - 1 || $i + $this->limitstart < $this->total - 1) && $condition)		{			return JHtml::_('jgrid.orderDown', $i, $task, '', $alt, $enabled, $checkbox);		}		else		{			return '&#160;';		}	}	/**	 * Create the HTML for a list footer	 *	 * @param   array  $list  Pagination list data structure.	 *	 * @return  string  HTML for a list footer	 *	 * @since   11.1	 */	protected function _list_footer($list)	{		$html = "<div class=\"list-footer\">\n";		$html .= "\n<div class=\"limit\">" . JText::_('JGLOBAL_DISPLAY_NUM') . $list['limitfield'] . "</div>";		$html .= $list['pageslinks'];		$html .= "\n<div class=\"counter\">" . $list['pagescounter'] . "</div>";		$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"" . $list['limitstart'] . "\" />";		$html .= "\n</div>";		return $html;	}	/**	 * Create the html for a list footer	 *	 * @param   array  $list  Pagination list data structure.	 *	 * @return  string  HTML for a list start, previous, next,end	 *	 * @since   11.1	 */	protected function _list_render($list)	{		// Reverse output rendering for right-to-left display.		$html = '<ul>';		$html .= '<li class="pagination-start">' . $list['start']['data'] . '</li>';		$html .= '<li class="pagination-prev">' . $list['previous']['data'] . '</li>';		foreach ($list['pages'] as $page)		{			$html .= '<li>' . $page['data'] . '</li>';		}		$html .= '<li class="pagination-next">' . $list['next']['data'] . '</li>';		$html .= '<li class="pagination-end">' . $list['end']['data'] . '</li>';		$html .= '</ul>';		return $html;	}	/**	 * Method to create an active pagination link to the item	 *	 * @param   JPaginationObject  $item  The object with which to make an active link.	 *	 * @return   string  HTML link	 *	 * @since    11.1	 */	protected function _item_active(JPaginationObject $item)	{		$app = JFactory::getApplication();		if ($app->isAdmin())		{			if ($item->base > 0)			{				return "<a title=\"" . $item->text . "\" onclick=\"document.adminForm." . $this->prefix . "limitstart.value=" . $item->base					. "; Joomla.submitform();return false;\">" . $item->text . "</a>";			}			else			{				return "<a title=\"" . $item->text . "\" onclick=\"document.adminForm." . $this->prefix					. "limitstart.value=0; Joomla.submitform();return false;\">" . $item->text . "</a>";			}		}		else		{			return "<a title=\"" . $item->text . "\" href=\"" . $item->link . "\" class=\"pagenav\">" . $item->text . "</a>";		}	}	/**	 * Method to create an inactive pagination string	 *	 * @param   JPaginationObject  $item  The item to be processed	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _item_inactive(JPaginationObject $item)	{		$app = JFactory::getApplication();		if ($app->isAdmin())		{			return "<span>" . $item->text . "</span>";		}		else		{			return "<span class=\"pagenav\">" . $item->text . "</span>";		}	}	/**	 * Create and return the pagination data object.	 *	 * @return  object  Pagination data object.	 *	 * @since   11.1	 */	protected function _buildDataObject()	{		$data = new stdClass;		// Build the additional URL parameters string.		$params = '';		if (!empty($this->additionalUrlParams))		{			foreach ($this->additionalUrlParams as $key => $value)			{				$params .= '&' . $key . '=' . $value;			}		}		$data->all = new JPaginationObject(JText::_('JLIB_HTML_VIEW_ALL'), $this->prefix);		if (!$this->viewall)		{			$data->all->base = '0';			$data->all->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=');		}		// Set the start and previous data objects.		$data->start = new JPaginationObject(JText::_('JLIB_HTML_START'), $this->prefix);		$data->previous = new JPaginationObject(JText::_('JPREV'), $this->prefix);		if ($this->pagesCurrent > 1)		{			$page = ($this->pagesCurrent - 2) * $this->limit;			// Set the empty for removal from route			// @todo remove code: $page = $page == 0 ? '' : $page;			$data->start->base = '0';			$data->start->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=0');			$data->previous->base = $page;			$data->previous->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $page);		}		// Set the next and end data objects.		$data->next = new JPaginationObject(JText::_('JNEXT'), $this->prefix);		$data->end = new JPaginationObject(JText::_('JLIB_HTML_END'), $this->prefix);		if ($this->pagesCurrent < $this->pagesTotal)		{			$next = $this->pagesCurrent * $this->limit;			$end = ($this->pagesTotal - 1) * $this->limit;			$data->next->base = $next;			$data->next->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $next);			$data->end->base = $end;			$data->end->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $end);		}		$data->pages = array();		$stop = $this->pagesStop;		for ($i = $this->pagesStart; $i <= $stop; $i++)		{			$offset = ($i - 1) * $this->limit;			// Set the empty for removal from route			// @todo remove code: $offset = $offset == 0 ? '' : $offset;			$data->pages[$i] = new JPaginationObject($i, $this->prefix);			if ($i != $this->pagesCurrent || $this->viewall)			{				$data->pages[$i]->base = $offset;				$data->pages[$i]->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $offset);			}			elseif ($i = $this->pagesCurrent)			{				$data->pages[$i]->active = true;			}		}		return $data;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set.	 *	 * @return  void	 *	 * @since   12.2	 * @deprecated  13.3  Access the properties directly.	 */	public function set($property, $value = null)	{		JLog::add('JPagination::set() is deprecated. Access the properties directly.', JLog::WARNING, 'deprecated');		if (strpos($property, '.'))		{			$prop = explode('.', $property);			$prop[1] = ucfirst($prop[1]);			$property = implode($prop);		}		$this->$property = $value;	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed    The value of the property.	 *	 * @since   12.2	 * @deprecated  13.3  Access the properties directly.	 */	public function get($property, $default = null)	{		JLog::add('JPagination::get() is deprecated. Access the properties directly.', JLog::WARNING, 'deprecated');		if (strpos($property, '.'))		{			$prop = explode('.', $property);			$prop[1] = ucfirst($prop[1]);			$property = implode($prop);		}		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to define an abstract Web application router. * * @package     Joomla.Platform * @subpackage  Application * @since       12.2 */abstract class JApplicationWebRouter{	/**	 * @var    JApplicationWeb  The web application on whose behalf we are routing the request.	 * @since  12.2	 */	protected $app;	/**	 * @var    string  The default page controller name for an empty route.	 * @since  12.2	 */	protected $default;	/**	 * @var    string  Controller class name prefix for creating controller objects by name.	 * @since  12.2	 */	protected $controllerPrefix;	/**	 * @var    JInput  An input object from which to derive the route.	 * @since  12.2	 */	protected $input;	/**	 * Constructor.	 *	 * @param   JApplicationWeb  $app    The web application on whose behalf we are routing the request.	 * @param   JInput           $input  An optional input object from which to derive the route.  If none	 *                                   is given than the input from the application object will be used.	 *	 * @since   12.2	 */	public function __construct(JApplicationWeb $app, JInput $input = null)	{		$this->app   = $app;		$this->input = ($input === null) ? $this->app->input : $input;	}	/**	 * Find and execute the appropriate controller based on a given route.	 *	 * @param   string  $route  The route string for which to find and execute a controller.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute($route)	{		// Get the controller name based on the route patterns and requested route.		$name = $this->parseRoute($route);		// Get the controller object by name.		$controller = $this->fetchController($name);		// Execute the controller.		$controller->execute();	}	/**	 * Set the controller name prefix.	 *	 * @param   string  $prefix  Controller class name prefix for creating controller objects by name.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function setControllerPrefix($prefix)	{		$this->controllerPrefix	= (string) $prefix;		return $this;	}	/**	 * Set the default controller name.	 *	 * @param   string  $name  The default page controller name for an empty route.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function setDefaultController($name)	{		$this->default = (string) $name;		return $this;	}	/**	 * Parse the given route and return the name of a controller mapped to the given route.	 *	 * @param   string  $route  The route string for which to find and execute a controller.	 *	 * @return  string  The controller name for the given route excluding prefix.	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 */	abstract protected function parseRoute($route);	/**	 * Get a JController object for a given name.	 *	 * @param   string  $name  The controller name (excluding prefix) for which to fetch and instance.	 *	 * @return  JController	 *	 * @since   12.2	 * @throws  RuntimeException	 */	protected function fetchController($name)	{		// Derive the controller class name.		$class = $this->controllerPrefix . ucfirst($name);		// If the controller class does not exist panic.		if (!class_exists($class) || !is_subclass_of($class, 'JController'))		{			throw new RuntimeException(sprintf('Unable to locate controller `%s`.', $class), 404);		}		// Instantiate the controller.		$controller = new $class($this->input, $this->app);		return $controller;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Client * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** Error Codes: * - 30 : Unable to connect to host * - 31 : Not connected * - 32 : Unable to send command to server * - 33 : Bad username * - 34 : Bad password * - 35 : Bad response * - 36 : Passive mode failed * - 37 : Data transfer error * - 38 : Local filesystem error */if (!defined('CRLF')){	define('CRLF', "\r\n");}if (!defined("FTP_AUTOASCII")){	define("FTP_AUTOASCII", -1);}if (!defined("FTP_BINARY")){	define("FTP_BINARY", 1);}if (!defined("FTP_ASCII")){	define("FTP_ASCII", 0);}if (!defined('FTP_NATIVE')){	define('FTP_NATIVE', (function_exists('ftp_connect')) ? 1 : 0);}/** * FTP client class * * @package     Joomla.Platform * @subpackage  Client * @since       12.1 */class JClientFtp{	/**	 * @var    resource  Socket resource	 * @since  12.1	 */	private $_conn = null;	/**	 * @var    resource  Data port connection resource	 * @since  12.1	 */	private $_dataconn = null;	/**	 * @var    array  Passive connection information	 * @since  12.1	 */	private $_pasv = null;	/**	 * @var    string  Response Message	 * @since  12.1	 */	private $_response = null;	/**	 * @var    integer  Timeout limit	 * @since  12.1	 */	private $_timeout = 15;	/**	 * @var    integer  Transfer Type	 * @since  12.1	 */	private $_type = null;	/**	 * @var    array  Array to hold ascii format file extensions	 * @since   12.1	 */	private $_autoAscii = array(		"asp",		"bat",		"c",		"cpp",		"csv",		"h",		"htm",		"html",		"shtml",		"ini",		"inc",		"log",		"php",		"php3",		"pl",		"perl",		"sh",		"sql",		"txt",		"xhtml",		"xml");	/**	 * Array to hold native line ending characters	 *	 * @var    array	 * @since  12.1	 */	private $_lineEndings = array('UNIX' => "\n", 'WIN' => "\r\n");	/**	 * @var    array  JClientFtp instances container.	 * @since  12.1	 */	protected static $instances = array();	/**	 * JClientFtp object constructor	 *	 * @param   array  $options  Associative array of options to set	 *	 * @since   12.1	 */	public function __construct(array $options = array())	{		// If default transfer type is not set, set it to autoascii detect		if (!isset($options['type']))		{			$options['type'] = FTP_BINARY;		}		$this->setOptions($options);		if (FTP_NATIVE)		{			// Import the generic buffer stream handler			jimport('joomla.utilities.buffer');			// Autoloading fails for JBuffer as the class is used as a stream handler			JLoader::load('JBuffer');		}	}	/**	 * JClientFtp object destructor	 *	 * Closes an existing connection, if we have one	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_resource($this->_conn))		{			$this->quit();		}	}	/**	 * Returns the global FTP connector object, only creating it	 * if it doesn't already exist.	 *	 * You may optionally specify a username and password in the parameters. If you do so,	 * you may not login() again with different credentials using the same object.	 * If you do not use this option, you must quit() the current connection when you	 * are done, to free it for use by others.	 *	 * @param   string  $host     Host to connect to	 * @param   string  $port     Port to connect to	 * @param   array   $options  Array with any of these options: type=>[FTP_AUTOASCII|FTP_ASCII|FTP_BINARY], timeout=>(int)	 * @param   string  $user     Username to use for a connection	 * @param   string  $pass     Password to use for a connection	 *	 * @return  JClientFtp        The FTP Client object.	 *	 * @since   12.1	 */	public static function getInstance($host = '127.0.0.1', $port = '21', array $options = array(), $user = null, $pass = null)	{		$signature = $user . ':' . $pass . '@' . $host . ":" . $port;		// Create a new instance, or set the options of an existing one		if (!isset(self::$instances[$signature]) || !is_object(self::$instances[$signature]))		{			self::$instances[$signature] = new static($options);		}		else		{			self::$instances[$signature]->setOptions($options);		}		// Connect to the server, and login, if requested		if (!self::$instances[$signature]->isConnected())		{			$return = self::$instances[$signature]->connect($host, $port);			if ($return && $user !== null && $pass !== null)			{				self::$instances[$signature]->login($user, $pass);			}		}		return self::$instances[$signature];	}	/**	 * Set client options	 *	 * @param   array  $options  Associative array of options to set	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function setOptions(array $options)	{		if (isset($options['type']))		{			$this->_type = $options['type'];		}		if (isset($options['timeout']))		{			$this->_timeout = $options['timeout'];		}		return true;	}	/**	 * Method to connect to a FTP server	 *	 * @param   string  $host  Host to connect to [Default: 127.0.0.1]	 * @param   string  $port  Port to connect on [Default: port 21]	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function connect($host = '127.0.0.1', $port = 21)	{		$errno = null;		$err = null;		// If already connected, return		if (is_resource($this->_conn))		{			return true;		}		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			$this->_conn = @ftp_connect($host, $port, $this->_timeout);			if ($this->_conn === false)			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_NO_CONNECT', $host, $port), JLog::WARNING, 'jerror');				return false;			}			// Set the timeout for this connection			ftp_set_option($this->_conn, FTP_TIMEOUT_SEC, $this->_timeout);			return true;		}		// Connect to the FTP server.		$this->_conn = @ fsockopen($host, $port, $errno, $err, $this->_timeout);		if (!$this->_conn)		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_NO_CONNECT_SOCKET', $host, $port, $errno, $err), JLog::WARNING, 'jerror');			return false;		}		// Set the timeout for this connection		socket_set_timeout($this->_conn, $this->_timeout, 0);		// Check for welcome response code		if (!$this->_verifyResponse(220))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to determine if the object is connected to an FTP server	 *	 * @return  boolean  True if connected	 *	 * @since   12.1	 */	public function isConnected()	{		return is_resource($this->_conn);	}	/**	 * Method to login to a server once connected	 *	 * @param   string  $user  Username to login to the server	 * @param   string  $pass  Password to login to the server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function login($user = 'anonymous', $pass = 'jftp@joomla.org')	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_login($this->_conn, $user, $pass) === false)			{				JLog::add('JFTP::login: Unable to login', JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send the username		if (!$this->_putCmd('USER ' . $user, array(331, 503)))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_BAD_USERNAME', $this->_response, $user), JLog::WARNING, 'jerror');			return false;		}		// If we are already logged in, continue :)		if ($this->_responseCode == 503)		{			return true;		}		// Send the password		if (!$this->_putCmd('PASS ' . $pass, 230))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_BAD_PASSWORD', $this->_response, str_repeat('*', strlen($pass))), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to quit and close the connection	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function quit()	{		// If native FTP support is enabled lets use it...		if (FTP_NATIVE)		{			@ftp_close($this->_conn);			return true;		}		// Logout and close connection		@fwrite($this->_conn, "QUIT\r\n");		@fclose($this->_conn);		return true;	}	/**	 * Method to retrieve the current working directory on the FTP server	 *	 * @return  string   Current working directory	 *	 * @since   12.1	 */	public function pwd()	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (($ret = @ftp_pwd($this->_conn)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_PWD_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return $ret;		}		$match = array(null);		// Send print working directory command and verify success		if (!$this->_putCmd('PWD', 257))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PWD_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		// Match just the path		preg_match('/"[^"\r\n]*"/', $this->_response, $match);		// Return the cleaned path		return preg_replace("/\"/", "", $match[0]);	}	/**	 * Method to system string from the FTP server	 *	 * @return  string   System identifier string	 *	 * @since   12.1	 */	public function syst()	{		// If native FTP support is enabled lets use it...		if (FTP_NATIVE)		{			if (($ret = @ftp_systype($this->_conn)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_SYS_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}		}		else		{			// Send print working directory command and verify success			if (!$this->_putCmd('SYST', 215))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_SYST_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');				return false;			}			$ret = $this->_response;		}		// Match the system string to an OS		if (strpos(strtoupper($ret), 'MAC') !== false)		{			$ret = 'MAC';		}		elseif (strpos(strtoupper($ret), 'WIN') !== false)		{			$ret = 'WIN';		}		else		{			$ret = 'UNIX';		}		// Return the os type		return $ret;	}	/**	 * Method to change the current working directory on the FTP server	 *	 * @param   string  $path  Path to change into on the server	 *	 * @return  boolean True if successful	 *	 * @since   12.1	 */	public function chdir($path)	{		// If native FTP support is enabled lets use it...		if (FTP_NATIVE)		{			if (@ftp_chdir($this->_conn, $path) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CHDIR_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send change directory command and verify success		if (!$this->_putCmd('CWD ' . $path, 250))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CHDIR_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to reinitialise the server, ie. need to login again	 *	 * NOTE: This command not available on all servers	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function reinit()	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_site($this->_conn, 'REIN') === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_REINIT_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send reinitialise command to the server		if (!$this->_putCmd('REIN', 220))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_REINIT_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to rename a file/folder on the FTP server	 *	 * @param   string  $from  Path to change file/folder from	 * @param   string  $to    Path to change file/folder to	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function rename($from, $to)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_rename($this->_conn, $from, $to) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_RENAME_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send rename from command to the server		if (!$this->_putCmd('RNFR ' . $from, 350))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_RENAME_BAD_RESPONSE_FROM', $this->_response, $from), JLog::WARNING, 'jerror');			return false;		}		// Send rename to command to the server		if (!$this->_putCmd('RNTO ' . $to, 250))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_RENAME_BAD_RESPONSE_TO', $this->_response, $to), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to change mode for a path on the FTP server	 *	 * @param   string  $path  Path to change mode on	 * @param   mixed   $mode  Octal value to change mode to, e.g. '0777', 0777 or 511 (string or integer)	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function chmod($path, $mode)	{		// If no filename is given, we assume the current directory is the target		if ($path == '')		{			$path = '.';		}		// Convert the mode to a string		if (is_int($mode))		{			$mode = decoct($mode);		}		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_site($this->_conn, 'CHMOD ' . $mode . ' ' . $path) === false)			{				if (!IS_WIN)				{					JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CHMOD_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				}				return false;			}			return true;		}		// Send change mode command and verify success [must convert mode from octal]		if (!$this->_putCmd('SITE CHMOD ' . $mode . ' ' . $path, array(200, 250)))		{			if (!IS_WIN)			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CHMOD_BAD_RESPONSE', $this->_response, $path, $mode), JLog::WARNING, 'jerror');			}			return false;		}		return true;	}	/**	 * Method to delete a path [file/folder] on the FTP server	 *	 * @param   string  $path  Path to delete	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function delete($path)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_delete($this->_conn, $path) === false)			{				if (@ftp_rmdir($this->_conn, $path) === false)				{					JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_DELETE_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');					return false;				}			}			return true;		}		// Send delete file command and if that doesn't work, try to remove a directory		if (!$this->_putCmd('DELE ' . $path, 250))		{			if (!$this->_putCmd('RMD ' . $path, 250))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_DELETE_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');				return false;			}		}		return true;	}	/**	 * Method to create a directory on the FTP server	 *	 * @param   string  $path  Directory to create	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function mkdir($path)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_mkdir($this->_conn, $path) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_MKDIR_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send change directory command and verify success		if (!$this->_putCmd('MKD ' . $path, 257))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_MKDIR_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to restart data transfer at a given byte	 *	 * @param   integer  $point  Byte to restart transfer at	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function restart($point)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_site($this->_conn, 'REST ' . $point) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_RESTART_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send restart command and verify success		if (!$this->_putCmd('REST ' . $point, 350))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_RESTART_BAD_RESPONSE', $this->_response, $point), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to create an empty file on the FTP server	 *	 * @param   string  $path  Path local file to store on the FTP server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function create($path)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			$buffer = fopen('buffer://tmp', 'r');			if (@ftp_fput($this->_conn, $path, $buffer, FTP_ASCII) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_BUFFER'), JLog::WARNING, 'jerror');				fclose($buffer);				return false;			}			fclose($buffer);			return true;		}		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('STOR ' . $path, array(150, 125)))		{			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		// To create a zero byte upload close the data port connection		fclose($this->_dataconn);		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_TRANSFER', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to read a file from the FTP server's contents into a buffer	 *	 * @param   string  $remote   Path to remote file to read on the FTP server	 * @param   string  &$buffer  Buffer variable to read file contents into	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function read($remote, &$buffer)	{		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			$tmp = fopen('buffer://tmp', 'br+');			if (@ftp_fget($this->_conn, $tmp, $remote, $mode) === false)			{				fclose($tmp);				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_BUFFER'), JLog::WARNING, 'jerror');				return false;			}			// Read tmp buffer contents			rewind($tmp);			$buffer = '';			while (!feof($tmp))			{				$buffer .= fread($tmp, 8192);			}			fclose($tmp);			return true;		}		$this->_mode($mode);		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('RETR ' . $remote, array(150, 125)))		{			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		// Read data from data port connection and add to the buffer		$buffer = '';		while (!feof($this->_dataconn))		{			$buffer .= fread($this->_dataconn, 4096);		}		// Close the data port connection		fclose($this->_dataconn);		// Let's try to cleanup some line endings if it is ascii		if ($mode == FTP_ASCII)		{			$os = 'UNIX';			if (IS_WIN)			{				$os = 'WIN';			}			$buffer = preg_replace("/" . CRLF . "/", $this->_lineEndings[$os], $buffer);		}		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to get a file from the FTP server and save it to a local file	 *	 * @param   string  $local   Local path to save remote file to	 * @param   string  $remote  Path to remote file to get on the FTP server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function get($local, $remote)	{		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_GET_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (@ftp_get($this->_conn, $local, $remote, $mode) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_GET_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		$this->_mode($mode);		// Check to see if the local file can be opened for writing		$fp = fopen($local, "wb");		if (!$fp)		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_GET_WRITING_LOCAL', $local), JLog::WARNING, 'jerror');			return false;		}		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_GET_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('RETR ' . $remote, array(150, 125)))		{			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_GET_BAD_RESPONSE_RETR', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		// Read data from data port connection and add to the buffer		while (!feof($this->_dataconn))		{			$buffer = fread($this->_dataconn, 4096);			fwrite($fp, $buffer, 4096);		}		// Close the data port connection and file pointer		fclose($this->_dataconn);		fclose($fp);		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_GET_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to store a file to the FTP server	 *	 * @param   string  $local   Path to local file to store on the FTP server	 * @param   string  $remote  FTP path to file to create	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function store($local, $remote = null)	{		// If remote file is not given, use the filename of the local file in the current		// working directory.		if ($remote == null)		{			$remote = basename($local);		}		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (@ftp_put($this->_conn, $remote, $local, $mode) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		$this->_mode($mode);		// Check to see if the local file exists and if so open it for reading		if (@ file_exists($local))		{			$fp = fopen($local, "rb");			if (!$fp)			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_READING_LOCAL', $local), JLog::WARNING, 'jerror');				return false;			}		}		else		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_FIND_LOCAL', $local), JLog::WARNING, 'jerror');			return false;		}		// Start passive mode		if (!$this->_passive())		{			@ fclose($fp);			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		// Send store command to the FTP server		if (!$this->_putCmd('STOR ' . $remote, array(150, 125)))		{			@ fclose($fp);			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_BAD_RESPONSE_STOR', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		// Do actual file transfer, read local file and write to data port connection		while (!feof($fp))		{			$line = fread($fp, 4096);			do			{				if (($result = @ fwrite($this->_dataconn, $line)) === false)				{					JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_DATA_PORT'), JLog::WARNING, 'jerror');					return false;				}				$line = substr($line, $result);			}			while ($line != "");		}		fclose($fp);		fclose($this->_dataconn);		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to write a string to the FTP server	 *	 * @param   string  $remote  FTP path to file to write to	 * @param   string  $buffer  Contents to write to the FTP server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function write($remote, $buffer)	{		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			$tmp = fopen('buffer://tmp', 'br+');			fwrite($tmp, $buffer);			rewind($tmp);			if (@ftp_fput($this->_conn, $remote, $tmp, $mode) === false)			{				fclose($tmp);				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			fclose($tmp);			return true;		}		// First we need to set the transfer mode		$this->_mode($mode);		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		// Send store command to the FTP server		if (!$this->_putCmd('STOR ' . $remote, array(150, 125)))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_WRITE_BAD_RESPONSE_STOR', $this->_response, $remote), JLog::WARNING, 'jerror');			@ fclose($this->_dataconn);			return false;		}		// Write buffer to the data connection port		do		{			if (($result = @ fwrite($this->_dataconn, $buffer)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_DATA_PORT'), JLog::WARNING, 'jerror');				return false;			}			$buffer = substr($buffer, $result);		}		while ($buffer != "");		// Close the data connection port [Data transfer complete]		fclose($this->_dataconn);		// Verify that the server recieved the transfer		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_WRITE_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to list the filenames of the contents of a directory on the FTP server	 *	 * Note: Some servers also return folder names. However, to be sure to list folders on all	 * servers, you should use listDetails() instead if you also need to deal with folders	 *	 * @param   string  $path  Path local file to store on the FTP server	 *	 * @return  string  Directory listing	 *	 * @since   12.1	 */	public function listNames($path = null)	{		$data = null;		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (($list = @ftp_nlist($this->_conn, $path)) === false)			{				// Workaround for empty directories on some servers				if ($this->listDetails($path, 'files') === array())				{					return array();				}				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			$list = preg_replace('#^' . preg_quote($path, '#') . '[/\\\\]?#', '', $list);			if ($keys = array_merge(array_keys($list, '.'), array_keys($list, '..')))			{				foreach ($keys as $key)				{					unset($list[$key]);				}			}			return $list;		}		/*		 * If a path exists, prepend a space		 */		if ($path != null)		{			$path = ' ' . $path;		}		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('NLST' . $path, array(150, 125)))		{			@ fclose($this->_dataconn);			// Workaround for empty directories on some servers			if ($this->listDetails($path, 'files') === array())			{				return array();			}			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_BAD_RESPONSE_NLST', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		// Read in the file listing.		while (!feof($this->_dataconn))		{			$data .= fread($this->_dataconn, 4096);		}		fclose($this->_dataconn);		// Everything go okay?		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_BAD_RESPONSE_TRANSFER', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		$data = preg_split("/[" . CRLF . "]+/", $data, -1, PREG_SPLIT_NO_EMPTY);		$data = preg_replace('#^' . preg_quote(substr($path, 1), '#') . '[/\\\\]?#', '', $data);		if ($keys = array_merge(array_keys($data, '.'), array_keys($data, '..')))		{			foreach ($keys as $key)			{				unset($data[$key]);			}		}		return $data;	}	/**	 * Method to list the contents of a directory on the FTP server	 *	 * @param   string  $path  Path to the local file to be stored on the FTP server	 * @param   string  $type  Return type [raw|all|folders|files]	 *	 * @return  mixed  If $type is raw: string Directory listing, otherwise array of string with file-names	 *	 * @since   12.1	 */	public function listDetails($path = null, $type = 'all')	{		$dir_list = array();		$data = null;		$regs = null;		// TODO: Deal with recurse -- nightmare		// For now we will just set it to false		$recurse = false;		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (($contents = @ftp_rawlist($this->_conn, $path)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}		}		else		{			// Non Native mode			// Start passive mode			if (!$this->_passive())			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			// If a path exists, prepend a space			if ($path != null)			{				$path = ' ' . $path;			}			// Request the file listing			if (!$this->_putCmd(($recurse == true) ? 'LIST -R' : 'LIST' . $path, array(150, 125)))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_BAD_RESPONSE_LIST', $this->_response, $path), JLog::WARNING, 'jerror');				@ fclose($this->_dataconn);				return false;			}			// Read in the file listing.			while (!feof($this->_dataconn))			{				$data .= fread($this->_dataconn, 4096);			}			fclose($this->_dataconn);			// Everything go okay?			if (!$this->_verifyResponse(226))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_BAD_RESPONSE_TRANSFER', $this->_response, $path), JLog::WARNING, 'jerror');				return false;			}			$contents = explode(CRLF, $data);		}		// If only raw output is requested we are done		if ($type == 'raw')		{			return $data;		}		// If we received the listing of an empty directory, we are done as well		if (empty($contents[0]))		{			return $dir_list;		}		// If the server returned the number of results in the first response, let's dump it		if (strtolower(substr($contents[0], 0, 6)) == 'total ')		{			array_shift($contents);			if (!isset($contents[0]) || empty($contents[0]))			{				return $dir_list;			}		}		// Regular expressions for the directory listing parsing.		$regexps = array(			'UNIX' => '#([-dl][rwxstST-]+).* ([0-9]*) ([a-zA-Z0-9]+).* ([a-zA-Z0-9]+).* ([0-9]*)'				. ' ([a-zA-Z]+[0-9: ]*[0-9])[ ]+(([0-9]{1,2}:[0-9]{2})|[0-9]{4}) (.+)#',			'MAC' => '#([-dl][rwxstST-]+).* ?([0-9 ]*)?([a-zA-Z0-9]+).* ([a-zA-Z0-9]+).* ([0-9]*)'				. ' ([a-zA-Z]+[0-9: ]*[0-9])[ ]+(([0-9]{2}:[0-9]{2})|[0-9]{4}) (.+)#',			'WIN' => '#([0-9]{2})-([0-9]{2})-([0-9]{2}) +([0-9]{2}):([0-9]{2})(AM|PM) +([0-9]+|<DIR>) +(.+)#'		);		// Find out the format of the directory listing by matching one of the regexps		$osType = null;		foreach ($regexps as $k => $v)		{			if (@preg_match($v, $contents[0]))			{				$osType = $k;				$regexp = $v;				break;			}		}		if (!$osType)		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_UNRECOGNISED'), JLog::WARNING, 'jerror');			return false;		}		/*		 * Here is where it is going to get dirty....		 */		if ($osType == 'UNIX' || $osType == 'MAC')		{			foreach ($contents as $file)			{				$tmp_array = null;				if (@preg_match($regexp, $file, $regs))				{					$fType = (int) strpos("-dl", $regs[1]{0});					// $tmp_array['line'] = $regs[0];					$tmp_array['type'] = $fType;					$tmp_array['rights'] = $regs[1];					// $tmp_array['number'] = $regs[2];					$tmp_array['user'] = $regs[3];					$tmp_array['group'] = $regs[4];					$tmp_array['size'] = $regs[5];					$tmp_array['date'] = @date("m-d", strtotime($regs[6]));					$tmp_array['time'] = $regs[7];					$tmp_array['name'] = $regs[9];				}				// If we just want files, do not add a folder				if ($type == 'files' && $tmp_array['type'] == 1)				{					continue;				}				// If we just want folders, do not add a file				if ($type == 'folders' && $tmp_array['type'] == 0)				{					continue;				}				if (is_array($tmp_array) && $tmp_array['name'] != '.' && $tmp_array['name'] != '..')				{					$dir_list[] = $tmp_array;				}			}		}		else		{			foreach ($contents as $file)			{				$tmp_array = null;				if (@preg_match($regexp, $file, $regs))				{					$fType = (int) ($regs[7] == '<DIR>');					$timestamp = strtotime("$regs[3]-$regs[1]-$regs[2] $regs[4]:$regs[5]$regs[6]");					// $tmp_array['line'] = $regs[0];					$tmp_array['type'] = $fType;					$tmp_array['rights'] = '';					// $tmp_array['number'] = 0;					$tmp_array['user'] = '';					$tmp_array['group'] = '';					$tmp_array['size'] = (int) $regs[7];					$tmp_array['date'] = date('m-d', $timestamp);					$tmp_array['time'] = date('H:i', $timestamp);					$tmp_array['name'] = $regs[8];				}				// If we just want files, do not add a folder				if ($type == 'files' && $tmp_array['type'] == 1)				{					continue;				}				// If we just want folders, do not add a file				if ($type == 'folders' && $tmp_array['type'] == 0)				{					continue;				}				if (is_array($tmp_array) && $tmp_array['name'] != '.' && $tmp_array['name'] != '..')				{					$dir_list[] = $tmp_array;				}			}		}		return $dir_list;	}	/**	 * Send command to the FTP server and validate an expected response code	 *	 * @param   string  $cmd               Command to send to the FTP server	 * @param   mixed   $expectedResponse  Integer response code or array of integer response codes	 *	 * @return  boolean  True if command executed successfully	 *	 * @since   12.1	 */	protected function _putCmd($cmd, $expectedResponse)	{		// Make sure we have a connection to the server		if (!is_resource($this->_conn))		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_PUTCMD_UNCONNECTED'), JLog::WARNING, 'jerror');			return false;		}		// Send the command to the server		if (!fwrite($this->_conn, $cmd . "\r\n"))		{			JLog::add(JText::sprintf('DDD', JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PUTCMD_SEND', $cmd)), JLog::WARNING, 'jerror');		}		return $this->_verifyResponse($expectedResponse);	}	/**	 * Verify the response code from the server and log response if flag is set	 *	 * @param   mixed  $expected  Integer response code or array of integer response codes	 *	 * @return  boolean  True if response code from the server is expected	 *	 * @since   12.1	 */	protected function _verifyResponse($expected)	{		$parts = null;		// Wait for a response from the server, but timeout after the set time limit		$endTime = time() + $this->_timeout;		$this->_response = '';		do		{			$this->_response .= fgets($this->_conn, 4096);		}		while (!preg_match("/^([0-9]{3})(-(.*" . CRLF . ")+\\1)? [^" . CRLF . "]+" . CRLF . "$/", $this->_response, $parts) && time() < $endTime);		// Catch a timeout or bad response		if (!isset($parts[1]))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_VERIFYRESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		// Separate the code from the message		$this->_responseCode = $parts[1];		$this->_responseMsg = $parts[0];		// Did the server respond with the code we wanted?		if (is_array($expected))		{			if (in_array($this->_responseCode, $expected))			{				$retval = true;			}			else			{				$retval = false;			}		}		else		{			if ($this->_responseCode == $expected)			{				$retval = true;			}			else			{				$retval = false;			}		}		return $retval;	}	/**	 * Set server to passive mode and open a data port connection	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	protected function _passive()	{		$match = array();		$parts = array();		$errno = null;		$err = null;		// Make sure we have a connection to the server		if (!is_resource($this->_conn))		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_PASSIVE_CONNECT_PORT'), JLog::WARNING, 'jerror');			return false;		}		// Request a passive connection - this means, we'll talk to you, you don't talk to us.		@ fwrite($this->_conn, "PASV\r\n");		// Wait for a response from the server, but timeout after the set time limit		$endTime = time() + $this->_timeout;		$this->_response = '';		do		{			$this->_response .= fgets($this->_conn, 4096);		}		while (!preg_match("/^([0-9]{3})(-(.*" . CRLF . ")+\\1)? [^" . CRLF . "]+" . CRLF . "$/", $this->_response, $parts) && time() < $endTime);		// Catch a timeout or bad response		if (!isset($parts[1]))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		// Separate the code from the message		$this->_responseCode = $parts[1];		$this->_responseMsg = $parts[0];		// If it's not 227, we weren't given an IP and port, which means it failed.		if ($this->_responseCode != '227')		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_IP_OBTAIN', $this->_responseMsg), JLog::WARNING, 'jerror');			return false;		}		// Snatch the IP and port information, or die horribly trying...		if (preg_match('~\((\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))\)~', $this->_responseMsg, $match) == 0)		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_IP_VALID', $this->_responseMsg), JLog::WARNING, 'jerror');			return false;		}		// This is pretty simple - store it for later use ;).		$this->_pasv = array('ip' => $match[1] . '.' . $match[2] . '.' . $match[3] . '.' . $match[4], 'port' => $match[5] * 256 + $match[6]);		// Connect, assuming we've got a connection.		$this->_dataconn = @fsockopen($this->_pasv['ip'], $this->_pasv['port'], $errno, $err, $this->_timeout);		if (!$this->_dataconn)		{			JLog::add(				JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_CONNECT', $this->_pasv['ip'], $this->_pasv['port'], $errno, $err),				JLog::WARNING,				'jerror'			);			return false;		}		// Set the timeout for this connection		socket_set_timeout($this->_conn, $this->_timeout, 0);		return true;	}	/**	 * Method to find out the correct transfer mode for a specific file	 *	 * @param   string  $fileName  Name of the file	 *	 * @return  integer Transfer-mode for this filetype [FTP_ASCII|FTP_BINARY]	 *	 * @since   12.1	 */	protected function _findMode($fileName)	{		if ($this->_type == FTP_AUTOASCII)		{			$dot = strrpos($fileName, '.') + 1;			$ext = substr($fileName, $dot);			if (in_array($ext, $this->_autoAscii))			{				$mode = FTP_ASCII;			}			else			{				$mode = FTP_BINARY;			}		}		elseif ($this->_type == FTP_ASCII)		{			$mode = FTP_ASCII;		}		else		{			$mode = FTP_BINARY;		}		return $mode;	}	/**	 * Set transfer mode	 *	 * @param   integer  $mode  Integer representation of data transfer mode [1:Binary|0:Ascii]	 * Defined constants can also be used [FTP_BINARY|FTP_ASCII]	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	protected function _mode($mode)	{		if ($mode == FTP_BINARY)		{			if (!$this->_putCmd("TYPE I", 200))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_MODE_BINARY', $this->_response), JLog::WARNING, 'jerror');				return false;			}		}		else		{			if (!$this->_putCmd("TYPE A", 200))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_MODE_ASCII', $this->_response), JLog::WARNING, 'jerror');				return false;			}		}		return true;	}}/** * Deprecated class placeholder. You should use JClientFtp instead. * * @package     Joomla.Platform * @subpackage  Client * @since       11.1 * @deprecated  12.3 */class JFTP extends JClientFtp{	/**	 * JFTP object constructor	 *	 * @param   array  $options  Associative array of options to set	 *	 * @since   11.1	 */	public function __construct($options)	{		JLog::add('JFTP is deprecated. Use JClientFtp instead.', JLog::WARNING, 'deprecated');		parent::__construct($options);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_contact.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl><dt>				<?php echo JText::_('COM_CONTACT_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>            <?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// Detect if we have full UTF-8 and unicode PCRE support.if (!defined('JCOMPAT_UNICODE_PROPERTIES')){	define('JCOMPAT_UNICODE_PROPERTIES', (bool) @preg_match('/\pL/u', 'a'));}/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $regex;	/**	 * The regular expression modifiers to use when testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $modifiers;	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  UnexpectedValueException if rule is invalid.	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Check for a valid regex.		if (empty($this->regex))		{			throw new UnexpectedValueException(sprintf('%s has invalid regex.', get_class($this)));		}		// Add unicode property support if available.		if (JCOMPAT_UNICODE_PROPERTIES)		{			$this->modifiers = (strpos($this->modifiers, 'u') !== false) ? $this->modifiers : $this->modifiers . 'u';		}		// Test the value against the regular expression.		if (preg_match(chr(1) . $this->regex . chr(1) . $this->modifiers, $value))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_NEWSFEEDS_NO_ARTICLES'); ?>	 </p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>	<?php if ($this->params->get('show_pagination_limit')) : ?>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	<?php endif; ?>	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	</fieldset>	<table class="category">		<?php if ($this->params->get('show_headings') == 1) : ?>		<thead><tr>				<th class="item-title" id="tableOrdering">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_FEED_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<?php if ($this->params->get('show_articles')) : ?>				<th class="item-num-art" id="tableOrdering2">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES', 'a.numarticles', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>				<?php if ($this->params->get('show_link')) : ?>				<th class="item-link" id="tableOrdering3">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_FEED_LINK', 'a.link', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $item) : ?>		<?php if ($this->items[$i]->published == 0) : ?>			<tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">		<?php else: ?>			<tr class="cat-list-row<?php echo $i % 2; ?>" >		<?php endif; ?>					<td class="item-title">						<a href="<?php echo JRoute::_(NewsFeedsHelperRoute::getNewsfeedRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</td>					<?php  if ($this->params->get('show_articles')) : ?>						<td class="item-num-art">							<?php echo $item->numarticles; ?>						</td>					<?php  endif; ?>					<?php  if ($this->params->get('show_link')) : ?>						<td class="item-link">							<a href="<?php echo $item->link; ?>"><?php echo $item->link; ?></a>						</td>					<?php  endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php if ($this->params->get('show_pagination')) : ?>	<div class="pagination">	<?php if ($this->params->def('show_pagination_results', 1)) : ?>		<p class="counter">			<?php echo $this->pagination->getPagesCounter(); ?>		</p>	<?php endif; ?>	<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Get additional language strings prefixed with TPL_HATHOR$lang = JFactory::getLanguage();$lang->load('tpl_hathor', JPATH_ADMINISTRATOR)|| $lang->load('tpl_hathor', JPATH_ADMINISTRATOR . '/templates/hathor/language');$app	= JFactory::getApplication();$doc	= JFactory::getDocument();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Load template javascript$doc->addScript('templates/'.$this->template.'/js/template.js', 'text/javascript');// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo  $this->language; ?>" lang="<?php echo  $this->language; ?>" dir="<?php echo  $this->direction; ?>" ><head><jdoc:include type="head" /><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--></head><body class="contentpane">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_installer */class InstallerControllerInstall extends JControllerLegacy{	/**	 * Install an extension.	 *	 * @return  void	 * @since   1.5	 */	public function install()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('install');		if ($model->install())		{			$cache = JFactory::getCache('mod_menu');			$cache->clean();			// TODO: Reset the users acl here as well to kill off any missing bits		}		$app = JFactory::getApplication();		$redirect_url = $app->getUserState('com_installer.redirect_url');		if (empty($redirect_url))		{			$redirect_url = JRoute::_('index.php?option=com_installer&view=install', false);		} else		{			// wipe out the user state when we're going to redirect			$app->setUserState('com_installer.redirect_url', '');			$app->setUserState('com_installer.message', '');			$app->setUserState('com_installer.extension_message', '');		}		$this->setRedirect($redirect_url);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * OpenSearch View class for the Search component * * @package     Joomla.Site * @subpackage  Search * @since       1.7 */class SearchViewSearch extends JViewLegacy{	public function display($tpl = null)	{		$doc = JFactory::getDocument();		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_search');		$doc->setShortName($params->get('opensearch_name', $app->getCfg('sitename')));		$doc->setDescription($params->get('opensearch_description', $app->getCfg('MetaDesc')));		// Add the URL for the search		$searchUri = JURI::base().'index.php?option=com_search&searchword={searchTerms}';		// Find the menu item for the search		$menu	= $app->getMenu();		$items	= $menu->getItems('link', 'index.php?option=com_search&view=search');		if (isset($items[0]))		{			$searchUri .= '&Itemid='.$items[0]->id;		}		$htmlSearch = new JOpenSearchUrl;		$htmlSearch->template = JRoute::_($searchUri);		$doc->addUrl($htmlSearch);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class to fire onContentPrepare for non-article based content. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlContent{	/**	 * Fire onContentPrepare for content that isn't part of an article.	 *	 * @param   string  $text     The content to be transformed.	 * @param   array   $params   The content params.	 * @param   string  $context  The context of the content to be transformed.	 *	 * @return  string   The content after transformation.	 *	 * @since   11.1	 */	public static function prepare($text, $params = null, $context = 'text')	{		if ($params === null)		{			$params = new JObject;		}		$article = new stdClass;		$article->text = $text;		JPluginHelper::importPlugin('content');		$dispatcher = JEventDispatcher::getInstance();		$dispatcher->trigger('onContentPrepare', array($context, &$article, &$params, 0));		return $article->text;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseMysqli is deprecated, use JDatabaseDriverMysqli instead.', JLog::WARNING, 'deprecated');/** * MySQLi database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://php.net/manual/en/book.mysqli.php * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverMysqli instead. */class JDatabaseMysqli extends JDatabaseDriverMysqli{}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * String Controller * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JStringController{	/**	 * Defines a variable as an array	 *	 * @return  array	 *	 * @since   11.1	 */	public function _getArray()	{		static $strings = array();		return $strings;	}	/**	 * Create a reference	 *	 * @param   string  $reference  The key	 * @param   string  &$string    The value	 *	 * @return  void	 *	 * @since   11.1	 */	public function createRef($reference, &$string)	{		$ref = &self::_getArray();		$ref[$reference] = & $string;	}	/**	 * Get reference	 *	 * @param   string  $reference  The key for the reference.	 *	 * @return  mixed  False if not set, reference if it it exists	 *	 * @since   11.1	 */	public function getRef($reference)	{		$ref = &self::_getArray();		if (isset($ref[$reference]))		{			return $ref[$reference];		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Joomla Core Pre-Install View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewPreinstallHtml extends InstallationViewDefault{	/**	 * Array of PHP config options     *     * @var    array	 * @since  3.1	 */	protected $options;	/**	 * Array of PHP settings     *     * @var    array	 * @since  3.1	 */	protected $settings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options  = $this->model->getPhpOptions();		$this->settings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersViewRemind extends JViewLegacy{	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	$tpl	The template file to include	 * @since   1.5	 */	public function display($tpl = null)	{		// Get the view data.		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->params;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_REMIND'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Database Query Limitable Interface. * Adds bind/unbind methods as well as a getBounded() method * to retrieve the stored bounded variables on demand prior to * query execution. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */interface JDatabaseQueryLimitable{	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0);	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0);}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');?><div class="reset-confirm<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=reset.confirm'); ?>" method="post" class="form-validate">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<dl>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<dt><?php echo $field->label; ?></dt>				<dd><?php echo $field->input; ?></dd>			<?php endforeach; ?>			</dl>		</fieldset>		<?php endforeach; ?>		<div>			<button type="submit" class="validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.noframes');// Get the login modules// If you want to use a completely different login module change the value of name// in your layout override.$loginmodule = LoginModelLogin::getLoginModule('mod_login');echo JModuleHelper::renderModule($loginmodule, array('style' => 'rounded', 'id' => 'section-box'));//Get any other modules in the login position.//If you want to use a different position for the modules, change the name here in your override.$modules = JModuleHelper::getModules('login');foreach ($modules as $module)// Render the login modulesif ($module->module != 'mod_login'){	echo JModuleHelper::renderModule($module, array('style' => 'rounded', 'id' => 'section-box'));}
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract observer class to implement the observer design pattern * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */abstract class JObserver extends JObject{	/**	 * Event object to observe.	 *	 * @var    object	 * @since  11.1	 * @deprecated  12.3	 */	protected $_subject = null;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function __construct(&$subject)	{		// Register the observer ($this) so we can be notified		$subject->attach($this);		// Set the subject to observe		$this->_subject = &$subject;	}	/**	 * Method to update the state of observable objects	 *	 * @param   array  &$args  An array of arguments to pass to the listener.	 *	 * @return  mixed	 *	 * @since   11.1	 * @deprecated  12.3	 */	public abstract function update(&$args);}
<?php/** * Parses and verifies the doc comments for classes. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ClassCommentSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_CommentParser_ClassCommentParser', true) === false) {    $error = 'Class PHP_CodeSniffer_CommentParser_ClassCommentParser not found';    throw new PHP_CodeSniffer_Exception($error);}require_once 'FileCommentSniff.php';if (class_exists('Joomla_Sniffs_Commenting_FileCommentSniff', true) === false) {    $error = 'Class Joomla_Sniffs_Commenting_FileCommentSniff not found';    throw new PHP_CodeSniffer_Exception($error);}/** * Parses and verifies the doc comments for classes. * * Verifies that : * <ul> *  <li>A doc comment exists.</li> *  <li>There is a blank newline after the short description.</li> *  <li>There is a blank newline between the long and short description.</li> *  <li>There is a blank newline between the long description and tags.</li> *  <li>Check the order of the tags.</li> *  <li>Check the indentation of each tag.</li> *  <li>Check required and optional tags and the format of their content.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Commenting_ClassCommentSniff extends Joomla_Sniffs_Commenting_FileCommentSniff{    /**     * Tags in correct order and related info.     *     * @var array     */    protected $tags = array(                       'version'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'is first',                                       ),                       'category'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @version (if used)',                                       ),                       'package'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @category (if used)',                                       ),                       'subpackage' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @package',                                       ),                       'author'    => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'is first',                                       ),                       'copyright'  => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @author (if used) or @subpackage (if used) or @package',                                       ),                       'license'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @copyright (if used)',                                       ),                       'link'       => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @version (if used)',                                       ),                       'see'        => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @link (if used)',                                       ),                       'since'      => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @see (if used) or @link (if used)',                                       ),                       'deprecated' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @since (if used) or @see (if used) or @link (if used)',                                       ),                );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(                T_CLASS,                T_INTERFACE,               );    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $this->currentFile = $phpcsFile;        $tokens    = $phpcsFile->getTokens();        $type      = strtolower($tokens[$stackPtr]['content']);        $errorData = array($type);        $find      = array(                      T_ABSTRACT,                      T_WHITESPACE,                      T_FINAL,                     );        // Extract the class comment docblock.        $commentEnd = $phpcsFile->findPrevious($find, ($stackPtr - 1), null, true);        if ($commentEnd !== false && $tokens[$commentEnd]['code'] === T_COMMENT) {            $error = 'You must use "/**" style comments for a %s comment';            $phpcsFile->addError($error, $stackPtr, 'WrongStyle', $errorData);            return;        } else if ($commentEnd === false            || $tokens[$commentEnd]['code'] !== T_DOC_COMMENT        ) {            $phpcsFile->addError('Missing %s doc comment', $stackPtr, 'Missing', $errorData);            return;        }        $commentStart = ($phpcsFile->findPrevious(T_DOC_COMMENT, ($commentEnd - 1), null, true) + 1);        $commentNext  = $phpcsFile->findPrevious(T_WHITESPACE, ($commentEnd + 1), $stackPtr, false, $phpcsFile->eolChar);        // Distinguish file and class comment.        $prevClassToken = $phpcsFile->findPrevious(T_CLASS, ($stackPtr - 1));        if ($prevClassToken === false) {            // This is the first class token in this file, need extra checks.            $prevNonComment = $phpcsFile->findPrevious(T_DOC_COMMENT, ($commentStart - 1), null, true);            if ($prevNonComment !== false) {                $prevComment = $phpcsFile->findPrevious(T_DOC_COMMENT, ($prevNonComment - 1));                if ($prevComment === false) {                    // There is only 1 doc comment between open tag and class token.                    $newlineToken = $phpcsFile->findNext(T_WHITESPACE, ($commentEnd + 1), $stackPtr, false, $phpcsFile->eolChar);                    if ($newlineToken !== false) {                        $newlineToken = $phpcsFile->findNext(                            T_WHITESPACE,                            ($newlineToken + 1),                            $stackPtr,                            false,                            $phpcsFile->eolChar                        );                        if ($newlineToken !== false) {                            // Blank line between the class and the doc block.                            // The doc block is most likely a file comment.                            $error = 'Missing %s doc comment';                            $phpcsFile->addError($error, ($stackPtr + 1), 'Missing', $errorData);                            return;                        }                    }//end if                }//end if            }//end if        }//end if        $comment = $phpcsFile->getTokensAsString(            $commentStart,            ($commentEnd - $commentStart + 1)        );        // Parse the class comment.docblock.        try {            $this->commentParser = new PHP_CodeSniffer_CommentParser_ClassCommentParser($comment, $phpcsFile);            $this->commentParser->parse();        } catch (PHP_CodeSniffer_CommentParser_ParserException $e) {            $line = ($e->getLineWithinComment() + $commentStart);            $phpcsFile->addError($e->getMessage(), $line, 'FailedParse');            return;        }        $comment = $this->commentParser->getComment();        if (is_null($comment) === true) {            $error = 'Doc comment is empty for %s';            $phpcsFile->addError($error, $commentStart, 'Empty', $errorData);            return;        }        // No extra newline before short description.        $short        = $comment->getShortComment();        $newlineCount = 0;        $newlineSpan  = strspn($short, $phpcsFile->eolChar);        if ($short !== '' && $newlineSpan > 0) {            $error = 'Extra newline(s) found before %s comment short description';            $phpcsFile->addError($error, ($commentStart + 1), 'SpacingBeforeShort', $errorData);        }        $newlineCount = (substr_count($short, $phpcsFile->eolChar) + 1);        // Exactly one blank line between short and long description.        $long = $comment->getLongComment();        if (empty($long) === false) {            $between        = $comment->getWhiteSpaceBetween();            $newlineBetween = substr_count($between, $phpcsFile->eolChar);            if ($newlineBetween !== 2) {                $error = 'There must be exactly one blank line between descriptions in %s comments';                $phpcsFile->addError($error, ($commentStart + $newlineCount + 1), 'SpacingAfterShort', $errorData);            }            $newlineCount += $newlineBetween;        }        // Exactly one blank line before tags.        $tags = $this->commentParser->getTagOrders();        if (count($tags) > 1) {            $newlineSpan = $comment->getNewlineAfter();            if ($newlineSpan !== 2) {                $error = 'There must be exactly one blank line before the tags in %s comments';                if ($long !== '') {                    $newlineCount += (substr_count($long, $phpcsFile->eolChar) - $newlineSpan + 1);                }                $phpcsFile->addError($error, ($commentStart + $newlineCount), 'SpacingBeforeTags', $errorData);                $short = rtrim($short, $phpcsFile->eolChar.' ');            }        }        // Check each tag.        $this->processTags($commentStart, $commentEnd);    }//end process()    /**     * Process the version tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processVersion($errorPos)    {        $version = $this->commentParser->getVersion();        if ($version !== null) {            $content = $version->getContent();            $matches = array();            if (empty($content) === true) {                $error = 'Content missing for @version tag in doc comment';                $this->currentFile->addError($error, $errorPos, 'EmptyVersion');            } else if ((strstr($content, 'Release:') === false)) {                $error = 'Invalid version "%s" in doc comment; consider "Release: <package_version>" instead';                $data  = array($content);                $this->currentFile->addWarning($error, $errorPos, 'InvalidVersion', $data);            }        }    }//end processVersion()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users mail controller. * * @package     Joomla.Administrator * @subpackage  com_users */class UsersControllerMail extends JControllerLegacy{	public function send()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Mail');		if ($model->send())		{			$type = 'message';		}		else		{			$type = 'error';		}		$msg = $model->getError();		$this->setredirect('index.php?option=com_users&view=mail', $msg, $type);	}	public function cancel()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$this->setRedirect('index.php');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google authentication class abstract * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleAuth{	/**	 * @var    JRegistry  Options for the Google authentication object.	 * @since  12.3	 */	protected $options;	/**	 * Abstract method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	abstract public function authenticate();	/**	 * Verify if the client has been authenticated	 *	 * @return  boolean  Is authenticated	 *	 * @since   12.3	 */	abstract public function isAuthenticated();	/**	 * Abstract method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	abstract public function query($url, $data = null, $headers = null, $method = 'get');	/**	 * Get an option from the JGoogleAuth object.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleAuth object.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleAuth  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Finder module helper. * * @package     Joomla.Site * @subpackage  mod_finder * @since       2.5 */class ModFinderHelper{	/**	 * Method to get hidden input fields for a get form so that control variables	 * are not lost upon form submission.	 *	 * @param   string  $route  The route to the page. [optional]	 *	 * @return  string  A string of hidden input form fields	 *	 * @since   2.5	 */	public static function getGetFields($route = null)	{		$fields = null;		$uri = JUri::getInstance(JRoute::_($route));		$uri->delVar('q');		$elements = $uri->getQuery(true);		// Create hidden input elements for each part of the URI.		// Add the current menu id if it doesn't have one		$needId = true;		foreach ($elements as $n => $v)		{			$fields .= '<input type="hidden" name="' . $n . '" value="' . $v . '" />';			if ($n == 'Itemid')			{				$needId = false;			}		}		if ($needId)		{			$fields .= '<input type="hidden" name="Itemid" value="' . JFactory::getApplication()->input->get('Itemid', '0', 'int') . '" />';		}		return $fields;	}	/**	 * Get Smart Search query object.	 *	 * @param   JRegistry object containing module parameters.	 *	 * @return  FinderIndexerQuery object	 *	 * @since   2.5	 */	public static function getQuery($params)	{		$app = JFactory::getApplication();		$input = $app->input;		$request = $input->request;		$filter = JFilterInput::getInstance();		// Get the static taxonomy filters.		$options = array();		$options['filter'] = ($request->get('f', 0, 'int') != 0) ? $request->get('f', '', 'int') : $params->get('searchfilter');		$options['filter'] = $filter->clean($options['filter'], 'int');		// Get the dynamic taxonomy filters.		$options['filters'] = $request->get('t', '', 'array');		$options['filters'] = $filter->clean($options['filters'], 'array');		JArrayHelper::toInteger($options['filters']);		// Instantiate a query object.		$query = new FinderIndexerQuery($options);		return $query;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Memcached session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSessionStorageMemcached extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('Memcached Extension is not available', 404);		}		parent::__construct($options);		$config = JFactory::getConfig();		// This will be an array of loveliness		// @todo: multiple servers		$this->_servers = array(			array(				'host' => $config->get('memcache_server_host', 'localhost'),				'port' => $config->get('memcache_server_port', 11211)			)		);	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   12.2	 */	public function register()	{		ini_set('session.save_path', $this->_servers['host'] . ':' . $this->_servers['port']);		ini_set('session.save_handler', 'memcached');	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	static public function isSupported()	{		return (extension_loaded('memcached') && class_exists('Memcached'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link controller class. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectControllerLink extends JControllerForm{	// Parent class access checks are sufficient for this controller.}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="control-group">	<?php echo $this->form->getLabel('metadesc'); ?>	<div class="controls">		<?php echo $this->form->getInput('metadesc'); ?>	</div></div><div class="control-group">	<?php echo $this->form->getLabel('metakey'); ?>	<div class="controls">		<?php echo $this->form->getInput('metakey'); ?>	</div></div><?php foreach($this->form->getGroup('metadata') as $field): ?><div class="control-group">	<?php if (!$field->hidden): ?>		<?php echo $field->label; ?>	<?php endif; ?>	<div class="controls">		<?php echo $field->input; ?>	</div></div><?php endforeach; ?>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewRemoveHtml $this */?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="alert alert-error inlineError" id="theDefaultError" style="display: none">		<h4 class="alert-heading"><?php echo JText::_('JERROR'); ?></h4>		<p id="theDefaultErrorMessage"></p>	</div>	<div class="alert alert-success">	<h3><?php echo JText::_('INSTL_COMPLETE_TITLE'); ?></h3>	</div>	<div class="alert">		<p><?php echo JText::_('INSTL_COMPLETE_REMOVE_INSTALLATION'); ?></p>		<input type="button" class="btn btn-warning" name="instDefault" onclick="Install.removeFolder(this);" value="<?php echo JText::_('INSTL_COMPLETE_REMOVE_FOLDER'); ?>" />	</div>	<div class="btn-toolbar">		<div class="btn-group">			<a class="btn" href="<?php echo JURI::root(); ?>" title="<?php echo JText::_('JSITE'); ?>"><i class="icon-eye-open"></i> <?php echo JText::_('JSITE'); ?></a>		</div>		<div class="btn-group">			<a class="btn btn-primary" href="<?php echo JURI::root(); ?>administrator/" title="<?php echo JText::_('JADMINISTRATOR'); ?>"><i class="icon-lock icon-white"></i> <?php echo JText::_('JADMINISTRATOR'); ?></a>		</div>	</div>	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Legacy * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('LogException is deprecated, use SPL Exceptions instead.', JLog::WARNING, 'deprecated');/** * Exception class definition for the Log subpackage. * * @package     Joomla.Legacy * @subpackage  Log * @since       11.1 * @deprecated  12.3 Use semantic exceptions instead */class LogException extends RuntimeException{}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Suggestions JSON controller for Finder. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderControllerSuggestions extends JControllerLegacy{	/**	 * Method to find search query suggestions.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  void	 *	 * @since   2.5	 */	public function display($cachable = false, $urlparams = false)	{		$return = array();		$params = JComponentHelper::getParams('com_finder');		if ($params->get('show_autosuggest', 1))		{			// Get the suggestions.			$model = $this->getModel('Suggestions', 'FinderModel');			$return = $model->getItems();		}		// Check the data.		if (empty($return))		{			$return = array();		}		// Use the correct json mime-type		header('Content-Type: application/json');		// Send the response.		echo json_encode($return);		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Utility class for icons. * * @package     Joomla.Libraries * @subpackage  HTML * @since       2.5 */abstract class JHtmlIcons{	/**	 * Method to generate html code for a list of buttons	 *	 * @param   array  $buttons  Array of buttons	 *	 * @return  string	 *	 * @since   2.5	 */	public static function buttons($buttons)	{		$html = array();		foreach ($buttons as $button)		{			$html[] = JHtml::_('icons.button', $button);		}		return implode($html);	}	/**	 * Method to generate html code for a list of buttons	 *	 * @param   array  $button  Button properties	 *	 * @return  string	 *	 * @since   2.5	 */	public static function button($button)	{		if (isset($button['access']))		{			if (is_bool($button['access']))			{				if ($button['access'] == false)				{					return '';				}			}			else			{				// Get the user object to verify permissions				$user = JFactory::getUser();				// Take each pair of permission, context values.				for ($i = 0, $n = count($button['access']); $i < $n; $i += 2)				{					if (!$user->authorise($button['access'][$i], $button['access'][$i + 1]))					{						return '';					}				}			}		}		// Instantiate a new JLayoutFile instance and render the layout		$layout = new JLayoutFile('joomla.quickicons.icon');		return $layout->render($button);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Base controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document	= JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->getCmd('view', 'login');		$vFormat = $document->getType();		$lName   = $this->input->getCmd('layout', 'default');		if ($view = $this->getView($vName, $vFormat))		{			// Do any specific processing by view.			switch ($vName)			{				case 'registration':					// If the user is already logged in, redirect to the profile page.					$user = JFactory::getUser();					if ($user->get('guest') != 1)					{						// Redirect to profile page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile', false));						return;					}					// Check if user registration is enabled					if (JComponentHelper::getParams('com_users')->get('allowUserRegistration') == 0)					{						// Registration is disabled - Redirect to login page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));						return;					}					// The user is a guest, load the registration model and show the registration page.					$model = $this->getModel('Registration');					break;				// Handle view specific models.				case 'profile':					// If the user is a guest, redirect to the login page.					$user = JFactory::getUser();					if ($user->get('guest') == 1)					{						// Redirect to login page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));						return;					}					$model = $this->getModel($vName);					break;				// Handle the default views.				case 'login':					$model = $this->getModel($vName);					break;				case 'reset':					// If the user is already logged in, redirect to the profile page.					$user = JFactory::getUser();					if ($user->get('guest') != 1)					{						// Redirect to profile page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile', false));						return;					}					$model = $this->getModel($vName);					break;				case 'remind':					// If the user is already logged in, redirect to the profile page.					$user = JFactory::getUser();					if ($user->get('guest') != 1)					{						// Redirect to profile page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile', false));						return;					}					$model = $this->getModel($vName);					break;				default:					$model = $this->getModel('Login');					break;			}			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			$view->display();		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$list = ModArticlesNewsHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_articles_news', $params->get('layout', 'horizontal'));
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Model Class * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */abstract class JModelDatabase extends JModelBase{	/**	 * The database driver.	 *	 * @var    JDatabaseDriver	 * @since  12.1	 */	protected $db;	/**	 * Instantiate the model.	 *	 * @param   JRegistry        $state  The model state.	 * @param   JDatabaseDriver  $db     The database adpater.	 *	 * @since   12.1	 */	public function __construct(JRegistry $state = null, JDatabaseDriver $db = null)	{		parent::__construct($state);		// Setup the model.		$this->db = isset($db) ? $db : $this->loadDb();	}	/**	 * Get the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	public function getDb()	{		return $this->db;	}	/**	 * Set the database driver.	 *	 * @param   JDatabaseDriver  $db  The database driver.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setDb(JDatabaseDriver $db)	{		$this->db = $db;	}	/**	 * Load the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	protected function loadDb()	{		return JFactory::getDbo();	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for Sliders elements * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlSliders{	/**	 * Creates a panes and loads the javascript behavior for it.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  An array of options.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function start($group = 'sliders', $params = array())	{		self::_loadBehavior($group, $params);		return '<div id="' . $group . '" class="pane-sliders"><div style="display:none;"><div>';	}	/**	 * Close the current pane.	 *	 * @return  string  hTML to close the pane	 *	 * @since   11.1	 */	public static function end()	{		return '</div></div></div>';	}	/**	 * Begins the display of a new panel.	 *	 * @param   string  $text  Text to display.	 * @param   string  $id    Identifier of the panel.	 *	 * @return  string  HTML to start a panel	 *	 * @since   11.1	 */	public static function panel($text, $id)	{		return '</div></div><div class="panel"><h3 class="pane-toggler title" id="' . $id . '"><a href="javascript:void(0);"><span>' . $text			. '</span></a></h3><div class="pane-slider content">';	}	/**	 * Load the JavaScript behavior.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  Array of options.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _loadBehavior($group, $params = array())	{		static $loaded = array();		if (!array_key_exists($group, $loaded))		{			// Get the JInput object			$input = JFactory::getApplication()->input;			$loaded[$group] = true;			// Include mootools framework.			JHtml::_('behavior.framework', true);			$document = JFactory::getDocument();			$display = (isset($params['startOffset']) && isset($params['startTransition']) && $params['startTransition'])				? (int) $params['startOffset'] : null;			$show = (isset($params['startOffset']) && !(isset($params['startTransition']) && $params['startTransition']))				? (int) $params['startOffset'] : null;			$opt['onActive'] = "\\function(toggler, i) {toggler.addClass('pane-toggler-down');" .				"toggler.removeClass('pane-toggler');i.addClass('pane-down');i.removeClass('pane-hide');Cookie.write('jpanesliders_"				. $group . "',$$('div#" . $group . ".pane-sliders > .panel > h3').indexOf(toggler));}";			$opt['onBackground'] = "\\function(toggler, i) {toggler.addClass('pane-toggler');" .				"toggler.removeClass('pane-toggler-down');i.addClass('pane-hide');i.removeClass('pane-down');if($$('div#"				. $group . ".pane-sliders > .panel > h3').length==$$('div#" . $group				. ".pane-sliders > .panel > h3.pane-toggler').length) Cookie.write('jpanesliders_" . $group . "',-1);}";			$opt['duration'] = (isset($params['duration'])) ? (int) $params['duration'] : 300;			$opt['display'] = (isset($params['useCookie']) && $params['useCookie']) ? $input->cookie->get('jpanesliders_' . $group, $display, 'integer')				: $display;			$opt['show'] = (isset($params['useCookie']) && $params['useCookie']) ? $input->cookie->get('jpanesliders_' . $group, $show, 'integer') : $show;			$opt['opacity'] = (isset($params['opacityTransition']) && ($params['opacityTransition'])) ? 'true' : 'false';			$opt['alwaysHide'] = (isset($params['allowAllClose']) && (!$params['allowAllClose'])) ? 'false' : 'true';			$options = JHtml::getJSObject($opt);			$js = "window.addEvent('domready', function(){ new Fx.Accordion($$('div#" . $group				. ".pane-sliders > .panel > h3.pane-toggler'), $$('div#" . $group . ".pane-sliders > .panel > div.pane-slider'), " . $options				. "); });";			$document->addScriptDeclaration($js);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');/** * A Unified Diff Format Patcher class * * @package     Joomla.Platform * @subpackage  FileSystem * * @link        http://sourceforge.net/projects/phppatcher/ This has been derived from the PhpPatcher version 0.1.1 written by Giuseppe Mazzotta * @since       12.1 */class JFilesystemPatcher{	/**	 * Regular expression for searching source files	 */	const SRC_FILE = '/^---\\s+(\\S+)\s+\\d{1,4}-\\d{1,2}-\\d{1,2}\\s+\\d{1,2}:\\d{1,2}:\\d{1,2}(\\.\\d+)?\\s+(\+|-)\\d{4}/A';	/**	 * Regular expression for searching destination files	 */	const DST_FILE = '/^\\+\\+\\+\\s+(\\S+)\s+\\d{1,4}-\\d{1,2}-\\d{1,2}\\s+\\d{1,2}:\\d{1,2}:\\d{1,2}(\\.\\d+)?\\s+(\+|-)\\d{4}/A';	/**	 * Regular expression for searching hunks of differences	 */	const HUNK = '/@@ -(\\d+)(,(\\d+))?\\s+\\+(\\d+)(,(\\d+))?\\s+@@($)/A';	/**	 * Regular expression for splitting lines	 */	const SPLIT = '/(\r\n)|(\r)|(\n)/';	/**	 * @var  array  sources files	 *	 * @since   12.1	 */	protected $sources = array();	/**	 * @var  array  destination files	 *	 * @since   12.1	 */	protected $destinations = array();	/**	 * @var  array  removal files	 *	 * @since   12.1	 */	protected $removals = array();	/**	 * @var  array  patches	 *	 * @since   12.1	 */	protected $patches = array();	/**	 * @var  array  instance of this class	 *	 * @since   12.1	 */	protected static $instance;	/**	 * Constructor	 *	 * The constructor is protected to force the use of JFilesystemPatcher::getInstance()	 *	 * @since   12.1	 */	protected function __construct()	{	}	/**	 * Method to get a patcher	 *	 * @return  JFilesystemPatcher  an instance of the patcher	 *	 * @since   12.1	 */	public static function getInstance()	{		if (!isset(static::$instance))		{			static::$instance = new static;		}		return static::$instance;	}	/**	 * Reset the pacher	 *	 * @return  JFilesystemPatcher  This object for chaining	 */	public function reset()	{		$this->sources = array();		$this->destinations = array();		$this->removals = array();		$this->patches = array();		return $this;	}	/**	 * Apply the patches	 *	 * @throw  RuntimeException	 *	 * @return integer the number of files patched	 */	public function apply()	{		foreach ($this->patches as $patch)		{			// Separate the input into lines			$lines = self::splitLines($patch['udiff']);			// Loop for each header			while (self::findHeader($lines, $src, $dst))			{				$done = false;				if ($patch['strip'] === null)				{					$src = $patch['root'] . preg_replace('#^([^/]*/)*#', '', $src);					$dst = $patch['root'] . preg_replace('#^([^/]*/)*#', '', $dst);				}				else				{					$src = $patch['root'] . preg_replace('#^([^/]*/){' . (int) $patch['strip'] . '}#', '', $src);					$dst = $patch['root'] . preg_replace('#^([^/]*/){' . (int) $patch['strip'] . '}#', '', $dst);				}				// Loop for each hunk of differences				while (self::findHunk($lines, $src_line, $src_size, $dst_line, $dst_size))				{					$done = true;					// Apply the hunk of differences					$this->applyHunk($lines, $src, $dst, $src_line, $src_size, $dst_line, $dst_size);				}				// If no modifications were found, throw an exception				if (!$done)				{					throw new RuntimeException('Invalid Diff');				}			}		}		// Initialize the counter		$done = 0;		// Patch each destination file		foreach ($this->destinations as $file => $content)		{			if (JFile::write($file, implode("\n", $content)))			{				if (isset($this->sources[$file]))				{					$this->sources[$file] = $content;				}				$done++;			}		}		// Remove each removed file		foreach ($this->removals as $file)		{			if (JFile::delete($file))			{				if (isset($this->sources[$file]))				{					unset($this->sources[$file]);				}				$done++;			}		}		// Clear the destinations cache		$this->destinations = array();		// Clear the removals		$this->removals = array();		// Clear the patches		$this->patches = array();		return $done;	}	/**	 * Add a unified diff file to the patcher	 *	 * @param   string  $filename  Path to the unified diff file	 * @param   string  $root      The files root path	 * @param   string  $strip     The number of '/' to strip	 *	 * @return	JFilesystemPatch $this for chaining	 *	 * @since   12.1	 */	public function addFile($filename, $root = JPATH_BASE, $strip = 0)	{		return $this->add(file_get_contents($filename), $root, $strip);	}	/**	 * Add a unified diff string to the patcher	 *	 * @param   string  $udiff  Unified diff input string	 * @param   string  $root   The files root path	 * @param   string  $strip  The number of '/' to strip	 *	 * @return	JFilesystemPatch $this for chaining	 *	 * @since   12.1	 */	public function add($udiff, $root = JPATH_BASE, $strip = 0)	{		$this->patches[] = array(			'udiff' => $udiff,			'root' => isset($root) ? rtrim($root, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR : '',			'strip' => $strip		);		return $this;	}	/**	 * Separate CR or CRLF lines	 *	 * @param   string  $data  Input string	 *	 * @return  array  The lines of the inputdestination file	 *	 * @since   12.1	 */	protected static function splitLines($data)	{		return preg_split(self::SPLIT, $data);	}	/**	 * Find the diff header	 *	 * The internal array pointer of $lines is on the next line after the finding	 *	 * @param   array   &$lines  The udiff array of lines	 * @param   string  &$src    The source file	 * @param   string  &$dst    The destination file	 *	 * @return  boolean  TRUE in case of success, FALSE in case of failure	 *	 * @throw  RuntimeException	 */	protected static function findHeader(&$lines, &$src, &$dst)	{		// Get the current line		$line = current($lines);		// Search for the header		while ($line !== false && !preg_match(self::SRC_FILE, $line, $m))		{			$line = next($lines);		}		if ($line === false)		{			// No header found, return false			return false;		}		else		{			// Set the source file			$src = $m[1];			// Advance to the next line			$line = next($lines);			if ($line === false)			{				throw new RuntimeException('Unexpected EOF');			}			// Search the destination file			if (!preg_match(self::DST_FILE, $line, $m))			{				throw new RuntimeException('Invalid Diff file');			}			// Set the destination file			$dst = $m[1];			// Advance to the next line			if (next($lines) === false)			{				throw new RuntimeException('Unexpected EOF');			}			return true;		}	}	/**	 * Find the next hunk of difference	 *	 * The internal array pointer of $lines is on the next line after the finding	 *	 * @param   array   &$lines     The udiff array of lines	 * @param   string  &$src_line  The beginning of the patch for the source file	 * @param   string  &$src_size  The size of the patch for the source file	 * @param   string  &$dst_line  The beginning of the patch for the destination file	 * @param   string  &$dst_size  The size of the patch for the destination file	 *	 * @return  boolean  TRUE in case of success, false in case of failure	 *	 * @throw  RuntimeException	 */	protected static function findHunk(&$lines, &$src_line, &$src_size, &$dst_line, &$dst_size)	{		$line = current($lines);		if (preg_match(self::HUNK, $line, $m))		{			$src_line = (int) $m[1];			if ($m[3] === '')			{				$src_size = 1;			}			else			{				$src_size = (int) $m[3];			}			$dst_line = (int) $m[4];			if ($m[6] === '')			{				$dst_size = 1;			}			else			{				$dst_size = (int) $m[6];			}			if (next($lines) === false)			{				throw new RuntimeException('Unexpected EOF');			}			return true;		}		else		{			return false;		}	}	/**	 * Apply the patch	 *	 * @param   array   &$lines    The udiff array of lines	 * @param   string  $src       The source file	 * @param   string  $dst       The destination file	 * @param   string  $src_line  The beginning of the patch for the source file	 * @param   string  $src_size  The size of the patch for the source file	 * @param   string  $dst_line  The beginning of the patch for the destination file	 * @param   string  $dst_size  The size of the patch for the destination file	 *	 * @return  void	 *	 * @throw  RuntimeException	 */	protected function applyHunk(&$lines, $src, $dst, $src_line, $src_size, $dst_line, $dst_size)	{		$src_line--;		$dst_line--;		$line = current($lines);		// Source lines (old file)		$source = array();		// New lines (new file)		$destin = array();		$src_left = $src_size;		$dst_left = $dst_size;		do		{			if (!isset($line[0]))			{				$source[] = '';				$destin[] = '';				$src_left--;				$dst_left--;			}			elseif ($line[0] == '-')			{				if ($src_left == 0)				{					throw new RuntimeException(JText::sprintf('JLIB_FILESYSTEM_PATCHER_REMOVE_LINE', key($lines)));				}				$source[] = substr($line, 1);				$src_left--;			}			elseif ($line[0] == '+')			{				if ($dst_left == 0)				{					throw new RuntimeException(JText::sprintf('JLIB_FILESYSTEM_PATCHER_ADD_LINE', key($lines)));				}				$destin[] = substr($line, 1);				$dst_left--;			}			elseif ($line != '\\ No newline at end of file')			{				$line = substr($line, 1);				$source[] = $line;				$destin[] = $line;				$src_left--;				$dst_left--;			}			if ($src_left == 0 && $dst_left == 0)			{				// Now apply the patch, finally!				if ($src_size > 0)				{					$src_lines = & $this->getSource($src);					if (!isset($src_lines))					{						throw new RuntimeException(JText::sprintf('JLIB_FILESYSTEM_PATCHER_UNEXISING_SOURCE', $src));					}				}				if ($dst_size > 0)				{					if ($src_size > 0)					{						$dst_lines = & $this->getDestination($dst, $src);						$src_bottom = $src_line + count($source);						for ($l = $src_line;$l < $src_bottom;$l++)						{							if ($src_lines[$l] != $source[$l - $src_line])							{								throw new RuntimeException(JText::sprintf('JLIB_FILESYSTEM_PATCHER_FAILED_VERIFY', $src, $l));							}						}						array_splice($dst_lines, $dst_line, count($source), $destin);					}					else					{						$this->destinations[$dst] = $destin;					}				}				else				{					$this->removals[] = $src;				}				next($lines);				return;			}			$line = next($lines);		}		while ($line !== false);		throw new RuntimeException('Unexpected EOF');	}	/**	 * Get the lines of a source file	 *	 * @param   string  $src  The path of a file	 *	 * @return  array  The lines of the source file	 *	 * @since   12.1	 */	protected function &getSource($src)	{		if (!isset($this->sources[$src]))		{			if (is_readable($src))			{				$this->sources[$src] = self::splitLines(file_get_contents($src));			}			else			{				$this->sources[$src] = null;			}		}		return $this->sources[$src];	}	/**	 * Get the lines of a destination file	 *	 * @param   string  $dst  The path of a destination file	 * @param   string  $src  The path of a source file	 *	 * @return  array  The lines of the destination file	 *	 * @since   12.1	 */	protected function &getDestination($dst, $src)	{		if (!isset($this->destinations[$dst]))		{			$this->destinations[$dst] = $this->getSource($src);		}		return $this->destinations[$dst];	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * beezDivision chrome. * * @since   3.0 */function modChrome_beezDivision($module, &$params, &$attribs){	$headerLevel = isset($attribs['headerLevel']) ? (int) $attribs['headerLevel'] : 3;	if (!empty ($module->content)) { ?><div class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>"><?php if ($module->showtitle) { ?> <h<?php echo $headerLevel; ?>><?php echo $module->title; ?></h<?php echo $headerLevel; ?>><?php }; ?> <?php echo $module->content; ?></div><?php };}/** * beezHide chrome. * * @since   3.0 */function modChrome_beezHide($module, &$params, &$attribs){	$headerLevel = isset($attribs['headerLevel']) ? (int) $attribs['headerLevel'] : 3;	$state = isset($attribs['state']) ? (int) $attribs['state'] :0;	if (!empty ($module->content)) { ?><div	class="moduletable_js <?php echo htmlspecialchars($params->get('moduleclass_sfx'));?>"><?php if ($module->showtitle) : ?><h<?php echo $headerLevel; ?> class="js_heading"> <?php echo $module->title; ?> <a href="#"	title="<?php echo JText::_('TPL_BEEZ3_CLICK'); ?>"	onclick="auf('module_<?php echo $module->id; ?>'); return false"	class="opencloselink" id="link_<?php echo $module->id?>"> <span	class="no"><img src="templates/beez3/images/plus.png"	alt="<?php if ($state == 1) { echo JText::_('TPL_BEEZ3_ALTOPEN');} else {echo JText::_('TPL_BEEZ3_ALTCLOSE');} ?>" /></span></a></h<?php echo $headerLevel; ?>> <?php endif; ?><div class="module_content <?php if ($state == 1){echo "open";} ?>"	id="module_<?php echo $module->id; ?>" tabindex="-1"><?php echo $module->content; ?></div></div>	<?php }}/** * beezTabs chrome. * * @since   3.0 */function modChrome_beezTabs($module, $params, $attribs){	$area = isset($attribs['id']) ? (int) $attribs['id'] :'1';	$area = 'area-'.$area;	static $modulecount;	static $modules;	if ($modulecount < 1)	{		$modulecount = count(JModuleHelper::getModules($module->position));		$modules = array();	}	if ($modulecount == 1)	{		$temp = new stdClass;		$temp->content = $module->content;		$temp->title = $module->title;		$temp->params = $module->params;		$temp->id = $module->id;		$modules[] = $temp;		// list of moduletitles		// list of moduletitles		echo '<div id="'. $area.'" class="tabouter"><ul class="tabs">';		foreach ($modules as $rendermodule)		{			echo '<li class="tab"><a href="#" id="link_'.$rendermodule->id.'" class="linkopen" onclick="tabshow(\'module_'. $rendermodule->id.'\');return false">'.$rendermodule->title.'</a></li>';		}		echo '</ul>';		$counter = 0;		// modulecontent		foreach ($modules as $rendermodule)		{			$counter ++;			echo '<div tabindex="-1" class="tabcontent tabopen" id="module_'.$rendermodule->id.'">';			echo $rendermodule->content;			if ($counter != count($modules))			{			echo '<a href="#" class="unseen" onclick="nexttab(\'module_'. $rendermodule->id.'\');return false;" id="next_'.$rendermodule->id.'">'.JText::_('TPL_BEEZ3_NEXTTAB').'</a>';			}			echo '</div>';		}		$modulecount--;		echo '</div>';	} else {		$temp = new stdClass;		$temp->content = $module->content;		$temp->params = $module->params;		$temp->title = $module->title;		$temp->id = $module->id;		$modules[] = $temp;		$modulecount--;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Component Language Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesModelLanguage extends JModelAdmin{	/**	 * Override to get the table	 *	 * @return  JTable	 * @since   1.6	 */	public function getTable($name = '', $prefix = '', $options = array())	{		return JTable::getInstance('Language');	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$app    = JFactory::getApplication('administrator');		$params = JComponentHelper::getParams('com_languages');		// Load the User state.		$langId = $app->input->getInt('lang_id');		$this->setState('language.id', $langId);		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get a member item.	 *	 * @param   integer	The id of the member to get.	 *	 * @return  mixed  User data object on success, false on failure.	 * @since   1.0	 */	public function getItem($langId = null)	{		$langId	= (!empty($langId)) ? $langId : (int) $this->getState('language.id');		$false  = false;		// Get a member row instance.		$table = $this->getTable();		// Attempt to load the row.		$return = $table->load($langId);		// Check for a table object error.		if ($return === false && $table->getError())		{			$this->setError($table->getError());			return $false;		}		$properties = $table->getProperties(1);		$value = JArrayHelper::toObject($properties, 'JObject');		return $value;	}	/**	 * Method to get the group form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_languages.language', 'language', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_languages.edit.language.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_languages.language', $data);		return $data;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$langId	= (int) $this->getState('language.id');		$isNew	= true;		$dispatcher = JEventDispatcher::getInstance();		JPluginHelper::importPlugin('extension');		$table = $this->getTable();		// Load the row if saving an existing item.		if ($langId > 0)		{			$table->load($langId);			$isNew = false;		}		// Bind the data		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Check the data		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_languages.language', &$table, $isNew));		// Check the event responses.		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_languages.language', &$table, $isNew));		$this->setState('language.id', $table->lang_id);		// Clean the cache.		$this->cleanCache();		return true;	}	/**	 * Custom clean cache method	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('_system');		parent::cleanCache('com_languages');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Controller * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentController extends JControllerLegacy{	public function __construct($config = array())	{		$this->input = JFactory::getApplication()->input;		// Article frontpage Editor pagebreak proxying:		if ($this->input->get('view') === 'article' && $this->input->get('layout') === 'pagebreak')		{			$config['base_path'] = JPATH_COMPONENT_ADMINISTRATOR;		}		// Article frontpage Editor article proxying:		elseif ($this->input->get('view') === 'articles' && $this->input->get('layout') === 'modal')		{			JHtml::_('stylesheet', 'system/adminlist.css', array(), true);			$config['base_path'] = JPATH_COMPONENT_ADMINISTRATOR;		}		parent::__construct($config);	}	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Set the default view name and format from the Request.		// Note we are using a_id to avoid collisions with the router and the return page.		// Frontend is a bit messier than the backend.		$id    = $this->input->getInt('a_id');		$vName = $this->input->getCmd('view', 'categories');		$this->input->set('view', $vName);		$user = JFactory::getUser();		if ($user->get('id') ||			($this->input->getMethod() == 'POST' &&				(($vName == 'category' && $this->input->get('layout') != 'blog') || $vName == 'archive' )))		{			$cachable = false;		}		$safeurlparams = array('catid' => 'INT', 'id' => 'INT', 'cid' => 'ARRAY', 'year' => 'INT', 'month' => 'INT', 'limit' => 'UINT', 'limitstart' => 'UINT',			'showall' => 'INT', 'return' => 'BASE64', 'filter' => 'STRING', 'filter_order' => 'CMD', 'filter_order_Dir' => 'CMD', 'filter-search' => 'STRING', 'print' => 'BOOLEAN', 'lang' => 'CMD', 'Itemid' => 'INT');		// Check for edit form.		if ($vName == 'form' && !$this->checkEditId('com_content.edit.article', $id))		{			// Somehow the person just went to the form - we don't allow that.			return JError::raiseError(403, JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));		}		parent::display($cachable, $safeurlparams);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * RTF Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserRtf extends FinderIndexerParser{	/**	 * Method to process RTF input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		// Remove embedded pictures.		$input = preg_replace('#{\\\pict[^}]*}#mis', '', $input);		// Remove control characters.		$input = str_replace(array('{', '}', "\\\n"), array(' ', ' ', "\n"), $input);		$input = preg_replace('#\\\([^;]+?);#mis', ' ', $input);		$input = preg_replace('#\\\[\'a-zA-Z0-9]+#mis', ' ', $input);		return $input;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note that there are certain parts of this layout used only when there is exactly one tag.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');$isSingleTag = (count($this->item) == 1);?><div class="tag-category<?php echo $this->pageclass_sfx; ?>"><?php  if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif;  ?><?php if($this->params->get('show_tag_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->document->title, '', 'com_tag.tag'); ?></h2><?php endif; ?><?php // We only show a tag description if there is a single tag. ?><?php  if (count($this->item) == 1 && (($this->params->get('tag_list_show_tag_image', 1)) || $this->params->get('tag_list_show_tag_description', 1))) : ?>	<div class="category-desc">	<?php $images = json_decode($this->item[0]->images); ?>	<?php if ($this->params->get('tag_list_show_tag_image', 1) == 1 && !empty($images->image_fulltext)) : ?>		<img src="<?php echo htmlspecialchars($images->image_fulltext);?>">	<?php endif; ?>	<?php if ($this->params->get('tag_list_show_tag_description') == 1 && $this->item[0]->description) : ?>		<?php echo JHtml::_('content.prepare', $this->item[0]->description, '', 'com_tags.tag'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php // If there are multiple tags and a description or image has been supplied use that. ?><?php if ($this->params->get('tag_list_show_tag_description', 1) || $this->params->get('show_description_image', 1)): ?>		<?php if ($this->params->get('show_description_image', 1) == 1 && $this->params->get('tag_list_image')) :?>			<img src="<?php echo $this->params->get('tag_list_image');?>">		<?php endif; ?>		<?php if ($this->params->get('tag_list_description', '') > '') :?>			<?php echo JHtml::_('content.prepare', $this->params->get('tag_list_description'), '', 'com_tags.tag'); ?>		<?php endif; ?><?php endif; ?><?php echo $this->loadTemplate('items'); ?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component HTML Helper * * @static * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class JHtmlIcon{	public static function email($contact, $params, $attribs = array())	{		require_once JPATH_SITE . '/components/com_mailto/helpers/mailto.php';		$uri	= JURI::getInstance();		$base	= $uri->toString(array('scheme', 'host', 'port'));		$link	= $base . JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid), false);		$url	= 'index.php?option=com_mailto&tmpl=component&link='.MailToHelper::addLink($link);		$status = 'width=400,height=350,menubar=yes,resizable=yes';		if ($params->get('show_icons'))		{			$text = JHtml::_('image', 'system/emailButton.png', JText::_('JGLOBAL_EMAIL'), null, true);		}		else		{			$text = '&#160;'.JText::_('JGLOBAL_EMAIL');		}		$attribs['title']	= JText::_('JGLOBAL_EMAIL');		$attribs['onclick'] = "window.open(this.href,'win2','".$status."'); return false;";		$output = JHtml::_('link', JRoute::_($url), $text, $attribs);		return $output;	}	public static function print_popup($article, $params, $attribs = array())	{		$url  = ContentHelperRoute::getContactRoute($contact->slug, $contact->catid);		$url .= '&tmpl=component&print=1&layout=default&page='.@ $request->limitstart;		$status = 'status=no,toolbar=no,scrollbars=yes,titlebar=no,menubar=no,resizable=yes,width=640,height=480,directories=no,location=no';		// checks template image directory for image, if non found default are loaded		if ($params->get('show_icons'))		{			$text = JHtml::_('image', 'system/printButton.png', JText::_('JGLOBAL_PRINT'), null, true);		}		else		{			$text = JText::_('JGLOBAL_ICON_SEP') .'&#160;'. JText::_('JGLOBAL_PRINT') .'&#160;'. JText::_('JGLOBAL_ICON_SEP');		}		$attribs['title']	= JText::_('JGLOBAL_PRINT');		$attribs['onclick'] = "window.open(this.href,'win2','".$status."'); return false;";		$attribs['rel']		= 'nofollow';		return JHtml::_('link', JRoute::_($url), $text, $attribs);	}	public static function print_screen($contact, $params, $attribs = array())	{		// checks template image directory for image, if non found default are loaded		if ($params->get('show_icons'))		{			$text = JHtml::_('image', 'system/printButton.png', JText::_('JGLOBAL_PRINT'), null, true);		}		else		{			$text = JText::_('JGLOBAL_ICON_SEP') .'&#160;'. JText::_('JGLOBAL_PRINT') .'&#160;'. JText::_('JGLOBAL_ICON_SEP');		}		return '<a href="#" onclick="window.print();return false;">'.$text.'</a>';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Password Hashing Interface * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.2 */interface JCryptPassword{	const BLOWFISH = '$2y$';	const JOOMLA = 'Joomla';	const PBKDF = '$pbkdf$';	const MD5 = '$1$';	/**	 * Creates a password hash	 *	 * @param   string  $password  The password to hash.	 * @param   string  $prefix    The prefix of the hashing function.	 *	 * @return  string  The hashed password.	 *	 * @since   12.2	 */	public function create($password, $prefix = '$2a$');	/**	 * Verifies a password hash	 *	 * @param   string  $password  The password to verify.	 * @param   string  $hash      The password hash to check.	 *	 * @return  boolean  True if the password is valid, false otherwise.	 *	 * @since   12.2	 */	public function verify($password, $hash);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! update helper. * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateHelper{	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since	2.5.4	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_joomlaupdate';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="installer-warnings"><form action="<?php echo JRoute::_('index.php?option=com_installer&view=warnings'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty($this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?phpelse : ?>	<div id="j-main-container"><?php endif; ?><?phpif (!count($this->messages)){	echo '<p class="nowarning">' . JText::_('COM_INSTALLER_MSG_WARNINGS_NONE') . '</p>';}else{	echo JHtml::_('sliders.start', 'warning-sliders', array('useCookie' => 1));	foreach ($this->messages as $message)	{		echo JHtml::_('sliders.panel', $message['message'], str_replace(' ', '', $message['message']));		echo '<div style="padding: 5px;" >' . $message['description'] . '</div>';	}	echo JHtml::_('sliders.panel', JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFO'), 'furtherinfo-pane');	echo '<div style="padding: 5px;" >' . JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFODESC') . '</div>';	echo JHtml::_('sliders.end');}?><div class="clr"> </div><div>	<input type="hidden" name="boxchecked" value="0" />	<?php echo JHtml::_('form.token'); ?></div></div></form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Registration controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerRegistration extends UsersController{	/**	 * Method to activate a user.	 *	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function activate()	{		$user  = JFactory::getUser();		$input = JFactory::getApplication()->input;		$uParams = JComponentHelper::getParams('com_users');		// If the user is logged in, return them back to the homepage.		if ($user->get('id'))		{			$this->setRedirect('index.php');			return true;		}		// If user registration or account activation is disabled, throw a 403.		if ($uParams->get('useractivation') == 0 || $uParams->get('allowUserRegistration') == 0)		{			JError::raiseError(403, JText::_('JLIB_APPLICATION_ERROR_ACCESS_FORBIDDEN'));			return false;		}		$model = $this->getModel('Registration', 'UsersModel');		$token = $input->getAlnum('token');		// Check that the token is in a valid format.		if ($token === null || strlen($token) !== 32)		{			JError::raiseError(403, JText::_('JINVALID_TOKEN'));			return false;		}		// Attempt to activate the user.		$return = $model->activate($token);		// Check for errors.		if ($return === false)		{			// Redirect back to the homepage.			$this->setMessage(JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect('index.php');			return false;		}		$useractivation = $uParams->get('useractivation');		// Redirect to the login screen.		if ($useractivation == 0)		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_SAVE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));		}		elseif ($useractivation == 1)		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_ACTIVATE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));		}		elseif ($return->getParam('activate'))		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_VERIFY_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		}		else		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_ADMINACTIVATE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		}		return true;	}	/**	 * Method to register a user.	 *	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function register()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// If registration is disabled - Redirect to login page.		if (JComponentHelper::getParams('com_users')->get('allowUserRegistration') == 0)		{			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));			return false;		}		$app	= JFactory::getApplication();		$model	= $this->getModel('Registration', 'UsersModel');		// Get the user data.		$requestData = $this->input->post->get('jform', array(), 'array');		// Validate the posted data.		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data	= $model->validate($form, $requestData);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_users.registration.data', $requestData);			// Redirect back to the registration screen.			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration', false));			return false;		}		// Attempt to save the data.		$return	= $model->register($data);		// Check for errors.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('com_users.registration.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration', false));			return false;		}		// Flush the data from the session.		$app->setUserState('com_users.registration.data', null);		// Redirect to the profile screen.		if ($return === 'adminactivate'){			$this->setMessage(JText::_('COM_USERS_REGISTRATION_COMPLETE_VERIFY'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		} elseif ($return === 'useractivate')		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_COMPLETE_ACTIVATE'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		}		else		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_SAVE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));		}		return true;	}}
