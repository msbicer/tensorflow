<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content component helper. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentHelper{	public static $extension = 'com_content';	/**	 * Configure the Linkbar.	 *	 * @param   string	$vName	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_ARTICLES'),			'index.php?option=com_content&view=articles',			$vName == 'articles'		);		JHtmlSidebar::addEntry(			JText::_('COM_CONTENT_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_content',			$vName == 'categories');		JHtmlSidebar::addEntry(			JText::_('COM_CONTENT_SUBMENU_FEATURED'),			'index.php?option=com_content&view=featured',			$vName == 'featured'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 * @param   integer  The article ID.	 *	 * @return  JObject	 * @since   1.6	 */	public static function getActions($categoryId = 0, $articleId = 0)	{		// Reverted a change for version 2.5.6		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($articleId) && empty($categoryId))		{			$assetName = 'com_content';		}		elseif (empty($articleId))		{			$assetName = 'com_content.category.'.(int) $categoryId;		}		else		{			$assetName = 'com_content.article.'.(int) $articleId;		}		$actions = array(			'core.admin', 'core.manage', 'core.create', 'core.edit', 'core.edit.own', 'core.edit.state', 'core.delete'		);		foreach ($actions as $action)		{			$result->set($action,	$user->authorise($action, $assetName));		}		return $result;	}	/**	 * Applies the content tag filters to arbitrary text as per settings for current user group	 *	 * @param   text  $text  The string to filter	 *	 * @return  string  The filtered string	 *	 * @deprecated  4.0  Use JComponentHelper::filterText() instead.	*/	public static function filterText($text)	{		JLog::add('ContentHelper::filterText() is deprecated. Use JComponentHelper::filterText() instead.', JLog::WARNING, 'deprecated');		return JComponentHelper::filterText($text);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$saveOrder	= $listOrder == 'a.ordering';$n			= count($this->items);?><form action="<?php echo JRoute::_('index.php?option=com_tags&view=tags');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TAGS_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true); ?>			</select>			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access')); ?>			</select>			<label class="selectlabel" for="filter_author_id"><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></label>			<select name="filter_author_id" class="inputbox"  id="filter_author_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></option>				<?php echo JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id')); ?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language')); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access', $listDirn, $listOrder); ?>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$item->max_ordering = 0; //??			$canCreate  = $user->authorise('core.create',     'com_tags');			$canEdit    = $user->authorise('core.edit',       'com_tags.tag.' . $item->id);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out_user_id == $userId || $item->checked_out_user_id == 0;			$canChange  = $user->authorise('core.edit.state', 'com_tags.tag.' . $item->id) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->level > 0): ?>					<?php echo str_repeat('<span class="gi">&mdash;</span>', $item->level - 1) ?>					<?php endif; ?>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'tags.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit || $canEditOwn) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_tags&task=tag.edit&id='.$item->id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias)); ?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'tags.', $canChange, 'cb'); ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Legacy * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Controller tailored to suit most form-based admin operations. * * @package     Joomla.Legacy * @subpackage  Controller * @since       12.2 * @todo        Add ability to set redirect manually to better cope with frontend usage. */class JControllerForm extends JControllerLegacy{	/**	 * The context for storing internal data, e.g. record.	 *	 * @var    string	 * @since  12.2	 */	protected $context;	/**	 * The URL option for the component.	 *	 * @var    string	 * @since  12.2	 */	protected $option;	/**	 * The URL view item variable.	 *	 * @var    string	 * @since  12.2	 */	protected $view_item;	/**	 * The URL view list variable.	 *	 * @var    string	 * @since  12.2	 */	protected $view_list;	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  12.2	 */	protected $text_prefix;	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JControllerLegacy	 * @since   12.2	 * @throws  Exception	 */	public function __construct($config = array())	{		parent::__construct($config);		// Guess the option as com_NameOfController		if (empty($this->option))		{			$this->option = 'com_' . strtolower($this->getName());		}		// Guess the JText message prefix. Defaults to the option.		if (empty($this->text_prefix))		{			$this->text_prefix = strtoupper($this->option);		}		// Guess the context as the suffix, eg: OptionControllerContent.		if (empty($this->context))		{			$r = null;			if (!preg_match('/(.*)Controller(.*)/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_CONTROLLER_GET_NAME'), 500);			}			$this->context = strtolower($r[2]);		}		// Guess the item view as the context.		if (empty($this->view_item))		{			$this->view_item = $this->context;		}		// Guess the list view as the plural of the item view.		if (empty($this->view_list))		{			// @TODO Probably worth moving to an inflector class based on			// http://kuwamoto.org/2007/12/17/improved-pluralizing-in-php-actionscript-and-ror/			// Simple pluralisation based on public domain snippet by Paul Osman			// For more complex types, just manually set the variable in your class.			$plural = array(				array('/(x|ch|ss|sh)$/i', "$1es"),				array('/([^aeiouy]|qu)y$/i', "$1ies"),				array('/([^aeiouy]|qu)ies$/i', "$1y"),				array('/(bu)s$/i', "$1ses"),				array('/s$/i', "s"),				array('/$/', "s"));			// Check for matches using regular expressions			foreach ($plural as $pattern)			{				if (preg_match($pattern[0], $this->view_item))				{					$this->view_list = preg_replace($pattern[0], $pattern[1], $this->view_item);					break;				}			}		}		// Apply, Save & New, and Save As copy should be standard on forms.		$this->registerTask('apply', 'save');		$this->registerTask('save2new', 'save');		$this->registerTask('save2copy', 'save');	}	/**	 * Method to add a new record.	 *	 * @return  mixed  True if the record can be added, a error object if not.	 *	 * @since   12.2	 */	public function add()	{		$app = JFactory::getApplication();		$context = "$this->option.edit.$this->context";		// Access check.		if (!$this->allowAdd())		{			// Set the internal error and also the redirect error.			$this->setError(JText::_('JLIB_APPLICATION_ERROR_CREATE_RECORD_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Clear the record edit information from the session.		$app->setUserState($context . '.data', null);		// Redirect to the edit screen.		$this->setRedirect(			JRoute::_(				'index.php?option=' . $this->option . '&view=' . $this->view_item				. $this->getRedirectToItemAppend(), false			)		);		return true;	}	/**	 * Method to check if you can add a new record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   12.2	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', $this->option) || count($user->getAuthorisedCategories($this->option, 'core.create')));	}	/**	 * Method to check if you can add a new record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key; default is id.	 *	 * @return  boolean	 *	 * @since   12.2	 */	protected function allowEdit($data = array(), $key = 'id')	{		return JFactory::getUser()->authorise('core.edit', $this->option);	}	/**	 * Method to check if you can save a new or existing record.	 *	 * Extended classes can override this if necessary.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   12.2	 */	protected function allowSave($data, $key = 'id')	{		$recordId = isset($data[$key]) ? $data[$key] : '0';		if ($recordId)		{			return $this->allowEdit($data, $key);		}		else		{			return $this->allowAdd($data);		}	}	/**	 * Method to run batch operations.	 *	 * @param   JModelLegacy  $model  The model of the component being processed.	 *	 * @return	boolean	 True if successful, false otherwise and internal error is set.	 *	 * @since	12.2	 */	public function batch($model)	{		$vars = $this->input->post->get('batch', array(), 'array');		$cid  = $this->input->post->get('cid', array(), 'array');		// Build an array of item contexts to check		$contexts = array();		foreach ($cid as $id)		{			// If we're coming from com_categories, we need to use extension vs. option			if (isset($this->extension))			{				$option = $this->extension;			}			else			{				$option = $this->option;			}			$contexts[$id] = $option . '.' . $this->context . '.' . $id;		}		// Attempt to run the batch operation.		if ($model->batch($vars, $cid, $contexts))		{			$this->setMessage(JText::_('JLIB_APPLICATION_SUCCESS_BATCH'));			return true;		}		else		{			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_FAILED', $model->getError()));			return false;		}	}	/**	 * Method to cancel an edit.	 *	 * @param   string  $key  The name of the primary key of the URL variable.	 *	 * @return  boolean  True if access level checks pass, false otherwise.	 *	 * @since   12.2	 */	public function cancel($key = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$model = $this->getModel();		$table = $model->getTable();		$checkin = property_exists($table, 'checked_out');		$context = "$this->option.edit.$this->context";		if (empty($key))		{			$key = $table->getKeyName();		}		$recordId = $app->input->getInt($key);		// Attempt to check-in the current record.		if ($recordId)		{			// Check we are holding the id in the edit list.			if (!$this->checkEditId($context, $recordId))			{				// Somehow the person just went to the form - we don't allow that.				$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));				$this->setMessage($this->getError(), 'error');				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_list						. $this->getRedirectToListAppend(), false					)				);				return false;			}			if ($checkin)			{				if ($model->checkin($recordId) === false)				{					// Check-in failed, go back to the record and display a notice.					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));					$this->setMessage($this->getError(), 'error');					$this->setRedirect(						JRoute::_(							'index.php?option=' . $this->option . '&view=' . $this->view_item							. $this->getRedirectToItemAppend($recordId, $key), false						)					);					return false;				}			}		}		// Clean the session data and redirect.		$this->releaseEditId($context, $recordId);		$app->setUserState($context . '.data', null);		$this->setRedirect(			JRoute::_(				'index.php?option=' . $this->option . '&view=' . $this->view_list				. $this->getRedirectToListAppend(), false			)		);		return true;	}	/**	 * Method to edit an existing record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key	 * (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if access level check and checkout passes, false otherwise.	 *	 * @since   12.2	 */	public function edit($key = null, $urlVar = null)	{		$app   = JFactory::getApplication();		$model = $this->getModel();		$table = $model->getTable();		$cid   = $this->input->post->get('cid', array(), 'array');		$context = "$this->option.edit.$this->context";		// Determine the name of the primary key for the data.		if (empty($key))		{			$key = $table->getKeyName();		}		// To avoid data collisions the urlVar may be different from the primary key.		if (empty($urlVar))		{			$urlVar = $key;		}		// Get the previous record id (if any) and the current record id.		$recordId = (int) (count($cid) ? $cid[0] : $this->input->getInt($urlVar));		$checkin = property_exists($table, 'checked_out');		// Access check.		if (!$this->allowEdit(array($key => $recordId), $key))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Attempt to check-out the new record for editing and redirect.		if ($checkin && !$model->checkout($recordId))		{			// Check-out failed, display a notice but allow the user to see the record.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKOUT_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		else		{			// Check-out succeeded, push the new record id into the session.			$this->holdEditId($context, $recordId);			$app->setUserState($context . '.data', null);			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return true;		}	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   12.2	 */	public function getModel($name = '', $prefix = '', $config = array('ignore_request' => true))	{		if (empty($name))		{			$name = $this->context;		}		return parent::getModel($name, $prefix, $config);	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $urlVar    The name of the URL variable for the id.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   12.2	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = 'id')	{		$tmpl   = $this->input->get('tmpl');		$layout = $this->input->get('layout', 'edit');		$append = '';		// Setup redirect info.		if ($tmpl)		{			$append .= '&tmpl=' . $tmpl;		}		if ($layout)		{			$append .= '&layout=' . $layout;		}		if ($recordId)		{			$append .= '&' . $urlVar . '=' . $recordId;		}		return $append;	}	/**	 * Gets the URL arguments to append to a list redirect.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   12.2	 */	protected function getRedirectToListAppend()	{		$tmpl = JFactory::getApplication()->input->get('tmpl');		$append = '';		// Setup redirect info.		if ($tmpl)		{			$append .= '&tmpl=' . $tmpl;		}		return $append;	}	/**	 * Function that allows child controller access to model data	 * after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{	}	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   12.2	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$lang  = JFactory::getLanguage();		$model = $this->getModel();		$table = $model->getTable();		$data  = $this->input->post->get('jform', array(), 'array');		$checkin = property_exists($table, 'checked_out');		$context = "$this->option.edit.$this->context";		$task = $this->getTask();		// Determine the name of the primary key for the data.		if (empty($key))		{			$key = $table->getKeyName();		}		// To avoid data collisions the urlVar may be different from the primary key.		if (empty($urlVar))		{			$urlVar = $key;		}		$recordId = $this->input->getInt($urlVar);		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and tried to save it. We don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Populate the row id from the session.		$data[$key] = $recordId;		// The save2copy task needs to be handled slightly differently.		if ($task == 'save2copy')		{			// Check-in the original row.			if ($checkin && $model->checkin($data[$key]) === false)			{				// Check-in failed. Go back to the item and display a notice.				$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));				$this->setMessage($this->getError(), 'error');				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_item						. $this->getRedirectToItemAppend($recordId, $urlVar), false					)				);				return false;			}			// Reset the ID and then treat the request as for Apply.			$data[$key] = 0;			$task = 'apply';		}		// Access check.		if (!$this->allowSave($data, $key))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_list					. $this->getRedirectToListAppend(), false				)			);			return false;		}		// Validate the posted data.		// Sometimes the form needs some posted data, such as for plugins and modules.		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return false;		}		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages.			$errors = $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState($context . '.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		if (!isset($validData['metadata']['tags']))		{			$validData['metadata']['tags'] = null;		}		// Attempt to save the data.		if (!$model->save($validData))		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Redirect back to the edit screen.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		// Save succeeded, so check-in the record.		if ($checkin && $model->checkin($validData[$key]) === false)		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Check-in failed, so go back to the record and display a notice.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(				JRoute::_(					'index.php?option=' . $this->option . '&view=' . $this->view_item					. $this->getRedirectToItemAppend($recordId, $urlVar), false				)			);			return false;		}		$this->setMessage(			JText::_(				($lang->hasKey($this->text_prefix . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS')					? $this->text_prefix					: 'JLIB_APPLICATION') . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS'			)		);		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the record data in the session.				$recordId = $model->getState($this->context . '.id');				$this->holdEditId($context, $recordId);				$app->setUserState($context . '.data', null);				$model->checkout($recordId);				// Redirect back to the edit screen.				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_item						. $this->getRedirectToItemAppend($recordId, $urlVar), false					)				);				break;			case 'save2new':				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect back to the edit screen.				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_item						. $this->getRedirectToItemAppend(null, $urlVar), false					)				);				break;			default:				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect to the list screen.				$this->setRedirect(					JRoute::_(						'index.php?option=' . $this->option . '&view=' . $this->view_list						. $this->getRedirectToListAppend(), false					)				);				break;		}		// Invoke the postSave method to allow for the child class to access the model.		$this->postSaveHook($model, $validData);		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * ATOM Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @link        http://www.atomenabled.org/developers/syndication/ * @since       12.3 */class JFeedParserAtom extends JFeedParser{	/**	 * @var    string  The feed format version.	 * @since  12.3	 */	protected $version;	/**	 * Method to handle the <author> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleAuthor(JFeed $feed, SimpleXMLElement $el)	{		// Set the author information from the XML element.		$feed->setAuthor((string) $el->name, (string) $el->email, (string) $el->uri);	}	/**	 * Method to handle the <contributor> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleContributor(JFeed $feed, SimpleXMLElement $el)	{		$feed->addContributor((string) $el->name, (string) $el->email, (string) $el->uri);	}	/**	 * Method to handle the <generator> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleGenerator(JFeed $feed, SimpleXMLElement $el)	{		$feed->generator = (string) $el;	}	/**	 * Method to handle the <id> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleId(JFeed $feed, SimpleXMLElement $el)	{		$feed->uri = (string) $el;	}	/**	 * Method to handle the <link> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleLink(JFeed $feed, SimpleXMLElement $el)	{		$link = new JFeedLink;		$link->uri      = (string) $el['href'];		$link->language = (string) $el['hreflang'];		$link->length   = (int) $el['length'];		$link->relation = (string) $el['rel'];		$link->title    = (string) $el['title'];		$link->type     = (string) $el['type'];		$feed->link = $link;	}	/**	 * Method to handle the <rights> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleRights(JFeed $feed, SimpleXMLElement $el)	{		$feed->copyright = (string) $el;	}	/**	 * Method to handle the <subtitle> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleSubtitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->description = (string) $el;	}	/**	 * Method to handle the <title> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleTitle(JFeed $feed, SimpleXMLElement $el)	{		$feed->title = (string) $el;	}	/**	 * Method to handle the <updated> element for the feed.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function handleUpdated(JFeed $feed, SimpleXMLElement $el)	{		$feed->updatedDate = (string) $el;	}	/**	 * Method to initialise the feed for parsing.  Here we detect the version and advance the stream	 * reader so that it is ready to parse feed elements.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initialise()	{		// Read the version attribute.		$this->version = ($this->stream->getAttribute('version') == '0.3') ? '0.3' : '1.0';		// We want to move forward to the first element after the root element.		$this->moveToNextElement();	}	/**	 * Method to handle the feed entry element for the feed: <entry>.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{		$entry->uri         = (string) $el->id;		$entry->title       = (string) $el->title;		$entry->updatedDate = (string) $el->updated;		$entry->content     = (string) $el->summary;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$saveOrder	= $listOrder == 'a.ordering';$assoc		= isset($app->item_associations) ? $app->item_associations : 0;$n			= count($this->items);?><form action="<?php echo JRoute::_('index.php?option=com_content&view=articles'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true); ?>			</select>			<label class="selectlabel" for="filter_category_id"><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id')); ?>			</select>			<label class="selectlabel" for="filter_level"><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></label>			<select name="filter_level" class="inputbox" id="filter_level">				<option value=""><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></option>				<?php echo JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level')); ?>			</select>			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access')); ?>			</select>			<label class="selectlabel" for="filter_author_id"><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></label>			<select name="filter_author_id" class="inputbox"  id="filter_author_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></option>				<?php echo JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id')); ?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language')); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="nowrap featured-col">					<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder, null, 'desc'); ?>				</th>				<th class="title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($saveOrder) : ?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'articles.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>				<th width="5%">					<?php echo JHtml::_('grid.sort', 'COM_CONTENT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>				</th>				<?php endif;?>				<th class="title created-by-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th class="hits-col">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$item->max_ordering = 0; //??			$ordering   = ($listOrder == 'a.ordering');			$canCreate  = $user->authorise('core.create',     'com_content.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_content.article.' . $item->id);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;			$canEditOwn = $user->authorise('core.edit.own',   'com_content.article.' . $item->id) && $item->created_by == $userId;			$canChange  = $user->authorise('core.edit.state', 'com_content.article.' . $item->id) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'articles.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit || $canEditOwn) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_content&task=article.edit&id='.$item->id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias)); ?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'articles.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo JHtml::_('contentadministrator.featured', $item->featured, $i, $canChange); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) : ?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'articles.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'articles.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'articles.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'articles.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering; ?>" <?php echo $disabled; ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<?php if ($assoc) : ?>				<td class="center">					<?php if ($item->association):?>						<?php echo JHtml::_('contentadministrator.association', $item->id); ?>					<?php endif;?>				</td>				<?php endif;?>				<td class="center">					<?php if ($item->created_by_alias) : ?>						<?php echo $this->escape($item->author_name); ?>						<p class="smallsub"> <?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->created_by_alias)); ?></p>					<?php else : ?>						<?php echo $this->escape($item->author_name); ?>					<?php endif; ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->hits; ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_banners.category');$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$params		= (isset($this->state->params)) ? $this->state->params : new JObject;$saveOrder	= $listOrder == 'ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_banners&task=banners.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_banners&view=banners'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn hasTooltip" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button type="button" class="btn hasTooltip" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_NAME', 'a.name', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_STICKY', 'a.sticky', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLIENT', 'client_name', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_IMPRESSIONS', 'impmade', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLICKS', 'clicks', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="13">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering  = ($listOrder == 'ordering');				$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_banners&task=edit&type=other&cid[]='. $item->catid);				$canCreate  = $user->authorise('core.create',     'com_banners.category.' . $item->catid);				$canEdit    = $user->authorise('core.edit',       'com_banners.category.' . $item->catid);				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_banners.category.' . $item->catid) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>						<input type="text" style="display:none" name="order[]" size="5"							value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />					<?php else : ?>						<span class="sortable-handler inactive" >							<i class="icon-menu"></i>						</span>					<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->state, $i, 'banners.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'banners.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_banners&task=banner.edit&id='.(int) $item->id); ?>">									<?php echo $this->escape($item->name); ?></a>							<?php else : ?>								<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<div class="small">								<?php echo $this->escape($item->category_title); ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'banner.');								JHtml::_('dropdown.divider');								if ($item->state) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'banners.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'banners.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'banners.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'banners.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'banners.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'banners.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'banners.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');								?>						</div>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('banner.pinned', $item->sticky, $i, $canChange); ?>					</td>					<td class="small hidden-phone">						<?php echo $item->client_name;?>					</td>					<td class="small hidden-phone">						<?php echo JText::sprintf('COM_BANNERS_IMPRESSIONS', $item->impmade, $item->imptotal ? $item->imptotal : JText::_('COM_BANNERS_UNLIMITED'));?>					</td>					<td class="center small hidden-phone">						<?php echo $item->clicks;?> -						<?php echo sprintf('%.2f%%', $item->impmade ? 100 * $item->clicks / $item->impmade : 0);?>					</td>					<td class="small nowrap hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create the copy/move options.$options = array(	JHtml::_('select.option', 'add', JText::_('COM_USERS_BATCH_ADD')),	JHtml::_('select.option', 'del', JText::_('COM_USERS_BATCH_DELETE')),	JHtml::_('select.option', 'set', JText::_('COM_USERS_BATCH_SET')));JHtml::_('formbehavior.chosen', 'select');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_USERS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<div id="batch-choose-action" class="combo control-group">			<label id="batch-choose-action-lbl" class="control-label" for="batch-choose-action">				<?php echo JText::_('COM_USERS_BATCH_GROUP') ?>			</label>		</div>		<div id="batch-choose-action" class="combo controls">			<div class="control-group">				<select name="batch[group_id]" class="inputbox" id="batch-group-id">					<option value=""><?php echo JText::_('JSELECT') ?></option>					<?php echo JHtml::_('select.options', JHtml::_('user.groups')); ?>				</select>			</div>		</div>		<div class="control-group radio">			<?php echo JHtml::_('select.radiolist', $options, 'batch[group_action]', '', 'value', 'text', 'add') ?>		</div>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-group-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('user.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API People class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinPeople extends JLinkedinObject{	/**	 * Method to get a member's profile.	 *	 * @param   string  $id        Member id of the profile you want.	 * @param   string  $url       The public profile URL.	 * @param   string  $fields    Request fields beyond the default ones.	 * @param   string  $type      Choosing public or standard profile.	 * @param   string  $language  A comma separated list of locales ordered from highest to lowest preference.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getProfile($id = null, $url = null, $fields = null, $type = 'standard', $language = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		$data['format'] = 'json';		// Check if a member id is specified.		if ($id)		{			$base .= 'id=' . $id;		}		elseif (!$url)		{			$base .= '~';		}		// Check if profile url is specified.		if ($url)		{			$base .= 'url=' . $this->oauth->safeEncode($url);			// Choose public profile			if (!strcmp($type, 'public'))			{				$base .= ':public';			}		}		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if language is specified.		$header = array();		if ($language)		{			$header = array('Accept-Language' => $language);		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data, $header);		return json_decode($response->body);	}	/**	 * Method to get a list of connections for a user who has granted access to his/her account.	 *	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $modified        Values are updated or new.	 * @param   string   $modified_since  Value as a Unix time stamp of milliseconds since epoch.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getConnections($fields = null, $start = 0, $count = 500, $modified = null, $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/connections';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 500)		{			$data['count'] = $count;		}		// Check if modified is specified.		if ($modified)		{			$data['modified'] = $modified;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get information about people.	 *	 * @param   string   $fields           Request fields beyond the default ones. provide 'api-standard-profile-request'	 * 									   field for out of network profiles.	 * @param   string   $keywords         Members who have all the keywords anywhere in their profile.	 * @param   string   $first_name       Members with a matching first name. Matches must be exact.	 * @param   string   $last_name        Members with a matching last name. Matches must be exactly.	 * @param   string   $company_name     Members who have a matching company name on their profile.	 * @param   boolean  $current_company  A value of true matches members who currently work at the company specified in the company-name	 * 									   parameter.	 * @param   string   $title            Matches members with that title on their profile.	 * @param   boolean  $current_title    A value of true matches members whose title is currently the one specified in the title-name parameter.	 * @param   string   $school_name      Members who have a matching school name on their profile.	 * @param   string   $current_school   A value of true matches members who currently attend the school specified in the school-name parameter.	 * @param   string   $country_code     Matches members with a location in a specific country. Values are defined in by ISO 3166 standard.	 * 									   Country codes must be in all lower case.	 * @param   integer  $postal_code      Matches members centered around a Postal Code. Must be combined with the country-code parameter.	 * 									   Not supported for all countries.	 * @param   integer  $distance         Matches members within a distance from a central point. This is measured in miles.	 * @param   string   $facets           Facet buckets to return, e.g. location.	 * @param   array    $facet            Array of facet values to search over. Contains values for location, industry, network, language,	 * 									   current-company, past-company and school, in exactly this order, null must be specified for an element if no value.	 * @param   integer  $start            Starting location within the result set for paginated returns.	 * @param   integer  $count            The number of results returned.	 * @param   string   $sort             Controls the search result order. There are four options: connections, recommenders,	 * 									   distance and relevance.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function search($fields = null, $keywords = null, $first_name = null, $last_name = null, $company_name = null,		$current_company = null, $title = null, $current_title = null, $school_name = null, $current_school = null, $country_code = null,		$postal_code = null, $distance = null, $facets = null, $facet = null, $start = 0, $count = 10, $sort = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people-search';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if keywords is specified.		if ($keywords)		{			$data['keywords'] = $keywords;		}		// Check if first_name is specified.		if ($first_name)		{			$data['first-name'] = $first_name;		}		// Check if last_name is specified.		if ($last_name)		{			$data['last-name'] = $last_name;		}		// Check if company-name is specified.		if ($company_name)		{			$data['company-name'] = $company_name;		}		// Check if current_company is specified.		if ($current_company)		{			$data['current-company'] = $current_company;		}		// Check if title is specified.		if ($title)		{			$data['title'] = $title;		}		// Check if current_title is specified.		if ($current_title)		{			$data['current-title'] = $current_title;		}		// Check if school_name is specified.		if ($school_name)		{			$data['school-name'] = $school_name;		}		// Check if current_school is specified.		if ($current_school)		{			$data['current-school'] = $current_school;		}		// Check if country_code is specified.		if ($country_code)		{			$data['country-code'] = $country_code;		}		// Check if postal_code is specified.		if ($postal_code)		{			$data['postal-code'] = $postal_code;		}		// Check if distance is specified.		if ($distance)		{			$data['distance'] = $distance;		}		// Check if facets is specified.		if ($facets)		{			$data['facets'] = $facets;		}		// Check if facet is specified.		if ($facet)		{			$data['facet'] = array();			for ($i = 0; $i < count($facet); $i++)			{				if ($facet[$i])				{					if ($i == 0)					{						$data['facet'][] = 'location,' . $facet[$i];					}					if ($i == 1)					{						$data['facet'][] = 'industry,' . $facet[$i];					}					if ($i == 2)					{						$data['facet'][] = 'network,' . $facet[$i];					}					if ($i == 3)					{						$data['facet'][] = 'language,' . $facet[$i];					}					if ($i == 4)					{						$data['facet'][] = 'current-company,' . $facet[$i];					}					if ($i == 5)					{						$data['facet'][] = 'past-company,' . $facet[$i];					}					if ($i == 6)					{						$data['facet'][] = 'school,' . $facet[$i];					}				}			}		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 10)		{			$data['count'] = $count;		}		// Check if sort is specified.		if ($sort)		{			$data['sort'] = $sort;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		if (strpos($fields, 'api-standard-profile-request') === false)		{			return json_decode($response->body);		}		// Get header name.		$name = explode('"name": "', $response->body);		$name = explode('"', $name[1]);		$name = $name[0];		// Get header value.		$value = explode('"value": "', $response->body);		$value = explode('"', $value[1]);		$value = $value[0];		// Get request url.		$url = explode('"url": "', $response->body);		$url = explode('"', $url[1]);		$url = $url[0];		// Build header for out of network profile.		$header[$name] = $value;		// Send the request.		$response = $this->oauth->oauthRequest($url, 'GET', $parameters, $data, $header);		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_NEWSFEEDS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_NEWSFEEDS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_newsfeeds');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('newsfeed.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_COOKIE_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('cookie') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Update Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerControllerUpdate extends JControllerLegacy{	/**	 * Update a set of extensions.	 *	 * @return  void	 *	 * @since   1.6	 */	public function update()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('update');		$uid   = $this->input->get('cid', array(), 'array');		JArrayHelper::toInteger($uid, array());		if ($model->update($uid))		{			$cache = JFactory::getCache('mod_menu');			$cache->clean();		}		$app = JFactory::getApplication();		$redirect_url = $app->getUserState('com_installer.redirect_url');		if (empty($redirect_url))		{			$redirect_url = JRoute::_('index.php?option=com_installer&view=update', false);		}		else		{			// Wipe out the user state when we're going to redirect			$app->setUserState('com_installer.redirect_url', '');			$app->setUserState('com_installer.message', '');			$app->setUserState('com_installer.extension_message', '');		}		$this->setRedirect($redirect_url);	}	/**	 * Find new updates.	 *	 * @return  void	 *	 * @since   1.6	 */	public function find()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the caching duration		$component = JComponentHelper::getComponent('com_installer');		$params = $component->params;		$cache_timeout = $params->get('cachetimeout', 6, 'int');		$cache_timeout = 3600 * $cache_timeout;		// Find updates		$model	= $this->getModel('update');		$result = $model->findUpdates(0, $cache_timeout);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=update', false));		// $view->display();	}	/**	 * Purges updates.	 *	 * @return  void	 *	 * @since   1.6	 */	public function purge()	{		// Purge updates		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('update');		$model->purge();		$model->enableSites();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=update', false), $model->_message);	}	/**	 * Fetch and report updates in JSON format, for AJAX requests	 *	 * @return void	 *	 * @since 2.5	 */	public function ajax()	{		/*		 * Note: we don't do a token check as we're fetching information		 * asynchronously. This means that between requests the token might		 * change, making it impossible for AJAX to work.		 */		$eid  = $this->input->getInt('eid', 0);		$skip = $this->input->get('skip', array(), 'array');		$cache_timeout = $this->input->getInt('cache_timeout', 0);		if ($cache_timeout == 0)		{			$component = JComponentHelper::getComponent('com_installer');			$params = $component->params;			$cache_timeout = $params->get('cachetimeout', 6, 'int');			$cache_timeout = 3600 * $cache_timeout;		}		$model = $this->getModel('update');		$result = $model->findUpdates($eid, $cache_timeout);		$model->setState('list.start', 0);		$model->setState('list.limit', 0);		if ($eid != 0)		{			$model->setState('filter.extension_id', $eid);		}		$updates = $model->getItems();		if (!empty($skip))		{			$unfiltered_updates = $updates;			$updates = array();			foreach ($unfiltered_updates as $update)			{				if (!in_array($update->extension_id, $skip))				{					$updates[] = $update;				}			}		}		echo json_encode($updates);		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument Module renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererModule extends JDocumentRenderer{	/**	 * Renders a module script and returns the results as a string	 *	 * @param   string  $module   The name of the module to render	 * @param   array   $attribs  Associative array of values	 * @param   string  $content  If present, module information from the buffer will be used	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($module, $attribs = array(), $content = null)	{		if (!is_object($module))		{			$title = isset($attribs['title']) ? $attribs['title'] : null;			$module = JModuleHelper::getModule($module, $title);			if (!is_object($module))			{				if (is_null($content))				{					return '';				}				else				{					/**					 * If module isn't found in the database but data has been pushed in the buffer					 * we want to render it					 */					$tmp = $module;					$module = new stdClass;					$module->params = null;					$module->module = $tmp;					$module->id = 0;					$module->user = 0;				}			}		}		// Get the user and configuration object		// $user = JFactory::getUser();		$conf = JFactory::getConfig();		// Set the module content		if (!is_null($content))		{			$module->content = $content;		}		// Get module parameters		$params = new JRegistry;		$params->loadString($module->params);		// Use parameters from template		if (isset($attribs['params']))		{			$template_params = new JRegistry;			$template_params->loadString(html_entity_decode($attribs['params'], ENT_COMPAT, 'UTF-8'));			$params->merge($template_params);			$module = clone $module;			$module->params = (string) $params;		}		$contents = '';		// Default for compatibility purposes. Set cachemode parameter or use JModuleHelper::moduleCache from within the		// module instead		$cachemode = $params->get('cachemode', 'oldstatic');		if ($params->get('cache', 0) == 1 && $conf->get('caching') >= 1 && $cachemode != 'id' && $cachemode != 'safeuri')		{			// Default to itemid creating method and workarounds on			$cacheparams = new stdClass;			$cacheparams->cachemode = $cachemode;			$cacheparams->class = 'JModuleHelper';			$cacheparams->method = 'renderModule';			$cacheparams->methodparams = array($module, $attribs);			$contents = JModuleHelper::ModuleCache($module, $params, $cacheparams);		}		else		{			$contents = JModuleHelper::renderModule($module, $attribs);		}		return $contents;	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Factory class * * @package  Joomla.Platform * @since    11.1 */abstract class JFactory{	/**	 * @var    JApplication	 * @since  11.1	 */	public static $application = null;	/**	 * @var    JCache	 * @since  11.1	 */	public static $cache = null;	/**	 * @var    JConfig	 * @since  11.1	 */	public static $config = null;	/**	 * @var    array	 * @since  11.3	 */	public static $dates = array();	/**	 * @var    JSession	 * @since  11.1	 */	public static $session = null;	/**	 * @var    JLanguage	 * @since  11.1	 */	public static $language = null;	/**	 * @var    JDocument	 * @since  11.1	 */	public static $document = null;	/**	 * @var    JAccess	 * @since  11.1	 * @deprecated  13.3	 */	public static $acl = null;	/**	 * @var    JDatabaseDriver	 * @since  11.1	 */	public static $database = null;	/**	 * @var    JMail	 * @since  11.1	 */	public static $mailer = null;	/**	 * Get a application object.	 *	 * Returns the global {@link JApplication} object, only creating it if it doesn't already exist.	 *	 * @param   mixed   $id      A client identifier or name.	 * @param   array   $config  An optional associative array of configuration settings.	 * @param   string  $prefix  Application prefix	 *	 * @return  JApplication object	 *	 * @see     JApplication	 * @since   11.1	 * @throws  Exception	 */	public static function getApplication($id = null, array $config = array(), $prefix = 'J')	{		if (!self::$application)		{			if (!$id)			{				throw new Exception('Application Instantiation Error', 500);			}			self::$application = JApplication::getInstance($id, $config, $prefix);		}		return self::$application;	}	/**	 * Get a configuration object	 *	 * Returns the global {@link JRegistry} object, only creating it if it doesn't already exist.	 *	 * @param   string  $file       The path to the configuration file	 * @param   string  $type       The type of the configuration file	 * @param   string  $namespace  The namespace of the configuration file	 *	 * @return  JRegistry	 *	 * @see     JRegistry	 * @since   11.1	 */	public static function getConfig($file = null, $type = 'PHP', $namespace = '')	{		if (!self::$config)		{			if ($file === null)			{				$file = JPATH_PLATFORM . '/config.php';			}			self::$config = self::createConfig($file, $type, $namespace);		}		return self::$config;	}	/**	 * Get a session object.	 *	 * Returns the global {@link JSession} object, only creating it if it doesn't already exist.	 *	 * @param   array  $options  An array containing session options	 *	 * @return  JSession object	 *	 * @see     JSession	 * @since   11.1	 */	public static function getSession(array $options = array())	{		if (!self::$session)		{			self::$session = self::createSession($options);		}		return self::$session;	}	/**	 * Get a language object.	 *	 * Returns the global {@link JLanguage} object, only creating it if it doesn't already exist.	 *	 * @return  JLanguage object	 *	 * @see     JLanguage	 * @since   11.1	 */	public static function getLanguage()	{		if (!self::$language)		{			self::$language = self::createLanguage();		}		return self::$language;	}	/**	 * Get a document object.	 *	 * Returns the global {@link JDocument} object, only creating it if it doesn't already exist.	 *	 * @return  JDocument object	 *	 * @see     JDocument	 * @since   11.1	 */	public static function getDocument()	{		if (!self::$document)		{			self::$document = self::createDocument();		}		return self::$document;	}	/**	 * Get an user object.	 *	 * Returns the global {@link JUser} object, only creating it if it doesn't already exist.	 *	 * @param   integer  $id  The user to load - Can be an integer or string - If string, it is converted to ID automatically.	 *	 * @return  JUser object	 *	 * @see     JUser	 * @since   11.1	 */	public static function getUser($id = null)	{		$instance = self::getSession()->get('user');		if (is_null($id))		{			if (!($instance instanceof JUser))			{				$instance = JUser::getInstance();			}		}		elseif ($instance->id != $id)		{			$instance = JUser::getInstance($id);		}		return $instance;	}	/**	 * Get a cache object	 *	 * Returns the global {@link JCache} object	 *	 * @param   string  $group    The cache group name	 * @param   string  $handler  The handler to use	 * @param   string  $storage  The storage method	 *	 * @return  JCacheController object	 *	 * @see     JCache	 */	public static function getCache($group = '', $handler = 'callback', $storage = null)	{		$hash = md5($group . $handler . $storage);		if (isset(self::$cache[$hash]))		{			return self::$cache[$hash];		}		$handler = ($handler == 'function') ? 'callback' : $handler;		$options = array('defaultgroup' => $group);		if (isset($storage))		{			$options['storage'] = $storage;		}		$cache = JCache::getInstance($handler, $options);		self::$cache[$hash] = $cache;		return self::$cache[$hash];	}	/**	 * Get an authorization object	 *	 * Returns the global {@link JAccess} object, only creating it	 * if it doesn't already exist.	 *	 * @return  JAccess object	 *	 * @deprecated  13.3  Use JAccess directly.	 */	public static function getACL()	{		JLog::add(__METHOD__ . ' is deprecated. Use JAccess directly.', JLog::WARNING, 'deprecated');		if (!self::$acl)		{			self::$acl = new JAccess;		}		return self::$acl;	}	/**	 * Get a database object.	 *	 * Returns the global {@link JDatabaseDriver} object, only creating it if it doesn't already exist.	 *	 * @return  JDatabaseDriver	 *	 * @see     JDatabaseDriver	 * @since   11.1	 */	public static function getDbo()	{		if (!self::$database)		{			// Get the debug configuration setting			$conf = self::getConfig();			$debug = $conf->get('debug');			self::$database = self::createDbo();			self::$database->setDebug($debug);		}		return self::$database;	}	/**	 * Get a mailer object.	 *	 * Returns the global {@link JMail} object, only creating it if it doesn't already exist.	 *	 * @return  JMail object	 *	 * @see     JMail	 * @since   11.1	 */	public static function getMailer()	{		if (!self::$mailer)		{			self::$mailer = self::createMailer();		}		$copy = clone self::$mailer;		return $copy;	}	/**	 * Get a parsed XML Feed Source	 *	 * @param   string   $url         Url for feed source.	 * @param   integer  $cache_time  Time to cache feed for (using internal cache mechanism).	 *	 * @return  mixed  SimplePie parsed object on success, false on failure.	 *	 * @since   11.1	 * @deprecated  4.0  Use directly JFeedFactory or supply SimplePie instead. Mehod will be proxied to JFeedFactory beginning in 3.2	 */	public static function getFeedParser($url, $cache_time = 0)	{		if (!class_exists('JSimplepieFactory'))		{			throw new BadMethodCallException('JSimplepieFactory not found');		}		JLog::add(__METHOD__ . ' is deprecated.   Use JFeedFactory() or supply SimplePie instead.', JLog::WARNING, 'deprecated');		return JSimplepieFactory::getFeedParser($url, $cache_time);	}	/**	 * Reads a XML file.	 *	 * @param   string   $data    Full path and file name.	 * @param   boolean  $isFile  true to load a file or false to load a string.	 *	 * @return  mixed    JXMLElement or SimpleXMLElement on success or false on error.	 *	 * @see     JXMLElement	 * @since   11.1	 * @note    When JXMLElement is not present a SimpleXMLElement will be returned.	 * @deprecated  13.3 Use SimpleXML directly.	 */	public static function getXML($data, $isFile = true)	{		JLog::add(__METHOD__ . ' is deprecated. Use SimpleXML directly.', JLog::WARNING, 'deprecated');		$class = 'SimpleXMLElement';		if (class_exists('JXMLElement'))		{			$class = 'JXMLElement';		}		// Disable libxml errors and allow to fetch error information as needed		libxml_use_internal_errors(true);		if ($isFile)		{			// Try to load the XML file			$xml = simplexml_load_file($data, $class);		}		else		{			// Try to load the XML string			$xml = simplexml_load_string($data, $class);		}		if ($xml === false)		{			JLog::add(JText::_('JLIB_UTIL_ERROR_XML_LOAD'), JLog::WARNING, 'jerror');			if ($isFile)			{				JLog::add($data, JLog::WARNING, 'jerror');			}			foreach (libxml_get_errors() as $error)			{				JLog::add($error->message, JLog::WARNING, 'jerror');			}		}		return $xml;	}	/**	 * Get an editor object.	 *	 * @param   string  $editor  The editor to load, depends on the editor plugins that are installed	 *	 * @return  JEditor instance of JEditor	 *	 * @since   11.1	 * @deprecated 12.3 Use JEditor directly	 */	public static function getEditor($editor = null)	{		JLog::add(__METHOD__ . ' is deprecated. Use JEditor directly.', JLog::WARNING, 'deprecated');		if (!class_exists('JEditor'))		{			throw new BadMethodCallException('JEditor not found');		}		JLog::add(__METHOD__ . ' is deprecated. Use JEditor directly.', JLog::WARNING, 'deprecated');		// Get the editor configuration setting		if (is_null($editor))		{			$conf = self::getConfig();			$editor = $conf->get('editor');		}		return JEditor::getInstance($editor);	}	/**	 * Return a reference to the {@link JURI} object	 *	 * @param   string  $uri  Uri name.	 *	 * @return  JURI object	 *	 * @see     JURI	 * @since   11.1	 * @deprecated  13.3 Use JURI directly.	 */	public static function getURI($uri = 'SERVER')	{		JLog::add(__METHOD__ . ' is deprecated. Use JURI directly.', JLog::WARNING, 'deprecated');		return JURI::getInstance($uri);	}	/**	 * Return the {@link JDate} object	 *	 * @param   mixed  $time      The initial time for the JDate object	 * @param   mixed  $tzOffset  The timezone offset.	 *	 * @return  JDate object	 *	 * @see     JDate	 * @since   11.1	 */	public static function getDate($time = 'now', $tzOffset = null)	{		static $classname;		static $mainLocale;		$language = self::getLanguage();		$locale = $language->getTag();		if (!isset($classname) || $locale != $mainLocale)		{			// Store the locale for future reference			$mainLocale = $locale;			if ($mainLocale !== false)			{				$classname = str_replace('-', '_', $mainLocale) . 'Date';				if (!class_exists($classname))				{					// The class does not exist, default to JDate					$classname = 'JDate';				}			}			else			{				// No tag, so default to JDate				$classname = 'JDate';			}		}		$key = $time . '-' . ($tzOffset instanceof DateTimeZone ? $tzOffset->getName() : (string) $tzOffset);		if (!isset(self::$dates[$classname][$key]))		{			self::$dates[$classname][$key] = new $classname($time, $tzOffset);		}		$date = clone self::$dates[$classname][$key];		return $date;	}	/**	 * Create a configuration object	 *	 * @param   string  $file       The path to the configuration file.	 * @param   string  $type       The type of the configuration file.	 * @param   string  $namespace  The namespace of the configuration file.	 *	 * @return  JRegistry	 *	 * @see     JRegistry	 * @since   11.1	 */	protected static function createConfig($file, $type = 'PHP', $namespace = '')	{		if (is_file($file))		{			include_once $file;		}		// Create the registry with a default namespace of config		$registry = new JRegistry;		// Sanitize the namespace.		$namespace = ucfirst((string) preg_replace('/[^A-Z_]/i', '', $namespace));		// Build the config name.		$name = 'JConfig' . $namespace;		// Handle the PHP configuration type.		if ($type == 'PHP' && class_exists($name))		{			// Create the JConfig object			$config = new $name;			// Load the configuration values into the registry			$registry->loadObject($config);		}		return $registry;	}	/**	 * Create a session object	 *	 * @param   array  $options  An array containing session options	 *	 * @return  JSession object	 *	 * @since   11.1	 */	protected static function createSession(array $options = array())	{		// Get the editor configuration setting		$conf = self::getConfig();		$handler = $conf->get('session_handler', 'none');		// Config time is in minutes		$options['expire'] = ($conf->get('lifetime')) ? $conf->get('lifetime') * 60 : 900;		$session = JSession::getInstance($handler, $options);		if ($session->getState() == 'expired')		{			$session->restart();		}		return $session;	}	/**	 * Create an database object	 *	 * @return  JDatabaseDriver	 *	 * @see     JDatabaseDriver	 * @since   11.1	 */	protected static function createDbo()	{		$conf = self::getConfig();		$host = $conf->get('host');		$user = $conf->get('user');		$password = $conf->get('password');		$database = $conf->get('db');		$prefix = $conf->get('dbprefix');		$driver = $conf->get('dbtype');		$debug = $conf->get('debug');		$options = array('driver' => $driver, 'host' => $host, 'user' => $user, 'password' => $password, 'database' => $database, 'prefix' => $prefix);		try		{			$db = JDatabaseDriver::getInstance($options);		}		catch (RuntimeException $e)		{			if (!headers_sent())			{				header('HTTP/1.1 500 Internal Server Error');			}			jexit('Database Error: ' . $e->getMessage());		}		$db->setDebug($debug);		return $db;	}	/**	 * Create a mailer object	 *	 * @return  JMail object	 *	 * @see     JMail	 * @since   11.1	 */	protected static function createMailer()	{		$conf = self::getConfig();		$smtpauth = ($conf->get('smtpauth') == 0) ? null : 1;		$smtpuser = $conf->get('smtpuser');		$smtppass = $conf->get('smtppass');		$smtphost = $conf->get('smtphost');		$smtpsecure = $conf->get('smtpsecure');		$smtpport = $conf->get('smtpport');		$mailfrom = $conf->get('mailfrom');		$fromname = $conf->get('fromname');		$mailer = $conf->get('mailer');		// Create a JMail object		$mail = JMail::getInstance();		// Set default sender without Reply-to		$mail->SetFrom(JMailHelper::cleanLine($mailfrom), JMailHelper::cleanLine($fromname), 0);		// Default mailer is to use PHP's mail function		switch ($mailer)		{			case 'smtp':				$mail->useSMTP($smtpauth, $smtphost, $smtpuser, $smtppass, $smtpsecure, $smtpport);				break;			case 'sendmail':				$mail->IsSendmail();				break;			default:				$mail->IsMail();				break;		}		return $mail;	}	/**	 * Create a language object	 *	 * @return  JLanguage object	 *	 * @see     JLanguage	 * @since   11.1	 */	protected static function createLanguage()	{		$conf = self::getConfig();		$locale = $conf->get('language');		$debug = $conf->get('debug_lang');		$lang = JLanguage::getInstance($locale, $debug);		return $lang;	}	/**	 * Create a document object	 *	 * @return  JDocument object	 *	 * @see     JDocument	 * @since   11.1	 */	protected static function createDocument()	{		$lang = self::getLanguage();		$input = self::getApplication()->input;		$type = $input->get('format', 'html', 'word');		$attributes = array('charset' => 'utf-8', 'lineend' => 'unix', 'tab' => '  ', 'language' => $lang->getTag(),			'direction' => $lang->isRTL() ? 'rtl' : 'ltr');		return JDocument::getInstance($type, $attributes);	}	/**	 * Creates a new stream object with appropriate prefix	 *	 * @param   boolean  $use_prefix   Prefix the connections for writing	 * @param   boolean  $use_network  Use network if available for writing; use false to disable (e.g. FTP, SCP)	 * @param   string   $ua           UA User agent to use	 * @param   boolean  $uamask       User agent masking (prefix Mozilla)	 *	 * @return  JStream	 *	 * @see JStream	 * @since   11.1	 */	public static function getStream($use_prefix = true, $use_network = true, $ua = null, $uamask = false)	{		jimport('joomla.filesystem.stream');		// Setup the context; Joomla! UA and overwrite		$context = array();		$version = new JVersion;		// Set the UA for HTTP and overwrite for FTP		$context['http']['user_agent'] = $version->getUserAgent($ua, $uamask);		$context['ftp']['overwrite'] = true;		if ($use_prefix)		{			$FTPOptions = JClientHelper::getCredentials('ftp');			$SCPOptions = JClientHelper::getCredentials('scp');			if ($FTPOptions['enabled'] == 1 && $use_network)			{				$prefix = 'ftp://' . $FTPOptions['user'] . ':' . $FTPOptions['pass'] . '@' . $FTPOptions['host'];				$prefix .= $FTPOptions['port'] ? ':' . $FTPOptions['port'] : '';				$prefix .= $FTPOptions['root'];			}			elseif ($SCPOptions['enabled'] == 1 && $use_network)			{				$prefix = 'ssh2.sftp://' . $SCPOptions['user'] . ':' . $SCPOptions['pass'] . '@' . $SCPOptions['host'];				$prefix .= $SCPOptions['port'] ? ':' . $SCPOptions['port'] : '';				$prefix .= $SCPOptions['root'];			}			else			{				$prefix = JPATH_ROOT . '/';			}			$retval = new JStream($prefix, JPATH_ROOT, $context);		}		else		{			$retval = new JStream('', '', $context);		}		return $retval;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Element Class. * * @property-read    string  $name      The name of the element. * @property-read    array   $elements  An array of elements. * @property-read    string  $glue      Glue piece. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQueryElement{	/**	 * @var    string  The name of the element.	 * @since  11.1	 */	protected $name = null;	/**	 * @var    array  An array of elements.	 * @since  11.1	 */	protected $elements = null;	/**	 * @var    string  Glue piece.	 * @since  11.1	 */	protected $glue = null;	/**	 * Constructor.	 *	 * @param   string  $name      The name of the element.	 * @param   mixed   $elements  String or array.	 * @param   string  $glue      The glue for elements.	 *	 * @since   11.1	 */	public function __construct($name, $elements, $glue = ',')	{		$this->elements = array();		$this->name = $name;		$this->glue = $glue;		$this->append($elements);	}	/**	 * Magic function to convert the query element to a string.	 *	 * @return  string	 *	 * @since   11.1	 */	public function __toString()	{		if (substr($this->name, -2) == '()')		{			return PHP_EOL . substr($this->name, 0, -2) . '(' . implode($this->glue, $this->elements) . ')';		}		else		{			return PHP_EOL . $this->name . ' ' . implode($this->glue, $this->elements);		}	}	/**	 * Appends element parts to the internal list.	 *	 * @param   mixed  $elements  String or array.	 *	 * @return  void	 *	 * @since   11.1	 */	public function append($elements)	{		if (is_array($elements))		{			$this->elements = array_merge($this->elements, $elements);		}		else		{			$this->elements = array_merge($this->elements, array($elements));		}	}	/**	 * Gets the elements of this element.	 *	 * @return  string	 *	 * @since   11.1	 */	public function getElements()	{		return $this->elements;	}	/**	 * Method to provide deep copy support to nested objects and arrays	 * when cloning.	 *	 * @return  void	 *	 * @since   11.3	 */	public function __clone()	{		foreach ($this as $k => $v)		{			if (is_object($v) || is_array($v))			{				$this->{$k} = unserialize(serialize($v));			}		}	}}/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 * * @method      string  q()   q($text, $escape = true)  Alias for quote method * @method      string  qn()  qs($name, $as = null)     Alias for quoteName method * @method      string  e()   e($text, $extra = false)   Alias for escape method */abstract class JDatabaseQuery{	/**	 * @var    JDatabaseDriver  The database driver.	 * @since  11.1	 */	protected $db = null;	/**	 * @var    string  The SQL query (if a direct query string was provided).	 * @since  12.1	 */	protected $sql = null;	/**	 * @var    string  The query type.	 * @since  11.1	 */	protected $type = '';	/**	 * @var    JDatabaseQueryElement  The query element for a generic query (type = null).	 * @since  11.1	 */	protected $element = null;	/**	 * @var    JDatabaseQueryElement  The select element.	 * @since  11.1	 */	protected $select = null;	/**	 * @var    JDatabaseQueryElement  The delete element.	 * @since  11.1	 */	protected $delete = null;	/**	 * @var    JDatabaseQueryElement  The update element.	 * @since  11.1	 */	protected $update = null;	/**	 * @var    JDatabaseQueryElement  The insert element.	 * @since  11.1	 */	protected $insert = null;	/**	 * @var    JDatabaseQueryElement  The from element.	 * @since  11.1	 */	protected $from = null;	/**	 * @var    JDatabaseQueryElement  The join element.	 * @since  11.1	 */	protected $join = null;	/**	 * @var    JDatabaseQueryElement  The set element.	 * @since  11.1	 */	protected $set = null;	/**	 * @var    JDatabaseQueryElement  The where element.	 * @since  11.1	 */	protected $where = null;	/**	 * @var    JDatabaseQueryElement  The group by element.	 * @since  11.1	 */	protected $group = null;	/**	 * @var    JDatabaseQueryElement  The having element.	 * @since  11.1	 */	protected $having = null;	/**	 * @var    JDatabaseQueryElement  The column list for an INSERT statement.	 * @since  11.1	 */	protected $columns = null;	/**	 * @var    JDatabaseQueryElement  The values list for an INSERT statement.	 * @since  11.1	 */	protected $values = null;	/**	 * @var    JDatabaseQueryElement  The order element.	 * @since  11.1	 */	protected $order = null;	/**	 * @var   object  The auto increment insert field element.	 * @since 11.1	 */	protected $autoIncrementField = null;	/**	 * @var    JDatabaseQueryElement  The call element.	 * @since  12.1	 */	protected $call = null;	/**	 * @var    JDatabaseQueryElement  The exec element.	 * @since  12.1	 */	protected $exec = null;	/**	 * @var    JDatabaseQueryElement  The union element.	 * @since  12.1	 */	protected $union = null;	/**	 * @var    JDatabaseQueryElement  The unionAll element.	 * @since  13.1	 */	protected $unionAll = null;	/**	 * Magic method to provide method alias support for quote() and quoteName().	 *	 * @param   string  $method  The called method.	 * @param   array   $args    The array of arguments passed to the method.	 *	 * @return  string  The aliased method's return value or null.	 *	 * @since   11.1	 */	public function __call($method, $args)	{		if (empty($args))		{			return;		}		switch ($method)		{			case 'q':				return $this->quote($args[0], isset($args[1]) ? $args[1] : true);				break;			case 'qn':				return $this->quoteName($args[0], isset($args[1]) ? $args[1] : null);				break;			case 'e':				return $this->escape($args[0], isset($args[1]) ? $args[1] : false);				break;		}	}	/**	 * Class constructor.	 *	 * @param   JDatabaseDriver  $db  The database driver.	 *	 * @since   11.1	 */	public function __construct(JDatabaseDriver $db = null)	{		$this->db = $db;	}	/**	 * Magic function to convert the query to a string.	 *	 * @return  string	The completed query.	 *	 * @since   11.1	 */	public function __toString()	{		$query = '';		if ($this->sql)		{			return $this->sql;		}		switch ($this->type)		{			case 'element':				$query .= (string) $this->element;				break;			case 'select':				$query .= (string) $this->select;				$query .= (string) $this->from;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				if ($this->where)				{					$query .= (string) $this->where;				}				if ($this->group)				{					$query .= (string) $this->group;				}				if ($this->having)				{					$query .= (string) $this->having;				}				if ($this->order)				{					$query .= (string) $this->order;				}				break;			case 'union':				$query .= (string) $this->union;				break;			case 'unionAll':					$query .= (string) $this->unionAll;					break;			case 'delete':				$query .= (string) $this->delete;				$query .= (string) $this->from;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				if ($this->where)				{					$query .= (string) $this->where;				}				break;			case 'update':				$query .= (string) $this->update;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				$query .= (string) $this->set;				if ($this->where)				{					$query .= (string) $this->where;				}				break;			case 'insert':				$query .= (string) $this->insert;				// Set method				if ($this->set)				{					$query .= (string) $this->set;				}				// Columns-Values method				elseif ($this->values)				{					if ($this->columns)					{						$query .= (string) $this->columns;					}					$elements = $this->values->getElements();					if (!($elements[0] instanceof $this))					{						$query .= ' VALUES ';					}					$query .= (string) $this->values;				}				break;			case 'call':				$query .= (string) $this->call;				break;			case 'exec':				$query .= (string) $this->exec;				break;		}		if ($this instanceof JDatabaseQueryLimitable)		{			$query = $this->processLimit($query, $this->limit, $this->offset);		}		return $query;	}	/**	 * Magic function to get protected variable value	 *	 * @param   string  $name  The name of the variable.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function __get($name)	{		return isset($this->$name) ? $this->$name : null;	}	/**	 * Add a single column, or array of columns to the CALL clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 * The call method can, however, be called multiple times in the same query.	 *	 * Usage:	 * $query->call('a.*')->call('b.id');	 * $query->call(array('a.*', 'b.id'));	 *	 * @param   mixed  $columns  A string or an array of field names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function call($columns)	{		$this->type = 'call';		if (is_null($this->call))		{			$this->call = new JDatabaseQueryElement('CALL', $columns);		}		else		{			$this->call->append($columns);		}		return $this;	}	/**	 * Casts a value to a char.	 *	 * Ensure that the value is properly quoted before passing to the method.	 *	 * Usage:	 * $query->select($query->castAsChar('a'));	 *	 * @param   string  $value  The value to cast as a char.	 *	 * @return  string  Returns the cast value.	 *	 * @since   11.1	 */	public function castAsChar($value)	{		return $value;	}	/**	 * Gets the number of characters in a string.	 *	 * Note, use 'length' to find the number of bytes in a string.	 *	 * Usage:	 * $query->select($query->charLength('a'));	 *	 * @param   string  $field      A value.	 * @param   string  $operator   Comparison operator between charLength integer value and $condition	 * @param   string  $condition  Integer value to compare charLength with.	 *	 * @return  string  The required char length call.	 *	 * @since 11.1	 */	public function charLength($field, $operator = null, $condition = null)	{		return 'CHAR_LENGTH(' . $field . ')' . (isset($operator) && isset($condition) ? ' ' . $operator . ' ' . $condition : '');	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function clear($clause = null)	{		$this->sql = null;		switch ($clause)		{			case 'select':				$this->select = null;				$this->type = null;				break;			case 'delete':				$this->delete = null;				$this->type = null;				break;			case 'update':				$this->update = null;				$this->type = null;				break;			case 'insert':				$this->insert = null;				$this->type = null;				$this->autoIncrementField = null;				break;			case 'from':				$this->from = null;				break;			case 'join':				$this->join = null;				break;			case 'set':				$this->set = null;				break;			case 'where':				$this->where = null;				break;			case 'group':				$this->group = null;				break;			case 'having':				$this->having = null;				break;			case 'order':				$this->order = null;				break;			case 'columns':				$this->columns = null;				break;			case 'values':				$this->values = null;				break;			case 'exec':				$this->exec = null;				$this->type = null;				break;			case 'call':				$this->call = null;				$this->type = null;				break;			case 'limit':				$this->offset = 0;				$this->limit = 0;				break;			case 'union':				$this->union = null;				break;			case 'unionAll':				$this->unionAll = null;				break;			default:				$this->type = null;				$this->select = null;				$this->delete = null;				$this->update = null;				$this->insert = null;				$this->from = null;				$this->join = null;				$this->set = null;				$this->where = null;				$this->group = null;				$this->having = null;				$this->order = null;				$this->columns = null;				$this->values = null;				$this->autoIncrementField = null;				$this->exec = null;				$this->call = null;				$this->union = null;				$this->unionAll = null;				$this->offset = 0;				$this->limit = 0;				break;		}		return $this;	}	/**	 * Adds a column, or array of column names that would be used for an INSERT INTO statement.	 *	 * @param   mixed  $columns  A column name, or array of column names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function columns($columns)	{		if (is_null($this->columns))		{			$this->columns = new JDatabaseQueryElement('()', $columns);		}		else		{			$this->columns->append($columns);		}		return $this;	}	/**	 * Concatenates an array of column names or values.	 *	 * Usage:	 * $query->select($query->concatenate(array('a', 'b')));	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.1	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			return 'CONCATENATE(' . implode(' || ' . $this->quote($separator) . ' || ', $values) . ')';		}		else		{			return 'CONCATENATE(' . implode(' || ', $values) . ')';		}	}	/**	 * Gets the current date and time.	 *	 * Usage:	 * $query->where('published_up < '.$query->currentTimestamp());	 *	 * @return  string	 *	 * @since   11.1	 */	public function currentTimestamp()	{		return 'CURRENT_TIMESTAMP()';	}	/**	 * Returns a PHP date() function compliant date format for the database driver.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the getDateFormat method directly.	 *	 * @return  string  The format string.	 *	 * @since   11.1	 */	public function dateFormat()	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->getDateFormat();	}	/**	 * Creates a formatted dump of the query for debugging purposes.	 *	 * Usage:	 * echo $query->dump();	 *	 * @return  string	 *	 * @since   11.3	 */	public function dump()	{		return '<pre class="jdatabasequery">' . str_replace('#__', $this->db->getPrefix(), $this) . '</pre>';	}	/**	 * Add a table name to the DELETE clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 *	 * Usage:	 * $query->delete('#__a')->where('id = 1');	 *	 * @param   string  $table  The name of the table to delete from.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function delete($table = null)	{		$this->type = 'delete';		$this->delete = new JDatabaseQueryElement('DELETE', null);		if (!empty($table))		{			$this->from($table);		}		return $this;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the escape method directly.	 *	 * Note that 'e' is an alias for this method as it is in JDatabaseDriver.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   11.1	 * @throws  RuntimeException if the internal db property is not a valid object.	 */	public function escape($text, $extra = false)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->escape($text, $extra);	}	/**	 * Add a single column, or array of columns to the EXEC clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 * The exec method can, however, be called multiple times in the same query.	 *	 * Usage:	 * $query->exec('a.*')->exec('b.id');	 * $query->exec(array('a.*', 'b.id'));	 *	 * @param   mixed  $columns  A string or an array of field names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function exec($columns)	{		$this->type = 'exec';		if (is_null($this->exec))		{			$this->exec = new JDatabaseQueryElement('EXEC', $columns);		}		else		{			$this->exec->append($columns);		}		return $this;	}	/**	 * Add a table to the FROM clause of the query.	 *	 * Note that while an array of tables can be provided, it is recommended you use explicit joins.	 *	 * Usage:	 * $query->select('*')->from('#__a');	 *	 * @param   mixed   $tables         A string or array of table names.	 *                                  This can be a JDatabaseQuery object (or a child of it) when used	 *                                  as a subquery in FROM clause along with a value for $subQueryAlias.	 * @param   string  $subQueryAlias  Alias used when $tables is a JDatabaseQuery.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function from($tables, $subQueryAlias = null)	{		if (is_null($this->from))		{			if ($tables instanceof $this)			{				if (is_null($subQueryAlias))				{					throw new RuntimeException('JLIB_DATABASE_ERROR_NULL_SUBQUERY_ALIAS');				}				$tables = '( ' . (string) $tables . ' ) AS ' . $this->quoteName($subQueryAlias);			}			$this->from = new JDatabaseQueryElement('FROM', $tables);		}		else		{			$this->from->append($tables);		}		return $this;	}	/**	 * Used to get a string to extract year from date column.	 *	 * Usage:	 * $query->select($query->year($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing year to be extracted.	 *	 * @return  string  Returns string to extract year from a date.	 *	 * @since   12.1	 */	public function year($date)	{		return 'YEAR(' . $date . ')';	}	/**	 * Used to get a string to extract month from date column.	 *	 * Usage:	 * $query->select($query->month($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing month to be extracted.	 *	 * @return  string  Returns string to extract month from a date.	 *	 * @since   12.1	 */	public function month($date)	{		return 'MONTH(' . $date . ')';	}	/**	 * Used to get a string to extract day from date column.	 *	 * Usage:	 * $query->select($query->day($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing day to be extracted.	 *	 * @return  string  Returns string to extract day from a date.	 *	 * @since   12.1	 */	public function day($date)	{		return 'DAY(' . $date . ')';	}	/**	 * Used to get a string to extract hour from date column.	 *	 * Usage:	 * $query->select($query->hour($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing hour to be extracted.	 *	 * @return  string  Returns string to extract hour from a date.	 *	 * @since   12.1	 */	public function hour($date)	{		return 'HOUR(' . $date . ')';	}	/**	 * Used to get a string to extract minute from date column.	 *	 * Usage:	 * $query->select($query->minute($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing minute to be extracted.	 *	 * @return  string  Returns string to extract minute from a date.	 *	 * @since   12.1	 */	public function minute($date)	{		return 'MINUTE(' . $date . ')';	}	/**	 * Used to get a string to extract seconds from date column.	 *	 * Usage:	 * $query->select($query->second($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing second to be extracted.	 *	 * @return  string  Returns string to extract second from a date.	 *	 * @since   12.1	 */	public function second($date)	{		return 'SECOND(' . $date . ')';	}	/**	 * Add a grouping column to the GROUP clause of the query.	 *	 * Usage:	 * $query->group('id');	 *	 * @param   mixed  $columns  A string or array of ordering columns.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function group($columns)	{		if (is_null($this->group))		{			$this->group = new JDatabaseQueryElement('GROUP BY', $columns);		}		else		{			$this->group->append($columns);		}		return $this;	}	/**	 * A conditions to the HAVING clause of the query.	 *	 * Usage:	 * $query->group('id')->having('COUNT(id) > 5');	 *	 * @param   mixed   $conditions  A string or array of columns.	 * @param   string  $glue        The glue by which to join the conditions. Defaults to AND.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function having($conditions, $glue = 'AND')	{		if (is_null($this->having))		{			$glue = strtoupper($glue);			$this->having = new JDatabaseQueryElement('HAVING', $conditions, " $glue ");		}		else		{			$this->having->append($conditions);		}		return $this;	}	/**	 * Add an INNER JOIN clause to the query.	 *	 * Usage:	 * $query->innerJoin('b ON b.id = a.id')->innerJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function innerJoin($condition)	{		$this->join('INNER', $condition);		return $this;	}	/**	 * Add a table name to the INSERT clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 *	 * Usage:	 * $query->insert('#__a')->set('id = 1');	 * $query->insert('#__a')->columns('id, title')->values('1,2')->values('3,4');	 * $query->insert('#__a')->columns('id, title')->values(array('1,2', '3,4'));	 *	 * @param   mixed    $table           The name of the table to insert data into.	 * @param   boolean  $incrementField  The name of the field to auto increment.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function insert($table, $incrementField=false)	{		$this->type = 'insert';		$this->insert = new JDatabaseQueryElement('INSERT INTO', $table);		$this->autoIncrementField = $incrementField;		return $this;	}	/**	 * Add a JOIN clause to the query.	 *	 * Usage:	 * $query->join('INNER', 'b ON b.id = a.id);	 *	 * @param   string  $type        The type of join. This string is prepended to the JOIN keyword.	 * @param   string  $conditions  A string or array of conditions.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function join($type, $conditions)	{		if (is_null($this->join))		{			$this->join = array();		}		$this->join[] = new JDatabaseQueryElement(strtoupper($type) . ' JOIN', $conditions);		return $this;	}	/**	 * Add a LEFT JOIN clause to the query.	 *	 * Usage:	 * $query->leftJoin('b ON b.id = a.id')->leftJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function leftJoin($condition)	{		$this->join('LEFT', $condition);		return $this;	}	/**	 * Get the length of a string in bytes.	 *	 * Note, use 'charLength' to find the number of characters in a string.	 *	 * Usage:	 * query->where($query->length('a').' > 3');	 *	 * @param   string  $value  The string to measure.	 *	 * @return  int	 *	 * @since   11.1	 */	public function length($value)	{		return 'LENGTH(' . $value . ')';	}	/**	 * Get the null or zero representation of a timestamp for the database driver.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the nullDate method directly.	 *	 * Usage:	 * $query->where('modified_date <> '.$query->nullDate());	 *	 * @param   boolean  $quoted  Optionally wraps the null date in database quotes (true by default).	 *	 * @return  string  Null or zero representation of a timestamp.	 *	 * @since   11.1	 */	public function nullDate($quoted = true)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		$result = $this->db->getNullDate($quoted);		if ($quoted)		{			return $this->db->quote($result);		}		return $result;	}	/**	 * Add a ordering column to the ORDER clause of the query.	 *	 * Usage:	 * $query->order('foo')->order('bar');	 * $query->order(array('foo','bar'));	 *	 * @param   mixed  $columns  A string or array of ordering columns.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function order($columns)	{		if (is_null($this->order))		{			$this->order = new JDatabaseQueryElement('ORDER BY', $columns);		}		else		{			$this->order->append($columns);		}		return $this;	}	/**	 * Add an OUTER JOIN clause to the query.	 *	 * Usage:	 * $query->outerJoin('b ON b.id = a.id')->outerJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function outerJoin($condition)	{		$this->join('OUTER', $condition);		return $this;	}	/**	 * Method to quote and optionally escape a string to database requirements for insertion into the database.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the quote method directly.	 *	 * Note that 'q' is an alias for this method as it is in JDatabaseDriver.	 *	 * Usage:	 * $query->quote('fulltext');	 * $query->q('fulltext');	 * $query->q(array('option', 'fulltext'));	 *	 * @param   mixed    $text    A string or an array of strings to quote.	 * @param   boolean  $escape  True to escape the string, false to leave it unchanged.	 *	 * @return  string  The quoted input string.	 *	 * @since   11.1	 * @throws  RuntimeException if the internal db property is not a valid object.	 */	public function quote($text, $escape = true)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->quote($text, $escape);	}	/**	 * Wrap an SQL statement identifier name such as column, table or database names in quotes to prevent injection	 * risks and reserved word conflicts.	 *	 * This method is provided for use where the query object is passed to a function for modification.	 * If you have direct access to the database object, it is recommended you use the quoteName method directly.	 *	 * Note that 'qn' is an alias for this method as it is in JDatabaseDriver.	 *	 * Usage:	 * $query->quoteName('#__a');	 * $query->qn('#__a');	 *	 * @param   mixed  $name  The identifier name to wrap in quotes, or an array of identifier names to wrap in quotes.	 *                        Each type supports dot-notation name.	 * @param   mixed  $as    The AS query part associated to $name. It can be string or array, in latter case it has to be	 *                        same length of $name; if is null there will not be any AS part for string or array element.	 *	 * @return  mixed  The quote wrapped name, same type of $name.	 *	 * @since   11.1	 * @throws  RuntimeException if the internal db property is not a valid object.	 */	public function quoteName($name, $as = null)	{		if (!($this->db instanceof JDatabaseDriver))		{			throw new RuntimeException('JLIB_DATABASE_ERROR_INVALID_DB_OBJECT');		}		return $this->db->quoteName($name, $as);	}	/**	 * Add a RIGHT JOIN clause to the query.	 *	 * Usage:	 * $query->rightJoin('b ON b.id = a.id')->rightJoin('c ON c.id = b.id');	 *	 * @param   string  $condition  The join condition.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function rightJoin($condition)	{		$this->join('RIGHT', $condition);		return $this;	}	/**	 * Add a single column, or array of columns to the SELECT clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 * The select method can, however, be called multiple times in the same query.	 *	 * Usage:	 * $query->select('a.*')->select('b.id');	 * $query->select(array('a.*', 'b.id'));	 *	 * @param   mixed  $columns  A string or an array of field names.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function select($columns)	{		$this->type = 'select';		if (is_null($this->select))		{			$this->select = new JDatabaseQueryElement('SELECT', $columns);		}		else		{			$this->select->append($columns);		}		return $this;	}	/**	 * Add a single condition string, or an array of strings to the SET clause of the query.	 *	 * Usage:	 * $query->set('a = 1')->set('b = 2');	 * $query->set(array('a = 1', 'b = 2');	 *	 * @param   mixed   $conditions  A string or array of string conditions.	 * @param   string  $glue        The glue by which to join the condition strings. Defaults to ,.	 *                               Note that the glue is set on first use and cannot be changed.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function set($conditions, $glue = ',')	{		if (is_null($this->set))		{			$glue = strtoupper($glue);			$this->set = new JDatabaseQueryElement('SET', $conditions, "\n\t$glue ");		}		else		{			$this->set->append($conditions);		}		return $this;	}	/**	 * Allows a direct query to be provided to the database	 * driver's setQuery() method, but still allow queries	 * to have bounded variables.	 *	 * Usage:	 * $query->setQuery('select * from #__users');	 *	 * @param   mixed  $query  An SQL Query	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setQuery($query)	{		$this->sql = $query;		return $this;	}	/**	 * Add a table name to the UPDATE clause of the query.	 *	 * Note that you must not mix insert, update, delete and select method calls when building a query.	 *	 * Usage:	 * $query->update('#__foo')->set(...);	 *	 * @param   string  $table  A table to update.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function update($table)	{		$this->type = 'update';		$this->update = new JDatabaseQueryElement('UPDATE', $table);		return $this;	}	/**	 * Adds a tuple, or array of tuples that would be used as values for an INSERT INTO statement.	 *	 * Usage:	 * $query->values('1,2,3')->values('4,5,6');	 * $query->values(array('1,2,3', '4,5,6'));	 *	 * @param   string  $values  A single tuple, or array of tuples.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function values($values)	{		if (is_null($this->values))		{			$this->values = new JDatabaseQueryElement('()', $values, '),(');		}		else		{			$this->values->append($values);		}		return $this;	}	/**	 * Add a single condition, or an array of conditions to the WHERE clause of the query.	 *	 * Usage:	 * $query->where('a = 1')->where('b = 2');	 * $query->where(array('a = 1', 'b = 2'));	 *	 * @param   mixed   $conditions  A string or array of where conditions.	 * @param   string  $glue        The glue by which to join the conditions. Defaults to AND.	 *                               Note that the glue is set on first use and cannot be changed.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.1	 */	public function where($conditions, $glue = 'AND')	{		if (is_null($this->where))		{			$glue = strtoupper($glue);			$this->where = new JDatabaseQueryElement('WHERE', $conditions, " $glue ");		}		else		{			$this->where->append($conditions);		}		return $this;	}   /**     * Method to provide deep copy support to nested objects and     * arrays when cloning.     *     * @return  void     *     * @since   11.3     */    public function __clone()    {        foreach ($this as $k => $v)        {            if ($k === 'db')            {                continue;            }            if (is_object($v) || is_array($v))            {                $this->$k = unserialize(serialize($v));            }        }    }    /**	 * Add a query to UNION with the current query.	 * Multiple unions each require separate statements and create an array of unions.	 *	 * Usage:	 * $query->union('SELECT name FROM  #__foo')	 * $query->union('SELECT name FROM  #__foo','distinct')	 * $query->union(array('SELECT name FROM  #__foo','SELECT name FROM  #__bar'))	 *	 * @param   mixed    $query     The JDatabaseQuery object or string to union.	 * @param   boolean  $distinct  True to only return distinct rows from the union.	 * @param   string   $glue      The glue by which to join the conditions.	 *	 * @return  mixed    The JDatabaseQuery object on success or boolean false on failure.	 *	 * @since   12.1	 */	public function union($query, $distinct = false, $glue = '')	{		// Clear any ORDER BY clause in UNION query		// See http://dev.mysql.com/doc/refman/5.0/en/union.html		if (!is_null($this->order))		{			$this->clear('order');		}		// Set up the DISTINCT flag, the name with parentheses, and the glue.		if ($distinct)		{			$name = 'UNION DISTINCT ()';			$glue = ')' . PHP_EOL . 'UNION DISTINCT (';		}		else		{			$glue = ')' . PHP_EOL . 'UNION (';			$name = 'UNION ()';		}		// Get the JDatabaseQueryElement if it does not exist		if (is_null($this->union))		{				$this->union = new JDatabaseQueryElement($name, $query, "$glue");		}		// Otherwise append the second UNION.		else		{			$glue = '';			$this->union->append($query);		}		return $this;	}	/**	 * Add a query to UNION DISTINCT with the current query. Simply a proxy to Union with the Distinct clause.	 *	 * Usage:	 * $query->unionDistinct('SELECT name FROM  #__foo')	 *	 * @param   mixed   $query  The JDatabaseQuery object or string to union.	 * @param   string  $glue   The glue by which to join the conditions.	 *	 * @return  mixed   The JDatabaseQuery object on success or boolean false on failure.	 *	 * @since   12.1	 */	public function unionDistinct($query, $glue = '')	{		$distinct = true;		// Apply the distinct flag to the union.		return $this->union($query, $distinct, $glue);	}	/**	 * Find and replace sprintf-like tokens in a format string.	 * Each token takes one of the following forms:	 *     %%       - A literal percent character.	 *     %[t]     - Where [t] is a type specifier.	 *     %[n]$[x] - Where [n] is an argument specifier and [t] is a type specifier.	 *	 * Types:	 * a - Numeric: Replacement text is coerced to a numeric type but not quoted or escaped.	 * e - Escape: Replacement text is passed to $this->escape().	 * E - Escape (extra): Replacement text is passed to $this->escape() with true as the second argument.	 * n - Name Quote: Replacement text is passed to $this->quoteName().	 * q - Quote: Replacement text is passed to $this->quote().	 * Q - Quote (no escape): Replacement text is passed to $this->quote() with false as the second argument.	 * r - Raw: Replacement text is used as-is. (Be careful)	 *	 * Date Types:	 * - Replacement text automatically quoted (use uppercase for Name Quote).	 * - Replacement text should be a string in date format or name of a date column.	 * y/Y - Year	 * m/M - Month	 * d/D - Day	 * h/H - Hour	 * i/I - Minute	 * s/S - Second	 *	 * Invariable Types:	 * - Takes no argument.	 * - Argument index not incremented.	 * t - Replacement text is the result of $this->currentTimestamp().	 * z - Replacement text is the result of $this->nullDate(false).	 * Z - Replacement text is the result of $this->nullDate(true).	 *	 * Usage:	 * $query->format('SELECT %1$n FROM %2$n WHERE %3$n = %4$a', 'foo', '#__foo', 'bar', 1);	 * Returns: SELECT `foo` FROM `#__foo` WHERE `bar` = 1	 *	 * Notes:	 * The argument specifier is optional but recommended for clarity.	 * The argument index used for unspecified tokens is incremented only when used.	 *	 * @param   string  $format  The formatting string.	 *	 * @return  string  Returns a string produced according to the formatting string.	 *	 * @since   12.3	 */	public function format($format)	{		$query = $this;		$args = array_slice(func_get_args(), 1);		array_unshift($args, null);		$i = 1;		$func = function ($match) use ($query, $args, &$i)		{			if (isset($match[6]) && $match[6] == '%')			{				return '%';			}			// No argument required, do not increment the argument index.			switch ($match[5])			{				case 't':					return $query->currentTimestamp();					break;				case 'z':					return $query->nullDate(false);					break;				case 'Z':					return $query->nullDate(true);					break;			}			// Increment the argument index only if argument specifier not provided.			$index = is_numeric($match[4]) ? (int) $match[4] : $i++;			if (!$index || !isset($args[$index]))			{				// TODO - What to do? sprintf() throws a Warning in these cases.				$replacement = '';			}			else			{				$replacement = $args[$index];			}			switch ($match[5])			{				case 'a':					return 0 + $replacement;					break;				case 'e':					return $query->escape($replacement);					break;				case 'E':					return $query->escape($replacement, true);					break;				case 'n':					return $query->quoteName($replacement);					break;				case 'q':					return $query->quote($replacement);					break;				case 'Q':					return $query->quote($replacement, false);					break;				case 'r':					return $replacement;					break;				// Dates				case 'y':					return $query->year($query->quote($replacement));					break;				case 'Y':					return $query->year($query->quoteName($replacement));					break;				case 'm':					return $query->month($query->quote($replacement));					break;				case 'M':					return $query->month($query->quoteName($replacement));					break;				case 'd':					return $query->day($query->quote($replacement));					break;				case 'D':					return $query->day($query->quoteName($replacement));					break;				case 'h':					return $query->hour($query->quote($replacement));					break;				case 'H':					return $query->hour($query->quoteName($replacement));					break;				case 'i':					return $query->minute($query->quote($replacement));					break;				case 'I':					return $query->minute($query->quoteName($replacement));					break;				case 's':					return $query->second($query->quote($replacement));					break;				case 'S':					return $query->second($query->quoteName($replacement));					break;			}			return '';		};		/**		 * Regexp to find an replace all tokens.		 * Matched fields:		 * 0: Full token		 * 1: Everything following '%'		 * 2: Everything following '%' unless '%'		 * 3: Argument specifier and '$'		 * 4: Argument specifier		 * 5: Type specifier		 * 6: '%' if full token is '%%'		 */		return preg_replace_callback('#%(((([\d]+)\$)?([aeEnqQryYmMdDhHiIsStzZ]))|(%))#', $func, $format);	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 * Note: Not all drivers support all units.	 *	 * @param   datetime  $date      The date to add to. May be date or datetime	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 *	 * @see http://dev.mysql.com/doc/refman/5.1/en/date-and-time-functions.html#function_date-add	 */	public function dateAdd($date, $interval, $datePart)	{		return trim("DATE_ADD('" . $date . "', INTERVAL " . $interval . ' ' . $datePart . ')');	}	/**	 * Add a query to UNION ALL with the current query.	 * Multiple unions each require separate statements and create an array of unions.	 *	 * Usage:	 * $query->union('SELECT name FROM  #__foo')	 * $query->union('SELECT name FROM  #__foo','distinct')	 * $query->union(array('SELECT name FROM  #__foo','SELECT name FROM  #__bar'))	 *	 * @param   mixed    $query     The JDatabaseQuery object or string to union.	 * @param   boolean  $distinct  True to only return distinct rows from the union.	 * @param   string   $glue      The glue by which to join the conditions.	 *	 * @return  mixed    The JDatabaseQuery object on success or boolean false on failure.	 *	 * @since   13.1	 */	public function unionAll($query, $distinct = false, $glue = '')	{			$glue = ')' . PHP_EOL . 'UNION ALL (';			$name = 'UNION ALL ()';		// Get the JDatabaseQueryElement if it does not exist		if (is_null($this->unionAll))		{			$this->unionAll = new JDatabaseQueryElement($name, $query, "$glue");		}		// Otherwise append the second UNION.		else		{			$glue = '';			$this->unionAll->append($query);		}		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('behavior.modal');JHtml::_('formbehavior.chosen', 'select');$uri = JUri::getInstance();$return = base64_encode($uri);$user = JFactory::getUser();$userId = $user->get('id');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn = $this->escape($this->state->get('list.direction'));$modMenuId = (int) $this->get('ModMenuId');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task != 'menus.delete' || confirm('<?php echo JText::_('COM_MENUS_MENU_CONFIRM_DELETE', true);?>'))		{			Joomla.submitform(task);		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_menus&view=menus');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_MENUS_MENU_SEARCH_FILTER');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MENUS_MENU_SEARCH_FILTER'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap center hidden-phone">						<?php echo JText::_('COM_MENUS_HEADING_PUBLISHED_ITEMS'); ?>					</th>					<th width="10%" class="nowrap center hidden-phone">						<?php echo JText::_('COM_MENUS_HEADING_UNPUBLISHED_ITEMS'); ?>					</th>					<th width="10%" class="nowrap center hidden-phone">						<?php echo JText::_('COM_MENUS_HEADING_TRASHED_ITEMS'); ?>					</th>					<th width="20%" class="nowrap hidden-phone">						<?php echo JText::_('COM_MENUS_HEADING_LINKED_MODULES'); ?>					</th>					<th width="1%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create',     'com_menus');				$canEdit   = $user->authorise('core.edit',       'com_menus');				$canChange = $user->authorise('core.edit.state', 'com_menus');			?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype) ?> ">							<?php echo $this->escape($item->title); ?></a>						<p class="small">(<span><?php echo JText::_('COM_MENUS_MENU_MENUTYPE_LABEL') ?></span>							<?php if ($canEdit) : ?>								<?php echo '<a href="'.JRoute::_('index.php?option=com_menus&task=menu.edit&id='.$item->id).' title='.$this->escape($item->description).'">'.								$this->escape($item->menutype).'</a>'; ?>)							<?php else : ?>								<?php echo $this->escape($item->menutype)?>)							<?php endif; ?>						</p>					</td>					<td class="center btns">						<a class="badge badge-success" href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=1');?>">							<?php echo $item->count_published; ?></a>					</td>					<td class="center btns">						<a class="badge" href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=0');?>">							<?php echo $item->count_unpublished; ?></a>					</td>					<td class="center btns">						<a class="badge badge-error" href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=-2');?>">							<?php echo $item->count_trashed; ?></a>					</td>					<td class="left">						<?php if (isset($this->modules[$item->menutype])) : ?>							<div class="btn-group">								<a href="#" class="btn btn-small dropdown-toggle" data-toggle="dropdown">									<?php echo JText::_('COM_MENUS_MODULES') ?>									<b class="caret"></b>								</a>								<ul class="dropdown-menu">									<?php foreach ($this->modules[$item->menutype] as &$module) : ?>										<li>											<?php if ($canEdit) : ?>												<a class="small modal" href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.$module->id.'&return='.$return.'&tmpl=component&layout=modal');?>" rel="{handler: 'iframe', size: {x: 1024, y: 450}, onClose: function() {window.location.reload()}}" title="<?php echo JText::_('COM_MENUS_EDIT_MODULE_SETTINGS');?>">												<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?></a>											<?php else :?>												<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?>											<?php endif; ?>										</li>									<?php endforeach; ?>								</ul>							 </div>						<?php elseif ($modMenuId) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_modules&task=module.add&eid=' . $modMenuId . '&params[menutype]='.$item->menutype); ?>">							<?php echo JText::_('COM_MENUS_ADD_MENU_MODULE'); ?></a>						<?php endif; ?>					</td>					<td class="center">						<?php echo $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesModelTemplate extends JModelLegacy{	protected $template = null;	/**	 * Internal method to get file properties.	 *	 * @param   string The base path.	 * @param   string The file name.	 * @return  object	 * @since   1.6	 */	protected function getFile($path, $name)	{		$temp = new stdClass;		if ($template = $this->getTemplate())		{			$temp->name = $name;			$temp->exists = file_exists($path.$name);			$temp->id = urlencode(base64_encode($template->extension_id.':'.$name));			return $temp;		}	}	/**	 * Method to get a list of all the files to edit in a template.	 *	 * @return  array  A nested array of relevant files.	 * @since   1.6	 */	public function getFiles()	{		$result	= array();		if ($template = $this->getTemplate())		{			jimport('joomla.filesystem.folder');			$client = JApplicationHelper::getClientInfo($template->client_id);			$path	= JPath::clean($client->path.'/templates/'.$template->element.'/');			$lang	= JFactory::getLanguage();			// Load the core and/or local language file(s).			$lang->load('tpl_'.$template->element, $client->path, null, false, false)				||	$lang->load('tpl_'.$template->element, $client->path.'/templates/'.$template->element, null, false, false)				||	$lang->load('tpl_'.$template->element, $client->path, $lang->getDefault(), false, false)				||	$lang->load('tpl_'.$template->element, $client->path.'/templates/'.$template->element, $lang->getDefault(), false, false);			// Check if the template path exists.			if (is_dir($path))			{				$result['main'] = array();				$result['css'] = array();				$result['clo'] = array();				$result['mlo'] = array();				$result['html'] = array();				// Handle the main PHP files.				$result['main']['index'] = $this->getFile($path, 'index.php');				$result['main']['error'] = $this->getFile($path, 'error.php');				$result['main']['print'] = $this->getFile($path, 'component.php');				$result['main']['offline'] = $this->getFile($path, 'offline.php');				// Handle the CSS files.				$files = JFolder::files($path.'/css', '\.css$', false, false);				foreach ($files as $file)				{					$result['css'][] = $this->getFile($path.'/css/', 'css/'.$file);				}			} else {				$this->setError(JText::_('COM_TEMPLATES_ERROR_TEMPLATE_FOLDER_NOT_FOUND'));				return false;			}		}		return $result;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('id');		$this->setState('extension.id', $pk);		// Load the parameters.		$params	= JComponentHelper::getParams('com_templates');		$this->setState('params', $params);	}	/**	 * Method to get the template information.	 *	 * @return  mixed  Object if successful, false if not and internal error is set.	 * @since   1.6	 */	public function &getTemplate()	{		if (empty($this->template))		{			$pk		= $this->getState('extension.id');			$db		= $this->getDbo();			$result	= false;			// Get the template information.			$query = $db->getQuery(true)				->select('extension_id, client_id, element')				->from('#__extensions')				->where($db->quoteName('extension_id') . ' = ' . (int) $pk)				->where($db->quoteName('type') . ' = ' . $db->quote('template'));			$db->setQuery($query);			try			{				$result = $db->loadObject();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				$this->template = false;				return false;			}			if (empty($result))			{				$this->setError(JText::_('COM_TEMPLATES_ERROR_EXTENSION_RECORD_NOT_FOUND'));				$this->template = false;			} else {				$this->template = $result;			}		}		return $this->template;	}	/**	 * Method to check if new template name already exists	 *	 * @return  boolean   true if name is not used, false otherwise	 * @since	2.5	 */	public function checkNewName()	{		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('COUNT(*)')			->from('#__extensions')			->where('name = ' . $db->quote($this->getState('new_name')));		$db->setQuery($query);		return ($db->loadResult() == 0);	}	/**	 * Method to check if new template name already exists	 *	 * @return  string     name of current template	 * @since	2.5	 */	public function getFromName()	{		return $this->getTemplate()->element;	}	/**	 * Method to check if new template name already exists	 *	 * @return  boolean   true if name is not used, false otherwise	 * @since	2.5	 */	public function copy()	{		if ($template = $this->getTemplate())		{			jimport('joomla.filesystem.folder');			$client = JApplicationHelper::getClientInfo($template->client_id);			$fromPath = JPath::clean($client->path.'/templates/'.$template->element.'/');			// Delete new folder if it exists			$toPath = $this->getState('to_path');			if (JFolder::exists($toPath))			{				if (!JFolder::delete($toPath))				{					JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_WRITE'));					return false;				}			}			// Copy all files from $fromName template to $newName folder			if (!JFolder::copy($fromPath, $toPath) || !$this->fixTemplateName())			{				return false;			}		return true;		}		else		{			JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_FROM_NAME'));			return false;		}	}	/**	 * Method to delete tmp folder	 *	 * @return  boolean   true if delete successful, false otherwise	 * @since	2.5	 */	public function cleanup()	{		// Clear installation messages		$app = JFactory::getApplication();		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		// Delete temporary directory		return JFolder::delete($this->getState('to_path'));	}	/**	 * Method to rename the template in the XML files and rename the language files	 *	 * @return  boolean   true if successful, false otherwise	 * @since	2.5	 */	protected function fixTemplateName()	{		// Rename Language files		// Get list of language files		$result = true;		$files = JFolder::files($this->getState('to_path'), '.ini', true, true);		$newName = strtolower($this->getState('new_name'));		$oldName = $this->getTemplate()->element;		jimport('joomla.filesystem.file');		foreach ($files as $file)		{			$newFile = str_replace($oldName, $newName, $file);			$result = JFile::move($file, $newFile) && $result;		}		// Edit XML file		$xmlFile = $this->getState('to_path') . '/templateDetails.xml';		if (JFile::exists($xmlFile))		{			$contents = file_get_contents($xmlFile);			$pattern[] = '#<name>\s*' . $oldName . '\s*</name>#i';			$replace[] = '<name>'. $newName . '</name>';			$pattern[] = '#<language(.*)' . $oldName . '(.*)</language>#';			$replace[] = '<language${1}' . $newName . '${2}</language>';			$contents = preg_replace($pattern, $replace, $contents);			$result = JFile::write($xmlFile, $contents) && $result;		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.utilities.utility');/** * DocumentHTML class, provides an easy interface to parse and display a HTML document * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentHTML extends JDocument{	/**	 * Array of Header <link> tags	 *	 * @var    array	 * @since  11.1	 */	public $_links = array();	/**	 * Array of custom tags	 *	 * @var    array	 * @since  11.1	 */	public $_custom = array();	/**	 * Name of the template	 *	 * @var    string	 * @since  11.1	 */	public $template = null;	/**	 * Base url	 *	 * @var    string	 * @since  11.1	 */	public $baseurl = null;	/**	 * Array of template parameters	 *	 * @var    array	 * @since  11.1	 */	public $params = null;	/**	 * File name	 *	 * @var    array	 * @since  11.1	 */	public $_file = null;	/**	 * String holding parsed template	 *	 * @var    string	 * @since  11.1	 */	protected $_template = '';	/**	 * Array of parsed template JDoc tags	 *	 * @var    array	 * @since  11.1	 */	protected $_template_tags = array();	/**	 * Integer with caching setting	 *	 * @var    integer	 * @since  11.1	 */	protected $_caching = null;	/**	 * Set to true when the document should be output as HTML%	 *	 * @var    boolean	 * @since  12.1	 */	private $_html5 = null;	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set document type		$this->_type = 'html';		// Set default mime type and document metadata (meta data syncs with mime type by default)		$this->setMimeEncoding('text/html');	}	/**	 * Get the HTML document head data	 *	 * @return  array  The document head data in array form	 *	 * @since   11.1	 */	public function getHeadData()	{		$data = array();		$data['title']       = $this->title;		$data['description'] = $this->description;		$data['link']        = $this->link;		$data['metaTags']    = $this->_metaTags;		$data['links']       = $this->_links;		$data['styleSheets'] = $this->_styleSheets;		$data['style']       = $this->_style;		$data['scripts']     = $this->_scripts;		$data['script']      = $this->_script;		$data['custom']      = $this->_custom;		return $data;	}	/**	 * Set the HTML document head data	 *	 * @param   array  $data  The document head data in array form	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setHeadData($data)	{		if (empty($data) || !is_array($data))		{			return;		}		$this->title = (isset($data['title']) && !empty($data['title'])) ? $data['title'] : $this->title;		$this->description = (isset($data['description']) && !empty($data['description'])) ? $data['description'] : $this->description;		$this->link = (isset($data['link']) && !empty($data['link'])) ? $data['link'] : $this->link;		$this->_metaTags = (isset($data['metaTags']) && !empty($data['metaTags'])) ? $data['metaTags'] : $this->_metaTags;		$this->_links = (isset($data['links']) && !empty($data['links'])) ? $data['links'] : $this->_links;		$this->_styleSheets = (isset($data['styleSheets']) && !empty($data['styleSheets'])) ? $data['styleSheets'] : $this->_styleSheets;		$this->_style = (isset($data['style']) && !empty($data['style'])) ? $data['style'] : $this->_style;		$this->_scripts = (isset($data['scripts']) && !empty($data['scripts'])) ? $data['scripts'] : $this->_scripts;		$this->_script = (isset($data['script']) && !empty($data['script'])) ? $data['script'] : $this->_script;		$this->_custom = (isset($data['custom']) && !empty($data['custom'])) ? $data['custom'] : $this->_custom;		return $this;	}	/**	 * Merge the HTML document head data	 *	 * @param   array  $data  The document head data in array form	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function mergeHeadData($data)	{		if (empty($data) || !is_array($data))		{			return;		}		$this->title = (isset($data['title']) && !empty($data['title']) && !stristr($this->title, $data['title']))			? $this->title . $data['title']			: $this->title;		$this->description = (isset($data['description']) && !empty($data['description']) && !stristr($this->description, $data['description']))			? $this->description . $data['description']			: $this->description;		$this->link = (isset($data['link'])) ? $data['link'] : $this->link;		if (isset($data['metaTags']))		{			foreach ($data['metaTags'] as $type1 => $data1)			{				$booldog = $type1 == 'http-equiv' ? true : false;				foreach ($data1 as $name2 => $data2)				{					$this->setMetaData($name2, $data2, $booldog);				}			}		}		$this->_links = (isset($data['links']) && !empty($data['links']) && is_array($data['links']))			? array_unique(array_merge($this->_links, $data['links']))			: $this->_links;		$this->_styleSheets = (isset($data['styleSheets']) && !empty($data['styleSheets']) && is_array($data['styleSheets']))			? array_merge($this->_styleSheets, $data['styleSheets'])			: $this->_styleSheets;		if (isset($data['style']))		{			foreach ($data['style'] as $type => $stdata)			{				if (!isset($this->_style[strtolower($type)]) || !stristr($this->_style[strtolower($type)], $stdata))				{					$this->addStyleDeclaration($stdata, $type);				}			}		}		$this->_scripts = (isset($data['scripts']) && !empty($data['scripts']) && is_array($data['scripts']))			? array_merge($this->_scripts, $data['scripts'])			: $this->_scripts;		if (isset($data['script']))		{			foreach ($data['script'] as $type => $sdata)			{				if (!isset($this->_script[strtolower($type)]) || !stristr($this->_script[strtolower($type)], $sdata))				{					$this->addScriptDeclaration($sdata, $type);				}			}		}		$this->_custom = (isset($data['custom']) && !empty($data['custom']) && is_array($data['custom']))			? array_unique(array_merge($this->_custom, $data['custom']))			: $this->_custom;		return $this;	}	/**	 * Adds <link> tags to the head of the document	 *	 * $relType defaults to 'rel' as it is the most common relation type used.	 * ('rev' refers to reverse relation, 'rel' indicates normal, forward relation.)	 * Typical tag: <link href="index.php" rel="Start">	 *	 * @param   string  $href      The link that is being related.	 * @param   string  $relation  Relation of link.	 * @param   string  $relType   Relation type attribute.  Either rel or rev (default: 'rel').	 * @param   array   $attribs   Associative array of remaining attributes.	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addHeadLink($href, $relation, $relType = 'rel', $attribs = array())	{		$this->_links[$href]['relation'] = $relation;		$this->_links[$href]['relType'] = $relType;		$this->_links[$href]['attribs'] = $attribs;		return $this;	}	/**	 * Adds a shortcut icon (favicon)	 *	 * This adds a link to the icon shown in the favorites list or on	 * the left of the url in the address bar. Some browsers display	 * it on the tab, as well.	 *	 * @param   string  $href      The link that is being related.	 * @param   string  $type      File type	 * @param   string  $relation  Relation of link	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addFavicon($href, $type = 'image/vnd.microsoft.icon', $relation = 'shortcut icon')	{		$href = str_replace('\\', '/', $href);		$this->addHeadLink($href, $relation, 'rel', array('type' => $type));		return $this;	}	/**	 * Adds a custom HTML string to the head block	 *	 * @param   string  $html  The HTML to add to the head	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addCustomTag($html)	{		$this->_custom[] = trim($html);		return $this;	}	/**	 * Returns whether the document is set up to be output as HTML5	 *	 * @return  Boolean true when HTML5 is used	 *	 * @since   12.1	 */	public function isHtml5()	{		return $this->_html5;	}	/**	 * Sets whether the document should be output as HTML5	 *	 * @param   bool  $state  True when HTML5 should be output	 *	 * @return  void	 *	 * @since   12.1	 */	public function setHtml5($state)	{		if (is_bool($state))		{			$this->_html5 = $state;		}	}	/**	 * Get the contents of a document include	 *	 * @param   string  $type     The type of renderer	 * @param   string  $name     The name of the element to render	 * @param   array   $attribs  Associative array of remaining attributes.	 *	 * @return  The output of the renderer	 *	 * @since   11.1	 */	public function getBuffer($type = null, $name = null, $attribs = array())	{		// If no type is specified, return the whole buffer		if ($type === null)		{			return parent::$_buffer;		}		$title = (isset($attribs['title'])) ? $attribs['title'] : null;		if (isset(parent::$_buffer[$type][$name][$title]))		{			return parent::$_buffer[$type][$name][$title];		}		$renderer = $this->loadRenderer($type);		if ($this->_caching == true && $type == 'modules')		{			$cache = JFactory::getCache('com_modules', '');			$hash = md5(serialize(array($name, $attribs, null, $renderer)));			$cbuffer = $cache->get('cbuffer_' . $type);			if (isset($cbuffer[$hash]))			{				return JCache::getWorkarounds($cbuffer[$hash], array('mergehead' => 1));			}			else			{				$options = array();				$options['nopathway'] = 1;				$options['nomodules'] = 1;				$options['modulemode'] = 1;				$this->setBuffer($renderer->render($name, $attribs, null), $type, $name);				$data = parent::$_buffer[$type][$name][$title];				$tmpdata = JCache::setWorkarounds($data, $options);				$cbuffer[$hash] = $tmpdata;				$cache->store($cbuffer, 'cbuffer_' . $type);			}		}		else		{			$this->setBuffer($renderer->render($name, $attribs, null), $type, $name, $title);		}		return parent::$_buffer[$type][$name][$title];	}	/**	 * Set the contents a document includes	 *	 * @param   string  $content  The content to be set in the buffer.	 * @param   array   $options  Array of optional elements.	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setBuffer($content, $options = array())	{		// The following code is just for backward compatibility.		if (func_num_args() > 1 && !is_array($options))		{			$args = func_get_args();			$options = array();			$options['type'] = $args[1];			$options['name'] = (isset($args[2])) ? $args[2] : null;			$options['title'] = (isset($args[3])) ? $args[3] : null;		}		parent::$_buffer[$options['type']][$options['name']][$options['title']] = $content;		return $this;	}	/**	 * Parses the template and populates the buffer	 *	 * @param   array  $params  Parameters for fetching the template	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	public function parse($params = array())	{		return $this->_fetchTemplate($params)->_parseTemplate();	}	/**	 * Outputs the template to the browser.	 *	 * @param   boolean  $caching  If true, cache the output	 * @param   array    $params   Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   11.1	 */	public function render($caching = false, $params = array())	{		$this->_caching = $caching;		if (!empty($this->_template))		{			$data = $this->_renderTemplate();		}		else		{			$this->parse($params);			$data = $this->_renderTemplate();		}		parent::render();		return $data;	}	/**	 * Count the modules based on the given condition	 *	 * @param   string  $condition  The condition to use	 *	 * @return  integer  Number of modules found	 *	 * @since   11.1	 */	public function countModules($condition)	{		$operators = '(\+|\-|\*|\/|==|\!=|\<\>|\<|\>|\<=|\>=|and|or|xor)';		$words = preg_split('# ' . $operators . ' #', $condition, null, PREG_SPLIT_DELIM_CAPTURE);		for ($i = 0, $n = count($words); $i < $n; $i += 2)		{			// Odd parts (modules)			$name = strtolower($words[$i]);			$words[$i] = ((isset(parent::$_buffer['modules'][$name])) && (parent::$_buffer['modules'][$name] === false))				? 0				: count(JModuleHelper::getModules($name));		}		$str = 'return ' . implode(' ', $words) . ';';		return eval($str);	}	/**	 * Count the number of child menu items	 *	 * @return  integer  Number of child menu items	 *	 * @since   11.1	 */	public function countMenuChildren()	{		static $children;		if (!isset($children))		{			$db = JFactory::getDbo();			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			if ($active)			{				$query = $db->getQuery(true)					->select('COUNT(*)')					->from('#__menu')					->where('parent_id = ' . $active->id)					->where('published = 1');				$children = $db->loadResult();			}			else			{				$children = 0;			}		}		return $children;	}	/**	 * Load a template file	 *	 * @param   string  $directory  The name of the template	 * @param   string  $filename   The actual filename	 *	 * @return  string  The contents of the template	 *	 * @since   11.1	 */	protected function _loadTemplate($directory, $filename)	{		// @todo remove code: $component	= JApplicationHelper::getComponentName();		$contents = '';		// Check to see if we have a valid template file		if (file_exists($directory . '/' . $filename))		{			// Store the file path			$this->_file = $directory . '/' . $filename;			// Get the file content			ob_start();			require $directory . '/' . $filename;			$contents = ob_get_contents();			ob_end_clean();		}		// Try to find a favicon by checking the template and root folder		$path = $directory . '/';		$dirs = array($path, JPATH_BASE . '/');		foreach ($dirs as $dir)		{			$icon = $dir . 'favicon.ico';			if (file_exists($icon))			{				$path = str_replace(JPATH_BASE . '/', '', $dir);				$path = str_replace('\\', '/', $path);				$this->addFavicon(JURI::base(true) . '/' . $path . 'favicon.ico');				break;			}		}		return $contents;	}	/**	 * Fetch the template, and initialise the params	 *	 * @param   array  $params  Parameters to determine the template	 *	 * @return  JDocumentHTML instance of $this to allow chaining	 *	 * @since   11.1	 */	protected function _fetchTemplate($params = array())	{		// Check		$directory = isset($params['directory']) ? $params['directory'] : 'templates';		$filter = JFilterInput::getInstance();		$template = $filter->clean($params['template'], 'cmd');		$file = $filter->clean($params['file'], 'cmd');		if (!file_exists($directory . '/' . $template . '/' . $file))		{			$template = 'system';		}		// Load the language file for the template		$lang = JFactory::getLanguage();		// 1.5 or core then 1.6		$lang->load('tpl_' . $template, JPATH_BASE, null, false, false)			|| $lang->load('tpl_' . $template, $directory . '/' . $template, null, false, false)			|| $lang->load('tpl_' . $template, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load('tpl_' . $template, $directory . '/' . $template, $lang->getDefault(), false, false);		// Assign the variables		$this->template = $template;		$this->baseurl = JURI::base(true);		$this->params = isset($params['params']) ? $params['params'] : new JRegistry;		// Load		$this->_template = $this->_loadTemplate($directory . '/' . $template, $file);		return $this;	}	/**	 * Parse a document template	 *	 * @return  JDocumentHTML  instance of $this to allow chaining	 *	 * @since   11.1	 */	protected function _parseTemplate()	{		$matches = array();		if (preg_match_all('#<jdoc:include\ type="([^"]+)" (.*)\/>#iU', $this->_template, $matches))		{			$template_tags_first = array();			$template_tags_last = array();			// Step through the jdocs in reverse order.			for ($i = count($matches[0]) - 1; $i >= 0; $i--)			{				$type = $matches[1][$i];				$attribs = empty($matches[2][$i]) ? array() : JUtility::parseAttributes($matches[2][$i]);				$name = isset($attribs['name']) ? $attribs['name'] : null;				// Separate buffers to be executed first and last				if ($type == 'module' || $type == 'modules')				{					$template_tags_first[$matches[0][$i]] = array('type' => $type, 'name' => $name, 'attribs' => $attribs);				}				else				{					$template_tags_last[$matches[0][$i]] = array('type' => $type, 'name' => $name, 'attribs' => $attribs);				}			}			// Reverse the last array so the jdocs are in forward order.			$template_tags_last = array_reverse($template_tags_last);			$this->_template_tags = $template_tags_first + $template_tags_last;		}		return $this;	}	/**	 * Render pre-parsed template	 *	 * @return string rendered template	 *	 * @since   11.1	 */	protected function _renderTemplate()	{		$replace = array();		$with = array();		foreach ($this->_template_tags as $jdoc => $args)		{			$replace[] = $jdoc;			$with[] = $this->getBuffer($args['type'], $args['name'], $args['attribs']);		}		return str_replace($replace, $with, $this->_template);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API Info class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1*/class JOpenstreetmapInfo extends JOpenstreetmapObject{	/**	 * Method to get capabilities of the API	 * 	 * @return	array The xml response	 * 	 * @since	13.1	 */	public function getCapabilities()	{		// Set the API base		$base = 'capabilities';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', array());		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}	/**	 * Method to retrieve map data of a bounding box	 * 	 * @param   float  $left    left boundary	 * @param   float  $bottom  bottom boundary	 * @param   float  $right   right boundary	 * @param   float  $top     top boundary	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function retrieveMapData($left, $bottom, $right, $top)	{		// Set the API base		$base = 'map?bbox=' . $left . ',' . $bottom . ',' . $right . ',' . $top;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', array());		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}	/**	 * Method to retrieve permissions for current user	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function retrievePermissions()	{		if ($this->oauth != null)		{			$token = $this->oauth->getToken();		}		// Set the API base		$base = 'permissions';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', array());		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Users class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiUsers extends JMediawikiObject{	/**     * Method to login and get authentication tokens.     *     * @param   string  $lgname      User Name.     * @param   string  $lgpassword  Password.     * @param   string  $lgdomain    Domain (optional).     *     * @return  object     *     * @since   12.3     */	public function login($lgname, $lgpassword, $lgdomain = null)	{		// Build the request path.		$path = '?action=login&lgname=' . $lgname . '&lgpassword=' . $lgpassword;		if (isset($lgdomain))		{			$path .= '&lgdomain=' . $lgdomain;		}		// Send the request.		$response = $this->client->post($this->fetchUrl($path), null);		// Request path with login token.		$path = '?action=login&lgname=' . $lgname . '&lgpassword=' . $lgpassword . '&lgtoken=' . $this->validateResponse($response)->login['token'];		if (isset($lgdomain))		{			$path .= '&lgdomain=' . $lgdomain;		}		// Set the session cookies returned.		$headers = (array) $this->options->get('headers');		$headers['Cookie'] = !empty($headers['Cookie']) ? empty($headers['Cookie']) : '';		$headers['Cookie'] = $headers['Cookie'] . $response->headers['Set-Cookie'];		$this->options->set('headers', $headers);		// Send the request again with the token.		$response = $this->client->post($this->fetchUrl($path), null);		$response_body = $this->validateResponse($response);		$headers = (array) $this->options->get('headers');		$cookie_prefix = $response_body->login['cookieprefix'];		$cookie = $cookie_prefix . 'UserID=' . $response_body->login['lguserid'] . '; ' . $cookie_prefix			. 'UserName=' . $response_body->login['lgusername'];		$headers['Cookie'] = $headers['Cookie'] . '; ' . $response->headers['Set-Cookie'] . '; ' . $cookie;		$this->options->set('headers', $headers);		return $this->validateResponse($response);	}	/**	 * Method to logout and clear session data.	 *	 * @return  object	 *	 * @since   12.3	 */	public function logout()	{		// Build the request path.		$path = '?action=login';		// @TODO clear internal data as well		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get user information.	 *	 * @param   array  $ususers  A list of users to obtain the same information for.	 * @param   array  $usprop   What pieces of information to include.	 *     * @return  object     *     * @since   12.3     */	public function getUserInfo(array $ususers, array $usprop = null)	{		// Build the request path.		$path = '?action=query&list=users';		// Append users to the request.		$path .= '&ususers=' . $this->buildParameter($ususers);		if (isset($usprop))		{			$path .= '&usprop' . $this->buildParameter($usprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get current user information.	 *	 * @param   array  $uiprop  What pieces of information to include.     *     * @return  object     *     * @since   12.3     */	public function getCurrentUserInfo(array $uiprop = null)	{		// Build the request path.		$path = '?action=query&meta=userinfo';		if (isset($uiprop))		{			$path .= '&uiprop' . $this->buildParameter($uiprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get user contributions.     *     * @param   string   $ucuser        The users to retrieve contributions for.	 * @param   string   $ucuserprefix  Retrieve contibutions for all users whose names begin with this value.     * @param   integer  $uclimit       The users to retrieve contributions for.     * @param   string   $ucstart       The start timestamp to return from.     * @param   string   $ucend         The end timestamp to return to.     * @param   boolean  $uccontinue    When more results are available, use this to continue.     * @param   string   $ucdir         In which direction to enumerate.     * @param   array    $ucnamespace   Only list contributions in these namespaces.     * @param   array    $ucprop        Include additional pieces of information.     * @param   array    $ucshow        Show only items that meet this criteria.     * @param   string   $uctag         Only list revisions tagged with this tag.     * @param   string   $uctoponly     Only list changes which are the latest revision     *     * @return  object     *     * @since   12.3     */	public function getUserContribs($ucuser = null, $ucuserprefix = null, $uclimit = null, $ucstart = null, $ucend = null, $uccontinue = null,		$ucdir = null, array $ucnamespace = null, array $ucprop = null, array $ucshow = null, $uctag = null, $uctoponly = null)	{		// Build the request path.		$path = '?action=query&list=usercontribs';		if (isset($ucuser))		{			$path .= '&ucuser=' . $ucuser;		}		if (isset($ucuserprefix))		{			$path .= '&ucuserprefix=' . $ucuserprefix;		}		if (isset($uclimit))		{			$path .= '&uclimit=' . $uclimit;		}		if (isset($ucstart))		{			$path .= '&ucstart=' . $ucstart;		}		if (isset($ucend))		{			$path .= '&ucend=' . $ucend;		}		if ($uccontinue)		{			$path .= '&uccontinue=';		}		if (isset($ucdir))		{			$path .= '&ucdir=' . $ucdir;		}		if (isset($ucnamespace))		{			$path .= '&ucnamespace=' . $this->buildParameter($ucnamespace);		}		if (isset($ucprop))		{			$path .= '&ucprop=' . $this->buildParameter($ucprop);		}		if (isset($ucshow))		{			$path .= '&ucshow=' . $this->buildParameter($ucshow);		}		if (isset($uctag))		{			$path .= '&uctag=' . $uctag;		}		if (isset($uctoponly))		{			$path .= '&uctoponly=' . $uctoponly;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to block a user.	 *	 * @param   string   $user           Username, IP address or IP range you want to block.	 * @param   string   $expiry         Relative expiry time, Default: never.	 * @param   string   $reason         Reason for block (optional).	 * @param   boolean  $anononly       Block anonymous users only.	 * @param   boolean  $nocreate       Prevent account creation.	 * @param   boolean  $autoblock      Automatically block the last used IP address, and any subsequent IP addresses they try to login from.	 * @param   boolean  $noemail        Prevent user from sending e-mail through the wiki.	 * @param   boolean  $hidename       Hide the username from the block log.	 * @param   boolean  $allowusertalk  Allow the user to edit their own talk page.	 * @param   boolean  $reblock        If the user is already blocked, overwrite the existing block.	 * @param   boolean  $watchuser      Watch the user/IP's user and talk pages.     *     * @return  object     *     * @since   12.3     */	public function blockUser($user, $expiry = null, $reason = null, $anononly = null, $nocreate = null, $autoblock = null, $noemail = null,		$hidename = null, $allowusertalk = null, $reblock = null, $watchuser = null)	{		// Get the token.		$token = $this->getToken($user, 'block');		// Build the request path.		$path = '?action=unblock';		// Build the request data.		$data = array(			'user' => $user,			'token' => $token,			'expiry' => $expiry,			'reason' => $reason,			'anononly' => $anononly,			'nocreate' => $nocreate,			'autoblock' => $autoblock,			'noemail' => $noemail,			'hidename' => $hidename,			'allowusetalk' => $allowusertalk,			'reblock' => $reblock,			'watchuser' => $watchuser		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to unblock a user.	 *	 * @param   string  $user    Username, IP address or IP range you want to unblock.	 * @param   string  $reason  Reason for unblock (optional).     *     * @return  object     *     * @since   12.3     */	public function unBlockUserByName($user, $reason = null)	{		// Get the token.		$token = $this->getToken($user, 'unblock');		// Build the request path.		$path = '?action=unblock';		// Build the request data.		$data = array(				'user' => $user,				'token' => $token,				'reason' => $reason,		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to unblock a user.	 *	 * @param   int     $id      Username, IP address or IP range you want to unblock.	 * @param   string  $reason  Reason for unblock (optional).	 *	 * @return  object	 *	 * @since   12.3	 */	public function unBlockUserByID($id, $reason = null)	{		// Get the token.		$token = $this->getToken($id, 'unblock');		// Build the request path.		$path = '?action=unblock';		// Build the request data.		$data = array(			'id' => $id,			'token' => $token,			'reason' => $reason,		);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to assign a user to a group.	 *	 * @param   string  $username  User name.	 * @param   array   $add       Add the user to these groups.	 * @param   array   $remove    Remove the user from these groups.	 * @param   string  $reason    Reason for the change.     *     * @return  object     *     * @since   12.3     */	public function assignGroup($username, $add = null, $remove = null, $reason = null)	{		// Get the token.		$token = $this->getToken($username, 'unblock');		// Build the request path.		$path = '?action=userrights';		// Build the request data.		$data = array(			'username' => $username,			'token' => $token,			'add' => $add,			'remove' => $remove,			'reason' => $reason		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to email a user.	 *	 * @param   string   $target   User to send email to.	 * @param   string   $subject  Subject header.	 * @param   string   $text     Mail body.	 * @param   boolean  $ccme     Send a copy of this mail to me.     *     * @return  object     *     * @since   12.3     */	public function emailUser($target, $subject = null, $text = null, $ccme = null)	{		// Get the token.		$token = $this->getToken($target, 'emailuser');		// Build the request path.		$path = '?action=emailuser';		// Build the request data.		$data = array(			'target' => $target,			'token' => $token,			'subject' => $subject,			'text' => $text,			'ccme' => $ccme		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to get access token.	 *	 * @param   string  $user     The User to get token.	 * @param   string  $intoken  The type of token.	 *	 * @return  object	 *	 * @since   12.3	 */	public function getToken($user, $intoken)	{		// Build the request path.		$path = '?action=query&prop=info&intoken=' . $intoken . '&titles=User:' . $user;		// Send the request.		$response = $this->client->post($this->fetchUrl($path), null);		return (string) $this->validateResponse($response)->query->pages->page[$intoken . 'token'];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_newsfeeds.category');$saveOrder	= $listOrder == 'a.ordering';$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'newsfeeds.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES_HEADING', 'numarticles', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_CACHE_TIME_HEADING', 'a.cache_time', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>					<th class="width-5">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>				<?php endif;?>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'a.ordering');			$canCreate  = $user->authorise('core.create',     'com_newsfeeds.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_newsfeeds.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_newsfeeds.category.' . $item->catid) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'newsfeeds.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_newsfeeds&task=newsfeed.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>							<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'newsfeeds.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'newsfeeds.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'newsfeeds.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'newsfeeds.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'newsfeeds.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo (int) $item->numarticles; ?>				</td>				<td class="center">					<?php echo (int) $item->cache_time; ?>				</td>				<?php if ($assoc) : ?>					<td class="center">						<?php if ($item->association) : ?>							<?php echo JHtml::_('newsfeed.association', $item->id); ?>						<?php endif; ?>					</td>				<?php endif;?>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Helper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Tags helper class, provides methods to perform various tasks relevant * tagging of content. * * @package     Joomla.Libraries * @subpackage  Helper * @since       3.1 */class JHelperTags{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    boolean	 * @since  3.1	 */	protected $tagsChanged = false;	/**	 * Whether up replace all tags or just add tags	 *	 * @var    boolean	 * @since  3.1	 */	protected $replaceTags = false;	/**	 * Alias for quering mapping and content type table.	 *	 * @var    string	 * @since  3.1	 */	public $typeAlias = null;	/**	 * Method to add tag rows to mapping table.	 *	 * @param   integer  $ucmId    Id of the #__ucm_content item being tagged	 * @param   JTable   $table    JTable object being tagged	 * @param   array    $tags     Array of tags to be applied.	 *	 * @return  boolean  true on success, otherwise false.	 *	 * @since   3.1	 */	public function addTagMapping($ucmId, $table, $tags = array())	{		$typeId = $this->typeAlias;		$db = $table->getDbo();		$key = $table->getKeyName();		$item = $table->$key;		$typeId = $this->getTypeId($this->typeAlias);		// Insert the new tag maps		$query = $db->getQuery(true);		$query->insert('#__contentitem_tag_map');		$query->columns(array($db->quoteName('type_alias'), $db->quoteName('core_content_id'), $db->quoteName('content_item_id'), $db->quoteName('tag_id'), $db->quoteName('tag_date'),  $db->quoteName('type_id')));		foreach ($tags as $tag)		{			$query->values($db->quote($this->typeAlias) . ', ' . (int) $ucmId . ', ' . (int) $item . ', ' . $db->quote($tag) . ', ' . $query->currentTimestamp() . ', ' . (int) $typeId);		}		$db->setQuery($query);		return (boolean) $db->execute();	}	/**	 * Function that converts tags paths into paths of names	 *	 * @param   array  $tags  Array of tags	 *	 * @return  array	 *	 * @since   3.1	 */	public static function convertPathsToNames($tags)	{		// We will replace path aliases with tag names		if ($tags)		{			// Create an array with all the aliases of the results			$aliases = array();			foreach ($tags as $tag)			{				if (!empty($tag->path))				{					if ($pathParts = explode('/', $tag->path))					{						$aliases = array_merge($aliases, $pathParts);					}				}			}			// Get the aliases titles in one single query and map the results			if ($aliases)			{				// Remove duplicates				$aliases = array_unique($aliases);				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select('alias, title')					->from('#__tags')					->where('alias IN (' . implode(',', array_map(array($db, 'quote'), $aliases)) . ')');				$db->setQuery($query);				try				{					$aliasesMapper = $db->loadAssocList('alias');				}				catch (RuntimeException $e)				{					return false;				}				// Rebuild the items path				if ($aliasesMapper)				{					foreach ($tags as $tag)					{						$namesPath = array();						if (!empty($tag->path))						{							if ($pathParts = explode('/', $tag->path))							{								foreach ($pathParts as $alias)								{									if (isset($aliasesMapper[$alias]))									{										$namesPath[] = $aliasesMapper[$alias]['title'];									}									else									{										$namesPath[] = $alias;									}								}								$tag->text = implode('/', $namesPath);							}						}					}				}			}		}		return $tags;	}	/**	 * Create any new tags by looking for #new# in the metadata	 *	 * @param   string  $metadata   Metadata JSON string	 *	 * @return  mixed   If successful, metadata with new tag titles replaced by tag ids. Otherwise false.	 *	 * @since   3.1	 */	public function createTagsFromMetadata($metadata)	{		$metaObject = json_decode($metadata);		$tags = $metaObject->tags;		if (empty($tags) || !is_array($tags))		{			$result = $metadata;		}		else		{			// We will use the tags table to store them			JTable::addIncludePath(JPATH_ADMINISTRATOR . '/components/com_tags/tables');			$tagTable = JTable::getInstance('Tag', 'TagsTable');			$newTags = array();			foreach ($tags as $key => $tag)			{				// Remove the #new# prefix that identifies new tags				$tagText = str_replace('#new#', '', $tag);				if ($tagText == $tag)				{					$newTags[] = (int) $tag;				}				else				{					// Clear old data if exist					$tagTable->reset();					// Try to load the selected tag					if ($tagTable->load(array('title' => $tagText)))					{						$newTags[] = (int) $tagTable->id;					}					else					{						// Prepare tag data						$tagTable->id = 0;						$tagTable->title = $tagText;						$tagTable->published = 1;						// $tagTable->language = property_exists ($item, 'language') ? $item->language : '*';						$tagTable->language = '*';						$tagTable->access = 1;						// Make this item a child of the root tag						$tagTable->setLocation($tagTable->getRootId(), 'last-child');						// Try to store tag						if ($tagTable->check())						{							// Assign the alias as path (autogenerated tags have always level 1)							$tagTable->path = $tagTable->alias;							if ($tagTable->store())							{								$newTags[] = (int) $tagTable->id;							}						}					}				}			}			// At this point $tags is an array of all tag ids			$metaObject->tags = $newTags;			$result = json_encode($metaObject);		}		return $result;	}	/**	 * Method to delete the tag mappings and #__ucm_content record for for an item	 *	 * @param   JTable   $table             JTable object of content table where delete occurred	 * @param   integer  $contentItemId     Id of the content item.	 *	 * @return  boolean  true on success, false on failure	 *	 * @since   3.1	 */	public function deleteTagData(JTable $table, $contentItemId)	{		$result = $this->unTagItem($contentItemId, $table);		$ucmContentTable = JTable::getInstance('Corecontent');		return $result && $ucmContentTable->deleteByContentId($contentItemId);	}	/**	 * Method to get a list of tags for an item, optionally with the tag data.	 *	 * @param   integer  $contentType  Content type alias. Dot separated.	 * @param   integer  $id           Id of the item to retrieve tags for.	 * @param   boolean  $getTagData   If true, data from the tags table will be included, defaults to true.	 *	 * @return  array    Array of of tag objects	 *	 * @since   3.1	 */	public function getItemTags($contentType, $id, $getTagData = true)	{		if (is_array($id))		{			$id = implode($id);		}		// Initialize some variables.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('m.tag_id'))			->from($db->quoteName('#__contentitem_tag_map') . ' AS m ')			->where(				array(					$db->quoteName('m.type_alias') . ' = ' . $db->quote($contentType),					$db->quoteName('m.content_item_id') . ' = ' . $id,					$db->quoteName('t.published') . ' = 1'				)			);		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		$query->where('t.access IN (' . $groups . ')');		// Optionally filter on language		if (empty($language))		{			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');		}		if ($language != 'all')		{			if ($language == 'current_language')			{				$language = JHelperContent::getCurrentLanguage();			}			$query->where($db->quoteName('language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');		}		if ($getTagData)		{			$query->select($db->quoteName('t') . '.*');		}		$query->join('INNER', $db->quoteName('#__tags') . ' AS t ' . ' ON ' . $db->quoteName('m.tag_id') . ' = ' . $db->quoteName('t.id'));		$db->setQuery($query);		$this->itemTags = $db->loadObjectList();		return $this->itemTags;	}	/**	 * Method to get a list of tags for a given item.	 * Normally used for displaying a list of tags within a layout	 *	 * @param   integer  $id      The id (primary key) of the item to be tagged.	 * @param   string   $prefix  Dot separated string with the option and view to be used for a url.	 *	 * @return  string   Comma separated list of tag Ids.	 *	 * @since   3.1	 */	public function getTagIds($id, $prefix)	{		if (!empty($id))		{			if (is_array($id))			{				$id = implode(',', $id);			}			$db = JFactory::getDbo();			$query = $db->getQuery(true);			// Load the tags.			$query->clear()				->select($db->quoteName('t.id'))				->from($db->quoteName('#__tags') . ' AS t ')				->join(					'INNER', $db->quoteName('#__contentitem_tag_map') . ' AS m'					. ' ON ' . $db->quoteName('m.tag_id') . ' = ' . $db->quoteName('t.id')					. ' AND ' . $db->quoteName('m.type_alias') . ' = ' . $db->quote($prefix)					. ' AND ' . $db->quoteName('m.content_item_id') . ' IN ( ' . $id . ')'				);			$db->setQuery($query);			// Add the tags to the content data.			$tagsList = $db->loadColumn();			$this->tags = implode(',', $tagsList);		}		else		{			$this->tags = null;		}		return $this->tags;	}	/**	 * Method to get a query to retrieve a detailed list of items for a tag.	 *	 * @param   mixed    $tagId            Tag or array of tags to be matched	 * @param   mixed    $typesr           Null, type or array of type aliases for content types to be included in the results	 * @param   boolean  $includeChildren  True to include the results from child tags	 * @param   string   $orderByOption    Column to order the results by	 * @param   string   $orderDir         Direction to sort the results in	 * @param   boolean  $anyOrAll         True to include items matching at least one tag, false to include	 *                                     items all tags in the array.	 * @param   string   $languageFilter   Optional filter on language. Options are 'all', 'current' or any string.	 * @param   string   $stateFilter      Optional filtering on publication state, defaults to published or unpublished.	 *	 * @return  JDatabaseQuery  Query to retrieve a list of tags	 *	 * @since   3.1	 */	public function getTagItemsQuery($tagId, $typesr = null, $includeChildren = false, $orderByOption = 'c.core_title', $orderDir = 'ASC',		$anyOrAll = true, $languageFilter = 'all', $stateFilter = '0,1')	{		// Create a new query object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$nullDate = $db->quote($db->getNullDate());		$ntagsr = substr_count($tagId, ',') + 1;		// If we want to include children we have to adjust the list of tags.		// We do not search child tags when the match all option is selected.		if ($includeChildren)		{			if (!is_array($tagId))			{				$tagIdArray = explode(',', $tagId);			}			else			{				$tagIdArray = $tagId;			}			$tagTreeList = '';			foreach ($tagIdArray as $tag)			{				if ($this->getTagTreeArray($tag, $tagTreeArray))				{					$tagTreeList .= implode(',', $this->getTagTreeArray($tag, $tagTreeArray)) . ',';				}			}			if ($tagTreeList)			{				$tagId = trim($tagTreeList, ',');			}		}		if (is_array($tagId))		{			$tagId = implode(',', $tagId);		}		// M is the mapping table. C is the core_content table. Ct is the content_types table.		$query->select('m.type_alias, m.content_item_id, m.core_content_id, count(m.tag_id) AS match_count,  MAX(m.tag_date) as tag_date, MAX(c.core_title) AS core_title')			->select('MAX(c.core_alias) AS core_alias, MAX(c.core_body) AS core_body, MAX(c.core_state) AS core_state, MAX(c.core_access) AS core_access')			->select('MAX(c.core_metadata) AS core_metadata, MAX(c.core_created_user_id) AS core_created_user_id, MAX(c.core_created_by_alias) AS core_created_by_alias')			->select('MAX(c.core_created_time) as core_created_time, MAX(c.core_images) as core_images')			->select('CASE WHEN c.core_modified_time = ' . $nullDate . ' THEN c.core_created_time ELSE c.core_modified_time END as core_modified_time')			->select('MAX(c.core_language) AS core_language, MAX(c.core_catid) AS core_catid')			->select('MAX(c.core_publish_up) AS core_publish_up, MAX(c.core_publish_down) as core_publish_down')			->select('MAX(ct.type_title) AS content_type_title, MAX(ct.router) AS router')			->from('#__contentitem_tag_map AS m')			->join('INNER', '#__ucm_content AS c ON m.type_alias = c.core_type_alias AND m.core_content_id = c.core_content_id')			->join('INNER', '#__content_types AS ct ON ct.type_alias = m.type_alias')			// Join over the users for the author and email			->select("CASE WHEN c.core_created_by_alias > ' ' THEN c.core_created_by_alias ELSE ua.name END AS author")			->select("ua.email AS author_email")			->join('LEFT', '#__users AS ua ON ua.id = c.core_created_user_id')			->where('m.tag_id IN (' . $tagId . ')')			->where('c.core_state IN (' . $stateFilter . ')');		// Optionally filter on language		if (empty($language))		{			$language = $languageFilter;		}		if ($language != 'all')		{			if ($language == 'current_language')			{				$language = JHelperContent::getCurrentLanguage();			}			$query->where($db->quoteName('c.core_language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');		}		// Get the type data, limited to types in the request if there are any specified.		$typesarray = self::getTypes('assocList', $typesr, false);		$typeAliases = '';		foreach ($typesarray as $type)		{			$typeAliases .= "'" . $type['type_alias'] . "'" . ',';		}		$typeAliases = rtrim($typeAliases, ',');		$query->where('m.type_alias IN (' . $typeAliases . ')');		$groups = '0,' . implode(',', array_unique($user->getAuthorisedViewLevels()));		$query->where('c.core_access IN (' . $groups . ')')			->group('m.type_alias, m.content_item_id, m.core_content_id');		// Use HAVING if matching all tags and we are matching more than one tag.		if ($ntagsr > 1 && $anyOrAll != 1 && $includeChildren != 1)		{			// The number of results should equal the number of tags requested.			$query->having("COUNT('m.tag_id') = " . $ntagsr);		}		// Set up the order by using the option chosen		if ($orderByOption == 'match_count')		{			$orderBy = 'COUNT(m.tag_id)';		}		else		{			$orderBy = 'MAX(' . $orderByOption . ')';		}		$query->order($orderBy . ' ' . $orderDir);		return $query;	}	/**	 * Function that converts tag ids to their tag names	 *	 * @param   array  $tagIds   array of integer tag ids.	 *	 * @return  array  An array of tag names.	 *	 * @since   3.1	 */	public function getTagNames($tagIds)	{		$tagNames = array();		if (is_array($tagIds) && count($tagIds) > 0)		{			JArrayHelper::toInteger($tagIds);			$tagIds = implode(',', $tagIds);			$db = JFactory::getDbo();			$query = $db->getQuery(true);			$query->select($db->quoteName('title'))				->from($db->quoteName('#__tags'))				->where($db->quoteName('id') . ' IN (' . $tagIds . ')');			$query->order($db->quoteName('title'));			$db->setQuery($query);			$tagNames = $db->loadColumn();		}		return $tagNames;	}	/**	 * Method to get an array of tag ids for the current tag and its children	 *	 * @param   integer  $id             An optional ID	 * @param   array    &$tagTreeArray  Array containing the tag tree	 *	 * @return  mixed	 *	 * @since   3.1	 */	public function getTagTreeArray($id, &$tagTreeArray = array())	{		// Get a level row instance.		$table = JTable::getInstance('Tag', 'TagsTable');		if ($table->isLeaf($id))		{			$tagTreeArray[] .= $id;			return $tagTreeArray;		}		$tagTree = $table->getTree($id);		// Attempt to load the tree		if ($tagTree)		{			foreach ($tagTree as $tag)			{				$tagTreeArray[] = $tag->id;			}			return $tagTreeArray;		}	}	/**	 * Method to get the type id for a type alias.	 *	 * @param   string  $typeAlias  A type alias.	 *	 * @return  string  Name of the table for a type	 *	 * @since   3.1	 */	public function getTypeId($typeAlias)	{		// Initialize some variables.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('type_id'))			->from($db->quoteName('#__content_types'))			->where($db->quoteName('type_alias') . ' = ' . $db->quote($typeAlias));		$db->setQuery($query);		$this->type_id = $db->loadResult();		return $this->type_id;	}	/**	 * Method to get a list of types with associated data.	 *	 * @param   string   $arrayType    Optionally specify that the returned list consist of objects, associative arrays, or arrays.	 *                                 Options are: rowList, assocList, and objectList	 * @param   array    $selectTypes  Optional array of type ids to limit the results to. Often from a request.	 * @param   boolean  $useAlias     If true, the alias is used to match, if false the type_id is used.	 *	 * @return  array   Array of of types	 *	 * @since   3.1	 */	public static function getTypes($arrayType = 'objectList', $selectTypes = null, $useAlias = true)	{		// Initialize some variables.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$query->select('*');		if (!empty($selectTypes))		{			if (is_array($selectTypes))			{				$selectTypes = implode(',', $selectTypes);			}			if ($useAlias)			{				$query->where($db->quoteName('type_alias') . ' IN (' . $db->quote($selectTypes) . ')');			}			else			{				$query->where($db->quoteName('type_id') . ' IN (' . $selectTypes . ')');			}		}		$query->from($db->quoteName('#__content_types'));		$db->setQuery($query);		switch ($arrayType)		{			case 'assocList':				$types = $db->loadAssocList();			break;			case 'rowList':				$types = $db->loadRowList();			break;			case 'objectList':			default:				$types = $db->loadObjectList();			break;		}		return $types;	}	/**	 * Function that handles saving tags used in a table class after a store()	 *	 * @param   JTable  $table      JTable being processed	 *	 * @return  null	 *	 * @since   3.1	 */	public function postStoreProcess($table)	{		$metaObject = json_decode($table->get('metadata'));		$tags = (isset($metaObject->tags)) ? $metaObject->tags : null;		$result = true;		// Process ucm_content and ucm_base if either tags have changed or we have some tags.		if ($this->tagsChanged || $tags)		{			if (!$tags)			{				// Delete all tags data				$key = $table->getKeyName();				$result = $this->deleteTagData($table, $table->$key);			}			else			{				// Process the tags				$rowdata = new JHelperContent;				$data = $rowdata->getRowData($table);				$ucmContentTable = JTable::getInstance('Corecontent');				$ucm = new JUcmContent($table, $this->typeAlias);				$ucmData = $data ? $ucm->mapData($data) : $ucm->ucmData;				$primaryId = $ucm->getPrimaryKey($ucmData['common']['core_type_id'], $ucmData['common']['core_content_item_id']);				$result = $ucmContentTable->load($primaryId);				$result = $result && $ucmContentTable->bind($ucmData['common']);				$result = $result && $ucmContentTable->check();				$result = $result && $ucmContentTable->store();				$ucmId = $ucmContentTable->core_content_id;				// Store the tag data if the article data was saved and run related methods.				$result = $result && $this->tagItem($ucmId, $table, json_decode($table->metadata)->tags, true);			}		}		return $result;	}	/**	 * Function that preProcesses data from a table prior to a store() to ensure proper tag handling	 *	 * @param   JTable  $table      JTable being processed	 *	 * @return  null	 *	 * @since   3.1	 */	public function preStoreProcess($table)	{		if ($newMetadata = $this->createTagsFromMetadata($table->metadata))		{			$table->metadata = $newMetadata;		}		// If existing row, check to see if tags have changed.		$oldTable = clone $table;		$oldTable->reset();		$key = $oldTable->getKeyName();		if ($oldTable->$key && $oldTable->load())		{			$oldMetaObject = json_decode($oldTable->get('metadata'));			$oldTags = (isset($oldMetaObject->tags)) ? $oldMetaObject->tags : null;			$newMetaObject = json_decode($table->get('metadata'));			$newTags = (isset($newMetaObject->tags)) ? $newMetaObject->tags : null;		}		// We need to process tags if the tags have changed or if we have a new row		$this->tagsChanged = ($oldTags != $newTags) || !$table->$key;	}	/**	 * Function to search tags	 *	 * @param   array  $filters  Filter to apply to the search	 *	 * @return  array	 *	 * @since   3.1	 */	public static function searchTags($filters = array())	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value')			->select('a.path AS text')			->select('a.path')			->from('#__tags AS a')			->join('LEFT', $db->quoteName('#__tags', 'b') . ' ON a.lft > b.lft AND a.rgt < b.rgt');		// Filter language		if (!empty($filters['flanguage']))		{			$query->where('a.language IN (' . $db->quote($filters['flanguage']) . ',' . $db->quote('*') . ') ');		}		// Do not return root		$query->where($db->quoteName('a.alias') . ' <> ' . $db->quote('root'));		// Search in title or path		if (!empty($filters['like']))		{			$query->where(				'(' . $db->quoteName('a.title') . ' LIKE ' . $db->quote('%' . $filters['like'] . '%')					. ' OR ' . $db->quoteName('a.path') . ' LIKE ' . $db->quote('%' . $filters['like'] . '%') . ')'			);		}		// Filter title		if (!empty($filters['title']))		{			$query->where($db->quoteName('a.title') . ' = ' . $db->quote($filters['title']));		}		// Filter on the published state		if (is_numeric($filters['published']))		{			$query->where('a.published = ' . (int) $filters['published']);		}		// Filter by parent_id		if (!empty($filters['parent_id']))		{			JTable::addIncludePath(JPATH_ADMINISTRATOR . '/components/com_tags/tables');			$tagTable = JTable::getInstance('Tag', 'TagsTable');			if ($children = $tagTable->getTree($filters['parent_id']))			{				foreach ($children as $child)				{					$childrenIds[] = $child->id;				}				$query->where('a.id IN (' . implode(',', $childrenIds) . ')');			}		}		$query->group('a.id, a.title, a.level, a.lft, a.rgt, a.parent_id, a.published, a.path')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$results = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return false;		}		// We will replace path aliases with tag names		$results = self::convertPathsToNames($results);		return $results;	}	/**	 * Method to delete all instances of a tag from the mapping table. Generally used when a tag is deleted.	 *	 * @param   integer  $tag_id  The tag_id (primary key) for the deleted tag.	 *	 * @return  void	 *	 * @since   3.1	 */	public function tagDeleteInstances($tag_id)	{		// Delete the old tag maps.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->delete($db->quoteName('#__contentitem_tag_map'))			->where($db->quoteName('tag_id') . ' = ' . (int) $tag_id);		$db->setQuery($query);		$db->execute();	}	/**	 * Method to add or update tags associated with an item.	 *	 * @param   integer  $ucmId    Id of the #__ucm_content item being tagged	 * @param   JTable   $table    JTable object being tagged	 * @param   array    $tags     Array of tags to be applied.	 * @param   boolean  $replace  Flag indicating if all exising tags should be replaced	 *	 * @return  boolean  true on success, otherwise false.	 *	 * @since   3.1	 */	public function tagItem($ucmId, $table, $tags = array(), $replace = true)	{		$result = $this->unTagItem($ucmId, $table);		if ($replace)		{			$newTags = $tags;		}		else		{			$oldTags = json_decode($table->metadata)->tags;			$newTags = array_unique(array_merge($tags, $oldTags));		}		if (is_array($newTags) && count($newTags) > 0)		{			$result = $result && $this->addTagMapping($ucmId, $table, $newTags);		}		return $result;	}	/**	 * @param   integer  $contentId    Id of the content item being untagged	 * @param   JTable   $table        JTable object being untagged	 * @param   array    $tags         Array of tags to be untagged. Use an empty array to untag all existing tags.	 *	 * @return  boolean  true on success, otherwise false.	 *	 * @since   3.1	 */	public function unTagItem($contentId, $table, $tags = array())	{		$key = $table->getKeyName();		$id = $table->$key;		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->delete('#__contentitem_tag_map')			->where($db->quoteName('type_alias') . ' = ' . $db->quote($this->typeAlias))			->where($db->quoteName('content_item_id') . ' = ' . (int) $id);		if (is_array($tags) && count($tags) > 0)		{			$query->where($db->quoteName('tag_id') . ' IN ' . implode(',', $tags));		}		$db->setQuery($query);		return (boolean) $db->execute();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of redirect links. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectModelLinks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'old_url', 'a.old_url',				'new_url', 'a.new_url',				'referer', 'a.referer',				'hits', 'a.hits',				'created_date', 'a.created_date',				'published', 'a.published',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		// Load the parameters.		$params = JComponentHelper::getParams('com_redirect');		$this->setState('params', $params);		// List state information.		parent::populateState('a.old_url', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.state');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.*'			)		);		$query->from($db->quoteName('#__redirect_links') . ' AS a');		// Filter by published state		$state = $this->getState('filter.state');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);		}		elseif ($state === '')		{			$query->where('(a.published IN (0,1,2))');		}		// Filter the items over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where(					'(' . $db->quoteName('old_url') . ' LIKE ' . $search .						' OR ' . $db->quoteName('new_url') . ' LIKE ' . $search .						' OR ' . $db->quoteName('comment') . ' LIKE ' . $search .						' OR ' . $db->quoteName('referer') . ' LIKE ' . $search . ')'				);			}		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.old_url')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with system * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlSystem{	/**	 * Method to generate a string message for a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 */	public static function server($val)	{		if (empty($val))		{			return JText::_('COM_ADMIN_NA');		}		else		{			return $val;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Message Table class * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.5 */class MessagesTableMessage extends JTable{	/**	 * Constructor	 *	 * @param database A database connector object	 */	public function __construct(& $db)	{		parent::__construct('#__messages', 'message_id', $db);	}	/**	 * Validation and filtering.	 *	 * @return  boolean	 */	public function check()	{		// Check the to and from users.		$user = new JUser($this->user_id_from);		if (empty($user->id))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_FROM_USER'));			return false;		}		$user = new JUser($this->user_id_to);		if (empty($user->id))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_TO_USER'));			return false;		}		if (empty($this->subject))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_SUBJECT'));			return false;		}		if (empty($this->message))		{			$this->setError(JText::_('COM_MESSAGES_ERROR_INVALID_MESSAGE'));			return false;		}		return true;	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.' IN ('.implode(',', $pks).')';		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl).			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')'		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/extension.php';/** * Installer Manage Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelDiscover extends InstallerModel{	protected $_context = 'com_installer.discover';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Method to get the database query.	 *	 * @return  JDatabaseQuery  the database query	 *	 * @since   1.6	 */	protected function getListQuery()	{		$db		= JFactory::getDbo();		$query = $db->getQuery(true)			->select('*')			->from('#__extensions')			->where('state=-1');		return $query;	}	/**	 * Discover extensions.	 *	 * Finds uninstalled extensions	 *	 * @return  void	 *	 * @since   1.6	 */	public function discover()	{		// Purge the list of discovered extensions		$this->purge();		$installer	= JInstaller::getInstance();		$results	= $installer->discover();		// Get all templates, including discovered ones		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('extension_id, element, folder, client_id, type')			->from('#__extensions');		$db->setQuery($query);		$installedtmp = $db->loadObjectList();		$extensions = array();		foreach ($installedtmp as $install)		{			$key = implode(':', array($install->type, $install->element, $install->folder, $install->client_id));			$extensions[$key] = $install;		}		unset($installedtmp);		foreach ($results as $result)		{			// Check if we have a match on the element			$key = implode(':', array($result->type, $result->element, $result->folder, $result->client_id));			if (!array_key_exists($key, $extensions))			{				// Put it into the table				$result->store();			}		}	}	/**	 * Installs a discovered extension.	 *	 * @return  void	 *	 * @since   1.6	 */	public function discover_install()	{		$app = JFactory::getApplication();		$installer = JInstaller::getInstance();		$eid = JRequest::getVar('cid', 0);		if (is_array($eid) || $eid)		{			if (!is_array($eid))			{				$eid = array($eid);			}			JArrayHelper::toInteger($eid);			$app = JFactory::getApplication();			$failed = false;			foreach ($eid as $id)			{				$result = $installer->discover_install($id);				if (!$result)				{					$failed = true;					$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_INSTALLFAILED') . ': ' . $id);				}			}			$this->setState('action', 'remove');			$this->setState('name', $installer->get('name'));			$app->setUserState('com_installer.message', $installer->message);			$app->setUserState('com_installer.extension_message', $installer->get('extension_message'));			if (!$failed)			{				$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_INSTALLSUCCESSFUL'));			}		}		else		{			$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_NOEXTENSIONSELECTED'));		}	}	/**	 * Cleans out the list of discovered extensions.	 *	 * @return  bool True on success	 *	 * @since   1.6	 */	public function purge()	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->delete('#__extensions')			->where('state = -1');		$db->setQuery($query);		if ($db->execute())		{			$this->_message = JText::_('COM_INSTALLER_MSG_DISCOVER_PURGEDDISCOVEREDEXTENSIONS');			return true;		}		else		{			$this->_message = JText::_('COM_INSTALLER_MSG_DISCOVER_FAILEDTOPURGEEXTENSIONS');			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();JHtml::_('behavior.noframes');$lang = JFactory::getLanguage();$doc	= JFactory::getDocument();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" ><head><jdoc:include type="head" /><!-- Load additional CSS styles for Internet Explorer --><!--[if IE 7]>	<link href="templates/<?php echo  $this->template ?>/css/ie7.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--><!-- Load Template JavaScript --><script type="text/javascript" src="templates/<?php  echo  $this->template  ?>/js/template.js"></script></head><body id="login-page">	<div id="containerwrap">		<!-- Header Logo -->		<div id="header">			<h1 class="title"><?php echo $this->params->get('showSiteName') ? $app->getCfg('sitename') . " " . JText::_('JADMINISTRATION') : JText::_('JADMINISTRATION'); ?></h1>		</div><!-- end header -->		<!-- Content Area -->		<div id="content">			<!-- Beginning of Actual Content -->			<div id="element-box" class="login">				<div class="pagetitle"><h2><?php echo JText::_('COM_LOGIN_JOOMLA_ADMINISTRATION_LOGIN') ?></h2></div>					<!-- System Messages -->					<jdoc:include type="message" />					<div class="login-inst">					<p><?php echo JText::_('COM_LOGIN_VALID') ?></p>					<div id="lock"></div>					<a href="<?php echo JURI::root(); ?>"><?php echo JText::_('COM_LOGIN_RETURN_TO_SITE_HOME_PAGE') ?></a>					</div>					<!-- Login Component -->					<div class="login-box">						<jdoc:include type="component" />					</div>				<div class="clr"></div>			</div><!-- end element-box -->		<noscript>			<?php echo JText::_('JGLOBAL_WARNJAVASCRIPT') ?>		</noscript>		</div><!-- end content -->		<div class="clr"></div>	</div><!-- end of containerwrap -->	<!-- Footer -->	<div id="footer">		<p class="copyright">			<?php $joomla = '<a href="http://www.joomla.org">Joomla!&#174;</a>';			echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla) ?>		</p>	</div></body></html>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Frontpage View class * * @package     Joomla.Site * @subpackage  com_contact * @since       1.6 */class ContactViewFeatured extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $categories;	protected $pagination;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Check whether category access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		// Prepare the data.		// Compute the contact slug.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			$temp		= new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);			if ($item->params->get('show_email', 0) == 1)			{				$item->email_to = trim($item->email_to);				if (!empty($item->email_to) && JMailHelper::isEmailAddress($item->email_to))				{					$item->email_to = JHtml::_('email.cloak', $item->email_to);				} else {					$item->email_to = '';				}			}		}		// Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$maxLevel         = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';JHtml::_('bootstrap.tooltip');$item = $displayData->item;$items = $displayData->get('items');$params = $displayData->params;$extension = $displayData->get('extension');$className = substr($extension, 4);// This will work for the core components but not necessarily for other components// that may have different pluralisation rules.if (substr($className, -1) == 's'){	$className = rtrim($className, 's');}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Install View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerViewInstall extends InstallerViewDefault{	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.5	 */	public function display($tpl = null)	{		$paths = new stdClass;		$paths->first = '';		$state = $this->get('state');		$this->paths = &$paths;		$this->state = &$state;		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		parent::addToolbar();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_INSTALL');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a redirect link. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectViewLink extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$canDo		= RedirectHelper::getActions();		JToolbarHelper::title(JText::_('COM_REDIRECT_MANAGER_LINK'), 'redirect');		// If not checked out, can save the item.		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('link.apply');			JToolbarHelper::save('link.save');		}		// This component does not support Save as Copy due to uniqueness checks.		// While it can be done, it causes too much confusion if the user does		// not change the Old URL.		if ($canDo->get('core.edit') && $canDo->get('core.create'))		{			JToolbarHelper::save2new('link.save2new');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('link.cancel');		}		else		{			JToolbarHelper::cancel('link.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::help('JHELP_COMPONENTS_REDIRECT_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class JFormFieldCategoryEdit extends JFormFieldList{	/**	 * A flexible category list that respects access controls	 *	 * @var        string	 * @since   1.6	 */	public $type = 'CategoryEdit';	/**	 * Method to get a list of categories that respects access controls and can be used for	 * either category assignment or parent category assignment in edit screens.	 * Use the parent element to indicate that the field will be used for assigning parent categories.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$published = $this->element['published'] ? $this->element['published'] : array(0, 1);		$name = (string) $this->element['name'];		// Let's get the id for the current item, either category or content item.		$jinput = JFactory::getApplication()->input;		// Load the category options for a given extension.		// For categories the old category is the category id or 0 for new category.		if ($this->element['parent'] || $jinput->get('option') == 'com_categories')		{			$oldCat = $jinput->get('id', 0);			$oldParent = $this->form->getValue($name, 0);			$extension = $this->element['extension'] ? (string) $this->element['extension'] : (string) $jinput->get('extension', 'com_content');		}		else			// For items the old category is the category they are in when opened or 0 if new.		{			$thisItem = $jinput->get('id', 0);			$oldCat = $this->form->getValue($name, 0);			$extension = $this->element['extension'] ? (string) $this->element['extension'] : (string) $jinput->get('option', 'com_content');		}		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level, a.published')			->from('#__categories AS a')			->join('LEFT', $db->quoteName('#__categories') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Filter by the extension type		if ($this->element['parent'] == true || $jinput->get('option') == 'com_categories')		{			$query->where('(a.extension = ' . $db->quote($extension) . ' OR a.parent_id = 0)');		}		else		{			$query->where('(a.extension = ' . $db->quote($extension) . ')');		}		// If parent isn't explicitly stated but we are in com_categories assume we want parents		if ($oldCat != 0 && ($this->element['parent'] == true || $jinput->get('option') == 'com_categories'))		{			// Prevent parenting to children of this item.			// To rearrange parents and children move the children up, not the parents down.			$query->join('LEFT', $db->quoteName('#__categories') . ' AS p ON p.id = ' . (int) $oldCat)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');			$rowQuery = $db->getQuery(true);			$rowQuery->select('a.id AS value, a.title AS text, a.level, a.parent_id')				->from('#__categories AS a')				->where('a.id = ' . (int) $oldCat);			$db->setQuery($rowQuery);			$row = $db->loadObject();		}		// Filter language		if (!empty($this->element['language']))		{			$query->where('a.language = ' . $db->quote($this->element['language']));		}		// Filter on the published state		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif (is_array($published))		{			JArrayHelper::toInteger($published);			$query->where('a.published IN (' . implode(',', $published) . ')');		}		$query->group('a.id, a.title, a.level, a.lft, a.rgt, a.extension, a.parent_id, a.published')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage);		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			// Translate ROOT			if ($this->element['parent'] == true || $jinput->get('option') == 'com_categories')			{				if ($options[$i]->level == 0)				{					$options[$i]->text = JText::_('JGLOBAL_ROOT_PARENT');				}			}			if ($options[$i]->published == 1)			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;			}			else			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . '[' . $options[$i]->text . ']';			}		}		// Get the current user object.		$user = JFactory::getUser();		// For new items we want a list of categories you are allowed to create in.		if ($oldCat == 0)		{			foreach ($options as $i => $option)			{				// To take save or create in a category you need to have create rights for that category				// unless the item is already in that category.				// Unset the option if the user isn't authorised for it. In this field assets are always categories.				if ($user->authorise('core.create', $extension . '.category.' . $option->value) != true)				{					unset($options[$i]);				}			}		}		// If you have an existing category id things are more complex.		else		{			// If you are only allowed to edit in this category but not edit.state, you should not get any			// option to change the category parent for a category or the category for a content item,			// but you should be able to save in that category.			foreach ($options as $i => $option)			{				if ($user->authorise('core.edit.state', $extension . '.category.' . $oldCat) != true && !isset($oldParent))				{					if ($option->value != $oldCat)					{						unset($options[$i]);					}				}				if ($user->authorise('core.edit.state', $extension . '.category.' . $oldCat) != true					&& (isset($oldParent))					&& $option->value != $oldParent				)				{					unset($options[$i]);				}				// However, if you can edit.state you can also move this to another category for which you have				// create permission and you should also still be able to save in the current category.				if (($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					&& ($option->value != $oldCat && !isset($oldParent))				)				{					{						unset($options[$i]);					}				}				if (($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					&& (isset($oldParent))					&& $option->value != $oldParent				)				{					{						unset($options[$i]);					}				}			}		}		if (($this->element['parent'] == true || $jinput->get('option') == 'com_categories')			&& (isset($row) && !isset($options[0]))			&& isset($this->element['show_root'])		)		{			if ($row->parent_id == '1')			{				$parent = new stdClass;				$parent->text = JText::_('JGLOBAL_ROOT_PARENT');				array_unshift($options, $parent);			}			array_unshift($options, JHtml::_('select.option', '0', JText::_('JGLOBAL_ROOT')));		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT_ADMINISTRATOR.'/models/weblink.php';/** * Weblinks model. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.6 */class WeblinksModelForm extends WeblinksModelWeblink{	/**	 * Get the return URL.	 *	 * @return  string	The return URL.	 * @since   1.6	 */	public function getReturnPage()	{		return base64_encode($this->getState('return_page'));	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication();		// Load state from the request.		$pk = $app->input->getInt('w_id');		$this->setState('weblink.id', $pk);		// Add compatibility variable for default naming conventions.		$this->setState('form.id', $pk);		$categoryId	= $app->input->getInt('catid');		$this->setState('weblink.catid', $categoryId);		$return = $app->input->get('return', null, 'base64');		if (!JUri::isInternal(base64_decode($return)))		{			$return = null;		}		$this->setState('return_page', base64_decode($return));		// Load the parameters.		$params	= $app->getParams();		$this->setState('params', $params);		$this->setState('layout', $app->input->get('layout'));	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags table * * @package     Joomla.Libraries * @subpackage  Table * @since       3.1 */class JTableContenttype extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   3.1	 */	public function __construct($db)	{		parent::__construct('#__content_types', 'type_id', $db);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function check()	{		// Check for valid name.		if (trim($this->type_title) == '')		{			throw new UnexpectedValueException(sprintf('The title is empty'));		}		$this->type_title = ucfirst($this->type_title);		if (empty($this->type_alias))		{			throw new UnexpectedValueException(sprintf('The type_alias is empty'));		}		return true;	}	/**	 * Overridden JTable::store.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function store($updateNulls = false)	{		// Verify that the alias is unique		$table = JTable::getInstance('Contenttype', 'JTable');		if ($table->load(array('type_alias' => $this->type_alias)) && ($table->type_id != $this->type_id || $this->type_id == 0))		{			$this->setError(JText::_('COM_TAGS_ERROR_UNIQUE_ALIAS'));			return false;		}		return parent::store($updateNulls);	}	/**	 * Method to expand the field mapping	 *	 * @param   boolean  $assoc  True to return an associative array.	 *	 * @return  mixed  Array or object with field mappings. Defaults to object.	 *	 * @since   3.1	 */	public function fieldmapExpand($assoc = true)	{		return $this->fieldmap = json_decode($this->fieldmappings, $assoc);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('BannersHelper', JPATH_COMPONENT.'/helpers/banners.php');/** * View to edit a banner. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersViewBanner extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Initialiase variables.		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Since we don't track these assets at the item level, use the category id.		$canDo		= BannersHelper::getActions($this->item->catid, 0);		JToolbarHelper::title($isNew ? JText::_('COM_BANNERS_MANAGER_BANNER_NEW') : JText::_('COM_BANNERS_MANAGER_BANNER_EDIT'), 'banners.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit') || count($user->getAuthorisedCategories('com_banners', 'core.create')) > 0))		{			JToolbarHelper::apply('banner.apply');			JToolbarHelper::save('banner.save');			if ($canDo->get('core.create'))			{				JToolbarHelper::save2new('banner.save2new');			}		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('banner.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('banner.cancel');		}		else		{			JToolbarHelper::cancel('banner.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_BANNERS_EDIT');	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Contains a set of JSchemaChange objects for a particular instance of Joomla. * Each of these objects contains a DDL query that should have been run against * the database when this database was created or updated. This enables the * Installation Manager to check that the current database schema is up to date. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeset{	/**	 * Array of JSchemaChangeitem objects	 *	 * @var    array	 * @since  2.5	 */	protected $changeItems = array();	/**	 * JDatabaseDriver object	 *	 * @var    JDatabaseDriver	 * @since  2.5	 */	protected $db = null;	/**	 * Folder where SQL update files will be found	 *	 * @var    string	 */	protected $folder = null;	/**	 * Constructor: builds array of $changeItems by processing the .sql files in a folder.	 * The folder for the Joomla core updates is administrator/components/com_admin/sql/updates/<database>.	 *	 * @param   JDatabaseDriver  $db      The current database object	 * @param   string           $folder  The full path to the folder containing the update queries	 *	 * @since   2.5	 */	public function __construct($db, $folder = null)	{		$this->db = $db;		$this->folder = $folder;		$updateFiles = $this->getUpdateFiles();		$updateQueries = $this->getUpdateQueries($updateFiles);		foreach ($updateQueries as $obj)		{			$this->changeItems[] = JSchemaChangeitem::getInstance($db, $obj->file, $obj->updateQuery);		}	}	/**	 * Returns a reference to the JSchemaChangeset object, only creating it if it doesn't already exist.	 *	 * @param   JDatabaseDriver  $db      The current database object	 * @param   string           $folder  The full path to the folder containing the update queries	 *	 * @return  JSchemaChangeset	 *	 * @since   2.5	 */	public static function getInstance($db, $folder)	{		static $instance;		if (!is_object($instance))		{			$instance = new JSchemaChangeset($db, $folder);		}		return $instance;	}	/**	 * Checks the database and returns an array of any errors found.	 * Note these are not database errors but rather situations where	 * the current schema is not up to date.	 *	 * @return   array Array of errors if any.	 *	 * @since    2.5	 */	public function check()	{		$errors = array();		foreach ($this->changeItems as $item)		{			if ($item->check() === -2)			{				// Error found				$errors[] = $item;			}		}		return $errors;	}	/**	 * Runs the update query to apply the change to the database	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		$this->check();		foreach ($this->changeItems as $item)		{			$item->fix();		}	}	/**	* Returns an array of results for this set	*	* @return  array  associative array of changeitems grouped by unchecked, ok, error, and skipped	*	* @since   2.5	*/	public function getStatus()	{		$result = array('unchecked' => array(), 'ok' => array(), 'error' => array(), 'skipped' => array());		foreach ($this->changeItems as $item)		{			switch ($item->checkStatus)			{				case 0:					$result['unchecked'][] = $item;					break;				case 1:					$result['ok'][] = $item;					break;				case -2:					$result['error'][] = $item;					break;				case -1:					$result['skipped'][] = $item;					break;			}		}		return $result;	}	/**	 * Gets the current database schema, based on the highest version number.	 * Note that the .sql files are named based on the version and date, so	 * the file name of the last file should match the database schema version	 * in the #__schemas table.	 *	 * @return  string  the schema version for the database	 *	 * @since   2.5	 */	public function getSchema()	{		$updateFiles = $this->getUpdateFiles();		$result = new SplFileInfo(array_pop($updateFiles));		return $result->getBasename('.sql');	}	/**	 * Get list of SQL update files for this database	 *	 * @return  array  list of sql update full-path names	 *	 * @since   2.5	 */	private function getUpdateFiles()	{		// Get the folder from the database name		$sqlFolder = $this->db->name;		if ($sqlFolder == 'mysqli')		{			$sqlFolder = 'mysql';		}		elseif ($sqlFolder == 'sqlsrv')		{			$sqlFolder = 'sqlazure';		}		// Default folder to core com_admin		if (!$this->folder)		{			$this->folder = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		}		return JFolder::files($this->folder . '/' . $sqlFolder, '\.sql$', 1, true);	}	/**	 * Get array of SQL queries	 *	 * @param   array  $sqlfiles  Array of .sql update filenames.	 *	 * @return  array  Array of stdClass objects where:	 *                    file=filename,	 *                    update_query = text of SQL update query	 *	 * @since   2.5	 */	private function getUpdateQueries(array $sqlfiles)	{		// Hold results as array of objects		$result = array();		foreach ($sqlfiles as $file)		{			$buffer = file_get_contents($file);			// Create an array of queries from the sql file			$queries = JDatabaseDriver::splitSql($buffer);			foreach ($queries as $query)			{				if (trim($query))				{					$fileQueries = new stdClass;					$fileQueries->file = $file;					$fileQueries->updateQuery = $query;					$result[] = $fileQueries;				}			}		}		return $result;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Query Helper * * @static * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentHelperQuery{	/**	 * Translate an order code to a field for primary category ordering.	 *	 * @param   string	$orderby	The ordering code.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.5	 */	public static function orderbyPrimary($orderby)	{		switch ($orderby)		{			case 'alpha' :				$orderby = 'c.path, ';				break;			case 'ralpha' :				$orderby = 'c.path DESC, ';				break;			case 'order' :				$orderby = 'c.lft, ';				break;			default :				$orderby = '';				break;		}		return $orderby;	}	/**	 * Translate an order code to a field for secondary category ordering.	 *	 * @param   string	$orderby	The ordering code.	 * @param   string	$orderDate	The ordering code for the date.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.5	 */	public static function orderbySecondary($orderby, $orderDate = 'created')	{		$queryDate = self::getQueryDate($orderDate);		switch ($orderby)		{			case 'date' :				$orderby = $queryDate;				break;			case 'rdate' :				$orderby = $queryDate . ' DESC ';				break;			case 'alpha' :				$orderby = 'a.title';				break;			case 'ralpha' :				$orderby = 'a.title DESC';				break;			case 'hits' :				$orderby = 'a.hits DESC';				break;			case 'rhits' :				$orderby = 'a.hits';				break;			case 'order' :				$orderby = 'a.ordering';				break;			case 'author' :				$orderby = 'author';				break;			case 'rauthor' :				$orderby = 'author DESC';				break;			case 'front' :				$orderby = 'a.featured DESC, fp.ordering';				break;			default :				$orderby = 'a.ordering';				break;		}		return $orderby;	}	/**	 * Translate an order code to a field for primary category ordering.	 *	 * @param   string	$orderDate	The ordering code.	 *	 * @return  string	The SQL field(s) to order by.	 * @since   1.6	 */	public static function getQueryDate($orderDate)	{		$db = JFactory::getDbo();		switch ($orderDate)		{			case 'modified' :				$queryDate = ' CASE WHEN a.modified = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.modified END';				break;			// use created if publish_up is not set			case 'published' :				$queryDate = ' CASE WHEN a.publish_up = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.publish_up END ';				break;			case 'created' :			default :				$queryDate = ' a.created ';				break;		}		return $queryDate;	}	/**	 * Get join information for the voting query.	 *	 * @param   JRegistry	$param	An options object for the article.	 *	 * @return  array  	A named array with "select" and "join" keys.	 * @since   1.5	 */	public static function buildVotingQuery($params=null)	{		if (!$params)		{			$params = JComponentHelper::getParams('com_content');		}		$voting = $params->get('show_vote');		if ($voting)		{			// calculate voting count			$select = ' , ROUND(v.rating_sum / v.rating_count) AS rating, v.rating_count';			$join = ' LEFT JOIN #__content_rating AS v ON a.id = v.content_id';		}		else		{			$select = '';			$join = '';		}		$results = array ('select' => $select, 'join' => $join);		return $results;	}	/**	 * Method to order the intro articles array for ordering	 * down the columns instead of across.	 * The layout always lays the introtext articles out across columns.	 * Array is reordered so that, when articles are displayed in index order	 * across columns in the layout, the result is that the	 * desired article ordering is achieved down the columns.	 *	 * @param   array  $articles	Array of intro text articles	 * @param   integer	$numColumns	Number of columns in the layout	 *	 * @return  array  Reordered array to achieve desired ordering down columns	 * @since   1.6	 */	public static function orderDownColumns(&$articles, $numColumns = 1)	{		$count = count($articles);		// just return the same array if there is nothing to change		if ($numColumns == 1 || !is_array($articles) || $count <= $numColumns)		{			$return = $articles;		}		// we need to re-order the intro articles array		else {			// we need to preserve the original array keys			$keys = array_keys($articles);			$maxRows = ceil($count / $numColumns);			$numCells = $maxRows * $numColumns;			$numEmpty = $numCells - $count;			$index = array();			// calculate number of empty cells in the array			// fill in all cells of the array			// put -1 in empty cells so we can skip later			for ($row = 1, $i = 1; $row <= $maxRows; $row++)			{				for ($col = 1; $col <= $numColumns; $col++)				{					if ($numEmpty > ($numCells - $i))					{						// put -1 in empty cells						$index[$row][$col] = -1;					}					else {						// put in zero as placeholder						$index[$row][$col] = 0;					}					$i++;				}			}			// layout the articles in column order, skipping empty cells			$i = 0;			for ($col = 1; ($col <= $numColumns) && ($i < $count); $col++)			{				for ($row = 1; ($row <= $maxRows) && ($i < $count); $row++)				{					if ($index[$row][$col] != - 1)					{						$index[$row][$col] = $keys[$i];						$i++;					}				}			}			// now read the $index back row by row to get articles in right row/col			// so that they will actually be ordered down the columns (when read by row in the layout)			$return = array();			$i = 0;			for ($row = 1; ($row <= $maxRows) && ($i < $count); $row++)			{				for ($col = 1; ($col <= $numColumns) && ($i < $count); $col++)				{					$return[$keys[$i]] = $articles[$index[$row][$col]];					$i++;				}			}		}		return $return;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefaultlanguageHtml $this */?><?php echo JHtml::_('installation.stepbarlanguages'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a				class="btn"				href="#"				onclick="return Install.goToPage('languages');"				rel="prev"				title="<?php echo JText::_('JPREVIOUS'); ?>">				<i class="icon-arrow-left"></i>				<?php echo JText::_('JPREVIOUS'); ?>			</a>			<?php			// Check if ther is any languages to list, if not you cannot move forward			if ($this->items->administrator) :				?>				<a					class="btn btn-primary"					href="#"					onclick="Install.submitform();"					rel="next"					title="<?php echo JText::_('JNEXT'); ?>">					<i class="icon-arrow-right icon-white"></i>					<?php echo JText::_('JNEXT'); ?>				</a>				<?php endif; ?>		</div>	</div>	<h3><?php echo JText::_('INSTL_DEFAULTLANGUAGE_ADMINISTRATOR'); ?></h3>	<hr class="hr-condensed" />	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_DESC'); ?></p>	<table class="table table-striped table-condensed">		<tbody>		<tr>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_SELECT'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_LANGUAGE'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_TAG'); ?>			</th>		</tr>		</tbody>		<tbody>			<?php foreach ($this->items->administrator as $lang) : ?>			<tr>				<td>					<input						type="radio"						name="administratorlang"						value="<?php echo $lang->language; ?>"						<?php if ($lang->published) echo 'checked="checked"'; ?>					/>				</td>				<td align="center">					<?php echo $lang->name; ?>				</td>				<td align="center">					<?php echo $lang->language; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<h3><?php echo JText::_('INSTL_DEFAULTLANGUAGE_FRONTEND'); ?></h3>	<hr class="hr-condensed" />	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_DESC_FRONTEND'); ?></p>	<table class="table table-striped table-condensed">		<tbody>		<tr>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_SELECT'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_LANGUAGE'); ?>			</th>			<th>				<?php echo JText::_('INSTL_DEFAULTLANGUAGE_COLUMN_HEADER_TAG'); ?>			</th>		</tr>		</tbody>		<tbody>		<?php foreach ($this->items->frontend as $lang) : ?>		<tr>			<td>				<input					type="radio"					name="frontendlang"					value="<?php echo $lang->language; ?>"					<?php if ($lang->published) echo 'checked="checked"'; ?>				/>			</td>			<td align="center">				<?php echo $lang->name; ?>			</td>			<td align="center">				<?php echo $lang->language; ?>			</td>		</tr>			<?php endforeach; ?>		</tbody>	</table>	<p><?php echo JText::_('INSTL_DEFAULTLANGUAGE_NOTE'); ?></p>	<input type="hidden" name="task" value="setdefaultlanguage" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Smart download helper. Automatically uses cURL or URL fopen() wrappers to * fetch the package. * * @package  Joomla.Administrator * @since    2.5.4 */class AdmintoolsHelperDownload{	/**	 * Downloads from a URL and saves the result as a local file	 *	 * @param   string  $url     The URL to download from	 * @param   string  $target  The file path to download to	 *	 * @return  bool	True on success	 *	 * @since   2.5.4	 */	public static function download($url, $target)	{		jimport('joomla.filesystem.file');		$hackPermissions = false;		// Make sure the target does not exist		if (JFile::exists($target))		{			if (!@unlink($target))			{				JFile::delete($target);			}		}		// Try to open the output file for writing		$fp = @fopen($target, 'wb');		if ($fp === false)		{			// The file can not be opened for writing. Let's try a hack.			$empty = '';			if ( JFile::write($target, $empty) )			{				if ( self::chmod($target, 511) )				{					$fp = @fopen($target, 'wb');					$hackPermissions = true;				}			}		}		$result = false;		if ($fp !== false)		{			// First try to download directly to file if $fp !== false			$adapters = self::getAdapters();			$result = false;			while (!empty($adapters) && ($result === false))			{				// Run the current download method				$method = 'get' . strtoupper(array_shift($adapters));				$result = self::$method($url, $fp);				// Check if we have a download				if ($result === true)				{					// The download is complete, close the file pointer					@fclose($fp);					// If the filesize is not at least 1 byte, we consider it failed.					clearstatcache();					$filesize = @filesize($target);					if ($filesize <= 0)					{						$result = false;						$fp = @fopen($target, 'wb');					}				}			}			// If we have no download, close the file pointer			if ($result === false)			{				@fclose($fp);			}		}		if ($result === false)		{			// Delete the target file if it exists			if (file_exists($target))			{				if ( !@unlink($target) )				{					JFile::delete($target);				}			}			// Download and write using JFile::write();			$result = JFile::write($target, self::downloadAndReturn($url));		}		return $result;	}	/**	 * Downloads from a URL and returns the result as a string	 *	 * @param   string  $url  The URL to download from	 *	 * @return  mixed Result string on success, false on failure	 *	 * @since   2.5.4	 */	public static function downloadAndReturn($url)	{		$adapters = self::getAdapters();		$result = false;		while (!empty($adapters) && ($result === false))		{			// Run the current download method			$method = 'get' . strtoupper(array_shift($adapters));			$result = self::$method($url, null);		}		return $result;	}	/**	 * Does the server support PHP's cURL extension?	 *	 * @return  bool True if it is supported	 *	 * @since   2.5.4	 */	private static function hasCURL()	{		static $result = null;		if (is_null($result))		{			$result = function_exists('curl_init');		}		return $result;	}	/**	 * Downloads the contents of a URL and writes them to disk (if $fp is not null)	 * or returns them as a string (if $fp is null)	 *	 * @param   string    $url       The URL to download from	 * @param   resource  $fp        The file pointer to download to. Omit to return the contents.	 * @param   boolean   $nofollow  Should we follow 301/302/307 redirection HTTP headers?	 *	 * @return   bool|string False on failure, true on success ($fp not null) or the URL contents (if $fp is null)	 *	 * @since   2.5.4	 */	private static function &getCURL($url, $fp = null, $nofollow = false)	{		$result = false;		$ch = curl_init($url);		if ( !@curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1) && !$nofollow )		{			// Safe Mode is enabled. We have to fetch the headers and			// parse any redirections present in there.			curl_setopt($ch, CURLOPT_AUTOREFERER, true);			curl_setopt($ch, CURLOPT_FAILONERROR, true);			curl_setopt($ch, CURLOPT_HEADER, true);			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);			curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);			curl_setopt($ch, CURLOPT_TIMEOUT, 30);			// Get the headers			$data = curl_exec($ch);			curl_close($ch);			// Init			$newURL = $url;			// Parse the headers			$lines = explode("\n", $data);			foreach ($lines as $line)			{				if (substr($line, 0, 9) == "Location:")				{					$newURL = trim(substr($line, 9));				}			}			if ($url != $newURL)			{				return self::getCURL($newURL, $fp);			}			else			{				return self::getCURL($newURL, $fp, true);			}		}		else		{			@curl_setopt($ch, CURLOPT_MAXREDIRS, 20);			if (function_exists('set_time_limit'))			{				set_time_limit(0);			}		}		curl_setopt($ch, CURLOPT_HEADER, 0);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);		curl_setopt($ch, CURLOPT_USERAGENT, 'Joomla/' . JVERSION);		if (is_resource($fp))		{			curl_setopt($ch, CURLOPT_FILE, $fp);		}		else		{			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);		}		$result = curl_exec($ch);		curl_close($ch);		return $result;	}	/**	 * Does the server support URL fopen() wrappers?	 *	 * @return  bool	 *	 * @since   2.5.4	 */	private static function hasFOPEN()	{		static $result = null;		if (is_null($result))		{			// If we are not allowed to use ini_get, we assume that URL fopen is			// disabled.			if (!function_exists('ini_get'))			{				$result = false;			}			else			{				$result = ini_get('allow_url_fopen');			}		}		return $result;	}	/**	 * Download from a URL using URL fopen() wrappers	 *	 * @param   string    $url  The URL to download from	 * @param   resource  $fp   The file pointer to download to; leave null to return the d/l file as a string	 *	 * @return  bool|string False on failure, true on success ($fp not null) or the URL contents (if $fp is null)	 *	 * @since   2.5.4	 */	private static function &getFOPEN($url, $fp = null)	{		$result = false;		// Track errors		if ( function_exists('ini_set') )		{			$track_errors = ini_set('track_errors', true);		}		// Open the URL for reading		if (function_exists('stream_context_create'))		{			$httpopts = array('user_agent' => 'Joomla/' . JVERSION);			$context = stream_context_create(array( 'http' => $httpopts ));			$ih = @fopen($url, 'r', false, $context);		}		else		{			// PHP 4 way (actually, it's just a fallback)			if ( function_exists('ini_set') )			{				ini_set('user_agent', 'Joomla/' . JVERSION);			}			$ih = @fopen($url, 'r');		}		// If fopen() fails, abort		if ( !is_resource($ih) )		{			return $result;		}		// Try to download		$bytes = 0;		$result = true;		$return = '';		while (!feof($ih) && $result)		{			$contents = fread($ih, 4096);			if ($contents === false)			{				@fclose($ih);				$result = false;				return $result;			}			else			{				$bytes += strlen($contents);				if (is_resource($fp))				{					$result = @fwrite($fp, $contents);				}				else				{					$return .= $contents;					unset($contents);				}			}		}		@fclose($ih);		if (is_resource($fp))		{			return $result;		}		elseif ( $result === true )		{			return $return;		}		else		{			return $result;		}	}	/**	 * Detect and return available download "adapters" (not really adapters, as	 * we don't follow the Adapter pattern, yet)	 *	 * @return  array	 *	 * @since   2.5.4	 */	private static function getAdapters()	{		// Detect available adapters		$adapters = array();		if (self::hasCURL())		{			$adapters[] = 'curl';		}		if (self::hasFOPEN())		{			$adapters[] = 'fopen';		}		return $adapters;	}	/**	 * Change the permissions of a file, optionally using FTP	 *	 * @param   string  $path  Absolute path to file	 * @param   int     $mode  Permissions, e.g. 0755	 *	 * @return  boolean True on success	 *	 * @since   2.5.4	 */	private static function chmod($path, $mode)	{		if (is_string($mode))		{			$mode = octdec($mode);			if ( ($mode < 0600) || ($mode > 0777) )			{				$mode = 0755;			}		}		$ftpOptions = JClientHelper::getCredentials('ftp');		// Check to make sure the path valid and clean		$path = JPath::clean($path);		if ($ftpOptions['enabled'] == 1)		{			// Connect the FTP client			$ftp = JClientFtp::getInstance(				$ftpOptions['host'], $ftpOptions['port'], null,				$ftpOptions['user'], $ftpOptions['pass']			);		}		if (@chmod($path, $mode))		{			$ret = true;		}		elseif ($ftpOptions['enabled'] == 1)		{			// Translate path and delete			$path = JPath::clean(str_replace(JPATH_ROOT, $ftpOptions['root'], $path), '/');			// FTP connector throws an error			$ret = $ftp->chmod($path, $mode);		} else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');JHtml::_('behavior.tooltip');if (isset($this->error)) : ?>	<div class="contact-error">		<?php echo $this->error; ?>	</div><?php endif; ?><div class="contact-form">	<form id="contact-form" action="<?php echo JRoute::_('index.php'); ?>" method="post" class="form-validate form-horizontal">		<fieldset>			<legend><?php echo JText::_('COM_CONTACT_FORM_LABEL'); ?></legend>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_name'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_name'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_email'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_email'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_subject'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_subject'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('contact_message'); ?></div>				<div class="controls"><?php echo $this->form->getInput('contact_message'); ?></div>			</div>				<?php 	if ($this->params->get('show_email_copy')){ ?>					<div class="control-group">						<div class="control-label"><?php echo $this->form->getLabel('contact_email_copy'); ?></div>						<div class="controls"><?php echo $this->form->getInput('contact_email_copy'); ?></div>					</div>				<?php 	} ?>			<?php //Dynamically load any additional fields from plugins. ?>			     <?php foreach ($this->form->getFieldsets() as $fieldset) : ?>			          <?php if ($fieldset->name != 'contact'):?>			               <?php $fields = $this->form->getFieldset($fieldset->name);?>			               <?php foreach ($fields as $field) : ?>			               	<div class="control-group">			                    <?php if ($field->hidden) : ?>			                    	<div class="controls">			                         <?php echo $field->input;?>			                        </div>			                    <?php else:?>			                         <div class="control-label">			                            <?php echo $field->label; ?>			                            <?php if (!$field->required && $field->type != "Spacer") : ?>			                               <span class="optional"><?php echo JText::_('COM_CONTACT_OPTIONAL');?></span>			                            <?php endif; ?>			                         </div>			                         <div class="controls"><?php echo $field->input;?></div>			                    <?php endif;?>			                   </div>			               <?php endforeach;?>			          <?php endif ?>			     <?php endforeach;?>				<div class="form-actions"><button class="btn btn-primary validate" type="submit"><?php echo JText::_('COM_CONTACT_CONTACT_SEND'); ?></button>					<input type="hidden" name="option" value="com_contact" />					<input type="hidden" name="task" value="contact.submit" />					<input type="hidden" name="return" value="<?php echo $this->return_page;?>" />					<input type="hidden" name="id" value="<?php echo $this->contact->slug; ?>" />					<?php echo JHtml::_('form.token'); ?>				</div>		</fieldset>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Categories List Controller * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesControllerCategories extends JControllerAdmin{	/**	 * Proxy for getModel	 *	 * @param   string	$name	The model name. Optional.	 * @param   string	$prefix	The class prefix. Optional.	 *	 * @return  object  The model.	 * @since   1.6	 */	public function getModel($name = 'Category', $prefix = 'CategoriesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Rebuild the nested set tree.	 *	 * @return  bool	False on failure or error, true on success.	 * @since   1.6	 */	public function rebuild()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$extension = $this->input->get('extension');		$this->setRedirect(JRoute::_('index.php?option=com_categories&view=categories&extension=' . $extension, false));		$model = $this->getModel();		if ($model->rebuild())		{			// Rebuild succeeded.			$this->setMessage(JText::_('COM_CATEGORIES_REBUILD_SUCCESS'));			return true;		}		else		{			// Rebuild failed.			$this->setMessage(JText::_('COM_CATEGORIES_REBUILD_FAILURE'));			return false;		}	}	/**	 * Save the manual order inputs from the categories list page.	 *	 * @return  void	 * @since   1.6	 */	public function saveorder()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			parent::saveorder();		}		else		{			// Nothing to reorder			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));			return true;		}	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the arrays from the Request		$pks   = $this->input->post->get('cid', null, 'array');		$order = $this->input->post->get('order', null, 'array');		$originalOrder = explode(',', $this->input->getString('original_order_values'));		// Make sure something has changed		if (!($order === $originalOrder))		{			// Get the model			$model = $this->getModel();			// Save the ordering			$return = $model->saveorder($pks, $order);			if ($return)			{				echo "1";			}		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Social Stream class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinStream extends JLinkedinObject{	/**	 * Method to add a new share. Note: post must contain comment and/or (title and url).	 *	 * @param   string   $visibility   One of anyone: all members or connections-only: connections only.	 * @param   string   $comment      Text of member's comment.	 * @param   string   $title        Title of shared document.	 * @param   string   $url          URL for shared content.	 * @param   string   $image        URL for image of shared content.	 * @param   string   $description  Description of shared content.	 * @param   boolean  $twitter      True to have LinkedIn pass the status message along to a member's tethered Twitter account.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 * @throws  RuntimeException	 */	public function share($visibility, $comment = null, $title = null, $url = null, $image = null, $description = null, $twitter = false)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/shares';		// Check if twitter is true.		if ($twitter)		{			$base .= '?twitter-post=true';		}		// Build xml.		$xml = '<share>				  <visibility>					 <code>' . $visibility . '</code>				  </visibility>';		// Check if comment specified.		if ($comment)		{			$xml .= '<comment>' . $comment . '</comment>';		}		// Check if title and url are specified.		if ($title && $url)		{			$xml .= '<content>					   <title>' . $title . '</title>					   <submitted-url>' . $url . '</submitted-url>';			// Check if image is specified.			if ($image)			{				$xml .= '<submitted-image-url>' . $image . '</submitted-image-url>';			}			// Check if descrption id specified.			if ($description)			{				$xml .= '<description>' . $description . '</description>';			}			$xml .= '</content>';		}		elseif (!$comment)		{			throw new RuntimeException('Post must contain comment and/or (title and url).');		}		$xml .= '</share>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to reshare an existing share.	 *	 * @param   string   $visibility  One of anyone: all members or connections-only: connections only.	 * @param   string   $id          The unique identifier for a share.	 * @param   string   $comment     Text of member's comment.	 * @param   boolean  $twitter     True to have LinkedIn pass the status message along to a member's tethered Twitter account.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 * @throws  RuntimeException	 */	public function reshare($visibility, $id, $comment = null, $twitter = false)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/shares';		// Check if twitter is true.		if ($twitter)		{			$base .= '?twitter-post=true';		}		// Build xml.		$xml = '<share>				  <visibility>					 <code>' . $visibility . '</code>				  </visibility>';		// Check if comment specified.		if ($comment)		{			$xml .= '<comment>' . $comment . '</comment>';		}		$xml .= '   <attribution>					   <share>					   	  <id>' . $id . '</id>					   </share>					</attribution>				 </share>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to get a particular member's current share.	 *	 * @param   string  $id   Member id of the profile you want.	 * @param   string  $url  The public profile URL.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getCurrentShare($id = null, $url = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if a member id is specified.		if ($id)		{			$base .= 'id=' . $id;		}		elseif (!$url)		{			$base .= '~';		}		// Check if profile url is specified.		if ($url)		{			$base .= 'url=' . $this->oauth->safeEncode($url);		}		$base .= ':(current-share)';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get a particular member's current share.	 *	 * @param   string   $id    Member id of the profile you want.	 * @param   string   $url   The public profile URL.	 * @param   boolean  $self  Used to return member's feed. Omitted to return aggregated network feed.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getShareStream($id = null, $url = null, $self = true)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if a member id is specified.		if ($id)		{			$base .= $id;		}		elseif (!$url)		{			$base .= '~';		}		// Check if profile url is specified.		if ($url)		{			$base .= 'url=' . $this->oauth->safeEncode($url);		}		$base .= '/network';		// Set request parameters.		$data['format'] = 'json';		$data['type'] = 'SHAR';		// Check if self is true		if ($self)		{			$data['scope'] = 'self';		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get the users network updates.	 *	 * @param   string   $id      Member id.	 * @param   boolean  $self    Used to return member's feed. Omitted to return aggregated network feed.	 * @param   mixed    $type    String containing any valid Network Update Type from the table or an array of strings	 * 							  to specify more than one Network Update type.	 * @param   integer  $count   Number of updates to return, with a maximum of 250.	 * @param   integer  $start   The offset by which to start Network Update pagination.	 * @param   string   $after   Timestamp after which to retrieve updates.	 * @param   string   $before  Timestamp before which to retrieve updates.	 * @param   boolean  $hidden  Whether to display updates from people the member has chosen to "hide" from their update stream.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getNetworkUpdates($id = null, $self = true, $type = null, $count = 0, $start = 0, $after = null, $before = null,		$hidden = false)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if a member id is specified.		if ($id)		{			$base .= $id;		}		else		{			$base .= '~';		}		$base .= '/network/updates';		// Set request parameters.		$data['format'] = 'json';		// Check if self is true.		if ($self)		{			$data['scope'] = 'self';		}		// Check if type is specified.		if ($type)		{			$data['type'] = $type;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if after is specified.		if ($after)		{			$data['after'] = $after;		}		// Check if before is specified.		if ($before > 0)		{			$data['before'] = $before;		}		// Check if hidden is true.		if ($hidden)		{			$data['hidden'] = $hidden;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get information about the current member's network.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getNetworkStats()	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/network/network-stats';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get the users network updates.	 *	 * @param   string  $body  The actual content of the update. You can use HTML to include links to the user name and the content the user	 *                         created. Other HTML tags are not supported. All body text should be HTML entity escaped and UTF-8 compliant.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function postNetworkUpdate($body)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/person-activities';		// Build the xml.		$xml = '<activity locale="en_US">					<content-type>linkedin-html</content-type>				    <body>' . $body . '</body>				</activity>';		$header['Content-Type'] = 'text/xml';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to retrieve all comments for a given network update.	 *	 * @param   string  $key  update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getComments($key)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/update-comments';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to post a new comment to an existing update.	 *	 * @param   string  $key      update/update-key representing an update.	 * @param   string  $comment  Maximum length of 700 characters	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function postComment($key, $comment)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/update-comments';		// Build the xml.		$xml = '<update-comment>				  <comment>' . $comment . '</comment>				</update-comment>';		$header['Content-Type'] = 'text/xml';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to retrieve the complete list of people who liked an update.	 *	 * @param   string  $key  update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getLikes($key)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/likes';		// Set request parameters.		$data['format'] = 'json';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to like or unlike an update.	 *	 * @param   string   $key   Update/update-key representing an update.	 * @param   boolean  $like  True to like update, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _likeUnlike($key, $like)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/network/updates/key=' . $key . '/is-liked';		// Build xml.		$xml = '<is-liked>' . $this->booleanToString($like) . '</is-liked>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to like an update.	 *	 * @param   string  $key  Update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function like($key)	{		return $this->_likeUnlike($key, true);	}	/**	 * Method used to unlike an update.	 *	 * @param   string  $key  Update/update-key representing an update.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unlike($key)	{		return $this->_likeUnlike($key, false);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModel', __DIR__ . '/extension.php');JLoader::register('JoomlaInstallerScript', JPATH_ADMINISTRATOR . '/components/com_admin/script.php');/** * Installer Manage Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelDatabase extends InstallerModel{	protected $_context = 'com_installer.discover';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Fixes database problems	 *	 * @return  void	 */	public function fix()	{		if (!$changeSet = $this->getItems())		{			return false;		}		$changeSet->fix();		$this->fixSchemaVersion($changeSet);		$this->fixUpdateVersion();		$installer = new JoomlaInstallerScript;		$installer->deleteUnexistingFiles();		$this->fixDefaultTextFilters();	}	/**	 * Gets the changeset object	 *	 * @return  JSchemaChangeset	 */	public function getItems()	{		$folder = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		try		{			$changeSet = JSchemaChangeset::getInstance(JFactory::getDbo(), $folder);		}		catch (RuntimeException $e)		{			JFactory::getApplication()->enqueueMessage($e->getMessage(), 'warning');			return false;		}		return $changeSet;	}	/**	 * Method to get a JPagination object for the data set.	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function getPagination()	{		return true;	}	/**	 * Get version from #__schemas table	 *	 * @return  mixed  the return value from the query, or null if the query fails	 *	 * @throws Exception	 */	public function getSchemaVersion()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('version_id')			->from($db->quoteName('#__schemas'))			->where('extension_id = 700');		$db->setQuery($query);		$result = $db->loadResult();		return $result;	}	/**	 * Fix schema version if wrong	 *	 * @param   JSchemaChangeSet  $changeSet  Schema change set	 *	 * @return   mixed  string schema version if success, false if fail	 */	public function fixSchemaVersion($changeSet)	{		// Get correct schema version -- last file in array		$schema = $changeSet->getSchema();		$db = JFactory::getDbo();		$result = false;		// Check value. If ok, don't do update		$version = $this->getSchemaVersion();		if ($version == $schema)		{			$result = $version;		}		else		{			// Delete old row			$query = $db->getQuery(true)				->delete($db->quoteName('#__schemas'))				->where($db->quoteName('extension_id') . ' = 700');			$db->setQuery($query);			$db->execute();			// Add new row			$query = $db->getQuery(true)				->insert($db->quoteName('#__schemas'))				->set($db->quoteName('extension_id') . '= 700')				->set($db->quoteName('version_id') . '= ' . $db->quote($schema));			$db->setQuery($query);			if ($db->execute())			{				$result = $schema;			}		}		return $result;	}	/**	 * Get current version from #__extensions table	 *	 * @return  mixed   version if successful, false if fail	 */	public function getUpdateVersion()	{		$table = JTable::getInstance('Extension');		$table->load('700');		$cache = new JRegistry($table->manifest_cache);		return $cache->get('version');	}	/**	 * Fix Joomla version in #__extensions table if wrong (doesn't equal JVersion short version)	 *	 * @return   mixed  string update version if success, false if fail	 */	public function fixUpdateVersion()	{		$table = JTable::getInstance('Extension');		$table->load('700');		$cache = new JRegistry($table->manifest_cache);		$updateVersion = $cache->get('version');		$cmsVersion = new JVersion;		if ($updateVersion == $cmsVersion->getShortVersion())		{			return $updateVersion;		}		else		{			$cache->set('version', $cmsVersion->getShortVersion());			$table->manifest_cache = $cache->toString();			if ($table->store())			{				return $cmsVersion->getShortVersion();			}			else			{				return false;			}		}	}	/**	 * For version 2.5.x only	 * Check if com_config parameters are blank.	 *	 * @return  string  default text filters (if any)	 */	public function getDefaultTextFilters()	{		$table = JTable::getInstance('Extension');		$table->load($table->find(array('name' => 'com_config')));		return $table->params;	}	/**	 * For version 2.5.x only	 * Check if com_config parameters are blank. If so, populate with com_content text filters.	 *	 * @return  mixed  boolean true if params are updated, null otherwise	 */	public function fixDefaultTextFilters()	{		$table = JTable::getInstance('Extension');		$table->load($table->find(array('name' => 'com_config')));		// Check for empty $config and non-empty content filters		if (!$table->params)		{			// Get filters from com_content and store if you find them			$contentParams = JComponentHelper::getParams('com_content');			if ($contentParams->get('filters'))			{				$newParams = new JRegistry;				$newParams->set('filters', $contentParams->get('filters'));				$table->params = (string) $newParams;				$table->store();				return true;			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Mediawiki * @since       12.3 */abstract class JMediawikiObject{	/**	 * @var    JRegistry  Options for the MediaWiki object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JMediawikiHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $client;	/**     * Constructor.     *     * @param   JRegistry       $options  Mediawiki options object.     * @param   JMediawikiHttp  $client   The HTTP client object.     *     * @since   12.3     */	public function __construct(JRegistry $options = null, JMediawikiHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JMediawikiHttp($this->options);	}	/**     * Method to build and return a full request URL for the request.     *     * @param   string  $path  URL to inflect     *     * @return  string   The request URL.     *     * @since   12.3     */	protected function fetchUrl($path)	{		// Append the path with output format		$path .= '&format=xml';		$uri = new JUri($this->options->get('api.url') . '/api.php' . $path);		if ($this->options->get('api.username', false))		{			$uri->setUser($this->options->get('api.username'));		}		if ($this->options->get('api.password', false))		{			$uri->setPass($this->options->get('api.password'));		}		return (string) $uri;	}	/**     * Method to build request parameters from a string array.     *     * @param   array  $params  string array that contains the parameters     *     * @return  string   request parameter     *     * @since   12.3     */	public function buildParameter(array $params)	{		$path = '';		foreach ($params as $param)		{			$path .= $param;			if (next($params) == true)			{				$path .= '|';			}		}		return $path;	}	/**     * Method to validate response for errors     *     * @param   JHttpresponse  $response  reponse from the mediawiki server     *     * @return  Object     *     * @since   12.3     */	public function validateResponse($response)	{		$xml = simplexml_load_string($response->body);		if (isset($xml->warnings))		{			throw new DomainException($xml->warnings->info);		}		if (isset($xml->error))		{			throw new DomainException($xml->error['info']);		}		return $xml;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Adapter Class * Retains common adapter pattern functions * Class harvested from joomla.installer.installer * * @package     Joomla.Platform * @subpackage  Base * @since       11.1 */class JAdapter extends JObject{	/**	 * Associative array of adapters	 *	 * @var    array	 * @since  11.1	 */	protected $_adapters = array();	/**	 * Adapter Folder	 * @var    string	 * @since  11.1	 */	protected $_adapterfolder = 'adapters';	/**	 * @var    string	Adapter Class Prefix	 * @since  11.1	 */	protected $_classprefix = 'J';	/**	 * Base Path for the adapter instance	 *	 * @var    string	 * @since  11.1	 */	protected $_basepath = null;	/**	 * Database Connector Object	 *	 * @var    JDatabaseDriver	 * @since  11.1	 */	protected $_db;	/**	 * Constructor	 *	 * @param   string  $basepath       Base Path of the adapters	 * @param   string  $classprefix    Class prefix of adapters	 * @param   string  $adapterfolder  Name of folder to append to base path	 *	 * @since   11.1	 */	public function __construct($basepath, $classprefix = null, $adapterfolder = null)	{		$this->_basepath = $basepath;		$this->_classprefix = $classprefix ? $classprefix : 'J';		$this->_adapterfolder = $adapterfolder ? $adapterfolder : 'adapters';		$this->_db = JFactory::getDbo();	}	/**	 * Get the database connector object	 *	 * @return  JDatabaseDriver  Database connector object	 *	 * @since   11.1	 */	public function getDBO()	{		return $this->_db;	}	/**	 * Set an adapter by name	 *	 * @param   string  $name      Adapter name	 * @param   object  &$adapter  Adapter object	 * @param   array   $options   Adapter options	 *	 * @return  boolean  True if successful	 *	 * @since   11.1	 */	public function setAdapter($name, &$adapter = null, $options = array())	{		if (!is_object($adapter))		{			$fullpath = $this->_basepath . '/' . $this->_adapterfolder . '/' . strtolower($name) . '.php';			if (!file_exists($fullpath))			{				return false;			}			// Try to load the adapter object			require_once $fullpath;			$class = $this->_classprefix . ucfirst($name);			if (!class_exists($class))			{				return false;			}			$adapter = new $class($this, $this->_db, $options);		}		$this->_adapters[$name] = &$adapter;		return true;	}	/**	 * Return an adapter.	 *	 * @param   string  $name     Name of adapter to return	 * @param   array   $options  Adapter options	 *	 * @return  object  Adapter of type 'name' or false	 *	 * @since   11.1	 */	public function getAdapter($name, $options = array())	{		if (!array_key_exists($name, $this->_adapters))		{			if (!$this->setAdapter($name, $options))			{				$false = false;				return $false;			}		}		return $this->_adapters[$name];	}	/**	 * Loads all adapters.	 *	 * @param   array  $options  Adapter options	 *	 * @return  void	 *	 * @since   11.1	 */	public function loadAllAdapters($options = array())	{		$files = new DirectoryIterator($this->_basepath . '/' . $this->_adapterfolder);		foreach ($files as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Try to load the adapter object			require_once $this->_basepath . '/' . $this->_adapterfolder . '/' . $fileName;			// Derive the class name from the filename.			$name = str_ireplace('.php', '', ucfirst(trim($fileName)));			$class = $this->_classprefix . ucfirst($name);			if (!class_exists($class))			{				// Skip to next one				continue;			}			$adapter = new $class($this, $this->_db, $options);			$this->_adapters[$name] = clone $adapter;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Getting params from template$params = JFactory::getApplication()->getTemplate(true)->params;$app = JFactory::getApplication();$doc = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;// Detecting Active Variables$option   = $app->input->getCmd('option', '');$view     = $app->input->getCmd('view', '');$layout   = $app->input->getCmd('layout', '');$task     = $app->input->getCmd('task', '');$itemid   = $app->input->getCmd('Itemid', '');$sitename = $app->getCfg('sitename');if($task == "edit" || $layout == "form" ){	$fullWidth = 1;}else{	$fullWidth = 0;}// Add JavaScript FrameworksJHtml::_('bootstrap.framework');// Add Stylesheets$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Add current user information$user = JFactory::getUser();// Adjusting content widthif ($this->countModules('position-7') && $this->countModules('position-8')){	$span = "span6";}elseif ($this->countModules('position-7') && !$this->countModules('position-8')){	$span = "span9";}elseif (!$this->countModules('position-7') && $this->countModules('position-8')){	$span = "span9";}else{	$span = "span12";}// Logo file or site title paramif ($this->params->get('logoFile')){	$logo = '<img src="'. JURI::root() . $this->params->get('logoFile') .'" alt="'. $sitename .'" />';}elseif ($this->params->get('sitetitle')){	$logo = '<span class="site-title" title="'. $sitename .'">'. htmlspecialchars($this->params->get('sitetitle')) .'</span>';}else{	$logo = '<span class="site-title" title="'. $sitename .'">'. $sitename .'</span>';}?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0" />	<jdoc:include type="head" />	<?php	// Use of Google Font	if ($this->params->get('googleFont'))	{	?>		<link href='http://fonts.googleapis.com/css?family=<?php echo $this->params->get('googleFontName');?>' rel='stylesheet' type='text/css' />		<style type="text/css">			h1,h2,h3,h4,h5,h6,.site-title{				font-family: '<?php echo str_replace('+', ' ', $this->params->get('googleFontName'));?>', sans-serif;			}		</style>	<?php	}	?>	<?php	// Template color	if ($this->params->get('templateColor'))	{	?>	<style type="text/css">		body.site		{			border-top: 3px solid <?php echo $this->params->get('templateColor');?>;			background-color: <?php echo $this->params->get('templateBackgroundColor');?>		}		a		{			color: <?php echo $this->params->get('templateColor');?>;		}		.navbar-inner, .nav-list > .active > a, .nav-list > .active > a:hover, .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover, .nav-pills > .active > a, .nav-pills > .active > a:hover,		.btn-primary		{			background: <?php echo $this->params->get('templateColor');?>;		}		.navbar-inner		{			-moz-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			-webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);		}	</style>	<?php	}	?>	<!--[if lt IE 9]>		<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script>	<![endif]--></head><body class="site <?php echo $option	. ' view-' . $view	. ($layout ? ' layout-' . $layout : ' no-layout')	. ($task ? ' task-' . $task : ' no-task')	. ($itemid ? ' itemid-' . $itemid : '')	. ($params->get('fluidContainer') ? ' fluid' : '');?>">	<!-- Body -->	<div class="body">		<div class="container<?php echo ($params->get('fluidContainer') ? '-fluid' : '');?>">			<!-- Header -->			<div class="header">				<div class="header-inner clearfix">					<a class="brand pull-left" href="<?php echo $this->baseurl; ?>">						<?php echo $logo;?> <?php if ($this->params->get('sitedescription')) { echo '<div class="site-description">'. htmlspecialchars($this->params->get('sitedescription')) .'</div>'; } ?>					</a>					<div class="header-search pull-right">						<jdoc:include type="modules" name="position-0" style="none" />					</div>				</div>			</div>			<?php if ($this->countModules('position-1')) : ?>			<div class="navigation">				<jdoc:include type="modules" name="position-1" style="none" />			</div>			<?php endif; ?>			<jdoc:include type="modules" name="banner" style="xhtml" />			<div class="row-fluid">				<?php if ($this->countModules('position-8')) : ?>				<!-- Begin Sidebar -->				<div id="sidebar" class="span3">					<div class="sidebar-nav">						<jdoc:include type="modules" name="position-8" style="xhtml" />					</div>				</div>				<!-- End Sidebar -->				<?php endif; ?>				<div id="content" class="<?php echo $span;?>">					<!-- Begin Content -->					<jdoc:include type="modules" name="position-3" style="xhtml" />					<jdoc:include type="message" />					<jdoc:include type="component" />					<jdoc:include type="modules" name="position-2" style="none" />					<!-- End Content -->				</div>				<?php if ($this->countModules('position-7')) : ?>				<div id="aside" class="span3">					<!-- Begin Right Sidebar -->					<jdoc:include type="modules" name="position-7" style="well" />					<!-- End Right Sidebar -->				</div>				<?php endif; ?>			</div>		</div>	</div>	<!-- Footer -->	<div class="footer">		<div class="container<?php echo ($params->get('fluidContainer') ? '-fluid' : '');?>">			<hr />			<jdoc:include type="modules" name="footer" style="none" />			<p class="pull-right"><a href="#top" id="back-top"><?php echo JText::_('TPL_PROTOSTAR_BACKTOTOP'); ?></a></p>			<p>&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>		</div>	</div>	<jdoc:include type="modules" name="debug" style="none" /></body></html>
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.utilities.arrayhelper');/** * JRegistry class * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistry implements JsonSerializable{	/**	 * Registry Object	 *	 * @var    object	 * @since  11.1	 */	protected $data;	/**	 * @var    array  JRegistry instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   mixed  $data  The data to bind to the new JRegistry object.	 *	 * @since   11.1	 */	public function __construct($data = null)	{		// Instantiate the internal data object.		$this->data = new stdClass;		// Optionally load supplied data.		if (is_array($data) || is_object($data))		{			$this->bindData($this->data, $data);		}		elseif (!empty($data) && is_string($data))		{			$this->loadString($data);		}	}	/**	 * Magic function to clone the registry object.	 *	 * @return  JRegistry	 *	 * @since   11.1	 */	public function __clone()	{		$this->data = unserialize(serialize($this->data));	}	/**	 * Magic function to render this object as a string using default args of toString method.	 *	 * @return  string	 *	 * @since   11.1	 */	public function __toString()	{		return $this->toString();	}	/**	 * Implementation for the JsonSerializable interface.	 * Allows us to pass JRegistry objects to json_encode.	 *	 * @return  object	 *	 * @since   12.2	 * @note    The interface is only present in PHP 5.4 and up.	 */	public function jsonSerialize()	{		return $this->data;	}	/**	 * Sets a default value if not already assigned.	 *	 * @param   string  $key      The name of the parameter.	 * @param   string  $default  An optional value for the parameter.	 *	 * @return  string  The value set, or the default if the value was not previously set (or null).	 *	 * @since   11.1	 */	public function def($key, $default = '')	{		$value = $this->get($key, (string) $default);		$this->set($key, $value);		return $value;	}	/**	 * Check if a registry path exists.	 *	 * @param   string  $path  Registry path (e.g. joomla.content.showauthor)	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function exists($path)	{		// Explode the registry path into an array		if ($nodes = explode('.', $path))		{			// Initialize the current node to be the registry root.			$node = $this->data;			// Traverse the registry to find the correct node for the result.			for ($i = 0, $n = count($nodes); $i < $n; $i++)			{				if (isset($node->$nodes[$i]))				{					$node = $node->$nodes[$i];				}				else				{					break;				}				if ($i + 1 == $n)				{					return true;				}			}		}		return false;	}	/**	 * Get a registry value.	 *	 * @param   string  $path     Registry path (e.g. joomla.content.showauthor)	 * @param   mixed   $default  Optional default value, returned if the internal value is null.	 *	 * @return  mixed  Value of entry or null	 *	 * @since   11.1	 */	public function get($path, $default = null)	{		$result = $default;		if (!strpos($path, '.'))		{			return (isset($this->data->$path) && $this->data->$path !== null && $this->data->$path !== '') ? $this->data->$path : $default;		}		// Explode the registry path into an array		$nodes = explode('.', $path);		// Initialize the current node to be the registry root.		$node = $this->data;		$found = false;		// Traverse the registry to find the correct node for the result.		foreach ($nodes as $n)		{			if (isset($node->$n))			{				$node = $node->$n;				$found = true;			}			else			{				$found = false;				break;			}		}		if ($found && $node !== null && $node !== '')		{			$result = $node;		}		return $result;	}	/**	 * Returns a reference to a global JRegistry object, only creating it	 * if it doesn't already exist.	 *	 * This method must be invoked as:	 * <pre>$registry = JRegistry::getInstance($id);</pre>	 *	 * @param   string  $id  An ID for the registry instance	 *	 * @return  JRegistry  The JRegistry object.	 *	 * @since   11.1	 */	public static function getInstance($id)	{		if (empty(self::$instances[$id]))		{			self::$instances[$id] = new JRegistry;		}		return self::$instances[$id];	}	/**	 * Load a associative array of values into the default namespace	 *	 * @param   array  $array  Associative array of value to load	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadArray($array)	{		$this->bindData($this->data, $array);		return true;	}	/**	 * Load the public variables of the object into the default namespace.	 *	 * @param   object  $object  The object holding the publics to load	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadObject($object)	{		$this->bindData($this->data, $object);		return true;	}	/**	 * Load the contents of a file into the registry	 *	 * @param   string  $file     Path to file to load	 * @param   string  $format   Format of the file [optional: defaults to JSON]	 * @param   array   $options  Options used by the formatter	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadFile($file, $format = 'JSON', $options = array())	{		$data = file_get_contents($file);		return $this->loadString($data, $format, $options);	}	/**	 * Load a string into the registry	 *	 * @param   string  $data     String to load into the registry	 * @param   string  $format   Format of the string	 * @param   array   $options  Options used by the formatter	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadString($data, $format = 'JSON', $options = array())	{		// Load a string into the given namespace [or default namespace if not given]		$handler = JRegistryFormat::getInstance($format);		$obj = $handler->stringToObject($data, $options);		$this->loadObject($obj);		return true;	}	/**	 * Merge a JRegistry object into this one	 *	 * @param   JRegistry  $source  Source JRegistry object to merge.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function merge($source)	{		if (!$source instanceof JRegistry)		{			return false;		}		// Load the variables into the registry's default namespace.		foreach ($source->toArray() as $k => $v)		{			if (($v !== null) && ($v !== ''))			{				$this->data->$k = $v;			}		}		return true;	}	/**	 * Set a registry value.	 *	 * @param   string  $path   Registry Path (e.g. joomla.content.showauthor)	 * @param   mixed   $value  Value of entry	 *	 * @return  mixed  The value of the that has been set.	 *	 * @since   11.1	 */	public function set($path, $value)	{		$result = null;		/**		 * Explode the registry path into an array and remove empty		 * nodes, then re-key the array so it's sequential.		 */		$nodes = array_values(array_filter(explode('.', $path), 'strlen'));		if ($nodes)		{			// Initialize the current node to be the registry root.			$node = $this->data;			// Traverse the registry to find the correct node for the result.			for ($i = 0, $n = count($nodes) - 1; $i < $n; $i++)			{				if (!isset($node->$nodes[$i]) && ($i != $n))				{					$node->$nodes[$i] = new stdClass;				}				$node = $node->$nodes[$i];			}			// Get the old value if exists so we can return it			$result = $node->$nodes[$i] = $value;		}		return $result;	}	/**	 * Transforms a namespace to an array	 *	 * @return  array  An associative array holding the namespace data	 *	 * @since   11.1	 */	public function toArray()	{		return (array) $this->asArray($this->data);	}	/**	 * Transforms a namespace to an object	 *	 * @return  object   An an object holding the namespace data	 *	 * @since   11.1	 */	public function toObject()	{		return $this->data;	}	/**	 * Get a namespace in a given string format	 *	 * @param   string  $format   Format to return the string in	 * @param   mixed   $options  Parameters used by the formatter, see formatters for more info	 *	 * @return  string   Namespace in string format	 *	 * @since   11.1	 */	public function toString($format = 'JSON', $options = array())	{		// Return a namespace in a given format		$handler = JRegistryFormat::getInstance($format);		return $handler->objectToString($this->data, $options);	}	/**	 * Method to recursively bind data to a parent object.	 *	 * @param   object  $parent  The parent object on which to attach the data values.	 * @param   mixed   $data    An array or object of data to bind to the parent object.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function bindData($parent, $data)	{		// Ensure the input data is an array.		if (is_object($data))		{			$data = get_object_vars($data);		}		else		{			$data = (array) $data;		}		foreach ($data as $k => $v)		{			if ((is_array($v) && JArrayHelper::isAssociative($v)) || is_object($v))			{				$parent->$k = new stdClass;				$this->bindData($parent->$k, $v);			}			else			{				$parent->$k = $v;			}		}	}	/**	 * Method to recursively convert an object of data to an array.	 *	 * @param   object  $data  An object of data to return as an array.	 *	 * @return  array  Array representation of the input object.	 *	 * @since   11.1	 */	protected function asArray($data)	{		$array = array();		foreach (get_object_vars((object) $data) as $k => $v)		{			if (is_object($v))			{				$array[$k] = $this->asArray($v);			}			else			{				$array[$k] = $v;			}		}		return $array;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of template style records. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesModelStyles extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'client_id', 'a.client_id',				'template', 'a.template',				'home', 'a.home',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$template = $this->getUserStateFromRequest($this->context . '.filter.template', 'filter_template');		$this->setState('filter.template', $template);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', null);		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_templates');		$this->setState('params', $params);		// List state information.		parent::populateState('a.template', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.template');		$id .= ':' . $this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.template, a.title, a.home, a.client_id, l.title AS language_title, l.image as image'			)		);		$query->from($db->quoteName('#__template_styles') . ' AS a');		// Join on menus.		$query->select('COUNT(m.template_style_id) AS assigned')			->join('LEFT', '#__menu AS m ON m.template_style_id = a.id')			->group('a.id, a.template, a.title, a.home, a.client_id, l.title, l.image, e.extension_id');		// Join over the language		$query->join('LEFT', '#__languages AS l ON l.lang_code = a.home');		// Filter by extension enabled		$query->select('extension_id AS e_id')			->join('LEFT', '#__extensions AS e ON e.element = a.template')			->where('e.enabled = 1')			->where('e.type=' . $db->quote('template'));		// Filter by template.		if ($template = $this->getState('filter.template'))		{			$query->where('a.template = ' . $db->quote($template));		}		// Filter by client.		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('a.client_id = ' . (int) $clientId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.template LIKE ' . $search . ' OR a.title LIKE ' . $search);			}		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.title')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * RSS Feed Parser Namespace handler for iTunes. * * @package     Joomla.Platform * @subpackage  Feed * @see         http://www.apple.com/itunes/podcasts/specs.html * @since       12.3 */class JFeedParserRssItunes implements JFeedParserNamespace{	/**	 * Method to handle an element for the feed given that the itunes namespace is present.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeed(JFeed $feed, SimpleXMLElement $el)	{	}	/**	 * Method to handle the feed entry element for the feed given that the itunes namespace is present.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Cpanel component * * @package     Joomla.Administrator * @subpackage  com_cpanel * @since       1.0 */class CpanelViewCpanel extends JViewLegacy{	protected $modules = null;	public function display($tpl = null)	{		// Set toolbar items for the page		JToolbarHelper::title(JText::_('COM_CPANEL'), 'cpanel.png');		JToolbarHelper::help('screen.cpanel');		$input = JFactory::getApplication()->input;		/*		 * Set the template - this will display cpanel.php		 * from the selected admin template.		 */		$input->set('tmpl', 'cpanel');		// Display the cpanel modules		$this->modules = JModuleHelper::getModules('cpanel');		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$uri		= JUri::getInstance();$return		= base64_encode($uri);$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task != 'menus.delete' || confirm('<?php echo JText::_('COM_MENUS_MENU_CONFIRM_DELETE', true);?>'))		{			Joomla.submitform(task);		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_menus&view=menus');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_MENUS_MENU_SEARCH_FILTER'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clearfix"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col" rowspan="2">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th rowspan="2">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="width-30" colspan="3">					<?php echo JText::_('COM_MENUS_HEADING_NUMBER_MENU_ITEMS'); ?>				</th>				<th class="width-20" rowspan="2">					<?php echo JText::_('COM_MENUS_HEADING_LINKED_MODULES'); ?>				</th>				<th class="nowrap id-col" rowspan="2">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>			<tr>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_PUBLISHED_ITEMS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_UNPUBLISHED_ITEMS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_MENUS_HEADING_TRASHED_ITEMS'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create',     'com_menus');			$canEdit   = $user->authorise('core.edit',       'com_menus');			$canChange = $user->authorise('core.edit.state', 'com_menus');		?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype) ?> ">						<?php echo $this->escape($item->title); ?></a>					<p class="smallsub">(<span><?php echo JText::_('COM_MENUS_MENU_MENUTYPE_LABEL') ?></span>						<?php if ($canEdit) : ?>							<?php echo '<a href="'.JRoute::_('index.php?option=com_menus&task=menu.edit&id='.$item->id).' title='.$this->escape($item->description).'">'.							$this->escape($item->menutype).'</a>'; ?>)						<?php else : ?>							<?php echo $this->escape($item->menutype)?>)						<?php endif; ?>					</p>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=1');?>">						<?php echo $item->count_published; ?></a>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=0');?>">						<?php echo $item->count_unpublished; ?></a>				</td>				<td class="center btns">					<a href="<?php echo JRoute::_('index.php?option=com_menus&view=items&menutype='.$item->menutype.'&filter_published=-2');?>">						<?php echo $item->count_trashed; ?></a>				</td>				<td class="left">				<ul class="menu-module-list">					<?php					if (isset($this->modules[$item->menutype])) :						foreach ($this->modules[$item->menutype] as &$module) :						?>						<li>							<?php if ($canEdit) : ?>								<a class="modal" href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.$module->id.'&return='.$return.'&tmpl=component&layout=modal');?>" rel="{handler: 'iframe', size: {x: 1024, y: 450}}"  title="<?php echo JText::_('COM_MENUS_EDIT_MODULE_SETTINGS');?>">								<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?></a>							<?php else :?>								<?php echo JText::sprintf('COM_MENUS_MODULE_ACCESS_POSITION', $this->escape($module->title), $this->escape($module->access_title), $this->escape($module->position)); ?>							<?php endif; ?>						</li>						<?php						endforeach;					endif;					?>				</ul>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$client 	= $this->state->get('filter.client_id') ? 'administrator' : 'site';$user 		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_modules');$saveOrder	= $listOrder == 'ordering';?><form action="<?php echo JRoute::_('index.php?option=com_modules'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<?php echo JHtml::_('select.options', ModulesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>            <label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', ModulesHelper::getStateOptions(), 'value', 'text', $this->state->get('filter.state'));?>			</select>            <label class="selectlabel" for="filter_position">				<?php echo JText::_('COM_MODULES_OPTION_SELECT_POSITION'); ?>			</label>			<select name="filter_position" class="inputbox" id="filter_position">				<option value=""><?php echo JText::_('COM_MODULES_OPTION_SELECT_POSITION');?></option>				<?php echo JHtml::_('select.options', ModulesHelper::getPositions($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.position'));?>			</select>			<label class="selectlabel" for="filter_module">				<?php echo JText::_('COM_MODULES_OPTION_SELECT_MODULE'); ?>			</label>			<select name="filter_module" class="inputbox" id="filter_module">				<option value=""><?php echo JText::_('COM_MODULES_OPTION_SELECT_MODULE');?></option>				<?php echo JHtml::_('select.options', ModulesHelper::getModules($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.module'));?>			</select>			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist" id="modules-mgr">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'title', $listDirn, $listOrder); ?>				</th>                <th class="width-5">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'published', $listDirn, $listOrder); ?>				</th>				<th class="width-20">					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_POSITION', 'position', $listDirn, $listOrder); ?>				</th>                <th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'modules.saveorder'); ?>					<?php endif; ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_MODULE', 'name', $listDirn, $listOrder); ?>				</th>                	<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_PAGES', 'pages', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access', $listDirn, $listOrder); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering  = ($listOrder == 'ordering');			$canCreate  = $user->authorise('core.create',     'com_modules');			$canEdit    = $user->authorise('core.edit',       'com_modules');			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_modules') && $canCheckin;		?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'modules.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>							<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<?php if (!empty($item->note)) : ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_NOTE', $this->escape($item->note));?></p>					<?php endif; ?>				</td>                <td class="center">					<?php echo JHtml::_('modules.state', $item->published, $i, $canChange, 'cb'); ?>				</td>				<td class="center">					<?php echo $item->position; ?>				</td>                <td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->position == $item->position), 'modules.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->position == $item->position), 'modules.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->position == $item->position), 'modules.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->position == $item->position), 'modules.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>                <td class="left">					<?php echo $item->name;?>				</td>				<td class="center">					<?php echo $item->pages; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php if ($item->language == ''):?>						<?php echo JText::_('JDEFAULT'); ?>					<?php elseif ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form.is user is allowed ?>	<?php if ($user->authorise('core.create', 'com_modules') || $user->authorise('core.edit', 'com_modules')) : ?>		<?php echo $this->loadTemplate('batch'); ?>	<?php endif;?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul class="list-striped list-condensed"><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :		if (!isset($this->children[$this->category->id][$id + 1]))		{			$class = ' class="last"';		}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<h4 class="item-title">				<a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($child->id)); ?>">				<?php echo $this->escape($child->title); ?>				</a>				<?php if ($this->params->get('show_cat_items') == 1) :?>					<span class="badge badge-info pull-right" title="<?php echo JText::_('COM_CONTACT_CAT_NUM'); ?>"><?php echo $child->numitems; ?></span>				<?php endif; ?>			</h4>			<?php if ($this->params->get('show_subcat_desc') == 1) : ?>				<?php if ($child->description) : ?>					<small class="category-desc">						<?php echo JHtml::_('content.prepare', $child->description, '', 'com_contact.category'); ?>					</small>				<?php endif; ?>			<?php endif; ?>			<?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Person class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedPerson{	/**	 * @var    string	 * @since  12.3	 */	public $email;	/**	 * @var    string	 * @since  12.3	 */	public $name;	/**	 * @var    string	 * @since  12.3	 */	public $type;	/**	 * @var    string	 * @since  12.3	 */	public $uri;	/**	 * Constructor.	 *	 * @param   string  $name   The full name of the person.	 * @param   string  $email  The email address of the person.	 * @param   string  $uri    The URI for the person.	 * @param   string  $type   The type of person.	 *	 * @since   12.3	 */	public function __construct($name = null, $email = null, $uri = null, $type = null)	{		$this->name = $name;		$this->email = $email;		$this->uri = $uri;		$this->type = $type;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API User class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/user/ * @since       13.1 */class JFacebookUser extends JFacebookObject{	/**	 * Method to get the specified user's details. Authentication is required only for some fields.	 *	 * @param   mixed  $user  Either an integer containing the user ID or a string containing the username.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getUser($user)	{		return $this->get($user);	}	/**	 * Method to get the specified user's friends. Requires authentication.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getFriends($user, $limit = 0, $offset = 0)	{		return $this->getConnection($user, 'friends', '', $limit, $offset);	}	/**	 * Method to get the user's incoming friend requests. Requires authentication and read_requests permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getFriendRequests($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'friendrequests', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the user's friend lists. Requires authentication and read_friendlists permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getFriendLists($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'friendlists', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the user's wall. Requires authentication and read_stream permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getFeed($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'feed', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the user's news feed. Requires authentication and read_stream permission.	 *	 * @param   mixed    $user      Either an integer containing the user ID or a string containing the username.	 * @param   string   $filter    User's stream filter.	 * @param   boolean  $location  Retreive only posts with a location attached.	 * @param   integer  $limit     The number of objects per page.	 * @param   integer  $offset    The object's number on the page.	 * @param   string   $until     A unix timestamp or any date accepted by strtotime.	 * @param   string   $since     A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getHome($user, $filter = null, $location = false, $limit = 0, $offset = 0, $until = null, $since = null)	{		$extra_fields = '';		if ($filter != null)		{			$extra_fields = '?filter=' . $filter;		}		if ($location == true)		{			$extra_fields .= (strpos($extra_fields, '?') === false) ? '?with=location' : '&with=location';		}		return $this->getConnection($user, 'home', $extra_fields, $limit, $offset, $until, $since);	}	/**	 * Method to see if a user is a friend of the current user. Requires authentication.	 *	 * @param   mixed  $current_user  Either an integer containing the user ID or a string containing the username for the current user.	 * @param   mixed  $user          Either an integer containing the user ID or a string containing the username for the user.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function hasFriend($current_user, $user)	{		return $this->getConnection($current_user, 'friends/' . $user);	}	/**	 * Method to get mutual friends of one user and the current user. Requires authentication.	 *	 * @param   mixed    $current_user  Either an integer containing the user ID or a string containing the username for the current user.	 * @param   mixed    $user          Either an integer containing the user ID or a string containing the username for the user.	 * @param   integer  $limit         The number of objects per page.	 * @param   integer  $offset        The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getMutualFriends($current_user, $user, $limit = 0, $offset = 0)	{		return $this->getConnection($current_user, 'mutualfriends/' . $user, '', $limit, $offset);	}	/**	 * Method to get the user's profile picture. Requires authentication.	 *	 * @param   mixed    $user      Either an integer containing the user ID or a string containing the username.	 * @param   boolean  $redirect  If false this will return the URL of the profile picture without a 302 redirect.	 * @param   string   $type      To request a different photo use square | small | normal | large.	 *	 * @return  string   The URL to the user's profile picture.	 *	 * @since   13.1	 */	public function getPicture($user, $redirect = true, $type = null)	{		$extra_fields = '';		if ($redirect == false)		{			$extra_fields = '?redirect=false';		}		if ($type != null)		{			$extra_fields .= (strpos($extra_fields, '?') === false) ? '?type=' . $type : '&type=' . $type;		}		return $this->getConnection($user, 'picture', $extra_fields);	}	/**	 * Method to get the user's family relationships. Requires authentication and user_relationships permission..	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getFamily($user, $limit = 0, $offset = 0)	{		return $this->getConnection($user, 'family', '', $limit, $offset);	}	/**	 * Method to get the user's notifications. Requires authentication and manage_notifications permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   boolean  $read    Enables you to see notifications that the user has already read.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getNotifications($user, $read = null, $limit = 0, $offset = 0, $until = null, $since = null)	{		if ($read == true)		{			$read = '?include_read=1';		}		// Send the request.		return $this->getConnection($user, 'notifications', $read, $limit, $offset, $until, $since);	}	/**	 * Method to mark a notification as read. Requires authentication and manage_notifications permission.	 *	 * @param   string  $notification  The notification id.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function updateNotification($notification)	{		$data['unread'] = 0;		return $this->createConnection($notification, null, $data);	}	/**	 * Method to get the user's permissions. Requires authentication.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPermissions($user, $limit = 0, $offset = 0)	{		return $this->getConnection($user, 'permissions', '', $limit, $offset);	}	/**	 * Method to revoke a specific permission on behalf of a user. Requires authentication.	 *	 * @param   mixed   $user        Either an integer containing the user ID or a string containing the username.	 * @param   string  $permission  The permission to revoke. If none specified, then this will de-authorize the application completely.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deletePermission($user, $permission = '')	{		return $this->deleteConnection($user, 'permissions', '?permission=' . $permission);	}	/**	 * Method to get the user's albums. Requires authentication and user_photos or friends_photos permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getAlbums($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'albums', '', $limit, $offset, $until, $since);	}	/**	 * Method to create an album for a user.  Requires authentication and publish_stream permission.	 *	 * @param   mixed   $user         Either an integer containing the user ID or a string containing the username.	 * @param   string  $name         Album name.	 * @param   string  $description  Album description.	 * @param   json    $privacy      A JSON-encoded object that defines the privacy setting for the album.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createAlbum($user, $name, $description = null, $privacy = null)	{		// Set POST request parameters.		$data = array();		$data['name'] = $name;		$data['description'] = $description;		$data['privacy'] = $privacy;		return $this->createConnection($user, 'albums', $data);	}	/**	 * Method to get the user's checkins. Requires authentication and user_checkins or friends_checkins permission	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getCheckins($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'checkins', '', $limit, $offset, $until, $since);	}	/**	 * Method to create a checkin for a user. Requires authentication and publish_checkins permission.	 *	 * @param   mixed   $user         Either an integer containing the user ID or a string containing the username.	 * @param   string  $place        Id of the Place Page.	 * @param   string  $coordinates  A JSON-encoded string containing latitute and longitude.	 * @param   string  $tags         Comma separated list of USER_IDs.	 * @param   string  $message      A message to add to the checkin.	 * @param   string  $link         A link to add to the checkin.	 * @param   string  $picture      A picture to add to the checkin.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createCheckin($user, $place, $coordinates, $tags = null, $message = null, $link = null, $picture = null)	{		// Set POST request parameters.		$data = array();		$data['place'] = $place;		$data['coordinates'] = $coordinates;		$data['tags'] = $tags;		$data['message'] = $message;		$data['link'] = $link;		$data['picture'] = $picture;		return $this->createConnection($user, 'checkins', $data);	}	/**	 * Method to get the user's likes. Requires authentication and user_likes or friends_likes permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to see if a user likes a specific Page. Requires authentication.	 *	 * @param   mixed   $user  Either an integer containing the user ID or a string containing the username.	 * @param   string  $page  Facebook ID of the Page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function likesPage($user, $page)	{		return $this->getConnection($user, 'likes/' . $page);	}	/**	 * Method to get the current user's events. Requires authentication and user_events or friends_events permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getEvents($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'events', '', $limit, $offset, $until, $since);	}	/**	 * Method to create an event for a user. Requires authentication create_event permission.	 *	 * @param   mixed   $user          Either an integer containing the user ID or a string containing the username.	 * @param   string  $name          Event name.	 * @param   string  $start_time    Event start time as UNIX timestamp.	 * @param   string  $end_time      Event end time as UNIX timestamp.	 * @param   string  $description   Event description.	 * @param   string  $location      Event location.	 * @param   string  $location_id   Facebook Place ID of the place the Event is taking place.	 * @param   string  $privacy_type  Event privacy setting, a string containing 'OPEN' (default), 'CLOSED', or 'SECRET'.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createEvent($user, $name, $start_time, $end_time = null, $description = null,		$location = null, $location_id = null, $privacy_type = null)	{		// Set POST request parameters.		$data = array();		$data['start_time'] = $start_time;		$data['name'] = $name;		$data['end_time'] = $end_time;		$data['description'] = $description;		$data['location'] = $location;		$data['location_id'] = $location_id;		$data['privacy_type'] = $privacy_type;		return $this->createConnection($user, 'events', $data);	}	/**	 * Method to edit an event. Requires authentication create_event permission.	 *	 * @param   mixed   $event         Event ID.	 * @param   string  $name          Event name.	 * @param   string  $start_time    Event start time as UNIX timestamp.	 * @param   string  $end_time      Event end time as UNIX timestamp.	 * @param   string  $description   Event description.	 * @param   string  $location      Event location.	 * @param   string  $location_id   Facebook Place ID of the place the Event is taking place.	 * @param   string  $privacy_type  Event privacy setting, a string containing 'OPEN' (default), 'CLOSED', or 'SECRET'.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function editEvent($event, $name = null, $start_time = null, $end_time = null, $description = null,		$location = null, $location_id = null, $privacy_type = null)	{		// Set POST request parameters.		$data = array();		$data['start_time'] = $start_time;		$data['name'] = $name;		$data['end_time'] = $end_time;		$data['description'] = $description;		$data['location'] = $location;		$data['location_id'] = $location_id;		$data['privacy_type'] = $privacy_type;		return $this->createConnection($event, null, $data);	}	/**	 * Method to delete an event. Note: you can only delete the event if it was created by the same app. Requires authentication create_event permission.	 *	 * @param   string  $event  Event ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteEvent($event)	{		return $this->deleteConnection($event);	}	/**	 * Method to get the groups that the user belongs to. Requires authentication and user_groups or friends_groups permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getGroups($user, $limit = 0, $offset = 0)	{		return $this->getConnection($user, 'groups', '', $limit, $offset);	}	/**	 * Method to get the user's posted links. Requires authentication and user_groups or friends_groups permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLinks($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'links', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a link on user's feed. Requires authentication and publish_stream permission.	 *	 * @param   mixed   $user     Either an integer containing the user ID or a string containing the username.	 * @param   string  $link     Link URL.	 * @param   strin   $message  Link message.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createLink($user, $link, $message = null)	{		// Set POST request parameters.		$data = array();		$data['link'] = $link;		$data['message'] = $message;		return $this->createConnection($user, 'feed', $data);	}	/**	 * Method to delete a link. Requires authentication and publish_stream permission.	 *	 * @param   mixed  $link  The Link ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLink($link)	{		return $this->deleteConnection($link);	}	/**	 * Method to get the user's notes. Requires authentication and user_groups or friends_groups permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getNotes($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'notes', '', $limit, $offset, $until, $since);	}	/**	 * Method to create a note on the behalf of the user.	 * Requires authentication and publish_stream permission, user_groups or friends_groups permission.	 *	 * @param   mixed   $user     Either an integer containing the user ID or a string containing the username.	 * @param   string  $subject  The subject of the note.	 * @param   string  $message  Note content.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createNote($user, $subject, $message)	{		// Set POST request parameters.		$data = array();		$data['subject'] = $subject;		$data['message'] = $message;		return $this->createConnection($user, 'notes', $data);	}	/**	 * Method to get the user's photos. Requires authentication and user_groups or friends_groups permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPhotos($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'photos', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a photo on user's wall. Requires authentication and publish_stream permission, user_groups or friends_groups permission.	 *	 * @param   mixed    $user      Either an integer containing the user ID or a string containing the username.	 * @param   string   $source    Path to photo.	 * @param   string   $message   Photo description.	 * @param   string   $place     Facebook ID of the place associated with the photo.	 * @param   boolean  $no_story  If set to 1, optionally suppresses the feed story that is automatically	 * 								generated on a users profile when they upload a photo using your application.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createPhoto($user, $source, $message = null, $place = null, $no_story = null)	{		// Set POST request parameters.		$data = array();		$data[basename($source)] = '@' . realpath($source);		$data['message'] = $message;		$data['place'] = $place;		$data['no_story'] = $no_story;		return $this->createConnection($user, 'photos', $data, array('Content-Type' => 'multipart/form-data'));	}	/**	 * Method to get the user's posts. Requires authentication and read_stream permission for non-public posts.	 *	 * @param   mixed    $user      Either an integer containing the user ID or a string containing the username.	 * @param   boolean  $location  Retreive only posts with a location attached.	 * @param   integer  $limit     The number of objects per page.	 * @param   integer  $offset    The object's number on the page.	 * @param   string   $until     A unix timestamp or any date accepted by strtotime.	 * @param   string   $since     A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPosts($user, $location = false, $limit = 0, $offset = 0, $until = null, $since = null)	{		if ($location == true)		{			$location = '?with=location';		}		// Send the request.		return $this->getConnection($user, 'posts', $location, $limit, $offset, $until, $since);	}	/**	 * Method to post on a user's wall. Message or link parameter is required. Requires authentication and publish_stream permission.	 *	 * @param   mixed   $user               Either an integer containing the user ID or a string containing the username.	 * @param   string  $message            Post message.	 * @param   string  $link               Post URL.	 * @param   string  $picture            Post thumbnail image (can only be used if link is specified)	 * @param   string  $name               Post name (can only be used if link is specified).	 * @param   string  $caption            Post caption (can only be used if link is specified).	 * @param   string  $description        Post description (can only be used if link is specified).	 * @param   array   $actions            Post actions array of objects containing name and link.	 * @param   string  $place              Facebook Page ID of the location associated with this Post.	 * @param   string  $tags               Comma-separated list of Facebook IDs of people tagged in this Post.	 * 										For example: 1207059,701732. You cannot specify this field without also specifying a place.	 * @param   string  $privacy            Post privacy settings (can only be specified if the Timeline being posted	 * 										on belongs to the User creating the Post).	 * @param   string  $object_attachment  Facebook ID for an existing picture in the User's photo albums to use as the thumbnail image.	 *                                      The User must be the owner of the photo, and the photo cannot be part of a message attachment.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createPost($user, $message = null, $link = null, $picture = null, $name = null, $caption = null,		$description = null, $actions = null, $place = null, $tags = null, $privacy = null, $object_attachment = null)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		$data['link'] = $link;		$data['name'] = $name;		$data['caption'] = $caption;		$data['description'] = $description;		$data['actions'] = $actions;		$data['place'] = $place;		$data['tags'] = $tags;		$data['privacy'] = $privacy;		$data['object_attachment'] = $object_attachment;		$data['picture'] = $picture;		return $this->createConnection($user, 'feed', $data);	}	/**	 * Method to delete a post. Note: you can only delete the post if it was created by the current user. Requires authentication	 *	 * @param   string  $post  The Post ID.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deletePost($post)	{		return $this->deleteConnection($post);	}	/**	 * Method to get the user's statuses. Requires authentication read_stream permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getStatuses($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'statuses', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a status message on behalf of the user. Requires authentication publish_stream permission.	 *	 * @param   mixed   $user     Either an integer containing the user ID or a string containing the username.	 * @param   string  $message  Status message content.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createStatus($user, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($user, 'feed', $data);	}	/**	 * Method to delete a status. Note: you can only delete the post if it was created by the current user.	 * Requires authentication publish_stream permission.	 *	 * @param   string  $status  The Status ID.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteStatus($status)	{		return $this->deleteConnection($status);	}	/**	 * Method to get the videos the user has been tagged in. Requires authentication and user_videos or friends_videos permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getVideos($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'videos', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a video on behalf of the user. Requires authentication and publish_stream permission.	 *	 * @param   mixed   $user         Either an integer containing the user ID or a string containing the username.	 * @param   string  $source       Path to video.	 * @param   string  $title        Video title.	 * @param   string  $description  Video description.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createVideo($user, $source, $title = null, $description = null)	{		// Set POST request parameters.		$data = array();		$data[basename($source)] = '@' . realpath($source);		$data['title'] = $title;		$data['description'] = $description;		return $this->createConnection($user, 'videos', $data, array('Content-Type' => 'multipart/form-data'));	}	/**	 * Method to get the posts the user has been tagged in. Requires authentication and user_videos or friends_videos permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getTagged($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'tagged', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the activities listed on the user's profile. Requires authentication and user_activities or friends_activities permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getActivities($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'activities', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the books listed on the user's profile. Requires authentication and user_likes or friends_likes permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getBooks($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'books', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the interests listed on the user's profile. Requires authentication.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getInterests($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'interests', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the movies listed on the user's profile. Requires authentication and user_likes or friends_likes permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getMovies($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'movies', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the television listed on the user's profile. Requires authentication and user_likes or friends_likes permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getTelevision($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'television', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the music listed on the user's profile. Requires authentication user_likes or friends_likes permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getMusic($user, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($user, 'music', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the user's subscribers. Requires authentication and user_subscriptions or friends_subscriptions permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getSubscribers($user, $limit = 0, $offset = 0)	{		return $this->getConnection($user, 'subscribers', '', $limit, $offset);	}	/**	 * Method to get the people the user is subscribed to. Requires authentication and user_subscriptions or friends_subscriptions permission.	 *	 * @param   mixed    $user    Either an integer containing the user ID or a string containing the username.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getSubscribedTo($user, $limit = 0, $offset = 0)	{		return $this->getConnection($user, 'subscribedto', '', $limit, $offset);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * Frontpage Component Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelFeatured extends ContentModelArticles{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_content.frontpage';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		parent::populateState($ordering, $direction);		$input = JFactory::getApplication()->input;		$user  = JFactory::getUser();		// List state information		$limitstart = $input->getUInt('limitstart', 0);		$this->setState('list.start', $limitstart);		$params = $this->state->params;		$limit = $params->get('num_leading_articles') + $params->get('num_intro_articles') + $params->get('num_links');		$this->setState('list.limit', $limit);		$this->setState('list.links', $params->get('num_links'));		$this->setState('filter.frontpage', true);		if ((!$user->authorise('core.edit.state', 'com_content')) &&  (!$user->authorise('core.edit', 'com_content'))){			// filter on published for those who do not have edit or edit.state rights.			$this->setState('filter.published', 1);		}		else		{			$this->setState('filter.published', array(0, 1, 2));		}		// check for category selection		if ($params->get('featured_categories') && implode(',', $params->get('featured_categories')) == true)		{			$featuredCategories = $params->get('featured_categories');			$this->setState('filter.frontpage.categories', $featuredCategories);		}	}	/**	 * Method to get a list of articles.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		$params = clone $this->getState('params');		$limit = $params->get('num_leading_articles') + $params->get('num_intro_articles') + $params->get('num_links');		if ($limit > 0)		{			$this->setState('list.limit', $limit);			return parent::getItems();		}		return array();	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= $this->getState('filter.frontpage');		return parent::getStoreId($id);	}	/**	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Set the blog ordering		$params = $this->state->params;		$articleOrderby = $params->get('orderby_sec', 'rdate');		$articleOrderDate = $params->get('order_date');		$categoryOrderby = $params->def('orderby_pri', '');		$secondary = ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';		$primary = ContentHelperQuery::orderbyPrimary($categoryOrderby);		$orderby = $primary . ' ' . $secondary . ' a.created DESC ';		$this->setState('list.ordering', $orderby);		$this->setState('list.direction', '');		// Create a new query object.		$query = parent::getListQuery();		// Filter by frontpage.		if ($this->getState('filter.frontpage'))		{			$query->join('INNER', '#__content_frontpage AS fp ON fp.content_id = a.id');		}		// Filter by categories		if (is_array($featuredCategories = $this->getState('filter.frontpage.categories')))		{			$query->where('a.catid IN (' . implode(',', $featuredCategories) . ')');		}		return $query;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Get the user object.$user = JFactory::getUser();// Check if user is allowed to add/edit based on tags permissions.// Do we really have to make it so people can see unpublished tags???$canEdit = $user->authorise('core.edit', 'com_tags');$canCreate = $user->authorise('core.create', 'com_tags');$canEditState = $user->authorise('core.edit.state', 'com_tags');$items = $this->items;$n = count($this->items);?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<?php if ($this->params->get('show_headings') || $this->params->get('filter_field') !== '0' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_TAGS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<?php if ($this->items == false || $n == 0) : ?>		<p> <?php echo JText::_('COM_TAGS_NO_ITEMS'); ?></p>	<?php else : ?>	<ul class="category list-striped list-condensed">		<?php foreach ($items as $i => $item) : ?>			<?php if ($item->core_state == 0) : ?>				<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">			<?php else: ?>				<li class="cat-list-row<?php echo $i % 2; ?>" >				<h3>					<a href="<?php echo JRoute::_(TagsHelperRoute::getItemRoute($item->content_item_id, $item->core_alias, $item->core_catid, $item->core_language, $item->type_alias, $item->router)); ?>">						<?php echo $this->escape($item->core_title); ?>					</a>				</h3>			<?php endif; ?>			<?php $images  = json_decode($item->core_images);?>			<?php if ($this->params->get('tag_list_show_item_image', 1) == 1 && !empty($images->image_intro)) :?>				<img src="<?php echo htmlspecialchars($images->image_intro);?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>">			<?php endif; ?>			<?php if ($this->params->get('tag_list_show_item_description', 1)) : ?>				<span class="tag-body">					<?php echo JHtml::_('string.truncate', $item->core_body, $this->params->get('tag_list_item_maximum_characters')); ?>				</span>			<?php endif; ?>				</li>			<div class="clearfix"></div>		<?php endforeach; ?>	</ul>	<?php if ($this->params->get('show_pagination')) : ?>	 <div class="pagination">		<?php if ($this->params->get('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>			<?php echo $this->pagination->getPagesLinks(); ?>		</div>		</br>	<?php endif; ?></form><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Set the available masks for the routing mode */const JROUTER_MODE_RAW = 0;const JROUTER_MODE_SEF = 1;/** * Class to create and parse routes * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 */class JRouter{	/**	 * The rewrite mode	 *	 * @var    integer	 * @since  11.1	 */	protected $mode = null;	/**	 * The rewrite mode	 *	 * @var    integer	 * @since  11.1	 * @deprecated use $mode declare as private	 */	protected $_mode = null;	/**	 * An array of variables	 *	 * @var     array	 * @since   11.1	 */	protected $vars = array();	/**	 * An array of variables	 *	 * @var     array	 * @since   11.1	 * @deprecated use $vars declare as private	 */	protected $_vars = array();	/**	 * An array of rules	 *	 * @var    array	 * @since  11.1	 */	protected $rules = array(		'build' => array(),		'parse' => array()	);	/**	 * An array of rules	 *	 * @var    array	 * @since  11.1	 * @deprecated use $rules declare as private	 */	protected $_rules = array(		'build' => array(),		'parse' => array()	);	/**	 * @var    array  JRouter instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor	 *	 * @param   array  $options  Array of options	 *	 * @since 11.1	 */	public function __construct($options = array())	{		if (array_key_exists('mode', $options))		{			$this->_mode = $options['mode'];		}		else		{			$this->_mode = JROUTER_MODE_RAW;		}	}	/**	 * Returns the global JRouter object, only creating it if it	 * doesn't already exist.	 *	 * @param   string  $client   The name of the client	 * @param   array   $options  An associative array of options	 *	 * @return  JRouter A JRouter object.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($client, $options = array())	{		if (empty(self::$instances[$client]))		{			// Create a JRouter object			$classname = 'JRouter' . ucfirst($client);			if (!class_exists($classname))			{				JLog::add('Non-autoloadable JRouter subclasses are deprecated.', JLog::WARNING, 'deprecated');				// Load the router object				$info = JApplicationHelper::getClientInfo($client, true);				if (is_object($info))				{					$path = $info->path . '/includes/router.php';					if (file_exists($path))					{						include_once $path;					}				}			}			if (class_exists($classname))			{				self::$instances[$client] = new $classname($options);			}			else			{				throw new RuntimeException(JText::sprintf('JLIB_APPLICATION_ERROR_ROUTER_LOAD', $client), 500);			}		}		return self::$instances[$client];	}	/**	 * Function to convert a route to an internal URI	 *	 * @param   JURI  $uri  The uri.	 *	 * @return  array	 *	 * @since   11.1	 */	public function parse($uri)	{		$vars = array();		// Process the parsed variables based on custom defined rules		$vars = $this->_processParseRules($uri);		// Parse RAW URL		if ($this->_mode == JROUTER_MODE_RAW)		{			$vars += $this->_parseRawRoute($uri);		}		// Parse SEF URL		if ($this->_mode == JROUTER_MODE_SEF)		{			$vars += $this->_parseSefRoute($uri);		}		return array_merge($this->getVars(), $vars);	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   11.1	 */	public function build($url)	{		// Create the URI object		$uri = $this->_createURI($url);		// Process the uri information based on custom defined rules		$this->_processBuildRules($uri);		// Build RAW URL		if ($this->_mode == JROUTER_MODE_RAW)		{			$this->_buildRawRoute($uri);		}		// Build SEF URL : mysite/route/index.php?var=x		if ($this->_mode == JROUTER_MODE_SEF)		{			$this->_buildSefRoute($uri);		}		return $uri;	}	/**	 * Get the router mode	 *	 * @return  integer	 *	 * @since   11.1	 */	public function getMode()	{		return $this->_mode;	}	/**	 * Set the router mode	 *	 * @param   integer  $mode  The routing mode.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setMode($mode)	{		$this->_mode = $mode;	}	/**	 * Set a router variable, creating it if it doesn't exist	 *	 * @param   string   $key     The name of the variable	 * @param   mixed    $value   The value of the variable	 * @param   boolean  $create  If True, the variable will be created if it doesn't exist yet	 *	 * @return  void	 *	 * @since   11.1	 */	public function setVar($key, $value, $create = true)	{		if ($create || array_key_exists($key, $this->_vars))		{			$this->_vars[$key] = $value;		}	}	/**	 * Set the router variable array	 *	 * @param   array    $vars   An associative array with variables	 * @param   boolean  $merge  If True, the array will be merged instead of overwritten	 *	 * @return  void	 *	 * @since   11.1	 */	public function setVars($vars = array(), $merge = true)	{		if ($merge)		{			$this->_vars = array_merge($this->_vars, $vars);		}		else		{			$this->_vars = $vars;		}	}	/**	 * Get a router variable	 *	 * @param   string  $key  The name of the variable	 *	 * @return  mixed  Value of the variable	 *	 * @since   11.1	 */	public function getVar($key)	{		$result = null;		if (isset($this->_vars[$key]))		{			$result = $this->_vars[$key];		}		return $result;	}	/**	 * Get the router variable array	 *	 * @return  array  An associative array of router variables	 *	 * @since   11.1	 */	public function getVars()	{		return $this->_vars;	}	/**	 * Attach a build rule	 *	 * @param   callback  $callback  The function to be called	 *	 * @return  void	 *	 * @since   11.1.	 */	public function attachBuildRule($callback)	{		$this->_rules['build'][] = $callback;	}	/**	 * Attach a parse rule	 *	 * @param   callback  $callback  The function to be called.	 *	 * @return  void	 *	 * @since   11.1	 */	public function attachParseRule($callback)	{		$this->_rules['parse'][] = $callback;	}	/**	 * Function to convert a raw route to an internal URI	 *	 * @param   JURI  $uri  The raw route	 *	 * @return  boolean	 *	 * @since   11.1	 */	protected function _parseRawRoute($uri)	{		return false;	}	/**	 * Function to convert a sef route to an internal URI	 *	 * @param   JURI  $uri  The sef URI	 *	 * @return  string  Internal URI	 *	 * @since   11.1	 */	protected function _parseSefRoute($uri)	{		return false;	}	/**	 * Function to build a raw route	 *	 * @param   JURI  $uri  The internal URL	 *	 * @return  string  Raw Route	 *	 * @since   11.1	 */	protected function _buildRawRoute($uri)	{	}	/**	 * Function to build a sef route	 *	 * @param   JURI  $uri  The uri	 *	 * @return  string  The SEF route	 *	 * @since   11.1	 */	protected function _buildSefRoute($uri)	{	}	/**	 * Process the parsed router variables based on custom defined rules	 *	 * @param   JURI  $uri  The URI to parse	 *	 * @return  array  The array of processed URI variables	 *	 * @since   11.1	 */	protected function _processParseRules($uri)	{		$vars = array();		foreach ($this->_rules['parse'] as $rule)		{			$vars += call_user_func_array($rule, array(&$this, &$uri));		}		return $vars;	}	/**	 * Process the build uri query data based on custom defined rules	 *	 * @param   JURI  $uri  The URI	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _processBuildRules($uri)	{		foreach ($this->_rules['build'] as $rule)		{			call_user_func_array($rule, array(&$this, &$uri));		}	}	/**	 * Create a uri based on a full or partial url string	 *	 * @param   string  $url  The URI	 *	 * @return  JURI	 *	 * @since   11.1	 */	protected function _createURI($url)	{		// Create full URL if we are only appending variables to it		if (substr($url, 0, 1) == '&')		{			$vars = array();			if (strpos($url, '&amp;') !== false)			{				$url = str_replace('&amp;', '&', $url);			}			parse_str($url, $vars);			$vars = array_merge($this->getVars(), $vars);			foreach ($vars as $key => $var)			{				if ($var == "")				{					unset($vars[$key]);				}			}			$url = 'index.php?' . JURI::buildQuery($vars);		}		// Decompose link into url component parts		return new JURI($url);	}	/**	 * Encode route segments	 *	 * @param   array  $segments  An array of route segments	 *	 * @return  array  Array of encoded route segments	 *	 * @since   11.1	 */	protected function _encodeSegments($segments)	{		$total = count($segments);		for ($i = 0; $i < $total; $i++)		{			$segments[$i] = str_replace(':', '-', $segments[$i]);		}		return $segments;	}	/**	 * Decode route segments	 *	 * @param   array  $segments  An array of route segments	 *	 * @return  array  Array of decoded route segments	 *	 * @since 11.1	 */	protected function _decodeSegments($segments)	{		$total = count($segments);		for ($i = 0; $i < $total; $i++)		{			$segments[$i] = preg_replace('/-/', ':', $segments[$i], 1);		}		return $segments;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewInstallHtml $this */?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal x">	<h3><?php echo JText::_('INSTL_INSTALLING'); ?></h3>	<hr class="hr-condensed" />	<div class="progress progress-striped active" id="install_progress">		<div class="bar" style="width: 0%;"></div>	</div>	<table class="table">		<tbody>		<?php foreach ($this->tasks as $task) : ?>			<tr id="install_<?php echo $task; ?>">				<td class="item" nowrap="nowrap" width="10%">				<?php if ($task == 'email') :					echo JText::sprintf('INSTL_INSTALLING_EMAIL', '<span class="label">' . $this->options['admin_email'] . '</span>');				else :					echo JText::_('INSTL_INSTALLING_' . strtoupper($task));				endif; ?>				</td>				<td>					<div class="spinner spinner-img" style="visibility: hidden;"></div>				</td>			</tr>		<?php endforeach; ?>		</tbody>		<tfoot>			<tr>				<td colspan="2"></td>			</tr>		</tfoot>	</table>	<?php echo JHtml::_('form.token'); ?></form><script type="text/javascript">	window.addEvent('domready', function()	{		doInstall();	});	function doInstall() {		if(document.id('install_progress') != null) {			Install.install(['<?php echo implode("','", $this->tasks); ?>']);		} else {			(function(){doInstall();}).delay(500);		}	}</script>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi import driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseImporterMysqli extends JDatabaseImporter{	/**	 * @var    array  An array of cached data.	 * @since  11.1	 */	protected $cache = array();	/**	 * The database connector to use for exporting structure and/or data.	 *	 * @var    JDatabaseDriverMysql	 * @since  11.1	 */	protected $db = null;	/**	 * The input source.	 *	 * @var    mixed	 * @since  11.1	 */	protected $from = array();	/**	 * The type of input format (XML).	 *	 * @var    string	 * @since  11.1	 */	protected $asFormat = 'xml';	/**	 * An array of options for the exporter.	 *	 * @var    object	 * @since  11.1	 */	protected $options = null;	/**	 * Constructor.	 *	 * Sets up the default options for the exporter.	 *	 * @since   11.1	 */	public function __construct()	{		$this->options = new stdClass;		$this->cache = array('columns' => array(), 'keys' => array());		// Set up the class defaults:		// Import with only structure		$this->withStructure();		// Export as XML.		$this->asXml();		// Default destination is a string using $output = (string) $exporter;	}	/**	 * Set the output option for the exporter to XML format.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function asXml()	{		$this->asFormat = 'xml';		return $this;	}	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseImporterMysqli  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysqli))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Specifies the data source to import.	 *	 * @param   mixed  $from  The data source to import.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function from($from)	{		$this->from = $from;		return $this;	}	/**	 * Get the SQL syntax to add a column.	 *	 * @param   string            $table  The table name.	 * @param   SimpleXMLElement  $field  The XML field definition.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getAddColumnSQL($table, SimpleXMLElement $field)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' ADD COLUMN ' . $this->getColumnSQL($field);		return $query;	}	/**	 * Get the SQL syntax to add a key.	 *	 * @param   string  $table  The table name.	 * @param   array   $keys   An array of the fields pertaining to this key.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getAddKeySQL($table, $keys)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' ADD ' . $this->getKeySQL($keys);		return $query;	}	/**	 * Get alters for table if there is a difference.	 *	 * @param   SimpleXMLElement  $structure  The XML structure pf the table.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function getAlterTableSQL(SimpleXMLElement $structure)	{		$table = $this->getRealTableName($structure['name']);		$oldFields = $this->db->getTableColumns($table);		$oldKeys = $this->db->getTableKeys($table);		$alters = array();		// Get the fields and keys from the XML that we are aiming for.		$newFields = $structure->xpath('field');		$newKeys = $structure->xpath('key');		// Loop through each field in the new structure.		foreach ($newFields as $field)		{			$fName = (string) $field['Field'];			if (isset($oldFields[$fName]))			{				// The field exists, check it's the same.				$column = $oldFields[$fName];				// Test whether there is a change.				$change = ((string) $field['Type'] != $column->Type) || ((string) $field['Null'] != $column->Null)					|| ((string) $field['Default'] != $column->Default) || ((string) $field['Extra'] != $column->Extra);				if ($change)				{					$alters[] = $this->getChangeColumnSQL($table, $field);				}				// Unset this field so that what we have left are fields that need to be removed.				unset($oldFields[$fName]);			}			else			{				// The field is new.				$alters[] = $this->getAddColumnSQL($table, $field);			}		}		// Any columns left are orphans		foreach ($oldFields as $name => $column)		{			// Delete the column.			$alters[] = $this->getDropColumnSQL($table, $name);		}		// Get the lookups for the old and new keys.		$oldLookup = $this->getKeyLookup($oldKeys);		$newLookup = $this->getKeyLookup($newKeys);		// Loop through each key in the new structure.		foreach ($newLookup as $name => $keys)		{			// Check if there are keys on this field in the existing table.			if (isset($oldLookup[$name]))			{				$same = true;				$newCount = count($newLookup[$name]);				$oldCount = count($oldLookup[$name]);				// There is a key on this field in the old and new tables. Are they the same?				if ($newCount == $oldCount)				{					// Need to loop through each key and do a fine grained check.					for ($i = 0; $i < $newCount; $i++)					{						$same = (((string) $newLookup[$name][$i]['Non_unique'] == $oldLookup[$name][$i]->Non_unique)							&& ((string) $newLookup[$name][$i]['Column_name'] == $oldLookup[$name][$i]->Column_name)							&& ((string) $newLookup[$name][$i]['Seq_in_index'] == $oldLookup[$name][$i]->Seq_in_index)							&& ((string) $newLookup[$name][$i]['Collation'] == $oldLookup[$name][$i]->Collation)							&& ((string) $newLookup[$name][$i]['Index_type'] == $oldLookup[$name][$i]->Index_type));						/*						Debug.						echo '<pre>';						echo '<br />Non_unique:   '.							((string) $newLookup[$name][$i]['Non_unique'] == $oldLookup[$name][$i]->Non_unique ? 'Pass' : 'Fail').' '.							(string) $newLookup[$name][$i]['Non_unique'].' vs '.$oldLookup[$name][$i]->Non_unique;						echo '<br />Column_name:  '.							((string) $newLookup[$name][$i]['Column_name'] == $oldLookup[$name][$i]->Column_name ? 'Pass' : 'Fail').' '.							(string) $newLookup[$name][$i]['Column_name'].' vs '.$oldLookup[$name][$i]->Column_name;						echo '<br />Seq_in_index: '.							((string) $newLookup[$name][$i]['Seq_in_index'] == $oldLookup[$name][$i]->Seq_in_index ? 'Pass' : 'Fail').' '.							(string) $newLookup[$name][$i]['Seq_in_index'].' vs '.$oldLookup[$name][$i]->Seq_in_index;						echo '<br />Collation:    '.							((string) $newLookup[$name][$i]['Collation'] == $oldLookup[$name][$i]->Collation ? 'Pass' : 'Fail').' '.							(string) $newLookup[$name][$i]['Collation'].' vs '.$oldLookup[$name][$i]->Collation;						echo '<br />Index_type:   '.							((string) $newLookup[$name][$i]['Index_type'] == $oldLookup[$name][$i]->Index_type ? 'Pass' : 'Fail').' '.							(string) $newLookup[$name][$i]['Index_type'].' vs '.$oldLookup[$name][$i]->Index_type;						echo '<br />Same = '.($same ? 'true' : 'false');						echo '</pre>';						 */						if (!$same)						{							// Break out of the loop. No need to check further.							break;						}					}				}				else				{					// Count is different, just drop and add.					$same = false;				}				if (!$same)				{					$alters[] = $this->getDropKeySQL($table, $name);					$alters[] = $this->getAddKeySQL($table, $keys);				}				// Unset this field so that what we have left are fields that need to be removed.				unset($oldLookup[$name]);			}			else			{				// This is a new key.				$alters[] = $this->getAddKeySQL($table, $keys);			}		}		// Any keys left are orphans.		foreach ($oldLookup as $name => $keys)		{			if (strtoupper($name) == 'PRIMARY')			{				$alters[] = $this->getDropPrimaryKeySQL($table);			}			else			{				$alters[] = $this->getDropKeySQL($table, $name);			}		}		return $alters;	}	/**	 * Get the syntax to alter a column.	 *	 * @param   string            $table  The name of the database table to alter.	 * @param   SimpleXMLElement  $field  The XML definition for the field.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getChangeColumnSQL($table, SimpleXMLElement $field)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' CHANGE COLUMN ' . $this->db->quoteName((string) $field['Field']) . ' '			. $this->getColumnSQL($field);		return $query;	}	/**	 * Get the SQL syntax for a single column that would be included in a table create or alter statement.	 *	 * @param   SimpleXMLElement  $field  The XML field definition.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getColumnSQL(SimpleXMLElement $field)	{		// TODO Incorporate into parent class and use $this.		$blobs = array('text', 'smalltext', 'mediumtext', 'largetext');		$fName = (string) $field['Field'];		$fType = (string) $field['Type'];		$fNull = (string) $field['Null'];		$fDefault = isset($field['Default']) ? (string) $field['Default'] : null;		$fExtra = (string) $field['Extra'];		$query = $this->db->quoteName($fName) . ' ' . $fType;		if ($fNull == 'NO')		{			if (in_array($fType, $blobs) || $fDefault === null)			{				$query .= ' NOT NULL';			}			else			{				// TODO Don't quote numeric values.				$query .= ' NOT NULL DEFAULT ' . $this->db->quote($fDefault);			}		}		else		{			if ($fDefault === null)			{				$query .= ' DEFAULT NULL';			}			else			{				// TODO Don't quote numeric values.				$query .= ' DEFAULT ' . $this->db->quote($fDefault);			}		}		if ($fExtra)		{			$query .= ' ' . strtoupper($fExtra);		}		return $query;	}	/**	 * Get the SQL syntax to drop a column.	 *	 * @param   string  $table  The table name.	 * @param   string  $name   The name of the field to drop.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getDropColumnSQL($table, $name)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' DROP COLUMN ' . $this->db->quoteName($name);		return $query;	}	/**	 * Get the SQL syntax to drop a key.	 *	 * @param   string  $table  The table name.	 * @param   string  $name   The name of the key to drop.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getDropKeySQL($table, $name)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' DROP KEY ' . $this->db->quoteName($name);		return $query;	}	/**	 * Get the SQL syntax to drop a key.	 *	 * @param   string  $table  The table name.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getDropPrimaryKeySQL($table)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' DROP PRIMARY KEY';		return $query;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   array  $keys  An array of objects that comprise the keys for the table.	 *	 * @return  array  The lookup array. array({key name} => array(object, ...))	 *	 * @since   11.1	 * @throws  Exception	 */	protected function getKeyLookup($keys)	{		// First pass, create a lookup of the keys.		$lookup = array();		foreach ($keys as $key)		{			if ($key instanceof SimpleXMLElement)			{				$kName = (string) $key['Key_name'];			}			else			{				$kName = $key->Key_name;			}			if (empty($lookup[$kName]))			{				$lookup[$kName] = array();			}			$lookup[$kName][] = $key;		}		return $lookup;	}	/**	 * Get the SQL syntax for a key.	 *	 * @param   array  $columns  An array of SimpleXMLElement objects comprising the key.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function getKeySQL($columns)	{		// TODO Error checking on array and element types.		$kNonUnique = (string) $columns[0]['Non_unique'];		$kName = (string) $columns[0]['Key_name'];		$kColumn = (string) $columns[0]['Column_name'];		$prefix = '';		if ($kName == 'PRIMARY')		{			$prefix = 'PRIMARY ';		}		elseif ($kNonUnique == 0)		{			$prefix = 'UNIQUE ';		}		$nColumns = count($columns);		$kColumns = array();		if ($nColumns == 1)		{			$kColumns[] = $this->db->quoteName($kColumn);		}		else		{			foreach ($columns as $column)			{				$kColumns[] = (string) $column['Column_name'];			}		}		$query = $prefix . 'KEY ' . ($kName != 'PRIMARY' ? $this->db->quoteName($kName) : '') . ' (' . implode(',', $kColumns) . ')';		return $query;	}	/**	 * Get the real name of the table, converting the prefix wildcard string if present.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  string	The real name of the table.	 *	 * @since   11.1	 */	protected function getRealTableName($table)	{		// TODO Incorporate into parent class and use $this.		$prefix = $this->db->getPrefix();		// Replace the magic prefix if found.		$table = preg_replace('|^#__|', $prefix, $table);		return $table;	}	/**	 * Merges the incoming structure definition with the existing structure.	 *	 * @return  void	 *	 * @note    Currently only supports XML format.	 * @since   11.1	 * @throws  Exception on error.	 * @todo    If it's not XML convert to XML first.	 */	protected function mergeStructure()	{		$prefix = $this->db->getPrefix();		$tables = $this->db->getTableList();		if ($this->from instanceof SimpleXMLElement)		{			$xml = $this->from;		}		else		{			$xml = new SimpleXMLElement($this->from);		}		// Get all the table definitions.		$xmlTables = $xml->xpath('database/table_structure');		foreach ($xmlTables as $table)		{			// Convert the magic prefix into the real table name.			$tableName = (string) $table['name'];			$tableName = preg_replace('|^#__|', $prefix, $tableName);			if (in_array($tableName, $tables))			{				// The table already exists. Now check if there is any difference.				if ($queries = $this->getAlterTableSQL($xml->database->table_structure))				{					// Run the queries to upgrade the data structure.					foreach ($queries as $query)					{						$this->db->setQuery($query);						try						{							$this->db->execute();						}						catch (RuntimeException $e)						{							$this->addLog('Fail: ' . $this->db->getQuery());							throw $e;						}						$this->addLog('Pass: ' . $this->db->getQuery());					}				}			}			else			{				// This is a new table.				$query = $this->xmlToCreate($table);				$this->db->setQuery($query);				try				{					$this->db->execute();				}				catch (RuntimeException $e)				{					$this->addLog('Fail: ' . $this->db->getQuery());					throw $e;				}				$this->addLog('Pass: ' . $this->db->getQuery());			}		}	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysqli  $db  The database connector.	 *	 * @return  JDatabaseImporterMysqli  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysqli $db)	{		$this->db = $db;		return $this;	}	/**	 * Sets an internal option to merge the structure based on the input data.	 *	 * @param   boolean  $setting  True to export the structure, false to not.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function withStructure($setting = true)	{		$this->options->withStructure = (boolean) $setting;		return $this;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Search.contacts * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Contacts Search plugin * * @package     Joomla.Plugin * @subpackage  Search.contacts * @since       1.6 */class PlgSearchContacts extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * @return array An array of search areas	 */	public function onContentSearchAreas()	{		static $areas = array(			'contacts' => 'PLG_SEARCH_CONTACTS_CONTACTS'		);		return $areas;	}	/**	 * Contacts Search method	 *	 * The sql must return the following fields that are used in a common display	 * routine: href, title, section, created, text, browsernav	 * @param string Target search string	 * @param string matching option, exact|any|all	 * @param string ordering option, newest|oldest|popular|alpha|category	 */	public function onContentSearch($text, $phrase = '', $ordering = '', $areas = null)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		if (is_array($areas))		{			if (!array_intersect($areas, array_keys($this->onContentSearchAreas())))			{				return array();			}		}		$sContent = $this->params->get('search_content', 1);		$sArchived = $this->params->get('search_archived', 1);		$limit = $this->params->def('search_limit', 50);		$state = array();		if ($sContent)		{			$state[] = 1;		}		if ($sArchived)		{			$state[] = 2;		}		$text = trim($text);		if ($text == '')		{			return array();		}		$section = JText::_('PLG_SEARCH_CONTACTS_CONTACTS');		switch ($ordering)		{			case 'alpha':				$order = 'a.name ASC';				break;			case 'category':				$order = 'c.title ASC, a.name ASC';				break;			case 'popular':			case 'newest':			case 'oldest':			default:				$order = 'a.name DESC';		}		$text = $db->quote('%' . $db->escape($text, true) . '%', false);		$rows = array();		if (!empty($state))		{			$query = $db->getQuery(true);			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('c.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('c.id');			$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select(				'a.name AS title, \'\' AS created, a.con_position, a.misc, '					. $case_when . ',' . $case_when1 . ', '					. $query->concatenate(array("a.name", "a.con_position", "a.misc"), ",") . ' AS text,'					. $query->concatenate(array($db->quote($section), "c.title"), " / ") . ' AS section,'					. '\'2\' AS browsernav'			);			$query->from('#__contact_details AS a')				->join('INNER', '#__categories AS c ON c.id = a.catid')				->where(					'(a.name LIKE ' . $text . ' OR a.misc LIKE ' . $text . ' OR a.con_position LIKE ' . $text						. ' OR a.address LIKE ' . $text . ' OR a.suburb LIKE ' . $text . ' OR a.state LIKE ' . $text						. ' OR a.country LIKE ' . $text . ' OR a.postcode LIKE ' . $text . ' OR a.telephone LIKE ' . $text						. ' OR a.fax LIKE ' . $text . ') AND a.published IN (' . implode(',', $state) . ') AND c.published=1 '						. ' AND a.access IN (' . $groups . ') AND c.access IN (' . $groups . ')'				);			$query->group('a.id, a.con_position, a.misc, c.alias, c.id')				->order($order);			// Filter by language			if ($app->isSite() && JLanguageMultilang::isEnabled())			{				$tag = JFactory::getLanguage()->getTag();				$query->where('a.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')')					->where('c.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query, 0, $limit);			$rows = $db->loadObjectList();			if ($rows)			{				foreach ($rows as $key => $row)				{					$rows[$key]->href = 'index.php?option=com_contact&view=contact&id=' . $row->slug . '&catid=' . $row->catslug;					$rows[$key]->text = $row->title;					$rows[$key]->text .= ($row->con_position) ? ', ' . $row->con_position : '';					$rows[$key]->text .= ($row->misc) ? ', ' . $row->misc : '';				}			}		}		return $rows;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectNewsfeed');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds&layout=modal&tmpl=component');?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select fltrt">			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>				<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />				<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>				<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>				<select name="filter_language" class="inputbox" id="filter_language">					<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>					<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>				</select>			<?php endif; ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="title language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</th>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Content.loadmodule * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plug-in to enable loading modules into content (e.g. articles) * This uses the {loadmodule} syntax * * @package     Joomla.Plugin * @subpackage  Content.loadmodule * @since       1.5 */class PlgContentLoadmodule extends JPlugin{	protected static $modules = array();	protected static $mods = array();	/**	 * Plugin that loads module positions within content	 *	 * @param   string	The context of the content being passed to the plugin.	 * @param   object	The article object.  Note $article->text is also available	 * @param   object	The article params	 * @param   integer  The 'page' number	 */	public function onContentPrepare($context, &$article, &$params, $page = 0)	{		// Don't run this plugin when the content is being indexed		if ($context == 'com_finder.indexer')		{			return true;		}		// simple performance check to determine whether bot should process further		if (strpos($article->text, 'loadposition') === false && strpos($article->text, 'loadmodule') === false)		{			return true;		}		// expression to search for (positions)		$regex		= '/{loadposition\s+(.*?)}/i';		$style		= $this->params->def('style', 'none');		// expression to search for(modules)		$regexmod	= '/{loadmodule\s+(.*?)}/i';		$stylemod	= $this->params->def('style', 'none');		// Find all instances of plugin and put in $matches for loadposition		// $matches[0] is full pattern match, $matches[1] is the position		preg_match_all($regex, $article->text, $matches, PREG_SET_ORDER);		// No matches, skip this		if ($matches)		{			foreach ($matches as $match) {			$matcheslist = explode(',', $match[1]);			// We may not have a module style so fall back to the plugin default.			if (!array_key_exists(1, $matcheslist))			{				$matcheslist[1] = $style;			}			$position = trim($matcheslist[0]);			$style    = trim($matcheslist[1]);				$output = $this->_load($position, $style);				// We should replace only first occurrence in order to allow positions with the same name to regenerate their content:				$article->text = preg_replace("|$match[0]|", addcslashes($output, '\\$'), $article->text, 1);			}		}		// Find all instances of plugin and put in $matchesmod for loadmodule		preg_match_all($regexmod, $article->text, $matchesmod, PREG_SET_ORDER);		// If no matches, skip this		if ($matchesmod){			foreach ($matchesmod as $matchmod) {				$matchesmodlist = explode(',', $matchmod[1]);				//We may not have a specific module so set to null				if (!array_key_exists(1, $matchesmodlist))				{					$matchesmodlist[1] = null;				}				// We may not have a module style so fall back to the plugin default.				if (!array_key_exists(2, $matchesmodlist))				{					$matchesmodlist[2] = $stylemod;				}				$module = trim($matchesmodlist[0]);				$name   = trim($matchesmodlist[1]);				$style  = trim($matchesmodlist[2]);				// $match[0] is full pattern match, $match[1] is the module,$match[2] is the title				$output = $this->_loadmod($module, $name, $style);				// We should replace only first occurrence in order to allow positions with the same name to regenerate their content:				$article->text = preg_replace("|$matchmod[0]|", addcslashes($output, '\\$'), $article->text, 1);			}		}	}	protected function _load($position, $style = 'none')	{		if (!isset(self::$modules[$position]))		{			self::$modules[$position] = '';			$document	= JFactory::getDocument();			$renderer	= $document->loadRenderer('module');			$modules	= JModuleHelper::getModules($position);			$params		= array('style' => $style);			ob_start();			foreach ($modules as $module)			{				echo $renderer->render($module, $params);			}			self::$modules[$position] = ob_get_clean();		}		return self::$modules[$position];	}	// This is always going to get the first instance of the module type unless	// there is a title.	protected function _loadmod($module, $title, $style = 'none')	{		if (!isset(self::$mods[$module]))		{			self::$mods[$module] = '';			$document	= JFactory::getDocument();			$renderer	= $document->loadRenderer('module');			$mod		= JModuleHelper::getModule($module, $title);			// If the module without the mod_ isn't found, try it with mod_.			// This allows people to enter it either way in the content			if (!isset($mod)){				$name = 'mod_'.$module;				$mod  = JModuleHelper::getModule($name, $title);			}			$params = array('style' => $style);			ob_start();			echo $renderer->render($mod, $params);			self::$mods[$module] = ob_get_clean();		}		return self::$mods[$module];	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');/** * Package installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterPackage extends JAdapterInstance{	/**	 * Method of system	 *	 * @var    string	 *	 * @since  3.1	 */	protected $route = 'install';	/**	 * Load language from a path	 *	 * @param   string  $path  The path of the language.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path)	{		$this->manifest = $this->parent->getManifest();		$extension = 'pkg_' . strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->packagename, 'cmd'));		$lang = JFactory::getLanguage();		$source = $path;		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  int  The extension id	 *	 * @since   3.1	 */	public function install()	{		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extensions name		$filter = JFilterInput::getInstance();		$name = (string) $this->manifest->packagename;		$name = $filter->clean($name, 'cmd');		$this->set('name', $name);		$element = 'pkg_' . $filter->clean($this->manifest->packagename, 'cmd');		$this->set('element', $element);		// Get the component description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Set the installation path		$files = $this->manifest->files;		$group = (string) $this->manifest->packagename;		if (!empty($group))		{			$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/packages/' . implode(DIRECTORY_SEPARATOR, explode('/', $group)));		}		else		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_NO_PACK', JText::_('JLIB_INSTALLER_' . strtoupper($this->route))));			return false;		}		/*		 * If the package manifest already exists, then we will assume that the package is already		 * installed.		 */		if (file_exists(JPATH_MANIFESTS . '/packages/' . basename($this->parent->getPath('manifest'))))		{			// Look for an update function or update tag			$updateElement = $this->manifest->update;			// If $this->upgrade has already been set, or an update property exists in the manifest, update the extensions			if ($this->parent->isUpgrade() || $updateElement)			{				// Use the update route for all packaged extensions				$this->route = 'update';			}		}		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$this->scriptElement = $this->manifest->scriptfile;		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Preflight failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PACKAGE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		if ($folder = $files->attributes()->folder)		{			$source = $this->parent->getPath('source') . '/' . $folder;		}		else		{			$source = $this->parent->getPath('source');		}		// Install all necessary files		if (count($this->manifest->files->children()))		{			$i = 0;			foreach ($this->manifest->files->children() as $child)			{				$file = $source . '/' . $child;				if (is_dir($file))				{					// If it's actually a directory then fill it up					$package = array();					$package['dir'] = $file;					$package['type'] = JInstallerHelper::detectType($file);				}				else				{					// If it's an archive					$package = JInstallerHelper::unpack($file);				}				$tmpInstaller = new JInstaller;				$installResult = $tmpInstaller->{$this->route}($package['dir']);				if (!$installResult)				{					$this->parent->abort(						JText::sprintf(							'JLIB_INSTALLER_ABORT_PACK_INSTALL_ERROR_EXTENSION', JText::_('JLIB_INSTALLER_' . strtoupper($this->route)),							basename($file)						)					);					return false;				}				else				{					$results[$i] = array(						'name' => $tmpInstaller->manifest->name,						'result' => $installResult					);				}				$i++;			}		}		else		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_NO_FILES', JText::_('JLIB_INSTALLER_' . strtoupper($this->route))));			return false;		}		// Parse optional tags		$this->parent->parseLanguages($this->manifest->languages);		/*		 * ---------------------------------------------------------------------------------------------		 * Extension Registration		 * ---------------------------------------------------------------------------------------------		 */		$row = JTable::getInstance('extension');		$eid = $row->find(array('element' => strtolower($this->get('element')), 'type' => 'package'));		if ($eid)		{			$row->load($eid);		}		else		{			$row->name = $this->get('name');			$row->type = 'package';			$row->element = $this->get('element');			// There is no folder for modules			$row->folder = '';			$row->enabled = 1;			$row->protected = 0;			$row->access = 1;			$row->client_id = 0;			// Custom data			$row->custom_data = '';			$row->params = $this->parent->getParams();		}		// Update the manifest cache for the entry		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_ROLLBACK', $row->getError()));			return false;		}		/*		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Run the custom method based on the route		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, $this->route))		{			if ($this->parent->manifestClass->{$this->route}($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $this->parent->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/packages/' . basename($this->parent->getPath('manifest'));		if (!$this->parent->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$this->parent->abort(				JText::sprintf('JLIB_INSTALLER_ABORT_PACK_INSTALL_COPY_SETUP', JText::_('JLIB_INSTALLER_ABORT_PACK_INSTALL_NO_FILES'))			);			return false;		}		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			// First, we have to create a folder for the script if one isn't present			if (!file_exists($this->parent->getPath('extension_root')))			{				JFolder::create($this->parent->getPath('extension_root'));			}			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_root') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PACKAGE_INSTALL_MANIFEST'));					return false;				}			}		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight($this->route, $this, $results);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->extension_id;	}	/**	 * Updates a package	 *	 * The only difference between an update and a full install	 * is how we handle the database	 *	 * @return  void	 *	 * @since   3.1	 */	public function update()	{		$this->route = 'update';		$this->install();	}	/**	 * Custom uninstall method	 *	 * @param   integer  $id  The id of the package to uninstall.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$row = null;		$retval = true;		$row = JTable::getInstance('extension');		$row->load($id);		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_WARNCOREPACK'), JLog::WARNING, 'jerror');			return false;		}		$manifestFile = JPATH_MANIFESTS . '/packages/' . $row->get('element') . '.xml';		$manifest = new JInstallerManifestPackage($manifestFile);		// Set the package root path		$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/packages/' . $manifest->packagename);		// Because packages may not have their own folders we cannot use the standard method of finding an installation manifest		if (!file_exists($manifestFile))		{			// TODO: Fail?			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_MISSINGMANIFEST'), JLog::WARNING, 'jerror');			return false;		}		$xml = simplexml_load_file($manifestFile);		// If we cannot load the XML file return false		if (!$xml)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_LOAD_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// Check for a valid XML root tag.		if ($xml->getName() != 'extension')		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_INVALID_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// If there is an manifest class file, let's load it		$this->scriptElement = $manifest->scriptfile;		$manifestScript = (string) $manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('extension_root') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $row->element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		ob_start();		ob_implicit_flush(false);		// Run uninstall if possible		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))		{			$this->parent->manifestClass->uninstall($this);		}		$msg = ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		$error = false;		foreach ($manifest->filelist as $extension)		{			$tmpInstaller = new JInstaller;			$id = $this->_getExtensionID($extension->type, $extension->id, $extension->client, $extension->group);			$client = JApplicationHelper::getClientInfo($extension->client, true);			if ($id)			{				if (!$tmpInstaller->uninstall($extension->type, $id, $client->id))				{					$error = true;					JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_NOT_PROPER', basename($extension->filename)), JLog::WARNING, 'jerror');				}			}			else			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_UNKNOWN_EXTENSION'), JLog::WARNING, 'jerror');			}		}		// Remove any language files		$this->parent->removeFiles($xml->languages);		// Clean up manifest file after we're done if there were no errors		if (!$error)		{			JFile::delete($manifestFile);			$folder = $this->parent->getPath('extension_root');			if (JFolder::exists($folder))			{				JFolder::delete($folder);			}			$row->delete();		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_UNINSTALL_MANIFEST_NOT_REMOVED'), JLog::WARNING, 'jerror');		}		// Return the result up the line		return $retval;	}	/**	 * Gets the extension id.	 *	 * @param   string   $type    The extension type.	 * @param   string   $id      The name of the extension (the element field).	 * @param   integer  $client  The application id (0: Joomla CMS site; 1: Joomla CMS administrator).	 * @param   string   $group   The extension group (mainly for plugins).	 *	 * @return  integer	 *	 * @since   3.1	 */	protected function _getExtensionID($type, $id, $client, $group)	{		$db = $this->parent->getDbo();		$query = $db->getQuery(true)			->select('extension_id')			->from('#__extensions')			->where('type = ' . $db->quote($type))			->where('element = ' . $db->quote($id));		switch ($type)		{			case 'plugin':				// Plugins have a folder but not a client				$query->where('folder = ' . $db->quote($group));				break;			case 'library':			case 'package':			case 'component':				// Components, packages and libraries don't have a folder or client.				// Included for completeness.				break;			case 'language':			case 'module':			case 'template':				// Languages, modules and templates have a client but not a folder				$client = JApplicationHelper::getClientInfo($client, true);				$query->where('client_id = ' . (int) $client->id);				break;		}		$db->setQuery($query);		$result = $db->loadResult();		// Note: For templates, libraries and packages their unique name is their key.		// This means they come out the same way they came in.		return $result;	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$manifestPath = JPATH_MANIFESTS . '/packages/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterPackage instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerPackage extends JInstallerAdapterPackage{}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') !== '0') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_TAGS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<?php if ($this->items == false || $n == 0) : ?>		<p> <?php echo JText::_('COM_TAGS_NO_ITEMS'); ?></p></div>	<?php else : ?>		<table class="category table table-striped table-bordered table-hover">			<?php if ($this->params->get('show_headings')) : ?>			<thead>				<tr>					<th id="categorylist_header_title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'c.core_title', $listDirn, $listOrder); ?>					</th>					<?php if ($date = $this->params->get('tag_list_show_date')) : ?>						<th id="categorylist_header_date">							<?php if ($date == "created") : ?>								<?php echo JHtml::_('grid.sort', 'COM_TAGS_'.$date.'_DATE', 'c.core_created_time', $listDirn, $listOrder); ?>							<?php elseif ($date == "modified") : ?>								<?php echo JHtml::_('grid.sort', 'COM_TAGS_'.$date.'_DATE', 'c.core_modified_time', $listDirn, $listOrder); ?>							<?php elseif ($date == "published") : ?>								<?php echo JHtml::_('grid.sort', 'COM_TAGS_'.$date.'_DATE', 'c.core_publish_up', $listDirn, $listOrder); ?>							<?php endif; ?>						</th>					<?php endif; ?>				</tr>			</thead>			<?php endif; ?>			<tbody>				<?php foreach ($this->items as $i => $item) : ?>					<?php if ($this->items[$i]->core_state == 0) : ?>					 <tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">					<?php else: ?>					<tr class="cat-list-row<?php echo $i % 2; ?>" >					<?php endif; ?>						<td headers="categorylist_header_title" class="list-title">							<a href="<?php echo JRoute::_(TagsHelperRoute::getItemRoute($item->content_item_id, $item->core_alias, $item->core_catid, $item->core_language, $item->type_alias, $item->router)); ?>">								<?php echo $this->escape($item->core_title); ?>							</a>							<?php if ($item->core_state == 0) : ?>								<span class="list-published label label-warning">									<?php echo JText::_('JUNPUBLISHED'); ?>								</span>							<?php endif; ?>						</td>						<?php if ($this->params->get('tag_list_show_date')) : ?>							<td headers="categorylist_header_date" class="list-date small">								<?php								echo JHtml::_(									'date', $item->displayDate,									$this->escape($this->params->get('date_format', JText::_('DATE_FORMAT_LC3')))								); ?>							</td>						<?php endif; ?>					</tr>				<?php endforeach; ?>			</tbody>		</table></div>	<?php endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Password Crypter * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.2 */class JCryptPasswordSimple implements JCryptPassword{	/**	 * @var    integer  The cost parameter for hashing algorithms.	 * @since  12.2	 */	protected $cost = 10;	/**	 * @var    string   The default hash type	 * @since  12.3	 */	protected $defaultType = '$2y$';	/**	 * Creates a password hash	 *	 * @param   string  $password  The password to hash.	 * @param   string  $type      The hash type.	 *	 * @return  string  The hashed password.	 *	 * @since   12.2	 */	public function create($password, $type = null)	{		if (empty($type))		{			$type = $this->defaultType;		}		switch ($type)		{			case '$2a$':			case JCryptPassword::BLOWFISH:				$salt = $this->getSalt(22);				if (version_compare(PHP_VERSION, '5.3.7') >= 0)				{					$type = '$2y$';				}				else				{					$type = '$2a$';				}				$salt = $type . str_pad($this->cost, 2, '0', STR_PAD_LEFT) . '$' . $this->getSalt(22);			return crypt($password, $salt);			case JCryptPassword::MD5:				$salt = $this->getSalt(12);				$salt = '$1$' . $salt;			return crypt($password, $salt);			case JCryptPassword::JOOMLA:				$salt = $this->getSalt(32);			return md5($password . $salt) . ':' . $salt;			default:				throw new InvalidArgumentException(sprintf('Hash type %s is not supported', $type));				break;		}	}	/**	 * Sets the cost parameter for the generated hash for algorithms that use a cost factor.	 *	 * @param   integer  $cost  The new cost value.	 *	 * @return  void	 *	 * @since   12.2	 */	public function setCost($cost)	{		$this->cost = $cost;	}	/**	 * Generates a salt of specified length. The salt consists of characters in the set [./0-9A-Za-z].	 *	 * @param   integer  $length  The number of characters to return.	 *	 * @return  string  The string of random characters.	 *	 * @since   12.2	 */	protected function getSalt($length)	{		$bytes = ceil($length * 6 / 8);		$randomData = str_replace('+', '.', base64_encode(JCrypt::genRandomBytes($bytes)));		return substr($randomData, 0, $length);	}	/**	 * Verifies a password hash	 *	 * @param   string  $password  The password to verify.	 * @param   string  $hash      The password hash to check.	 *	 * @return  boolean  True if the password is valid, false otherwise.	 *	 * @since   12.2	 */	public function verify($password, $hash)	{		// Check if the hash is a blowfish hash.		if (substr($hash, 0, 4) == '$2a$' || substr($hash, 0, 4) == '$2y$')		{			if (version_compare(PHP_VERSION, '5.3.7') >= 0)			{				$type = '$2y$';			}			else			{				$type = '$2a$';			}			$hash = $type . substr($hash, 4);			return (crypt($password, $hash) === $hash);		}		// Check if the hash is an MD5 hash.		if (substr($hash, 0, 3) == '$1$')		{			return (crypt($password, $hash) === $hash);		}		// Check if the hash is a Joomla hash.		if (preg_match('#[a-z0-9]{32}:[A-Za-z0-9]{32}#', $hash) === 1)		{			return md5($password . substr($hash, 33)) == substr($hash, 0, 32);		}		return false;	}	/**	 * Sets a default type	 *	 * @param   string  $type  The value to set as default.	 *	 * @return  void	 *	 * @since   12.3	 */	public function setDefaultType($type)	{		if (!empty($type))		{			$this->defaultType = $type;		}	}	/**	 * Gets the default type	 *	 * @return   string  $type  The default type	 *	 * @since   12.3	 */	public function getDefaultType()	{		return $this->defaultType;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_wrapper * @since       1.5 */class WrapperViewWrapper extends JViewLegacy{	/**	 * @since  1.5	 */	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$document	= JFactory::getDocument();		$menus	= $app->getMenu();		$menu	= $menus->getActive();		$params = $app->getParams();		// because the application sets a default page title, we need to get it		// right from the menu item itself		$title = $params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($params->get('menu-meta_description'))		{			$this->document->setDescription($params->get('menu-meta_description'));		}		if ($params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $params->get('menu-meta_keywords'));		}		if ($params->get('robots'))		{			$this->document->setMetadata('robots', $params->get('robots'));		}		$wrapper = new stdClass;		// auto height control		if ($params->def('height_auto'))		{			$wrapper->load = 'onload="iFrameHeight()"';		}		else		{			$wrapper->load = '';		}		$url = $params->def('url', '');		if ($params->def('add_scheme', 1))		{			// adds 'http://' if none is set			if (substr($url, 0, 1) == '/')			{				// relative url in component. use server http_host.				$wrapper->url = 'http://'. $_SERVER['HTTP_HOST'] . $url;			}			elseif (!strstr($url, 'http') && !strstr($url, 'https'))			{				$wrapper->url = 'http://'. $url;			}			else {				$wrapper->url = $url;			}		}		else		{			$wrapper->url = $url;		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params = &$params;		$this->wrapper = &$wrapper;		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tags Model * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsModelTags extends JModelList{	/**	 * Constructor.	 *	 * @param    array    An optional associative array of configuration settings.	 * @see        JController	 * @since      3.0.3	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'published', 'a.published',				'access', 'a.access', 'access_level',				'language', 'a.language',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'created_time', 'a.created_time',				'created_user_id', 'a.created_user_id',				'lft', 'a.lft',				'rgt', 'a.rgt',				'level', 'a.level',				'path', 'a.path',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return    void	 * @since    3.1	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$context = $this->context;		$search = $this->getUserStateFromRequest($context . '.search', 'filter_search');		$this->setState('filter.search', $search);		$level = $this->getUserStateFromRequest($context . '.filter.level', 'filter_level', 0, 'int');		$this->setState('filter.level', $level);		$access = $this->getUserStateFromRequest($context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$published = $this->getUserStateFromRequest($context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		$language = $this->getUserStateFromRequest($context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_tags');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   3.1	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Method to create a query for a list of items.	 *	 * @return  string	 *	 * @since  3.1	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.note, a.published, a.access' .					', a.checked_out, a.checked_out_time, a.created_user_id' .					', a.path, a.parent_id, a.level, a.lft, a.rgt' .					', a.language'			)		);		$query->from('#__tags AS a')			->where('a.alias <> ' . $db->quote('root'));		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the users for the author.		$query->select('ua.name AS author_name')			->join('LEFT', '#__users AS ua ON ua.id = a.created_user_id')			->select('ug.title AS access_title')			->join('LEFT', '#__usergroups AS ug on ug.id = a.access');		// Filter on the level.		if ($level = $this->getState('filter.level'))		{			$query->where('a.level <= ' . (int) $level);		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'author:') === 0)			{				$search = $db->quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(ua.name LIKE ' . $search . ' OR ua.username LIKE ' . $search . ')');			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ' OR a.note LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Add the list ordering clause		$listOrdering = $this->getState('list.ordering', 'a.lft');		$listDirn = $db->escape($this->getState('list.direction', 'ASC'));		if ($listOrdering == 'a.access')		{			$query->order('a.access ' . $listDirn . ', a.lft ' . $listDirn);		}		else		{			$query->order($db->escape($listOrdering) . ' ' . $listDirn);		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method override to check-in a record or an array of record	 *	 * @param   mixed  $pks  The ID of the primary key or an array of IDs	 *	 * @return  mixed  Boolean false if there is an error, otherwise the count of records checked in.	 *	 * @since   12.2	 */	public function checkin($pks = array())	{		$pks = (array) $pks;		$table = $this->getTable();		$count = 0;		if (empty($pks))		{			$pks = array((int) $this->getState($this->getName() . '.id'));		}		// Check in all items.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				if ($table->checked_out > 0)				{					// Only attempt to check the row in if it exists.					if ($pk)					{						$user = JFactory::getUser();						// Get an instance of the row to checkin.						$table = $this->getTable();						if (!$table->load($pk))						{							$this->setError($table->getError());							return false;						}						// Check if this is the user having previously checked out the row.						if ($table->checked_out > 0 && $table->checked_out != $user->get('id') && !$user->authorise('core.admin', 'com_checkin'))						{							$this->setError(JText::_('JLIB_APPLICATION_ERROR_CHECKIN_USER_MISMATCH'));							return false;						}						// Attempt to check the row in.						if (!$table->checkin($pk))						{							$this->setError($table->getError());							return false;						}					}					$count++;				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return $count;	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   3.1	 */	public function getTable($type = 'Tag', $prefix = 'TagsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><form action="<?php echo JRoute::_('index.php?option=com_admin&amp;view=help'); ?>" method="post" name="adminForm" id="adminForm">	<div class="row-fluid">		<div id="sidebar" class="span3">			<div id="filter-bar" class="btn-toolbar">				<div class="filter-search input-append">					<label for="helpsearch" class="element-invisible"><?php echo JText::_('COM_ADMIN_SEARCH');?></label>					<input type="text" name="helpsearch" class="input-small" placeholder="<?php echo JText::_('COM_ADMIN_SEARCH'); ?>" id="helpsearch" value="<?php echo $this->escape($this->help_search);?>" title="<?php echo JText::_('COM_ADMIN_SEARCH'); ?>" /><button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button><button class="btn tip" type="button" onclick="f=document.adminForm;f.helpsearch.value='';f.submit()" class="hasTooltip" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>				</div>			</div>			<div class="clearfix"> </div>			<div class="sidebar-nav">				<ul class="nav nav-list">					<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_START_HERE'), JText::_('COM_ADMIN_START_HERE'), array('target' => 'helpFrame')) ?></li>					<li><?php echo JHtml::_('link', $this->latest_version_check, JText::_('COM_ADMIN_LATEST_VERSION_CHECK'), array('target' => 'helpFrame')) ?></li>					<li><?php echo JHtml::_('link', 'http://www.gnu.org/licenses/gpl-2.0.html', JText::_('COM_ADMIN_LICENSE'), array('target' => 'helpFrame')) ?></li>					<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_GLOSSARY'), JText::_('COM_ADMIN_GLOSSARY'), array('target' => 'helpFrame')) ?></li>					<hr class="hr-condensed" />					<li class="nav-header"><?php echo JText::_('COM_ADMIN_ALPHABETICAL_INDEX'); ?></li>					<?php foreach ($this->toc as $k => $v):?>						<li>						    <?php $url = JHelp::createUrl('JHELP_'.strtoupper($k)); ?>							<?php echo JHtml::_('link', $url, $v, array('target' => 'helpFrame'));?>						</li>					<?php endforeach;?>				</ul>			</div>		</div>		<div class="span9">			<iframe name="helpFrame" height="2100px" src="<?php echo $this->page;?>" class="helpFrame table table-bordered"></iframe>		</div>	</div>	<input class="textarea" type="hidden" name="option" value="com_admin" /></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?>		<li class="imgOutline thumbnail height-80 width-80 center">			<?php if ($user->authorise('core.delete', 'com_media')):?>				<a class="close delete-item" target="_top" href="index.php?option=com_media&amp;task=folder.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_folder->name; ?>" rel="<?php echo $this->_tmp_folder->name; ?> :: <?php echo $this->_tmp_folder->files + $this->_tmp_folder->folders; ?>" title="<?php echo JText::_('JACTION_DELETE');?>">x</a>				<input class="pull-left" type="checkbox" name="rm[]" value="<?php echo $this->_tmp_folder->name; ?>" />				<div class="clearfix"></div>			<?php endif;?>			<div class="height-50">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe">					<i class="icon-folder-2"></i>				</a>			</div>			<div class="small">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe"><?php echo JHtml::_('string.truncate', $this->_tmp_folder->name, 10, false); ?></a>			</div>		</li>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a template style. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesViewStyle extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = TemplatesHelper::getActions();		JToolbarHelper::title(			$isNew ? JText::_('COM_TEMPLATES_MANAGER_ADD_STYLE')			: JText::_('COM_TEMPLATES_MANAGER_EDIT_STYLE'), 'thememanager'		);		// If not checked out, can save the item.		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('style.apply');			JToolbarHelper::save('style.save');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('style.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('style.cancel');		}		else		{			JToolbarHelper::cancel('style.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		// Get the help information for the template item.		$lang = JFactory::getLanguage();		$help = $this->get('Help');		if ($lang->hasKey($help->url))		{			$debug = $lang->setDebug(false);			$url = JText::_($help->url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($help->key, false, $url);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags helper. * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsHelper{	/**	 * Configure the Submenu links.	 *	 * @param   string  The extension.	 *	 * @return  void	 *	 * @since   3.1	 */	public static function addSubmenu($extension)	{		$parts = explode('.', $extension);		$component = $parts[0];		if (count($parts) > 1)		{			$section = $parts[1];		}		// Try to find the component helper.		$file = JPath::clean(JPATH_ADMINISTRATOR . '/components/com_tags/helpers/tags.php');		if (file_exists($file))		{			require_once $file;			$cName = 'TagsHelper';			if (class_exists($cName))			{				if (is_callable(array($cName, 'addSubmenu')))				{					$lang = JFactory::getLanguage();					// loading language file from the administrator/language directory then					// loading language file from the administrator/components/*extension*/language directory						$lang->load($component, JPATH_BASE, null, false, false)					||	$lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), null, false, false)					||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)					||	$lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), $lang->getDefault(), false, false);				}			}		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   3.1	 */	public static function getActions()	{		$user   = JFactory::getUser();		$result = new JObject;		$assetName = 'com_tags';		$level     = 'component';		$actions   = JAccess::getActions('com_tags', $level);		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ol class="nav nav-tabs nav-stacked"><?php foreach ($displayData->get('link_items') as $item) : ?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/models/category.php';/** * HTML Contact View class for the Contact component * * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactViewContact extends JViewLegacy{	protected $state;	protected $form;	protected $item;	protected $return_page;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		$dispatcher = JEventDispatcher::getInstance();		$state		= $this->get('State');		$item		= $this->get('Item');		$this->form	= $this->get('Form');		// Get the parameters		$params = JComponentHelper::getParams('com_contact');		if ($item)		{			// If we found an item, merge the item parameters			$params->merge($item->params);			// Get Category Model data			$categoryModel = JModelLegacy::getInstance('Category', 'ContactModel', array('ignore_request' => true));			$categoryModel->setState('category.id', $item->catid);			$categoryModel->setState('list.ordering', 'a.name');			$categoryModel->setState('list.direction', 'asc');			$categoryModel->setState('filter.published', 1);			$contacts = $categoryModel->getItems();		}		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// check if access is not public		$groups	= $user->getAuthorisedViewLevels();		$return = '';		if ((!in_array($item->access, $groups)) || (!in_array($item->category_access, $groups)))		{			JError::raiseWarning(403, JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		$options['category_id']	= $item->catid;		$options['order by']	= 'a.default_con DESC, a.ordering ASC';		// Handle email cloaking		if ($item->email_to && $params->get('show_email'))		{			$item->email_to = JHtml::_('email.cloak', $item->email_to);		}			if ($params->get('show_street_address') || $params->get('show_suburb') || $params->get('show_state') || $params->get('show_postcode') || $params->get('show_country'))			{				if (!empty ($item->address) || !empty ($item->suburb) || !empty ($item->state) || !empty ($item->country) || !empty ($item->postcode))				{				$params->set('address_check', 1);			}		}		else		{			$params->set('address_check', 0);		}		// Manage the display mode for contact detail groups		switch ($params->get('contact_icons'))		{			case 1 :				// text				$params->set('marker_address',   JText::_('COM_CONTACT_ADDRESS') . ": ");				$params->set('marker_email',     JText::_('JGLOBAL_EMAIL') . ": ");				$params->set('marker_telephone', JText::_('COM_CONTACT_TELEPHONE') . ": ");				$params->set('marker_fax',       JText::_('COM_CONTACT_FAX') . ": ");				$params->set('marker_mobile',    JText::_('COM_CONTACT_MOBILE') . ": ");				$params->set('marker_misc',      JText::_('COM_CONTACT_OTHER_INFORMATION') . ": ");				$params->set('marker_class',     'jicons-text');				break;			case 2 :				// none				$params->set('marker_address',   '');				$params->set('marker_email',     '');				$params->set('marker_telephone', '');				$params->set('marker_mobile',    '');				$params->set('marker_fax',       '');				$params->set('marker_misc',      '');				$params->set('marker_class',     'jicons-none');				break;			default :				// icons				$image1 = JHtml::_('image', 'contacts/'.$params->get('icon_address', 'con_address.png'), JText::_('COM_CONTACT_ADDRESS').": ", null, true);				$image2 = JHtml::_('image', 'contacts/'.$params->get('icon_email', 'emailButton.png'), JText::_('JGLOBAL_EMAIL').": ", null, true);				$image3 = JHtml::_('image', 'contacts/'.$params->get('icon_telephone', 'con_tel.png'), JText::_('COM_CONTACT_TELEPHONE').": ", null, true);				$image4 = JHtml::_('image', 'contacts/'.$params->get('icon_fax', 'con_fax.png'), JText::_('COM_CONTACT_FAX').": ", null, true);				$image5 = JHtml::_('image', 'contacts/'.$params->get('icon_misc', 'con_info.png'), JText::_('COM_CONTACT_OTHER_INFORMATION').": ", null, true);				$image6 = JHtml::_('image', 'contacts/'.$params->get('icon_mobile', 'con_mobile.png'), JText::_('COM_CONTACT_MOBILE').": ", null, true);				$params->set('marker_address',   $image1);				$params->set('marker_email',     $image2);				$params->set('marker_telephone', $image3);				$params->set('marker_fax',       $image4);				$params->set('marker_misc',      $image5);				$params->set('marker_mobile',    $image6);				$params->set('marker_class',     'jicons-icons');				break;		}		// Add links to contacts		if ($params->get('show_contact_list') && count($contacts) > 1)		{			foreach ($contacts as &$contact)			{				$contact->link = JRoute::_(ContactHelperRoute::getContactRoute($contact->slug, $contact->catid));			}			$item->link = JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid));		}		JHtml::_('behavior.formvalidation');		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->contact  = &$item;		$this->params   = &$params;		$this->return   = &$return;		$this->state    = &$state;		$this->item     = &$item;		$this->user     = &$user;		$this->contacts = &$contacts;		$item->tags = new JHelperTags;		$item->tags->getItemTags('com_contact.contact', $this->item->id);		// Override the layout only if this is not the active menu item		// If it is the active menu item, then the view and item id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=contact') === false) || (strpos($active->link, '&id=' . (string) $this->item->id) === false)))		{			if ($layout = $params->get('contact_layout'))			{				$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		$id = (int) @$menu->query['id'];		// if the menu item does not concern this contact		if ($menu && ($menu->query['option'] != 'com_contact' || $menu->query['view'] != 'contact' || $id != $this->item->id))		{			// If this is not a single contact menu item, set the page title to the contact title			if ($this->item->name)			{				$title = $this->item->name;			}			$path = array(array('title' => $this->contact->name, 'link' => ''));			$category = JCategories::getInstance('Contact')->get($this->contact->catid);			while ($category && ($menu->query['option'] != 'com_contact' || $menu->query['view'] == 'contact' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => ContactHelperRoute::getCategoryRoute($this->contact->catid));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		if (empty($title))		{			$title = $this->item->name;		}		$this->document->setTitle($title);		if ($this->item->metadesc)		{			$this->document->setDescription($this->item->metadesc);		}		elseif (!$this->item->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->item->metakey)		{			$this->document->setMetadata('keywords', $this->item->metakey);		}		elseif (!$this->item->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		$mdata = $this->item->metadata->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.Isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to pagination rendering. * * pagination_list_footer * 	Input variable $list is an array with offsets: * 		$list[limit]		: int * 		$list[limitstart]	: int * 		$list[total]		: int * 		$list[limitfield]	: string * 		$list[pagescounter]	: string * 		$list[pageslinks]	: string * * pagination_list_render * 	Input variable $list is an array with offsets: * 		$list[all] * 			[data]		: string * 			[active]	: boolean * 		$list[start] * 			[data]		: string * 			[active]	: boolean * 		$list[previous] * 			[data]		: string * 			[active]	: boolean * 		$list[next] * 			[data]		: string * 			[active]	: boolean * 		$list[end] * 			[data]		: string * 			[active]	: boolean * 		$list[pages] * 			[{PAGE}][data]		: string * 			[{PAGE}][active]	: boolean * * pagination_item_active * 	Input variable $item is an object with fields: * 		$item->base	: integer * 		$item->link	: string * 		$item->text	: string * * pagination_item_inactive * 	Input variable $item is an object with fields: * 		$item->base	: integer * 		$item->link	: string * 		$item->text	: string * * This gives template designers ultimate control over how pagination is rendered. * * NOTE: If you override pagination_item_active OR pagination_item_inactive you MUST override them both *//** * Renders the pagination footer * * @param   array  $list  Array containing pagination footer * * @return  string  HTML markup for the full pagination footer * * @since   3.0 */function pagination_list_footer($list){	$html = "<div class=\"pagination pagination-toolbar\">\n";	$html .= $list['pageslinks'];	$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"" . $list['limitstart'] . "\" />";	$html .= "\n</div>";	return $html;}/** * Renders the pagination list * * @param   array  $list  Array containing pagination information * * @return  string  HTML markup for the full pagination object * * @since   3.0 */function pagination_list_render($list){	// Calculate to display range of pages	$currentPage = 1;	$range = 1;	$step = 5;	foreach ($list['pages'] as $k => $page)	{		if (!$page['active'])		{			$currentPage = $k;		}	}	if ($currentPage >= $step)	{		if ($currentPage % $step == 0)		{			$range = ceil($currentPage / $step) + 1;		}		else		{			$range = ceil($currentPage / $step);		}	}	$html = '<ul class="pagination-list">';	$html .= $list['start']['data'];	$html .= $list['previous']['data'];	foreach ($list['pages'] as $k => $page)	{		if (in_array($k, range($range * $step - ($step + 1), $range * $step)))		{			if (($k % $step == 0 || $k == $range * $step - ($step + 1)) && $k != $currentPage && $k != $range * $step - $step)			{				$page['data'] = preg_replace('#(<a.*?>).*?(</a>)#', '$1...$2', $page['data']);			}		}		$html .= $page['data'];	}	$html .= $list['next']['data'];	$html .= $list['end']['data'];	$html .= '</ul>';	return $html;}/** * Renders an active item in the pagination block * * @param   JPaginationObject  $item  The current pagination object * * @return  string  HTML markup for active item * * @since   3.0 */function pagination_item_active(&$item){	// Check for "Start" item	if ($item->text == JText::_('JLIB_HTML_START'))	{		$display = '<i class="icon-first"></i>';	}	// Check for "Prev" item	if ($item->text == JText::_('JPREV'))	{		$display = '<i class="icon-previous"></i>';	}	// Check for "Next" item	if ($item->text == JText::_('JNEXT'))	{		$display = '<i class="icon-next"></i>';	}	// Check for "End" item	if ($item->text == JText::_('JLIB_HTML_END'))	{		$display = '<i class="icon-last"></i>';	}	// If the display object isn't set already, just render the item with its text	if (!isset($display))	{		$display = $item->text;	}	if ($item->base > 0)	{		$limit = 'limitstart.value=' . $item->base;	}	else	{		$limit = 'limitstart.value=0';	}	return '<li><a href="#" title="' . $item->text . '" onclick="document.adminForm.' . $item->prefix . $limit . '; Joomla.submitform();return false;">' . $display . '</a></li>';}/** * Renders an inactive item in the pagination block * * @param   JPaginationObject  $item  The current pagination object * * @return  string  HTML markup for inactive item * * @since   3.0 */function pagination_item_inactive(&$item){	// Check for "Start" item	if ($item->text == JText::_('JLIB_HTML_START'))	{		return '<li class="disabled"><a><i class="icon-first"></i></a></li>';	}	// Check for "Prev" item	if ($item->text == JText::_('JPREV'))	{		return '<li class="disabled"><a><i class="icon-previous"></i></a></li>';	}	// Check for "Next" item	if ($item->text == JText::_('JNEXT'))	{		return '<li class="disabled"><a><i class="icon-next"></i></a></li>';	}	// Check for "End" item	if ($item->text == JText::_('JLIB_HTML_END'))	{		return '<li class="disabled"><a><i class="icon-last"></i></a></li>';	}	// Check if the item is the active page	if (isset($item->active) && ($item->active))	{		return '<li class="active"><a>' . $item->text . '</a></li>';	}	// Doesn't match any other condition, render a normal item	return '<li class="disabled"><a>' . $item->text . '</a></li>';}
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');/** * UpdateAdapter class. * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 */class JUpdateAdapter extends JAdapterInstance{	/**	 * @var    resource	 * @since  12.1	 */	protected $xmlParser;	/**	 * @var    array	 * @since  12.1	 */	protected $stack = array('base');	/**	 * ID of update site	 *	 * @var    string	 * @since  12.1	 */	protected $updateSiteId = 0;	/**	 * Columns in the extensions table to be updated	 *	 * @var    array	 * @since  12.1	 */	protected $updatecols = array('NAME', 'ELEMENT', 'TYPE', 'FOLDER', 'CLIENT', 'VERSION', 'DESCRIPTION', 'INFOURL');	/**	 * Gets the reference to the current direct parent	 *	 * @return  object	 *	 * @since   11.1	 */	protected function _getStackLocation()	{		return implode('->', $this->stack);	}	/**	 * Gets the reference to the last tag	 *	 * @return  object	 *	 * @since   11.1	 */	protected function _getLastTag()	{		return $this->stack[count($this->stack) - 1];	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class for the button bar. * * @package  Joomla.Administrator * @since    1.5 */abstract class JToolbarHelper{	/**	 * Title cell.	 * For the title and toolbar to be rendered correctly,	 * this title fucntion must be called before the starttable function and the toolbars icons	 * this is due to the nature of how the css has been used to postion the title in respect to the toolbar.	 *	 * @param   string  $title  The title.	 * @param   string  $icon   The space-separated names of the image.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function title($title, $icon = 'generic.png')	{		// Strip the extension.		$icons = explode(' ', $icon);		foreach ($icons as &$icon)		{			$icon = 'icon-48-' . preg_replace('#\.[^.]*$#', '', $icon);		}		$html = '<div class="pagetitle ' . htmlspecialchars(implode(' ', $icons)) . '"><h2>' . $title . '</h2></div>';		$app = JFactory::getApplication();		$app->JComponentTitle = $html;		JFactory::getDocument()->setTitle($app->getCfg('sitename') . ' - ' . JText::_('JADMINISTRATION') . ' - ' . $title);	}	/**	 * Writes a spacer cell.	 *	 * @param   string  $width  The width for the cell	 *	 * @return  void	 *	 * @since   1.5	 */	public static function spacer($width = '')	{		$bar = JToolbar::getInstance('toolbar');		// Add a spacer.		$bar->appendButton('Separator', 'spacer', $width);	}	/**	 * Writes a divider between menu buttons	 *	 * @return  void	 *	 * @since   1.5	 */	public static function divider()	{		$bar = JToolbar::getInstance('toolbar');		// Add a divider.		$bar->appendButton('Separator', 'divider');	}	/**	 * Writes a custom option and task button for the button bar.	 *	 * @param   string  $task        The task to perform (picked up by the switch($task) blocks.	 * @param   string  $icon        The image to display.	 * @param   string  $iconOver    The image to display when moused over.	 * @param   string  $alt         The alt text for the icon image.	 * @param   bool    $listSelect  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function custom($task = '', $icon = '', $iconOver = '', $alt = '', $listSelect = true)	{		$bar = JToolbar::getInstance('toolbar');		// Strip extension.		$icon = preg_replace('#\.[^.]*$#', '', $icon);		// Add a standard button.		$bar->appendButton('Standard', $icon, $alt, $task, $listSelect);	}	/**	 * Writes a preview button for a given option (opens a popup window).	 *	 * @param   string  $url            The name of the popup file (excluding the file extension)	 * @param   bool    $updateEditors	 *	 * @return  void	 *	 * @since   1.5	 */	public static function preview($url = '', $updateEditors = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a preview button.		$bar->appendButton('Popup', 'preview', 'Preview', $url.'&task=preview');	}	/**	 * Writes a preview button for a given option (opens a popup window).	 *	 * @param   string  $ref        The name of the popup file (excluding the file extension for an xml file).	 * @param   bool    $com        Use the help file in the component directory.	 * @param   string  $override   Use this URL instead of any other	 * @param   string  $component  Name of component to get Help (null for current component)	 *	 * @return  void	 *	 * @since   1.5	 */	public static function help($ref, $com = false, $override = null, $component = null)	{		$bar = JToolbar::getInstance('toolbar');		// Add a help button.		$bar->appendButton('Help', $ref, $com, $override, $component);	}	/**	 * Writes a cancel button that will go back to the previous page without doing	 * any other operation.	 *	 * @param   string  $alt   Alternative text.	 * @param   string  $href  URL of the href attribute.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function back($alt = 'JTOOLBAR_BACK', $href = 'javascript:history.back();')	{		$bar = JToolbar::getInstance('toolbar');		// Add a back button.		$bar->appendButton('Link', 'back', $alt, $href);	}	/**	 * Writes a media_manager button.	 *	 * @param   string  $directory  The sub-directory to upload the media to.	 * @param   string  $alt        An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function media_manager($directory = '', $alt = 'JTOOLBAR_UPLOAD')	{		$bar = JToolbar::getInstance('toolbar');		// Add an upload button.		$bar->appendButton('Popup', 'upload', $alt, 'index.php?option=com_media&tmpl=component&task=popupUpload&folder=' . $directory, 800, 520);	}	/**	 * Writes a common 'default' button for a record.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function makeDefault($task = 'default', $alt = 'JTOOLBAR_DEFAULT')	{		$bar = JToolbar::getInstance('toolbar');		// Add a default button.		$bar->appendButton('Standard', 'star', $alt, $task, true);	}	/**	 * Writes a common 'assign' button for a record.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function assign($task = 'assign', $alt = 'JTOOLBAR_ASSIGN')	{		$bar = JToolbar::getInstance('toolbar');		// Add an assign button.		$bar->appendButton('Standard', 'assign', $alt, $task, true);	}	/**	 * Writes the common 'new' icon for the button bar.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function addNew($task = 'add', $alt = 'JTOOLBAR_NEW', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a new button.		$bar->appendButton('Standard', 'new', $alt, $task, $check);	}	/**	 * Writes a common 'publish' button.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function publish($task = 'publish', $alt = 'JTOOLBAR_PUBLISH', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add a publish button.		$bar->appendButton('Standard', 'publish', $alt, $task, $check);	}	/**	 * Writes a common 'publish' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function publishList($task = 'publish', $alt = 'JTOOLBAR_PUBLISH')	{		$bar = JToolbar::getInstance('toolbar');		// Add a publish button (list).		$bar->appendButton('Standard', 'publish', $alt, $task, true);	}	/**	 * Writes a common 'unpublish' button.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unpublish($task = 'unpublish', $alt = 'JTOOLBAR_UNPUBLISH', $check = false)	{		$bar = JToolbar::getInstance('toolbar');		// Add an unpublish button		$bar->appendButton('Standard', 'unpublish', $alt, $task, $check);	}	/**	 * Writes a common 'unpublish' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unpublishList($task = 'unpublish', $alt = 'JTOOLBAR_UNPUBLISH')	{		$bar = JToolbar::getInstance('toolbar');		// Add an unpublish button (list).		$bar->appendButton('Standard', 'unpublish', $alt, $task, true);	}	/**	 * Writes a common 'archive' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function archiveList($task = 'archive', $alt = 'JTOOLBAR_ARCHIVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add an archive button.		$bar->appendButton('Standard', 'archive', $alt, $task, true);	}	/**	 * Writes an unarchive button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function unarchiveList($task = 'unarchive', $alt = 'JTOOLBAR_UNARCHIVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add an unarchive button (list).		$bar->appendButton('Standard', 'unarchive', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a list of records.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editList($task = 'edit', $alt = 'JTOOLBAR_EDIT')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit button.		$bar->appendButton('Standard', 'edit', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a template html.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editHtml($task = 'edit_source', $alt = 'JTOOLBAR_EDIT_HTML')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit html button.		$bar->appendButton('Standard', 'edithtml', $alt, $task, true);	}	/**	 * Writes a common 'edit' button for a template css.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function editCss($task = 'edit_css', $alt = 'JTOOLBAR_EDIT_CSS')	{		$bar = JToolbar::getInstance('toolbar');		// Add an edit css button (hide).		$bar->appendButton('Standard', 'editcss', $alt, $task, true);	}	/**	 * Writes a common 'delete' button for a list of records.	 *	 * @param   string  $msg   Postscript for the 'are you sure' message.	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function deleteList($msg = '', $task = 'remove', $alt = 'JTOOLBAR_DELETE')	{		$bar = JToolbar::getInstance('toolbar');		// Add a delete button.		if ($msg)		{			$bar->appendButton('Confirm', $msg, 'delete', $alt, $task, true);		}		else		{			$bar->appendButton('Standard', 'delete', $alt, $task, true);		}	}	/**	 * Write a trash button that will move items to Trash Manager.	 *	 * @param   string  $task   An override for the task.	 * @param   string  $alt    An override for the alt text.	 * @param   bool    $check	 *	 * @return  void	 *	 * @since   1.5	 */	public static function trash($task = 'remove', $alt = 'JTOOLBAR_TRASH', $check = true)	{		$bar = JToolbar::getInstance('toolbar');		// Add a trash button.		$bar->appendButton('Standard', 'trash', $alt, $task, $check, false);	}	/**	 * Writes a save button for a given option.	 * Apply operation leads to a save action only (does not leave edit mode).	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function apply($task = 'apply', $alt = 'JTOOLBAR_APPLY')	{		$bar = JToolbar::getInstance('toolbar');		// Add an apply button		$bar->appendButton('Standard', 'apply', $alt, $task, false);	}	/**	 * Writes a save button for a given option.	 * Save operation leads to a save and then close action.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function save($task = 'save', $alt = 'JTOOLBAR_SAVE')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save button.		$bar->appendButton('Standard', 'save', $alt, $task, false);	}	/**	 * Writes a save and create new button for a given option.	 * Save and create operation leads to a save and then add action.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function save2new($task = 'save2new', $alt = 'JTOOLBAR_SAVE_AND_NEW')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'save-new', $alt, $task, false);	}	/**	 * Writes a save as copy button for a given option.	 * Save as copy operation leads to a save after clearing the key,	 * then returns user to edit mode with new key.	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function save2copy($task = 'save2copy', $alt = 'JTOOLBAR_SAVE_AS_COPY')	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'save-copy', $alt, $task, false);	}	/**	 * Writes a checkin button for a given option.	 *	 * @param   string   $task   An override for the task.	 * @param   string   $alt    An override for the alt text.	 * @param   boolean  $check  True if required to check that a standard list item is checked.	 *	 * @return  void	 *	 * @since   1.7	 */	public static function checkin($task = 'checkin', $alt = 'JTOOLBAR_CHECKIN', $check = true)	{		$bar = JToolbar::getInstance('toolbar');		// Add a save and create new button.		$bar->appendButton('Standard', 'checkin', $alt, $task, $check);	}	/**	 * Writes a cancel button and invokes a cancel operation (eg a checkin).	 *	 * @param   string  $task  An override for the task.	 * @param   string  $alt   An override for the alt text.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function cancel($task = 'cancel', $alt = 'JTOOLBAR_CANCEL')	{		$bar = JToolbar::getInstance('toolbar');		// Add a cancel button.		$bar->appendButton('Standard', 'cancel', $alt, $task, false);	}	/**	 * Writes a configuration button and invokes a cancel operation (eg a checkin).	 *	 * @param   string  $component  The name of the component, eg, com_content.	 * @param   int     $height     The height of the popup. [UNUSED]	 * @param   int     $width      The width of the popup. [UNUSED]	 * @param   string  $alt        The name of the button.	 * @param   string  $path       An alternative path for the configuation xml relative to JPATH_SITE.	 *	 * @return  void	 *	 * @since   1.5	 */	public static function preferences($component, $height = '550', $width = '875', $alt = 'JToolbar_Options', $path = '')	{		$component = urlencode($component);		$path = urlencode($path);		$bar = JToolBar::getInstance('toolbar');		$uri = (string) JUri::getInstance();		$return = urlencode(base64_encode($uri));		// Add a button linking to config for component.		$bar->appendButton('Link', 'options', $alt, 'index.php?option=com_config&amp;view=component&amp;component=' . $component . '&amp;path=' . $path . '&amp;return=' . $return);	}}/** * Utility class for the submenu. * * @package     Joomla.Administrator * @since       1.5 * @deprecated  4.0  Use JHtmlSidebar instead. */abstract class JSubMenuHelper{	/**	 * Menu entries	 *	 * @var    array	 * @since  3.0	 * @deprecated  4.0	 */	protected static $entries = array();	/**	 * Filters	 *	 * @var    array	 * @since  3.0	 * @deprecated  4.0	 */	protected static $filters = array();	/**	 * Value for the action attribute of the form.	 *	 * @var    string	 * @since  3.0	 * @deprecated  4.0	 */	protected static $action = '';	/**	 * Method to add a menu item to submenu.	 *	 * @param   string	$name	 Name of the menu item.	 * @param   string	$link	 URL of the menu item.	 * @param   bool	$active  True if the item is active, false otherwise.	 *	 * @return  void	 *	 * @since   1.5	 * @deprecated  4.0  Use JHtmlSidebar::addEntry() instead.	 */	public static function addEntry($name, $link = '', $active = false)	{		JLog::add('JSubMenuHelper::addEntry() is deprecated. Use JHtmlSidebar::addEntry() instead.', JLog::WARNING, 'deprecated');		array_push(self::$entries, array($name, $link, $active));	}	/**	 * Returns an array of all submenu entries	 *	 * @return  array	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getEntries() instead.	 */	public static function getEntries()	{		JLog::add('JSubMenuHelper::getEntries() is deprecated. Use JHtmlSidebar::getEntries() instead.', JLog::WARNING, 'deprecated');		return self::$entries;	}	/**	 * Method to add a filter to the submenu	 *	 * @param   string	$label      Label for the menu item.	 * @param   string	$name       name for the filter. Also used as id.	 * @param   string	$options    options for the select field.	 * @param   bool	$noDefault  Don't the label as the empty option	 *	 * @return  void	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::addFilter() instead.	 */	public static function addFilter($label, $name, $options, $noDefault = false)	{		JLog::add('JSubMenuHelper::addFilter() is deprecated. Use JHtmlSidebar::addFilter() instead.', JLog::WARNING, 'deprecated');		array_push(self::$filters, array('label' => $label, 'name' => $name, 'options' => $options, 'noDefault' => $noDefault));	}	/**	 * Returns an array of all filters	 *	 * @return  array	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getFilters() instead.	 */	public static function getFilters()	{		JLog::add('JSubMenuHelper::getFilters() is deprecated. Use JHtmlSidebar::getFilters() instead.', JLog::WARNING, 'deprecated');		return self::$filters;	}	/**	 * Set value for the action attribute of the filter form	 *	 * @param   string  $action  Value for the action attribute of the form	 *	 * @return  void	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::setAction() instead.	 */	public static function setAction($action)	{		JLog::add('JSubMenuHelper::setAction() is deprecated. Use JHtmlSidebar::setAction() instead.', JLog::WARNING, 'deprecated');		self::$action = $action;	}	/**	 * Get value for the action attribute of the filter form	 *	 * @return  string  Value for the action attribute of the form	 *	 * @since   3.0	 * @deprecated  4.0  Use JHtmlSidebar::getAction() instead.	 */	public static function getAction()	{		JLog::add('JSubMenuHelper::getAction() is deprecated. Use JHtmlSidebar::getAction() instead.', JLog::WARNING, 'deprecated');		return self::$action;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');/** * File Media Controller * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.6 */class MediaControllerFile extends JControllerLegacy{	/**	 * Upload a file	 *	 * @return  void	 *	 * @since   1.5	 */	function upload()	{		$params = JComponentHelper::getParams('com_media');		// Check for request forgeries		if (!JSession::checkToken('request'))		{			$response = array(				'status' => '0',				'error' => JText::_('JINVALID_TOKEN')			);			echo json_encode($response);			return;		}		// Get the user		$user  = JFactory::getUser();		JLog::addLogger(array('text_file' => 'upload.error.php'), JLog::ALL, array('upload'));		// Get some data from the request		$file   = $this->input->files->get('Filedata', '', 'array');		$folder = $this->input->get('folder', '', 'path');		if (			$_SERVER['CONTENT_LENGTH']>($params->get('upload_maxsize', 0) * 1024 * 1024) ||			$_SERVER['CONTENT_LENGTH']>(int)(ini_get('upload_max_filesize'))* 1024 * 1024 ||			$_SERVER['CONTENT_LENGTH']>(int)(ini_get('post_max_size'))* 1024 * 1024 ||			$_SERVER['CONTENT_LENGTH']>(int)(ini_get('memory_limit'))* 1024 * 1024		)		{			$response = array(					'status' => '0',					'error' => JText::_('COM_MEDIA_ERROR_WARNFILETOOLARGE')			);			echo json_encode($response);			return;		}		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		// Make the filename safe		$file['name'] = JFile::makeSafe($file['name']);		if (isset($file['name']))		{			// The request is valid			$err = null;			$filepath = JPath::clean(COM_MEDIA_BASE . '/' . $folder . '/' . strtolower($file['name']));			if (!MediaHelper::canUpload($file, $err))			{				JLog::add('Invalid: ' . $filepath . ': ' . $err, JLog::INFO, 'upload');				$response = array(					'status' => '0',					'error' => JText::_($err)				);				echo json_encode($response);				return;			}			// Trigger the onContentBeforeSave event.			JPluginHelper::importPlugin('content');			$dispatcher	= JEventDispatcher::getInstance();			$object_file = new JObject($file);			$object_file->filepath = $filepath;			$result = $dispatcher->trigger('onContentBeforeSave', array('com_media.file', &$object_file));			if (in_array(false, $result, true))			{				// There are some errors in the plugins				JLog::add('Errors before save: ' . $object_file->filepath . ' : ' . implode(', ', $object_file->getErrors()), JLog::INFO, 'upload');				$response = array(					'status' => '0',					'error' => JText::plural('COM_MEDIA_ERROR_BEFORE_SAVE', count($errors = $object_file->getErrors()), implode('<br />', $errors))				);				echo json_encode($response);				return;			}			if (JFile::exists($object_file->filepath))			{				// File exists				JLog::add('File exists: ' . $object_file->filepath . ' by user_id ' . $user->id, JLog::INFO, 'upload');				$response = array(					'status' => '0',					'error' => JText::_('COM_MEDIA_ERROR_FILE_EXISTS')				);				echo json_encode($response);				return;			}			elseif (!$user->authorise('core.create', 'com_media'))			{				// File does not exist and user is not authorised to create				JLog::add('Create not permitted: ' . $object_file->filepath . ' by user_id ' . $user->id, JLog::INFO, 'upload');				$response = array(					'status' => '0',					'error' => JText::_('COM_MEDIA_ERROR_CREATE_NOT_PERMITTED')				);				echo json_encode($response);				return;			}			if (!JFile::upload($object_file->tmp_name, $object_file->filepath))			{				// Error in upload				JLog::add('Error on upload: ' . $object_file->filepath, JLog::INFO, 'upload');				$response = array(					'status' => '0',					'error' => JText::_('COM_MEDIA_ERROR_UNABLE_TO_UPLOAD_FILE')				);				echo json_encode($response);				return;			}			else			{				// Trigger the onContentAfterSave event.				$dispatcher->trigger('onContentAfterSave', array('com_media.file', &$object_file, true));				JLog::add($folder, JLog::INFO, 'upload');				$response = array(					'status' => '1',					'error' => JText::sprintf('COM_MEDIA_UPLOAD_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE)))				);				echo json_encode($response);				return;			}		}		else		{			$response = array(				'status' => '0',				'error' => JText::_('COM_MEDIA_ERROR_BAD_REQUEST')			);			echo json_encode($response);			return;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a help popup window button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonHelp extends JToolbarButton{	/**	 * @var    string	Button type	 */	protected $_name = 'Help';	/**	 * Fetches the button HTML code.	 *	 * @param   string   $type       Unused string.	 * @param   string   $ref        The name of the help screen (its key reference).	 * @param   boolean  $com        Use the help file in the component directory.	 * @param   string   $override   Use this URL instead of any other.	 * @param   string   $component  Name of component to get Help (null for current component)	 *	 * @return  string	 *	 * @since   3.0	 */	public function fetchButton($type = 'Help', $ref = '', $com = false, $override = null, $component = null)	{		$text = JText::_('JTOOLBAR_HELP');		$class = 'question-sign';		$doTask = $this->_getCommand($ref, $com, $override, $component);		$html = "<button href=\"#\" onclick=\"$doTask\" rel=\"help\" class=\"btn btn-small\">\n";		$html .= "<i class=\"icon-$class\">\n";		$html .= "</i>\n";		$html .= "$text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button id	 *	 * Redefined from JButton class	 *	 * @return  string	Button CSS Id	 *	 * @since   3.0	 */	public function fetchId()	{		return $this->_parent->getName() . '-' . "help";	}	/**	 * Get the JavaScript command for the button	 *	 * @param   string   $ref        The name of the help screen (its key reference).	 * @param   boolean  $com        Use the help file in the component directory.	 * @param   string   $override   Use this URL instead of any other.	 * @param   string   $component  Name of component to get Help (null for current component)	 *	 * @return  string   JavaScript command string	 *	 * @since   3.0	 */	protected function _getCommand($ref, $com, $override, $component)	{		JHtml::_('behavior.framework');		// Get Help URL		$url = JHelp::createURL($ref, $com, $override, $component);		$url = htmlspecialchars($url, ENT_QUOTES);		$cmd = "Joomla.popupWindow('$url', '" . JText::_('JHELP', true) . "', 700, 500, 1)";		return $cmd;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'contact.cancel' || document.formvalidator.isValid(document.id('contact-form')))		{			<?php echo $this->form->getField('misc')->save(); ?>			Joomla.submitform(task, document.getElementById('contact-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_contact&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="contact-form" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin contact -->		<div class="span10 form-horizontal">		<fieldset>			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_CONTACT_NEW_CONTACT', true) : JText::sprintf('COM_CONTACT_EDIT_CONTACT', $this->item->id, true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('name'); ?></div>					<div class="controls"><?php echo $this->form->getInput('name'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('user_id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('user_id'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>					<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>					<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('id'); ?></div>				</div>				<div class="control-group form-inline">					<?php echo $this->form->getLabel('misc'); ?>				</div>					<?php echo $this->form->getInput('misc'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>				</div>					<?php if ($this->item->modified_by) : ?>						<div class="control-group">							<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>							<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>						</div>						<div class="control-group">							<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>							<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>						</div>					<?php endif; ?>				<?php if ($this->item->version) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('version'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('version'); ?>						</div>					</div>				<?php endif; ?>				<?php if ($this->item->hits) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('hits'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('hits'); ?>						</div>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic', JText::_('COM_CONTACT_CONTACT_DETAILS', true)); ?>				<p><?php echo empty($this->item->id) ? JText::_('COM_CONTACT_DETAILS', true) : JText::sprintf('COM_CONTACT_EDIT_DETAILS', $this->item->id, true); ?></p>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('image'); ?></div>					<div class="controls"><?php echo $this->form->getInput('image'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('con_position'); ?></div>					<div class="controls"><?php echo $this->form->getInput('con_position'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('email_to'); ?></div>					<div class="controls"><?php echo $this->form->getInput('email_to'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('address'); ?></div>					<div class="controls"><?php echo $this->form->getInput('address'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('suburb'); ?></div>					<div class="controls"><?php echo $this->form->getInput('suburb'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('state'); ?></div>					<div class="controls"><?php echo $this->form->getInput('state'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('postcode'); ?></div>					<div class="controls"><?php echo $this->form->getInput('postcode'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('country'); ?></div>					<div class="controls"><?php echo $this->form->getInput('country'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('telephone'); ?></div>					<div class="controls"><?php echo $this->form->getInput('telephone'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('mobile'); ?></div>					<div class="controls"><?php echo $this->form->getInput('mobile'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('fax'); ?></div>					<div class="controls"><?php echo $this->form->getInput('fax'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('webpage'); ?></div>					<div class="controls"><?php echo $this->form->getInput('webpage'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname1'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname1'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname2'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname2'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('sortname3'); ?></div>					<div class="controls"><?php echo $this->form->getInput('sortname3'); ?></div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>					<?php echo $this->loadTemplate('metadata'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php if ($assoc) : ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>					<?php echo $this->loadTemplate('associations'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>		</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<!-- End content -->	<!-- Begin Sidebar -->		<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>	<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Editors.none * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plain Textarea Editor Plugin * * @package     Joomla.Plugin * @subpackage  Editors.none * @since       1.5 */class PlgEditorNone extends JPlugin{	/**	 * Method to handle the onInitEditor event.	 *  - Initialises the Editor	 *	 * @return  string	JavaScript Initialization string	 * @since 1.5	 */	public function onInit()	{		$txt =	"<script type=\"text/javascript\">					function insertAtCursor(myField, myValue)					{						if (document.selection)						{							// IE support							myField.focus();							sel = document.selection.createRange();							sel.text = myValue;						} else if (myField.selectionStart || myField.selectionStart == '0')						{							// MOZILLA/NETSCAPE support							var startPos = myField.selectionStart;							var endPos = myField.selectionEnd;							myField.value = myField.value.substring(0, startPos)								+ myValue								+ myField.value.substring(endPos, myField.value.length);						} else {							myField.value += myValue;						}					}				</script>";		return $txt;	}	/**	 * Copy editor content to form field.	 *	 * Not applicable in this editor.	 *	 * @return  void	 */	public function onSave()	{		return;	}	/**	 * Get the editor content.	 *	 * @param   string	$id		The id of the editor field.	 *	 * @return  string	 */	public function onGetContent($id)	{		return "document.getElementById('$id').value;\n";	}	/**	 * Set the editor content.	 *	 * @param   string	$id		The id of the editor field.	 * @param   string	$html	The content to set.	 *	 * @return  string	 */	public function onSetContent($id, $html)	{		return "document.getElementById('$id').value = $html;\n";	}	/**	 * @param   string	$id	 *	 * @return  string	 */	public function onGetInsertMethod($id)	{		static $done = false;		// Do this only once.		if (!$done)		{			$doc = JFactory::getDocument();			$js = "\tfunction jInsertEditorText(text, editor)			{				insertAtCursor(document.getElementById(editor), text);			}";			$doc->addScriptDeclaration($js);		}		return true;	}	/**	 * Display the editor area.	 *	 * @param   string	$name		The control name.	 * @param   string	$html		The contents of the text area.	 * @param   string	$width		The width of the text area (px or %).	 * @param   string	$height		The height of the text area (px or %).	 * @param   integer  $col		The number of columns for the textarea.	 * @param   integer  $row		The number of rows for the textarea.	 * @param   boolean	$buttons	True and the editor buttons will be displayed.	 * @param   string	$id			An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string	$asset	 * @param   object	$author	 * @param   array  $params		Associative array of editor parameters.	 *	 * @return  string	 */	public function onDisplay($name, $content, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		if (empty($id))		{			$id = $name;		}		// Only add "px" to width and height if they are not given as a percentage		if (is_numeric($width))		{			$width .= 'px';		}		if (is_numeric($height))		{			$height .= 'px';		}		$buttons = $this->_displayButtons($id, $buttons, $asset, $author);		$editor  = "<textarea name=\"$name\" id=\"$id\" cols=\"$col\" rows=\"$row\" style=\"width: $width; height: $height;\">$content</textarea>" . $buttons;		return $editor;	}	public function _displayButtons($name, $buttons, $asset, $author)	{		// Load modal popup behavior		JHtml::_('behavior.modal', 'a.modal-button');		$args['name'] = $name;		$args['event'] = 'onGetInsertMethod';		$return = '';		$results[] = $this->update($args);		foreach ($results as $result)		{			if (is_string($result) && trim($result))			{				$return .= $result;			}		}		if (is_array($buttons) || (is_bool($buttons) && $buttons))		{			$results = $this->_subject->getButtons($name, $buttons, $asset, $author);			// This will allow plugins to attach buttons or change the behavior on the fly using AJAX			$return .= "\n<div id=\"editor-xtd-buttons\" class=\"btn-toolbar pull-left\">\n";			$return .= "\n<div class=\"btn-toolbar\">\n";			foreach ($results as $button)			{				// Results should be an object				if ($button->get('name'))				{					$modal		= ($button->get('modal')) ? 'class="modal-button btn"' : null;					$href		= ($button->get('link')) ? 'class="btn" href="'.JURI::base().$button->get('link').'"' : null;					$onclick	= ($button->get('onclick')) ? 'onclick="'.$button->get('onclick').'"' : null;					$title      = ($button->get('title')) ? $button->get('title') : $button->get('text');					$return .= "<a ".$modal." title=\"".$title."\" ".$href." ".$onclick." rel=\"".$button->get('options')."\"><i class=\"icon-".$button->get('name')."\"></i> ".$button->get('text')."</a>\n";				}			}			$return .= "</div>\n";			$return .= "</div>\n";			$return .= "<div class=\"clearfix\"></div>\n";		}		return $return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of banner records. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelClients extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'contact', 'a.contact',				'state', 'a.state',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'nbanners',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id AS id,' .					'a.name AS name,' .					'a.contact AS contact,' .					'a.checked_out AS checked_out,' .					'a.checked_out_time AS checked_out_time, ' .					'a.state AS state,' .					'a.metakey AS metakey,' .					'a.purchase_type as purchase_type'			)		);		$query->from($db->quoteName('#__banner_clients') . ' AS a');		// Join over the banners for counting		$query->select('COUNT(b.id) as nbanners')			->join('LEFT', '#__banners AS b ON a.id = b.cid');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Filter by published state		$published = $this->getState('filter.state');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state IN (0, 1))');		}		$query->group('a.id, a.name, a.contact, a.checked_out, a.checked_out_time, a.state, a.metakey, a.purchase_type, editor');		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.name LIKE ' . $search);			}		}		$ordering_o = $this->getState('list.ordering', 'ordering');		if ($ordering_o == 'nbanners')		{			$ordering_o = 'COUNT(b.id)';		}		// Add the list ordering clause.		$query->order($db->escape($ordering_o) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$options = array(	JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),	JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_MENUS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_MENUS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0)		{		?>			<div id="batch-choose-action" class="combo control-group">				<label id="batch-choose-action-lbl" class="control-label" for="batch-choose-action">					<?php echo JText::_('COM_MENUS_BATCH_MENU_LABEL'); ?>				</label>				<div class="controls">					<select name="batch[menu_id]" class="inputbox" id="batch-menu-id">						<option value=""><?php echo JText::_('JSELECT') ?></option>						<?php echo JHtml::_('select.options', JHtml::_('menu.menuitems', array('published' => $published)));?>					</select>				</div>			</div>			<div id="batch-copy-move" class="control-group radio">				<?php echo JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'); ?>			</div>		<?php		}		?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-menu-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('item.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories view class for the Category package. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesController extends JControllerLegacy{	/**	 * @var		string	The extension for which the categories apply.	 * @since   1.6	 */	protected $extension;	/**	 * Constructor.	 *	 * @param   array An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		// Guess the JText message prefix. Defaults to the option.		if (empty($this->extension))		{			$this->extension = $this->input->get('extension', 'com_content');		}	}	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'categories');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		$id      = $this->input->getInt('id');		// Check for edit form.		if ($vName == 'category' && $lName == 'edit' && !$this->checkEditId('com_categories.edit.category', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_categories&view=categories&extension='.$this->extension, false));			return false;		}		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			// Get the model for the view.			$model = $this->getModel($vName, 'CategoriesModel', array('name' => $vName . '.' . substr($this->extension, 4)));			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			// Load the submenu.			require_once JPATH_COMPONENT.'/helpers/categories.php';			CategoriesHelper::addSubmenu($model->getState('filter.extension'));			$view->display();		}		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_messages&view=messages'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MESSAGES_SEARCH_IN_SUBJECT'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', MessagesHelper::getStateOptions(), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_MESSAGES_HEADING_SUBJECT', 'a.subject', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'COM_MESSAGES_HEADING_READ', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="width-15">					<?php echo JHtml::_('grid.sort', 'COM_MESSAGES_HEADING_FROM', 'a.user_id_from', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-20">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.date_time', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canChange	= $user->authorise('core.edit.state', 'com_messages');			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo JHtml::_('grid.id', $i, $item->message_id); ?>				</td>				<td>					<a href="<?php echo JRoute::_('index.php?option=com_messages&view=message&message_id='.(int) $item->message_id); ?>">						<?php echo $this->escape($item->subject); ?></a>				</td>				<td class="center">					<?php echo JHtml::_('messages.state', $item->state, $i, $canChange); ?>				</td>				<td>					<?php echo $item->user_from; ?>				</td>				<td>					<?php echo JHtml::_('date', $item->date_time, JText::_('DATE_FORMAT_LC2')); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Add specific helper files for html generationJHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$user		= JFactory::getUser();$userId		= $user->get('id');$client		= $this->state->get('filter.client_id', 0) ? JText::_('JADMINISTRATOR') : JText::_('JSITE');$clientId	= $this->state->get('filter.client_id', 0);?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=installed&client='.$clientId); ?>" method="post" id="adminForm" name="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp');?>	<?php endif; ?>	<table class="adminlist">		<thead>			<tr>				<th class="row-number-col">					<?php echo JText::_('COM_LANGUAGES_HEADING_NUM'); ?>				</th>				<th class="checkmark-col">					&#160;				</th>				<th class="title">					<?php echo JText::_('COM_LANGUAGES_HEADING_LANGUAGE'); ?>				</th>				<th>					<?php echo JText::_('COM_LANGUAGES_FIELD_LANG_TAG_LABEL'); ?>				</th>				<th class="width-10">					<?php echo JText::_('JCLIENT'); ?>				</th>				<th class="width-5">					<?php echo JText::_('COM_LANGUAGES_HEADING_DEFAULT'); ?>				</th>				<th class="width-10">					<?php echo JText::_('JVERSION'); ?>				</th>				<th class="width-10">					<?php echo JText::_('JDATE'); ?>				</th>				<th class="width-20">					<?php echo JText::_('JAUTHOR'); ?>				</th>				<th class="width-25">					<?php echo JText::_('COM_LANGUAGES_HEADING_AUTHOR_EMAIL'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->rows as $i => $row) :			$canCreate = $user->authorise('core.create',     'com_languages');			$canEdit   = $user->authorise('core.edit',       'com_languages');			$canChange = $user->authorise('core.edit.state', 'com_languages');		?>			<tr class="row<?php echo $i % 2; ?>">				<th>					<?php echo $this->pagination->getRowOffset($i); ?>				</th>				<td>					<?php echo JHtml::_('languages.id', $i, $row->language);?>				</td>				<td>					<?php echo $this->escape($row->name); ?>				</td>				<td align="center">					<?php echo $this->escape($row->language); ?>				</td>				<td class="center">					<?php echo $client;?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.isdefault', $row->published, $i, 'installed.', !$row->published && $canChange);?>				</td>				<td class="center">					<?php echo $this->escape($row->version); ?>				</td>				<td class="center">					<?php echo $this->escape($row->creationDate); ?>				</td>				<td class="center">					<?php echo $this->escape($row->author); ?>				</td>				<td class="center">					<?php echo $this->escape($row->authorEmail); ?>				</td>			</tr>		<?php endforeach;?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$app		= JFactory::getApplication();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$canOrder	= $user->authorise('core.edit.state',	'com_menus');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_menus&task=items.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'itemList', 'adminForm', strtolower($listDirn), $saveOrderingUrl, false, true);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><?php //Set up the filter bar. ?><form action="<?php echo JRoute::_('index.php?option=com_menus&view=items');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="itemList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MENUS_HEADING_HOME', 'a.home', $listDirn, $listOrder); ?>					</th>				<th width="10%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort',  'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>				<th width="5%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort', 'COM_MENUS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>				</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>					</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php			$originalOrders = array();			foreach ($this->items as $i => $item) :				$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);				$canCreate  = $user->authorise('core.create',     'com_menus');				$canEdit    = $user->authorise('core.edit',       'com_menus');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_menus') && $canCheckin;				// Get the parents of item for sorting				if ($item->level > 1)				{					$parentsStr = "";					$_currentParentId = $item->parent_id;					$parentsStr = " ".$_currentParentId;					for ($j = 0; $j < $item->level; $j++)					{						foreach ($this->ordering as $k => $v)						{							$v = implode("-", $v);							$v = "-" . $v . "-";							if (strpos($v, "-" . $_currentParentId . "-") !== false)							{								$parentsStr .= " " . $k;								$_currentParentId = $k;								break;							}						}					}				}				else				{					$parentsStr = "";				}				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->parent_id;?>" item-id="<?php echo $item->id?>" parents="<?php echo $parentsStr?>" level="<?php echo $item->level?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>					<?php else : ?>						<span class="sortable-handler inactive">							<i class="icon-menu"></i>						</span>					<?php endif; ?>					<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $orderkey + 1;?>" />					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('MenusHtml.Menus.state', $item->published, $i, $canChange, 'cb'); ?>					</td>					<td>						<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level - 1) ?>						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'items.', $canCheckin); ?>						<?php endif; ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_menus&task=item.edit&id='.(int) $item->id);?>">								<?php echo $this->escape($item->title); ?></a>						<?php else : ?>							<?php echo $this->escape($item->title); ?>						<?php endif; ?>						<span class="small">						<?php if ($item->type != 'url') : ?>							<?php if (empty($item->note)) : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							<?php else : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>							<?php endif; ?>						<?php elseif ($item->type == 'url' && $item->note) : ?>							<?php echo JText::sprintf('JGLOBAL_LIST_NOTE', $this->escape($item->note));?>						<?php endif; ?>						</span>						<div class="small" title="<?php echo $this->escape($item->path);?>">							<?php echo str_repeat('<span class="gtr">&mdash;</span>', $item->level - 1) ?>							<span title="<?php echo isset($item->item_type_desc) ? htmlspecialchars($this->escape($item->item_type_desc), ENT_COMPAT, 'UTF-8') : ''; ?>">								<?php echo $this->escape($item->item_type); ?></span>						</div>					</td>					<td class="center hidden-phone">						<?php if ($item->type == 'component') : ?>							<?php if ($item->language == '*' || $item->home == '0'):?>								<?php echo JHtml::_('jgrid.isdefault', $item->home, $i, 'items.', ($item->language != '*' || !$item->home) && $canChange);?>							<?php elseif ($canChange):?>								<a href="<?php echo JRoute::_('index.php?option=com_menus&task=items.unsetDefault&cid[]='.$item->id.'&'.JSession::getFormToken().'=1');?>">									<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => JText::sprintf('COM_MENUS_GRID_UNSET_LANGUAGE', $item->language_title)), true);?>								</a>							<?php else:?>								<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => $item->language_title), true);?>							<?php endif;?>						<?php endif; ?>					</td>				<td class="small hidden-phone">					<?php echo $this->escape($item->access_level); ?>				</td>				<?php if ($assoc):?>				<td class="small hidden-phone">					<?php if ($item->association):?>						<?php echo JHtml::_('MenusHtml.Menus.association', $item->id);?>						<?php endif;?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == ''):?>							<?php echo JText::_('JDEFAULT'); ?>						<?php elseif ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt);?>">							<?php echo (int) $item->id; ?></span>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form.is user is allowed ?>		<?php if ($user->authorise('core.create', 'com_menus') || $user->authorise('core.edit', 'com_menus')) : ?>			<?php echo $this->loadTemplate('batch'); ?>		<?php endif;?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Media component * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.0 */class MediaViewMedia extends JViewLegacy{	public function display($tpl = null)	{		$app	= JFactory::getApplication();		$config = JComponentHelper::getParams('com_media');		$lang	= JFactory::getLanguage();		$style = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');		$document = JFactory::getDocument();		JHtml::_('behavior.framework', true);		JHtml::_('script', 'media/mediamanager.js', true, true);		/*		JHtml::_('stylesheet', 'media/mediamanager.css', array(), true);		if ($lang->isRTL()) :			JHtml::_('stylesheet', 'media/mediamanager_rtl.css', array(), true);		endif;		*/		JHtml::_('behavior.modal');		$document->addScriptDeclaration("		window.addEvent('domready', function()		{			document.preview = SqueezeBox;		});");		// JHtml::_('script', 'system/mootree.js', true, true, false, false);		JHtml::_('stylesheet', 'system/mootree.css', array(), true);		if ($lang->isRTL()) :			JHtml::_('stylesheet', 'media/mootree_rtl.css', array(), true);		endif;		if (DIRECTORY_SEPARATOR == '\\')		{			$base = str_replace(DIRECTORY_SEPARATOR, "\\\\", COM_MEDIA_BASE);		}		else		{			$base = COM_MEDIA_BASE;		}		$js = "			var basepath = '".$base."';			var viewstyle = '".$style."';		";		$document->addScriptDeclaration($js);		/*		 * Display form for FTP credentials?		 * Don't set them here, as there are other functions called before this one if there is any file write operation		 */		$ftp = !JClientHelper::hasCredentials('ftp');		$session	= JFactory::getSession();		$state		= $this->get('state');		$this->session = $session;		$this->config = &$config;		$this->state = &$state;		$this->require_ftp = $ftp;		$this->folders_id = ' id="media-tree"';		$this->folders = $this->get('folderTree');		// Set the toolbar		$this->addToolbar();		parent::display($tpl);		echo JHtml::_('behavior.keepalive');	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		$user = JFactory::getUser();		// Set the titlebar text		JToolbarHelper::title(JText::_('COM_MEDIA'), 'mediamanager.png');		// Add a upload button		if ($user->authorise('core.create', 'com_media'))		{			$title = JText::_('JTOOLBAR_UPLOAD');			$dhtml = "<button data-toggle=\"collapse\" data-target=\"#collapseUpload\" class=\"btn btn-small btn-success\">						<i class=\"icon-plus icon-white\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'upload');			JToolbarHelper::divider();		}		// Add a create folder button		if ($user->authorise('core.create', 'com_media'))		{			$title = JText::_('COM_MEDIA_CREATE_FOLDER');			$dhtml = "<button data-toggle=\"collapse\" data-target=\"#collapseFolder\" class=\"btn btn-small\">						<i class=\"icon-folder\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'folder');			JToolbarHelper::divider();		}		// Add a delete button		if ($user->authorise('core.delete', 'com_media'))		{			$title = JText::_('JTOOLBAR_DELETE');			$dhtml = "<button href=\"#\" onclick=\"MediaManager.submit('folder.delete')\" class=\"btn btn-small\">						<i class=\"icon-remove\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'delete');			JToolbarHelper::divider();		}		// Add a delete button		if ($user->authorise('core.admin', 'com_media'))		{			JToolbarHelper::preferences('com_media');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_CONTENT_MEDIA_MANAGER');	}	function getFolderLevel($folder)	{		$this->folders_id = null;		$txt = null;		if (isset($folder['children']) && count($folder['children']))		{			$tmp = $this->folders;			$this->folders = $folder;			$txt = $this->loadTemplate('folders');			$this->folders = $tmp;		}		return $txt;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=debuguser&user_id='.(int) $this->state->get('filter.user_id'));?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?></legend>		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_USERS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_RESET'); ?></button>		</div>		<div class="filter-select fltrt">			<label class="selectlabel" for="filter_component"><?php echo JText::_('COM_USERS_OPTION_SELECT_COMPONENT'); ?></label>			<select name="filter_component" class="inputbox" id="filter_component">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_COMPONENT');?></option>				<?php if (!empty($this->components))				{					echo JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));				}?>			</select>			<label class="selectlabel" for="filter_level_start"><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'); ?></label>			<select name="filter_level_start" class="inputbox" id="filter_level_start">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_START');?></option>				<?php echo JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'));?>			</select>			<label class="selectlabel" for="filter_level_end"><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'); ?></label>			<select name="filter_level_end" class="inputbox" id="filter_level_end">				<option value=""><?php echo JText::_('COM_USERS_OPTION_SELECT_LEVEL_END');?></option>				<?php echo JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<div>		<?php echo JText::_('COM_USERS_DEBUG_LEGEND'); ?>		<span class="swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_NO_CHECK', '-');?></span>		<span class="check-0 swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_IMPLICIT_DENY', '-');?></span>		<span class="check-a swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_EXPLICIT_ALLOW', '&#10003;');?></span>		<span class="check-d swatch"><?php echo JText::sprintf('COM_USERS_DEBUG_EXPLICIT_DENY', '&#10007;');?></span>	</div>	<table class="adminlist">		<thead>			<tr>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<?php foreach ($this->actions as $key => $action) : ?>				<th class="width-5">					<span class="hasTip" title="<?php echo htmlspecialchars(JText::_($key).'::'.JText::_($action[1]), ENT_COMPAT, 'UTF-8'); ?>"><?php echo JText::_($key); ?></span>				</th>				<?php endforeach; ?>				<th class="width-5 nowrap">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LFT', 'a.lft', $listDirn, $listOrder); ?>				</th>				<th class="width-5 nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row1">				<th>					<?php echo $this->escape($item->title); ?>				</th>				<td class="nowrap">					<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>					<?php echo $this->escape($item->name); ?>				</td>				<?php foreach ($this->actions as $action) : ?>					<?php					$name	= $action[0];					$check	= $item->checks[$name];					if ($check === true) :						$class	= 'check-a';						$text	= '&#10003;';					elseif ($check === false) :						$class	= 'check-d';						$text	= '&#10007;';					elseif ($check === null) :						$class	= 'check-0';						$text	= '-';					else :						$class	= '';						$text	= '&#160;';					endif;					?>				<td class="center <?php echo $class;?>">					<?php echo $text; ?>				</td>				<?php endforeach; ?>				<td class="center">					<?php echo (int) $item->lft; ?>					- <?php echo (int) $item->rgt; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Search.content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_content/router.php';/** * Content Search plugin * * @package     Joomla.Plugin * @subpackage  Search.content * @since       1.6 */class PlgSearchContent extends JPlugin{	/**	 * @return array An array of search areas	 */	public function onContentSearchAreas()	{		static $areas = array(			'content' => 'JGLOBAL_ARTICLES'		);		return $areas;	}	/**	 * Content Search method	 * The sql must return the following fields that are used in a common display	 * routine: href, title, section, created, text, browsernav	 * @param string Target search string	 * @param string mathcing option, exact|any|all	 * @param string ordering option, newest|oldest|popular|alpha|category	 * @param mixed  An array if the search it to be restricted to areas, null if search all	 */	public function onContentSearch($text, $phrase = '', $ordering = '', $areas = null)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		$tag = JFactory::getLanguage()->getTag();		require_once JPATH_SITE . '/components/com_content/helpers/route.php';		require_once JPATH_ADMINISTRATOR . '/components/com_search/helpers/search.php';		$searchText = $text;		if (is_array($areas))		{			if (!array_intersect($areas, array_keys($this->onContentSearchAreas())))			{				return array();			}		}		$sContent = $this->params->get('search_content', 1);		$sArchived = $this->params->get('search_archived', 1);		$limit = $this->params->def('search_limit', 50);		$nullDate = $db->getNullDate();		$date = JFactory::getDate();		$now = $date->toSql();		$text = trim($text);		if ($text == '')		{			return array();		}		$wheres = array();		switch ($phrase)		{			case 'exact':				$text = $db->quote('%' . $db->escape($text, true) . '%', false);				$wheres2 = array();				$wheres2[] = 'a.title LIKE ' . $text;				$wheres2[] = 'a.introtext LIKE ' . $text;				$wheres2[] = 'a.fulltext LIKE ' . $text;				$wheres2[] = 'a.metakey LIKE ' . $text;				$wheres2[] = 'a.metadesc LIKE ' . $text;				$where = '(' . implode(') OR (', $wheres2) . ')';				break;			case 'all':			case 'any':			default:				$words = explode(' ', $text);				$wheres = array();				foreach ($words as $word)				{					$word = $db->quote('%' . $db->escape($word, true) . '%', false);					$wheres2 = array();					$wheres2[] = 'a.title LIKE ' . $word;					$wheres2[] = 'a.introtext LIKE ' . $word;					$wheres2[] = 'a.fulltext LIKE ' . $word;					$wheres2[] = 'a.metakey LIKE ' . $word;					$wheres2[] = 'a.metadesc LIKE ' . $word;					$wheres[] = implode(' OR ', $wheres2);				}				$where = '(' . implode(($phrase == 'all' ? ') AND (' : ') OR ('), $wheres) . ')';				break;		}		$morder = '';		switch ($ordering)		{			case 'oldest':				$order = 'a.created ASC';				break;			case 'popular':				$order = 'a.hits DESC';				break;			case 'alpha':				$order = 'a.title ASC';				break;			case 'category':				$order = 'c.title ASC, a.title ASC';				$morder = 'a.title ASC';				break;			case 'newest':			default:				$order = 'a.created DESC';				break;		}		$rows = array();		$query = $db->getQuery(true);		// search articles		if ($sContent && $limit > 0)		{			$query->clear();			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('c.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('c.id');			$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select('a.title AS title, a.metadesc, a.metakey, a.created AS created')				->select($query->concatenate(array('a.introtext', 'a.fulltext')) . ' AS text')				->select('c.title AS section, ' . $case_when . ',' . $case_when1 . ', ' . '\'2\' AS browsernav')				->from('#__content AS a')				->join('INNER', '#__categories AS c ON c.id=a.catid')				->where(					'(' . $where . ')AND a.state=1 AND c.published = 1 AND a.access IN (' . $groups . ') '						. 'AND c.access IN (' . $groups . ') '						. 'AND (a.publish_up = ' . $db->quote($nullDate) . ' OR a.publish_up <= ' . $db->quote($now) . ') '						. 'AND (a.publish_down = ' . $db->quote($nullDate) . ' OR a.publish_down >= ' . $db->quote($now) . ')'				);			$query->group('a.id, a.title, a.metadesc, a.metakey, a.created, a.introtext, a.fulltext, c.title, a.alias, c.alias, c.id')				->order($order);			// Filter by language			if ($app->isSite() && JLanguageMultilang::isEnabled())			{				$query->where('a.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')')					->where('c.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query, 0, $limit);			$list = $db->loadObjectList();			$limit -= count($list);			if (isset($list))			{				foreach ($list as $key => $item)				{					$list[$key]->href = ContentHelperRoute::getArticleRoute($item->slug, $item->catslug);				}			}			$rows[] = $list;		}		// search archived content		if ($sArchived && $limit > 0)		{			$query->clear();			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('c.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('c.id');			$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select(				'a.title AS title, a.metadesc, a.metakey, a.created AS created, '					. $query->concatenate(array("a.introtext", "a.fulltext")) . ' AS text,'					. $case_when . ',' . $case_when1 . ', '					. 'c.title AS section, \'2\' AS browsernav'			);			//.'CONCAT_WS("/", c.title) AS section, \'2\' AS browsernav' );			$query->from('#__content AS a')				->join('INNER', '#__categories AS c ON c.id=a.catid AND c.access IN (' . $groups . ')')				->where(					'(' . $where . ') AND a.state = 2 AND c.published = 1 AND a.access IN (' . $groups						. ') AND c.access IN (' . $groups . ') '						. 'AND (a.publish_up = ' . $db->quote($nullDate) . ' OR a.publish_up <= ' . $db->quote($now) . ') '						. 'AND (a.publish_down = ' . $db->quote($nullDate) . ' OR a.publish_down >= ' . $db->quote($now) . ')'				);			$query->order($order);			// Filter by language			if ($app->isSite() && JLanguageMultilang::isEnabled())			{				$query->where('a.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')')					->where('c.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query, 0, $limit);			$list3 = $db->loadObjectList();			// find an itemid for archived to use if there isn't another one			$item = $app->getMenu()->getItems('link', 'index.php?option=com_content&view=archive', true);			$itemid = isset($item->id) ? '&Itemid=' . $item->id : '';			if (isset($list3))			{				foreach ($list3 as $key => $item)				{					$date = JFactory::getDate($item->created);					$created_month = $date->format("n");					$created_year = $date->format("Y");					$list3[$key]->href = JRoute::_('index.php?option=com_content&view=archive&year=' . $created_year . '&month=' . $created_month . $itemid);				}			}			$rows[] = $list3;		}		$results = array();		if (count($rows))		{			foreach ($rows as $row)			{				$new_row = array();				foreach ($row as $key => $article)				{					if (searchHelper::checkNoHTML($article, $searchText, array('text', 'title', 'metadesc', 'metakey')))					{						$new_row[] = $article;					}				}				$results = array_merge($results, (array) $new_row);			}		}		return $results;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Router * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;jimport('joomla.application.router');/** * Class to create and parse routes * * @package     Joomla.Libraries * @subpackage  Router * @since       1.5 */class JRouterAdministrator extends JRouter{	/**	 * Function to convert a route to an internal URI.	 *	 * @param   JURI  $uri  The uri.	 *	 * @return  array	 */	public function parse($uri)	{		return array();	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   1.5	 */	public function build($url)	{		// Create the URI object		$uri = parent::build($url);		// Get the path data		$route = $uri->getPath();		// Add basepath to the uri		$uri->setPath(JURI::base(true) . '/' . $route);		return $uri;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a user group. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewGroup extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = UsersHelper::getActions();		JToolbarHelper::title(JText::_($isNew ? 'COM_USERS_VIEW_NEW_GROUP_TITLE' : 'COM_USERS_VIEW_EDIT_GROUP_TITLE'), 'groups-add');		if ($canDo->get('core.edit') || $canDo->get('core.create'))		{			JToolbarHelper::apply('group.apply');			JToolbarHelper::save('group.save');		}		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('group.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('group.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('group.cancel');		}		else		{			JToolbarHelper::cancel('group.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_GROUPS_EDIT');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi export driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseExporterMysqli extends JDatabaseExporter{	/**	 * An array of cached data.	 *	 * @var    array	 * @since  11.1	 */	protected $cache = array();	/**	 * The database connector to use for exporting structure and/or data.	 *	 * @var    JDatabaseDriverMysql	 * @since  11.1	 */	protected $db = null;	/**	 * An array input sources (table names).	 *	 * @var    array	 * @since  11.1	 */	protected $from = array();	/**	 * The type of output format (xml).	 *	 * @var    string	 * @since  11.1	 */	protected $asFormat = 'xml';	/**	 * An array of options for the exporter.	 *	 * @var    object	 * @since  11.1	 */	protected $options = null;	/**	 * Constructor.	 *	 * Sets up the default options for the exporter.	 *	 * @since   11.1	 */	public function __construct()	{		$this->options = new stdClass;		$this->cache = array('columns' => array(), 'keys' => array());		// Set up the class defaults:		// Export with only structure		$this->withStructure();		// Export as xml.		$this->asXml();		// Default destination is a string using $output = (string) $exporter;	}	/**	 * Magic function to exports the data to a string.	 *	 * @return  string	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function __toString()	{		// Check everything is ok to run first.		$this->check();		$buffer = '';		// Get the format.		switch ($this->asFormat)		{			case 'xml':			default:				$buffer = $this->buildXml();				break;		}		return $buffer;	}	/**	 * Set the output option for the exporter to XML format.	 *	 * @return  JDatabaseExporterMySQL  Method supports chaining.	 *	 * @since   11.1	 */	public function asXml()	{		$this->asFormat = 'xml';		return $this;	}	/**	 * Builds the XML data for the tables to export.	 *	 * @return  string  An XML string	 *	 * @since   11.1	 * @throws  Exception if an error occurs.	 */	protected function buildXml()	{		$buffer = array();		$buffer[] = '<?xml version="1.0"?>';		$buffer[] = '<mysqldump xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">';		$buffer[] = ' <database name="">';		$buffer = array_merge($buffer, $this->buildXmlStructure());		$buffer[] = ' </database>';		$buffer[] = '</mysqldump>';		return implode("\n", $buffer);	}	/**	 * Builds the XML structure to export.	 *	 * @return  array  An array of XML lines (strings).	 *	 * @since   11.1	 * @throws  Exception if an error occurs.	 */	protected function buildXmlStructure()	{		$buffer = array();		foreach ($this->from as $table)		{			// Replace the magic prefix if found.			$table = $this->getGenericTableName($table);			// Get the details columns information.			$fields = $this->db->getTableColumns($table, false);			$keys = $this->db->getTableKeys($table);			$buffer[] = '  <table_structure name="' . $table . '">';			foreach ($fields as $field)			{				$buffer[] = '   <field Field="' . $field->Field . '" Type="' . $field->Type . '" Null="' . $field->Null . '" Key="' .					$field->Key . '"' . (isset($field->Default) ? ' Default="' . $field->Default . '"' : '') . ' Extra="' . $field->Extra . '"' .					' />';			}			foreach ($keys as $key)			{				$buffer[] = '   <key Table="' . $table . '" Non_unique="' . $key->Non_unique . '" Key_name="' . $key->Key_name . '"' .					' Seq_in_index="' . $key->Seq_in_index . '" Column_name="' . $key->Column_name . '" Collation="' . $key->Collation . '"' .					' Null="' . $key->Null . '" Index_type="' . $key->Index_type . '" Comment="' . htmlspecialchars($key->Comment) . '"' .					' />';			}			$buffer[] = '  </table_structure>';		}		return $buffer;	}	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseExporterMysqli  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysqli))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Get the generic name of the table, converting the database prefix to the wildcard string.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  string  The name of the table with the database prefix replaced with #__.	 *	 * @since   11.1	 */	protected function getGenericTableName($table)	{		// TODO Incorporate into parent class and use $this.		$prefix = $this->db->getPrefix();		// Replace the magic prefix if found.		$table = preg_replace("|^$prefix|", '#__', $table);		return $table;	}	/**	 * Specifies a list of table names to export.	 *	 * @param   mixed  $from  The name of a single table, or an array of the table names to export.	 *	 * @return  JDatabaseExporterMysql  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if input is not a string or array.	 */	public function from($from)	{		if (is_string($from))		{			$this->from = array($from);		}		elseif (is_array($from))		{			$this->from = $from;		}		else		{			throw new Exception('JPLATFORM_ERROR_INPUT_REQUIRES_STRING_OR_ARRAY');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysqli  $db  The database connector.	 *	 * @return  JDatabaseExporterMysqli  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysqli $db)	{		$this->db = $db;		return $this;	}	/**	 * Sets an internal option to export the structure of the input table(s).	 *	 * @param   boolean  $setting  True to export the structure, false to not.	 *	 * @return  JDatabaseExporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function withStructure($setting = true)	{		$this->options->withStructure = (boolean) $setting;		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  User * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Authentication class, provides an interface for the Joomla authentication system * * @package     Joomla.Platform * @subpackage  User * @since       11.1 */class JAuthentication extends JObject{	// Shared success status	/**	 * This is the status code returned when the authentication is success (permit login)	 * @const  STATUS_SUCCESS successful response	 * @since  11.2	 */	const STATUS_SUCCESS = 1;	// These are for authentication purposes (username and password is valid)	/**	 * Status to indicate cancellation of authentication (unused)	 * @const  STATUS_CANCEL cancelled request (unused)	 * @since  11.2	 */	const STATUS_CANCEL = 2;	/**	 * This is the status code returned when the authentication failed (prevent login if no success)	 * @const  STATUS_FAILURE failed request	 * @since  11.2	 */	const STATUS_FAILURE = 4;	// These are for authorisation purposes (can the user login)	/**	 * This is the status code returned when the account has expired (prevent login)	 * @const  STATUS_EXPIRED an expired account (will prevent login)	 * @since  11.2	 */	const STATUS_EXPIRED = 8;	/**	 * This is the status code returned when the account has been denied (prevent login)	 * @const  STATUS_DENIED denied request (will prevent login)	 * @since  11.2	 */	const STATUS_DENIED = 16;	/**	 * This is the status code returned when the account doesn't exist (not an error)	 * @const  STATUS_UNKNOWN unknown account (won't permit or prevent login)	 * @since  11.2	 */	const STATUS_UNKNOWN = 32;	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  12.1	 */	protected $observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  12.1	 */	protected $state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  12.1	 */	protected $methods = array();	/**	 * @var    JAuthentication  JAuthentication instances container.	 * @since  11.3	 */	protected static $instance;	/**	 * Constructor	 *	 * @since   11.1	 */	public function __construct()	{		$isLoaded = JPluginHelper::importPlugin('authentication');		if (!$isLoaded)		{			JLog::add(JText::_('JLIB_USER_ERROR_AUTHENTICATION_LIBRARIES'), JLog::WARNING, 'jerror');		}	}	/**	 * Returns the global authentication object, only creating it	 * if it doesn't already exist.	 *	 * @return  JAuthentication  The global JAuthentication object	 *	 * @since   11.1	 */	public static function getInstance()	{		if (empty(self::$instance))		{			self::$instance = new JAuthentication;		}		return self::$instance;	}	/**	 * Get the state of the JAuthentication object	 *	 * @return  mixed    The state of the object.	 *	 * @since   11.1	 */	public function getState()	{		return $this->state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   11.1	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->observers[] = $observer;			end($this->observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JAuthentication))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->methods[$method]))			{				$this->methods[$method] = array();			}			$this->methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   11.1	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->observers);		if ($key !== false)		{			unset($this->observers[$key]);			$retval = true;			foreach ($this->methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}	/**	 * Finds out if a set of login credentials are valid by asking all observing	 * objects to run their respective authentication routines.	 *	 * @param   array  $credentials  Array holding the user credentials.	 * @param   array  $options      Array holding user options.	 *	 * @return  JAuthenticationResponse  Response object with status variable filled in for last plugin or first successful plugin.	 *	 * @see     JAuthenticationResponse	 * @since   11.1	 */	public function authenticate($credentials, $options = array())	{		// Get plugins		$plugins = JPluginHelper::getPlugin('authentication');		// Create authentication response		$response = new JAuthenticationResponse;		/*		 * Loop through the plugins and check of the credentials can be used to authenticate		 * the user		 *		 * Any errors raised in the plugin should be returned via the JAuthenticationResponse		 * and handled appropriately.		 */		foreach ($plugins as $plugin)		{			$className = 'plg' . $plugin->type . $plugin->name;			if (class_exists($className))			{				$plugin = new $className($this, (array) $plugin);			}			else			{				// Bail here if the plugin can't be created				JLog::add(JText::sprintf('JLIB_USER_ERROR_AUTHENTICATION_FAILED_LOAD_PLUGIN', $className), JLog::WARNING, 'jerror');				continue;			}			// Try to authenticate			$plugin->onUserAuthenticate($credentials, $options, $response);			// If authentication is successful break out of the loop			if ($response->status === self::STATUS_SUCCESS)			{				if (empty($response->type))				{					$response->type = isset($plugin->_name) ? $plugin->_name : $plugin->name;				}				break;			}		}		if (empty($response->username))		{			$response->username = $credentials['username'];		}		if (empty($response->fullname))		{			$response->fullname = $credentials['username'];		}		if (empty($response->password))		{			$response->password = $credentials['password'];		}		return $response;	}	/**	 * Authorises that a particular user should be able to login	 *	 * @param   JAuthenticationResponse  $response  response including username of the user to authorise	 * @param   array                    $options   list of options	 *	 * @return  array[JAuthenticationResponse]  results of authorisation	 *	 * @since  11.2	 */	public static function authorise($response, $options = array())	{		// Get plugins in case they haven't been imported already		JPluginHelper::importPlugin('user');		JPluginHelper::importPlugin('authentication');		$dispatcher = JEventDispatcher::getInstance();		$results = $dispatcher->trigger('onUserAuthorisation', array($response, $options));		return $results;	}}/** * Authentication response class, provides an object for storing user and error details * * @package     Joomla.Platform * @subpackage  User * @since       11.1 */class JAuthenticationResponse{	/**	 * Response status (see status codes)	 *	 * @var    string	 * @since  11.1	 */	public $status = JAuthentication::STATUS_FAILURE;	/**	 * The type of authentication that was successful	 *	 * @var    string	 * @since  11.1	 */	public $type = '';	/**	 *  The error message	 *	 * @var    string	 * @since  11.1	 */	public $error_message = '';	/**	 * Any UTF-8 string that the End User wants to use as a username.	 *	 * @var    string	 * @since  11.1	 */	public $username = '';	/**	 * Any UTF-8 string that the End User wants to use as a password.	 *	 * @var    string	 * @since  11.1	 */	public $password = '';	/**	 * The email address of the End User as specified in section 3.4.1 of [RFC2822]	 *	 * @var    string	 * @since  11.1	 */	public $email = '';	/**	 * UTF-8 string free text representation of the End User's full name.	 *	 * @var    string	 * @since  11.1	 *	 */	public $fullname = '';	/**	 * The End User's date of birth as YYYY-MM-DD. Any values whose representation uses	 * fewer than the specified number of digits should be zero-padded. The length of this	 * value MUST always be 10. If the End User user does not want to reveal any particular	 * component of this value, it MUST be set to zero.	 *	 * For instance, if a End User wants to specify that his date of birth is in 1980, but	 * not the month or day, the value returned SHALL be "1980-00-00".	 *	 * @var    string	 * @since  11.1	 */	public $birthdate = '';	/**	 * The End User's gender, "M" for male, "F" for female.	 *	 * @var    string	 * @since  11.1	 */	public $gender = '';	/**	 * UTF-8 string free text that SHOULD conform to the End User's country's postal system.	 *	 * @var    string	 * @since  11.1	 */	public $postcode = '';	/**	 * The End User's country of residence as specified by ISO3166.	 *	 * @var    string	 * @since  11.1	 */	public $country = '';	/**	 * End User's preferred language as specified by ISO639.	 *	 * @var    string	 * @since  11.1	 */	public $language = '';	/**	 * ASCII string from TimeZone database	 *	 * @var    string	 * @since  11.1	 */	public $timezone = '';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugins list controller class. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsControllerPlugins extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Plugin', $prefix = 'PluginsModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Route Helper * * @static * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */abstract class WeblinksHelperRoute{	protected static $lookup;	/**	 * @param   integer  The route of the weblink	 */	public static function getWeblinkRoute($id, $catid, $language = 0)	{		$needles = array(			'weblink'  => array((int) $id)		);		//Create the link		$link = 'index.php?option=com_weblinks&view=weblink&id='. $id;		if ($catid > 1)		{			$categories = JCategories::getInstance('Weblinks');			$category = $categories->get($catid);			if ($category)			{				$needles['category'] = array_reverse($category->getPath());				$needles['categories'] = $needles['category'];				$link .= '&catid='.$catid;			}		}		if ($language && $language != "*" && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang='.$lang->sef;					$needles['language'] = $language;				}			}		}		if ($item = self::_findItem($needles))		{			$link .= '&Itemid='.$item;		}		elseif ($item = self::_findItem())		{			$link .= '&Itemid='.$item;		}		return $link;	}	/**	 * @param   integer  $id		The id of the weblink.	 * @param   string	$return	The return page variable.	 */	public static function getFormRoute($id, $return = null)	{		// Create the link.		if ($id)		{			$link = 'index.php?option=com_weblinks&task=weblink.edit&w_id='. $id;		}		else		{			$link = 'index.php?option=com_weblinks&task=weblink.add&w_id=0';		}		if ($return)		{			$link .= '&return='.$return;		}		return $link;	}	public static function getCategoryRoute($catid, $language = 0)	{		if ($catid instanceof JCategoryNode)		{			$id = $catid->id;			$category = $catid;		}		else		{			$id = (int) $catid;			$category = JCategories::getInstance('Weblinks')->get($id);		}		if ($id < 1)		{			$link = '';		}		else		{			//Create the link			$link = 'index.php?option=com_weblinks&view=category&id='.$id;			$needles = array(				'category' => array($id)			);			if ($language && $language != "*" && JLanguageMultilang::isEnabled())			{				$db		= JFactory::getDbo();				$query	= $db->getQuery(true)					->select('a.sef AS sef')					->select('a.lang_code AS lang_code')					->from('#__languages AS a');				$db->setQuery($query);				$langs = $db->loadObjectList();				foreach ($langs as $lang)				{					if ($language == $lang->lang_code)					{						$link .= '&lang='.$lang->sef;						$needles['language'] = $language;					}				}			}			if ($item = self::_findItem($needles))			{				$link .= '&Itemid='.$item;			}			else			{				if ($category)				{					$catids = array_reverse($category->getPath());					$needles = array(						'category' => $catids,						'categories' => $catids					);					if ($item = self::_findItem($needles))					{						$link .= '&Itemid='.$item;					}					elseif ($item = self::_findItem())					{						$link .= '&Itemid='.$item;					}				}			}		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component	= JComponentHelper::getComponent('com_weblinks');			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items = $menus->getItems($attributes, $values);			if ($items)			{				foreach ($items as $item)				{					if (isset($item->query) && isset($item->query['view']))					{						$view = $item->query['view'];						if (!isset(self::$lookup[$language][$view]))						{							self::$lookup[$language][$view] = array();						}						if (isset($item->query['id']))						{							// here it will become a bit tricky							// language != * can override existing entries							// language == * cannot override existing entries							if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')							{								self::$lookup[$language][$view][$item->query['id']] = $item->id;							}						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// if not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a one line text field. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.text.html#input.text * @since       11.1 */class JFormFieldText extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $type = 'Text';	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$size = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$maxLength = $this->element['maxlength'] ? ' maxlength="' . (int) $this->element['maxlength'] . '"' : '';		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$readonly = ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="text" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $class . $size . $disabled . $readonly . $onchange . $maxLength . $required . '/>';	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?phpif (!empty($feed) && is_string($feed)){		echo $feed;}else{	$lang = JFactory::getLanguage();	$myrtl = $params->get('rssrtl');	$direction = " ";	if ($lang->isRTL() && $myrtl == 0)	{		$direction = " redirect-rtl";	}	// feed description	elseif ($lang->isRTL() && $myrtl == 1)	{			$direction = " redirect-ltr";	}	elseif ($lang->isRTL() && $myrtl == 2)	{		$direction = " redirect-rtl";	}	elseif ($myrtl == 0)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 2)	{		$direction = " redirect-rtl";	}	?>	<?php	if ($feed != false)	{		//image handling		$iUrl	= isset($feed->image)	? $feed->image	: null;		$iTitle = isset($feed->imagetitle) ? $feed->imagetitle : null;		?>		<div style="direction: <?php echo $rssrtl ? 'rtl' :'ltr'; ?>; text-align: <?php echo $rssrtl ? 'right' :'left'; ?> ! important"  class="feed<?php echo $moduleclass_sfx; ?>">		<?php		// feed description		if (!is_null($feed->title) && $params->get('rsstitle', 1))		{			?>					<h2 class="<?php echo $direction; ?>">						<a href="<?php echo str_replace('&', '&amp', $feed->link); ?>" target="_blank">						<?php echo $feed->title; ?></a>					</h2>			<?php		}		// feed description		if ($params->get('rssdesc', 1))		{		?>			<?php echo $feed->description; ?>			<?php		}		// feed image		if ($params->get('rssimage', 1) && $iUrl) :		?>			<img src="<?php echo $iUrl; ?>" alt="<?php echo @$iTitle; ?>"/>		<?php endif; ?>	<ul class="newsfeed<?php echo $params->get('moduleclass_sfx'); ?>">	<!-- Show items -->	<?php if (!empty($feed))	{ ?>	<ul>		<?php for  ($i = 0; $i < $params->get('rssitems', 5); $i++)		{  ?>			<?php				$uri = (!empty($feed[$i]->guid) || !is_null($feed[$i]->guid)) ? $feed[$i]->guid : $feed[$i]->uri;				$uri = substr($uri, 0, 4) != 'http' ? $params->get('rsslink') : $uri;				$text = !empty($feed[$i]->content) ||  !is_null($feed[$i]->content) ? $feed[$i]->content : $feed[$i]->description;			?>				<li>					<?php if (!empty($uri)) : ?>						<h5 class="feed-link">						<a href="<?php echo $uri; ?>" target="_blank">						<?php  echo $feed[$i]->title; ?></a></h5>					<?php else : ?>						<h5 class="feed-link"><?php  echo $feed[$i]->title; ?></h5>					<?php  endif; ?>					<?php if ($params->get('rssitemdesc') && !empty($text)) : ?>						<div class="feed-item-description">						<?php							// Strip the images.							$text = JFilterOutput::stripImages($text);							$text = JHtml::_('string.truncate', $text, $params->get('word_count'));							echo str_replace('&apos;', "'", $text);						?>						</div>					<?php endif; ?>					</li>			<?php } ?>			</ul>	<?php }	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Module model. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesModelSelect extends JModelList{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$clientId = $app->getUserState('com_modules.modules.filter.client_id', 0);		$this->setState('filter.client_id', (int) $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_modules');		$this->setState('params', $params);		// Manually set limits to get all modules.		$this->setState('list.limit', 0);		$this->setState('list.start', 0);		$this->setState('list.ordering', 'a.name');		$this->setState('list.direction', 'ASC');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id, a.name, a.element AS module'			)		);		$query->from($db->quoteName('#__extensions') . ' AS a');		// Filter by module		$query->where('a.type = ' . $db->quote('module'));		// Filter by client.		$clientId = $this->getState('filter.client_id');		$query->where('a.client_id = ' . (int) $clientId);		// Filter by enabled		$query->where('a.enabled = 1');		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function &getItems()	{		// Get the list of items from the database.		$items = parent::getItems();		$client = JApplicationHelper::getClientInfo($this->getState('filter.client_id', 0));		$lang = JFactory::getLanguage();		// Loop through the results to add the XML metadata,		// and load language support.		foreach ($items as &$item)		{			$path = JPath::clean($client->path . '/modules/' . $item->module . '/' . $item->module . '.xml');			if (file_exists($path))			{				$item->xml = simplexml_load_file($path);			}			else			{				$item->xml = null;			}			// 1.5 Format; Core files or language packs then			// 1.6 3PD Extension Support			$lang->load($item->module . '.sys', $client->path, null, false, false)				|| $lang->load($item->module . '.sys', $client->path . '/modules/' . $item->module, null, false, false)				|| $lang->load($item->module . '.sys', $client->path, $lang->getDefault(), false, false)				|| $lang->load($item->module . '.sys', $client->path . '/modules/' . $item->module, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);			if (isset($item->xml) && $text = trim($item->xml->description))			{				$item->desc = JText::_($text);			}			else			{				$item->desc = JText::_('COM_MODULES_NODESCRIPTION');			}		}		$items = JArrayHelper::sortObjects($items, 'name', 1, true, $lang->getLocale());		// TODO: Use the cached XML from the extensions table?		return $items;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsViewTag extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		$this->canDo = TagsHelper::getActions($this->state->get('tags.component'));		$input = JFactory::getApplication()->input;		// Check for errors.		if (count($errors = $this->get('Errors'))) {			JError::raiseError(500, implode("\n", $errors));			return false;		}		$input->set('hidemainmenu', true);		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since  3.1	 */	protected function addToolbar()	{		$input      = JFactory::getApplication()->input;		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load('com_tags', JPATH_BASE, null, false, false)		||	$lang->load('com_tags', JPATH_ADMINISTRATOR.'/components/com_tags', null, false, false)		||	$lang->load('com_tags', JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load('com_tags', JPATH_ADMINISTRATOR.'/components/com_tags', $lang->getDefault(), false, false);		// Load the tags helper.		require_once JPATH_COMPONENT.'/helpers/tags.php';		// Get the results for each action.		$canDo = TagsHelper::getActions('com_tags', $this->item->id);		$title = JText::_('COM_TAGS_BASE_'.($isNew?'ADD':'EDIT').'_TITLE');		// Prepare the toolbar.		JToolbarHelper::title($title, 'tag-'.($isNew?'add':'edit').($isNew?'add':'edit'));		// For new records, check the create permission.		if ($isNew)		{			JToolbarHelper::apply('tag.apply');			JToolbarHelper::save('tag.save');			JToolbarHelper::save2new('tag.save2new');		}		// If not checked out, can save the item.		elseif (!$checkedOut && ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_user_id == $userId))) {			JToolbarHelper::apply('tag.apply');			JToolbarHelper::save('tag.save');			if ($canDo->get('core.create')) {				JToolbarHelper::save2new('tag.save2new');			}		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create')) {			JToolbarHelper::save2copy('tag.save2copy');		}		if (empty($this->item->id))  {			JToolbarHelper::cancel('tag.cancel');		}		else {			JToolbarHelper::cancel('tag.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::help('JHELP_COMPONENTS_TAGS_MANAGER_EDIT');		JToolbarHelper::divider();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'newsfeed.cancel' || document.formvalidator.isValid(document.id('newsfeed-form')))		{			Joomla.submitform(task, document.getElementById('newsfeed-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="newsfeed-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo empty($this->item->id) ? JText::_('COM_NEWSFEEDS_NEW_NEWSFEED') : JText::sprintf('COM_NEWSFEEDS_EDIT_NEWSFEED', $this->item->id); ?></legend>			<ul class="adminformlist">			<li><?php echo $this->form->getLabel('name'); ?>			<?php echo $this->form->getInput('name'); ?></li>   			<li><?php echo $this->form->getLabel('alias'); ?>			<?php echo $this->form->getInput('alias'); ?></li>			<li><?php echo $this->form->getLabel('link'); ?>			<?php echo $this->form->getInput('link'); ?></li>			<li><?php echo $this->form->getLabel('catid'); ?>			<?php echo $this->form->getInput('catid'); ?></li>			<li><?php echo $this->form->getLabel('published'); ?>			<?php echo $this->form->getInput('published'); ?></li>			<li><?php echo $this->form->getLabel('access'); ?>			<?php echo $this->form->getInput('access'); ?></li>			<li><?php echo $this->form->getLabel('ordering'); ?>			<?php echo $this->form->getInput('ordering'); ?></li>			<li><?php echo $this->form->getLabel('language'); ?>			<?php echo $this->form->getInput('language'); ?></li>			<!-- Tag field -->			<?php foreach ($this->get('form')->getFieldset('jmetadata') as $field) : ?>				<?php if ($field->name == 'jform[metadata][tags][]') :?>					<li>						<?php echo $field->label; ?>						<?php echo $field->input; ?>					</li>				<?php endif; ?>			<?php endforeach; ?>			<li><?php echo $this->form->getLabel('id'); ?>			<?php echo $this->form->getInput('id'); ?></li>			</ul>		</fieldset>	</div>	<div class="col options-section">		<?php echo JHtml::_('sliders.start', 'newsfeed-sliders-' . $this->item->id, array('useCookie' => 1)); ?>			<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_PUBLISHING'), 'publishing-details'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_PUBLISHING'); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('created_by'); ?>				<?php echo $this->form->getInput('created_by'); ?></li>				<li><?php echo $this->form->getLabel('created_by_alias'); ?>				<?php echo $this->form->getInput('created_by_alias'); ?></li>				<li><?php echo $this->form->getLabel('created'); ?>				<?php echo $this->form->getInput('created'); ?></li>				<li><?php echo $this->form->getLabel('publish_up'); ?>				<?php echo $this->form->getInput('publish_up'); ?></li>				<li><?php echo $this->form->getLabel('publish_down'); ?>				<?php echo $this->form->getInput('publish_down'); ?></li>				<?php if ($this->item->modified_by) : ?>					<li><?php echo $this->form->getLabel('modified_by'); ?>					<?php echo $this->form->getInput('modified_by'); ?></li>					<li><?php echo $this->form->getLabel('modified'); ?>					<?php echo $this->form->getInput('modified'); ?></li>				<?php endif; ?>				<li><?php echo $this->form->getLabel('numarticles'); ?>				<?php echo $this->form->getInput('numarticles'); ?></li>				<li><?php echo $this->form->getLabel('cache_time'); ?>				<?php echo $this->form->getInput('cache_time'); ?></li>				<li><?php echo $this->form->getLabel('rtl'); ?>				<?php echo $this->form->getInput('rtl'); ?></li>			</ul>			</fieldset>			<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'), 'meta-options'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'); ?></legend>				<?php echo $this->loadTemplate('metadata'); ?>			</fieldset>			<?php if ($assoc) : ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php endif; ?>		<?php echo JHtml::_('sliders.end'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  System.languagecode * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Language Code plugin class. * * @package     Joomla.Plugin * @subpackage  Content.languagecode * @since       2.5 */class PlgSystemLanguagecode extends JPlugin{	/**	 * Plugin that change the language code used in the <html /> tag	 *	 * @since  2.5	 */	public function onAfterRender()	{		// Use this plugin only in site application		if (JFactory::getApplication()->isSite())		{			// Get the response body			$body = JResponse::getBody();			// Get the current language code			$code = JFactory::getDocument()->getLanguage();			// Get the new code			$new_code  = $this->params->get($code);			// Replace the old code by the new code in the <html /> tag			if ($new_code)			{				// Replace the new code in the HTML document				$patterns = array(					chr(1) . '(<html.*\s+xml:lang=")(' . $code . ')(".*>)' . chr(1) . 'i',					chr(1) . '(<html.*\s+lang=")(' . $code . ')(".*>)' . chr(1) . 'i',				);				$replace = array(					'${1}' . strtolower($new_code) . '${3}',					'${1}' . strtolower($new_code) . '${3}'				);			}			else			{				$patterns = array();				$replace = array();			}			// Replace codes in <link hreflang="" /> attributes			preg_match_all(chr(1) . '(<link.*\s+hreflang=")([0-9a-z\-]*)(".*\s+rel="alternate".*/>)' . chr(1) . 'i', $body, $matches);			foreach ($matches[2] as $match)			{				$new_code = $this->params->get(strtolower($match));				if ($new_code)				{					$patterns[] = chr(1) . '(<link.*\s+hreflang=")(' . $match . ')(".*\s+rel="alternate".*/>)' . chr(1) . 'i';					$replace[] = '${1}' . $new_code . '${3}';				}			}			preg_match_all(chr(1) . '(<link.*\s+rel="alternate".*\s+hreflang=")([0-9A-Za-z\-]*)(".*/>)' . chr(1) . 'i', $body, $matches);			foreach ($matches[2] as $match)			{				$new_code = $this->params->get(strtolower($match));				if ($new_code)				{					$patterns[] = chr(1) . '(<link.*\s+rel="alternate".*\s+hreflang=")(' . $match . ')(".*/>)' . chr(1) . 'i';					$replace[] = '${1}' . $new_code . '${3}';				}			}			JResponse::setBody(preg_replace($patterns, $replace, $body));		}	}	/**	 * @param   JForm	$form	The form to be altered.	 * @param   array  $data	The associated data for the form.	 *	 * @return  boolean	 * @since	2.5	 */	public function onContentPrepareForm($form, $data)	{		// Check we have a form		if (!($form instanceof JForm))		{			$this->_subject->setError('JERROR_NOT_A_FORM');			return false;		}		// Check we are manipulating a valid form.		$app = JFactory::getApplication();		if ($form->getName() != 'com_plugins.plugin'			|| isset($data->name) && $data->name != 'plg_system_languagecode'			|| empty($data) && !$app->getUserState('plg_system_language_code.edit')		)		{			return true;		}		// Mark the plugin as being edited		$app->setUserState('plg_system_language_code.edit', $data->name == 'plg_system_languagecode');		// Get site languages		$languages = JLanguage::getKnownLanguages(JPATH_SITE);		// Inject fields into the form		foreach ($languages as $tag => $language)		{			$form->load('<form>	<fields name="params">		<fieldset			name="languagecode"			label="PLG_SYSTEM_LANGUAGECODE_FIELDSET_LABEL"			description="PLG_SYSTEM_LANGUAGECODE_FIELDSET_DESC"		>			<field				name="'.strtolower($tag).'"				type="text"				description="' . htmlspecialchars(JText::sprintf('PLG_SYSTEM_LANGUAGECODE_FIELD_DESC', $language['name']), ENT_COMPAT, 'UTF-8') . '"				translate_description="false"				label="' . $tag . '"				translate_label="false"				size="7"				filter="cmd"			/>		</fieldset>	</fields></form>			');		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'weblink.cancel' || document.formvalidator.isValid(document.id('weblink-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('weblink-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_weblinks&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="weblink-form" class="form-validate">	<div class="row-fluid">		<!-- Begin Weblinks -->		<div class="span10 form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_WEBLINKS_NEW_WEBLINK', true) : JText::sprintf('COM_WEBLINKS_EDIT_WEBLINK', $this->item->id, true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('title'); ?></div>					<div class="controls"><?php echo $this->form->getInput('title'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('url'); ?></div>					<div class="controls"><?php echo $this->form->getInput('url'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>					<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>					<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('description'); ?></div>					<div class="controls"><?php echo $this->form->getInput('description'); ?></div>				</div>				<h4><?php echo JText::_('COM_WEBLINKS_FIELDSET_IMAGES');?></h4>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('images'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('images'); ?>					</div>				</div>				<?php foreach ($this->form->getGroup('images') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label">								<?php echo $field->label; ?>							</div>						<?php endif; ?>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>					<div class="controls"><?php echo $this->form->getInput('id'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>					<div class="controls"><?php echo $this->form->getInput('created'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>					<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('version'); ?></div>					<div class="controls"><?php echo $this->form->getInput('version'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>				</div>				<?php if ($this->item->hits) : ?>					<div class="control-group">						<div class="control-label"><?php echo $this->form->getLabel('hits'); ?></div>						<div class="controls"><?php echo $this->form->getInput('hits'); ?></div>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php $fieldSets = $this->form->getFieldsets('params'); ?>			<?php foreach ($fieldSets as $name => $fieldSet) : ?>				<?php $paramstabs = 'params-' . $name; ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true)); ?>					<?php echo $this->loadTemplate('params'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endforeach; ?>			<?php $fieldSets = $this->form->getFieldsets('metadata'); ?>			<?php foreach ($fieldSets as $name => $fieldSet) : ?>				<?php $metadatatabs = 'metadata-' . $name; ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', $metadatatabs, JText::_($fieldSet->label, true)); ?>					<?php echo $this->loadTemplate('metadata'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endforeach; ?>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>		</fieldset>		</div>		<!-- End Weblinks -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for interacting with a Linkedin API instance. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedin{	/**	 * @var    JRegistry  Options for the Linkedin object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var JLinkedinOAuth The OAuth client.	 * @since 13.1	 */	protected $oauth;	/**	 * @var    JLinkedinPeople  Linkedin API object for people.	 * @since  13.1	 */	protected $people;	/**	 * @var    JLinkedinGroups  Linkedin API object for groups.	 * @since  13.1	 */	protected $groups;	/**	 * @var    JLinkedinCompanies  Linkedin API object for companies.	 * @since  13.1	 */	protected $companies;	/**	 * @var    JLinkedinJobs  Linkedin API object for jobs.	 * @since  13.1	 */	protected $jobs;	/**	 * @var    JLinkedinStream  Linkedin API object for social stream.	 * @since  13.1	 */	protected $stream;	/**	 * @var    JLinkedinCommunications  Linkedin API object for communications.	 * @since  13.1	 */	protected $communications;	/**	 * Constructor.	 *	 * @param   JLinkedinOauth  $oauth    OAuth object	 * @param   JRegistry       $options  Linkedin options object.	 * @param   JHttp           $client   The HTTP client object.	 *	 * @since   13.1	 */	public function __construct(JLinkedinOauth $oauth = null, JRegistry $options = null, JHttp $client = null)	{		$this->oauth = $oauth;		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'https://api.linkedin.com');	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JLinkedinObject  Linkedin API object (statuses, users, favorites, etc.).	 *	 * @since   13.1	 */	public function __get($name)	{		switch ($name)		{			case 'people':				if ($this->people == null)				{					$this->people = new JLinkedinPeople($this->options, $this->client, $this->oauth);				}				return $this->people;			case 'groups':				if ($this->groups == null)				{					$this->groups = new JLinkedinGroups($this->options, $this->client, $this->oauth);				}				return $this->groups;			case 'companies':				if ($this->companies == null)				{					$this->companies = new JLinkedinCompanies($this->options, $this->client, $this->oauth);				}				return $this->companies;			case 'jobs':				if ($this->jobs == null)				{					$this->jobs = new JLinkedinJobs($this->options, $this->client, $this->oauth);				}				return $this->jobs;			case 'stream':				if ($this->stream == null)				{					$this->stream = new JLinkedinStream($this->options, $this->client, $this->oauth);				}				return $this->stream;			case 'communications':				if ($this->communications == null)				{					$this->communications = new JLinkedinCommunications($this->options, $this->client, $this->oauth);				}				return $this->communications;		}	}	/**	 * Get an option from the JLinkedin instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the Linkedin instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JLinkedin  This object for method chaining.	 *	 * @since   13.1	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules list controller class. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesControllerModules extends JControllerAdmin{	/**	 * Method to clone an existing module.	 * @since   1.6	 */	public function duplicate()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		JArrayHelper::toInteger($pks);		try {			if (empty($pks))			{				throw new Exception(JText::_('COM_MODULES_ERROR_NO_MODULES_SELECTED'));			}			$model = $this->getModel();			$model->duplicate($pks);			$this->setMessage(JText::plural('COM_MODULES_N_MODULES_DUPLICATED', count($pks)));		} catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_modules&view=modules');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Module', $prefix = 'ModulesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks   = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Article View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewForm extends JViewLegacy{	protected $form;	protected $item;	protected $return_page;	protected $state;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		// Get model data.		$this->state		= $this->get('State');		$this->item			= $this->get('Item');		$this->form			= $this->get('Form');		$this->return_page	= $this->get('ReturnPage');		if (empty($this->item->id))		{			$authorised = $user->authorise('core.create', 'com_content') || (count($user->getAuthorisedCategories('com_content', 'core.create')));		}		else		{			$authorised = $this->item->params->get('access-edit');		}		if ($authorised !== true)		{			JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			return false;		}		$this->item->tags = new JHelperTags;		if (!empty($this->item->id))		{			$this->item->tags->getItemTags('com_content.article.', $this->item->id);		}		if (!empty($this->item) && isset($this->item->id))		{			$this->item->images = json_decode($this->item->images);			$this->item->urls = json_decode($this->item->urls);			$tmp = new stdClass;			$tmp->images = $this->item->images;			$tmp->urls = $this->item->urls;			$this->form->bind($tmp);		}		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Create a shortcut to the parameters.		$params	= &$this->state->params;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params = $params;		$this->user   = $user;		if ($params->get('enable_category') == 1)		{			$this->form->setFieldAttribute('catid', 'default', $params->get('catid', 1));			$this->form->setFieldAttribute('catid', 'readonly', 'true');		}		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTENT_FORM_EDIT_ARTICLE'));		}		$title = $this->params->def('page_title', JText::_('COM_CONTENT_FORM_EDIT_ARTICLE'));		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		$pathway = $app->getPathWay();		$pathway->addItem($title, '');		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Banner HTML class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       2.5 */abstract class JHtmlBanner{	/**	 * Display a batch widget for the client selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function clients()	{		// Create the batch selector to change the client on a selection list.		$lines = array(			'<label id="batch-client-lbl" for="batch-client" class="hasTip" title="'.JText::_('COM_BANNERS_BATCH_CLIENT_LABEL').'::'.JText::_('COM_BANNERS_BATCH_CLIENT_LABEL_DESC').'">',			JText::_('COM_BANNERS_BATCH_CLIENT_LABEL'),			'</label>',			'<select name="batch[client_id]" class="inputbox" id="batch-client-id">',			'<option value="">'.JText::_('COM_BANNERS_BATCH_CLIENT_NOCHANGE').'</option>',			'<option value="0">'.JText::_('COM_BANNERS_NO_CLIENT').'</option>',			JHtml::_('select.options', self::clientlist(), 'value', 'text'),			'</select>'		);		return implode("\n", $lines);	}	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	public static function clientlist()	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('id As value, name As text')			->from('#__banner_clients AS a')			->order('a.name');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $options;	}	/**	 * Returns a pinned state on a grid	 *	 * @param   integer       $value			The state value.	 * @param   integer       $i				The row index	 * @param   boolean       $enabled		An optional setting for access control on the action.	 * @param   string        $checkbox		An optional prefix for checkboxes.	 *	 * @return  string        The Html code	 *	 * @see JHtmlJGrid::state	 *	 * @since   2.5.5	 */	public static function pinned($value, $i, $enabled = true, $checkbox = 'cb')	{		$states	= array(			1	=> array(				'sticky_unpublish',				'COM_BANNERS_BANNERS_PINNED',				'COM_BANNERS_BANNERS_HTML_PIN_BANNER',				'COM_BANNERS_BANNERS_PINNED',				false,				'publish',				'publish'			),			0	=> array(				'sticky_publish',				'COM_BANNERS_BANNERS_UNPINNED',				'COM_BANNERS_BANNERS_HTML_UNPIN_BANNER',				'COM_BANNERS_BANNERS_UNPINNED',				false,				'unpublish',				'unpublish'			),		);		return JHtml::_('jgrid.state', $states, $value, $i, 'banners.', $enabled, true, $checkbox);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JSON Response class * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class JJsonResponse{	/**	 * Determines whether the request was successful	 *	 * @var		boolean	 * @since	2.5	 */	public $success = true;	/**	 * Determines whether the request wasn't successful.	 * This is always the negation of $this->success,	 * so you can use both flags equivalently.	 *	 * @var		boolean	 * @since	2.5	 */	public $error = false;	/**	 * The main response message	 *	 * @var		string	 * @since	2.5	 */	public $message = null;	/**	 * Array of messages gathered in the JApplication object	 *	 * @var		array	 * @since	2.5	 */	public $messages = null;	/**	 * The response data	 *	 * var		array/object	 * @since	2.5	 */	public $data = null;	/**	 * Constructor	 *	 * @param   	array/object	$response	The Response data	 * @param   	string				$message	The main response message	 * @param   	boolean				$error		True, if the success flag shall be set to false, defaults to false	 *	 * @return  void	 *	 * @since		2.5	 */	public function __construct($response = null, $message = null, $error = false)	{		$this->message = $message;		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted messages list		if (is_array($messages) && count($messages))		{			foreach ($messages as $message)			{				if (isset($message['type']) && isset($message['message']))				{					$lists[$message['type']][] = $message['message'];				}			}		}		// If messages exist add them to the output		if (isset($lists) && is_array($lists))		{			$this->messages = $lists;		}		// Check if we are dealing with an error		if ($response instanceof Exception)		{			// Prepare the error response			$this->success = false;			$this->error = true;			$this->message	= $response->getMessage();		}		else		{			// Prepare the response data			$this->success = !$error;			$this->error = $error;			$this->data = $response;		}	}	/**	 * Magic toString method for sending the response in JSON format	 *	 * @return  string	The response in JSON format	 *	 * @since		2.5	 */	public function __toString()	{		return json_encode($this);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_TAGS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_TAGS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access'); ?>			</div>		</div>	<div class="modal-body">		<p><?php echo JText::_('COM_TAGS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-tag-id').value='';document.id('batch-client-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('tag.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>		</button>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Note class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/note/ * @since       13.1 */class JFacebookNote extends JFacebookObject{	/**	 * Method to get a note. Requires authentication and user_notes or friends_notes permission for non-public notes.	 *	 * @param   string  $note  The note id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getNote($note)	{		return $this->get($note);	}	/**	 * Method to get a note's comments. Requires authentication and user_notes or friends_notes permission for non-public notes.	 *	 * @param   string   $note    The note id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($note, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($note, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a note. Requires authentication and publish_stream and user_notes or friends_notes permissions.	 *	 * @param   string  $note     The note id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($note, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($note, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream and user_notes or friends_notes permissions.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get note's likes. Requires authentication and user_notes or friends_notes for non-public notes.	 *	 * @param   string   $note    The note id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($note, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($note, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a note. Requires authentication and publish_stream and user_notes or friends_notes permissions.	 *	 * @param   string  $note  The note id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($note)	{		return $this->createConnection($note, 'likes');	}	/**	 * Method to unlike a note. Requires authentication and publish_stream and user_notes or friends_notes permissions.	 *	 * @param   string  $note  The note id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($note)	{		return $this->deleteConnection($note, 'likes');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));JText::script('COM_USERS_GROUPS_CONFIRM_DELETE');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'groups.delete')		{			var f = document.adminForm;			var cb='';<?php foreach ($this->items as $i => $item):?><?php if ($item->user_count > 0):?>			cb = f['cb'+<?php echo $i;?>];			if (cb && cb.checked)			{				if (confirm(Joomla.JText._('COM_USERS_GROUPS_CONFIRM_DELETE')))				{					Joomla.submitform(task);				}				return;			}<?php endif;?><?php endforeach;?>		}		Joomla.submitform(task);	}</script><form action="<?php echo JRoute::_('index.php?option=com_users&view=groups');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_GROUPS_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_GROUPS_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_GROUPS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JText::_('COM_USERS_HEADING_GROUP_TITLE'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_USERS_HEADING_USERS_IN_GROUP'); ?>				</th>				<th class="nowrap id-col">					<?php echo JText::_('JGRID_HEADING_ID'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create', 'com_users');			$canEdit   = $user->authorise('core.edit',   'com_users');			// If this group is super admin and this user is not super admin, $canEdit is false			if (!$user->authorise('core.admin') && (JAccess::checkGroup($item->id, 'core.admin')))			{				$canEdit = false;			}			$canChange	= $user->authorise('core.edit.state',	'com_users');		?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php if ($canEdit) : ?>						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					<?php endif; ?>				</td>				<td>					<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_users&task=group.edit&id='.$item->id);?>">						<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<?php if (JDEBUG) : ?>						<div class="fltrt"><div class="button2-left smallsub"><div class="blank"><a href="<?php echo JRoute::_('index.php?option=com_users&view=debuggroup&group_id='.(int) $item->id);?>">						<?php echo JText::_('COM_USERS_DEBUG_GROUP');?></a></div></div></div>					<?php endif; ?>				</td>				<td class="center">					<?php echo $item->user_count ? $item->user_count : ''; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('behavior.modal');$canDo = UsersHelper::getActions();$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn = $this->escape($this->state->get('list.direction'));$loggeduser = JFactory::getUser();?><form action="<?php echo JRoute::_('index.php?option=com_users&view=users');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_USERS'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('COM_USERS_SEARCH_USERS'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_USERS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_RESET'); ?></button>		</div>		<div class="filter-select">			<span class="faux-label")><?php echo JText::_('COM_USERS_FILTER_LABEL'); ?></span>			<label class="selectlabel" for="filter_state">				<?php echo JText::_('COM_USERS_FILTER_LABEL'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value="*"><?php echo JText::_('COM_USERS_FILTER_STATE');?></option>				<?php echo JHtml::_('select.options', UsersHelper::getStateOptions(), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<label class="selectlabel" for="filter_active">				<?php echo JText::_('COM_USERS_FILTER_ACTIVE'); ?>			</label>			<select name="filter_active" class="inputbox" id="filter_active">				<option value="*"><?php echo JText::_('COM_USERS_FILTER_ACTIVE');?></option>				<?php echo JHtml::_('select.options', UsersHelper::getActiveOptions(), 'value', 'text', $this->state->get('filter.active'));?>			</select>			<label class="selectlabel" for="filter_group_id">				<?php echo JText::_('COM_USERS_FILTER_USERGROUP'); ?>			</label>			<select name="filter_group_id" class="inputbox" id="filter_group_id">				<option value=""><?php echo JText::_('COM_USERS_FILTER_USERGROUP');?></option>				<?php echo JHtml::_('select.options', UsersHelper::getGroups(), 'value', 'text', $this->state->get('filter.group_id'));?>			</select>			<label class="selectlabel" for="filter_range">				<?php echo JText::_('COM_USERS_FILTER_FILTER_DATE'); ?>			</label>			<select name="filter_range" class="inputbox"  id="filter_range" >				<option value=""><?php echo JText::_('COM_USERS_OPTION_FILTER_DATE');?></option>				<?php echo JHtml::_('select.options', Usershelper::getRangeOptions(), 'value', 'text', $this->state->get('filter.range'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_USERNAME', 'a.username', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ENABLED', 'a.block', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ACTIVATED', 'a.activation', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JText::_('COM_USERS_HEADING_GROUPS'); ?>				</th>				<th class="nowrap width-15">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_EMAIL', 'a.email', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-15">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LAST_VISIT_DATE', 'a.lastvisitDate', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-15">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_REGISTRATION_DATE', 'a.registerDate', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canEdit	= $canDo->get('core.edit');			$canChange	= $loggeduser->authorise('core.edit.state',	'com_users');			// If this group is super admin and this user is not super admin, $canEdit is false			if ((!$loggeduser->authorise('core.admin')) && JAccess::check($item->id, 'core.admin'))			{				$canEdit	= false;				$canChange	= false;			}		?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php if ($canEdit) : ?>						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					<?php endif; ?>				</td>				<td>					<div class="fltrt">						<?php echo JHtml::_('users.filterNotes', $item->note_count, $item->id); ?>						<?php echo JHtml::_('users.notes', $item->note_count, $item->id); ?>						<?php echo JHtml::_('users.addNote', $item->id); ?>					</div>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.(int) $item->id); ?>" title="<?php echo JText::sprintf('COM_USERS_EDIT_USER', $this->escape($item->name)); ?>">						<?php echo $this->escape($item->name); ?></a>					<?php else : ?>						<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<?php if (JDEBUG) : ?>						<div class="fltrt"><div class="button2-left smallsub"><div class="blank"><a href="<?php echo JRoute::_('index.php?option=com_users&view=debuguser&user_id='.(int) $item->id);?>">						<?php echo JText::_('COM_USERS_DEBUG_USER');?></a></div></div></div>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->username); ?>				</td>				<td class="center">					<?php if ($canChange) : ?>						<?php if ($loggeduser->id != $item->id) : ?>							<?php echo JHtml::_('grid.boolean', $i, !$item->block, 'users.unblock', 'users.block'); ?>						<?php else : ?>							<?php echo JHtml::_('grid.boolean', $i, !$item->block, 'users.block', null); ?>						<?php endif; ?>					<?php else : ?>						<?php echo JText::_($item->block ? 'JNO' : 'JYES'); ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo JHtml::_('grid.boolean', $i, !$item->activation, 'users.activate', null); ?>				</td>				<td class="center">					<?php if (substr_count($item->group_names, "\n") > 1) : ?>						<span class="hasTip" title="<?php echo JText::_('COM_USERS_HEADING_GROUPS').'::'.nl2br($item->group_names); ?>"><?php echo JText::_('COM_USERS_USERS_MULTIPLE_GROUPS'); ?></span>					<?php else : ?>						<?php echo nl2br($item->group_names); ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->email); ?>				</td>				<td class="center">					<?php if ($item->lastvisitDate != '0000-00-00 00:00:00') : ?>						<?php echo JHtml::_('date', $item->lastvisitDate, 'Y-m-d H:i:s'); ?>					<?php else:?>						<?php echo JText::_('JNEVER'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo JHtml::_('date', $item->registerDate, 'Y-m-d H:i:s'); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_cache'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-select fltrt">			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('COM_CACHE_SELECT_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<?php echo JHtml::_('select.options', CacheHelper::getClientOptions(), 'value', 'text', $this->state->get('clientId'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div><table class="adminlist">	<thead>		<tr>			<th class="title row-number-col">				<?php echo JText::_('COM_CACHE_NUM'); ?>			</th>			<th class="checkmark-col">				<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />			</th>			<th class="title nowrap">				<?php echo JHtml::_('grid.sort',  'COM_CACHE_GROUP', 'group', $listDirn, $listOrder); ?>			</th>			<th class="width-5 center nowrap">				<?php echo JHtml::_('grid.sort',  'COM_CACHE_NUMBER_OF_FILES', 'count', $listDirn, $listOrder); ?>			</th>			<th class="width-10 center">				<?php echo JHtml::_('grid.sort',  'COM_CACHE_SIZE', 'size', $listDirn, $listOrder); ?>			</th>		</tr>	</thead>	<tbody>		<?php		$i = 0;		foreach ($this->data as $folder => $item) : ?>		<tr class="row<?php echo $i % 2; ?>">			<td>				<?php echo $this->pagination->getRowOffset($i); ?>			</td>			<td>				<input type="checkbox" id="cb<?php echo $i;?>" name="cid[]" title="<?php echo JText::sprintf('JGRID_CHECKBOX_ROW_N', ($i + 1)); ?>" value="<?php echo $item->group; ?>" onclick="Joomla.isChecked(this.checked);" />			</td>			<td>				<span class="bold">					<?php echo $item->group; ?>				</span>			</td>			<td class="center">				<?php echo $item->count; ?>			</td>			<td class="center">				<?php echo JHtml::_('number.bytes', $item->size*1024); ?>			</td>		</tr>		<?php $i++; endforeach; ?>	</tbody></table><?php echo $this->pagination->getListFooter(); ?><input type="hidden" name="task" value="" /><input type="hidden" name="boxchecked" value="0" /><input type="hidden" name="client" value="<?php echo $this->client->id;?>" /><input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" /><input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" /><?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_newsfeeds component * * @return  array  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. */function NewsfeedsBuildRoute(&$query){	$segments = array();	// get a menu item based on Itemid or currently active	$app	= JFactory::getApplication();	$menu	= $app->getMenu();	$params = JComponentHelper::getParams('com_newsfeeds');	$advanced = $params->get('sef_advanced_link', 0);	if (empty($query['Itemid']))	{		$menuItem = $menu->getActive();	}	else	{		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mId   = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (isset($query['view']))	{		$view = $query['view'];		if (empty($query['Itemid']) || empty($menuItem) || $menuItem->component != 'com_newsfeeds')		{			$segments[] = $query['view'];		}		unset($query['view']);	}	// are we dealing with an newsfeed that is attached to a menu item?	if (isset($query['view']) && ($mView == $query['view']) and (isset($query['id'])) and ($mId == (int) $query['id']))	{		unset($query['view']);		unset($query['catid']);		unset($query['id']);		return $segments;	}	if (isset($view) and ($view == 'category' or $view == 'newsfeed'))	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'newsfeed' && isset($query['catid']))			{				$catid = $query['catid'];			}			elseif (isset($query['id']))			{				$catid = $query['id'];			}			$menuCatid = $mId;			$categories = JCategories::getInstance('Newsfeeds');			$category = $categories->get($catid);			if ($category)			{				$path = $category->getPath();				$path = array_reverse($path);				$array = array();				foreach ($path as $id)				{					if ((int) $id == (int) $menuCatid)					{						break;					}					if ($advanced)					{						list($tmp, $id) = explode(':', $id, 2);					}					$array[] = $id;				}				$segments = array_merge($segments, array_reverse($array));			}			if ($view == 'newsfeed')			{				if ($advanced)				{					list($tmp, $id) = explode(':', $query['id'], 2);				}				else				{					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);		unset($query['catid']);	}	if (isset($query['layout']))	{		if (!empty($query['Itemid']) && isset($menuItem->query['layout']))		{			if ($query['layout'] == $menuItem->query['layout'])			{				unset($query['layout']);			}		}		else		{			if ($query['layout'] == 'default')			{				unset($query['layout']);			}		}	}	return $segments;}/** * Parse the segments of a URL. * * @return  array  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. */function NewsfeedsParseRoute($segments){	$vars = array();	//Get the active menu item.	$app	= JFactory::getApplication();	$menu	= $app->getMenu();	$item	= $menu->getActive();	$params = JComponentHelper::getParams('com_newsfeeds');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for newsfeeds.	if (!isset($item))	{		$vars['view']	= $segments[0];		$vars['id']		= $segments[$count - 1];		return $vars;	}	// From the categories view, we can only jump to a category.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$categories = JCategories::getInstance('Newsfeeds')->get($id)->getChildren();	$vars['catid'] = $id;	$vars['id'] = $id;	$found = 0;	foreach ($segments as $segment)	{		$segment = $advanced ? str_replace(':', '-', $segment) : $segment;		foreach ($categories as $category)		{			if ($category->slug == $segment || $category->alias == $segment)			{				$vars['id'] = $category->id;				$vars['catid'] = $category->id;				$vars['view'] = 'category';				$categories = $category->getChildren();				$found = 1;				break;			}		}		if ($found == 0)		{			if ($advanced)			{				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('id'))					->from('#__newsfeeds')					->where($db->quoteName('catid') . ' = ' . (int) $vars['catid'])					->where($db->quoteName('alias') . ' = ' . $db->quote($db->quote($segment)));				$db->setQuery($query);				$nid = $db->loadResult();			}			else			{				$nid = $segment;			}			$vars['id'] = $nid;			$vars['view'] = 'newsfeed';		}		$found = 0;	}	return $vars;}
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Base class for rendering a display layout * loaded from from a layout file * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.0 */class JLayoutFile extends JLayoutBase{	/**	 * @var    string  Dot separated path to the layout file, relative to base path	 * @since  3.0	 */	protected $layoutId = '';	/**	 * @var    string  Base path to use when loading layout files	 * @since  3.0	 */	protected $basePath = null;	/**	 * @var    string  Full path to actual layout files, after possible template override check	 * @since  3.0.3	 */	protected $fullPath = null;	/**	 * Method to instantiate the file-based layout.	 *	 * @param   string  $layoutId  Dot separated path to the layout file, relative to base path	 * @param   string  $basePath  Base path to use when loading layout files	 *	 * @since   3.0	 */	public function __construct($layoutId, $basePath = null)	{		$this->layoutId = $layoutId;		$this->basePath = is_null($basePath) ? JPATH_ROOT . '/layouts' : rtrim($basePath, DIRECTORY_SEPARATOR);	}	/**	 * Method to render the layout.	 *	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 *	 * @return  string  The necessary HTML to display the layout	 *	 * @since   3.0	 */	public function render($displayData)	{		$layoutOutput = '';		// Check possible overrides, and build the full path to layout file		$path = $this->getPath();		// If there exists such a layout file, include it and collect its output		if (!empty($path))		{			ob_start();			include $path;			$layoutOutput = ob_get_contents();			ob_end_clean();		}		return $layoutOutput;	}	/**	 * Method to finds the full real file path, checking possible overrides	 *	 * @return  string  The full path to the layout file	 *	 * @since   3.0	 */	protected function getPath()	{		if (is_null($this->fullPath) && !empty($this->layoutId))		{			$rawPath = str_replace('.', '/', $this->layoutId) . '.php';			$fileName = basename($rawPath);			$filePath = dirname($rawPath);			$possiblePaths = array(				JPATH_THEMES . '/' . JFactory::getApplication()->getTemplate() . '/html/layouts/' . $filePath,				$this->basePath . '/' . $filePath			);			$this->fullPath = JPath::find($possiblePaths, $fileName);		}		return $this->fullPath;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');$canDo = UsersHelper::getActions();?><script type="text/javascript">Joomla.submitbutton = function(task){	if (task == 'level.cancel' || document.formvalidator.isValid(document.id('level-form')))	{		Joomla.submitform(task, document.id('level-form'));	}}/*window.addEvent('domready', function(){	document.id('user-groups').getElements('input').each(function(i){		// Event to check all child groups.		i.addEvent('check', function(e){			// Check the child groups.			document.id('user-groups').getElements('input').each(function(c){				if (this.getProperty('rel') == c.id)				{					c.setProperty('checked', true);					c.setProperty('disabled', true);					c.fireEvent('check');				}			}.bind(this));		}.bind(i));		// Event to uncheck all the parent groups.		i.addEvent('uncheck', function(e){			// Uncheck the parent groups.			document.id('user-groups').getElements('input').each(function(c){				if (c.getProperty('rel') == this.id)				{					c.setProperty('checked', false);					c.setProperty('disabled', false);					c.fireEvent('uncheck');				}			}.bind(this));		}.bind(i));		// Bind to the click event to check/uncheck child/parent groups.		i.addEvent('click', function(e){			// Check the child groups.			document.id('user-groups').getElements('input').each(function(c){				if (this.getProperty('rel') == c.id)				{					c.setProperty('checked', true);					if (this.getProperty('checked'))					{						c.setProperty('disabled', true);					} else {						c.setProperty('disabled', false);					}					c.fireEvent('check');				}			}.bind(this));			// Uncheck the parent groups.			document.id('user-groups').getElements('input').each(function(c){				if (c.getProperty('rel') == this.id)				{					c.setProperty('checked', false);					c.setProperty('disabled', false);					c.fireEvent('uncheck');				}			}.bind(this));		}.bind(i));		// Initialise the widget.		if (i.getProperty('checked'))		{			i.fireEvent('click');		}	});});*/</script><form action="<?php echo JRoute::_('index.php?option=com_users&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="level-form" class="form-validate form-horizontal">	<fieldset>		<legend><?php echo JText::_('COM_USERS_LEVEL_DETAILS');?></legend>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('title'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('title'); ?>			</div>		</div>	</fieldset>	<fieldset>		<legend><?php echo JText::_('COM_USERS_USER_GROUPS_HAVING_ACCESS');?></legend>		<?php echo JHtml::_('access.usergroups', 'jform[rules]', $this->item->rules); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extended Utility class for the Users component. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class JHtmlUsers{	/**	 * Display an image.	 *	 * @param   string  $src  The source of the image	 *	 * @return  string  A <img> element if the specified file exists, otherwise, a null string	 *	 * @since   2.5	 */	public static function image($src)	{		$src = preg_replace('#[^A-Z0-9\-_\./]#i', '', $src);		$file = JPATH_SITE . '/' . $src;		jimport('joomla.filesystem.path');		JPath::check($file);		if (!file_exists($file))		{			return '';		}		return '<img src="' . JUri::root() . $src . '" alt="" />';	}	/**	 * Displays an icon to add a note for this user.	 *	 * @param   integer  $userId  The user ID	 *	 * @return  string  A link to add a note	 *	 * @since   2.5	 */	public static function addNote($userId)	{		$title = JText::_('COM_USERS_ADD_NOTE');		return '<a href="' . JRoute::_('index.php?option=com_users&task=note.add&u_id=' . (int) $userId) . '">'			. '<span class="label label-info"><i class="icon-vcard"></i>' . $title . '</span></a>';	}	/**	 * Displays an icon to filter the notes list on this user.	 *	 * @param   integer  $count   The number of notes for the user	 * @param   integer  $userId  The user ID	 *	 * @return  string  A link to apply a filter	 *	 * @since   2.5	 */	public static function filterNotes($count, $userId)	{		if (empty($count))		{			return '';		}		$title = JText::_('COM_USERS_FILTER_NOTES');		return '<a href="' . JRoute::_('index.php?option=com_users&view=notes&filter_search=uid:' . (int) $userId) . '">'			. JHtml::_('image', 'admin/filter_16.png', 'COM_USERS_NOTES', array('title' => $title), true) . '</a>';	}	/**	 * Displays a note icon.	 *	 * @param   integer  $count   The number of notes for the user	 * @param   integer  $userId  The user ID	 *	 * @return  string  A link to a modal window with the user notes	 *	 * @since   2.5	 */	public static function notes($count, $userId)	{		if (empty($count))		{			return '';		}		$title = JText::plural('COM_USERS_N_USER_NOTES', $count);		return '<a class="modal"'			. ' href="' . JRoute::_('index.php?option=com_users&view=notes&tmpl=component&layout=modal&u_id=' . (int) $userId) . '"'			. ' rel="{handler: \'iframe\', size: {x: 800, y: 450}}">'			. '<span class="label label-info"><i class="icon-drawer-2"></i>' . $title . '</span></a>';	}	/**	 * Build an array of block/unblock user states to be used by jgrid.state,	 * State options will be different for any user	 * and for currently logged in user	 *	 * @param   boolean  $self  True if state array is for currently logged in user	 *	 * @return  array  a list of possible states to display	 *	 * @since  3.0	 */	public static function blockStates( $self = false)	{		if ($self)		{			$states = array(				1 => array(					'task'				=> 'unblock',					'text'				=> '',					'active_title'		=> 'COM_USERS_USER_FIELD_BLOCK_DESC',					'inactive_title'	=> '',					'tip'				=> true,					'active_class'		=> 'unpublish',					'inactive_class'	=> 'unpublish'				),				0 => array(					'task'				=> 'block',					'text'				=> '',					'active_title'		=> '',					'inactive_title'	=> 'COM_USERS_USERS_ERROR_CANNOT_BLOCK_SELF',					'tip'				=> true,					'active_class'		=> 'publish',					'inactive_class'	=> 'publish'				)			);		}		else		{			$states = array(				1 => array(					'task'				=> 'unblock',					'text'				=> '',					'active_title'		=> 'COM_USERS_TOOLBAR_UNBLOCK',					'inactive_title'	=> '',					'tip'				=> true,					'active_class'		=> 'unpublish',					'inactive_class'	=> 'unpublish'				),				0 => array(					'task'				=> 'block',					'text'				=> '',					'active_title'		=> 'COM_USERS_USER_FIELD_BLOCK_DESC',					'inactive_title'	=> '',					'tip'				=> true,					'active_class'		=> 'publish',					'inactive_class'	=> 'publish'				)			);		}		return $states;	}	/**	 * Build an array of activate states to be used by jgrid.state,	 *	 * @return  array  a list of possible states to display	 *	 * @since  3.0	 */	public static function activateStates()	{		$states = array(			1	=> array(				'task'				=> 'activate',				'text'				=> '',				'active_title'		=> 'COM_USERS_TOOLBAR_ACTIVATE',				'inactive_title'	=> '',				'tip'				=> true,				'active_class'		=> 'unpublish',				'inactive_class'	=> 'unpublish'			),			0	=> array(				'task'				=> '',				'text'				=> '',				'active_title'		=> '',				'inactive_title'	=> 'COM_USERS_ACTIVATED',				'tip'				=> true,				'active_class'		=> 'publish',				'inactive_class'	=> 'publish'			)		);		return $states;	}}
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);if (file_exists(__DIR__ . '/defines.php')){	include_once __DIR__ . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', __DIR__);	require_once JPATH_BASE . '/includes/defines.php';}require_once JPATH_BASE . '/includes/framework.php';// Mark afterLoad in the profiler.JDEBUG ? $_PROFILER->mark('afterLoad') : null;// Instantiate the application.$app = JFactory::getApplication('site');// Initialise the application.$app->initialise();// Mark afterIntialise in the profiler.JDEBUG ? $_PROFILER->mark('afterInitialise') : null;// Route the application.$app->route();// Mark afterRoute in the profiler.JDEBUG ? $_PROFILER->mark('afterRoute') : null;// Dispatch the application.$app->dispatch();// Mark afterDispatch in the profiler.JDEBUG ? $_PROFILER->mark('afterDispatch') : null;// Render the application.$app->render();// Mark afterRender in the profiler.JDEBUG ? $_PROFILER->mark('afterRender') : null;// Return the response.echo $app;
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Articles list controller class. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactControllerContacts extends JControllerAdmin{	/**	 * Constructor.	 *	 * @param   array  $config	An optional associative array of configuration settings.	 *	 * @return  ContactControllerContacts	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unfeatured',	'featured');	}	/**	 * Method to toggle the featured setting of a list of contacts.	 *	 * @return  void	 * @since   1.6	 */	public function featured()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user   = JFactory::getUser();		$ids    = $this->input->get('cid', array(), 'array');		$values = array('featured' => 1, 'unfeatured' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		// Get the model.		$model  = $this->getModel();		// Access checks.		foreach ($ids as $i => $id)		{			$item = $model->getItem($id);			if (!$user->authorise('core.edit.state', 'com_contact.category.'.(int) $item->catid))			{				// Prune items that you can't change.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_CONTACT_NO_ITEM_SELECTED'));		}		else		{			// Publish the items.			if (!$model->featured($ids, $value))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_contact&view=contacts');	}	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the PHP class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Contact', $prefix = 'ContactModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$pks   = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}	/**	 * Function that allows child controller access to model data	 * after the item has been deleted.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   integer       $ids    The array of ids for items being deleted.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postDeleteHook(JModelLegacy $model, $ids = null)	{	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Groups class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinGroups extends JLinkedinObject{	/**	 * Method to get a group.	 *	 * @param   string   $id      The unique identifier for a group.	 * @param   string   $fields  Request fields beyond the default ones.	 * @param   integer  $start   Starting location within the result set for paginated returns.	 * @param   integer  $count   The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getGroup($id, $fields = null, $start = 0, $count = 5)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/groups/' . $id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to find the groups a member belongs to.	 *	 * @param   string   $id                The unique identifier for a user.	 * @param   string   $fields            Request fields beyond the default ones.	 * @param   integer  $start             Starting location within the result set for paginated returns.	 * @param   integer  $count             The number of results returned.	 * @param   string   $membership_state  The state of the callers membership to the specified group.	 * 										Values are: non-member, awaiting-confirmation, awaiting-parent-group-confirmation, member, moderator, manager, owner.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getMemberships($id = null, $fields = null, $start = 0, $count = 5, $membership_state = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if id is specified.		if ($id)		{			$base .= $id . '/group-memberships';		}		else		{			$base .= '~/group-memberships';		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Check if membership_state is specified.		if ($membership_state)		{			$data['membership-state'] = $membership_state;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to find the groups a member belongs to.	 *	 * @param   string   $person_id  The unique identifier for a user.	 * @param   string   $group_id   The unique identifier for a group.	 * @param   string   $fields     Request fields beyond the default ones.	 * @param   integer  $start      Starting location within the result set for paginated returns.	 * @param   integer  $count      The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSettings($person_id = null, $group_id = null, $fields = null, $start = 0, $count = 5)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/group-memberships';		}		else		{			$base .= '~/group-memberships';		}		// Check if group_id is specified.		if ($group_id)		{			$base .= '/' . $group_id;		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 5)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to change a groups settings.	 *	 * @param   string   $group_id          The unique identifier for a group.	 * @param   boolean  $show_logo         Show group logo in profile.	 * @param   string   $digest_frequency  E-mail digest frequency.	 * @param   boolean  $announcements     E-mail announcements from managers.	 * @param   boolean  $allow_messages    Allow messages from members.	 * @param   boolean  $new_post          E-mail for every new post.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function changeSettings($group_id, $show_logo = null, $digest_frequency = null, $announcements = null,		$allow_messages = null, $new_post = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/group-memberships/' . $group_id;		// Build xml.		$xml = '<group-membership>';		if (!is_null($show_logo))		{			$xml .= '<show-group-logo-in-profile>' . $this->booleanToString($show_logo) . '</show-group-logo-in-profile>';		}		if ($digest_frequency)		{			$xml .= '<email-digest-frequency><code>' . $digest_frequency . '</code></email-digest-frequency>';		}		if (!is_null($announcements))		{			$xml .= '<email-announcements-from-managers>' . $this->booleanToString($announcements) . '</email-announcements-from-managers>';		}		if (!is_null($allow_messages))		{			$xml .= '<allow-messages-from-members>' . $this->booleanToString($allow_messages) . '</allow-messages-from-members>';		}		if (!is_null($new_post))		{			$xml .= '<email-for-every-new-post>' . $this->booleanToString($new_post) . '</email-for-every-new-post>';		}		$xml .= '</group-membership>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method to join a group.	 *	 * @param   string   $group_id          The unique identifier for a group.	 * @param   boolean  $show_logo         Show group logo in profile.	 * @param   string   $digest_frequency  E-mail digest frequency.	 * @param   boolean  $announcements     E-mail announcements from managers.	 * @param   boolean  $allow_messages    Allow messages from members.	 * @param   boolean  $new_post          E-mail for every new post.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function joinGroup($group_id, $show_logo = null, $digest_frequency = null, $announcements = null,		$allow_messages = null, $new_post = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/group-memberships';		// Build xml.		$xml = '<group-membership><group><id>' . $group_id . '</id></group>';		if (!is_null($show_logo))		{			$xml .= '<show-group-logo-in-profile>' . $this->booleanToString($show_logo) . '</show-group-logo-in-profile>';		}		if ($digest_frequency)		{			$xml .= '<email-digest-frequency><code>' . $digest_frequency . '</code></email-digest-frequency>';		}		if (!is_null($announcements))		{			$xml .= '<email-announcements-from-managers>' . $this->booleanToString($announcements) . '</email-announcements-from-managers>';		}		if (!is_null($allow_messages))		{			$xml .= '<allow-messages-from-members>' . $this->booleanToString($allow_messages) . '</allow-messages-from-members>';		}		if (!is_null($new_post))		{			$xml .= '<email-for-every-new-post>' . $this->booleanToString($new_post) . '</email-for-every-new-post>';		}		$xml .= '<membership-state><code>member</code></membership-state></group-membership>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to leave a group.	 *	 * @param   string  $group_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function leaveGroup($group_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/group-memberships/' . $group_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to get dicussions for a group.	 *	 * @param   string   $id              The unique identifier for a group.	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $order           Sort order for posts. Valid for: recency, popularity.	 * @param   string   $category        Category of posts. Valid for: discussion	 * @param   string   $modified_since  Timestamp filter for posts created after the specified value.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getDiscussions($id, $fields = null, $start = 0, $count = 0, $order = null, $category = 'discussion', $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/groups/' . $id . '/posts';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if order is specified.		if ($order)		{			$data['order'] = $order;		}		// Check if category is specified.		if ($category)		{			$data['category'] = $category;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get posts a user started / participated in / follows for a group.	 *	 * @param   string   $group_id        The unique identifier for a group.	 * @param   string   $role            Filter for posts related to the caller. Valid for: creator, commenter, follower.	 * @param   string   $person_id       The unique identifier for a user.	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $order           Sort order for posts. Valid for: recency, popularity.	 * @param   string   $category        Category of posts. Valid for: discussion	 * @param   string   $modified_since  Timestamp filter for posts created after the specified value.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getUserPosts($group_id, $role, $person_id = null, $fields = null, $start = 0, $count = 0,		$order = null, $category = 'discussion', $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id;		}		else		{			$base .= '~';		}		$base .= '/group-memberships/' . $group_id . '/posts';		$data['format'] = 'json';		$data['role'] = $role;		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if order is specified.		if ($order)		{			$data['order'] = $order;		}		// Check if category is specified.		if ($category)		{			$data['category'] = $category;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve details about a post.	 *	 * @param   string  $post_id  The unique identifier for a post.	 * @param   string  $fields   Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getPost($post_id, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/posts/' . $post_id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve all comments of a post.	 *	 * @param   string   $post_id  The unique identifier for a post.	 * @param   string   $fields   Request fields beyond the default ones.	 * @param   integer  $start    Starting location within the result set for paginated returns.	 * @param   integer  $count    The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getPostComments($post_id, $fields = null, $start = 0, $count = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/posts/' . $post_id . '/comments';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to retrieve all comments of a post.	 *	 * @param   string  $group_id  The unique identifier for a group.	 * @param   string  $title     Post title.	 * @param   string  $summary   Post summary.	 *	 * @return  string  The created post's id.	 *	 * @since   13.1	 */	public function createPost($group_id, $title, $summary)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/groups/' . $group_id . '/posts';		// Build xml.		$xml = '<post><title>' . $title . '</title><summary>' . $summary . '</summary></post>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		// Return the post id.		$response = explode('posts/', $response->headers['Location']);		return $response[1];	}	/**	 * Method to like or unlike a post.	 *	 * @param   string   $post_id  The unique identifier for a group.	 * @param   boolean  $like     True to like post, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _likeUnlike($post_id, $like)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/relation-to-viewer/is-liked';		// Build xml.		$xml = '<is-liked>' . $this->booleanToString($like) . '</is-liked>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to like a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function likePost($post_id)	{		return $this->_likeUnlike($post_id, true);	}	/**	 * Method used to unlike a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unlikePost($post_id)	{		return $this->_likeUnlike($post_id, false);	}	/**	 * Method to follow or unfollow a post.	 *	 * @param   string   $post_id  The unique identifier for a group.	 * @param   boolean  $follow   True to like post, false otherwise.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	private function _followUnfollow($post_id, $follow)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/relation-to-viewer/is-following';		// Build xml.		$xml = '<is-following>' . $this->booleanToString($follow) . '</is-following>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method used to follow a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function followPost($post_id)	{		return $this->_followUnfollow($post_id, true);	}	/**	 * Method used to unfollow a post.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unfollowPost($post_id)	{		return $this->_followUnfollow($post_id, false);	}	/**	 * Method to flag a post as a Promotion or Job.	 *	 * @param   string  $post_id  The unique identifier for a group.	 * @param   string  $flag     Flag as a 'promotion' or 'job'.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function flagPost($post_id, $flag)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id . '/category/code';		// Build xml.		$xml = '<code>' . $flag . '</code>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response;	}	/**	 * Method to delete a post if the current user is the creator or flag it as inappropriate otherwise.	 *	 * @param   string  $post_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deletePost($post_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/posts/' . $post_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to access the comments resource.	 *	 * @param   string  $comment_id  The unique identifier for a comment.	 * @param   string  $fields      Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getComment($comment_id, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/comments/' . $comment_id;		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to add a comment to a post	 *	 * @param   string  $post_id  The unique identifier for a group.	 * @param   string  $comment  The post comment's text.	 *	 * @return  string   The created comment's id.	 *	 * @since   13.1	 */	public function addComment($post_id, $comment)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/posts/' . $post_id . '/comments';		// Build xml.		$xml = '<comment><text>' . $comment . '</text></comment>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		// Return the comment id.		$response = explode('comments/', $response->headers['Location']);		return $response[1];	}	/**	 * Method to delete a comment if the current user is the creator or flag it as inappropriate otherwise.	 *	 * @param   string  $comment_id  The unique identifier for a group.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deleteComment($comment_id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/comments/' . $comment_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to get suggested groups for a user.	 *	 * @param   string  $person_id  The unique identifier for a user.	 * @param   string  $fields     Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSuggested($person_id = null, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/suggestions/groups';		}		else		{			$base .= '~/suggestions/groups';		}		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to delete a group suggestion for a user.	 *	 * @param   string  $suggestion_id  The unique identifier for a suggestion.	 * @param   string  $person_id      The unique identifier for a user.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deleteSuggestion($suggestion_id, $person_id = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/';		// Check if person_id is specified.		if ($person_id)		{			$base .= $person_id . '/suggestions/groups/' . $suggestion_id;		}		else		{			$base .= '~/suggestions/groups/' . $suggestion_id;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for creating HTML select lists * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlSelect{	/**	 * Default values for options. Organized by option group.	 *	 * @var     array	 * @since   11.1	 */	static protected $optionDefaults = array(		'option' => array('option.attr' => null, 'option.disable' => 'disable', 'option.id' => null, 'option.key' => 'value',			'option.key.toHtml' => true, 'option.label' => null, 'option.label.toHtml' => true, 'option.text' => 'text',			'option.text.toHtml' => true));	/**	 * Generates a yes/no radio list.	 *	 * @param   string  $name      The value of the HTML name attribute	 * @param   array   $attribs   Additional HTML attributes for the <select> tag	 * @param   string  $selected  The key that is selected	 * @param   string  $yes       Language key for Yes	 * @param   string  $no        Language key for no	 * @param   string  $id        The id for the field	 *	 * @return  string  HTML for the radio list	 *	 * @since   11.1	 * @see     JFormFieldRadio	 */	public static function booleanlist($name, $attribs = null, $selected = null, $yes = 'JYES', $no = 'JNO', $id = false)	{		$arr = array(JHtml::_('select.option', '0', JText::_($no)), JHtml::_('select.option', '1', JText::_($yes)));		return JHtml::_('select.radiolist', $arr, $name, $attribs, 'value', 'text', (int) $selected, $id);	}	/**	 * Generates an HTML selection list.	 *	 * @param   array    $data       An array of objects, arrays, or scalars.	 * @param   string   $name       The value of the HTML name attribute.	 * @param   mixed    $attribs    Additional HTML attributes for the <select> tag. This	 *                               can be an array of attributes, or an array of options. Treated as options	 *                               if it is the last argument passed. Valid options are:	 *                               Format options, see {@see JHtml::$formatOptions}.	 *                               Selection options, see {@see JHtmlSelect::options()}.	 *                               list.attr, string|array: Additional attributes for the select	 *                               element.	 *                               id, string: Value to use as the select element id attribute.	 *                               Defaults to the same as the name.	 *                               list.select, string|array: Identifies one or more option elements	 *                               to be selected, based on the option key values.	 * @param   string   $optKey     The name of the object variable for the option value. If	 *                               set to null, the index of the value array is used.	 * @param   string   $optText    The name of the object variable for the option text.	 * @param   mixed    $selected   The key that is selected (accepts an array or a string).	 * @param   mixed    $idtag      Value of the field id or null by default	 * @param   boolean  $translate  True to translate	 *	 * @return  string  HTML for the select list.	 *	 * @since   11.1	 */	public static function genericlist($data, $name, $attribs = null, $optKey = 'value', $optText = 'text', $selected = null, $idtag = false,		$translate = false)	{		// Set default options		$options = array_merge(JHtml::$formatOptions, array('format.depth' => 0, 'id' => false));		if (is_array($attribs) && func_num_args() == 3)		{			// Assume we have an options array			$options = array_merge($options, $attribs);		}		else		{			// Get options from the parameters			$options['id'] = $idtag;			$options['list.attr'] = $attribs;			$options['list.translate'] = $translate;			$options['option.key'] = $optKey;			$options['option.text'] = $optText;			$options['list.select'] = $selected;		}		$attribs = '';		if (isset($options['list.attr']))		{			if (is_array($options['list.attr']))			{				$attribs = JArrayHelper::toString($options['list.attr']);			}			else			{				$attribs = $options['list.attr'];			}			if ($attribs != '')			{				$attribs = ' ' . $attribs;			}		}		$id = $options['id'] !== false ? $options['id'] : $name;		$id = str_replace(array('[', ']'), '', $id);		$baseIndent = str_repeat($options['format.indent'], $options['format.depth']++);		$html = $baseIndent . '<select' . ($id !== '' ? ' id="' . $id . '"' : '') . ' name="' . $name . '"' . $attribs . '>' . $options['format.eol']			. self::options($data, $options) . $baseIndent . '</select>' . $options['format.eol'];		return $html;	}	/**	 * Generates a grouped HTML selection list from nested arrays.	 *	 * @param   array   $data     An array of groups, each of which is an array of options.	 * @param   string  $name     The value of the HTML name attribute	 * @param   array   $options  Options, an array of key/value pairs. Valid options are:	 *                            Format options, {@see JHtml::$formatOptions}.	 *                            Selection options. See {@see JHtmlSelect::options()}.	 *                            group.id: The property in each group to use as the group id	 *                            attribute. Defaults to none.	 *                            group.label: The property in each group to use as the group	 *                            label. Defaults to "text". If set to null, the data array index key is	 *                            used.	 *                            group.items: The property in each group to use as the array of	 *                            items in the group. Defaults to "items". If set to null, group.id and	 *                            group. label are forced to null and the data element is assumed to be a	 *                            list of selections.	 *                            id: Value to use as the select element id attribute. Defaults to	 *                            the same as the name.	 *                            list.attr: Attributes for the select element. Can be a string or	 *                            an array of key/value pairs. Defaults to none.	 *                            list.select: either the value of one selected option or an array	 *                            of selected options. Default: none.	 *                            list.translate: Boolean. If set, text and labels are translated via	 *                            JText::_().	 *	 * @return  string  HTML for the select list	 *	 * @since   11.1	 *	 * @throws  RuntimeException If a group has contents that cannot be processed.	 */	public static function groupedlist($data, $name, $options = array())	{		// Set default options and overwrite with anything passed in		$options = array_merge(			JHtml::$formatOptions,			array('format.depth' => 0, 'group.items' => 'items', 'group.label' => 'text', 'group.label.toHtml' => true, 'id' => false),			$options		);		// Apply option rules		if ($options['group.items'] === null)		{			$options['group.label'] = null;		}		$attribs = '';		if (isset($options['list.attr']))		{			if (is_array($options['list.attr']))			{				$attribs = JArrayHelper::toString($options['list.attr']);			}			else			{				$attribs = $options['list.attr'];			}			if ($attribs != '')			{				$attribs = ' ' . $attribs;			}		}		$id = $options['id'] !== false ? $options['id'] : $name;		$id = str_replace(array('[', ']'), '', $id);		// Disable groups in the options.		$options['groups'] = false;		$baseIndent = str_repeat($options['format.indent'], $options['format.depth']++);		$html = $baseIndent . '<select' . ($id !== '' ? ' id="' . $id . '"' : '') . ' name="' . $name . '"' . $attribs . '>' . $options['format.eol'];		$groupIndent = str_repeat($options['format.indent'], $options['format.depth']++);		foreach ($data as $dataKey => $group)		{			$label = $dataKey;			$id = '';			$noGroup = is_int($dataKey);			if ($options['group.items'] == null)			{				// Sub-list is an associative array				$subList = $group;			}			elseif (is_array($group))			{				// Sub-list is in an element of an array.				$subList = $group[$options['group.items']];				if (isset($group[$options['group.label']]))				{					$label = $group[$options['group.label']];					$noGroup = false;				}				if (isset($options['group.id']) && isset($group[$options['group.id']]))				{					$id = $group[$options['group.id']];					$noGroup = false;				}			}			elseif (is_object($group))			{				// Sub-list is in a property of an object				$subList = $group->$options['group.items'];				if (isset($group->$options['group.label']))				{					$label = $group->$options['group.label'];					$noGroup = false;				}				if (isset($options['group.id']) && isset($group->$options['group.id']))				{					$id = $group->$options['group.id'];					$noGroup = false;				}			}			else			{				throw new RuntimeException('Invalid group contents.', 1);			}			if ($noGroup)			{				$html .= self::options($subList, $options);			}			else			{				$html .= $groupIndent . '<optgroup' . (empty($id) ? '' : ' id="' . $id . '"') . ' label="'					. ($options['group.label.toHtml'] ? htmlspecialchars($label, ENT_COMPAT, 'UTF-8') : $label) . '">' . $options['format.eol']					. self::options($subList, $options) . $groupIndent . '</optgroup>' . $options['format.eol'];			}		}		$html .= $baseIndent . '</select>' . $options['format.eol'];		return $html;	}	/**	 * Generates a selection list of integers.	 *	 * @param   integer  $start     The start integer	 * @param   integer  $end       The end integer	 * @param   integer  $inc       The increment	 * @param   string   $name      The value of the HTML name attribute	 * @param   mixed    $attribs   Additional HTML attributes for the <select> tag, an array of	 *                              attributes, or an array of options. Treated as options if it is the last	 *                              argument passed.	 * @param   mixed    $selected  The key that is selected	 * @param   string   $format    The printf format to be applied to the number	 *	 * @return  string   HTML for the select list	 *	 * @since    11.1	 */	public static function integerlist($start, $end, $inc, $name, $attribs = null, $selected = null, $format = '')	{		// Set default options		$options = array_merge(JHtml::$formatOptions, array('format.depth' => 0, 'option.format' => '', 'id' => null));		if (is_array($attribs) && func_num_args() == 5)		{			// Assume we have an options array			$options = array_merge($options, $attribs);			// Extract the format and remove it from downstream options			$format = $options['option.format'];			unset($options['option.format']);		}		else		{			// Get options from the parameters			$options['list.attr'] = $attribs;			$options['list.select'] = $selected;		}		$start = (int) $start;		$end   = (int) $end;		$inc   = (int) $inc;		$data = array();		for ($i = $start; $i <= $end; $i += $inc)		{			$data[$i] = $format ? sprintf($format, $i) : $i;		}		// Tell genericlist() to use array keys		$options['option.key'] = null;		return JHtml::_('select.genericlist', $data, $name, $options);	}	/**	 * Create a placeholder for an option group.	 *	 * @param   string  $text     The text for the option	 * @param   string  $optKey   The returned object property name for the value	 * @param   string  $optText  The returned object property name for the text	 *	 * @return  object	 *	 * @deprecated  12.1  Use JHtmlSelect::groupedList()	 * @see     JHtmlSelect::groupedList()	 * @since   11.1	 */	public static function optgroup($text, $optKey = 'value', $optText = 'text')	{		JLog::add('JHtmlSelect::optgroup is deprecated.', JLog::WARNING, 'deprecated');		// Set initial state		static $state = 'open';		// Toggle between open and close states:		switch ($state)		{			case 'open':				$obj = new stdClass;				$obj->$optKey = '<OPTGROUP>';				$obj->$optText = $text;				$state = 'close';				break;			case 'close':				$obj = new stdClass;				$obj->$optKey = '</OPTGROUP>';				$obj->$optText = $text;				$state = 'open';				break;		}		return $obj;	}	/**	 * Create an object that represents an option in an option list.	 *	 * @param   string   $value    The value of the option	 * @param   string   $text     The text for the option	 * @param   mixed    $optKey   If a string, the returned object property name for	 *                             the value. If an array, options. Valid options are:	 *                             attr: String|array. Additional attributes for this option.	 *                             Defaults to none.	 *                             disable: Boolean. If set, this option is disabled.	 *                             label: String. The value for the option label.	 *                             option.attr: The property in each option array to use for	 *                             additional selection attributes. Defaults to none.	 *                             option.disable: The property that will hold the disabled state.	 *                             Defaults to "disable".	 *                             option.key: The property that will hold the selection value.	 *                             Defaults to "value".	 *                             option.label: The property in each option array to use as the	 *                             selection label attribute. If a "label" option is provided, defaults to	 *                             "label", if no label is given, defaults to null (none).	 *                             option.text: The property that will hold the the displayed text.	 *                             Defaults to "text". If set to null, the option array is assumed to be a	 *                             list of displayable scalars.	 * @param   string   $optText  The property that will hold the the displayed text. This	 *                             parameter is ignored if an options array is passed.	 * @param   boolean  $disable  Not used.	 *	 * @return  object	 *	 * @since   11.1	 */	public static function option($value, $text = '', $optKey = 'value', $optText = 'text', $disable = false)	{		$options = array('attr' => null, 'disable' => false, 'option.attr' => null, 'option.disable' => 'disable', 'option.key' => 'value',			'option.label' => null, 'option.text' => 'text');		if (is_array($optKey))		{			// Merge in caller's options			$options = array_merge($options, $optKey);		}		else		{			// Get options from the parameters			$options['option.key'] = $optKey;			$options['option.text'] = $optText;			$options['disable'] = $disable;		}		$obj = new stdClass;		$obj->$options['option.key'] = $value;		$obj->$options['option.text'] = trim($text) ? $text : $value;		/*		 * If a label is provided, save it. If no label is provided and there is		 * a label name, initialise to an empty string.		 */		$hasProperty = $options['option.label'] !== null;		if (isset($options['label']))		{			$labelProperty = $hasProperty ? $options['option.label'] : 'label';			$obj->$labelProperty = $options['label'];		}		elseif ($hasProperty)		{			$obj->$options['option.label'] = '';		}		// Set attributes only if there is a property and a value		if ($options['attr'] !== null)		{			$obj->$options['option.attr'] = $options['attr'];		}		// Set disable only if it has a property and a value		if ($options['disable'] !== null)		{			$obj->$options['option.disable'] = $options['disable'];		}		return $obj;	}	/**	 * Generates the option tags for an HTML select list (with no select tag	 * surrounding the options).	 *	 * @param   array    $arr        An array of objects, arrays, or values.	 * @param   mixed    $optKey     If a string, this is the name of the object variable for	 *                               the option value. If null, the index of the array of objects is used. If	 *                               an array, this is a set of options, as key/value pairs. Valid options are:	 *                               -Format options, {@see JHtml::$formatOptions}.	 *                               -groups: Boolean. If set, looks for keys with the value	 *                                "&lt;optgroup>" and synthesizes groups from them. Deprecated. Defaults	 *                                true for backwards compatibility.	 *                               -list.select: either the value of one selected option or an array	 *                                of selected options. Default: none.	 *                               -list.translate: Boolean. If set, text and labels are translated via	 *                                JText::_(). Default is false.	 *                               -option.id: The property in each option array to use as the	 *                                selection id attribute. Defaults to none.	 *                               -option.key: The property in each option array to use as the	 *                                selection value. Defaults to "value". If set to null, the index of the	 *                                option array is used.	 *                               -option.label: The property in each option array to use as the	 *                                selection label attribute. Defaults to null (none).	 *                               -option.text: The property in each option array to use as the	 *                               displayed text. Defaults to "text". If set to null, the option array is	 *                               assumed to be a list of displayable scalars.	 *                               -option.attr: The property in each option array to use for	 *                                additional selection attributes. Defaults to none.	 *                               -option.disable: The property that will hold the disabled state.	 *                                Defaults to "disable".	 *                               -option.key: The property that will hold the selection value.	 *                                Defaults to "value".	 *                               -option.text: The property that will hold the the displayed text.	 *                               Defaults to "text". If set to null, the option array is assumed to be a	 *                               list of displayable scalars.	 * @param   string   $optText    The name of the object variable for the option text.	 * @param   mixed    $selected   The key that is selected (accepts an array or a string)	 * @param   boolean  $translate  Translate the option values.	 *	 * @return  string  HTML for the select list	 *	 * @since   11.1	 */	public static function options($arr, $optKey = 'value', $optText = 'text', $selected = null, $translate = false)	{		$options = array_merge(			JHtml::$formatOptions,			self::$optionDefaults['option'],			array('format.depth' => 0, 'groups' => true, 'list.select' => null, 'list.translate' => false)		);		if (is_array($optKey))		{			// Set default options and overwrite with anything passed in			$options = array_merge($options, $optKey);		}		else		{			// Get options from the parameters			$options['option.key'] = $optKey;			$options['option.text'] = $optText;			$options['list.select'] = $selected;			$options['list.translate'] = $translate;		}		$html = '';		$baseIndent = str_repeat($options['format.indent'], $options['format.depth']);		foreach ($arr as $elementKey => &$element)		{			$attr = '';			$extra = '';			$label = '';			$id = '';			if (is_array($element))			{				$key = $options['option.key'] === null ? $elementKey : $element[$options['option.key']];				$text = $element[$options['option.text']];				if (isset($element[$options['option.attr']]))				{					$attr = $element[$options['option.attr']];				}				if (isset($element[$options['option.id']]))				{					$id = $element[$options['option.id']];				}				if (isset($element[$options['option.label']]))				{					$label = $element[$options['option.label']];				}				if (isset($element[$options['option.disable']]) && $element[$options['option.disable']])				{					$extra .= ' disabled="disabled"';				}			}			elseif (is_object($element))			{				$key = $options['option.key'] === null ? $elementKey : $element->$options['option.key'];				$text = $element->$options['option.text'];				if (isset($element->$options['option.attr']))				{					$attr = $element->$options['option.attr'];				}				if (isset($element->$options['option.id']))				{					$id = $element->$options['option.id'];				}				if (isset($element->$options['option.label']))				{					$label = $element->$options['option.label'];				}				if (isset($element->$options['option.disable']) && $element->$options['option.disable'])				{					$extra .= ' disabled="disabled"';				}			}			else			{				// This is a simple associative array				$key = $elementKey;				$text = $element;			}			/*			 * The use of options that contain optgroup HTML elements was			 * somewhat hacked for J1.5. J1.6 introduces the grouplist() method			 * to handle this better. The old solution is retained through the			 * "groups" option, which defaults true in J1.6, but should be			 * deprecated at some point in the future.			 */			$key = (string) $key;			if ($options['groups'] && $key == '<OPTGROUP>')			{				$html .= $baseIndent . '<optgroup label="' . ($options['list.translate'] ? JText::_($text) : $text) . '">' . $options['format.eol'];				$baseIndent = str_repeat($options['format.indent'], ++$options['format.depth']);			}			elseif ($options['groups'] && $key == '</OPTGROUP>')			{				$baseIndent = str_repeat($options['format.indent'], --$options['format.depth']);				$html .= $baseIndent . '</optgroup>' . $options['format.eol'];			}			else			{				// If no string after hyphen - take hyphen out				$splitText = explode(' - ', $text, 2);				$text = $splitText[0];				if (isset($splitText[1]))				{					$text .= ' - ' . $splitText[1];				}				if ($options['list.translate'] && !empty($label))				{					$label = JText::_($label);				}				if ($options['option.label.toHtml'])				{					$label = htmlentities($label);				}				if (is_array($attr))				{					$attr = JArrayHelper::toString($attr);				}				else				{					$attr = trim($attr);				}				$extra = ($id ? ' id="' . $id . '"' : '') . ($label ? ' label="' . $label . '"' : '') . ($attr ? ' ' . $attr : '') . $extra;				if (is_array($options['list.select']))				{					foreach ($options['list.select'] as $val)					{						$key2 = is_object($val) ? $val->$options['option.key'] : $val;						if ($key == $key2)						{							$extra .= ' selected="selected"';							break;						}					}				}				elseif ((string) $key == (string) $options['list.select'])				{					$extra .= ' selected="selected"';				}				if ($options['list.translate'])				{					$text = JText::_($text);				}				// Generate the option, encoding as required				$html .= $baseIndent . '<option value="' . ($options['option.key.toHtml'] ? htmlspecialchars($key, ENT_COMPAT, 'UTF-8') : $key) . '"'					. $extra . '>';				$html .= $options['option.text.toHtml'] ? htmlentities(html_entity_decode($text, ENT_COMPAT, 'UTF-8'), ENT_COMPAT, 'UTF-8') : $text;				$html .= '</option>' . $options['format.eol'];			}		}		return $html;	}	/**	 * Generates an HTML radio list.	 *	 * @param   array    $data       An array of objects	 * @param   string   $name       The value of the HTML name attribute	 * @param   string   $attribs    Additional HTML attributes for the <select> tag	 * @param   mixed    $optKey     The key that is selected	 * @param   string   $optText    The name of the object variable for the option value	 * @param   string   $selected   The name of the object variable for the option text	 * @param   boolean  $idtag      Value of the field id or null by default	 * @param   boolean  $translate  True if options will be translated	 *	 * @return  string HTML for the select list	 *	 * @since  11.1	 */	public static function radiolist($data, $name, $attribs = null, $optKey = 'value', $optText = 'text', $selected = null, $idtag = false,		$translate = false)	{		reset($data);		if (is_array($attribs))		{			$attribs = JArrayHelper::toString($attribs);		}		$id_text = $idtag ? $idtag : $name;		$html = '<div class="controls">';		foreach ($data as $obj)		{			$k = $obj->$optKey;			$t = $translate ? JText::_($obj->$optText) : $obj->$optText;			$id = (isset($obj->id) ? $obj->id : null);			$extra = '';			$extra .= $id ? ' id="' . $obj->id . '"' : '';			if (is_array($selected))			{				foreach ($selected as $val)				{					$k2 = is_object($val) ? $val->$optKey : $val;					if ($k == $k2)					{						$extra .= ' selected="selected"';						break;					}				}			}			else			{				$extra .= ((string) $k == (string) $selected ? ' checked="checked"' : '');			}			$html .= "\n\t" . '<label for="' . $id_text . $k . '" id="' . $id_text . $k . '-lbl" class="radio">';			$html .= "\n\t" . "\n\t" . '<input type="radio" name="' . $name . '" id="' . $id_text . $k . '" value="' . $k . '" ' . $extra . ' '				. $attribs . '>' . $t;			$html .= "\n\t" . '</label>';		}		$html .= '</div>';		$html .= "\n";		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Private Message model. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesModelMessage extends JModelAdmin{	/**	 * message	 */	protected $item;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		parent::populateState();		$input = JFactory::getApplication()->input;		$user = JFactory::getUser();		$this->setState('user.id', $user->get('id'));		$messageId = (int) $input->getInt('message_id');		$this->setState('message.id', $messageId);		$replyId = (int) $input->getInt('reply_id');		$this->setState('reply.id', $replyId);	}	/**	 * Check that recipient user is the one trying to delete and then call parent delete method	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since  3.1	 */	public function delete(&$pks)	{		$pks = (array) $pks;		$table = $this->getTable();		$user = JFactory::getUser();		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if ($table->user_id_to !== $user->id)				{					// Prune items that you can't change.					unset($pks[$i]);					JLog::add(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'), JLog::WARNING, 'jerror');					return false;				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return parent::delete($pks);	}	/**	 * Returns a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	 * @since   1.6	*/	public function getTable($type = 'Message', $prefix = 'MessagesTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		if (!isset($this->item))		{			if ($this->item = parent::getItem($pk))			{				// Prime required properties.				if (empty($this->item->message_id))				{					// Prepare data for a new record.					if ($replyId = $this->getState('reply.id'))					{						// If replying to a message, preload some data.						$db		= $this->getDbo();						$query	= $db->getQuery(true)							->select('subject, user_id_from')							->from('#__messages')							->where('message_id = '.(int) $replyId);						try						{							$message = $db->setQuery($query)->loadObject();						}						catch (RuntimeException $e)						{							$this->setError($e->getMessage());							return false;						}						$this->item->set('user_id_to', $message->user_id_from);						$re = JText::_('COM_MESSAGES_RE');						if (stripos($message->subject, $re) !== 0)						{							$this->item->set('subject', $re.$message->subject);						}					}				}				elseif ($this->item->user_id_to != JFactory::getUser()->id)				{					$this->setError(JText::_('JERROR_ALERTNOAUTHOR'));					return false;				}				else {					// Mark message read					$db		= $this->getDbo();					$query	= $db->getQuery(true)						->update('#__messages')						->set('state = 1')						->where('message_id = '.$this->item->message_id);					$db->setQuery($query)->execute();				}			}			// Get the user name for an existing messasge.			if ($this->item->user_id_from && $fromUser = new JUser($this->item->user_id_from))			{				$this->item->set('from_user_name', $fromUser->name);			}		}		return $this->item;	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_messages.message', 'message', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_messages.edit.message.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_messages.message', $data);		return $data;	}	/**	 * Checks that the current user matches the message recipient and calls the parent publish method	 *	 * @param   array    &$pks   A list of the primary keys to change.	 * @param   integer  $value  The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function publish(&$pks, $value = 1)	{		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Check that the recipient matches the current user		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk))			{				if ($table->user_id_to !== $user->id)				{					// Prune items that you can't change.					unset($pks[$i]);					JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');					return false;				}			}		}		return parent::publish($pks, $value);	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 */	public function save($data)	{		$table = $this->getTable();		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Assign empty values.		if (empty($table->user_id_from))		{			$table->user_id_from = JFactory::getUser()->get('id');		}		if ((int) $table->date_time == 0)		{			$table->date_time = JFactory::getDate()->toSql();		}		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Load the recipient user configuration.		$model = JModelLegacy::getInstance('Config', 'MessagesModel', array('ignore_request' => true));		$model->setState('user.id', $table->user_id_to);		$config = $model->getItem();		if (empty($config))		{			$this->setError($model->getError());			return false;		}		if ($config->get('locked', false))		{			$this->setError(JText::_('COM_MESSAGES_ERR_SEND_FAILED'));			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		if ($config->get('mail_on_new', true))		{			// Load the user details (already valid from table check).			$fromUser = JUser::getInstance($table->user_id_from);			$toUser = JUser::getInstance($table->user_id_to);			$debug = JFactory::getConfig()->get('debug_lang');			$default_language = JComponentHelper::getParams('com_languages')->get('administrator');			$lang = JLanguage::getInstance($toUser->getParam('admin_language', $default_language), $debug);			$lang->load('com_messages', JPATH_ADMINISTRATOR);			$siteURL  = JURI::root() . 'administrator/index.php?option=com_messages&view=message&message_id='.$table->message_id;			$sitename = JFactory::getApplication()->getCfg('sitename');			$subject = sprintf($lang->_('COM_MESSAGES_NEW_MESSAGE_ARRIVED'), $sitename);			$msg     = sprintf($lang->_('COM_MESSAGES_PLEASE_LOGIN'), $siteURL);			JFactory::getMailer()->sendMail($fromUser->email, $fromUser->name, $toUser->email, $subject, $msg);		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// no direct accessdefined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.calendar');JHtml::_('behavior.formvalidation');// Create shortcut to parameters.$params = $this->state->get('params');//$images = json_decode($this->item->images);//$urls = json_decode($this->item->urls);// This checks if the editor config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params->show_publishing_options);if (!$editoroptions):	$params->show_urls_images_frontend = '0';endif;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit item-page<?php echo $this->pageclass_sfx; ?>"><?php if ($params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($params->get('page_heading')); ?></h1><?php endif; ?><form action="<?php echo JRoute::_('index.php?option=com_content&a_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate">	<fieldset>		<legend><?php echo JText::_('JEDITOR'); ?></legend>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('title'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('title'); ?>				</div>			</div>		<?php if (is_null($this->item->id)):?>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('alias'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('alias'); ?>				</div>			</div>		<?php endif; ?>			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('article.save')">					<?php echo JText::_('JSAVE') ?>				</button>				<button type="button" class="btn" onclick="Joomla.submitbutton('article.cancel')">					<?php echo JText::_('JCANCEL') ?>				</button>			</div>			<?php echo $this->form->getInput('articletext'); ?>	</fieldset>	<?php if ($params->get('show_urls_images_frontend')  ) : ?>	<fieldset>		<legend><?php echo JText::_('COM_CONTENT_IMAGES_AND_URLS'); ?></legend>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_intro', 'images'); ?>					<?php echo $this->form->getInput('image_intro', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_intro_alt', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('image_intro_alt', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_intro_caption', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('image_intro_caption', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('float_intro', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('float_intro', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_fulltext', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('image_fulltext', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_fulltext_alt', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('image_fulltext_alt', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('image_fulltext_caption', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('image_fulltext_caption', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('float_fulltext', 'images'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('float_fulltext', 'images'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urla', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urla', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urlatext', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urlatext', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="controls">					<?php echo $this->form->getInput('targeta', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urlb', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urlb', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urlbtext', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urlbtext', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="controls">					<?php echo $this->form->getInput('targetb', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urlc', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urlc', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('urlctext', 'urls'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('urlctext', 'urls'); ?>				</div>			</div>			<div class="control-group">				<div class="controls">					<?php echo $this->form->getInput('targetc', 'urls'); ?>				</div>			</div>	</fieldset>	<?php endif; ?>	<fieldset>		<legend><?php echo JText::_('COM_CONTENT_PUBLISHING'); ?></legend>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('catid'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('catid'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('created_by_alias'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('created_by_alias'); ?>				</div>			</div>			<?php if ($this->item->params->get('access-change')) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('state'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('state'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('featured'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('featured'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('publish_up'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('publish_up'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('publish_down'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('publish_down'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('access'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('access'); ?>				</div>			</div>			<?php if (is_null($this->item->id)):?>				<div class="control-group">					<div class="control-label">					</div>					<div class="controls">						<?php echo JText::_('COM_CONTENT_ORDERING'); ?>					</div>				</div>			<?php endif; ?>	</fieldset>	<fieldset>		<legend><?php echo JText::_('JFIELD_LANGUAGE_LABEL'); ?></legend>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('language'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('language'); ?>				</div>			</div>	</fieldset>	<fieldset>		<legend><?php echo JText::_('COM_CONTENT_METADATA'); ?></legend>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('metadesc'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('metadesc'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('metakey'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('metakey'); ?>				</div>			</div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="return" value="<?php echo $this->return_page;?>" />		<?php if ($this->params->get('enable_category', 0) == 1) : ?>			<input type="hidden" name="jform[catid]" value="<?php echo $this->params->get('catid', 1);?>"/>		<?php endif;?>		<?php echo JHtml::_('form.token'); ?>	</fieldset></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */abstract class MediaHelper{	/**	 * Checks if the file is an image	 * @param string The filename	 * @return  boolean	 */	public static function isImage($fileName)	{		static $imageTypes = 'xcf|odg|gif|jpg|png|bmp';		return preg_match("/\.(?:$imageTypes)$/i", $fileName);	}	/**	 * Checks if the file is an image	 * @param string The filename	 * @return  boolean	 */	public static function getTypeIcon($fileName)	{		// Get file extension		return strtolower(substr($fileName, strrpos($fileName, '.') + 1));	}	/**	 * Checks if the file can be uploaded	 *	 * @param array File information	 * @param string An error message to be returned	 * @return  boolean	 */	public static function canUpload($file, &$err)	{		$params = JComponentHelper::getParams('com_media');		if (empty($file['name']))		{			$err = 'COM_MEDIA_ERROR_UPLOAD_INPUT';			return false;		}		jimport('joomla.filesystem.file');		if ($file['name'] !== JFile::makesafe($file['name']))		{			$err = 'COM_MEDIA_ERROR_WARNFILENAME';			return false;		}		$format = strtolower(JFile::getExt($file['name']));		$allowable = explode(',', $params->get('upload_extensions'));		$ignored = explode(',', $params->get('ignore_extensions'));		if (!in_array($format, $allowable) && !in_array($format, $ignored))		{			$err = 'COM_MEDIA_ERROR_WARNFILETYPE';			return false;		}		$maxSize = (int) ($params->get('upload_maxsize', 0) * 1024 * 1024);		if ($maxSize > 0 && (int) $file['size'] > $maxSize)		{			$err = 'COM_MEDIA_ERROR_WARNFILETOOLARGE';			return false;		}		$user = JFactory::getUser();		$imginfo = null;		if ($params->get('restrict_uploads', 1))		{			$images = explode(',', $params->get('image_extensions'));			if (in_array($format, $images)) { // if its an image run it through getimagesize				// if tmp_name is empty, then the file was bigger than the PHP limit				if (!empty($file['tmp_name']))				{					if (($imginfo = getimagesize($file['tmp_name'])) === false)					{						$err = 'COM_MEDIA_ERROR_WARNINVALID_IMG';						return false;					}				} else {					$err = 'COM_MEDIA_ERROR_WARNFILETOOLARGE';					return false;				}			} elseif (!in_array($format, $ignored))			{				// if its not an image...and we're not ignoring it				$allowed_mime = explode(',', $params->get('upload_mime'));				$illegal_mime = explode(',', $params->get('upload_mime_illegal'));				if (function_exists('finfo_open') && $params->get('check_mime', 1))				{					// We have fileinfo					$finfo = finfo_open(FILEINFO_MIME);					$type = finfo_file($finfo, $file['tmp_name']);					if (strlen($type) && !in_array($type, $allowed_mime) && in_array($type, $illegal_mime))					{						$err = 'COM_MEDIA_ERROR_WARNINVALID_MIME';						return false;					}					finfo_close($finfo);				} elseif (function_exists('mime_content_type') && $params->get('check_mime', 1))				{					// we have mime magic					$type = mime_content_type($file['tmp_name']);					if (strlen($type) && !in_array($type, $allowed_mime) && in_array($type, $illegal_mime))					{						$err = 'COM_MEDIA_ERROR_WARNINVALID_MIME';						return false;					}				} elseif (!$user->authorise('core.manage'))				{					$err = 'COM_MEDIA_ERROR_WARNNOTADMIN';					return false;				}			}		}		$xss_check = file_get_contents($file['tmp_name'], false, null, -1, 256);		$html_tags = array('abbr', 'acronym', 'address', 'applet', 'area', 'audioscope', 'base', 'basefont', 'bdo', 'bgsound', 'big', 'blackface', 'blink', 'blockquote', 'body', 'bq', 'br', 'button', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'comment', 'custom', 'dd', 'del', 'dfn', 'dir', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'fn', 'font', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'html', 'iframe', 'ilayer', 'img', 'input', 'ins', 'isindex', 'keygen', 'kbd', 'label', 'layer', 'legend', 'li', 'limittext', 'link', 'listing', 'map', 'marquee', 'menu', 'meta', 'multicol', 'nobr', 'noembed', 'noframes', 'noscript', 'nosmartquotes', 'object', 'ol', 'optgroup', 'option', 'param', 'plaintext', 'pre', 'rt', 'ruby', 's', 'samp', 'script', 'select', 'server', 'shadow', 'sidebar', 'small', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'tt', 'ul', 'var', 'wbr', 'xml', 'xmp', '!DOCTYPE', '!--');		foreach ($html_tags as $tag)		{			// A tag is '<tagname ', so we need to add < and a space or '<tagname>'			if (stristr($xss_check, '<'.$tag.' ') || stristr($xss_check, '<'.$tag.'>'))			{				$err = 'COM_MEDIA_ERROR_WARNIEXSS';				return false;			}		}		return true;	}	/**	 * Method to parse a file size	 *	 * @param   integer  $size  The file size in bytes	 *	 * @return  string  The converted file size	 *	 * @since   1.6	 * @deprecated  4.0  Use JHtmlNumber::bytes() instead	 */	public static function parseSize($size)	{		JLog::add('MediaHelper::parseSize() is deprecated. Use JHtmlNumber::bytes() instead.', JLog::WARNING, 'deprecated');		return JHtml::_('number.bytes', $size);	}	public static function imageResize($width, $height, $target)	{		//takes the larger size of the width and height and applies the		//formula accordingly...this is so this script will work		//dynamically with any size image		if ($width > $height)		{			$percentage = ($target / $width);		}		else		{			$percentage = ($target / $height);		}		//gets the new value and applies the percentage, then rounds the value		$width = round($width * $percentage);		$height = round($height * $percentage);		return array($width, $height);	}	public static function countFiles($dir)	{		$total_file = 0;		$total_dir = 0;		if (is_dir($dir))		{			$d = dir($dir);			while (false !== ($entry = $d->read()))			{				if (substr($entry, 0, 1) != '.' && is_file($dir . DIRECTORY_SEPARATOR . $entry) && strpos($entry, '.html') === false && strpos($entry, '.php') === false)				{					$total_file++;				}				if (substr($entry, 0, 1) != '.' && is_dir($dir . DIRECTORY_SEPARATOR . $entry))				{					$total_dir++;				}			}			$d->close();		}		return array ($total_file, $total_dir);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Database connector class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 * @deprecated  13.1 */abstract class JDatabase{	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function query()	{		JLog::add('JDatabase::query() is deprecated, use JDatabaseDriver::execute() instead.', JLog::WARNING, 'deprecated');		return $this->execute();	}	/**	 * Get a list of available database connectors.  The list will only be populated with connectors that both	 * the class exists and the static test method returns true.  This gives us the ability to have a multitude	 * of connector classes that are self-aware as to whether or not they are able to be used on a given system.	 *	 * @return  array  An array of available database connectors.	 *	 * @since   11.1	 * @deprecated  13.1	 */	public static function getConnectors()	{		JLog::add('JDatabase::getConnectors() is deprecated, use JDatabaseDriver::getConnectors() instead.', JLog::WARNING, 'deprecated');		return JDatabaseDriver::getConnectors();	}	/**	 * Gets the error message from the database connection.	 *	 * @param   boolean  $escaped  True to escape the message string for use in JavaScript.	 *	 * @return  string  The error message for the most recent query.	 *	 * @deprecated  12.1	 * @since   11.1	 */	public function getErrorMsg($escaped = false)	{		JLog::add('JDatabase::getErrorMsg() is deprecated, use exception handling instead.', JLog::WARNING, 'deprecated');		if ($escaped)		{			return addslashes($this->errorMsg);		}		else		{			return $this->errorMsg;		}	}	/**	 * Gets the error number from the database connection.	 *	 * @return      integer  The error number for the most recent query.	 *	 * @since       11.1	 * @deprecated  12.1	 */	public function getErrorNum()	{		JLog::add('JDatabase::getErrorNum() is deprecated, use exception handling instead.', JLog::WARNING, 'deprecated');		return $this->errorNum;	}	/**	 * Method to return a JDatabaseDriver instance based on the given options.  There are three global options and then	 * the rest are specific to the database driver.  The 'driver' option defines which JDatabaseDriver class is	 * used for the connection -- the default is 'mysqli'.  The 'database' option determines which database is to	 * be used for the connection.  The 'select' option determines whether the connector should automatically select	 * the chosen database.	 *	 * Instances are unique to the given options and new objects are only created when a unique options array is	 * passed into the method.  This ensures that we don't end up with unnecessary database connection resources.	 *	 * @param   array  $options  Parameters to be passed to the database driver.	 *	 * @return  JDatabaseDriver  A database object.	 *	 * @since       11.1	 * @deprecated  13.1	 */	public static function getInstance($options = array())	{		JLog::add('JDatabase::getInstance() is deprecated, use JDatabaseDriver::getInstance() instead.', JLog::WARNING, 'deprecated');		return JDatabaseDriver::getInstance($options);	}	/**	 * Splits a string of multiple queries into an array of individual queries.	 *	 * @param   string  $query  Input SQL string with which to split into individual queries.	 *	 * @return  array  The queries from the input string separated into an array.	 *	 * @since   11.1	 * @deprecated  13.1	 */	public static function splitSql($query)	{		JLog::add('JDatabase::splitSql() is deprecated, use JDatabaseDriver::splitSql() instead.', JLog::WARNING, 'deprecated');		return JDatabaseDriver::splitSql($query);	}	/**	 * Return the most recent error message for the database connector.	 *	 * @param   boolean  $showSQL  True to display the SQL statement sent to the database as well as the error.	 *	 * @return  string  The error message for the most recent query.	 *	 * @since   11.1	 * @deprecated  12.1	 */	public function stderr($showSQL = false)	{		JLog::add('JDatabase::stderr() is deprecated.', JLog::WARNING, 'deprecated');		if ($this->errorNum != 0)		{			return JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $this->errorNum, $this->errorMsg)			. ($showSQL ? "<br />SQL = <pre>$this->sql</pre>" : '');		}		else		{			return JText::_('JLIB_DATABASE_FUNCTION_NOERROR');		}	}	/**	 * Test to see if the connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 * @deprecated  12.3 Use JDatabaseDriver::isSupported() instead.	 */	public static function test()	{		JLog::add('JDatabase::test() is deprecated. Use JDatabaseDriver::isSupported() instead.', JLog::WARNING, 'deprecated');		return static::isSupported();	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Plugin class for redirect handling. * * @package     Joomla.Plugin * @subpackage  System.redirect * @since       1.6 */class PlgSystemRedirect extends JPlugin{	/**	 * Object Constructor.	 *	 * @access    public	 * @param   object    The object to observe -- event dispatcher.	 * @param   object    The configuration object for the plugin.	 * @return  void	 * @since   1.6	 */	public function __construct(&$subject, $config)	{		parent::__construct($subject, $config);		// Set the error handler for E_ERROR to be the class handleError method.		JError::setErrorHandling(E_ERROR, 'callback', array('PlgSystemRedirect', 'handleError'));	}	public static function handleError(&$error)	{		// Get the application object.		$app = JFactory::getApplication();		// Make sure the error is a 404 and we are not in the administrator.		if (!$app->isAdmin() and ($error->getCode() == 404))		{			// Get the full current URI.			$uri = JURI::getInstance();			$current = $uri->toString(array('scheme', 'host', 'port', 'path', 'query', 'fragment'));			// Attempt to ignore idiots.			if ((strpos($current, 'mosConfig_') !== false) || (strpos($current, '=http://') !== false))			{				// Render the error page.				JError::customErrorPage($error);			}			// See if the current url exists in the database as a redirect.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select($db->quoteName('new_url'))				->select($db->quoteName('published'))				->from($db->quoteName('#__redirect_links'))				->where($db->quoteName('old_url') . ' = ' . $db->quote($current));			$db->setQuery($query, 0, 1);			$link = $db->loadObject();			// If a redirect exists and is published, permanently redirect.			if ($link and ($link->published == 1))			{				$app->redirect($link->new_url, null, null, true, false);			}			else			{				$referer = empty($_SERVER['HTTP_REFERER']) ? '' : $_SERVER['HTTP_REFERER'];				$db->setQuery('SELECT id FROM ' . $db->quoteName('#__redirect_links') . '  WHERE old_url= ' . $db->quote($current));				$res = $db->loadResult();				if (!$res)				{					// If not, add the new url to the database.					$columns = array(						$db->quoteName('old_url'),						$db->quoteName('new_url'),						$db->quoteName('referer'),						$db->quoteName('comment'),						$db->quoteName('hits'),						$db->quoteName('published'),						$db->quoteName('created_date')					);					$query = $db->getQuery(true)						->insert($db->quoteName('#__redirect_links'), false)						->columns($columns)						->values(							$db->quote($current) . ', ' . $db->quote('') .								' ,' . $db->quote($referer) . ', ' . $db->quote('') . ',1,0, ' .								$db->quote(JFactory::getDate()->toSql())						);					$db->setQuery($query);					$db->execute();				}				else				{					// Existing error url, increase hit counter					$query = $db->getQuery(true)						->update($db->quoteName('#__redirect_links'))						->set($db->quoteName('hits') . ' = ' . $db->quote('hits') . ' + 1')						->where('id = ' . (int) $res);					$db->setQuery($query);					$db->execute();				}				// Render the error page.				JError::customErrorPage($error);			}		}		else		{			// Render the error page.			JError::customErrorPage($error);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for creating HTML Grids * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlJGrid{	/**	 * Returns an action on a grid	 *	 * @param   integer       $i               The row index	 * @param   string        $task            The task to fire	 * @param   string|array  $prefix          An optional task prefix or an array of options	 * @param   string        $text            An optional text to display	 * @param   string        $active_title    An optional active tooltip to display if $enable is true	 * @param   string        $inactive_title  An optional inactive tooltip to display if $enable is true	 * @param   boolean       $tip             An optional setting for tooltip	 * @param   string        $active_class    An optional active HTML class	 * @param   string        $inactive_class  An optional inactive HTML class	 * @param   boolean       $enabled         An optional setting for access control on the action.	 * @param   boolean       $translate       An optional setting for translation.	 * @param   string        $checkbox	       An optional prefix for checkboxes.	 *	 * @return string         The Html code	 *	 * @since   11.1	 */	public static function action($i, $task, $prefix = '', $text = '', $active_title = '', $inactive_title = '', $tip = false, $active_class = '',		$inactive_class = '', $enabled = true, $translate = true, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$active_title = array_key_exists('active_title', $options) ? $options['active_title'] : $active_title;			$inactive_title = array_key_exists('inactive_title', $options) ? $options['inactive_title'] : $inactive_title;			$tip = array_key_exists('tip', $options) ? $options['tip'] : $tip;			$active_class = array_key_exists('active_class', $options) ? $options['active_class'] : $active_class;			$inactive_class = array_key_exists('inactive_class', $options) ? $options['inactive_class'] : $inactive_class;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$translate = array_key_exists('translate', $options) ? $options['translate'] : $translate;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		if ($tip)		{			JHtml::_('behavior.tooltip');		}		if ($enabled)		{			$html[] = '<a class="btn btn-micro ' . ($active_class == "publish" ? 'active' : '') . '" ' . ($tip ? 'rel="tooltip"' : '') . '';			$html[] = ' href="javascript:void(0);" onclick="return listItemTask(\'' . $checkbox . $i . '\',\'' . $prefix . $task . '\')"';			$html[] = ' title="' . addslashes(htmlspecialchars($translate ? JText::_($active_title) : $active_title, ENT_COMPAT, 'UTF-8')) . '">';			$html[] = '<i class="icon-' . $active_class . '">';			$html[] = '</i>';			$html[] = '</a>';		}		else		{			$html[] = '<a class="btn btn-micro disabled jgrid" ' . ($tip ? 'rel="tooltip"' : '') . '';			$html[] = ' title="' . addslashes(htmlspecialchars($translate ? JText::_($inactive_title) : $inactive_title, ENT_COMPAT, 'UTF-8')) . '">';			if ($active_class == "protected")			{				$html[] = '<i class="icon-lock"></i>';			}			else			{				$html[] = '<i class="icon-' . $inactive_class . '"></i>';			}			$html[] = '</a>';		}		return implode($html);	}	/**	 * Returns a state on a grid	 *	 * @param   array         $states     array of value/state. Each state is an array of the form	 *                                    (task, text, title,html active class, HTML inactive class)	 *                                    or ('task'=>task, 'text'=>text, 'active_title'=>active title,	 *                                    'inactive_title'=>inactive title, 'tip'=>boolean, 'active_class'=>html active class,	 *                                    'inactive_class'=>html inactive class)	 * @param   integer       $value      The state value.	 * @param   integer       $i          The row index	 * @param   string|array  $prefix     An optional task prefix or an array of options	 * @param   boolean       $enabled    An optional setting for access control on the action.	 * @param   boolean       $translate  An optional setting for translation.	 * @param   string        $checkbox   An optional prefix for checkboxes.	 *	 * @return  string       The Html code	 *	 * @since   11.1	 */	public static function state($states, $value, $i, $prefix = '', $enabled = true, $translate = true, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$translate = array_key_exists('translate', $options) ? $options['translate'] : $translate;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		$state = JArrayHelper::getValue($states, (int) $value, $states[0]);		$task = array_key_exists('task', $state) ? $state['task'] : $state[0];		$text = array_key_exists('text', $state) ? $state['text'] : (array_key_exists(1, $state) ? $state[1] : '');		$active_title = array_key_exists('active_title', $state) ? $state['active_title'] : (array_key_exists(2, $state) ? $state[2] : '');		$inactive_title = array_key_exists('inactive_title', $state) ? $state['inactive_title'] : (array_key_exists(3, $state) ? $state[3] : '');		$tip = array_key_exists('tip', $state) ? $state['tip'] : (array_key_exists(4, $state) ? $state[4] : false);		$active_class = array_key_exists('active_class', $state) ? $state['active_class'] : (array_key_exists(5, $state) ? $state[5] : '');		$inactive_class = array_key_exists('inactive_class', $state) ? $state['inactive_class'] : (array_key_exists(6, $state) ? $state[6] : '');		return self::action(			$i, $task, $prefix, $text, $active_title, $inactive_title, $tip,			$active_class, $inactive_class, $enabled, $translate, $checkbox		);	}	/**	 * Returns a published state on a grid	 *	 * @param   integer       $value         The state value.	 * @param   integer       $i             The row index	 * @param   string|array  $prefix        An optional task prefix or an array of options	 * @param   boolean       $enabled       An optional setting for access control on the action.	 * @param   string        $checkbox      An optional prefix for checkboxes.	 * @param   string        $publish_up    An optional start publishing date.	 * @param   string        $publish_down  An optional finish publishing date.	 *	 * @return  string  The Html code	 *	 * @see     JHtmlJGrid::state	 * @since   11.1	 */	public static function published($value, $i, $prefix = '', $enabled = true, $checkbox = 'cb', $publish_up = null, $publish_down = null)	{		if (is_array($prefix))		{			$options = $prefix;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		$states = array(1 => array('unpublish', 'JPUBLISHED', 'JLIB_HTML_UNPUBLISH_ITEM', 'JPUBLISHED', false, 'publish', 'publish'),			0 => array('publish', 'JUNPUBLISHED', 'JLIB_HTML_PUBLISH_ITEM', 'JUNPUBLISHED', false, 'unpublish', 'unpublish'),			2 => array('unpublish', 'JARCHIVED', 'JLIB_HTML_UNPUBLISH_ITEM', 'JARCHIVED', false, 'archive', 'archive'),			-2 => array('publish', 'JTRASHED', 'JLIB_HTML_PUBLISH_ITEM', 'JTRASHED', false, 'trash', 'trash'));		// Special state for dates		if ($publish_up || $publish_down)		{			$nullDate = JFactory::getDbo()->getNullDate();			$nowDate = JFactory::getDate()->toUnix();			$tz = new DateTimeZone(JFactory::getUser()->getParam('timezone', JFactory::getConfig()->get('offset')));			$publish_up = ($publish_up != $nullDate) ? JFactory::getDate($publish_up, 'UTC')->setTimeZone($tz) : false;			$publish_down = ($publish_down != $nullDate) ? JFactory::getDate($publish_down, 'UTC')->setTimeZone($tz) : false;			// Create tip text, only we have publish up or down settings			$tips = array();			if ($publish_up)			{				$tips[] = JText::sprintf('JLIB_HTML_PUBLISHED_START', $publish_up->format(JDate::$format, true));			}			if ($publish_down)			{				$tips[] = JText::sprintf('JLIB_HTML_PUBLISHED_FINISHED', $publish_down->format(JDate::$format, true));			}			$tip = empty($tips) ? false : implode('<br/>', $tips);			// Add tips and special titles			foreach ($states as $key => $state)			{				// Create special titles for published items				if ($key == 1)				{					$states[$key][2] = $states[$key][3] = 'JLIB_HTML_PUBLISHED_ITEM';					if ($publish_up > $nullDate && $nowDate < $publish_up->toUnix())					{						$states[$key][2] = $states[$key][3] = 'JLIB_HTML_PUBLISHED_PENDING_ITEM';						$states[$key][5] = $states[$key][6] = 'pending';					}					if ($publish_down > $nullDate && $nowDate > $publish_down->toUnix())					{						$states[$key][2] = $states[$key][3] = 'JLIB_HTML_PUBLISHED_EXPIRED_ITEM';						$states[$key][5] = $states[$key][6] = 'expired';					}				}				// Add tips to titles				if ($tip)				{					$states[$key][1] = JText::_($states[$key][1]);					$states[$key][2] = JText::_($states[$key][2]) . '::' . $tip;					$states[$key][3] = JText::_($states[$key][3]) . '::' . $tip;					$states[$key][4] = true;				}			}			return self::state($states, $value, $i, array('prefix' => $prefix, 'translate' => !$tip), $enabled, true, $checkbox);		}		return self::state($states, $value, $i, $prefix, $enabled, true, $checkbox);	}	/**	 * Returns a isDefault state on a grid	 *	 * @param   integer       $value     The state value.	 * @param   integer       $i         The row index	 * @param   string|array  $prefix    An optional task prefix or an array of options	 * @param   boolean       $enabled   An optional setting for access control on the action.	 * @param   string        $checkbox  An optional prefix for checkboxes.	 *	 * @return  string  The HTML code	 *	 * @see     JHtmlJGrid::state	 * @since   11.1	 */	public static function isdefault($value, $i, $prefix = '', $enabled = true, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		$states = array(			1 => array('unsetDefault', 'JDEFAULT', 'JLIB_HTML_UNSETDEFAULT_ITEM', 'JDEFAULT', false, 'star', 'star'),			0 => array('setDefault', '', 'JLIB_HTML_SETDEFAULT_ITEM', '', false, 'star-empty', 'star-empty'),		);		return self::state($states, $value, $i, $prefix, $enabled, true, $checkbox);	}	/**	 * Returns an array of standard published state filter options.	 *	 * @param   array  $config  An array of configuration options.	 *                          This array can contain a list of key/value pairs where values are boolean	 *                          and keys can be taken from 'published', 'unpublished', 'archived', 'trash', 'all'.	 *                          These pairs determine which values are displayed.	 *	 * @return  string  The HTML code for the select tag	 *	 * @since   11.1	 */	public static function publishedOptions($config = array())	{		// Build the active state filter options.		$options = array();		if (!array_key_exists('published', $config) || $config['published'])		{			$options[] = JHtml::_('select.option', '1', 'JPUBLISHED');		}		if (!array_key_exists('unpublished', $config) || $config['unpublished'])		{			$options[] = JHtml::_('select.option', '0', 'JUNPUBLISHED');		}		if (!array_key_exists('archived', $config) || $config['archived'])		{			$options[] = JHtml::_('select.option', '2', 'JARCHIVED');		}		if (!array_key_exists('trash', $config) || $config['trash'])		{			$options[] = JHtml::_('select.option', '-2', 'JTRASHED');		}		if (!array_key_exists('all', $config) || $config['all'])		{			$options[] = JHtml::_('select.option', '*', 'JALL');		}		return $options;	}	/**	 * Returns a checked-out icon	 *	 * @param   integer       $i           The row index.	 * @param   string        $editorName  The name of the editor.	 * @param   string        $time        The time that the object was checked out.	 * @param   string|array  $prefix      An optional task prefix or an array of options	 * @param   boolean       $enabled     True to enable the action.	 * @param   string        $checkbox    An optional prefix for checkboxes.	 *	 * @return  string  The required HTML.	 *	 * @since   11.1	 */	public static function checkedout($i, $editorName, $time, $prefix = '', $enabled = false, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		$text = addslashes(htmlspecialchars($editorName, ENT_COMPAT, 'UTF-8'));		$date = addslashes(htmlspecialchars(JHtml::_('date', $time, JText::_('DATE_FORMAT_LC')), ENT_COMPAT, 'UTF-8'));		$time = addslashes(htmlspecialchars(JHtml::_('date', $time, 'H:i'), ENT_COMPAT, 'UTF-8'));		$active_title = JText::_('JLIB_HTML_CHECKIN') . '::' . $text . '<br />' . $date . '<br />' . $time;		$inactive_title = JText::_('JLIB_HTML_CHECKED_OUT') . '::' . $text . '<br />' . $date . '<br />' . $time;		return self::action(			$i, 'checkin', $prefix, JText::_('JLIB_HTML_CHECKED_OUT'), $active_title, $inactive_title, true, 'checkedout',			'checkedout', $enabled, false, $checkbox		);	}	/**	 * Creates a order-up action icon.	 *	 * @param   integer       $i         The row index.	 * @param   string        $task      An optional task to fire.	 * @param   string|array  $prefix    An optional task prefix or an array of options	 * @param   string        $text      An optional text to display	 * @param   boolean       $enabled   An optional setting for access control on the action.	 * @param   string        $checkbox  An optional prefix for checkboxes.	 *	 * @return  string  The required HTML.	 *	 * @since   11.1	 */	public static function orderUp($i, $task = 'orderup', $prefix = '', $text = 'JLIB_HTML_MOVE_UP', $enabled = true, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$text = array_key_exists('text', $options) ? $options['text'] : $text;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		return self::action($i, $task, $prefix, $text, $text, $text, false, 'uparrow', 'uparrow_disabled', $enabled, true, $checkbox);	}	/**	 * Creates a order-down action icon.	 *	 * @param   integer       $i         The row index.	 * @param   string        $task      An optional task to fire.	 * @param   string|array  $prefix    An optional task prefix or an array of options	 * @param   string        $text      An optional text to display	 * @param   boolean       $enabled   An optional setting for access control on the action.	 * @param   string        $checkbox  An optional prefix for checkboxes.	 *	 * @return  string  The required HTML.	 *	 * @since   11.1	 */	public static function orderDown($i, $task = 'orderdown', $prefix = '', $text = 'JLIB_HTML_MOVE_DOWN', $enabled = true, $checkbox = 'cb')	{		if (is_array($prefix))		{			$options = $prefix;			$text = array_key_exists('text', $options) ? $options['text'] : $text;			$enabled = array_key_exists('enabled', $options) ? $options['enabled'] : $enabled;			$checkbox = array_key_exists('checkbox', $options) ? $options['checkbox'] : $checkbox;			$prefix = array_key_exists('prefix', $options) ? $options['prefix'] : '';		}		return self::action($i, $task, $prefix, $text, $text, $text, false, 'downarrow', 'downarrow_disabled', $enabled, true, $checkbox);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state',	'com_plugins');$saveOrder	= $listOrder == 'ordering';?><form action="<?php echo JRoute::_('index.php?option=com_plugins&view=plugins'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_PLUGINS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', PluginsHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_folder">				<?php echo JText::_('COM_PLUGINS_OPTION_FOLDER'); ?>			</label>			<select name="filter_folder" class="inputbox" id="filter_folder">				<option value=""><?php echo JText::_('COM_PLUGINS_OPTION_FOLDER');?></option>				<?php echo JHtml::_('select.options', PluginsHelper::folderOptions(), 'value', 'text', $this->state->get('filter.folder'));?>			</select>            <label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_NAME_HEADING', 'name', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'JENABLED', 'enabled', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'plugins.saveorder'); ?>					<?php endif; ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_FOLDER_HEADING', 'folder', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_ELEMENT_HEADING', 'element', $listDirn, $listOrder); ?>				</th>                <th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'extension_id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'ordering');			$canEdit    = $user->authorise('core.edit',       'com_plugins');			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_plugins') && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->extension_id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'plugins.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_plugins&task=plugin.edit&extension_id='.(int) $item->extension_id); ?>">							<?php echo $item->name; ?></a>					<?php else : ?>							<?php echo $item->name; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->enabled, $i, 'plugins.', $canChange); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->folder == $item->folder), 'plugins.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->folder == $item->folder), 'plugins.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->folder == $item->folder), 'plugins.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->folder == $item->folder), 'plugins.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="nowrap center">					<?php echo $this->escape($item->folder);?>				</td>				<td class="nowrap center">					<?php echo $this->escape($item->element);?>				</td>                <td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo (int) $item->extension_id;?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Oracle database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/pdo * @since       12.1 */class JDatabaseDriverOracle extends JDatabaseDriverPdo{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'oracle';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = '"';	/**	 * Returns the current dateformat	 *	 * @var   string	 * @since 12.1	 */	protected $dateformat;	/**	 * Returns the current character set	 *	 * @var   string	 * @since 12.1	 */	protected $charset;	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		$options['driver'] = 'oci';		$options['charset']    = (isset($options['charset'])) ? $options['charset']   : 'AL32UTF8';		$options['dateformat'] = (isset($options['dateformat'])) ? $options['dateformat'] : 'RRRR-MM-DD HH24:MI:SS';		$this->charset = $options['charset'];		$this->dateformat = $options['dateformat'];		// Finalize initialisation		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		parent::connect();		if (isset($this->options['schema']))		{			$this->setQuery('ALTER SESSION SET CURRENT_SCHEMA = ' . $this->quoteName($this->options['schema']))->execute();		}		$this->setDateFormat($this->dateformat);	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		$this->freeResult();		unset($this->connection);	}	/**	 * Drops a table from the database.	 *	 * Note: The IF EXISTS flag is unused in the Oracle driver.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true)			->setQuery('DROP TABLE :tableName');		$query->bind(':tableName', $tableName);		$this->setQuery($query);		$this->execute();		return $this;	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 */	public function getCollation()	{		return $this->charset;	}	/**	 * Get a query to run and verify the database is operational.	 *	 * @return  string  The query to check the health of the DB.	 *	 * @since   12.2	 */	public function getConnectedQuery()	{		return 'SELECT 1 FROM dual';	}	/**     * Returns the current date format     * This method should be useful in the case that     * somebody actually wants to use a different     * date format and needs to check what the current     * one is to see if it needs to be changed.     *     * @return string The current date format     *     * @since 12.1     */	public function getDateFormat()	{		return $this->dateformat;	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * Note: You must have the correct privileges before this method	 * will return usable results!	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		$result = array();		$query = $this->getQuery(true)			->select('dbms_metadata.get_ddl(:type, :tableName)')			->from('dual')			->bind(':type', 'TABLE');		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		foreach ($tables as $table)		{			$query->bind(':tableName', $table);			$this->setQuery($query);			$statement = (string) $this->loadResult();			$result[$table] = $statement;		}		return $result;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$columns = array();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->select('*')			->from('ALL_TAB_COLUMNS')			->where('table_name = :tableName');		$prefixedTable = str_replace('#__', strtoupper($this->tablePrefix), $table);		$query->bind(':tableName', $prefixedTable);		$this->setQuery($query);		$fields = $this->loadObjectList();		if ($typeOnly)		{			foreach ($fields as $field)			{				$columns[$field->COLUMN_NAME] = $field->DATA_TYPE;			}		}		else		{			foreach ($fields as $field)			{				$columns[$field->COLUMN_NAME] = $field;				$columns[$field->COLUMN_NAME]->Default = null;			}		}		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $columns;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->select('*')			->from('ALL_CONSTRAINTS')			->where('table_name = :tableName')			->bind(':tableName', $table);		$this->setQuery($query);		$keys = $this->loadObjectList();		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $keys;	}	/**	 * Method to get an array of all tables in the database (schema).	 *	 * @param   string   $databaseName         The database (schema) name	 * @param   boolean  $includeDatabaseName  Whether to include the schema name in the results	 *	 * @return  array    An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList($databaseName = null, $includeDatabaseName = false)	{		$this->connect();		$query = $this->getQuery(true);		$tables = array();		if ($includeDatabaseName)		{			$query->select('owner, table_name');		}		else		{			$query->select('table_name');		}		$query->from('all_tables');		if ($databaseName)		{			$query->where('owner = :database')				->bind(':database', $databaseName);		}		$query->order('table_name');		$this->setQuery($query);		if ($includeDatabaseName)		{			$tables = $this->loadAssocList();		}		else		{			$tables = $this->loadResultArray();		}		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$this->setQuery("select value from nls_database_parameters where parameter = 'NLS_RDBMS_VERSION'");		return $this->loadResult();	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		return true;	}	/**     * Sets the Oracle Date Format for the session     * Default date format for Oracle is = DD-MON-RR     * The default date format for this driver is:     * 'RRRR-MM-DD HH24:MI:SS' since it is the format     * that matches the MySQL one used within most Joomla     * tables.     *     * @param   string  $dateFormat  Oracle Date Format String     *     * @return boolean     *     * @since  12.1     */	public function setDateFormat($dateFormat = 'DD-MON-RR')	{		$this->connect();		$this->setQuery("ALTER SESSION SET NLS_DATE_FORMAT = '$dateFormat'");		$this->setQuery("ALTER SESSION SET NLS_TIMESTAMP_FORMAT = '$dateFormat'");		if (!$this->execute())		{			return false;		}		$this->dateformat = $dateFormat;		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * Returns false automatically for the Oracle driver since	 * you can only set the character set when the connection	 * is created.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		return false;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function lockTable($table)	{		$this->setQuery('LOCK TABLE ' . $this->quoteName($table) . ' IN EXCLUSIVE MODE')->execute();		return $this;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by Oracle.	 * @param   string  $prefix    Not used by Oracle.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('RENAME ' . $oldTable . ' TO ' . $newTable)->execute();		return $this;	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverOracle  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->setQuery('COMMIT')->execute();		return $this;	}	/**	 * Test to see if the PDO ODBC connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return class_exists('PDO') && in_array('oci', PDO::getAvailableDrivers());	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   11.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = "'";		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "'", $startPos);			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect component helper. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectHelper{	public static $extension = 'com_redirect';	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 */	public static function addSubmenu($vName)	{		// No submenu for this component.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user		= JFactory::getUser();		$result		= new JObject;		$assetName	= 'com_redirect';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string  	The HTML code for the select tag	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '*', 'JALL');		$options[]	= JHtml::_('select.option', '1', 'JENABLED');		$options[]	= JHtml::_('select.option', '0', 'JDISABLED');		$options[]	= JHtml::_('select.option', '2', 'JARCHIVED');		$options[]	= JHtml::_('select.option', '-2', 'JTRASHED');		return $options;	}	/**	 * Determines if the plugin for Redirect to work is enabled.	 *	 * @return  boolean	 */	public static function isEnabled()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('enabled'))			->from('#__extensions')			->where($db->quoteName('folder') . ' = ' . $db->quote('system'))			->where($db->quoteName('element') . ' = ' . $db->quote('redirect'));		$db->setQuery($query);		try		{			$result = (boolean) $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $result;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a modal window button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonPopup extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Popup';	/**	 * Fetch the HTML for the button	 *	 * @param   string   $type     Unused string, formerly button type.	 * @param   string   $name     Modal name, used to generate element ID	 * @param   string   $text     The link text	 * @param   string   $url      URL for popup	 * @param   integer  $width    Width of popup	 * @param   integer  $height   Height of popup	 * @param   integer  $top      Top attribute.  [@deprecated  Unused, will be removed in 4.0]	 * @param   integer  $left     Left attribute. [@deprecated  Unused, will be removed in 4.0]	 * @param   string   $onClose  JavaScript for the onClose event.	 * @param   string   $title    The title text	 *	 * @return  string  HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Modal', $name = '', $text = '', $url = '', $width = 640, $height = 480, $top = 0, $left = 0,		$onClose = '', $title = '')	{		// If no $title is set, use the $text element		if (strlen($title) == 0)		{			$title = $text;		}		$text = JText::_($text);		$title = JText::_($title);		$class = 'out-2';		$doTask = $this->_getCommand($url);		$html = "<button class=\"btn btn-small modal\" data-toggle=\"modal\" data-target=\"#modal-" . $name . "\">\n";		$html .= "<i class=\"icon-" . $class . "\">\n";		$html .= "</i>\n";		$html .= "$text\n";		$html .= "</button>\n";		// Build the options array for the modal		$params = array();		$params['title']  = $title;		$params['url']    = $doTask;		$params['height'] = $height;		$params['width']  = $width;		$html .= JHtml::_('bootstrap.renderModal', 'modal-' . $name, $params);		// If an $onClose event is passed, add it to the modal JS object		if (strlen($onClose) >= 1)		{			$html .= "<script>\n";			$html .= "jQuery('#modal-" . $name . "').on('hide', function () {\n";			$html .= $onClose . ";\n";			$html .= "}";			$html .= ");";			$html .= "</script>\n";		}		return $html;	}	/**	 * Get the button id	 *	 * @param   string  $type  Button type	 * @param   string  $name  Button name	 *	 * @return  string	Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type, $name)	{		return $this->_parent->getName() . '-' . "popup-$name";	}	/**	 * Get the JavaScript command for the button	 *	 * @param   string  $url  URL for popup	 *	 * @return  string  JavaScript command string	 *	 * @since   3.0	 */	private function _getCommand($url)	{		if (substr($url, 0, 4) !== 'http')		{			$url = JURI::base() . $url;		}		return $url;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;foreach ($this->fieldsets as $name => $fieldset) :	$label = !empty($fieldset->label) ? JText::_($fieldset->label, true) : JText::_('COM_PLUGINS_'.$fieldset->name.'_FIELDSET_LABEL', true);	$optionsname = 'options-' . $fieldset->name;	echo JHtml::_('bootstrap.addTab', 'myTab', $optionsname,  $label);	if (isset($fieldset->description) && trim($fieldset->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldset->description)).'</p>';	endif;	?>	<?php $hidden_fields = ''; ?>	<?php foreach ($this->form->getFieldset($name) as $field) : ?>		<?php if (!$field->hidden) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label; ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>		<?php else : $hidden_fields .= $field->input; ?>		<?php endif; ?>	<?php endforeach; ?>	<?php echo $hidden_fields; ?><?php echo JHtml::_('bootstrap.endTab'); ?><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of user groups. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewGroups extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		UsersHelper::addSubmenu('groups');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= UsersHelper::getActions();		JToolbarHelper::title(JText::_('COM_USERS_VIEW_GROUPS_TITLE'), 'groups');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('group.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('group.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'groups.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_users');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_USERS_GROUPS');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$user      = JFactory::getUser();$userId    = $user->get('id');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));JText::script('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'filters.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=filters');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by_alias', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_TIMESTAMP', 'a.created', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'COM_FINDER_FILTER_MAP_COUNT', 'a.map_count', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="center nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.filter_id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tbody>				<?php if (count($this->items) == 0) : ?>				<tr class="row0">					<td class="center" colspan="7">						<?php						if ($this->total == 0):							echo JText::_('COM_FINDER_NO_FILTERS');							?>							<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.add'); ?>" title="<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>">								<?php echo JText::_('COM_FINDER_CREATE_FILTER'); ?>							</a>						<?php						else:							echo JText::_('COM_FINDER_NO_RESULTS');						endif;						?>					</td>				</tr>				<?php endif; ?>				<?php foreach ($this->items as $i => $item):				$canCreate  = $user->authorise('core.create',     'com_finder');				$canEdit    = $user->authorise('core.edit',       'com_finder');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_finder') && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->filter_id); ?>					</td>					<td>						<?php if ($item->checked_out)						{							echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'filters.', $canCheckin);						} ?>						<?php if ($canEdit) { ?>							<a href="<?php echo JRoute::_('index.php?option=com_finder&task=filter.edit&filter_id=' . (int) $item->filter_id); ?>">								<?php echo $this->escape($item->title); ?></a>						<?php } else {								echo $this->escape($item->title);						} ?>					</td>					<td class="center nowrap">						<?php echo JHtml::_('jgrid.published', $item->state, $i, 'filters.', $canChange); ?>					</td>					<td class="center nowrap">						<?php echo $item->created_by_alias ? $item->created_by_alias : $item->user_name; ?>					</td>					<td class="center nowrap">						<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center nowrap">						<?php echo $item->map_count; ?>					</td>					<td class="center">						<?php echo (int) $item->filter_id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>			<tfoot>				<tr>					<td colspan="7" class="nowrap">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $this->state->get('list.ordering'); ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $this->state->get('list.direction'); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_menu * * @package     Joomla.Site * @subpackage  mod_menu * @since       1.5 */class ModMenuHelper{	/**	 * Get a list of the menu items.	 *	 * @param  JRegistry   $params  The module options.	 *	 * @return  array	 *	 * @since   1.5	 */	public static function getList(&$params)	{		$app = JFactory::getApplication();		$menu = $app->getMenu();		// Get active menu item		$base = self::getBase($params);		$user = JFactory::getUser();		$levels = $user->getAuthorisedViewLevels();		asort($levels);		$key = 'menu_items' . $params . implode(',', $levels) . '.' . $base->id;		$cache = JFactory::getCache('mod_menu', '');		if (!($items = $cache->get($key)))		{			$path    = $base->tree;			$start   = (int) $params->get('startLevel');			$end     = (int) $params->get('endLevel');			$showAll = $params->get('showAllChildren');			$items   = $menu->getItems('menutype', $params->get('menutype'));			$lastitem = 0;			if ($items)			{				foreach ($items as $i => $item)				{					if (($start && $start > $item->level)						|| ($end && $item->level > $end)						|| (!$showAll && $item->level > 1 && !in_array($item->parent_id, $path))						|| ($start > 1 && !in_array($item->tree[$start - 2], $path)))					{						unset($items[$i]);						continue;					}					$item->deeper     = false;					$item->shallower  = false;					$item->level_diff = 0;					if (isset($items[$lastitem]))					{						$items[$lastitem]->deeper     = ($item->level > $items[$lastitem]->level);						$items[$lastitem]->shallower  = ($item->level < $items[$lastitem]->level);						$items[$lastitem]->level_diff = ($items[$lastitem]->level - $item->level);					}					$item->parent = (boolean) $menu->getItems('parent_id', (int) $item->id, true);					$lastitem     = $i;					$item->active = false;					$item->flink  = $item->link;					// Reverted back for CMS version 2.5.6					switch ($item->type)					{						case 'separator':						case 'heading':							// No further action needed.							continue;						case 'url':							if ((strpos($item->link, 'index.php?') === 0) && (strpos($item->link, 'Itemid=') === false))							{								// If this is an internal Joomla link, ensure the Itemid is set.								$item->flink = $item->link . '&Itemid=' . $item->id;							}							break;						case 'alias':							// If this is an alias use the item id stored in the parameters to make the link.							$item->flink = 'index.php?Itemid=' . $item->params->get('aliasoptions');							break;						default:							$router = JSite::getRouter();							if ($router->getMode() == JROUTER_MODE_SEF)							{								$item->flink = 'index.php?Itemid=' . $item->id;							}							else							{								$item->flink .= '&Itemid=' . $item->id;							}							break;					}					if (strcasecmp(substr($item->flink, 0, 4), 'http') && (strpos($item->flink, 'index.php?') !== false))					{						$item->flink = JRoute::_($item->flink, true, $item->params->get('secure'));					}					else					{						$item->flink = JRoute::_($item->flink);					}					// We prevent the double encoding because for some reason the $item is shared for menu modules and we get double encoding					// when the cause of that is found the argument should be removed					$item->title        = htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8', false);					$item->anchor_css   = htmlspecialchars($item->params->get('menu-anchor_css', ''), ENT_COMPAT, 'UTF-8', false);					$item->anchor_title = htmlspecialchars($item->params->get('menu-anchor_title', ''), ENT_COMPAT, 'UTF-8', false);					$item->menu_image   = $item->params->get('menu_image', '') ? htmlspecialchars($item->params->get('menu_image', ''), ENT_COMPAT, 'UTF-8', false) : '';				}				if (isset($items[$lastitem]))				{					$items[$lastitem]->deeper     = (($start?$start:1) > $items[$lastitem]->level);					$items[$lastitem]->shallower  = (($start?$start:1) < $items[$lastitem]->level);					$items[$lastitem]->level_diff = ($items[$lastitem]->level - ($start?$start:1));				}			}			$cache->store($items, $key);		}		return $items;	}	/**	 * Get base menu item.	 *	 * @param   JRegistry  $params  The module options.	 *	 * @return   object	 *	 * @since	3.0.2	 */	public static function getBase(&$params)	{		// Get base menu item from parameters		if ($params->get('base'))		{			$base = JFactory::getApplication()->getMenu()->getItem($params->get('base'));		}		else		{			$base = false;		}		// Use active menu item if no base found		if (!$base)		{			$base = self::getActive($params);		}		return $base;	}	/**	 * Get active menu item.	 *	 * @param   JRegistry  $params  The module options.	 *	 * @return  object	 *	 * @since	3.0.2	 */	public static function getActive(&$params)	{		$menu = JFactory::getApplication()->getMenu();		return $menu->getActive() ? $menu->getActive() : $menu->getDefault();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       12.1 */class JDatabaseDriverMysql extends JDatabaseDriverMysqli{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'mysql';	/**	 * Constructor.	 *	 * @param   array  $options  Array of database options with keys: host, user, password, database, select.	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : 'root';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['select'] = (isset($options['select'])) ? (bool) $options['select'] : true;		// Finalize initialisation.		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_resource($this->connection))		{			mysql_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		// Make sure the MySQL extension for PHP is installed and enabled.		if (!function_exists('mysql_connect'))		{			throw new RuntimeException('Could not connect to MySQL.');		}		// Attempt to connect to the server.		if (!($this->connection = @ mysql_connect($this->options['host'], $this->options['user'], $this->options['password'], true)))		{			throw new RuntimeException('Could not connect to MySQL.');		}		// Set sql_mode to non_strict mode		mysql_query("SET @@SESSION.sql_mode = '';", $this->connection);		// If auto-select is enabled select the given database.		if ($this->options['select'] && !empty($this->options['database']))		{			$this->select($this->options['database']);		}		// Set charactersets (needed for MySQL 4.1.2+).		$this->setUTF();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		mysql_close($this->connection);		$this->connection = null;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$this->connect();		$result = mysql_real_escape_string($text, $this->getConnection());		if ($extra)		{			$result = addcslashes($result, '%_');		}		return $result;	}	/**	 * Test to see if the MySQL connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('mysql_connect'));	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		if (is_resource($this->connection))		{			return @mysql_ping($this->connection);		}		return false;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		return mysql_affected_rows($this->connection);	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		$this->connect();		return mysql_num_rows($cursor ? $cursor : $this->cursor);	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		return mysql_get_server_info($this->connection);	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		return mysql_insert_id($this->connection);	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function execute()	{		$this->connect();		if (!is_resource($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query .= ' LIMIT ' . $this->offset . ', ' . $this->limit;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @mysql_query($query, $this->connection);		// If an error occurred handle it.		if (!$this->cursor)		{			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					// Get the error number and message.					$this->errorNum = (int) mysql_errno($this->connection);					$this->errorMsg = (string) mysql_error($this->connection) . ' SQL=' . $query;					// Throw the normal query exception.					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				// Get the error number and message.				$this->errorNum = (int) mysql_errno($this->connection);				$this->errorMsg = (string) mysql_error($this->connection) . ' SQL=' . $query;				// Throw the normal query exception.				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->cursor;	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		if (!$database)		{			return false;		}		if (!mysql_select_db($database, $this->connection))		{			throw new RuntimeException('Could not connect to database');		}		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return mysql_set_charset('utf8', $this->connection);	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return mysql_fetch_row($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return mysql_fetch_assoc($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return mysql_fetch_object($cursor ? $cursor : $this->cursor, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		mysql_free_result($cursor ? $cursor : $this->cursor);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('behavior.modal', 'a.modal');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_banners&view=tracks'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_BANNERS_BEGIN_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-hide-lbl" for="filter_begin"><?php echo JText::_('COM_BANNERS_BEGIN_LABEL'); ?></label>			<?php echo JHtml::_('calendar', $this->state->get('filter.begin'), 'filter_begin', 'filter_begin', '%Y-%m-%d', array('size' => 10));?>			<label class="filter-hide-lbl" for="filter_end"><?php echo JText::_('COM_BANNERS_END_LABEL'); ?></label>			<?php echo JHtml::_('calendar', $this->state->get('filter.end'), 'filter_end', 'filter_end', '%Y-%m-%d', array('size' => 10));?>		</div>		<div class="filter-select">            <label class="selectlabel" for="filter_client_id">				<?php echo JText::_('COM_BANNERS_SELECT_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value=""><?php echo JText::_('COM_BANNERS_SELECT_CLIENT');?></option>				<?php echo JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<?php $category = $this->state->get('filter.category_id');?>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $category);?>			</select>			<label class="selectlabel" for="filter_type">				<?php echo JText::_('BANNERS_SELECT_TYPE'); ?>			</label>			<select name="filter_type" class="inputbox" id="filter_type">				<?php echo JHtml::_('select.options', array(JHtml::_('select.option', '0', JText::_('COM_BANNERS_SELECT_TYPE')), JHtml::_('select.option', 1, JText::_('COM_BANNERS_IMPRESSION')), JHtml::_('select.option', 2, JText::_('COM_BANNERS_CLICK'))), 'value', 'text', $this->state->get('filter.type'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_NAME', 'name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-20">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLIENT', 'client_name', $listDirn, $listOrder); ?>				</th>				<th class="width-20">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_TYPE', 'track_type', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_COUNT', 'count', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'JDATE', 'track_date', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo $item->name;?>				</td>				<td>					<?php echo $item->client_name;?>				</td>				<td>					<?php echo $item->category_title;?>				</td>				<td>					<?php echo $item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION'): JText::_('COM_BANNERS_CLICK');?>				</td>				<td>					<?php echo $item->count;?>				</td>				<td>					<?php echo JHtml::_('date', $item->track_date, JText::_('DATE_FORMAT_LC4').' H:i');?>				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$cacheparams = new stdClass;$cacheparams->cachemode = 'safeuri';$cacheparams->class = 'ModTagsPopularHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = array('id' => 'array', 'Itemid' => 'int');$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!count($list)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_tags_popular', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsViewTag extends JViewLegacy{	protected $state;	protected $items;	protected $item;	protected $children;	protected $pagination;	protected $params;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$item		= $this->get('Item');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Change to catch		/*if (count($errors = $this->get('Errors'))) {			JError::raiseError(500, implode("\n", $errors));			return false;		}*/		// Check whether access level allows access.		// TODO: SHould already be computed in $item->params->get('access-view')		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		foreach ($item as $itemElement)		{			if (!in_array($itemElement->access, $groups))			{				unset($itemElement);			}			// Prepare the data.			if (!empty($itemElement))			{				$temp = new JRegistry;				$temp->loadString($itemElement->params);				$itemElement->params = clone($params);				$itemElement->params->merge($temp);				$itemElement->params = (array) json_decode($itemElement->params);			}		}		$this->state      = &$state;		$this->items      = &$items;		$this->children   = &$children;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		$this->item       = &$item;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		// Merge tag params. If this is single-tag view, menu params override tag params		// Otherwise, article params override menu item params		$this->params	= $this->state->get('params');		$active	= $app->getMenu()->getActive();		$temp	= clone ($this->params);		// Check to see which parameters should take priority		if ($active)		{			$currentLink = $active->link;			// If the current view is the active item and an tag view for one tag, then the menu item params take priority			if (strpos($currentLink, 'view=tag') && (strpos($currentLink, '&id[0]='.(string) $item[0]->id)))			{				// $item->params are the article params, $temp are the menu item params				// Merge so that the menu item params take priority				$this->params->merge($temp);				// Load layout from active query (in case it is an alternative menu item)				if (isset($active->query['layout'])) {					$this->setLayout($active->query['layout']);				}			}			else			{				// Current view is not tags, so the global params take priority since tags is not an item.				// Merge the menu item params with the global params so that the article params take priority				$temp->merge($this->state->params);				$this->params = $temp;				// Check for alternative layouts (since we are not in a single-article menu item)				// Single-article menu item layout takes priority over alt layout for an article				if ($layout = $this->params->get('tags_layout'))				{					$this->setLayout($layout);				}			}		}		else		{			// Merge so that item params take priority			$temp->merge($item[0]->params);			$item[0]->params = $temp;			// Check for alternative layouts (since we are not in a single-tag menu item)			// Single-tag menu item layout takes priority over alt layout for an article			if ($layout = $item[0]->params->get('tag_layout'))			{				$this->setLayout($layout);			}		}		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_TAGS_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_tags'))		{			$this->params->set('page_subheading', $item->title);		}		// If this is not a single tag menu item, set the page title to the menu item title		if (count($this->item) == 1)		{			$title = $this->item[0]->title;		}		else		{			$title = $this->state->params->get('page_title');		}		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		foreach ($this->item as $j => $itemElement)		{			if ($itemElement->metadesc)			{				$this->document->setDescription($itemElement->metadesc);			}			elseif ($itemElement->metadesc && $this->params->get('menu-meta_description'))			{				$this->document->setDescription($this->params->get('menu-meta_description'));			}			if ($itemElement->metakey)			{				$this->document->setMetadata('keywords', $itemElement->metakey);			}			elseif (!$itemElement->metakey && $this->params->get('menu-meta_keywords'))			{				$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));			}			if ($this->params->get('robots'))			{				$this->document->setMetadata('robots', $this->params->get('robots'));			}			if ($app->getCfg('MetaAuthor') == '1')			{				$this->document->setMetaData('author', $itemElement->created_user_id);			}		}		// TODO create tag feed document		// Add alternative feed link		if ($this->params->get('show_feed_link', 1) == 1)		{			$link	= '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link.'&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link.'&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Index view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewIndex extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load plug-in language files.		FinderHelperLanguage::loadPluginLanguage();		$this->items		= $this->get('Items');		$this->total		= $this->get('Total');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->pluginState  = $this->get('pluginState');		FinderHelper::addSubmenu('index');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Configure the toolbar.		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Method to configure the toolbar for this view.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		$canDo	= FinderHelper::getActions();		JToolbarHelper::title(JText::_('COM_FINDER_INDEX_TOOLBAR_TITLE'), 'finder');		$toolbar = JToolbar::getInstance('toolbar');		$toolbar->appendButton('Popup', 'archive', 'COM_FINDER_INDEX', 'index.php?option=com_finder&view=indexer&tmpl=component', 500, 210, 0, 0, 'window.parent.location.reload()', 'COM_FINDER_HEADING_INDEXER');		JToolbarHelper::divider();		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publishList('index.publish');			JToolbarHelper::unpublishList('index.unpublish');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'index.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('index.purge', 'COM_FINDER_INDEX_TOOLBAR_PURGE', false);			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_finder');		}		JToolbarHelper::divider();		$toolbar->appendButton('Popup', 'stats', 'COM_FINDER_STATISTICS', 'index.php?option=com_finder&view=statistics&tmpl=component', 550, 350);		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_FINDER_MANAGE_INDEXED_CONTENT');		JHtmlSidebar::setAction('index.php?option=com_finder&view=index');		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'),			'filter_state',			JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'))		);		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_TYPE_FILTER'),			'filter_type',			JHtml::_('select.options', JHtml::_('finder.typeslist'), 'value', 'text', $this->state->get('filter.type'))		);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Prototype admin model. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelAdmin extends JModelForm{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  12.2	 */	protected $text_prefix = null;	/**	 * The event to trigger after deleting the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_after_delete = null;	/**	 * The event to trigger after saving the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_after_save = null;	/**	 * The event to trigger before deleting the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_before_delete = null;	/**	 * The event to trigger before saving the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_before_save = null;	/**	 * The event to trigger after changing the published state of the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_change_state = null;	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JModelLegacy	 * @since   12.2	 */	public function __construct($config = array())	{		parent::__construct($config);		if (isset($config['event_after_delete']))		{			$this->event_after_delete = $config['event_after_delete'];		}		elseif (empty($this->event_after_delete))		{			$this->event_after_delete = 'onContentAfterDelete';		}		if (isset($config['event_after_save']))		{			$this->event_after_save = $config['event_after_save'];		}		elseif (empty($this->event_after_save))		{			$this->event_after_save = 'onContentAfterSave';		}		if (isset($config['event_before_delete']))		{			$this->event_before_delete = $config['event_before_delete'];		}		elseif (empty($this->event_before_delete))		{			$this->event_before_delete = 'onContentBeforeDelete';		}		if (isset($config['event_before_save']))		{			$this->event_before_save = $config['event_before_save'];		}		elseif (empty($this->event_before_save))		{			$this->event_before_save = 'onContentBeforeSave';		}		if (isset($config['event_change_state']))		{			$this->event_change_state = $config['event_change_state'];		}		elseif (empty($this->event_change_state))		{			$this->event_change_state = 'onContentChangeState';		}		// Guess the JText message prefix. Defaults to the option.		if (isset($config['text_prefix']))		{			$this->text_prefix = strtoupper($config['text_prefix']);		}		elseif (empty($this->text_prefix))		{			$this->text_prefix = strtoupper($this->option);		}	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   12.2	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['category_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['category_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['category_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['tag']))		{			if (!$this->batchTag($commands['tag'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch access level changes for a group of rows.	 *	 * @param   integer  $value     The new value matching an Asset Group ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   12.2	 */	protected function batchAccess($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->access = (int) $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since	12.2	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$extension = JFactory::getApplication()->input->get('option', '');		$user = JFactory::getUser();		if (!$user->authorise('core.create', $extension . '.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->title);			$table->title = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			// $table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i]	= $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch language changes for a group of rows.	 *	 * @param   string  $value     The new value matching a language.	 * @param   array   $pks       An array of row IDs.	 * @param   array   $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   11.3	 */	protected function batchLanguage($value, $pks, $contexts)	{		// Set the variables		$user	= JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->language = $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch move items to a new category	 *	 * @param   integer  $value     The new category ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since	12.2	 */	protected function batchMove($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that user has create and edit permission for the component		$extension = JFactory::getApplication()->input->get('option', '');		$user = JFactory::getUser();		if (!$user->authorise('core.create', $extension . '.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we proceed		foreach ($pks as $pk)		{			if (!$user->authorise('core.edit', $contexts[$pk]))			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Set the new category ID			$table->catid = $categoryId;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch tag a list of item.	 *	 * @param   integer  $value     The value of the new tag.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  void.	 *	 * @since   3.1	 */	protected function batchTag($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$metaObject = json_decode($table->metadata);				$metaObject->tags = (isset($metaObject->tags) && is_array($metaObject->tags)) ? $metaObject->tags : array();				$metaObject->tags[] = (int) $value;				$metaObject->tags = array_unique($metaObject->tags);				$table->metadata = json_encode($metaObject);				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission for the component.	 *	 * @since   12.2	 */	protected function canDelete($record)	{		$user = JFactory::getUser();		return $user->authorise('core.delete', $this->option);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission for the component.	 *	 * @since   12.2	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return $user->authorise('core.edit.state', $this->option);	}	/**	 * Method override to check-in a record or an array of record	 *	 * @param   mixed  $pks  The ID of the primary key or an array of IDs	 *	 * @return  mixed  Boolean false if there is an error, otherwise the count of records checked in.	 *	 * @since   12.2	 */	public function checkin($pks = array())	{		$pks = (array) $pks;		$table = $this->getTable();		$count = 0;		if (empty($pks))		{			$pks = array((int) $this->getState($this->getName() . '.id'));		}		// Check in all items.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				if ($table->checked_out > 0)				{					if (!parent::checkin($pk))					{						return false;					}					$count++;				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return $count;	}	/**	 * Method override to check-out a record.	 *	 * @param   integer  $pk  The ID of the primary key.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   12.2	 */	public function checkout($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState($this->getName() . '.id');		return parent::checkout($pk);	}	/**	 * Method to delete one or more records.	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   12.2	 */	public function delete(&$pks)	{		$dispatcher = JEventDispatcher::getInstance();		$pks = (array) $pks;		$table = $this->getTable();		// Include the content plugins for the on delete events.		JPluginHelper::importPlugin('content');		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if ($this->canDelete($table))				{					$context = $this->option . '.' . $this->name;					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger($this->event_before_delete, array($context, $table));					if (in_array(false, $result, true))					{						$this->setError($table->getError());						return false;					}					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					// Trigger the onContentAfterDelete event.					$dispatcher->trigger($this->event_after_delete, array($context, $table));				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					$error = $this->getError();					if ($error)					{						JLog::add($error, JLog::WARNING, 'jerror');						return false;					}					else					{						JLog::add(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'), JLog::WARNING, 'jerror');						return false;					}				}			}			else			{				$this->setError($table->getError());				return false;			}		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $category_id  The id of the category.	 * @param   string   $alias        The alias.	 * @param   string   $title        The title.	 *	 * @return	array  Contains the modified title and alias.	 *	 * @since	12.2	 */	protected function generateNewTitle($category_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'catid' => $category_id)))		{			$title = JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed    Object on success, false on failure.	 *	 * @since   12.2	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState($this->getName() . '.id');		$table = $this->getTable();		if ($pk > 0)		{			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $table->getError())			{				$this->setError($table->getError());				return false;			}		}		// Convert to the JObject before adding other data.		$properties = $table->getProperties(1);		$item = JArrayHelper::toObject($properties, 'JObject');		if (property_exists($item, 'params'))		{			$registry = new JRegistry;			$registry->loadString($item->params);			$item->params = $registry->toArray();		}		return $item;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   JTable  $table  A JTable object.	 *	 * @return  array  An array of conditions to add to ordering queries.	 *	 * @since   12.2	 */	protected function getReorderConditions($table)	{		return array();	}	/**	 * Stock method to auto-populate the model state.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function populateState()	{		$table = $this->getTable();		$key = $table->getKeyName();		// Get the pk of the record from the request.		$pk = JFactory::getApplication()->input->getInt($key);		$this->setState($this->getName() . '.id', $pk);		// Load the parameters.		$value = JComponentHelper::getParams($this->option);		$this->setState('params', $value);	}	/**	 * Prepare and sanitise the table data prior to saving.	 *	 * @param   JTable  $table  A reference to a JTable object.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function prepareTable($table)	{		// Derived class will provide its own implementation if required.	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks   A list of the primary keys to change.	 * @param   integer  $value  The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   12.2	 */	public function publish(&$pks, $value = 1)	{		$dispatcher = JEventDispatcher::getInstance();		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Include the content plugins for the change of state event.		JPluginHelper::importPlugin('content');		// Access checks.		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');					return false;				}			}		}		// Attempt to change the state of the records.		if (!$table->publish($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		$context = $this->option . '.' . $this->name;		// Trigger the onContentChangeState event.		$result = $dispatcher->trigger($this->event_change_state, array($context, $pks, $value));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to adjust the ordering of a row.	 *	 * Returns NULL if the user did not have edit	 * privileges for any of the selected primary keys.	 *	 * @param   integer  $pks    The ID of the primary key to move.	 * @param   integer  $delta  Increment, usually +1 or -1	 *	 * @return  mixed  False on failure or error, true on success, null if the $pk is empty (no items selected).	 *	 * @since   12.2	 */	public function reorder($pks, $delta = 0)	{		$table = $this->getTable();		$pks = (array) $pks;		$result = true;		$allowed = true;		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk) && $this->checkout($pk))			{				// Access checks.				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					$this->checkin($pk);					JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');					$allowed = false;					continue;				}				$where = array();				$where = $this->getReorderConditions($table);				if (!$table->move($delta, $where))				{					$this->setError($table->getError());					unset($pks[$i]);					$result = false;				}				$this->checkin($pk);			}			else			{				$this->setError($table->getError());				unset($pks[$i]);				$result = false;			}		}		if ($allowed === false && empty($pks))		{			$result = null;		}		// Clear the component's cache		if ($result == true)		{			$this->cleanCache();		}		return $result;	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success, False on error.	 *	 * @since   12.2	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$key = $table->getKeyName();		$pk = (!empty($data[$key])) ? $data[$key] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Allow an exception to be thrown.		try		{			// Load the row if saving an existing record.			if ($pk > 0)			{				$table->load($pk);				$isNew = false;			}			// Bind the data.			if (!$table->bind($data))			{				$this->setError($table->getError());				return false;			}			// Prepare the row for saving			$this->prepareTable($table);			// Check the data.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Trigger the onContentBeforeSave event.			$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, $table, $isNew));			if (in_array(false, $result, true))			{				$this->setError($table->getError());				return false;			}			// Store the data.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Clean the cache.			$this->cleanCache();			// Trigger the onContentAfterSave event.			$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, $table, $isNew));		}		catch (Exception $e)		{			$this->setError($e->getMessage());			return false;		}		$pkName = $table->getKeyName();		if (isset($table->$pkName))		{			$this->setState($this->getName() . '.id', $table->$pkName);		}		$this->setState($this->getName() . '.new', $isNew);		return true;	}	/**	 * Saves the manually set order of records.	 *	 * @param   array    $pks    An array of primary key ids.	 * @param   integer  $order  +1 or -1	 *	 * @return  mixed	 *	 * @since   12.2	 */	public function saveorder($pks = null, $order = null)	{		$table = $this->getTable();		$conditions = array();		if (empty($pks))		{			return JError::raiseWarning(500, JText::_($this->text_prefix . '_ERROR_NO_ITEMS_SELECTED'));		}		// Update ordering values		foreach ($pks as $i => $pk)		{			$table->load((int) $pk);			// Access checks.			if (!$this->canEditState($table))			{				// Prune items that you can't change.				unset($pks[$i]);				JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');			}			elseif ($table->ordering != $order[$i])			{				$table->ordering = $order[$i];				if (!$table->store())				{					$this->setError($table->getError());					return false;				}				// Remember to reorder within position and client_id				$condition = $this->getReorderConditions($table);				$found = false;				foreach ($conditions as $cond)				{					if ($cond[1] == $condition)					{						$found = true;						break;					}				}				if (!$found)				{					$key = $table->getKeyName();					$conditions[] = array($table->$key, $condition);				}			}		}		// Execute reorder for each category.		foreach ($conditions as $cond)		{			$table->load($cond[0]);			$table->reorder($cond[1]);		}		// Clear the component's cache		$this->cleanCache();		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// JLayout for standard handling of metadata fields in the administrator content edit screens.$fieldSets = $displayData->get('form')->getFieldsets('metadata');foreach ($fieldSets as $name => $fieldSet) :	$metadatatabs = 'metadata-' . $name;	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<?php if ($name == 'jmetadata') : // Include the real fields in this panel.	?>		<div class="control-group">			<div class="control-label"><?php echo $displayData->get('form')->getLabel('metadesc'); ?></div>			<div class="controls"><?php echo $displayData->get('form')->getInput('metadesc'); ?></div>		</div>		<div class="control-group">			<div class="control-label"><?php echo $displayData->get('form')->getLabel('metakey'); ?></div>			<div class="controls"><?php echo $displayData->get('form')->getInput('metakey'); ?></div>		</div>		<?php if ($displayData->get('form')->getLabel('xreference')):?>			<div class="control-group">				<div class="control-label"><?php echo $displayData->get('form')->getLabel('xreference'); ?></div>				<div class="controls"><?php echo $displayData->get('form')->getInput('xreference'); ?></div>			</div>		<?php endif; ?>	<?php endif; ?>	<?php foreach ($displayData->get('form')->getFieldset($name) as $field) : ?>		<?php if ($field->name != 'jform[metadata][tags][]') :?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_redirect&view=links'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC'); ?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_OLD_URL', 'a.old_url', $listDirn, $listOrder); ?>					</th>					<th width="30%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_NEW_URL', 'a.new_url', $listDirn, $listOrder); ?>					</th>					<th width="30%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_REFERRER', 'a.referer', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_CREATED_DATE', 'a.created_date', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="7">						<?php echo $this->pagination->getListFooter(); ?>						<p class="footer-tip">							<?php if ($this->enabled) : ?>								<span class="enabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_ENABLED'); ?></span>							<?php else : ?>								<span class="disabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_DISABLED'); ?></span>							<?php endif; ?>						</p>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create',     'com_redirect');				$canEdit   = $user->authorise('core.edit',       'com_redirect');				$canChange = $user->authorise('core.edit.state', 'com_redirect');				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<?php echo JHtml::_('redirect.published', $item->published, $i); ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_redirect&task=link.edit&id='.$item->id);?>" title="<?php echo $this->escape($item->old_url); ?>">								<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?></a>						<?php else : ?>								<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?>						<?php endif; ?>					</td>					<td class="small">						<?php echo $this->escape($item->new_url); ?>					</td>					<td class="small">						<?php echo $this->escape($item->referer); ?>					</td>					<td class="small">						<?php echo JHtml::_('date', $item->created_date, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php if (!empty($this->items)) : ?>			<?php echo $this->loadTemplate('addform'); ?>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');JLoader::register('FinderHelperRoute', JPATH_SITE . '/components/com_finder/helpers/route.php');JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Query class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerQuery{	/**	 * Flag to show whether the query can return results.	 *	 * @var    boolean	 * @since  2.5	 */	public $search;	/**	 * The query input string.	 *	 * @var    string	 * @since  2.5	 */	public $input;	/**	 * The language of the query.	 *	 * @var    string	 * @since  2.5	 */	public $language;	/**	 * The query string matching mode.	 *	 * @var    string	 * @since  2.5	 */	public $mode;	/**	 * The included tokens.	 *	 * @var    array	 * @since  2.5	 */	public $included = array();	/**	 * The excluded tokens.	 *	 * @var    array	 * @since  2.5	 */	public $excluded = array();	/**	 * The tokens to ignore because no matches exist.	 *	 * @var    array	 * @since  2.5	 */	public $ignored = array();	/**	 * The operators used in the query input string.	 *	 * @var    array	 * @since  2.5	 */	public $operators = array();	/**	 * The terms to highlight as matches.	 *	 * @var    array	 * @since  2.5	 */	public $highlight = array();	/**	 * The number of matching terms for the query input.	 *	 * @var    integer	 * @since  2.5	 */	public $terms;	/**	 * The static filter id.	 *	 * @var    string	 * @since  2.5	 */	public $filter;	/**	 * The taxonomy filters. This is a multi-dimensional array of taxonomy	 * branches as the first level and then the taxonomy nodes as the values.	 *	 * For example:	 * $filters = array(	 *     'Type' = array(10, 32, 29, 11, ...);	 *     'Label' = array(20, 314, 349, 91, 82, ...);	 *        ...	 * );	 *	 * @var    array	 * @since  2.5	 */	public $filters = array();	/**	 * The start date filter.	 *	 * @var    string	 * @since  2.5	 */	public $date1;	/**	 * The end date filter.	 *	 * @var    string	 * @since  2.5	 */	public $date2;	/**	 * The start date filter modifier.	 *	 * @var    string	 * @since  2.5	 */	public $when1;	/**	 * The end date filter modifier.	 *	 * @var    string	 * @since  2.5	 */	public $when2;	/**	 * Method to instantiate the query object.	 *	 * @param   array  $options  An array of query options.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function __construct($options)	{		// Get the input string.		$this->input = isset($options['input']) ? $options['input'] : null;		// Get the empty query setting.		$this->empty = isset($options['empty']) ? (bool) $options['empty'] : false;		// Get the input language.		$this->language = !empty($options['language']) ? $options['language'] : FinderIndexerHelper::getDefaultLanguage();		$this->language = FinderIndexerHelper::getPrimaryLanguage($this->language);		// Get the matching mode.		$this->mode = 'AND';		// Initialize the temporary date storage.		$this->dates = new JRegistry;		// Populate the temporary date storage.		if (isset($options['date1']) && !empty($options['date1']))		{			$this->dates->set('date1', $options['date1']);		}		if (isset($options['date2']) && !empty($options['date1']))		{			$this->dates->set('date2', $options['date2']);		}		if (isset($options['when1']) && !empty($options['date1']))		{			$this->dates->set('when1', $options['when1']);		}		if (isset($options['when2']) && !empty($options['date1']))		{			$this->dates->set('when2', $options['when2']);		}		// Process the static taxonomy filters.		if (isset($options['filter']) && !empty($options['filter']))		{			$this->processStaticTaxonomy($options['filter']);		}		// Process the dynamic taxonomy filters.		if (isset($options['filters']) && !empty($options['filters']))		{			$this->processDynamicTaxonomy($options['filters']);		}		// Get the date filters.		$d1 = $this->dates->get('date1');		$d2 = $this->dates->get('date2');		$w1 = $this->dates->get('when1');		$w2 = $this->dates->get('when2');		// Process the date filters.		if (!empty($d1) || !empty($d2))		{			$this->processDates($d1, $d2, $w1, $w2);		}		// Process the input string.		$this->processString($this->input, $this->language, $this->mode);		// Get the number of matching terms.		foreach ($this->included as $token)		{			$this->terms += count($token->matches);		}		// Remove the temporary date storage.		unset($this->dates);		/*		 * Lastly, determine whether this query can return a result set.		 */		// Check if we have a query string.		if (!empty($this->input))		{			$this->search = true;		}		// Check if we can search without a query string.		elseif ($this->empty && (!empty($this->filter) || !empty($this->filters) || !empty($this->date1) || !empty($this->date2)))		{			$this->search = true;		}		// We do not have a valid search query.		else		{			$this->search = false;		}	}	/**	 * Method to convert the query object into a URI string.	 *	 * @param   string  $base  The base URI. [optional]	 *	 * @return  string  The complete query URI.	 *	 * @since   2.5	 */	public function toURI($base = null)	{		// Set the base if not specified.		if (empty($base))		{			$base = 'index.php?option=com_finder&view=search';		}		// Get the base URI.		$uri = JURI::getInstance($base);		// Add the static taxonomy filter if present.		if (!empty($this->filter))		{			$uri->setVar('f', $this->filter);		}		// Get the filters in the request.		$input = JFactory::getApplication()->input;		$t = $input->request->get('t', array(), 'array');		// Add the dynamic taxonomy filters if present.		if (!empty($this->filters))		{			foreach ($this->filters as $nodes)			{				foreach ($nodes as $node)				{					if (!in_array($node, $t))					{						continue;					}					$uri->setVar('t[]', $node);				}			}		}		// Add the input string if present.		if (!empty($this->input))		{			$uri->setVar('q', $this->input);		}		// Add the start date if present.		if (!empty($this->date1))		{			$uri->setVar('d1', $this->date1);		}		// Add the end date if present.		if (!empty($this->date2))		{			$uri->setVar('d2', $this->date2);		}		// Add the start date modifier if present.		if (!empty($this->when1))		{			$uri->setVar('w1', $this->when1);		}		// Add the end date modifier if present.		if (!empty($this->when2))		{			$uri->setVar('w2', $this->when2);		}		// Add a menu item id if one is not present.		if (!$uri->getVar('Itemid'))		{			// Get the menu item id.			$query = array(				'view' => $uri->getVar('view'),				'f' => $uri->getVar('f'),				'q' => $uri->getVar('q')			);			$item = FinderHelperRoute::getItemid($query);			// Add the menu item id if present.			if ($item !== null)			{				$uri->setVar('Itemid', $item);			}		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get a list of excluded search term ids.	 *	 * @return  array  An array of excluded term ids.	 *	 * @since   2.5	 */	public function getExcludedTermIds()	{		$results = array();		// Iterate through the excluded tokens and compile the matching terms.		for ($i = 0, $c = count($this->excluded); $i < $c; $i++)		{			$results = array_merge($results, $this->excluded[$i]->matches);		}		// Sanitize the terms.		//@TODO: Should toInteger use $return?		$return = array_unique($results);		JArrayHelper::toInteger($results);		return $results;	}	/**	 * Method to get a list of included search term ids.	 *	 * @return  array  An array of included term ids.	 *	 * @since   2.5	 */	public function getIncludedTermIds()	{		$results = array();		// Iterate through the included tokens and compile the matching terms.		for ($i = 0, $c = count($this->included); $i < $c; $i++)		{			// Check if we have any terms.			if (empty($this->included[$i]->matches))			{				continue;			}			// Get the term.			$term = $this->included[$i]->term;			// Prepare the container for the term if necessary.			if (!array_key_exists($term, $results))			{				$results[$term] = array();			}			// Add the matches to the stack.			$results[$term] = array_merge($results[$term], $this->included[$i]->matches);		}		// Sanitize the terms.		foreach ($results as $key => $value)		{			$results[$key] = array_unique($results[$key]);			JArrayHelper::toInteger($results[$key]);		}		return $results;	}	/**	 * Method to get a list of required search term ids.	 *	 * @return  array  An array of required term ids.	 *	 * @since   2.5	 */	public function getRequiredTermIds()	{		$results = array();		// Iterate through the included tokens and compile the matching terms.		for ($i = 0, $c = count($this->included); $i < $c; $i++)		{			// Check if the token is required.			if ($this->included[$i]->required)			{				// Get the term.				$term = $this->included[$i]->term;				// Prepare the container for the term if necessary.				if (!array_key_exists($term, $results))				{					$results[$term] = array();				}				// Add the matches to the stack.				$results[$term] = array_merge($results[$term], $this->included[$i]->matches);			}		}		// Sanitize the terms.		foreach ($results as $key => $value)		{			$results[$key] = array_unique($results[$key]);			JArrayHelper::toInteger($results[$key]);		}		return $results;	}	/**	 * Method to process the static taxonomy input. The static taxonomy input	 * comes in the form of a pre-defined search filter that is assigned to the	 * search form.	 *	 * @param   integer  $filterId  The id of static filter.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function processStaticTaxonomy($filterId)	{		// Get the database object.		$db = JFactory::getDbo();		// Initialize user variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Load the predefined filter.		$query = $db->getQuery(true)			->select('f.data, f.params')			->from($db->quoteName('#__finder_filters') . ' AS f')			->where('f.filter_id = ' . (int) $filterId);		$db->setQuery($query);		$return = $db->loadObject();		// Check the returned filter.		if (empty($return))		{			return false;		}		// Set the filter.		$this->filter = (int) $filterId;		// Get a parameter object for the filter date options.		$registry = new JRegistry;		$registry->loadString($return->params);		$params = $registry;		// Set the dates if not already set.		$this->dates->def('d1', $params->get('d1'));		$this->dates->def('d2', $params->get('d2'));		$this->dates->def('w1', $params->get('w1'));		$this->dates->def('w2', $params->get('w2'));		// Remove duplicates and sanitize.		$filters = explode(',', $return->data);		$filters = array_unique($filters);		JArrayHelper::toInteger($filters);		// Remove any values of zero.		if (array_search(0, $filters, true) !== false)		{			unset($filters[array_search(0, $filters, true)]);		}		// Check if we have any real input.		if (empty($filters))		{			return true;		}		/*		 * Create the query to get filters from the database. We do this for		 * two reasons: one, it allows us to ensure that the filters being used		 * are real; two, we need to sort the filters by taxonomy branch.		 */		$query->clear()			->select('t1.id, t1.title, t2.title AS branch')			->from($db->quoteName('#__finder_taxonomy') . ' AS t1')			->join('INNER', $db->quoteName('#__finder_taxonomy') . ' AS t2 ON t2.id = t1.parent_id')			->where('t1.state = 1')			->where('t1.access IN (' . $groups . ')')			->where('t1.id IN (' . implode(',', $filters) . ')')			->where('t2.state = 1')			->where('t2.access IN (' . $groups . ')');		// Load the filters.		$db->setQuery($query);		$results = $db->loadObjectList();		// Sort the filter ids by branch.		foreach ($results as $result)		{			$this->filters[$result->branch][$result->title] = (int) $result->id;		}		return true;	}	/**	 * Method to process the dynamic taxonomy input. The dynamic taxonomy input	 * comes in the form of select fields that the user chooses from. The	 * dynamic taxonomy input is processed AFTER the static taxonomy input	 * because the dynamic options can be used to further narrow a static	 * taxonomy filter.	 *	 * @param   array  $filters  An array of taxonomy node ids.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function processDynamicTaxonomy($filters)	{		// Initialize user variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Remove duplicates and sanitize.		$filters = array_unique($filters);		JArrayHelper::toInteger($filters);		// Remove any values of zero.		if (array_search(0, $filters, true) !== false)		{			unset($filters[array_search(0, $filters, true)]);		}		// Check if we have any real input.		if (empty($filters))		{			return true;		}		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		/*		 * Create the query to get filters from the database. We do this for		 * two reasons: one, it allows us to ensure that the filters being used		 * are real; two, we need to sort the filters by taxonomy branch.		 */		$query->select('t1.id, t1.title, t2.title AS branch')			->from($db->quoteName('#__finder_taxonomy') . ' AS t1')			->join('INNER', $db->quoteName('#__finder_taxonomy') . ' AS t2 ON t2.id = t1.parent_id')			->where('t1.state = 1')			->where('t1.access IN (' . $groups . ')')			->where('t1.id IN (' . implode(',', $filters) . ')')			->where('t2.state = 1')			->where('t2.access IN (' . $groups . ')');		// Load the filters.		$db->setQuery($query);		$results = $db->loadObjectList();		// Cleared filter branches.		$cleared = array();		/*		 * Sort the filter ids by branch. Because these filters are designed to		 * override and further narrow the items selected in the static filter,		 * we will clear the values from the static filter on a branch by		 * branch basis before adding the dynamic filters. So, if the static		 * filter defines a type filter of "articles" and three "category"		 * filters but the user only limits the category further, the category		 * filters will be flushed but the type filters will not.		 */		foreach ($results as $result)		{			// Check if the branch has been cleared.			if (!in_array($result->branch, $cleared))			{				// Clear the branch.				$this->filters[$result->branch] = array();				// Add the branch to the cleared list.				$cleared[] = $result->branch;			}			// Add the filter to the list.			$this->filters[$result->branch][$result->title] = (int) $result->id;		}		return true;	}	/**	 * Method to process the query date filters to determine start and end	 * date limitations.	 *	 * @param   string  $date1  The first date filter.	 * @param   string  $date2  The second date filter.	 * @param   string  $when1  The first date modifier.	 * @param   string  $when2  The second date modifier.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function processDates($date1, $date2, $when1, $when2)	{		// Clean up the inputs.		$date1 = JString::trim(JString::strtolower($date1));		$date2 = JString::trim(JString::strtolower($date2));		$when1 = JString::trim(JString::strtolower($when1));		$when2 = JString::trim(JString::strtolower($when2));		// Get the time offset.		$offset = JFactory::getApplication()->getCfg('offset');		// Array of allowed when values.		$whens = array('before', 'after', 'exact');		// The value of 'today' is a special case that we need to handle.		if ($date1 === JString::strtolower(JText::_('COM_FINDER_QUERY_FILTER_TODAY')))		{			$today = JFactory::getDate('now', $offset);			$date1 = $today->format('%Y-%m-%d');		}		// Try to parse the date string.		$date = JFactory::getDate($date1, $offset);		// Check if the date was parsed successfully.		if ($date->toUnix() !== null)		{			// Set the date filter.			$this->date1 = $date->toSQL();			$this->when1 = in_array($when1, $whens) ? $when1 : 'before';		}		// The value of 'today' is a special case that we need to handle.		if ($date2 === JString::strtolower(JText::_('COM_FINDER_QUERY_FILTER_TODAY')))		{			$today = JFactory::getDate('now', $offset);			$date2 = $today->format('%Y-%m-%d');		}		// Try to parse the date string.		$date = JFactory::getDate($date2, $offset);		// Check if the date was parsed successfully.		if ($date->toUnix() !== null)		{			// Set the date filter.			$this->date2 = $date->toSQL();			$this->when2 = in_array($when2, $whens) ? $when2 : 'before';		}		return true;	}	/**	 * Method to process the query input string and extract required, optional,	 * and excluded tokens; taxonomy filters; and date filters.	 *	 * @param   string  $input  The query input string.	 * @param   string  $lang   The query input language.	 * @param   string  $mode   The query matching mode.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function processString($input, $lang, $mode)	{		// Clean up the input string.		$input = html_entity_decode($input, ENT_QUOTES, 'UTF-8');		$input = JString::strtolower($input);		$input = preg_replace('#\s+#mi', ' ', $input);		$input = JString::trim($input);		$debug = JFactory::getConfig()->get('debug_lang');		/*		 * First, we need to handle string based modifiers. String based		 * modifiers could potentially include things like "category:blah" or		 * "before:2009-10-21" or "type:article", etc.		 */		$patterns = array(			'before' => JText::_('COM_FINDER_FILTER_WHEN_BEFORE'),			'after' => JText::_('COM_FINDER_FILTER_WHEN_AFTER')		);		// Add the taxonomy branch titles to the possible patterns.		foreach (FinderIndexerTaxonomy::getBranchTitles() as $branch)		{			// Add the pattern.			$patterns[$branch] = JString::strtolower(JText::_(FinderHelperLanguage::branchSingular($branch)));		}		// Container for search terms and phrases.		$terms = array();		$phrases = array();		// Cleared filter branches.		$cleared = array();		/*		 * Compile the suffix pattern. This is used to match the values of the		 * filter input string. Single words can be input directly, multi-word		 * values have to be wrapped in double quotes.		 */		$quotes = html_entity_decode('&#8216;&#8217;&#39;', ENT_QUOTES, 'UTF-8');		$suffix = '(([\w\d' . $quotes . '-]+)|\"([\w\d\s' . $quotes . '-]+)\")';		/*		 * Iterate through the possible filter patterns and search for matches.		 * We need to match the key, colon, and a value pattern for the match		 * to be valid.		 */		foreach ($patterns as $modifier => $pattern)		{			$matches = array();			if ($debug)			{				$pattern = substr($pattern, 2, -2);			}			// Check if the filter pattern is in the input string.			if (preg_match('#' . $pattern . '\s*:\s*' . $suffix . '#mi', $input, $matches))			{				// Get the value given to the modifier.				$value = isset($matches[3]) ? $matches[3] : $matches[1];				// Now we have to handle the filter string.				switch ($modifier)				{					// Handle a before and after date filters.					case 'before':					case 'after':					{						// Get the time offset.						$offset = JFactory::getApplication()->getCfg('offset');						// Array of allowed when values.						$whens = array('before', 'after', 'exact');						// The value of 'today' is a special case that we need to handle.						if ($value === JString::strtolower(JText::_('COM_FINDER_QUERY_FILTER_TODAY')))						{							$today = JFactory::getDate('now', $offset);							$value = $today->format('%Y-%m-%d');						}						// Try to parse the date string.						$date = JFactory::getDate($value, $offset);						// Check if the date was parsed successfully.						if ($date->toUnix() !== null)						{							// Set the date filter.							$this->date1 = $date->toSQL();							$this->when1 = in_array($modifier, $whens) ? $modifier : 'before';						}						break;					}					// Handle a taxonomy branch filter.					default:						{						// Try to find the node id.						$return = FinderIndexerTaxonomy::getNodeByTitle($modifier, $value);						// Check if the node id was found.						if ($return)						{							// Check if the branch has been cleared.							if (!in_array($modifier, $cleared))							{								// Clear the branch.								$this->filters[$modifier] = array();								// Add the branch to the cleared list.								$cleared[] = $modifier;							}							// Add the filter to the list.							$this->filters[$modifier][$return->title] = (int) $return->id;						}						break;						}				}				// Clean up the input string again.				$input = str_replace($matches[0], '', $input);				$input = preg_replace('#\s+#mi', ' ', $input);				$input = JString::trim($input);			}		}		/*		 * Extract the tokens enclosed in double quotes so that we can handle		 * them as phrases.		 */		if (JString::strpos($input, '"') !== false)		{			$matches = array();			// Extract the tokens enclosed in double quotes.			if (preg_match_all('#\"([^"]+)\"#mi', $input, $matches))			{				/*				 * One or more phrases were found so we need to iterate through				 * them, tokenize them as phrases, and remove them from the raw				 * input string before we move on to the next processing step.				 */				foreach ($matches[1] as $key => $match)				{					// Find the complete phrase in the input string.					$pos = JString::strpos($input, $matches[0][$key]);					$len = JString::strlen($matches[0][$key]);					// Add any terms that are before this phrase to the stack.					if (JString::trim(JString::substr($input, 0, $pos)))					{						$terms = array_merge($terms, explode(' ', JString::trim(JString::substr($input, 0, $pos))));					}					// Strip out everything up to and including the phrase.					$input = JString::substr($input, $pos + $len);					// Clean up the input string again.					$input = preg_replace('#\s+#mi', ' ', $input);					$input = JString::trim($input);					// Get the number of words in the phrase.					$parts = explode(' ', $match);					// Check if the phrase is longer than three words.					if (count($parts) > 3)					{						/*						 * If the phrase is longer than three words, we need to						 * break it down into smaller chunks of phrases that						 * are less than or equal to three words. We overlap						 * the chunks so that we can ensure that a match is						 * found for the complete phrase and not just portions						 * of it.						 */						for ($i = 0, $c = count($parts); $i < $c; $i += 2)						{							// Set up the chunk.							$chunk = array();							// The chunk has to be assembled based on how many							// pieces are available to use.							switch ($c - $i)							{								// If only one word is left, we can break from								// the switch and loop because the last word								// was already used at the end of the last								// chunk.								case 1:									break 2;								// If there words are left, we use them both as								// the last chunk of the phrase and we're done.								case 2:									$chunk[] = $parts[$i];									$chunk[] = $parts[$i + 1];									break;								// If there are three or more words left, we								// build a three word chunk and continue on.								default:									$chunk[] = $parts[$i];									$chunk[] = $parts[$i + 1];									$chunk[] = $parts[$i + 2];									break;							}							// If the chunk is not empty, add it as a phrase.							if (count($chunk))							{								$phrases[] = implode(' ', $chunk);								$terms[] = implode(' ', $chunk);							}						}					}					else					{						// The phrase is <= 3 words so we can use it as is.						$phrases[] = $match;						$terms[] = $match;					}				}			}		}		// Add the remaining terms if present.		if (!empty($input))		{			$terms = array_merge($terms, explode(' ', $input));		}		// An array of our boolean operators. $operator => $translation		$operators = array(			'AND' => JString::strtolower(JText::_('COM_FINDER_QUERY_OPERATOR_AND')),			'OR' => JString::strtolower(JText::_('COM_FINDER_QUERY_OPERATOR_OR')),			'NOT' => JString::strtolower(JText::_('COM_FINDER_QUERY_OPERATOR_NOT'))		);		// If language debugging is enabled you need to ignore the debug strings in matching.		if (JDEBUG)		{			$debugStrings = array('**', '??');			$operators = str_replace($debugStrings, '', $operators);		}		/*		 * Iterate through the terms and perform any sorting that needs to be		 * done based on boolean search operators. Terms that are before an		 * and/or/not modifier have to be handled in relation to their operator.		 */		for ($i = 0, $c = count($terms); $i < $c; $i++)		{			// Check if the term is followed by an operator that we understand.			if (isset($terms[$i + 1]) && in_array($terms[$i + 1], $operators))			{				// Get the operator mode.				$op = array_search($terms[$i + 1], $operators);				// Handle the AND operator.				if ($op === 'AND' && isset($terms[$i + 2]))				{					// Tokenize the current term.					$token = FinderIndexerHelper::tokenize($terms[$i], $lang, true);					$token = $this->getTokenData($token);					// Set the required flag.					$token->required = true;					// Add the current token to the stack.					$this->included[] = $token;					$this->highlight = array_merge($this->highlight, array_keys($token->matches));					// Skip the next token (the mode operator).					$this->operators[] = $terms[$i + 1];					// Tokenize the term after the next term (current plus two).					$other = FinderIndexerHelper::tokenize($terms[$i + 2], $lang, true);					$other = $this->getTokenData($other);					// Set the required flag.					$other->required = true;					// Add the token after the next token to the stack.					$this->included[] = $other;					$this->highlight = array_merge($this->highlight, array_keys($other->matches));					// Remove the processed phrases if possible.					if (($pk = array_search($terms[$i], $phrases)) !== false)					{						unset($phrases[$pk]);					}					if (($pk = array_search($terms[$i + 2], $phrases)) !== false)					{						unset($phrases[$pk]);					}					// Remove the processed terms.					unset($terms[$i]);					unset($terms[$i + 1]);					unset($terms[$i + 2]);					// Adjust the loop.					$i += 2;					continue;				}				// Handle the OR operator.				elseif ($op === 'OR' && isset($terms[$i + 2]))				{					// Tokenize the current term.					$token = FinderIndexerHelper::tokenize($terms[$i], $lang, true);					$token = $this->getTokenData($token);					// Set the required flag.					$token->required = false;					// Add the current token to the stack.					if (count($token->matches))					{						$this->included[] = $token;						$this->highlight = array_merge($this->highlight, array_keys($token->matches));					}					else					{						$this->ignored[] = $token;					}					// Skip the next token (the mode operator).					$this->operators[] = $terms[$i + 1];					// Tokenize the term after the next term (current plus two).					$other = FinderIndexerHelper::tokenize($terms[$i + 2], $lang, true);					$other = $this->getTokenData($other);					// Set the required flag.					$other->required = false;					// Add the token after the next token to the stack.					if (count($other->matches))					{						$this->included[] = $other;						$this->highlight = array_merge($this->highlight, array_keys($other->matches));					}					else					{						$this->ignored[] = $other;					}					// Remove the processed phrases if possible.					if (($pk = array_search($terms[$i], $phrases)) !== false)					{						unset($phrases[$pk]);					}					if (($pk = array_search($terms[$i + 2], $phrases)) !== false)					{						unset($phrases[$pk]);					}					// Remove the processed terms.					unset($terms[$i]);					unset($terms[$i + 1]);					unset($terms[$i + 2]);					// Adjust the loop.					$i += 2;					continue;				}			}			// Handle an orphaned OR operator.			elseif (isset($terms[$i + 1]) && array_search($terms[$i], $operators) === 'OR')			{				// Skip the next token (the mode operator).				$this->operators[] = $terms[$i];				// Tokenize the next term (current plus one).				$other = FinderIndexerHelper::tokenize($terms[$i + 1], $lang, true);				$other = $this->getTokenData($other);				// Set the required flag.				$other->required = false;				// Add the token after the next token to the stack.				if (count($other->matches))				{					$this->included[] = $other;					$this->highlight = array_merge($this->highlight, array_keys($other->matches));				}				else				{					$this->ignored[] = $other;				}				// Remove the processed phrase if possible.				if (($pk = array_search($terms[$i + 1], $phrases)) !== false)				{					unset($phrases[$pk]);				}				// Remove the processed terms.				unset($terms[$i]);				unset($terms[$i + 1]);				// Adjust the loop.				$i += 1;				continue;			}			// Handle the NOT operator.			elseif (isset($terms[$i + 1]) && array_search($terms[$i], $operators) === 'NOT')			{				// Skip the next token (the mode operator).				$this->operators[] = $terms[$i];				// Tokenize the next term (current plus one).				$other = FinderIndexerHelper::tokenize($terms[$i + 1], $lang, true);				$other = $this->getTokenData($other);				// Set the required flag.				$other->required = false;				// Add the next token to the stack.				if (count($other->matches))				{					$this->excluded[] = $other;				}				else				{					$this->ignored[] = $other;				}				// Remove the processed phrase if possible.				if (($pk = array_search($terms[$i + 1], $phrases)) !== false)				{					unset($phrases[$pk]);				}				// Remove the processed terms.				unset($terms[$i]);				unset($terms[$i + 1]);				// Adjust the loop.				$i += 1;				continue;			}		}		/*		 * Iterate through any search phrases and tokenize them. We handle		 * phrases as autonomous units and do not break them down into two and		 * three word combinations.		 */		for ($i = 0, $c = count($phrases); $i < $c; $i++)		{			// Tokenize the phrase.			$token = FinderIndexerHelper::tokenize($phrases[$i], $lang, true);			$token = $this->getTokenData($token);			// Set the required flag.			$token->required = true;			// Add the current token to the stack.			$this->included[] = $token;			$this->highlight = array_merge($this->highlight, array_keys($token->matches));			// Remove the processed term if possible.			if (($pk = array_search($phrases[$i], $terms)) !== false)			{				unset($terms[$pk]);			}			// Remove the processed phrase.			unset($phrases[$i]);		}		/*		 * Handle any remaining tokens using the standard processing mechanism.		 */		if (!empty($terms))		{			// Tokenize the terms.			$terms = implode(' ', $terms);			$tokens = FinderIndexerHelper::tokenize($terms, $lang, false);			// Make sure we are working with an array.			$tokens = is_array($tokens) ? $tokens : array($tokens);			// Get the token data and required state for all the tokens.			foreach ($tokens as $token)			{				// Get the token data.				$token = $this->getTokenData($token);				// Set the required flag for the token.				$token->required = $mode === 'AND' ? ($token->phrase ? false : true) : false;				// Add the token to the appropriate stack.				if (count($token->matches) || $token->required)				{					$this->included[] = $token;					$this->highlight = array_merge($this->highlight, array_keys($token->matches));				}				else				{					$this->ignored[] = $token;				}			}		}		return true;	}	/**	 * Method to get the base and similar term ids and, if necessary, suggested	 * term data from the database. The terms ids are identified based on a	 * 'like' match in MySQL and/or a common stem. If no term ids could be	 * found, then we know that we will not be able to return any results for	 * that term and we should try to find a similar term to use that we can	 * match so that we can suggest the alternative search query to the user.	 *	 * @param   FinderIndexerToken  $token  A FinderIndexerToken object.	 *	 * @return  FinderIndexerToken  A FinderIndexerToken object.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getTokenData($token)	{		// Get the database object.		$db = JFactory::getDbo();		// Create a database query to build match the token.		$query = $db->getQuery(true)			->select('t.term, t.term_id')			->from('#__finder_terms AS t');		/*		 * If the token is a phrase, the lookup process is fairly simple. If		 * the token is a word, it is a little more complicated. We have to		 * create two queries to lookup the term and the stem respectively,		 * then union the result sets together. This is MUCH faster than using		 * an or condition in the database query.		 */		if ($token->phrase)		{			// Add the phrase to the query.			$query->where('t.term = ' . $db->quote($token->term))				->where('t.phrase = 1');		}		else		{			// Add the term to the query.			$query->where('t.term = ' . $db->quote($token->term))				->where('t.phrase = 0');			// Clone the query, replace the WHERE clause.			$sub = clone($query);			$sub->clear('where');			$sub->where('t.stem = ' . $db->quote($token->stem));			$sub->where('t.phrase = 0');			// Union the two queries.			$query->union($sub);		}		// Get the terms.		$db->setQuery($query);		$matches = $db->loadObjectList();		// Setup the container.		$token->matches = array();		// Check the matching terms.		if (!empty($matches))		{			// Add the matches to the token.			for ($i = 0, $c = count($matches); $i < $c; $i++)			{				$token->matches[$matches[$i]->term] = (int) $matches[$i]->term_id;			}		}		// If no matches were found, try to find a similar but better token.		if (empty($token->matches))		{			// Create a database query to get the similar terms.			//@TODO: PostgreSQL doesn't support SOUNDEX out of the box			$query->clear()				->select('DISTINCT t.term_id AS id, t.term AS term')				->from('#__finder_terms AS t')				// ->where('t.soundex = ' . soundex($db->quote($token->term)))				->where('t.soundex = SOUNDEX(' . $db->quote($token->term) . ')')				->where('t.phrase = ' . (int) $token->phrase);			// Get the terms.			$db->setQuery($query);			$results = $db->loadObjectList();			// Check if any similar terms were found.			if (empty($results))			{				return $token;			}			// Stack for sorting the similar terms.			$suggestions = array();			// Get the levnshtein distance for all suggested terms.			foreach ($results as $sk => $st)			{				// Get the levenshtein distance between terms.				$distance = levenshtein($st->term, $token->term);				// Make sure the levenshtein distance isn't over 50.				if ($distance < 50)				{					$suggestions[$sk] = $distance;				}			}			// Sort the suggestions.			asort($suggestions, SORT_NUMERIC);			// Get the closest match.			$keys = array_keys($suggestions);			$key = $keys[0];			// Add the suggested term.			$token->suggestion = $results[$key]->term;		}		return $token;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_category * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="category-module<?php echo $moduleclass_sfx; ?>"><?php if ($grouped) : ?>	<?php foreach ($list as $group_name => $group) : ?>	<li>		<h<?php echo $item_heading; ?>><?php echo $group_name; ?></h<?php echo $item_heading; ?>>		<ul>			<?php foreach ($group as $item) : ?>				<li>					<h<?php echo $item_heading + 1; ?>>					   	<?php if ($params->get('link_titles') == 1) : ?>						<a class="mod-articles-category-title <?php echo $item->active; ?>" href="<?php echo $item->link; ?>">						<?php echo $item->title; ?>				        <?php if ($item->displayHits) :?>							<span class="mod-articles-category-hits">				            (<?php echo $item->displayHits; ?>)  </span>				        <?php endif; ?></a>				        <?php else :?>				        <?php echo $item->title; ?>				        	<?php if ($item->displayHits) :?>							<span class="mod-articles-category-hits">				            (<?php echo $item->displayHits; ?>)  </span>				        <?php endif; ?></a>				            <?php endif; ?>			        </h<?php echo $item_heading + 1; ?>>				<?php if ($params->get('show_author')) :?>					<span class="mod-articles-category-writtenby">					<?php echo $item->displayAuthorName; ?>					</span>				<?php endif;?>				<?php if ($item->displayCategoryTitle) :?>					<span class="mod-articles-category-category">					(<?php echo $item->displayCategoryTitle; ?>)					</span>				<?php endif; ?>				<?php if ($item->displayDate) : ?>					<span class="mod-articles-category-date"><?php echo $item->displayDate; ?></span>				<?php endif; ?>				<?php if ($params->get('show_introtext')) :?>			<p class="mod-articles-category-introtext">			<?php echo $item->displayIntrotext; ?>			</p>		<?php endif; ?>		<?php if ($params->get('show_readmore')) :?>			<p class="mod-articles-category-readmore">				<a class="mod-articles-category-title <?php echo $item->active; ?>" href="<?php echo $item->link; ?>">				<?php if ($item->params->get('access-view') == false) :						echo JText::_('MOD_ARTICLES_CATEGORY_REGISTER_TO_READ_MORE');					elseif ($readmore = $item->alternative_readmore) :						echo $readmore;						echo JHtml::_('string.truncate', $item->title, $params->get('readmore_limit'));						if ($params->get('show_readmore_title', 0) != 0) :							echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));						endif;					elseif ($params->get('show_readmore_title', 0) == 0) :						echo JText::sprintf('MOD_ARTICLES_CATEGORY_READ_MORE_TITLE');					else :						echo JText::_('MOD_ARTICLES_CATEGORY_READ_MORE');						echo JHtml::_('string.truncate', ($item->title), $params->get('readmore_limit'));					endif; ?>	        </a>			</p>			<?php endif; ?>		</li>			<?php endforeach; ?>		</ul>	</li>	<?php endforeach; ?><?php else : ?>	<?php foreach ($list as $item) : ?>	    <li>	   	<h<?php echo $item_heading; ?>>	   	<?php if ($params->get('link_titles') == 1) : ?>		<a class="mod-articles-category-title <?php echo $item->active; ?>" href="<?php echo $item->link; ?>">		<?php echo $item->title; ?>        <?php if ($item->displayHits) :?>			<span class="mod-articles-category-hits">            (<?php echo $item->displayHits; ?>)  </span>        <?php endif; ?></a>        <?php else :?>        <?php echo $item->title; ?>        	<?php if ($item->displayHits) :?>			<span class="mod-articles-category-hits">            (<?php echo $item->displayHits; ?>)  </span>        <?php endif; ?></a>            <?php endif; ?>        </h<?php echo $item_heading; ?>>       	<?php if ($params->get('show_author')) :?>       		<span class="mod-articles-category-writtenby">			<?php echo $item->displayAuthorName; ?>			</span>		<?php endif;?>		<?php if ($item->displayCategoryTitle) :?>			<span class="mod-articles-category-category">			(<?php echo $item->displayCategoryTitle; ?>)			</span>		<?php endif; ?>        <?php if ($item->displayDate) : ?>			<span class="mod-articles-category-date"><?php echo $item->displayDate; ?></span>		<?php endif; ?>		<?php if ($params->get('show_introtext')) :?>			<p class="mod-articles-category-introtext">			<?php echo $item->displayIntrotext; ?>			</p>		<?php endif; ?>		<?php if ($params->get('show_readmore')) :?>			<p class="mod-articles-category-readmore">				<a class="mod-articles-category-title <?php echo $item->active; ?>" href="<?php echo $item->link; ?>">		        <?php if ($item->params->get('access-view') == false) :						echo JText::_('MOD_ARTICLES_CATEGORY_REGISTER_TO_READ_MORE');					elseif ($readmore = $item->alternative_readmore) :						echo $readmore;						echo JHtml::_('string.truncate', $item->title, $params->get('readmore_limit'));					elseif ($params->get('show_readmore_title', 0) == 0) :						echo JText::sprintf('MOD_ARTICLES_CATEGORY_READ_MORE_TITLE');					else :						echo JText::_('MOD_ARTICLES_CATEGORY_READ_MORE');						echo JHtml::_('string.truncate', $item->title, $params->get('readmore_limit'));					endif; ?>	        </a>			</p>		<?php endif; ?>	</li>	<?php endforeach; ?><?php endif; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_MAIL_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('mail') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @return  array  A named array * @return  array */function BannersBuildRoute(&$query){	$segments = array();	if (isset($query['task']))	{		$segments[] = $query['task'];		unset($query['task']);	}	if (isset($query['id']))	{		$segments[] = $query['id'];		unset($query['id']);	}	return $segments;}/** * @return  array  A named array * @param   array * * Formats: * * index.php?/banners/task/id/Itemid * * index.php?/banners/id/Itemid */function BannersParseRoute($segments){	$vars = array();	// view is always the first element of the array	$count = count($segments);	if ($count)	{		$count--;		$segment = array_shift($segments);		if (is_numeric($segment))		{			$vars['id'] = $segment;		}		else		{			$vars['task'] = $segment;		}	}	if ($count)	{		$count--;		$segment = array_shift($segments);		if (is_numeric($segment))		{			$vars['id'] = $segment;		}	}	return $vars;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugins component helper. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsHelper{	public static $extension = 'com_plugins';	/**	 * Configure the Linkbar.	 *	 * @param   string    The name of the active view.	 */	public static function addSubmenu($vName)	{		// No submenu for this component.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user = JFactory::getUser();		$result = new JObject;		$assetName = 'com_plugins';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string    The HTML code for the select tag	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options = array();		$options[] = JHtml::_('select.option', '1', 'JENABLED');		$options[] = JHtml::_('select.option', '0', 'JDISABLED');		return $options;	}	/**	 * Returns an array of standard published state filter options.	 *	 * @return  string    The HTML code for the select tag	 */	public static function folderOptions()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT(folder) AS value, folder AS text')			->from('#__extensions')			->where($db->quoteName('type') . ' = ' . $db->quote('plugin'))			->order('folder');		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		return $options;	}	public function parseXMLTemplateFile($templateBaseDir, $templateDir)	{		$data = new JObject;		// Check of the xml file exists		$filePath = JPath::clean($templateBaseDir . '/templates/' . $templateDir . '/templateDetails.xml');		if (is_file($filePath))		{			$xml = JInstaller::parseXMLInstallFile($filePath);			if ($xml['type'] != 'template')			{				return false;			}			foreach ($xml as $key => $value)			{				$data->set($key, $value);			}		}		return $data;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JFormRule for com_contact to make sure the message body contains no banned word. * * @package     Joomla.Site * @subpackage  com_contact */class JFormRuleContactEmailMessage extends JFormRule{	/**	 * Method to test for a valid color in hexadecimal.	 *	 * @param   SimpleXMLElement  &$element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value     The form field value to validate.	 * @param   string            $group     The field name group control value. This acts as as an array container for the field.	 *                                       For example if the field has name="foo" and the group value is set to "bar" then the	 *                                       full field name would end up being "bar[foo]".	 * @param   object            &$input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   object            &$form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 */	public function test(&$element, $value, $group = null, &$input = null, &$form = null)	{		$params = JComponentHelper::getParams('com_contact');		$banned = $params->get('banned_text');		foreach (explode(';', $banned) as $item) {			if (JString::stristr($item, $value) !== false)					return false;		}		return true;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.remember * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! System Remember Me Plugin * * @package     Joomla.Plugin * @subpackage  System.remember * @since       1.5 */class PlgSystemRemember extends JPlugin{	public function onAfterInitialise()	{		$app = JFactory::getApplication();		// No remember me for admin		if ($app->isAdmin())		{			return;		}		$user = JFactory::getUser();		if ($user->get('guest'))		{			$hash = JApplication::getHash('JLOGIN_REMEMBER');			if ($str = JRequest::getString($hash, '', 'cookie', JREQUEST_ALLOWRAW | JREQUEST_NOTRIM))			{				$credentials = array();				$goodCookie = true;				$filter = JFilterInput::getInstance();				// Create the encryption key, apply extra hardening using the user agent string.				// Since we're decoding, no UA validity check is required.				$privateKey = JApplication::getHash(@$_SERVER['HTTP_USER_AGENT']);				$key = new JCryptKey('simple', $privateKey, $privateKey);				$crypt = new JCrypt(new JCryptCipherSimple, $key);				try				{					$str = $crypt->decrypt($str);					if (!is_string($str))					{						throw new Exception('Decoded cookie is not a string.');					}					$cookieData = json_decode($str);					if (null === $cookieData)					{						throw new Exception('JSON could not be docoded.');					}					if (!is_object($cookieData))					{						throw new Exception('Decoded JSON is not an object.');					}					// json_decoded cookie could be any object structure, so make sure the					// credentials are well structured and only have user and password.					if (isset($cookieData->username) && is_string($cookieData->username))					{						$credentials['username'] = $filter->clean($cookieData->username, 'username');					}					else					{						throw new Exception('Malformed username.');					}					if (isset($cookieData->password) && is_string($cookieData->password))					{						$credentials['password'] = $filter->clean($cookieData->password, 'string');					}					else					{						throw new Exception('Malformed password.');					}					$return = $app->login($credentials, array('silent' => true));					if (!$return)					{						throw new Exception('Log-in failed.');					}				}				catch (Exception $e)				{					$config = JFactory::getConfig();					$cookie_domain = $config->get('cookie_domain', '');					$cookie_path = $config->get('cookie_path', '/');					// Clear the remember me cookie					setcookie(						JApplication::getHash('JLOGIN_REMEMBER'), false, time() - 86400,						$cookie_path, $cookie_domain					);					JLog::add('A remember me cookie was unset for the following reason: ' . $e->getMessage(), JLog::WARNING, 'security');				}			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerUser extends JControllerForm{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_USERS_USER';	/**	 * Overrides JControllerForm::allowEdit	 *	 * Checks that non-Super Admins are not editing Super Admins.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean  True if allowed, false otherwise.	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		// Check if this person is a Super Admin		if (JAccess::check($data[$key], 'core.admin'))		{			// If I'm not a Super Admin, then disallow the edit.			if (!JFactory::getUser()->authorise('core.admin'))			{				return false;			}		}		return parent::allowEdit($data, $key);	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean  True on success, false on failure	 *	 * @since   2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('User', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_users&view=users' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Overrides parent save method to check the submitted passwords match.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   1.6	 */	public function save($key = null, $urlVar = null)	{		$data = $this->input->post->get('jform', array(), 'array');		// TODO: JForm should really have a validation handler for this.		if (isset($data['password']) && isset($data['password2']))		{			// Check the passwords match.			if ($data['password'] != $data['password2'])			{				$this->setMessage(JText::_('JLIB_USER_ERROR_PASSWORD_NOT_MATCH'), 'warning');				$this->setRedirect(JRoute::_('index.php?option=com_users&view=user&layout=edit', false));			}			unset($data['password2']);		}		return parent::save();	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_contact')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller = JControllerLegacy::getInstance('contact');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving a list of tags. * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsModelTags extends JModelList{	/**	 * Model context string.	 *	 * @var    string	 * @since  3.1	 */	public $_context = 'com_tags.tags';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pid = $app->input->getInt('parent_id');		$this->setState('tag.parent_id', $pid);		$language = $app->input->getString('tag_list_language_filter');		$this->setState('tag.language', $language);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.offset', $offset);		$app = JFactory::getApplication();		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('list.limit', $params->get('maximum', 200));		$this->setState('filter.published', 1);		$this->setState('filter.access', true);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_tags')) &&  (!$user->authorise('core.edit', 'com_tags')))		{			$this->setState('filter.published', 1);		}		// Optional filter text		$itemid = $pid . ':' . $app->input->getInt('Itemid', 0);		$filterSearch = $app->getUserStateFromRequest('com_tags.tags.list.' . $itemid . '.filter_search', 'filter-search', '', 'string');		$this->setState('list.filter', $filterSearch);	}	/**	 * Redefine the function and add some properties to make the styling more easy	 *	 * @return  mixed  An array of data items on success, false on failure.	 *	 * @since   3.1	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		if (!count($items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string  An SQL query	 *	 * @since   1.6	 */	protected function getListQuery()	{		$app = JFactory::getApplication('site');		$user	= JFactory::getUser();		$groups	= implode(',', $user->getAuthorisedViewLevels());		$pid = $this->getState('tag.parent_id');		$orderby = $this->state->params->get('all_tags_orderby', 'title');		$orderDirection = $this->state->params->get('all_tags_orderby_direction', 'ASC');		$language = $this->getState('tag.language');		// Create a new query object.		$db		= $this->getDbo();		$query	= $db->getQuery(true);		// Select required fields from the tags.		$query->select('a.*')			->from($db->quoteName('#__tags') . ' AS a')			->where($db->quoteName('a.access') . ' IN (' . $groups . ')');		if (!empty($pid))		{			$query->where($db->quoteName('a.parent_id') . ' = ' . $pid);		}		// Exclude the root.		$query->where($db->quoteName('a.parent_id') . ' <> 0');		// Optionally filter on language		if (empty($language))		{			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');		}		if ($language != 'all')		{			if ($language == 'current_language')			{				$language = JHelperContent::getCurrentLanguage();			}			$query->where($db->quoteName('language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');		}		// List state information		$format = $app->input->getWord('format');		if ($format == 'feed')		{			$limit = $app->getCfg('feed_limit');		}		else		{			if ($this->state->params->get('show_pagination_limit'))			{				$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');			}			else			{				$limit = $this->state->params->get('maximum', 20);			}		}		$this->setState('list.limit', $limit);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $offset);		// Optionally filter on entered value		if ($this->state->get('list.filter'))		{			$query->where($this->_db->quoteName('a.title') . ' LIKE ' . $this->_db->quote('%' . $this->state->get('list.filter') . '%'));		}		$query->order($db->quoteName($orderby) . ' ' . $orderDirection . ', a.title ASC');		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_newsfeeds')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Newsfeeds');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Template installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterTemplate extends JAdapterInstance{	/**	 * Copy of the XML manifest file	 *	 * @var    string	 * @since  3.1	 */	protected $manifest = null;	/**	 * Name of the extension	 *	 * @var    string	 * @since  3.1	 * */	protected $name = null;	/**	 * The unique identifier for the extension (e.g. mod_login)	 *	 * @var    string	 * @since  3.1	 * */	protected $element = null;	/**	 * Method of system	 *	 * @var    string	 *	 * @since  3.1	 */	protected $route = 'install';	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path where to find language files.	 *	 * @return  JInstallerTemplate	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent				->setPath(				'source',				($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/templates/' . $this->parent->extension->element			);		}		$this->manifest = $this->parent->getManifest();		$name = strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		$client = (string) $this->manifest->attributes()->client;		// Load administrator language if not set.		if (!$client)		{			$client = 'ADMINISTRATOR';		}		$extension = "tpl_$name";		$lang = JFactory::getLanguage();		$source = $path ? $path : ($this->parent->extension->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE) . '/templates/' . $name;		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', constant('JPATH_' . strtoupper($client)), null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', constant('JPATH_' . strtoupper($client)), $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get a database connector object		$db = $this->parent->getDbo();		$lang = JFactory::getLanguage();		$xml = $this->parent->getManifest();		// Get the client application target		if ($cname = (string) $xml->attributes()->client)		{			// Attempt to map the client to a base path			$client = JApplicationHelper::getClientInfo($cname, true);			if ($client === false)			{				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_UNKNOWN_CLIENT', $cname));				return false;			}			$basePath = $client->path;			$clientId = $client->id;		}		else		{			// No client attribute was found so we assume the site as the client			$cname = 'site';			$basePath = JPATH_SITE;			$clientId = 0;		}		// Set the extension's name		$name = JFilterInput::getInstance()->clean((string) $xml->name, 'cmd');		$element = strtolower(str_replace(" ", "_", $name));		$this->set('name', $name);		$this->set('element', $element);		// Check to see if a template by the same name is already installed.		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('template'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		try		{			$id = $db->loadResult();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_ROLLBACK'), $e->getMessage());			return false;		}		// Set the template root path		$this->parent->setPath('extension_root', $basePath . '/templates/' . $element);		// If it's on the fs...		if (file_exists($this->parent->getPath('extension_root')) && (!$this->parent->isOverwrite() || $this->parent->isUpgrade()))		{			$updateElement = $xml->update;			// Upgrade manually set or update tag detected			if ($this->parent->isUpgrade() || $updateElement)			{				// Force this one				$this->parent->setOverwrite(true);				$this->parent->setUpgrade(true);				if ($id)				{					// If there is a matching extension mark this as an update; semantics really					$this->route = 'update';				}			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is not set				// If we didn't have overwrite set, find an update function or find an update tag so let's call it safe				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_TPL_INSTALL_ANOTHER_TEMPLATE_USING_DIRECTORY', JText::_('JLIB_INSTALLER_' . $this->route),						$this->parent->getPath('extension_root')					)				);				return false;			}		}		/*		 * If the template directory already exists, then we will assume that the template is already		 * installed or another template is using that directory.		 */		if (file_exists($this->parent->getPath('extension_root')) && !$this->parent->isOverwrite())		{			JLog::add(				JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_ANOTHER_TEMPLATE_USING_DIRECTORY', $this->parent->getPath('extension_root')),				JLog::WARNING, 'jerror'			);			return false;		}		// If the template directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_root')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_root')))			{				$this->parent					->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_FAILED_CREATE_DIRECTORY', $this->parent->getPath('extension_root')));				return false;			}		}		// If we created the template directory and will want to remove it if we have to roll back		// the installation, let's add it to the installation step stack		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_root')));		}		// Copy all the necessary files		if ($this->parent->parseFiles($xml->files, -1) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		if ($this->parent->parseFiles($xml->images, -1) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		if ($this->parent->parseFiles($xml->css, -1) === false)		{			// Install failed, rollback changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseMedia($xml->media);		$this->parent->parseLanguages($xml->languages, $clientId);		// Get the template description		$this->parent->set('message', JText::_((string) $xml->description));		// Lastly, we will copy the manifest file to its appropriate place.		if (!$this->parent->copyManifest(-1))		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_TPL_INSTALL_COPY_SETUP'));			return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Extension Registration		 * ---------------------------------------------------------------------------------------------		 */		$row = JTable::getInstance('extension');		if ($this->route == 'update' && $id)		{			$row->load($id);		}		else		{			$row->type = 'template';			$row->element = $this->get('element');			// There is no folder for templates			$row->folder = '';			$row->enabled = 1;			$row->protected = 0;			$row->access = 1;			$row->client_id = $clientId;			$row->params = $this->parent->getParams();			// Custom data			$row->custom_data = '';		}		// Name might change in an update		$row->name = $this->get('name');		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_TPL_INSTALL_ROLLBACK', $db->stderr(true)));			return false;		}		if ($this->route == 'install')		{			$debug = $lang->setDebug(false);			$columns = array($db->quoteName('template'),				$db->quoteName('client_id'),				$db->quoteName('home'),				$db->quoteName('title'),				$db->quoteName('params')			);			$values = array(				$db->quote($row->element), $clientId, $db->quote(0),				$db->quote(JText::sprintf('JLIB_INSTALLER_DEFAULT_STYLE', JText::_($this->get('name')))),				$db->quote($row->params) );			$lang->setDebug($debug);			// Insert record in #__template_styles			$query = $db->getQuery(true)				->insert($db->quoteName('#__template_styles'))				->columns($columns)				->values(implode(',', $values));			$db->setQuery($query);			// There is a chance this could fail but we don't care...			$db->execute();		}		return $row->get('extension_id');	}	/**	 * Custom update method for components	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		$this->route = 'update';		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   integer  $id  The extension ID	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$retval = true;		// First order of business will be to load the template object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id) || !strlen($row->element))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the template we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_WARNCORETEMPLATE', $row->name), JLog::WARNING, 'jerror');			return false;		}		$name = $row->element;		$clientId = $row->client_id;		// For a template the id will be the template name which represents the subfolder of the templates folder that the template resides in.		if (!$name)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_TEMPLATE_ID_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		// Deny remove default template		$db = $this->parent->getDbo();		$query = "SELECT COUNT(*) FROM #__template_styles WHERE home = '1' AND template = " . $db->quote($name);		$db->setQuery($query);		if ($db->loadResult() != 0)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_TEMPLATE_DEFAULT'), JLog::WARNING, 'jerror');			return false;		}		// Get the template root path		$client = JApplicationHelper::getClientInfo($clientId);		if (!$client)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_INVALID_CLIENT'), JLog::WARNING, 'jerror');			return false;		}		$this->parent->setPath('extension_root', $client->path . '/templates/' . strtolower($name));		$this->parent->setPath('source', $this->parent->getPath('extension_root'));		// We do findManifest to avoid problem when uninstalling a list of extensions: getManifest cache its manifest file		$this->parent->findManifest();		$manifest = $this->parent->getManifest();		if (!($manifest instanceof SimpleXMLElement))		{			// Kill the extension entry			$row->delete($row->extension_id);			unset($row);			// Make sure we delete the folders			JFolder::delete($this->parent->getPath('extension_root'));			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_INVALID_NOTFOUND_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// Remove files		$this->parent->removeFiles($manifest->media);		$this->parent->removeFiles($manifest->languages, $clientId);		// Delete the template directory		if (JFolder::exists($this->parent->getPath('extension_root')))		{			$retval = JFolder::delete($this->parent->getPath('extension_root'));		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_UNINSTALL_TEMPLATE_DIRECTORY'), JLog::WARNING, 'jerror');			$retval = false;		}		// Set menu that assigned to the template back to default template		$query = 'UPDATE #__menu'			. ' SET template_style_id = 0'			. ' WHERE template_style_id in ('			. '	SELECT s.id FROM #__template_styles s'			. ' WHERE s.template = ' . $db->quote(strtolower($name)) . ' AND s.client_id = ' . $clientId . ')';		$db->setQuery($query);		$db->execute();		$query = 'DELETE FROM #__template_styles WHERE template = ' . $db->quote($name) . ' AND client_id = ' . $clientId;		$db->setQuery($query);		$db->execute();		$row->delete($row->extension_id);		unset($row);		return $retval;	}	/**	 * Discover existing but uninstalled templates	 *	 * @return  array  JExtensionTable list	 */	public function discover()	{		$results = array();		$site_list = JFolder::folders(JPATH_SITE . '/templates');		$admin_list = JFolder::folders(JPATH_ADMINISTRATOR . '/templates');		$site_info = JApplicationHelper::getClientInfo('site', true);		$admin_info = JApplicationHelper::getClientInfo('administrator', true);		foreach ($site_list as $template)		{			if ($template == 'system')			{				// Ignore special system template				continue;			}			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_SITE . "/templates/$template/templateDetails.xml");			$extension = JTable::getInstance('extension');			$extension->set('type', 'template');			$extension->set('client_id', $site_info->id);			$extension->set('element', $template);			$extension->set('folder', '');			$extension->set('name', $template);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = $extension;		}		foreach ($admin_list as $template)		{			if ($template == 'system')			{				// Ignore special system template				continue;			}			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_ADMINISTRATOR . "/templates/$template/templateDetails.xml");			$extension = JTable::getInstance('extension');			$extension->set('type', 'template');			$extension->set('client_id', $admin_info->id);			$extension->set('element', $template);			$extension->set('folder', '');			$extension->set('name', $template);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = $extension;		}		return $results;	}	/**	 * Discover_install	 * Perform an install for a discovered extension	 *	 * @return boolean	 *	 * @since 3.1	 */	public function discover_install()	{		// Templates are one of the easiest		// If its not in the extensions table we just add it		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/templates/' . $this->parent->extension->element . '/templateDetails.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$description = (string) $this->parent->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		$data = new JObject;		foreach ($manifest_details as $key => $value)		{			$data->set($key, $value);		}		$this->parent->extension->params = $this->parent->getParams();		if ($this->parent->extension->store())		{			$db = $this->parent->getDbo();			// Insert record in #__template_styles			$lang = JFactory::getLanguage();			$debug = $lang->setDebug(false);			$columns = array($db->quoteName('template'),				$db->quoteName('client_id'),				$db->quoteName('home'),				$db->quoteName('title'),				$db->quoteName('params')			);			$query = $db->getQuery(true)				->insert($db->quoteName('#__template_styles'))				->columns($columns)				->values(					$db->quote($this->parent->extension->element)						. ',' . $db->quote($this->parent->extension->client_id)						. ',' . $db->quote(0)						. ',' . $db->quote(JText::sprintf('JLIB_INSTALLER_DEFAULT_STYLE', $this->parent->extension->name))						. ',' . $db->quote($this->parent->extension->params)				);			$lang->setDebug($debug);			$db->setQuery($query);			$db->execute();			return $this->parent->extension->get('extension_id');		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally.		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/templates/' . $this->parent->extension->element . '/templateDetails.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_TPL_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterTemplate instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerTemplate extends JInstallerAdapterTemplate{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die();JFormHelper::loadFieldClass('list');/** * Search Filter field for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class JFormFieldSearchFilter extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  2.5	 */	protected $type = 'SearchFilter';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   2.5	 */	public function getOptions()	{		$options = array();		// Build the query.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('f.title AS text, f.filter_id AS value')			->from($db->quoteName('#__finder_filters') . ' AS f')			->where('f.state = 1')			->order('f.title ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		array_unshift($options, JHtml::_('select.option', '', JText::_('COM_FINDER_SELECT_SEARCH_FILTER'), 'value', 'text'));		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_checkin');?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<div id="filter-bar" class="btn-toolbar">  		<div class="filter-search btn-group pull-left">  			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CHECKIN_FILTER_SEARCH_DESC'); ?>" />  		</div>  		<div class="btn-group pull-left">  			<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>  			<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>  		</div>  	</div>  	<div class="clearfix"> </div>  	<table id="global-checkin" class="table table-striped">  		<thead>  			<tr>  				<th width="1%">  					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />  				</th>  				<th class="left"><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_DATABASE_TABLE', 'table', $listDirn, $listOrder); ?></th>  				<th><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_ITEMS_TO_CHECK_IN', 'count', $listDirn, $listOrder); ?></th>  			</tr>  		</thead>  		<tbody>  		<?php foreach ($this->items as $table => $count): $i = 0;?>  			<tr class="row<?php echo $i % 2; ?>">  				<td class="center"><?php echo JHtml::_('grid.id', $i, $table); ?></td>  				<td><?php echo JText::sprintf('COM_CHECKIN_TABLE', $table); ?></td>  				<td width="200" class="center"><span class="label label-info"><?php echo $count; ?></span></td>  			</tr>  		<?php endforeach;?>  		</tbody>  		<tfoot>  			<tr>  				<td colspan="15">  					<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  	</table>  	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer helper. * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 */	public static function addSubmenu($vName = 'install')	{		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_INSTALL'),			'index.php?option=com_installer',			$vName == 'install'		);		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_UPDATE'),			'index.php?option=com_installer&view=update',			$vName == 'update'		);		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_MANAGE'),			'index.php?option=com_installer&view=manage',			$vName == 'manage'		);		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_DISCOVER'),			'index.php?option=com_installer&view=discover',			$vName == 'discover'		);		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_DATABASE'),			'index.php?option=com_installer&view=database',			$vName == 'database'		);		JHtmlSidebar::addEntry(		JText::_('COM_INSTALLER_SUBMENU_WARNINGS'),					'index.php?option=com_installer&view=warnings',		$vName == 'warnings'		);		JHtmlSidebar::addEntry(			JText::_('COM_INSTALLER_SUBMENU_LANGUAGES'),			'index.php?option=com_installer&view=languages',			$vName == 'languages'		);	}	/**	 * Get a list of filter options for the extension types.	 *	 * @return  array  An array of stdClass objects.	 *	 * @since   3.0	 */	public static function getExtensionTypes()	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT type')			->from('#__extensions');		$db->setQuery($query);		$types = $db->loadColumn();		$options = array();		foreach ($types as $type)		{			$options[] = JHtml::_('select.option', $type, 'COM_INSTALLER_TYPE_' . strtoupper($type));		}		return $options;	}	/**	 * Get a list of filter options for the extension types.	 *	 * @return  array  An array of stdClass objects.	 *	 * @since   3.0	 */	public static function getExtensionGroupes()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('DISTINCT folder')			->from('#__extensions')			->where('folder != ' . $db->quote(''))			->order('folder');		$db->setQuery($query);		$folders = $db->loadColumn();		$options = array();		foreach ($folders as $folder)		{			$options[] = JHtml::_('select.option', $folder, $folder);		}		return $options;	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   1.6	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_installer';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of available database connections, optionally limiting to * a given list. * * @package     Joomla.Platform * @subpackage  Form * @see         JDatabaseDriver * @since       11.3 */class JFormFieldDatabaseConnection extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.3	 */	public $type = 'DatabaseConnection';	/**	 * Method to get the list of database options.	 *	 * This method produces a drop down list of available databases supported	 * by JDatabaseDriver classes that are also supported by the application.	 *	 * @return  array    The field option objects.	 *	 * @since   11.3	 * @see		JDatabaseDriver	 */	protected function getOptions()	{		// This gets the connectors available in the platform and supported by the server.		$available = JDatabaseDriver::getConnectors();		/**		 * This gets the list of database types supported by the application.		 * This should be entered in the form definition as a comma separated list.		 * If no supported databases are listed, it is assumed all available databases		 * are supported.		 */		$supported = $this->element['supported'];		if (!empty($supported))		{			$supported = explode(',', $supported);			foreach ($supported as $support)			{				if (in_array($support, $available))				{					$options[$support] = JText::_(ucfirst($support));				}			}		}		else		{			foreach ($available as $support)			{				$options[$support] = JText::_(ucfirst($support));			}		}		// This will come into play if an application is installed that requires		// a database that is not available on the server.		if (empty($options))		{			$options[''] = JText::_('JNONE');		}		return $options;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Base class for rendering a display layout * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.0 */class JLayoutBase implements JLayout{	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @since   3.0	 */	public function escape($output)	{		return htmlspecialchars($output, ENT_COMPAT, 'UTF-8');	}	/**	 * Method to render the layout.	 *	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 *	 * @return  string  The necessary HTML to display the layout	 *	 * @since   3.0	 */	public function render($displayData)	{		return '';	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Article Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelArticle extends JModelItem{	/**	 * Model context string.	 *	 * @var        string	 */	protected $_context = 'com_content.article';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pk = $app->input->getInt('id');		$this->setState('article.id', $pk);		$offset = $app->input->getUInt('limitstart');		$this->setState('list.offset', $offset);		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		// TODO: Tune these values based on other permissions.		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_content')) && (!$user->authorise('core.edit', 'com_content')))		{			$this->setState('filter.published', 1);			$this->setState('filter.archived', 2);		}		$this->setState('filter.language', JLanguageMultilang::isEnabled());	}	/**	 * Method to get article data.	 *	 * @param   integer    The id of the article.	 *	 * @return  mixed  Menu item data object on success, false on failure.	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('article.id');		if ($this->_item === null)		{			$this->_item = array();		}		if (!isset($this->_item[$pk]))		{			try			{				$db = $this->getDbo();				$query = $db->getQuery(true)					->select(						$this->getState(							'item.select', 'a.id, a.asset_id, a.title, a.alias, a.introtext, a.fulltext, ' .							// If badcats is not null, this means that the article is inside an unpublished category							// In this case, the state is set to 0 to indicate Unpublished (even if the article state is Published)							'CASE WHEN badcats.id is null THEN a.state ELSE 0 END AS state, ' .							'a.catid, a.created, a.created_by, a.created_by_alias, ' .							// use created if modified is 0							'CASE WHEN a.modified = ' . $db->quote($db->getNullDate()) . ' THEN a.created ELSE a.modified END as modified, ' .							'a.modified_by, a.checked_out, a.checked_out_time, a.publish_up, a.publish_down, ' .							'a.images, a.urls, a.attribs, a.version, a.ordering, ' .							'a.metakey, a.metadesc, a.access, a.hits, a.metadata, a.featured, a.language, a.xreference'						)					);				$query->from('#__content AS a');				// Join on category table.				$query->select('c.title AS category_title, c.alias AS category_alias, c.access AS category_access')					->join('LEFT', '#__categories AS c on c.id = a.catid');				// Join on user table.				$query->select('u.name AS author')					->join('LEFT', '#__users AS u on u.id = a.created_by');				// Join on contact table				$subQuery = $db->getQuery(true)					->select('contact.user_id, MAX(contact.id) AS id, contact.language')					->from('#__contact_details AS contact')					->where('contact.published = 1')					->group('contact.user_id, contact.language');				$query->select('contact.id as contactid')					->join('LEFT', '(' . $subQuery . ') AS contact ON contact.user_id = a.created_by');				// Filter by language				if ($this->getState('filter.language'))				{					$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')')						->where('(contact.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ') OR contact.language IS NULL)');				}				// Join over the categories to get parent category titles				$query->select('parent.title as parent_title, parent.id as parent_id, parent.path as parent_route, parent.alias as parent_alias')					->join('LEFT', '#__categories as parent ON parent.id = c.parent_id');				// Join on voting table				$query->select('ROUND(v.rating_sum / v.rating_count, 0) AS rating, v.rating_count as rating_count')					->join('LEFT', '#__content_rating AS v ON a.id = v.content_id')					->where('a.id = ' . (int) $pk);				// Filter by start and end dates.				$nullDate = $db->quote($db->getNullDate());				$date = JFactory::getDate();				$nowDate = $db->quote($date->toSql());				$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')					->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');				// Join to check for category published state in parent categories up the tree				// If all categories are published, badcats.id will be null, and we just use the article state				$subquery = ' (SELECT cat.id as id FROM #__categories AS cat JOIN #__categories AS parent ';				$subquery .= 'ON cat.lft BETWEEN parent.lft AND parent.rgt ';				$subquery .= 'WHERE parent.extension = ' . $db->quote('com_content');				$subquery .= ' AND parent.published <= 0 GROUP BY cat.id)';				$query->join('LEFT OUTER', $subquery . ' AS badcats ON badcats.id = c.id');				// Filter by published state.				$published = $this->getState('filter.published');				$archived = $this->getState('filter.archived');				if (is_numeric($published))				{					$query->where('(a.state = ' . (int) $published . ' OR a.state =' . (int) $archived . ')');				}				$db->setQuery($query);				$data = $db->loadObject();				if (empty($data))				{					return JError::raiseError(404, JText::_('COM_CONTENT_ERROR_ARTICLE_NOT_FOUND'));				}				// Check for published state if filter set.				if (((is_numeric($published)) || (is_numeric($archived))) && (($data->state != $published) && ($data->state != $archived)))				{					return JError::raiseError(404, JText::_('COM_CONTENT_ERROR_ARTICLE_NOT_FOUND'));				}				// Convert parameter fields to objects.				$registry = new JRegistry;				$registry->loadString($data->attribs);				$data->params = clone $this->getState('params');				$data->params->merge($registry);				$registry = new JRegistry;				$registry->loadString($data->metadata);				$data->metadata = $registry;				// Compute selected asset permissions.				$user = JFactory::getUser();				// Technically guest could edit an article, but lets not check that to improve performance a little.				if (!$user->get('guest'))				{					$userId = $user->get('id');					$asset = 'com_content.article.' . $data->id;					// Check general edit permission first.					if ($user->authorise('core.edit', $asset))					{						$data->params->set('access-edit', true);					}					// Now check if edit.own is available.					elseif (!empty($userId) && $user->authorise('core.edit.own', $asset))					{						// Check for a valid user and that they are the owner.						if ($userId == $data->created_by)						{							$data->params->set('access-edit', true);						}					}				}				// Compute view access permissions.				if ($access = $this->getState('filter.access'))				{					// If the access filter has been set, we already know this user can view.					$data->params->set('access-view', true);				}				else				{					// If no access filter is set, the layout takes some responsibility for display of limited information.					$user = JFactory::getUser();					$groups = $user->getAuthorisedViewLevels();					if ($data->catid == 0 || $data->category_access === null)					{						$data->params->set('access-view', in_array($data->access, $groups));					}					else					{						$data->params->set('access-view', in_array($data->access, $groups) && in_array($data->category_access, $groups));					}				}				$this->_item[$pk] = $data;			}			catch (Exception $e)			{				if ($e->getCode() == 404)				{					// Need to go thru the error handler to allow Redirect to work.					JError::raiseError(404, $e->getMessage());				}				else				{					$this->setError($e);					$this->_item[$pk] = false;				}			}		}		return $this->_item[$pk];	}	/**	 * Increment the hit counter for the article.	 *	 * @param   integer  Optional primary key of the article to increment.	 *	 * @return  boolean  True if successful; false otherwise and internal error set.	 */	public function hit($pk = 0)	{		$input = JFactory::getApplication()->input;		$hitcount = $input->getInt('hitcount', 1);		if ($hitcount)		{			$pk = (!empty($pk)) ? $pk : (int) $this->getState('article.id');			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__content' .					' SET hits = hits + 1' .					' WHERE id = ' . (int) $pk			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}	public function storeVote($pk = 0, $rate = 0)	{		if ($rate >= 1 && $rate <= 5 && $pk > 0)		{			$userIP = $_SERVER['REMOTE_ADDR'];			$db = $this->getDbo();			$db->setQuery(				'SELECT *' .					' FROM #__content_rating' .					' WHERE content_id = ' . (int) $pk			);			$rating = $db->loadObject();			if (!$rating)			{				// There are no ratings yet, so lets insert our rating				$db->setQuery(					'INSERT INTO #__content_rating ( content_id, lastip, rating_sum, rating_count )' .						' VALUES ( ' . (int) $pk . ', ' . $db->quote($userIP) . ', ' . (int) $rate . ', 1 )'				);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage);					return false;				}			}			else			{				if ($userIP != ($rating->lastip))				{					$db->setQuery(						'UPDATE #__content_rating' .							' SET rating_count = rating_count + 1, rating_sum = rating_sum + ' . (int) $rate . ', lastip = ' . $db->quote($userIP) .							' WHERE content_id = ' . (int) $pk					);					try					{						$db->execute();					}					catch (RuntimeException $e)					{						$this->setError($e->getMessage);						return false;					}				}				else				{					return false;				}			}			return true;		}		JError::raiseWarning('SOME_ERROR_CODE', JText::sprintf('COM_CONTENT_INVALID_RATING', $rate), "JModelArticle::storeVote($rate)");		return false;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('BannersHelper', JPATH_COMPONENT.'/helpers/banners.php');/** * View to edit a client. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersViewClient extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form	= $this->get('Form');		$this->item	= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		$canDo		= BannersHelper::getActions();		JToolbarHelper::title($isNew ? JText::_('COM_BANNERS_MANAGER_CLIENT_NEW') : JText::_('COM_BANNERS_MANAGER_CLIENT_EDIT'), 'banners-clients.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit')||$canDo->get('core.create')))		{			JToolbarHelper::apply('client.apply');			JToolbarHelper::save('client.save');		}		if (!$checkedOut && $canDo->get('core.create')) {			JToolbarHelper::save2new('client.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('client.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('client.cancel');		}		else		{			JToolbarHelper::cancel('client.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_CLIENTS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.5 */class TemplatesModelSource extends JModelForm{	/**	 * Cache for the template information.	 *	 * @var        object	 */	private $_template = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		jimport('joomla.filesystem.file');		$app = JFactory::getApplication('administrator');		// Load the User state.		$id = $app->getUserState('com_templates.edit.source.id');		// Parse the template id out of the compound reference.		$temp = explode(':', base64_decode($id));		$this->setState('extension.id', (int) array_shift($temp));		$fileName = array_shift($temp);		$this->setState('filename', $fileName);		// Save the syntax for later use		$app->setUserState('editor.source.syntax', JFile::getExt($fileName));		// Load the parameters.		$params = JComponentHelper::getParams('com_templates');		$this->setState('params', $params);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Codemirror or Editor None should be enabled		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('COUNT(*)')			->from('#__extensions as a')			->where('(a.name =' . $db->quote('plg_editors_codemirror') . ' AND a.enabled = 1) OR (a.name =' . $db->quote('plg_editors_none') . ' AND a.enabled = 1)');		$db->setQuery($query);		$state = $db->loadResult();		if ((int) $state < 1)		{			$app->enqueueMessage(JText::_('COM_TEMPLATES_ERROR_EDITOR_DISABLED'), 'warning');		}		// Get the form.		$form = $this->loadForm('com_templates.source', 'source', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_templates.edit.source.data', array());		if (empty($data))		{			$data = $this->getSource();		}		$this->preprocessData('com_templates.source', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function &getSource()	{		$item = new stdClass;		if (!$this->_template)		{			$this->getTemplate();		}		if ($this->_template)		{			$fileName = $this->getState('filename');			$client = JApplicationHelper::getClientInfo($this->_template->client_id);			$filePath = JPath::clean($client->path . '/templates/' . $this->_template->element . '/' . $fileName);			if (file_exists($filePath))			{				$item->extension_id = $this->getState('extension.id');				$item->filename = $this->getState('filename');				$item->source = file_get_contents($filePath);			}			else			{				$this->setError(JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_FOUND'));			}		}		return $item;	}	/**	 * Method to get the template information.	 *	 * @return  mixed  Object if successful, false if not and internal error is set.	 * @since   1.6	 */	public function &getTemplate()	{		$pk = $this->getState('extension.id');		$db = $this->getDbo();		$result = false;		// Get the template information.		$db->setQuery(			'SELECT extension_id, client_id, element' .				' FROM #__extensions' .				' WHERE extension_id = ' . (int) $pk .				'  AND type = ' . $db->quote('template')		);		try		{			$result = $db->loadObject();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			$this->_template = false;			return false;		}		if (empty($result))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_EXTENSION_RECORD_NOT_FOUND'));			$this->_template = false;		}		else		{			$this->_template = $result;		}		return $this->_template;	}	/**	 * Method to store the source file contents.	 *	 * @param   array  The souce data to save.	 *	 * @return  boolean  True on success, false otherwise and internal error set.	 * @since   1.6	 */	public function save($data)	{		jimport('joomla.filesystem.file');		// Get the template.		$template = $this->getTemplate();		if (empty($template))		{			return false;		}		$dispatcher = JEventDispatcher::getInstance();		$fileName = $this->getState('filename');		$client = JApplicationHelper::getClientInfo($template->client_id);		$filePath = JPath::clean($client->path . '/templates/' . $template->element . '/' . $fileName);		// Include the extension plugins for the save events.		JPluginHelper::importPlugin('extension');		// Set FTP credentials, if given.		JClientHelper::setCredentialsFromRequest('ftp');		$ftp = JClientHelper::getCredentials('ftp');		// Try to make the template file writeable.		if (!$ftp['enabled'] && JPath::isOwner($filePath) && !JPath::setPermissions($filePath, '0644'))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_WRITABLE'));			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_templates.source', &$data, false));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		$return = JFile::write($filePath, $data['source']);		// Try to make the template file unwriteable.		if (!$ftp['enabled'] && JPath::isOwner($filePath) && !JPath::setPermissions($filePath, '0444'))		{			$this->setError(JText::_('COM_TEMPLATES_ERROR_SOURCE_FILE_NOT_UNWRITABLE'));			return false;		}		elseif (!$return)		{			$this->setError(JText::sprintf('COM_TEMPLATES_ERROR_FAILED_TO_SAVE_FILENAME', $fileName));			return false;		}		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_templates.source', &$table, false));		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Create some shortcuts.$params		= &$this->item->params;$n			= count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));// check for at least one editable article$isEditable = false;if (!empty($this->items)){	foreach ($this->items as $article)	{		if ($article->params->get('access-edit'))		{			$isEditable = true;			break;		}	}}?><?php if (empty($this->items)) : ?>	<?php if ($this->params->get('show_no_articles', 1)) : ?>	<p><?php echo JText::_('COM_CONTENT_NO_ARTICLES'); ?></p>	<?php endif; ?><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<?php if ($this->params->get('show_headings') || $this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?>	<table class="category table table-striped table-bordered table-hover">		<?php if ($this->params->get('show_headings')) : ?>		<thead>			<tr>				<th id="categorylist_header_title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<?php if ($date = $this->params->get('list_show_date')) : ?>					<th id="categorylist_header_date">						<?php if ($date == "created") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.created', $listDirn, $listOrder); ?>						<?php elseif ($date == "modified") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.modified', $listDirn, $listOrder); ?>						<?php elseif ($date == "published") : ?>							<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.publish_up', $listDirn, $listOrder); ?>						<?php endif; ?>					</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_author')) : ?>					<th id="categorylist_header_author">						<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'author', $listDirn, $listOrder); ?>					</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_hits')) : ?>					<th id="categorylist_header_hits">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>					</th>				<?php endif; ?>				<?php if ($isEditable) : ?>					<th id="categorylist_header_edit"><?php echo JText::_('COM_CONTENT_EDIT_ITEM'); ?></th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $article) : ?>				<?php if ($this->items[$i]->state == 0) : ?>				 <tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>				<tr class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>					<td headers="categorylist_header_title" class="list-title">						<?php if (in_array($article->access, $this->user->getAuthorisedViewLevels())) : ?>							<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid)); ?>">								<?php echo $this->escape($article->title); ?>							</a>						<?php else: ?>							<?php							echo $this->escape($article->title).' : ';							$menu		= JFactory::getApplication()->getMenu();							$active		= $menu->getActive();							$itemId		= $active->id;							$link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$itemId);							$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($article->slug));							$fullURL = new JURI($link);							$fullURL->setVar('return', base64_encode($returnURL));							?>							<a href="<?php echo $fullURL; ?>" class="register">								<?php echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE'); ?>							</a>						<?php endif; ?>						<?php if ($article->state == 0) : ?>							<span class="list-published label label-warning">								<?php echo JText::_('JUNPUBLISHED'); ?>							</span>						<?php endif; ?>					</td>					<?php if ($this->params->get('list_show_date')) : ?>						<td headers="categorylist_header_date" class="list-date small">							<?php							echo JHtml::_(								'date', $article->displayDate,								$this->escape($this->params->get('date_format', JText::_('DATE_FORMAT_LC3')))							); ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_author', 1)) : ?>						<td headers="categorylist_header_author" class="list-author">							<?php if (!empty($article->author) || !empty($article->created_by_alias)) : ?>								<?php $author = $article->author ?>								<?php $author = ($article->created_by_alias ? $article->created_by_alias : $author);?>								<?php if (!empty($article->contactid ) &&  $this->params->get('link_author') == true):?>									<?php echo JHtml::_(											'link',											JRoute::_('index.php?option=com_contact&view=contact&id='.$article->contactid),											$author									); ?>								<?php else :?>									<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>								<?php endif; ?>							<?php endif; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_hits', 1)) : ?>						<td headers="categorylist_header_hits" class="list-hits">							<span class="badge badge-info">								<?php echo JText::sprintf('JGLOBAL_HITS_COUNT', $article->hits); ?>							</span>						</td>					<?php endif; ?>					<?php if ($isEditable) : ?>						<td headers="categorylist_header_edit" class="list-edit">							<?php if ($article->params->get('access-edit')) : ?>								<?php echo JHtml::_('icon.edit', $article, $params); ?>							<?php endif; ?>						</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table><?php endif; ?><?php // Code to add a link to submit an article. ?><?php if ($this->category->getParams()->get('access-create')) : ?>	<?php echo JHtml::_('icon.create', $this->category, $this->category->params); ?><?php  endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php  endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';$lang	= JFactory::getLanguage();JHtml::_('bootstrap.tooltip');?><?php if (count($this->children[$this->category->id]) > 0) : ?>	<?php foreach ($this->children[$this->category->id] as $id => $child) : ?>		<?php		if ($this->params->get('show_empty_categories') || $child->getNumItems(true) || count($child->getChildren())) :			if (!isset($this->children[$this->category->id][$id + 1])) :				$class = ' class="last"';			endif;		?>		<div<?php echo $class; ?>>			<?php $class = ''; ?>			<?php if ($lang->isRTL()) : ?>			<h3 class="page-header item-title">				<?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>					<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>">						<?php echo $child->getNumItems(true); ?>					</span>				<?php endif; ?>				<a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>				<?php if (count($child->getChildren()) > 0) : ?>					<a href="#category-<?php echo $child->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>				<?php endif;?>			<?php else : ?>			<h3 class="page-header item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>				<?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>					<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>">						<?php echo $child->getNumItems(true); ?>					</span>				<?php endif; ?>				<?php if (count($child->getChildren()) > 0) : ?>					<a href="#category-<?php echo $child->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>				<?php endif;?>			<?php endif;?>			</h3>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>				<?php if ($child->description) : ?>					<div class="category-desc">						<?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>					</div>				<?php endif; ?>			<?php endif; ?>			<?php if (count($child->getChildren()) > 0) :?>			<div class="collapse fade" id="category-<?php echo $child->id;?>">				<?php				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				if ($this->maxLevel != 0) :					echo $this->loadTemplate('children');				endif;				$this->category = $child->getParent();				$this->maxLevel++;				?>			</div>			<?php endif; ?>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Legacy * @subpackage  Categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCategories Class. * * @package     Joomla.Legacy * @subpackage  Categories * @since       11.1 */class JCategories{	/**	 * Array to hold the object instances	 *	 * @var    array	 * @since  11.1	 */	public static $instances = array();	/**	 * Array of category nodes	 *	 * @var    mixed	 * @since  11.1	 */	protected $_nodes;	/**	 * Array of checked categories -- used to save values when _nodes are null	 *	 * @var    array	 * @since  11.1	 */	protected $_checkedCategories;	/**	 * Name of the extension the categories belong to	 *	 * @var    string	 * @since  11.1	 */	protected $_extension = null;	/**	 * Name of the linked content table to get category content count	 *	 * @var    string	 * @since  11.1	 */	protected $_table = null;	/**	 * Name of the category field	 *	 * @var    string	 * @since  11.1	 */	protected $_field = null;	/**	 * Name of the key field	 *	 * @var    string	 * @since  11.1	 */	protected $_key = null;	/**	 * Name of the items state field	 *	 * @var    string	 * @since  11.1	 */	protected $_statefield = null;	/**	 * Array of options	 *	 * @var    array	 * @since  11.1	 */	protected $_options = null;	/**	 * Class constructor	 *	 * @param   array  $options  Array of options	 *	 * @since   11.1	 */	public function __construct($options)	{		$this->_extension = $options['extension'];		$this->_table = $options['table'];		$this->_field = (isset($options['field']) && $options['field']) ? $options['field'] : 'catid';		$this->_key = (isset($options['key']) && $options['key']) ? $options['key'] : 'id';		$this->_statefield = (isset($options['statefield'])) ? $options['statefield'] : 'state';		$options['access'] = (isset($options['access'])) ? $options['access'] : 'true';		$options['published'] = (isset($options['published'])) ? $options['published'] : 1;		$this->_options = $options;		return true;	}	/**	 * Returns a reference to a JCategories object	 *	 * @param   string  $extension  Name of the categories extension	 * @param   array   $options    An array of options	 *	 * @return  JCategories         JCategories object	 *	 * @since   11.1	 */	public static function getInstance($extension, $options = array())	{		$hash = md5($extension . serialize($options));		if (isset(self::$instances[$hash]))		{			return self::$instances[$hash];		}		$parts = explode('.', $extension);		$component = 'com_' . strtolower($parts[0]);		$section = count($parts) > 1 ? $parts[1] : '';		$classname = ucfirst(substr($component, 4)) . ucfirst($section) . 'Categories';		if (!class_exists($classname))		{			$path = JPATH_SITE . '/components/' . $component . '/helpers/category.php';			if (is_file($path))			{				include_once $path;			}			else			{				return false;			}		}		self::$instances[$hash] = new $classname($options);		return self::$instances[$hash];	}	/**	 * Loads a specific category and all its children in a JCategoryNode object	 *	 * @param   mixed    $id         an optional id integer or equal to 'root'	 * @param   boolean  $forceload  True to force  the _load method to execute	 *	 * @return  mixed    JCategoryNode object or null if $id is not valid	 *	 * @since   11.1	 */	public function get($id = 'root', $forceload = false)	{		if ($id !== 'root')		{			$id = (int) $id;			if ($id == 0)			{				$id = 'root';			}		}		// If this $id has not been processed yet, execute the _load method		if ((!isset($this->_nodes[$id]) && !isset($this->_checkedCategories[$id])) || $forceload)		{			$this->_load($id);		}		// If we already have a value in _nodes for this $id, then use it.		if (isset($this->_nodes[$id]))		{			return $this->_nodes[$id];		}		// If we processed this $id already and it was not valid, then return null.		elseif (isset($this->_checkedCategories[$id]))		{			return null;		}		return false;	}	/**	 * Load method	 *	 * @param   integer  $id  Id of category to load	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _load($id)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$extension = $this->_extension;		// Record that has this $id has been checked		$this->_checkedCategories[$id] = true;		$query = $db->getQuery(true);		// Right join with c for category		$query->select('c.id, c.asset_id, c.access, c.alias, c.checked_out, c.checked_out_time,			c.created_time, c.created_user_id, c.description, c.extension, c.hits, c.language, c.level,			c.lft, c.metadata, c.metadesc, c.metakey, c.modified_time, c.note, c.params, c.parent_id,			c.path, c.published, c.rgt, c.title, c.modified_user_id, c.version');		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('c.alias', '!=', '0');		$case_when .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $c_id . ' END as slug';		$query->select($case_when)			->from('#__categories as c')			->where('(c.extension=' . $db->quote($extension) . ' OR c.extension=' . $db->quote('system') . ')');		if ($this->_options['access'])		{			$query->where('c.access IN (' . implode(',', $user->getAuthorisedViewLevels()) . ')');		}		if ($this->_options['published'] == 1)		{			$query->where('c.published = 1');		}		$query->order('c.lft');		// Note: s for selected id		if ($id != 'root')		{			// Get the selected category			$query->join('LEFT', '#__categories AS s ON (s.lft <= c.lft AND s.rgt >= c.rgt) OR (s.lft > c.lft AND s.rgt < c.rgt)')				->where('s.id=' . (int) $id);		}		$subQuery = ' (SELECT cat.id as id FROM #__categories AS cat JOIN #__categories AS parent ' .			'ON cat.lft BETWEEN parent.lft AND parent.rgt WHERE parent.extension = ' . $db->quote($extension) .			' AND parent.published != 1 GROUP BY cat.id) ';		$query->join('LEFT', $subQuery . 'AS badcats ON badcats.id = c.id')			->where('badcats.id is null');		// Note: i for item		if (isset($this->_options['countItems']) && $this->_options['countItems'] == 1)		{			if ($this->_options['published'] == 1)			{				$query->join(					'LEFT',					$db->quoteName($this->_table) . ' AS i ON i.' . $db->quoteName($this->_field) . ' = c.id AND i.' . $this->_statefield . ' = 1'				);			}			else			{				$query->join('LEFT', $db->quoteName($this->_table) . ' AS i ON i.' . $db->quoteName($this->_field) . ' = c.id');			}			$query->select('COUNT(i.' . $db->quoteName($this->_key) . ') AS numitems');		}		// Group by		$query->group(			'c.id, c.asset_id, c.access, c.alias, c.checked_out, c.checked_out_time,			 c.created_time, c.created_user_id, c.description, c.extension, c.hits, c.language, c.level,			 c.lft, c.metadata, c.metadesc, c.metakey, c.modified_time, c.note, c.params, c.parent_id,			 c.path, c.published, c.rgt, c.title, c.modified_user_id, c.version'		);		// Get the results		$db->setQuery($query);		$results = $db->loadObjectList('id');		$childrenLoaded = false;		if (count($results))		{			// Foreach categories			foreach ($results as $result)			{				// Deal with root category				if ($result->id == 1)				{					$result->id = 'root';				}				// Deal with parent_id				if ($result->parent_id == 1)				{					$result->parent_id = 'root';				}				// Create the node				if (!isset($this->_nodes[$result->id]))				{					// Create the JCategoryNode and add to _nodes					$this->_nodes[$result->id] = new JCategoryNode($result, $this);					// If this is not root and if the current node's parent is in the list or the current node parent is 0					if ($result->id != 'root' && (isset($this->_nodes[$result->parent_id]) || $result->parent_id == 1))					{						// Compute relationship between node and its parent - set the parent in the _nodes field						$this->_nodes[$result->id]->setParent($this->_nodes[$result->parent_id]);					}					// If the node's parent id is not in the _nodes list and the node is not root (doesn't have parent_id == 0),					// then remove the node from the list					if (!(isset($this->_nodes[$result->parent_id]) || $result->parent_id == 0))					{						unset($this->_nodes[$result->id]);						continue;					}					if ($result->id == $id || $childrenLoaded)					{						$this->_nodes[$result->id]->setAllLoaded();						$childrenLoaded = true;					}				}				elseif ($result->id == $id || $childrenLoaded)				{					// Create the JCategoryNode					$this->_nodes[$result->id] = new JCategoryNode($result, $this);					if ($result->id != 'root' && (isset($this->_nodes[$result->parent_id]) || $result->parent_id))					{						// Compute relationship between node and its parent						$this->_nodes[$result->id]->setParent($this->_nodes[$result->parent_id]);					}					if (!isset($this->_nodes[$result->parent_id]))					{						unset($this->_nodes[$result->id]);						continue;					}					if ($result->id == $id || $childrenLoaded)					{						$this->_nodes[$result->id]->setAllLoaded();						$childrenLoaded = true;					}				}			}		}		else		{			$this->_nodes[$id] = null;		}	}}/** * Helper class to load Categorytree * * @package     Joomla.Legacy * @subpackage  Categories * @since       11.1 */class JCategoryNode extends JObject{	/**	 * Primary key	 *	 * @var    integer	 * @since  11.1	 */	public $id = null;	/**	 * The id of the category in the asset table	 *	 * @var    integer	 * @since  11.1	 */	public $asset_id = null;	/**	 * The id of the parent of category in the asset table, 0 for category root	 *	 * @var    integer	 * @since  11.1	 */	public $parent_id = null;	/**	 * The lft value for this category in the category tree	 *	 * @var    integer	 * @since  11.1	 */	public $lft = null;	/**	 * The rgt value for this category in the category tree	 *	 * @var    integer	 * @since  11.1	 */	public $rgt = null;	/**	 * The depth of this category's position in the category tree	 *	 * @var    integer	 * @since  11.1	 */	public $level = null;	/**	 * The extension this category is associated with	 *	 * @var    integer	 * @since  11.1	 */	public $extension = null;	/**	 * The menu title for the category (a short name)	 *	 * @var    string	 * @since  11.1	 */	public $title = null;	/**	 * The the alias for the category	 *	 * @var    string	 * @since  11.1	 */	public $alias = null;	/**	 * Description of the category.	 *	 * @var    string	 * @since  11.1	 */	public $description = null;	/**	 * The publication status of the category	 *	 * @var    boolean	 * @since  11.1	 */	public $published = null;	/**	 * Whether the category is or is not checked out	 *	 * @var    boolean	 * @since  11.1	 */	public $checked_out = 0;	/**	 * The time at which the category was checked out	 *	 * @var    string	 * @since  11.1	 */	public $checked_out_time = 0;	/**	 * Access level for the category	 *	 * @var    integer	 * @since  11.1	 */	public $access = null;	/**	 * JSON string of parameters	 *	 * @var    string	 * @since  11.1	 */	public $params = null;	/**	 * Metadata description	 *	 * @var    string	 * @since  11.1	 */	public $metadesc = null;	/**	 * Key words for meta data	 *	 * @var    string	 * @since  11.1	 */	public $metakey = null;	/**	 * JSON string of other meta data	 *	 * @var    string	 * @since  11.1	 */	public $metadata = null;	/**	 * The ID of the user who created the category	 *	 * @var    integer	 * @since  11.1	 */	public $created_user_id = null;	/**	 * The time at which the category was created	 *	 * @var    string	 * @since  11.1	 */	public $created_time = null;	/**	 * The ID of the user who last modified the category	 *	 * @var    integer	 * @since  11.1	 */	public $modified_user_id = null;	/**	 * The time at which the category was modified	 *	 * @var    string	 * @since  11.1	 */	public $modified_time = null;	/**	 * Nmber of times the category has been viewed	 *	 * @var    integer	 * @since  11.1	 */	public $hits = null;	/**	 * The language for the category in xx-XX format	 *	 * @var    string	 * @since  11.1	 */	public $language = null;	/**	 * Number of items in this category or descendants of this category	 *	 * @var    integer	 * @since  11.1	 */	public $numitems = null;	/**	 * Number of children items	 *	 * @var    integer	 * @since  11.1	 */	public $childrennumitems = null;	/**	 * Slug fo the category (used in URL)	 *	 * @var    string	 * @since  11.1	 */	public $slug = null;	/**	 * Array of  assets	 *	 * @var    array	 * @since  11.1	 */	public $assets = null;	/**	 * Parent Category object	 *	 * @var    object	 * @since  11.1	 */	protected $_parent = null;	/**	 * @var Array of Children	 * @since  11.1	 */	protected $_children = array();	/**	 * Path from root to this category	 *	 * @var    array	 * @since  11.1	 */	protected $_path = array();	/**	 * Category left of this one	 *	 * @var    integer	 * @since  11.1	 */	protected $_leftSibling = null;	/**	 * Category right of this one	 *	 * @var	 * @since  11.1	 */	protected $_rightSibling = null;	/**	 * true if all children have been loaded	 *	 * @var boolean	 * @since  11.1	 */	protected $_allChildrenloaded = false;	/**	 * Constructor of this tree	 *	 * @var	 * @since  11.1	 */	protected $_constructor = null;	/**	 * Class constructor	 *	 * @param   array          $category     The category data.	 * @param   JCategoryNode  $constructor  The tree constructor.	 *	 * @since   11.1	 */	public function __construct($category = null, $constructor = null)	{		if ($category)		{			$this->setProperties($category);			if ($constructor)			{				$this->_constructor = $constructor;			}			return true;		}		return false;	}	/**	 * Set the parent of this category	 *	 * If the category already has a parent, the link is unset	 *	 * @param   mixed  $parent  JCategoryNode for the parent to be set or null	 *	 * @return  void	 *	 * @since   11.1	 */	public function setParent($parent)	{		if ($parent instanceof JCategoryNode || is_null($parent))		{			if (!is_null($this->_parent))			{				$key = array_search($this, $this->_parent->_children);				unset($this->_parent->_children[$key]);			}			if (!is_null($parent))			{				$parent->_children[] = & $this;			}			$this->_parent = $parent;			if ($this->id != 'root')			{				if ($this->parent_id != 1)				{					$this->_path = $parent->getPath();				}				$this->_path[] = $this->id . ':' . $this->alias;			}			if (count($parent->_children) > 1)			{				end($parent->_children);				$this->_leftSibling = prev($parent->_children);				$this->_leftSibling->_rightsibling = & $this;			}		}	}	/**	 * Add child to this node	 *	 * If the child already has a parent, the link is unset	 *	 * @param   JCategoryNode  $child  The child to be added.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addChild($child)	{		if ($child instanceof JCategoryNode)		{			$child->setParent($this);		}	}	/**	 * Remove a specific child	 *	 * @param   integer  $id  ID of a category	 *	 * @return  void	 *	 * @since   11.1	 */	public function removeChild($id)	{		$key = array_search($this, $this->_parent->_children);		unset($this->_parent->_children[$key]);	}	/**	 * Get the children of this node	 *	 * @param   boolean  $recursive  False by default	 *	 * @return  array  The children	 *	 * @since   11.1	 */	public function &getChildren($recursive = false)	{		if (!$this->_allChildrenloaded)		{			$temp = $this->_constructor->get($this->id, true);			if ($temp)			{				$this->_children = $temp->getChildren();				$this->_leftSibling = $temp->getSibling(false);				$this->_rightSibling = $temp->getSibling(true);				$this->setAllLoaded();			}		}		if ($recursive)		{			$items = array();			foreach ($this->_children as $child)			{				$items[] = $child;				$items = array_merge($items, $child->getChildren(true));			}			return $items;		}		return $this->_children;	}	/**	 * Get the parent of this node	 *	 * @return  mixed  JCategoryNode or null	 *	 * @since   11.1	 */	public function getParent()	{		return $this->_parent;	}	/**	 * Test if this node has children	 *	 * @return  boolean  True if there is a child	 *	 * @since   11.1	 */	public function hasChildren()	{		return count($this->_children);	}	/**	 * Test if this node has a parent	 *	 * @return  boolean    True if there is a parent	 *	 * @since   11.1	 */	public function hasParent()	{		return $this->getParent() != null;	}	/**	 * Function to set the left or right sibling of a category	 *	 * @param   JCategoryNode  $sibling  JCategoryNode object for the sibling	 * @param   boolean        $right    If set to false, the sibling is the left one	 *	 * @return  void	 *	 * @since   11.1	 */	public function setSibling($sibling, $right = true)	{		if ($right)		{			$this->_rightSibling = $sibling;		}		else		{			$this->_leftSibling = $sibling;		}	}	/**	 * Returns the right or left sibling of a category	 *	 * @param   boolean  $right  If set to false, returns the left sibling	 *	 * @return  mixed  JCategoryNode object with the sibling information or	 *                 NULL if there is no sibling on that side.	 *	 * @since          11.1	 */	public function getSibling($right = true)	{		if (!$this->_allChildrenloaded)		{			$temp = $this->_constructor->get($this->id, true);			$this->_children = $temp->getChildren();			$this->_leftSibling = $temp->getSibling(false);			$this->_rightSibling = $temp->getSibling(true);			$this->setAllLoaded();		}		if ($right)		{			return $this->_rightSibling;		}		else		{			return $this->_leftSibling;		}	}	/**	 * Returns the category parameters	 *	 * @return  JRegistry	 *	 * @since   11.1	 */	public function getParams()	{		if (!($this->params instanceof JRegistry))		{			$temp = new JRegistry;			$temp->loadString($this->params);			$this->params = $temp;		}		return $this->params;	}	/**	 * Returns the category metadata	 *	 * @return  JRegistry  A JRegistry object containing the metadata	 *	 * @since   11.1	 */	public function getMetadata()	{		if (!($this->metadata instanceof JRegistry))		{			$temp = new JRegistry;			$temp->loadString($this->metadata);			$this->metadata = $temp;		}		return $this->metadata;	}	/**	 * Returns the category path to the root category	 *	 * @return  array	 *	 * @since   11.1	 */	public function getPath()	{		return $this->_path;	}	/**	 * Returns the user that created the category	 *	 * @param   boolean  $modified_user  Returns the modified_user when set to true	 *	 * @return  JUser  A JUser object containing a userid	 *	 * @since   11.1	 */	public function getAuthor($modified_user = false)	{		if ($modified_user)		{			return JFactory::getUser($this->modified_user_id);		}		return JFactory::getUser($this->created_user_id);	}	/**	 * Set to load all children	 *	 * @return  void	 *	 * @since 11.1	 */	public function setAllLoaded()	{		$this->_allChildrenloaded = true;		foreach ($this->_children as $child)		{			$child->setAllLoaded();		}	}	/**	 * Returns the number of items.	 *	 * @param   boolean  $recursive  If false number of children, if true number of descendants	 *	 * @return  integer  Number of children or descendants	 *	 * @since 11.1	 */	public function getNumItems($recursive = false)	{		if ($recursive)		{			$count = $this->numitems;			foreach ($this->getChildren() as $child)			{				$count = $count + $child->getNumItems(true);			}			return $count;		}		return $this->numitems;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact */class ContactModelFeatured extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * The category that applies.	 *	 * @access    protected	 * @var        object	 */	protected $_category = null;	/**	 * The list of other cotnact categories.	 *	 * @access    protected	 * @var        array	 */	protected $_categories = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'con_position', 'a.con_position',				'suburb', 'a.suburb',				'state', 'a.state',				'country', 'a.country',				'ordering', 'a.ordering',			);		}		parent::__construct($config);	}	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		// Convert the params field into an object, saving original in _params		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item = & $items[$i];			if (!isset($this->_params))			{				$params = new JRegistry;				$params->loadString($item->params);				$item->params = $params;			}		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields from the categories.		$query->select($this->getState('list.select', 'a.*'))			->from($db->quoteName('#__contact_details') . ' AS a')			->where('a.access IN (' . $groups . ')')			->where('a.featured=1')			->join('INNER', '#__categories AS c ON c.id = a.catid')			->where('c.access IN (' . $groups . ')');		// Filter by category.		if ($categoryId = $this->getState('category.id'))		{			$query->where('a.catid = ' . (int) $categoryId);		}		//sqlsrv change... aliased c.published to cat_published		// Join to check for category published state in parent categories up the tree		$query->select('c.published as cat_published, CASE WHEN badcats.id is null THEN c.published ELSE 0 END AS parents_published');		$subquery = 'SELECT cat.id as id FROM #__categories AS cat JOIN #__categories AS parent ';		$subquery .= 'ON cat.lft BETWEEN parent.lft AND parent.rgt ';		$subquery .= 'WHERE parent.extension = ' . $db->quote('com_contact');		// Find any up-path categories that are not published		// If all categories are published, badcats.id will be null, and we just use the contact state		$subquery .= ' AND parent.published != 1 GROUP BY cat.id ';		// Select state to unpublished if up-path category is unpublished		$publishedWhere = 'CASE WHEN badcats.id is null THEN a.published ELSE 0 END';		$query->join('LEFT OUTER', '(' . $subquery . ') AS badcats ON badcats.id = c.id');		// Filter by state		$state = $this->getState('filter.published');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);			// Filter by start and end dates.			$nullDate = $db->quote($db->getNullDate());			$date = JFactory::getDate();			$nowDate = $db->quote($date->toSql());			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')')				->where($publishedWhere . ' = ' . (int) $state);		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_contact');		// List state information		$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');		$this->setState('list.limit', $limit);		$limitstart = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $limitstart);		$orderCol = $app->input->get('filter_order', 'ordering');		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->input->get('filter_order_Dir', 'ASC');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_contact')) && (!$user->authorise('core.edit', 'com_contact')))		{			// Limit to published for people who can't edit or edit.state.			$this->setState('filter.published', 1);			// Filter by start and end dates.			$this->setState('filter.publish_date', true);		}		$this->setState('filter.language', $app->getLanguageFilter());		// Load the parameters.		$this->setState('params', $params);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Categories. * * @package     Joomla.Plugin * @subpackage  Finder.Categories * @since       2.5 */class PlgFinderCategories extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Categories';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_categories';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'category';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'Category';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__categories';	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'published';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderDelete($context, $table)	{		if ($context == 'com_categories.category')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);				// Reindex the item				$this->reindex($row->id);			}			// Check if the parent access level is different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// Query the database for the old access level and the parent if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle categories here		if ($context == 'com_categories.category')		{			// The category published state is tied to the parent category			// published state so we need to look up all published states			// before we change anything.			foreach ($pks as $pk)			{				$query = clone($this->getStateQuery());				$query->where('a.id = ' . (int) $pk);				// Get the published states.				$this->db->setQuery($query);				$item = $this->db->loadObject();				// Translate the state.				$state = null;				if ($item->parent_id != 1)				{					$state = $item->cat_state;				}				$temp = $this->translateState($value, $state);				// Update the item.				$this->change($pk, 'state', $temp);				// Reindex the item				$this->reindex($pk);			}		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Need to import component route helpers dynamically, hence the reason it's handled here		$path = JPATH_SITE . '/components/' . $item->extension . '/helpers/route.php';		if (is_file($path))		{			include_once $path;		}		$extension = ucfirst(substr($item->extension, 4));		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = $registry;		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		/* Add the meta-data processing instructions based on the categories		 * configuration parameters.		 */		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		//$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Trigger the onContentPrepare event.		$item->summary = FinderIndexerHelper::prepareContent($item->summary, $item->params);		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $item->extension, $this->layout);		$class = $extension . 'HelperRoute';		if (class_exists($class) && method_exists($class, 'getCategoryRoute'))		{			$item->route = $class::getCategoryRoute($item->id);		}		else		{			$item->route = ContentHelperRoute::getCategoryRoute($item->slug, $item->catid);		}		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Translate the state. Categories should only be published if the parent category is published.		$item->state = $this->translateState($item->state);		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Category');		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load com_content route helper as it is the fallback for routing in the indexer in this instance.		include_once JPATH_SITE . '/components/com_content/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.description AS summary, a.extension')			->select('a.created_user_id AS created_by, a.modified_time AS modified, a.modified_user_id AS modified_by')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.lft, a.parent_id, a.level')			->select('a.created_time AS start_date, a.published AS state, a.access, a.params');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias)			->from('#__categories AS a')			->where($db->quoteName('a.id') . ' > 1');		return $query;	}	/**	 * Method to get a SQL query to load the published and access states for	 * an article and category.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('a.id'))			->select('a.' . $this->state_field . ' AS state, c.published AS cat_state')			->select('a.access, c.access AS cat_access')			->from($this->db->quoteName('#__categories') . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.parent_id');		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$version = new JVersion;?><div id="installer-languages">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=languages');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if (count($this->items) || $this->escape($this->state->get('filter.search'))) : ?>			<?php echo $this->loadTemplate('filter'); ?>			<table class="table table-striped">				<thead>					<tr>						<th width="20" class="nowrap hidden-phone">							<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />						</th>						<th class="nowrap">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>						</th>						<th width="10%" class="center">							<?php echo JText::_('JVERSION'); ?>						</th>						<th class="center nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_TYPE'); ?>						</th>						<th width="35%" class="nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_DETAILS_URL'); ?>						</th>						<th width="30" class="nowrap hidden-phone">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'update_id', $listDirn, $listOrder); ?>						</th>					</tr>				</thead>				<tfoot>					<tr>						<td colspan="6">							<?php echo $this->pagination->getListFooter(); ?>						</td>					</tr>				</tfoot>				<tbody>					<?php foreach ($this->items as $i => $language) :				?>					<tr class="row<?php echo $i % 2; ?>">						<td class="hidden-phone">							<?php echo JHtml::_('grid.id', $i, $language->update_id, false, 'cid'); ?>						</td>						<td>							<?php echo $language->name; ?>							<?php // Display a Note if language pack version is not equal to Joomla version ?>							<?php if (substr($language->version, 0, 3) != $version->RELEASE									|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>								<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>							<?php endif; ?>						</td>						<td class="center small">							<?php echo $language->version; ?>						</td>						<td class="center small hidden-phone">							<?php echo JText::_('COM_INSTALLER_TYPE_' . strtoupper($language->type)); ?>						</td>						<td class="small hidden-phone">							<?php echo $language->detailsurl; ?>						</td>						<td class="small hidden-phone">							<?php echo $language->update_id; ?>						</td>					</tr>					<?php endforeach; ?>				</tbody>			</table>		<?php else : ?>			<div class="alert"><?php echo JText::_('COM_INSTALLER_MSG_LANGUAGES_NOLANGUAGES'); ?></div>		<?php endif; ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');/** * Media File Controller * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaControllerFile extends JControllerLegacy{	/**	 * The folder we are uploading into	 *	 * @var   string	 */	protected $folder = '';	/**	 * Upload one or more files	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function upload()	{		// Check for request forgeries		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$params = JComponentHelper::getParams('com_media');		// Get some data from the request		$files        = $this->input->files->get('Filedata', '', 'array');		$return       = $this->input->post->get('return-url', null, 'base64');		$this->folder = $this->input->get('folder', '', 'path');		// Set the redirect		if ($return)		{			$this->setRedirect(base64_decode($return) . '&folder=' . $this->folder);		}		// Authorize the user		if (!$this->authoriseUser('create'))		{			return false;		}		if (			$_SERVER['CONTENT_LENGTH'] > ($params->get('upload_maxsize', 0) * 1024 * 1024) ||			$_SERVER['CONTENT_LENGTH'] > (int) (ini_get('upload_max_filesize')) * 1024 * 1024 ||			$_SERVER['CONTENT_LENGTH'] > (int) (ini_get('post_max_size')) * 1024 * 1024 ||			(($_SERVER['CONTENT_LENGTH'] > (int) (ini_get('memory_limit')) * 1024 * 1024) && ((int) (ini_get('memory_limit')) != -1))		)		{			JError::raiseWarning(100, JText::_('COM_MEDIA_ERROR_WARNFILETOOLARGE'));			return false;		}		// Perform basic checks on file info before attempting anything		foreach ($files as &$file)		{			$file['name']     = JFile::makeSafe($file['name']);			$file['filepath'] = JPath::clean(implode(DIRECTORY_SEPARATOR, array(COM_MEDIA_BASE, $this->folder, $file['name'])));			if ($file['error'] == 1)			{				JError::raiseWarning(100, JText::_('COM_MEDIA_ERROR_WARNFILETOOLARGE'));				return false;			}			if ($file['size'] > ($params->get('upload_maxsize', 0) * 1024 * 1024))			{				JError::raiseNotice(100, JText::_('COM_MEDIA_ERROR_WARNFILETOOLARGE'));				return false;			}			if (JFile::exists($file['filepath']))			{				// A file with this name already exists				JError::raiseWarning(100, JText::_('COM_MEDIA_ERROR_FILE_EXISTS'));				return false;			}			if (!isset($file['name']))			{				// No filename (after the name was cleaned by JFile::makeSafe)				$this->setRedirect('index.php', JText::_('COM_MEDIA_INVALID_REQUEST'), 'error');				return false;			}		}		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		JPluginHelper::importPlugin('content');		$dispatcher	= JEventDispatcher::getInstance();		foreach ($files as &$file)		{			// The request is valid			$err = null;			if (!MediaHelper::canUpload($file, $err))			{				// The file can't be upload				JError::raiseNotice(100, JText::_($err));				return false;			}			// Trigger the onContentBeforeSave event.			$object_file = new JObject($file);			$result = $dispatcher->trigger('onContentBeforeSave', array('com_media.file', &$object_file));			if (in_array(false, $result, true))			{				// There are some errors in the plugins				JError::raiseWarning(100, JText::plural('COM_MEDIA_ERROR_BEFORE_SAVE', count($errors = $object_file->getErrors()), implode('<br />', $errors)));				return false;			}			if (!JFile::upload($object_file->tmp_name, $object_file->filepath))			{				// Error in upload				JError::raiseWarning(100, JText::_('COM_MEDIA_ERROR_UNABLE_TO_UPLOAD_FILE'));				return false;			}			else			{				// Trigger the onContentAfterSave event.				$dispatcher->trigger('onContentAfterSave', array('com_media.file', &$object_file, true));				$this->setMessage(JText::sprintf('COM_MEDIA_UPLOAD_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));			}		}		return true;	}	/**	 * Check that the user is authorized to perform this action	 *	 * @param   string   $action - the action to be peformed (create or delete)	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function authoriseUser($action)	{		if (!JFactory::getUser()->authorise('core.' . strtolower($action), 'com_media'))		{			// User is not authorised			JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_' . strtoupper($action) . '_NOT_PERMITTED'));			return false;		}		return true;	}	/**	 * Deletes paths from the current path	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function delete()	{		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		// Get some data from the request		$tmpl	= $this->input->get('tmpl');		$paths	= $this->input->get('rm', array(), 'array');		$folder = $this->input->get('folder', '', 'path');		$redirect = 'index.php?option=com_media&folder=' . $folder;		if ($tmpl == 'component')		{			// We are inside the iframe			$redirect .= '&view=mediaList&tmpl=component';		}		$this->setRedirect($redirect);		// Nothing to delete		if (empty($paths))		{			return true;		}		// Authorize the user		if (!$this->authoriseUser('delete'))		{			return false;		}		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		JPluginHelper::importPlugin('content');		$dispatcher	= JEventDispatcher::getInstance();		$ret = true;		foreach ($paths as $path)		{			if ($path !== JFile::makeSafe($path))			{				// filename is not safe				$filename = htmlspecialchars($path, ENT_COMPAT, 'UTF-8');				JError::raiseWarning(100, JText::sprintf('COM_MEDIA_ERROR_UNABLE_TO_DELETE_FILE_WARNFILENAME', substr($filename, strlen(COM_MEDIA_BASE))));				continue;			}			$fullPath = JPath::clean(implode(DIRECTORY_SEPARATOR, array(COM_MEDIA_BASE, $folder, $path)));			$object_file = new JObject(array('filepath' => $fullPath));			if (is_file($object_file->filepath))			{				// Trigger the onContentBeforeDelete event.				$result = $dispatcher->trigger('onContentBeforeDelete', array('com_media.file', &$object_file));				if (in_array(false, $result, true))				{					// There are some errors in the plugins					JError::raiseWarning(100, JText::plural('COM_MEDIA_ERROR_BEFORE_DELETE', count($errors = $object_file->getErrors()), implode('<br />', $errors)));					continue;				}				$ret &= JFile::delete($object_file->filepath);				// Trigger the onContentAfterDelete event.				$dispatcher->trigger('onContentAfterDelete', array('com_media.file', &$object_file));				$this->setMessage(JText::sprintf('COM_MEDIA_DELETE_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));			}			elseif (is_dir($object_file->filepath))			{				$contents = JFolder::files($object_file->filepath, '.', true, false, array('.svn', 'CVS', '.DS_Store', '__MACOSX', 'index.html'));				if (empty($contents))				{					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger('onContentBeforeDelete', array('com_media.folder', &$object_file));					if (in_array(false, $result, true))					{						// There are some errors in the plugins						JError::raiseWarning(100, JText::plural('COM_MEDIA_ERROR_BEFORE_DELETE', count($errors = $object_file->getErrors()), implode('<br />', $errors)));						continue;					}					$ret &= JFolder::delete($object_file->filepath);					// Trigger the onContentAfterDelete event.					$dispatcher->trigger('onContentAfterDelete', array('com_media.folder', &$object_file));					$this->setMessage(JText::sprintf('COM_MEDIA_DELETE_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));				}				else				{					// This makes no sense...					JError::raiseWarning(100, JText::sprintf('COM_MEDIA_ERROR_UNABLE_TO_DELETE_FOLDER_NOT_EMPTY', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));				}			}		}		return $ret;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla Controller * * Controller (Controllers are where you put all the actual code.) Provides basic * functionality, such as rendering views (aka displaying templates). * * @package     Joomla.Legacy * @subpackage  Controller * @since       12.2 */class JControllerLegacy extends JObject{	/**	 * The base path of the controller	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _basePath.	 */	protected $basePath;	/**	 * The default view for the display method.	 *	 * @var    string	 * @since  12.2	 */	protected $default_view;	/**	 * The mapped task that was performed.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _doTask.	 */	protected $doTask;	/**	 * Redirect message.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _message.	 */	protected $message;	/**	 * Redirect message type.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _messageType.	 */	protected $messageType;	/**	 * Array of class methods	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _methods.	 */	protected $methods;	/**	 * The name of the controller	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _name.	 */	protected $name;	/**	 * The prefix of the models	 *	 * @var    string	 * @since  12.2	 */	protected $model_prefix;	/**	 * The set of search directories for resources (views).	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _path.	 */	protected $paths;	/**	 * URL for redirection.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _redirect.	 */	protected $redirect;	/**	 * Current or most recently performed task.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _task.	 */	protected $task;	/**	 * Array of class methods to call for a given task.	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _taskMap.	 */	protected $taskMap;	/**	 * Hold a JInput object for easier access to the input variables.	 *	 * @var    JInput	 * @since  12.2	 */	protected $input;	/**	 * Instance container.	 *	 * @var    JControllerLegacy	 * @since  12.2	 */	protected static $instance;	/**	 * Adds to the stack of model paths in LIFO order.	 *	 * @param   mixed   $path    The directory (string), or list of directories (array) to add.	 * @param   string  $prefix  A prefix for models	 *	 * @return  void	 */	public static function addModelPath($path, $prefix = '')	{		JModelLegacy::addIncludePath($path, $prefix);	}	/**	 * Create the filename for a resource.	 *	 * @param   string  $type   The resource type to create the filename for.	 * @param   array   $parts  An associative array of filename information. Optional.	 *	 * @return  string  The filename.	 *	 * @note    Replaced _createFileName.	 * @since   12.2	 */	protected static function createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'controller':				if (!empty($parts['format']))				{					if ($parts['format'] == 'html')					{						$parts['format'] = '';					}					else					{						$parts['format'] = '.' . $parts['format'];					}				}				else				{					$parts['format'] = '';				}				$filename = strtolower($parts['name'] . $parts['format'] . '.php');				break;			case 'view':				if (!empty($parts['type']))				{					$parts['type'] = '.' . $parts['type'];				}				else				{					$parts['type'] = '';				}				$filename = strtolower($parts['name'] . '/view' . $parts['type'] . '.php');				break;		}		return $filename;	}	/**	 * Method to get a singleton controller instance.	 *	 * @param   string  $prefix  The prefix for the controller.	 * @param   array   $config  An array of optional constructor options.	 *	 * @return  JControllerLegacy	 *	 * @since   12.2	 * @throws  Exception if the controller cannot be loaded.	 */	public static function getInstance($prefix, $config = array())	{		if (is_object(self::$instance))		{			return self::$instance;		}		$input = JFactory::getApplication()->input;		// Get the environment configuration.		$basePath = array_key_exists('base_path', $config) ? $config['base_path'] : JPATH_COMPONENT;		$format   = $input->getWord('format');		$command  = $input->get('task', 'display');		// Check for array format.		$filter = JFilterInput::getInstance();		if (is_array($command))		{			$command = $filter->clean(array_pop(array_keys($command)), 'cmd');		}		else		{			$command = $filter->clean($command, 'cmd');		}		// Check for a controller.task command.		if (strpos($command, '.') !== false)		{			// Explode the controller.task command.			list ($type, $task) = explode('.', $command);			// Define the controller filename and path.			$file = self::createFileName('controller', array('name' => $type, 'format' => $format));			$path = $basePath . '/controllers/' . $file;			// Reset the task without the controller context.			$input->set('task', $task);		}		else		{			// Base controller.			$type = null;			$task = $command;			// Define the controller filename and path.			$file       = self::createFileName('controller', array('name' => 'controller', 'format' => $format));			$path       = $basePath . '/' . $file;			$backupfile = self::createFileName('controller', array('name' => 'controller'));			$backuppath = $basePath . '/' . $backupfile;		}		// Get the controller class name.		$class = ucfirst($prefix) . 'Controller' . ucfirst($type);		// Include the class if not present.		if (!class_exists($class))		{			// If the controller file path exists, include it.			if (file_exists($path))			{				require_once $path;			}			elseif (isset($backuppath) && file_exists($backuppath))			{				require_once $backuppath;			}			else			{				throw new InvalidArgumentException(JText::sprintf('JLIB_APPLICATION_ERROR_INVALID_CONTROLLER', $type, $format));			}		}		// Instantiate the class.		if (class_exists($class))		{			self::$instance = new $class($config);		}		else		{			throw new InvalidArgumentException(JText::sprintf('JLIB_APPLICATION_ERROR_INVALID_CONTROLLER_CLASS', $class));		}		return self::$instance;	}	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 * Recognized key values include 'name', 'default_task', 'model_path', and	 * 'view_path' (this list is not meant to be comprehensive).	 *	 * @since   12.2	 */	public function __construct($config = array())	{		$this->methods = array();		$this->message = null;		$this->messageType = 'message';		$this->paths = array();		$this->redirect = null;		$this->taskMap = array();		if (defined('JDEBUG') && JDEBUG)		{			JLog::addLogger(array('text_file' => 'jcontroller.log.php'), JLog::ALL, array('controller'));		}		$this->input = JFactory::getApplication()->input;		// Determine the methods to exclude from the base class.		$xMethods = get_class_methods('JControllerLegacy');		// Get the public methods in this class using reflection.		$r = new ReflectionClass($this);		$rMethods = $r->getMethods(ReflectionMethod::IS_PUBLIC);		foreach ($rMethods as $rMethod)		{			$mName = $rMethod->getName();			// Add default display method if not explicitly declared.			if (!in_array($mName, $xMethods) || $mName == 'display')			{				$this->methods[] = strtolower($mName);				// Auto register the methods as tasks.				$this->taskMap[strtolower($mName)] = $mName;			}		}		// Set the view name		if (empty($this->name))		{			if (array_key_exists('name', $config))			{				$this->name = $config['name'];			}			else			{				$this->name = $this->getName();			}		}		// Set a base path for use by the controller		if (array_key_exists('base_path', $config))		{			$this->basePath = $config['base_path'];		}		else		{			$this->basePath = JPATH_COMPONENT;		}		// If the default task is set, register it as such		if (array_key_exists('default_task', $config))		{			$this->registerDefaultTask($config['default_task']);		}		else		{			$this->registerDefaultTask('display');		}		// Set the models prefix		if (empty($this->model_prefix))		{			if (array_key_exists('model_prefix', $config))			{				// User-defined prefix				$this->model_prefix = $config['model_prefix'];			}			else			{				$this->model_prefix = $this->name . 'Model';			}		}		// Set the default model search path		if (array_key_exists('model_path', $config))		{			// User-defined dirs			$this->addModelPath($config['model_path'], $this->model_prefix);		}		else		{			$this->addModelPath($this->basePath . '/models', $this->model_prefix);		}		// Set the default view search path		if (array_key_exists('view_path', $config))		{			// User-defined dirs			$this->setPath('view', $config['view_path']);		}		else		{			$this->setPath('view', $this->basePath . '/views');		}		// Set the default view.		if (array_key_exists('default_view', $config))		{			$this->default_view = $config['default_view'];		}		elseif (empty($this->default_view))		{			$this->default_view = $this->getName();		}	}	/**	 * Adds to the search path for templates and resources.	 *	 * @param   string  $type  The path type (e.g. 'model', 'view').	 * @param   mixed   $path  The directory string  or stream array to search.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 * @note    Replaces _addPath.	 */	protected function addPath($type, $path)	{		// Just force path to array		settype($path, 'array');		if (!isset($this->paths[$type]))		{			$this->paths[$type] = array();		}		// Loop through the path directories		foreach ($path as $dir)		{			// No surrounding spaces allowed!			$dir = rtrim(JPath::check($dir, '/'), '/') . '/';			// Add to the top of the search dirs			array_unshift($this->paths[$type], $dir);		}		return $this;	}	/**	 * Add one or more view paths to the controller's stack, in LIFO order.	 *	 * @param   mixed  $path  The directory (string) or list of directories (array) to add.	 *	 * @return  JControllerLegacy  This object to support chaining.	 */	public function addViewPath($path)	{		$this->addPath('view', $path);		return $this;	}	/**	 * Authorisation check	 *	 * @param   string  $task  The ACO Section Value to check access on.	 *	 * @return  boolean  True if authorised	 *	 * @since   12.2	 * @deprecated  13.3  Use JAccess instead.	 */	public function authorise($task)	{		JLog::add(__METHOD__ . ' is deprecated. Use JAccess instead.', JLog::WARNING, 'deprecated');		return true;	}	/**	 * Method to check whether an ID is in the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  boolean  True if the ID is in the edit list.	 *	 * @since   12.2	 */	protected function checkEditId($context, $id)	{		if ($id)		{			$app = JFactory::getApplication();			$values = (array) $app->getUserState($context . '.id');			$result = in_array((int) $id, $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Checking edit ID %s.%s: %d %s',						$context,						$id,						(int) $result,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}			return $result;		}		else		{			// No id for a new item.			return true;		}	}	/**	 * Method to load and return a model object.	 *	 * @param   string  $name    The name of the model.	 * @param   string  $prefix  Optional model prefix.	 * @param   array   $config  Configuration array for the model. Optional.	 *	 * @return  mixed   Model object on success; otherwise null failure.	 *	 * @since   12.2	 * @note    Replaces _createModel.	 */	protected function createModel($name, $prefix = '', $config = array())	{		// Clean the model name		$modelName = preg_replace('/[^A-Z0-9_]/i', '', $name);		$classPrefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		$result = JModelLegacy::getInstance($modelName, $classPrefix, $config);		return $result;	}	/**	 * Method to load and return a view object. This method first looks in the	 * current template directory for a match and, failing that, uses a default	 * set path to load the view class file.	 *	 * Note the "name, prefix, type" order of parameters, which differs from the	 * "name, type, prefix" order used in related public methods.	 *	 * @param   string  $name    The name of the view.	 * @param   string  $prefix  Optional prefix for the view class name.	 * @param   string  $type    The type of view.	 * @param   array   $config  Configuration array for the view. Optional.	 *	 * @return  mixed  View object on success; null or error result on failure.	 *	 * @since   12.2	 * @note    Replaces _createView.	 * @throws  Exception	 */	protected function createView($name, $prefix = '', $type = '', $config = array())	{		// Clean the view name		$viewName = preg_replace('/[^A-Z0-9_]/i', '', $name);		$classPrefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		$viewType = preg_replace('/[^A-Z0-9_]/i', '', $type);		// Build the view class name		$viewClass = $classPrefix . $viewName;		if (!class_exists($viewClass))		{			jimport('joomla.filesystem.path');			$path = JPath::find($this->paths['view'], $this->createFileName('view', array('name' => $viewName, 'type' => $viewType)));			if ($path)			{				require_once $path;				if (!class_exists($viewClass))				{					throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_VIEW_CLASS_NOT_FOUND', $viewClass, $path), 500);				}			}			else			{				return null;			}		}		return new $viewClass($config);	}	/**	 * Typical view method for MVC based architecture	 *	 * This function is provide as a default implementation, in most cases	 * you will need to override it in your own controllers.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function display($cachable = false, $urlparams = array())	{		$document = JFactory::getDocument();		$viewType = $document->getType();		$viewName = $this->input->get('view', $this->default_view);		$viewLayout = $this->input->get('layout', 'default');		$view = $this->getView($viewName, $viewType, '', array('base_path' => $this->basePath, 'layout' => $viewLayout));		// Get/Create the model		if ($model = $this->getModel($viewName))		{			// Push the model into the view (as default)			$view->setModel($model, true);		}		$view->document = $document;		$conf = JFactory::getConfig();		// Display the view		if ($cachable && $viewType != 'feed' && $conf->get('caching') >= 1)		{			$option = $this->input->get('option');			$cache = JFactory::getCache($option, 'view');			if (is_array($urlparams))			{				$app = JFactory::getApplication();				if (!empty($app->registeredurlparams))				{					$registeredurlparams = $app->registeredurlparams;				}				else				{					$registeredurlparams = new stdClass;				}				foreach ($urlparams as $key => $value)				{					// Add your safe url parameters with variable type as value {@see JFilterInput::clean()}.					$registeredurlparams->$key = $value;				}				$app->registeredurlparams = $registeredurlparams;			}			$cache->get($view, 'display');		}		else		{			$view->display();		}		return $this;	}	/**	 * Execute a task by triggering a method in the derived class.	 *	 * @param   string  $task  The task to perform. If no matching task is found, the '__default' task is executed, if defined.	 *	 * @return  mixed   The value returned by the called method, false in error case.	 *	 * @since   12.2	 * @throws  Exception	 */	public function execute($task)	{		$this->task = $task;		$task = strtolower($task);		if (isset($this->taskMap[$task]))		{			$doTask = $this->taskMap[$task];		}		elseif (isset($this->taskMap['__default']))		{			$doTask = $this->taskMap['__default'];		}		else		{			throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_TASK_NOT_FOUND', $task), 404);		}		// Record the actual task being fired		$this->doTask = $doTask;		return $this->$doTask();	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   12.2	 */	public function getModel($name = '', $prefix = '', $config = array())	{		if (empty($name))		{			$name = $this->getName();		}		if (empty($prefix))		{			$prefix = $this->model_prefix;		}		if ($model = $this->createModel($name, $prefix, $config))		{			// Task is a reserved state			$model->setState('task', $this->task);			// Let's get the application object and set menu information if it's available			$app = JFactory::getApplication();			$menu = $app->getMenu();			if (is_object($menu))			{				if ($item = $menu->getActive())				{					$params = $menu->getParams($item->id);					// Set default state data					$model->setState('parameters.menu', $params);				}			}		}		return $model;	}	/**	 * Method to get the controller name	 *	 * The dispatcher name is set by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the dispatcher	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->name))		{			$r = null;			if (!preg_match('/(.*)Controller/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_CONTROLLER_GET_NAME'), 500);			}			$this->name = strtolower($r[1]);		}		return $this->name;	}	/**	 * Get the last task that is being performed or was most recently performed.	 *	 * @return  string  The task that is being performed or was most recently performed.	 *	 * @since   12.2	 */	public function getTask()	{		return $this->task;	}	/**	 * Gets the available tasks in the controller.	 *	 * @return  array  Array[i] of task names.	 *	 * @since   12.2	 */	public function getTasks()	{		return $this->methods;	}	/**	 * Method to get a reference to the current view and load it if necessary.	 *	 * @param   string  $name    The view name. Optional, defaults to the controller name.	 * @param   string  $type    The view type. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for view. Optional.	 *	 * @return  JViewLegacy  Reference to the view or an error.	 *	 * @since   12.2	 * @throws  Exception	 */	public function getView($name = '', $type = '', $prefix = '', $config = array())	{		static $views;		if (!isset($views))		{			$views = array();		}		if (empty($name))		{			$name = $this->getName();		}		if (empty($prefix))		{			$prefix = $this->getName() . 'View';		}		if (empty($views[$name]))		{			if ($view = $this->createView($name, $prefix, $type, $config))			{				$views[$name] = & $view;			}			else			{				throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_VIEW_NOT_FOUND', $name, $type, $prefix), 500);			}		}		return $views[$name];	}	/**	 * Method to add a record ID to the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function holdEditId($context, $id)	{		$app = JFactory::getApplication();		$values = (array) $app->getUserState($context . '.id');		// Add the id to the list if non-zero.		if (!empty($id))		{			array_push($values, (int) $id);			$values = array_unique($values);			$app->setUserState($context . '.id', $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Holding edit ID %s.%s %s',						$context,						$id,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}		}	}	/**	 * Redirects the browser or returns false if no redirect is set.	 *	 * @return  boolean  False if no redirect exists.	 *	 * @since   12.2	 */	public function redirect()	{		if ($this->redirect)		{			$app = JFactory::getApplication();			$app->redirect($this->redirect, $this->message, $this->messageType);		}		return false;	}	/**	 * Register the default task to perform if a mapping is not found.	 *	 * @param   string  $method  The name of the method in the derived class to perform if a named task is not found.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function registerDefaultTask($method)	{		$this->registerTask('__default', $method);		return $this;	}	/**	 * Register (map) a task to a method in the class.	 *	 * @param   string  $task    The task.	 * @param   string  $method  The name of the method in the derived class to perform for this task.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function registerTask($task, $method)	{		if (in_array(strtolower($method), $this->methods))		{			$this->taskMap[strtolower($task)] = $method;		}		return $this;	}	/**	 * Unregister (unmap) a task in the class.	 *	 * @param   string  $task  The task.	 *	 * @return  JControllerLegacy  This object to support chaining.	 *	 * @since   12.2	 */	public function unregisterTask($task)	{		unset($this->taskMap[strtolower($task)]);		return $this;	}	/**	 * Method to check whether an ID is in the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function releaseEditId($context, $id)	{		$app = JFactory::getApplication();		$values = (array) $app->getUserState($context . '.id');		// Do a strict search of the edit list values.		$index = array_search((int) $id, $values, true);		if (is_int($index))		{			unset($values[$index]);			$app->setUserState($context . '.id', $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Releasing edit ID %s.%s %s',						$context,						$id,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}		}	}	/**	 * Sets the internal message that is passed with a redirect	 *	 * @param   string  $text  Message to display on redirect.	 * @param   string  $type  Message type. Optional, defaults to 'message'.	 *	 * @return  string  Previous message	 *	 * @since   12.2	 */	public function setMessage($text, $type = 'message')	{		$previous = $this->message;		$this->message = $text;		$this->messageType = $type;		return $previous;	}	/**	 * Sets an entire array of search paths for resources.	 *	 * @param   string  $type  The type of path to set, typically 'view' or 'model'.	 * @param   string  $path  The new set of search paths. If null or false, resets to the current directory only.	 *	 * @return  void	 *	 * @note    Replaces _setPath.	 * @since   12.2	 */	protected function setPath($type, $path)	{		// Clear out the prior search dirs		$this->paths[$type] = array();		// Actually add the user-specified directories		$this->addPath($type, $path);	}	/**	 * Set a URL for browser redirection.	 *	 * @param   string  $url   URL to redirect to.	 * @param   string  $msg   Message to display on redirect. Optional, defaults to value set internally by controller, if any.	 * @param   string  $type  Message type. Optional, defaults to 'message' or the type set by a previous call to setMessage.	 *	 * @return  JControllerLegacy  This object to support chaining.	 *	 * @since   12.2	 */	public function setRedirect($url, $msg = null, $type = null)	{		$this->redirect = $url;		if ($msg !== null)		{			// Controller may have set this directly			$this->message = $msg;		}		// Ensure the type is not overwritten by a previous call to setMessage.		if (empty($type))		{			if (empty($this->messageType))			{				$this->messageType = 'message';			}		}		// If the type is explicitly set, set it.		else		{			$this->messageType = $type;		}		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Update class. * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 */class JUpdate extends JObject{	/**	 * @var    string	 * @since  11.1	 */	protected $name;	/**	 * @var    string	 * @since  11.1	 */	protected $description;	/**	 * @var    string	 * @since  11.1	 */	protected $element;	/**	 * @var    string	 * @since  11.1	 */	protected $type;	/**	 * @var    string	 * @since  11.1	 */	protected $version;	/**	 * @var    string	 * @since  11.1	 */	protected $infourl;	/**	 * @var    string	 * @since  11.1	 */	protected $client;	/**	 * @var    string	 * @since  11.1	 */	protected $group;	/**	 * @var    string	 * @since  11.1	 */	protected $downloads;	/**	 * @var    string	 * @since  11.1	 */	protected $tags;	/**	 * @var    string	 * @since  11.1	 */	protected $maintainer;	/**	 * @var    string	 * @since  11.1	 */	protected $maintainerurl;	/**	 * @var    string	 * @since  11.1	 */	protected $category;	/**	 * @var    string	 * @since  11.1	 */	protected $relationships;	/**	 * @var    string	 * @since  11.1	 */	protected $targetplatform;	/**	 * @var    string	 * @since  12.1	 */	protected $xmlParser;	/**	 * @var    array	 * @since  12.1	 */	protected $stack = array('base');	/**	 * @var    array	 * @since  12.1	 */	protected $stateStore = array();	/**	 * @var    stdClass	 * @since  12.1	 */	protected $currentUpdate;	/**	 * @var    stdClass	 * @since  12.1	 */	protected $latest;	/**	 * Gets the reference to the current direct parent	 *	 * @return  object	 *	 * @since   11.1	 */	protected function _getStackLocation()	{		return implode('->', $this->stack);	}	/**	 * Get the last position in stack count	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getLastTag()	{		return $this->stack[count($this->stack) - 1];	}	/**	 * XML Start Element callback	 *	 * @param   object  $parser  Parser object	 * @param   string  $name    Name of the tag found	 * @param   array   $attrs   Attributes of the tag	 *	 * @return  void	 *	 * @note    This is public because it is called externally	 * @since   11.1	 */	public function _startElement($parser, $name, $attrs = array())	{		array_push($this->stack, $name);		$tag = $this->_getStackLocation();		// Reset the data		if (isset($this->$tag))		{			$this->$tag->_data = "";		}		switch ($name)		{			// This is a new update; create a current update			case 'UPDATE':				$this->currentUpdate = new stdClass;				break;			// Don't do anything			case 'UPDATES':				break;			// For everything else there's...the default!			default:				$name = strtolower($name);				if (!isset($this->currentUpdate->$name))				{					$this->currentUpdate->$name = new stdClass;				}				$this->currentUpdate->$name->_data = '';				foreach ($attrs as $key => $data)				{					$key = strtolower($key);					$this->currentUpdate->$name->$key = $data;				}				break;		}	}	/**	 * Callback for closing the element	 *	 * @param   object  $parser  Parser object	 * @param   string  $name    Name of element that was closed	 *	 * @return  void	 *	 * @note This is public because it is called externally	 * @since  11.1	 */	public function _endElement($parser, $name)	{		array_pop($this->stack);		switch ($name)		{			// Closing update, find the latest version and check			case 'UPDATE':				$ver = new JVersion;				$product = strtolower(JFilterInput::getInstance()->clean($ver->PRODUCT, 'cmd'));				// Check for optional min_dev_level and max_dev_level attributes to further specify targetplatform (e.g., 3.0.1)				if (isset($this->currentUpdate->targetplatform->name)					&& $product == $this->currentUpdate->targetplatform->name					&& preg_match('/' . $this->currentUpdate->targetplatform->version . '/', $ver->RELEASE)					&& ((!isset($this->currentUpdate->targetplatform->min_dev_level)) || $ver->DEV_LEVEL >= $this->currentUpdate->targetplatform->min_dev_level)					&& ((!isset($this->currentUpdate->targetplatform->max_dev_level)) || $ver->DEV_LEVEL <= $this->currentUpdate->targetplatform->max_dev_level))				{					if (isset($this->latest))					{						if (version_compare($this->currentUpdate->version->_data, $this->latest->version->_data, '>') == 1)						{							$this->latest = $this->currentUpdate;						}					}					else					{						$this->latest = $this->currentUpdate;					}				}				break;			case 'UPDATES':				// If the latest item is set then we transfer it to where we want to				if (isset($this->latest))				{					foreach (get_object_vars($this->latest) as $key => $val)					{						$this->$key = $val;					}					unset($this->latest);					unset($this->currentUpdate);				}				elseif (isset($this->currentUpdate))				{					// The update might be for an older version of j!					unset($this->currentUpdate);				}				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $data    The data.	 *	 * @return  void	 *	 * @note    This is public because its called externally.	 * @since   11.1	 */	public function _characterData($parser, $data)	{		$tag = $this->_getLastTag();		// @todo remove code: if(!isset($this->$tag->_data)) $this->$tag->_data = '';		// @todo remove code: $this->$tag->_data .= $data;		// Throw the data for this item together		$tag = strtolower($tag);		if (isset($this->currentUpdate->$tag))		{			$this->currentUpdate->$tag->_data .= $data;		}	}	/**	 * Loads an XML file from a URL.	 *	 * @param   string  $url  The URL.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function loadFromXML($url)	{		$http = JHttpFactory::getHttp();		$response = $http->get($url);		if (200 != $response->code)		{			// TODO: Add a 'mark bad' setting here somehow			JLog::add(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_OPEN_URL', $url), JLog::WARNING, 'jerror');			return false;		}		$this->xmlParser = xml_parser_create('');		xml_set_object($this->xmlParser, $this);		xml_set_element_handler($this->xmlParser, '_startElement', '_endElement');		xml_set_character_data_handler($this->xmlParser, '_characterData');		if (!xml_parse($this->xmlParser, $response->body))		{			die(				sprintf(					"XML error: %s at line %d", xml_error_string(xml_get_error_code($this->xmlParser)),					xml_get_current_line_number($this->xmlParser)				)			);		}		xml_parser_free($this->xmlParser);		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a button to render an HTML element in a slider container * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonSlider extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Slider';	/**	 * Fetch the HTML for the button	 *	 * @param   string   $type     Unused string, formerly button type.	 * @param   string   $name     Button name	 * @param   string   $text     The link text	 * @param   string   $url      URL for popup	 * @param   integer  $width    Width of popup	 * @param   integer  $height   Height of popup	 * @param   string   $onClose  JavaScript for the onClose event.	 *	 * @return  string  HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Slider', $name = '', $text = '', $url = '', $width = 640, $height = 480, $onClose = '')	{		JHtml::_('script', 'jui/cms.js', false, true);		$text = JText::_($text);		$class = 'cog';		$doTask = $this->_getCommand($url);		$html = "<button class=\"btn btn-small\" data-toggle=\"collapse\" data-target=\"#collapse-" . $name . "\" rel=\"{onClose: function() {" . $onClose			. "}}\" onClick=\"Joomla.setcollapse('$doTask', '$name', '$height');\">\n";		$html .= "<i class=\"icon-$class\">\n";		$html .= "</i>\n";		$html .= "$text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button id	 *	 * @param   string  $type  Button type	 * @param   string  $name  Button name	 *	 * @return  string	Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type, $name)	{		return $this->_parent->getName() . '-slider-' . $name;	}	/**	 * Get the JavaScript command for the button	 *	 * @param   string  $url  URL for popup	 *	 * @return  string  JavaScript command string	 *	 * @since   3.0	 */	private function _getCommand($url)	{		if (substr($url, 0, 4) !== 'http')		{			$url = JURI::base() . $url;		}		return $url;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Table class supporting modified pre-order tree traversal behavior. * * @package     Joomla.Platform * @subpackage  Table * @link        http://docs.joomla.org/JTableNested * @since       11.1 */class JTableNested extends JTable{	/**	 * Object property holding the primary key of the parent node.  Provides	 * adjacency list data for nodes.	 *	 * @var    integer	 * @since  11.1	 */	public $parent_id;	/**	 * Object property holding the depth level of the node in the tree.	 *	 * @var    integer	 * @since  11.1	 */	public $level;	/**	 * Object property holding the left value of the node for managing its	 * placement in the nested sets tree.	 *	 * @var    integer	 * @since  11.1	 */	public $lft;	/**	 * Object property holding the right value of the node for managing its	 * placement in the nested sets tree.	 *	 * @var    integer	 * @since  11.1	 */	public $rgt;	/**	 * Object property holding the alias of this node used to constuct the	 * full text path, forward-slash delimited.	 *	 * @var    string	 * @since  11.1	 */	public $alias;	/**	 * Object property to hold the location type to use when storing the row.	 * Possible values are: ['before', 'after', 'first-child', 'last-child'].	 *	 * @var    string	 * @since  11.1	 */	protected $_location;	/**	 * Object property to hold the primary key of the location reference node to	 * use when storing the row.  A combination of location type and reference	 * node describes where to store the current node in the tree.	 *	 * @var    integer	 * @since  11.1	 */	protected $_location_id;	/**	 * An array to cache values in recursive processes.	 *	 * @var    array	 * @since  11.1	 */	protected $_cache = array();	/**	 * Debug level	 *	 * @var    integer	 * @since  11.1	 */	protected $_debug = 0;	/**	 * Sets the debug level on or off	 *	 * @param   integer  $level  0 = off, 1 = on	 *	 * @return  void	 *	 * @since   11.1	 */	public function debug($level)	{		$this->_debug = (int) $level;	}	/**	 * Method to get an array of nodes from a given node to its root.	 *	 * @param   integer  $pk          Primary key of the node for which to get the path.	 * @param   boolean  $diagnostic  Only select diagnostic data for the nested sets.	 *	 * @return  mixed    An array of node objects including the start node.	 *	 * @since   11.1	 * @throws  RuntimeException on database error	 */	public function getPath($pk = null, $diagnostic = false)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Get the path from the node to the root.		$query = $this->_db->getQuery(true);		$select = ($diagnostic) ? 'p.' . $k . ', p.parent_id, p.level, p.lft, p.rgt' : 'p.*';		$query->select($select)			->from($this->_tbl . ' AS n, ' . $this->_tbl . ' AS p')			->where('n.lft BETWEEN p.lft AND p.rgt')			->where('n.' . $k . ' = ' . (int) $pk)			->order('p.lft');		$this->_db->setQuery($query);		return $this->_db->loadObjectList();	}	/**	 * Method to get a node and all its child nodes.	 *	 * @param   integer  $pk          Primary key of the node for which to get the tree.	 * @param   boolean  $diagnostic  Only select diagnostic data for the nested sets.	 *	 * @return  mixed    Boolean false on failure or array of node objects on success.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function getTree($pk = null, $diagnostic = false)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Get the node and children as a tree.		$query = $this->_db->getQuery(true);		$select = ($diagnostic) ? 'n.' . $k . ', n.parent_id, n.level, n.lft, n.rgt' : 'n.*';		$query->select($select)			->from($this->_tbl . ' AS n, ' . $this->_tbl . ' AS p')			->where('n.lft BETWEEN p.lft AND p.rgt')			->where('p.' . $k . ' = ' . (int) $pk)			->order('n.lft');		return $this->_db->setQuery($query)->loadObjectList();	}	/**	 * Method to determine if a node is a leaf node in the tree (has no children).	 *	 * @param   integer  $pk  Primary key of the node to check.	 *	 * @return  boolean  True if a leaf node, false if not or null if the node does not exist.	 *	 * @note    Since 12.1 this method returns null if the node does not exist.	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function isLeaf($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		$node = $this->_getNode($pk);		// Get the node by primary key.		if (empty($node))		{			// Error message set in getNode method.			return null;		}		// The node is a leaf node.		return (($node->rgt - $node->lft) == 1);	}	/**	 * Method to set the location of a node in the tree object.  This method does not	 * save the new location to the database, but will set it in the object so	 * that when the node is stored it will be stored in the new location.	 *	 * @param   integer  $referenceId  The primary key of the node to reference new location by.	 * @param   string   $position     Location type string. ['before', 'after', 'first-child', 'last-child']	 *	 * @return  void	 *	 * @note    Since 12.1 this method returns void and throws an InvalidArgumentException when an invalid position is passed.	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public function setLocation($referenceId, $position = 'after')	{		// Make sure the location is valid.		if (($position != 'before') && ($position != 'after') && ($position != 'first-child') && ($position != 'last-child'))		{			throw new InvalidArgumentException(sprintf('%s::setLocation(%d, *%s*)', get_class($this), $referenceId, $position));		}		// Set the location properties.		$this->_location = $position;		$this->_location_id = $referenceId;	}	/**	 * Method to move a row in the ordering sequence of a group of rows defined by an SQL WHERE clause.	 * Negative numbers move the row up in the sequence and positive numbers move it down.	 *	 * @param   integer  $delta  The direction and magnitude to move the row in the ordering sequence.	 * @param   string   $where  WHERE clause to use for limiting the selection of rows to compact the	 * ordering values.	 *	 * @return  mixed    Boolean true on success.	 *	 * @link    http://docs.joomla.org/JTable/move	 * @since   11.1	 */	public function move($delta, $where = '')	{		$k = $this->_tbl_key;		$pk = $this->$k;		$query = $this->_db->getQuery(true)			->select($k)			->from($this->_tbl)			->where('parent_id = ' . $this->parent_id);		if ($where)		{			$query->where($where);		}		$position = 'after';		if ($delta > 0)		{			$query->where('rgt > ' . $this->rgt)				->order('rgt ASC');			$position = 'after';		}		else		{			$query->where('lft < ' . $this->lft)				->order('lft DESC');			$position = 'before';		}		$this->_db->setQuery($query);		$referenceId = $this->_db->loadResult();		if ($referenceId)		{			return $this->moveByReference($referenceId, $position, $pk);		}		else		{			return false;		}	}	/**	 * Method to move a node and its children to a new location in the tree.	 *	 * @param   integer  $referenceId  The primary key of the node to reference new location by.	 * @param   string   $position     Location type string. ['before', 'after', 'first-child', 'last-child']	 * @param   integer  $pk           The primary key of the node to move.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTableNested/moveByReference	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function moveByReference($referenceId, $position = 'after', $pk = null)	{		// @codeCoverageIgnoreStart		if ($this->_debug)		{			echo "\nMoving ReferenceId:$referenceId, Position:$position, PK:$pk";		}		// @codeCoverageIgnoreEnd		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Get the node by id.		if (!$node = $this->_getNode($pk))		{			// Error message set in getNode method.			return false;		}		// Get the ids of child nodes.		$query = $this->_db->getQuery(true)			->select($k)			->from($this->_tbl)			->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);		$children = $this->_db->setQuery($query)->loadColumn();		// @codeCoverageIgnoreStart		if ($this->_debug)		{			$this->_logtable(false);		}		// @codeCoverageIgnoreEnd		// Cannot move the node to be a child of itself.		if (in_array($referenceId, $children))		{			$e = new UnexpectedValueException(				sprintf('%s::moveByReference(%d, %s, %d) parenting to child.', get_class($this), $referenceId, $position, $pk)			);			$this->setError($e);			return false;		}		// Lock the table for writing.		if (!$this->_lock())		{			return false;		}		/*		 * Move the sub-tree out of the nested sets by negating its left and right values.		 */		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('lft = lft * (-1), rgt = rgt * (-1)')			->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		/*		 * Close the hole in the tree that was opened by removing the sub-tree from the nested sets.		 */		// Compress the left values.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('lft = lft - ' . (int) $node->width)			->where('lft > ' . (int) $node->rgt);		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		// Compress the right values.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('rgt = rgt - ' . (int) $node->width)			->where('rgt > ' . (int) $node->rgt);		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		// We are moving the tree relative to a reference node.		if ($referenceId)		{			// Get the reference node by primary key.			if (!$reference = $this->_getNode($referenceId))			{				// Error message set in getNode method.				$this->_unlock();				return false;			}			// Get the reposition data for shifting the tree and re-inserting the node.			if (!$repositionData = $this->_getTreeRepositionData($reference, $node->width, $position))			{				// Error message set in getNode method.				$this->_unlock();				return false;			}		}		// We are moving the tree to be the last child of the root node		else		{			// Get the last root node as the reference node.			$query = $this->_db->getQuery(true)				->select($this->_tbl_key . ', parent_id, level, lft, rgt')				->from($this->_tbl)				->where('parent_id = 0')				->order('lft DESC');			$this->_db->setQuery($query, 0, 1);			$reference = $this->_db->loadObject();			// @codeCoverageIgnoreStart			if ($this->_debug)			{				$this->_logtable(false);			}			// @codeCoverageIgnoreEnd			// Get the reposition data for re-inserting the node after the found root.			if (!$repositionData = $this->_getTreeRepositionData($reference, $node->width, 'last-child'))			{				// Error message set in getNode method.				$this->_unlock();				return false;			}		}		/*		 * Create space in the nested sets at the new location for the moved sub-tree.		 */		// Shift left values.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('lft = lft + ' . (int) $node->width)			->where($repositionData->left_where);		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		// Shift right values.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('rgt = rgt + ' . (int) $node->width)			->where($repositionData->right_where);		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		/*		 * Calculate the offset between where the node used to be in the tree and		 * where it needs to be in the tree for left ids (also works for right ids).		 */		$offset = $repositionData->new_lft - $node->lft;		$levelOffset = $repositionData->new_level - $node->level;		// Move the nodes back into position in the tree using the calculated offsets.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('rgt = ' . (int) $offset . ' - rgt')			->set('lft = ' . (int) $offset . ' - lft')			->set('level = level + ' . (int) $levelOffset)			->where('lft < 0');		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		// Set the correct parent id for the moved node if required.		if ($node->parent_id != $repositionData->new_parent_id)		{			$query = $this->_db->getQuery(true)				->update($this->_tbl);			// Update the title and alias fields if they exist for the table.			$fields = $this->getFields();			if (property_exists($this, 'title') && $this->title !== null)			{				$query->set('title = ' . $this->_db->quote($this->title));			}			if (array_key_exists('alias', $fields)  && $this->alias !== null)			{				$query->set('alias = ' . $this->_db->quote($this->alias));			}			$query->set('parent_id = ' . (int) $repositionData->new_parent_id)				->where($this->_tbl_key . ' = ' . (int) $node->$k);			$this->_db->setQuery($query);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		}		// Unlock the table for writing.		$this->_unlock();		// Set the object values.		$this->parent_id = $repositionData->new_parent_id;		$this->level = $repositionData->new_level;		$this->lft = $repositionData->new_lft;		$this->rgt = $repositionData->new_rgt;		return true;	}	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function delete($pk = null, $children = true)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Lock the table for writing.		if (!$this->_lock())		{			// Error message set in lock method.			return false;		}		// If tracking assets, remove the asset first.		if ($this->_trackAssets)		{			$name = $this->_getAssetName();			$asset = JTable::getInstance('Asset');			// Lock the table for writing.			if (!$asset->_lock())			{				// Error message set in lock method.				return false;			}			if ($asset->loadByName($name))			{				// Delete the node in assets table.				if (!$asset->delete(null, $children))				{					$this->setError($asset->getError());					$asset->_unlock();					return false;				}				$asset->_unlock();			}			else			{				$this->setError($asset->getError());				$asset->_unlock();				return false;			}		}		// Get the node by id.		$node = $this->_getNode($pk);		if (empty($node))		{			// Error message set in getNode method.			$this->_unlock();			return false;		}		// Should we delete all children along with the node?		if ($children)		{			// Delete the node and all of its children.			$query = $this->_db->getQuery(true)				->delete($this->_tbl)				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Compress the left values.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('lft = lft - ' . (int) $node->width)				->where('lft > ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Compress the right values.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('rgt = rgt - ' . (int) $node->width)				->where('rgt > ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');		}		// Leave the children and move them up a level.		else		{			// Delete the node.			$query = $this->_db->getQuery(true)				->delete($this->_tbl)				->where('lft = ' . (int) $node->lft);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Shift all node's children up a level.			$query->clear()				->update($this->_tbl)				->set('lft = lft - 1')				->set('rgt = rgt - 1')				->set('level = level - 1')				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Adjust all the parent values for direct children of the deleted node.			$query->clear()				->update($this->_tbl)				->set('parent_id = ' . (int) $node->parent_id)				->where('parent_id = ' . (int) $node->$k);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Shift all of the left values that are right of the node.			$query->clear()				->update($this->_tbl)				->set('lft = lft - 2')				->where('lft > ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Shift all of the right values that are right of the node.			$query->clear()				->update($this->_tbl)				->set('rgt = rgt - 2')				->where('rgt > ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');		}		// Unlock the table for writing.		$this->_unlock();		return true;	}	/**	 * Checks that the object is valid and able to be stored.	 *	 * This method checks that the parent_id is non-zero and exists in the database.	 * Note that the root node (parent_id = 0) cannot be manipulated with this class.	 *	 * @return  boolean  True if all checks pass.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function check()	{		$this->parent_id = (int) $this->parent_id;		// Set up a mini exception handler.		try		{			// Check that the parent_id field is valid.			if ($this->parent_id == 0)			{				throw new UnexpectedValueException(sprintf('Invalid `parent_id` [%d] in %s', $this->parent_id, get_class($this)));			}			$query = $this->_db->getQuery(true)				->select('COUNT(' . $this->_tbl_key . ')')				->from($this->_tbl)				->where($this->_tbl_key . ' = ' . $this->parent_id);			if (!$this->_db->setQuery($query)->loadResult())			{				throw new UnexpectedValueException(sprintf('Invalid `parent_id` [%d] in %s', $this->parent_id, get_class($this)));			}		}		catch (UnexpectedValueException $e)		{			// Validation error - record it and return false.			$this->setError($e);			return false;		}		// @codeCoverageIgnoreStart		catch (Exception $e)		{			// Database error - rethrow.			throw $e;		}		// @codeCoverageIgnoreEnd		return true;	}	/**	 * Method to store a node in the database table.	 *	 * @param   boolean  $updateNulls  True to update null values as well.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTableNested/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		$k = $this->_tbl_key;		// @codeCoverageIgnoreStart		if ($this->_debug)		{			echo "\n" . get_class($this) . "::store\n";			$this->_logtable(true, false);		}		// @codeCoverageIgnoreEnd		/*		 * If the primary key is empty, then we assume we are inserting a new node into the		 * tree.  From this point we would need to determine where in the tree to insert it.		 */		if (empty($this->$k))		{			/*			 * We are inserting a node somewhere in the tree with a known reference			 * node.  We have to make room for the new node and set the left and right			 * values before we insert the row.			 */			if ($this->_location_id >= 0)			{				// Lock the table for writing.				if (!$this->_lock())				{					// Error message set in lock method.					return false;				}				// We are inserting a node relative to the last root node.				if ($this->_location_id == 0)				{					// Get the last root node as the reference node.					$query = $this->_db->getQuery(true)						->select($this->_tbl_key . ', parent_id, level, lft, rgt')						->from($this->_tbl)						->where('parent_id = 0')						->order('lft DESC');					$this->_db->setQuery($query, 0, 1);					$reference = $this->_db->loadObject();					// @codeCoverageIgnoreStart					if ($this->_debug)					{						$this->_logtable(false);					}					// @codeCoverageIgnoreEnd				}				// We have a real node set as a location reference.				else				{					// Get the reference node by primary key.					if (!$reference = $this->_getNode($this->_location_id))					{						// Error message set in getNode method.						$this->_unlock();						return false;					}				}				// Get the reposition data for shifting the tree and re-inserting the node.				if (!($repositionData = $this->_getTreeRepositionData($reference, 2, $this->_location)))				{					// Error message set in getNode method.					$this->_unlock();					return false;				}				// Create space in the tree at the new location for the new node in left ids.				$query = $this->_db->getQuery(true)					->update($this->_tbl)					->set('lft = lft + 2')					->where($repositionData->left_where);				$this->_runQuery($query, 'JLIB_DATABASE_ERROR_STORE_FAILED');				// Create space in the tree at the new location for the new node in right ids.				$query = $this->_db->getQuery(true)					->update($this->_tbl)					->set('rgt = rgt + 2')					->where($repositionData->right_where);				$this->_runQuery($query, 'JLIB_DATABASE_ERROR_STORE_FAILED');				// Set the object values.				$this->parent_id = $repositionData->new_parent_id;				$this->level = $repositionData->new_level;				$this->lft = $repositionData->new_lft;				$this->rgt = $repositionData->new_rgt;			}			else			{				// Negative parent ids are invalid				$e = new UnexpectedValueException(sprintf('%s::store() used a negative _location_id', get_class($this)));				$this->setError($e);				return false;			}		}		/*		 * If we have a given primary key then we assume we are simply updating this		 * node in the tree.  We should assess whether or not we are moving the node		 * or just updating its data fields.		 */		else		{			// If the location has been set, move the node to its new location.			if ($this->_location_id > 0)			{				if (!$this->moveByReference($this->_location_id, $this->_location, $this->$k))				{					// Error message set in move method.					return false;				}			}			// Lock the table for writing.			if (!$this->_lock())			{				// Error message set in lock method.				return false;			}		}		// Store the row to the database.		if (!parent::store($updateNulls))		{			$this->_unlock();			return false;		}		// @codeCoverageIgnoreStart		if ($this->_debug)		{			$this->_logtable();		}		// @codeCoverageIgnoreEnd		// Unlock the table for writing.		$this->_unlock();		return true;	}	/**	 * Method to set the publishing state for a node or list of nodes in the database	 * table.  The method respects rows checked out by other users and will attempt	 * to checkin rows that it can after adjustments are made. The method will not	 * allow you to set a publishing state higher than any ancestor node and will	 * not allow you to set a publishing state on a node with a checked out child.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not	 *                            set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTableNested/publish	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If $state > 1, then we allow state changes even if an ancestor has lower state		// (for example, can change a child state to Archived (2) if an ancestor is Published (1)		$compareState = ($state > 1) ? 1 : $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = explode(',', $this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$e = new UnexpectedValueException(sprintf(__CLASS__ . '::' . __FUNCTION__ . '(%s, %d, %d) empty.', get_class($this), $state, $userId));				$this->setError($e);				return false;			}		}		// Determine if there is checkout support for the table.		$checkoutSupport = (property_exists($this, 'checked_out') || property_exists($this, 'checked_out_time'));		// Iterate over the primary keys to execute the publish action if possible.		foreach ($pks as $pk)		{			// Get the node by primary key.			if (!$node = $this->_getNode($pk))			{				// Error message set in getNode method.				return false;			}			// If the table has checkout support, verify no children are checked out.			if ($checkoutSupport)			{				// Ensure that children are not checked out.				$query = $this->_db->getQuery(true)					->select('COUNT(' . $k . ')')					->from($this->_tbl)					->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt)					->where('(checked_out <> 0 AND checked_out <> ' . (int) $userId . ')');				$this->_db->setQuery($query);				// Check for checked out children.				if ($this->_db->loadResult())				{					// TODO Convert to a conflict exception when available.					$pksImploded = implode(',', $pks);					$e = new RuntimeException(sprintf(__CLASS__ . '::' . __FUNCTION__ . '(%s, %d, %d) checked-out conflict.', get_class($this), $implodedPks, $state, $userId));					$this->setError($e);					return false;				}			}			// If any parent nodes have lower published state values, we cannot continue.			if ($node->parent_id)			{				// Get any ancestor nodes that have a lower publishing state.				$query = $this->_db->getQuery(true)					->select('n.' . $k)					->from($this->_db->quoteName($this->_tbl) . ' AS n')					->where('n.lft < ' . (int) $node->lft)					->where('n.rgt > ' . (int) $node->rgt)					->where('n.parent_id > 0')					->where('n.published < ' . (int) $compareState);				// Just fetch one row (one is one too many).				$this->_db->setQuery($query, 0, 1);				$rows = $this->_db->loadColumn();					if (!empty($rows))					{						$pksImploded = implode(',', $pks);						throw new UnexpectedValueException(							sprintf(__CLASS__ . '::' . __FUNCTION__ . '(%s, %d, %d) ancestors have lower state.', $pksImploded, $state, $userId)						);					}			}			// Update and cascade the publishing state.			$query = $this->_db->getQuery(true)				->update($this->_db->quoteName($this->_tbl))				->set('published = ' . (int) $state)				->where('(lft > ' . (int) $node->lft . ' AND rgt < ' . (int) $node->rgt . ') OR ' . $k . ' = ' . (int) $pk);			$this->_db->setQuery($query)->execute();			// If checkout support exists for the object, check the row in.			if ($checkoutSupport)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->published = $state;		}		$this->setError('');		return true;	}	/**	 * Method to move a node one position to the left in the same level.	 *	 * @param   integer  $pk  Primary key of the node to move.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function orderUp($pk)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Lock the table for writing.		if (!$this->_lock())		{			// Error message set in lock method.			return false;		}		// Get the node by primary key.		$node = $this->_getNode($pk);		if (empty($node))		{			// Error message set in getNode method.			$this->_unlock();			return false;		}		// Get the left sibling node.		$sibling = $this->_getNode($node->lft - 1, 'right');		if (empty($sibling))		{			// Error message set in getNode method.			$this->_unlock();			return false;		}		try		{			// Get the primary keys of child nodes.			$query = $this->_db->getQuery(true)				->select($this->_tbl_key)				->from($this->_tbl)				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$children = $this->_db->setQuery($query)->loadColumn();			// Shift left and right values for the node and it's children.			$query->clear()				->update($this->_tbl)				->set('lft = lft - ' . (int) $sibling->width)				->set('rgt = rgt - ' . (int) $sibling->width)				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$this->_db->setQuery($query)->execute();			// Shift left and right values for the sibling and it's children.			$query->clear()				->update($this->_tbl)				->set('lft = lft + ' . (int) $node->width)				->set('rgt = rgt + ' . (int) $node->width)				->where('lft BETWEEN ' . (int) $sibling->lft . ' AND ' . (int) $sibling->rgt)				->where($this->_tbl_key . ' NOT IN (' . implode(',', $children) . ')');			$this->_db->setQuery($query)->execute();		}		catch (RuntimeException $e)		{			$this->_unlock();			throw $e;		}		// Unlock the table for writing.		$this->_unlock();		return true;	}	/**	 * Method to move a node one position to the right in the same level.	 *	 * @param   integer  $pk  Primary key of the node to move.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function orderDown($pk)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Lock the table for writing.		if (!$this->_lock())		{			// Error message set in lock method.			return false;		}		// Get the node by primary key.		$node = $this->_getNode($pk);		if (empty($node))		{			// Error message set in getNode method.			$this->_unlock();			return false;		}		$query = $this->_db->getQuery(true);		// Get the right sibling node.		$sibling = $this->_getNode($node->rgt + 1, 'left');		if (empty($sibling))		{			// Error message set in getNode method.			$query->_unlock($this->_db);			$this->_locked = false;			return false;		}		try		{			// Get the primary keys of child nodes.			$query->clear()				->select($this->_tbl_key)				->from($this->_tbl)				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$this->_db->setQuery($query);			$children = $this->_db->loadColumn();			// Shift left and right values for the node and it's children.			$query->clear()				->update($this->_tbl)				->set('lft = lft + ' . (int) $sibling->width)				->set('rgt = rgt + ' . (int) $sibling->width)				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$this->_db->setQuery($query)->execute();			// Shift left and right values for the sibling and it's children.			$query->clear()				->update($this->_tbl)				->set('lft = lft - ' . (int) $node->width)				->set('rgt = rgt - ' . (int) $node->width)				->where('lft BETWEEN ' . (int) $sibling->lft . ' AND ' . (int) $sibling->rgt)				->where($this->_tbl_key . ' NOT IN (' . implode(',', $children) . ')');			$this->_db->setQuery($query)->execute();		}		catch (RuntimeException $e)		{			$this->_unlock();			throw $e;		}		// Unlock the table for writing.		$this->_unlock();		return true;	}	/**	 * Gets the ID of the root item in the tree	 *	 * @return  mixed  The primary id of the root row, or false if not found and the internal error is set.	 *	 * @since   11.1	 */	public function getRootId()	{		// Get the root item.		$k = $this->_tbl_key;		// Test for a unique record with parent_id = 0		$query = $this->_db->getQuery(true)			->select($k)			->from($this->_tbl)			->where('parent_id = 0');		$result = $this->_db->setQuery($query)->loadColumn();		if (count($result) == 1)		{			return $result[0];		}		// Test for a unique record with lft = 0		$query = $this->_db->getQuery(true)			->select($k)			->from($this->_tbl)			->where('lft = 0');		$result = $this->_db->setQuery($query)->loadColumn();		if (count($result) == 1)		{			return $result[0];		}		$fields = $this->getFields();		if (array_key_exists('alias', $fields))		{			// Test for a unique record alias = root			$query = $this->_db->getQuery(true)				->select($k)				->from($this->_tbl)				->where('alias = ' . $this->_db->quote('root'));			$result = $this->_db->setQuery($query)->loadColumn();			if (count($result) == 1)			{				return $result[0];			}		}		$e = new UnexpectedValueException(sprintf('%s::getRootId', get_class($this)));		$this->setError($e);		return false;	}	/**	 * Method to recursively rebuild the whole nested set tree.	 *	 * @param   integer  $parentId  The root of the tree to rebuild.	 * @param   integer  $leftId    The left id to start with in building the tree.	 * @param   integer  $level     The level to assign to the current nodes.	 * @param   string   $path      The path to the current nodes.	 *	 * @return  integer  1 + value of root rgt on success, false on failure	 *	 * @link    http://docs.joomla.org/JTableNested/rebuild	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function rebuild($parentId = null, $leftId = 0, $level = 0, $path = '')	{		// If no parent is provided, try to find it.		if ($parentId === null)		{			// Get the root item.			$parentId = $this->getRootId();			if ($parentId === false)			{				return false;			}		}		// Build the structure of the recursive query.		if (!isset($this->_cache['rebuild.sql']))		{			$query = $this->_db->getQuery(true)				->select($this->_tbl_key . ', alias')				->from($this->_tbl)				->where('parent_id = %d');			// If the table has an ordering field, use that for ordering.			if (property_exists($this, 'ordering'))			{				$query->order('parent_id, ordering, lft');			}			else			{				$query->order('parent_id, lft');			}			$this->_cache['rebuild.sql'] = (string) $query;		}		// Make a shortcut to database object.		// Assemble the query to find all children of this node.		$this->_db->setQuery(sprintf($this->_cache['rebuild.sql'], (int) $parentId));		$children = $this->_db->loadObjectList();		// The right value of this node is the left value + 1		$rightId = $leftId + 1;		// Execute this function recursively over all children		foreach ($children as $node)		{			/*			 * $rightId is the current right value, which is incremented on recursion return.			 * Increment the level for the children.			 * Add this item's alias to the path (but avoid a leading /)			 */			$rightId = $this->rebuild($node->{$this->_tbl_key}, $rightId, $level + 1, $path . (empty($path) ? '' : '/') . $node->alias);			// If there is an update failure, return false to break out of the recursion.			if ($rightId === false)			{				return false;			}		}		// We've got the left value, and now that we've processed		// the children of this node we also know the right value.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('lft = ' . (int) $leftId)			->set('rgt = ' . (int) $rightId)			->set('level = ' . (int) $level)			->set('path = ' . $this->_db->quote($path))			->where($this->_tbl_key . ' = ' . (int) $parentId);		$this->_db->setQuery($query)->execute();		// Return the right value of this node + 1.		return $rightId + 1;	}	/**	 * Method to rebuild the node's path field from the alias values of the	 * nodes from the current node to the root node of the tree.	 *	 * @param   integer  $pk  Primary key of the node for which to get the path.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTableNested/rebuildPath	 * @since   11.1	 */	public function rebuildPath($pk = null)	{		$fields = $this->getFields();		// If there is no alias or path field, just return true.		if (!array_key_exists('alias', $fields) || !array_key_exists('path', $fields))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Get the aliases for the path from the node to the root node.		$query = $this->_db->getQuery(true)			->select('p.alias')			->from($this->_tbl . ' AS n, ' . $this->_tbl . ' AS p')			->where('n.lft BETWEEN p.lft AND p.rgt')			->where('n.' . $this->_tbl_key . ' = ' . (int) $pk)			->order('p.lft');		$this->_db->setQuery($query);		$segments = $this->_db->loadColumn();		// Make sure to remove the root path if it exists in the list.		if ($segments[0] == 'root')		{			array_shift($segments);		}		// Build the path.		$path = trim(implode('/', $segments), ' /\\');		// Update the path field for the node.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('path = ' . $this->_db->quote($path))			->where($this->_tbl_key . ' = ' . (int) $pk);		$this->_db->setQuery($query)->execute();		// Update the current record's path to the new one:		$this->path = $path;		return true;	}	/**	 * Method to update order of table rows	 *	 * @param   array  $idArray    id numbers of rows to be reordered.	 * @param   array  $lft_array  lft values of rows to be reordered.	 *	 * @return  integer  1 + value of root rgt on success, false on failure.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function saveorder($idArray = null, $lft_array = null)	{		try		{			$query = $this->_db->getQuery(true);			// Validate arguments			if (is_array($idArray) && is_array($lft_array) && count($idArray) == count($lft_array))			{				for ($i = 0, $count = count($idArray); $i < $count; $i++)				{					// Do an update to change the lft values in the table for each id					$query->clear()						->update($this->_tbl)						->where($this->_tbl_key . ' = ' . (int) $idArray[$i])						->set('lft = ' . (int) $lft_array[$i]);					$this->_db->setQuery($query)->execute();					// @codeCoverageIgnoreStart					if ($this->_debug)					{						$this->_logtable();					}					// @codeCoverageIgnoreEnd				}				return $this->rebuild();			}			else			{				return false;			}		}		catch (Exception $e)		{			$this->_unlock();			throw $e;		}	}	/**	 * Method to get nested set properties for a node in the tree.	 *	 * @param   integer  $id   Value to look up the node by.	 * @param   string   $key  An optional key to look up the node by (parent | left | right).	 *                         If omitted, the primary key of the table is used.	 *	 * @return  mixed    Boolean false on failure or node object on success.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	protected function _getNode($id, $key = null)	{		// Determine which key to get the node base on.		switch ($key)		{			case 'parent':				$k = 'parent_id';				break;			case 'left':				$k = 'lft';				break;			case 'right':				$k = 'rgt';				break;			default:				$k = $this->_tbl_key;				break;		}		// Get the node data.		$query = $this->_db->getQuery(true)			->select($this->_tbl_key . ', parent_id, level, lft, rgt')			->from($this->_tbl)			->where($k . ' = ' . (int) $id);		$row = $this->_db->setQuery($query, 0, 1)->loadObject();		// Check for no $row returned		if (empty($row))		{			$e = new UnexpectedValueException(sprintf('%s::_getNode(%d, %s) failed.', get_class($this), $id, $key));			$this->setError($e);			return false;		}		// Do some simple calculations.		$row->numChildren = (int) ($row->rgt - $row->lft - 1) / 2;		$row->width = (int) $row->rgt - $row->lft + 1;		return $row;	}	/**	 * Method to get various data necessary to make room in the tree at a location	 * for a node and its children.  The returned data object includes conditions	 * for SQL WHERE clauses for updating left and right id values to make room for	 * the node as well as the new left and right ids for the node.	 *	 * @param   object   $referenceNode  A node object with at least a 'lft' and 'rgt' with	 *                                   which to make room in the tree around for a new node.	 * @param   integer  $nodeWidth      The width of the node for which to make room in the tree.	 * @param   string   $position       The position relative to the reference node where the room	 * should be made.	 *	 * @return  mixed    Boolean false on failure or data object on success.	 *	 * @since   11.1	 */	protected function _getTreeRepositionData($referenceNode, $nodeWidth, $position = 'before')	{		// Make sure the reference an object with a left and right id.		if (!is_object($referenceNode) || !(isset($referenceNode->lft) && isset($referenceNode->rgt)))		{			return false;		}		// A valid node cannot have a width less than 2.		if ($nodeWidth < 2)		{			return false;		}		$k = $this->_tbl_key;		$data = new stdClass;		// Run the calculations and build the data object by reference position.		switch ($position)		{			case 'first-child':				$data->left_where = 'lft > ' . $referenceNode->lft;				$data->right_where = 'rgt >= ' . $referenceNode->lft;				$data->new_lft = $referenceNode->lft + 1;				$data->new_rgt = $referenceNode->lft + $nodeWidth;				$data->new_parent_id = $referenceNode->$k;				$data->new_level = $referenceNode->level + 1;				break;			case 'last-child':				$data->left_where = 'lft > ' . ($referenceNode->rgt);				$data->right_where = 'rgt >= ' . ($referenceNode->rgt);				$data->new_lft = $referenceNode->rgt;				$data->new_rgt = $referenceNode->rgt + $nodeWidth - 1;				$data->new_parent_id = $referenceNode->$k;				$data->new_level = $referenceNode->level + 1;				break;			case 'before':				$data->left_where = 'lft >= ' . $referenceNode->lft;				$data->right_where = 'rgt >= ' . $referenceNode->lft;				$data->new_lft = $referenceNode->lft;				$data->new_rgt = $referenceNode->lft + $nodeWidth - 1;				$data->new_parent_id = $referenceNode->parent_id;				$data->new_level = $referenceNode->level;				break;			default:			case 'after':				$data->left_where = 'lft > ' . $referenceNode->rgt;				$data->right_where = 'rgt > ' . $referenceNode->rgt;				$data->new_lft = $referenceNode->rgt + 1;				$data->new_rgt = $referenceNode->rgt + $nodeWidth;				$data->new_parent_id = $referenceNode->parent_id;				$data->new_level = $referenceNode->level;				break;		}		// @codeCoverageIgnoreStart		if ($this->_debug)		{			echo "\nRepositioning Data for $position" . "\n-----------------------------------" . "\nLeft Where:    $data->left_where"				. "\nRight Where:   $data->right_where" . "\nNew Lft:       $data->new_lft" . "\nNew Rgt:       $data->new_rgt"				. "\nNew Parent ID: $data->new_parent_id" . "\nNew Level:     $data->new_level" . "\n";		}		// @codeCoverageIgnoreEnd		return $data;	}	/**	 * Method to create a log table in the buffer optionally showing the query and/or data.	 *	 * @param   boolean  $showData   True to show data	 * @param   boolean  $showQuery  True to show query	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	protected function _logtable($showData = true, $showQuery = true)	{		$sep = "\n" . str_pad('', 40, '-');		$buffer = '';		if ($showQuery)		{			$buffer .= "\n" . $this->_db->getQuery() . $sep;		}		if ($showData)		{			$query = $this->_db->getQuery(true)				->select($this->_tbl_key . ', parent_id, lft, rgt, level')				->from($this->_tbl)				->order($this->_tbl_key);			$this->_db->setQuery($query);			$rows = $this->_db->loadRowList();			$buffer .= sprintf("\n| %4s | %4s | %4s | %4s |", $this->_tbl_key, 'par', 'lft', 'rgt');			$buffer .= $sep;			foreach ($rows as $row)			{				$buffer .= sprintf("\n| %4s | %4s | %4s | %4s |", $row[0], $row[1], $row[2], $row[3]);			}			$buffer .= $sep;		}		echo $buffer;	}	/**	 * Runs a query and unlocks the database on an error.	 *	 * @param   mixed   $query         A string or JDatabaseQuery object.	 * @param   string  $errorMessage  Unused.	 *	 * @return  boolean  void	 *	 * @note    Since 12.1 this method returns void and will rethrow the database exception.	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	protected function _runQuery($query, $errorMessage)	{		// Prepare to catch an exception.		try		{			$this->_db->setQuery($query)->execute();			// @codeCoverageIgnoreStart			if ($this->_debug)			{				$this->_logtable();			}			// @codeCoverageIgnoreEnd		}		catch (Exception $e)		{			// Unlock the tables and rethrow.			$this->_unlock();			throw $e;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_whosonline * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_whosonline * * @package     Joomla.Site * @subpackage  mod_whosonline * @since       1.5 */class ModWhosonlineHelper{	// show online count	public static function getOnlineCount()	{		$db		= JFactory::getDbo();		// calculate number of guests and users		$result	= array();		$user_array  = 0;		$guest_array = 0;		$query	= $db->getQuery(true)			->select('guest, client_id')			->from('#__session')			->where('client_id = 0');		$db->setQuery($query);		$sessions = (array) $db->loadObjectList();		if (count($sessions))		{			foreach ($sessions as $session)			{				// if guest increase guest count by 1				if ($session->guest == 1)				{					$guest_array ++;				}				// if member increase member count by 1				if ($session->guest == 0)				{					$user_array ++;				}			}		}		$result['user']  = $user_array;		$result['guest'] = $guest_array;		return $result;	}	// show online member names	public static function getOnlineUserNames($params)	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select($db->quoteName(array('a.username', 'a.time', 'a.userid', 'a.client_id')))			->from('#__session AS a')			->where($db->quoteName('a.userid') . ' != 0')			->where($db->quoteName('a.client_id') . ' = 0')			->group($db->quoteName(array('a.username', 'a.time', 'a.userid', 'a.client_id')));		$user = JFactory::getUser();		if (!$user->authorise('core.admin') && $params->get('filter_groups', 0) == 1)		{			$groups = $user->getAuthorisedGroups();			if (empty($groups))			{				return array();			}			$query->join('LEFT', '#__user_usergroup_map AS m ON m.user_id = a.userid')				->join('LEFT', '#__usergroups AS ug ON ug.id = m.group_id')				->where('ug.id in (' . implode(',', $groups) . ')')				->where('ug.id <> 1');		}		$db->setQuery($query);		return (array) $db->loadObjectList();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_languages')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Languages');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_banners')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}// Execute the task.$controller	= JControllerLegacy::getInstance('Banners');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to pagination rendering. * * pagination_list_footer * 	Input variable $list is an array with offsets: * 		$list[limit]		: int * 		$list[limitstart]	: int * 		$list[total]		: int * 		$list[limitfield]	: string * 		$list[pagescounter]	: string * 		$list[pageslinks]	: string * * pagination_list_render * 	Input variable $list is an array with offsets: * 		$list[all] * 			[data]		: string * 			[active]	: boolean * 		$list[start] * 			[data]		: string * 			[active]	: boolean * 		$list[previous] * 			[data]		: string * 			[active]	: boolean * 		$list[next] * 			[data]		: string * 			[active]	: boolean * 		$list[end] * 			[data]		: string * 			[active]	: boolean * 		$list[pages] * 			[{PAGE}][data]		: string * 			[{PAGE}][active]	: boolean * * pagination_item_active * 	Input variable $item is an object with fields: * 		$item->base	: integer * 		$item->link	: string * 		$item->text	: string * * pagination_item_inactive * 	Input variable $item is an object with fields: * 		$item->base	: integer * 		$item->link	: string * 		$item->text	: string * * This gives template designers ultimate control over how pagination is rendered. * * NOTE: If you override pagination_item_active OR pagination_item_inactive you MUST override them both *//** * Renders the pagination footer * * @param   array  $list  Array containing pagination footer * * @return  string  HTML markup for the full pagination footer * * @since   3.0 */function pagination_list_footer($list){	$html = "<div class=\"pagination\">\n";	$html .= $list['pageslinks'];	$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"" . $list['limitstart'] . "\" />";	$html .= "\n</div>";	return $html;}/** * Renders the pagination list * * @param   array  $list  Array containing pagination information * * @return  string  HTML markup for the full pagination object * * @since   3.0 */function pagination_list_render($list){	// Calculate to display range of pages	$currentPage = 1;	$range = 1;	$step = 5;	foreach ($list['pages'] as $k => $page)	{		if (!$page['active'])		{			$currentPage = $k;		}	}	if ($currentPage >= $step)	{		if ($currentPage % $step == 0)		{			$range = ceil($currentPage / $step) + 1;		}		else		{			$range = ceil($currentPage / $step);		}	}	$html = '<ul class="pagination-list">';	$html .= $list['start']['data'];	$html .= $list['previous']['data'];	foreach ($list['pages'] as $k => $page)	{		if (in_array($k, range($range * $step - ($step + 1), $range * $step)))		{			if (($k % $step == 0 || $k == $range * $step - ($step + 1)) && $k != $currentPage && $k != $range * $step - $step)			{				$page['data'] = preg_replace('#(<a.*?>).*?(</a>)#', '$1...$2', $page['data']);			}		}		$html .= $page['data'];	}	$html .= $list['next']['data'];	$html .= $list['end']['data'];	$html .= '</ul>';	return $html;}/** * Renders an active item in the pagination block * * @param   JPaginationObject  $item  The current pagination object * * @return  string  HTML markup for active item * * @since   3.0 */function pagination_item_active(&$item){	// Check for "Start" item	if ($item->text == JText::_('JLIB_HTML_START'))	{		$display = '<i class="icon-first"></i>';	}	// Check for "Prev" item	if ($item->text == JText::_('JPREV'))	{		$display = '<i class="icon-previous"></i>';	}	// Check for "Next" item	if ($item->text == JText::_('JNEXT'))	{		$display = '<i class="icon-next"></i>';	}	// Check for "End" item	if ($item->text == JText::_('JLIB_HTML_END'))	{		$display = '<i class="icon-last"></i>';	}	// If the display object isn't set already, just render the item with its text	if (!isset($display))	{		$display = $item->text;	}	return "<li><a title=\"" . $item->text . "\" href=\"" . $item->link . "\" class=\"pagenav\">" . $display . "</a></li>";}/** * Renders an inactive item in the pagination block * * @param   JPaginationObject  $item  The current pagination object * * @return  string  HTML markup for inactive item * * @since   3.0 */function pagination_item_inactive(&$item){	// Check for "Start" item	if ($item->text == JText::_('JLIB_HTML_START'))	{		return '<li class="disabled"><a><i class="icon-first"></i></a></li>';	}	// Check for "Prev" item	if ($item->text == JText::_('JPREV'))	{		return '<li class="disabled"><a><i class="icon-previous"></i></a></li>';	}	// Check for "Next" item	if ($item->text == JText::_('JNEXT'))	{		return '<li class="disabled"><a><i class="icon-next"></i></a></li>';	}	// Check for "End" item	if ($item->text == JText::_('JLIB_HTML_END'))	{		return '<li class="disabled"><a><i class="icon-last"></i></a></li>';	}	// Check if the item is the active page	if (isset($item->active) && ($item->active))	{		return '<li class="active"><a>' . $item->text . '</a></li>';	}	// Doesn't match any other condition, render a normal item	return '<li class="disabled"><a>' . $item->text . '</a></li>';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds */class NewsfeedsTableNewsfeed extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__newsfeeds', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_newsfeeds.newsfeed';	}	/**	 * Overloaded bind function to pre-process the params.	 *	 * @param   array  Named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see     JTable:bind	 * @since   1.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 */	public function check()	{		// Check for valid name.		if (trim($this->name) == '')		{			$this->setError(JText::_('COM_NEWSFEEDS_WARNING_PROVIDE_VALID_NAME'));			return false;		}		if (empty($this->alias))		{			$this->alias = $this->name;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ((int) $this->publish_down > 0 && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		// clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// only process if not empty			$bad_characters = array("\n", "\r", "\"", "<", ">"); // array of characters to remove			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey); // remove bad characters			$keys = explode(',', $after_clean); // create array using commas as delimiter			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key)) {  // ignore blank keywords					$clean_keys[] = trim($key);				}			}			$this->metakey = implode(", ", $clean_keys); // put array back together delimited by ", "		}		// clean up description -- eliminate quotes and <> brackets		if (!empty($this->metadesc))		{			// only process if not empty			$bad_characters = array("\"", "<", ">");			$this->metadesc = JString::str_ireplace($bad_characters, "", $this->metadesc);		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		$this->tagsHelper->typeAlias = 'com_newsfeeds.newsfeed';		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Overriden JTable::store to set modified data.	 *	 * @param   boolean	True to update fields even if they are null.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified		= $date->toSql();			$this->modified_by	= $user->get('id');		}		else		{			// New newsfeed. A feed created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Verify that the alias is unique		$table = JTable::getInstance('Newsfeed', 'NewsfeedsTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_NEWSFEEDS_ERROR_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->typeAlias = 'com_newsfeeds.newsfeed';		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides and input field for e-mail addresses * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.email.html#input.email * @see         JFormRuleEmail * @since       11.1 */class JFormFieldEMail extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Email';	/**	 * Method to get the field input markup for e-mail addresses.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$size = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$maxLength = $this->element['maxlength'] ? ' maxlength="' . (int) $this->element['maxlength'] . '"' : '';		$class = $this->element['class'] ? ' ' . (string) $this->element['class'] : '';		$readonly = ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="text" name="' . $this->name . '" class="validate-email' . $class . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $size . $disabled . $readonly . $onchange . $maxLength . $required . '/>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'banner.cancel' || document.formvalidator.isValid(document.id('banner-form')))		{			Joomla.submitform(task, document.getElementById('banner-form'));		}	}	window.addEvent('domready', function()	{		document.id('jform_type0').addEvent('click', function(e){			document.id('image').setStyle('display', 'block');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'none');		});		document.id('jform_type1').addEvent('click', function(e){			document.id('image').setStyle('display', 'none');			document.id('url').setStyle('display', 'none');			document.id('custom').setStyle('display', 'block');		});		if (document.id('jform_type0').checked==true)		{			document.id('jform_type0').fireEvent('click');		}		else		{			document.id('jform_type1').fireEvent('click');		}	});</script><form action="<?php echo JRoute::_('index.php?option=com_banners&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="banner-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo empty($this->item->id) ? JText::_('COM_BANNERS_NEW_BANNER') : JText::sprintf('COM_BANNERS_BANNER_DETAILS', $this->item->id); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('name'); ?>				<?php echo $this->form->getInput('name'); ?></li>				<li><?php echo $this->form->getLabel('alias'); ?>				<?php echo $this->form->getInput('alias'); ?></li>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<li><?php echo $this->form->getLabel('catid'); ?>				<?php echo $this->form->getInput('catid'); ?></li>				<li><?php echo $this->form->getLabel('state'); ?>				<?php echo $this->form->getInput('state'); ?></li>				<li><?php echo $this->form->getLabel('type'); ?>				<?php echo $this->form->getInput('type'); ?></li>				<?php foreach ($this->form->getFieldset('image') as $field) : ?>					<li><?php echo $field->label; ?>						<?php echo $field->input; ?></li>				<?php endforeach; ?>				<li><div id="custom">					<?php echo $this->form->getLabel('custombannercode'); ?>					<?php echo $this->form->getInput('custombannercode'); ?>				</div>				</li>				<li><div id="url">				<?php echo $this->form->getLabel('clickurl'); ?>				<?php echo $this->form->getInput('clickurl'); ?>				</div>				</li>				<li><?php echo $this->form->getLabel('description'); ?>				<?php echo $this->form->getInput('description'); ?></li>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>			</ul>			<div class="clr"> </div>		</fieldset>	</div><div class="col options-section">	<?php echo JHtml::_('sliders.start', 'banner-sliders-' . $this->item->id, array('useCookie' => 1)); ?>	<?php echo JHtml::_('sliders.panel', JText::_('COM_BANNERS_GROUP_LABEL_PUBLISHING_DETAILS'), 'publishing-details'); ?>		<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_PUBLISHING'); ?></legend>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset('publish') as $field) : ?>				<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php endforeach; ?>			</ul>		</fieldset>	<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'), 'metadata'); ?>		<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'); ?></legend>			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>					<li><?php echo $field->label; ?>						<?php echo $field->input; ?></li>				<?php endforeach; ?>			</ul>		</fieldset>	<?php echo JHtml::_('sliders.end'); ?>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></div><div class="clr"></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Tag Controller * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsControllerTag extends JControllerForm{	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   3.1	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', 'com_tags'));	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   3.1	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user = JFactory::getUser();		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		// Since there is no asset tracking and no categories, revert to the component permissions.		return parent::allowEdit($data, $key);	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean	 True if successful, false otherwise and internal error is set.	 *	 * @since   3.1	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Tag');		// Preset the redirect		$this->setRedirect('index.php?option=com_tags&view=tags');		return parent::batch($model);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink controller class. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class WeblinksControllerWeblink extends JControllerForm{	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow = $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can add a new record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return JFactory::getUser()->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   1.7	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Weblink', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return	void	 * @since	1.6	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		if ($task == 'save')		{			$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks', false));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Strings Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesModelStrings extends JModelLegacy{	/**	 * Method for refreshing the cache in the database with the known language strings	 *	 * @return  boolean  True on success, Exception object otherwise	 *	 * @since		2.5	 */	public function refresh()	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$app = JFactory::getApplication();		$app->setUserState('com_languages.overrides.cachedtime', null);		// Empty the database cache first		try		{			$this->_db->setQuery('TRUNCATE TABLE '.$this->_db->quoteName('#__overrider'));			$this->_db->execute();		}		catch (RuntimeException $e)		{			return $e;		}		// Create the insert query		$query = $this->_db->getQuery(true)					->insert($this->_db->quoteName('#__overrider'))					->columns('constant, string, file');		// Initialize some variables		$client		= $app->getUserState('com_languages.overrides.filter.client', 'site') ? 'administrator' : 'site';		$language	= $app->getUserState('com_languages.overrides.filter.language', 'en-GB');		$base = constant('JPATH_'.strtoupper($client));		$path = $base . '/language/' . $language;		$files = array();		// Parse common language directory		jimport('joomla.filesystem.folder');		if (is_dir($path))		{			$files = JFolder::files($path, $language.'.*ini$', false, true);		}		// Parse language directories of components		$files = array_merge($files, JFolder::files($base.'/components', $language.'.*ini$', 3, true));		// Parse language directories of modules		$files = array_merge($files, JFolder::files($base.'/modules', $language.'.*ini$', 3, true));		// Parse language directories of templates		$files = array_merge($files, JFolder::files($base.'/templates', $language.'.*ini$', 3, true));		// Parse language directories of plugins		$files = array_merge($files, JFolder::files(JPATH_PLUGINS, $language.'.*ini$', 3, true));		// Parse all found ini files and add the strings to the database cache		foreach ($files as $file)		{			$strings = LanguagesHelper::parseFile($file);			if ($strings && count($strings))			{				$query->clear('values');				foreach ($strings as $key => $string)				{					$query->values($this->_db->quote($key).','.$this->_db->quote($string).','.$this->_db->quote(JPath::clean($file)));				}				try				{					$this->_db->setQuery($query);					$this->_db->execute();				}				catch (RuntimeException $e)				{					return $e;				}			}		}		// Update the cached time		$app->setUserState('com_languages.overrides.cachedtime.'.$client.'.'.$language, time());		return true;	}	/**	 * Method for searching language strings	 *	 * @return  array  Array of resuls on success, Exception object otherwise	 *	 * @since		2.5	 */	public function search()	{		$results = array();		$input   = JFactory::getApplication()->input;		$limitstart = $input->getInt('more');		try		{			$searchstring = $this->_db->quote('%' . $input->getString('searchstring') . '%');			// Create the search query			$query = $this->_db->getQuery(true)						->select('constant, string, file')						->from($this->_db->quoteName('#__overrider'));			if ($input->get('searchtype') == 'constant')			{				$query->where('constant LIKE '.$searchstring);			}			else			{				$query->where('string LIKE '.$searchstring);			}			// Consider the limitstart according to the 'more' parameter and load the results			$this->_db->setQuery($query, $limitstart, 10);			$results['results'] = $this->_db->loadObjectList();			// Check whether there are more results than already loaded			$query->clear('select')						->select('COUNT(id)');			$this->_db->setQuery($query);			if ($this->_db->loadResult() > $limitstart + 10)			{				// If this is set a 'More Results' link will be displayed in the view				$results['more'] = $limitstart + 10;			}		}		catch (RuntimeException $e)		{			return $e;		}		return $results;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentError class, provides an easy interface to parse and display an error page * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentError extends JDocument{	/**	 * Error Object	 *	 * @var    object	 * @since  11.1	 */	protected $_error;	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of attributes	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'text/html';		// Set document type		$this->_type = 'error';	}	/**	 * Set error object	 *	 * @param   object  $error  Error object to set	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function setError($error)	{		if ($error instanceof Exception)		{			$this->_error = & $error;			return true;		}		else		{			return false;		}	}	/**	 * Render the document	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  string   The rendered data	 *	 * @since   11.1	 */	public function render($cache = false, $params = array())	{		// If no error object is set return null		if (!isset($this->_error))		{			return;		}		// Set the status header		JResponse::setHeader('status', $this->_error->getCode() . ' ' . str_replace("\n", ' ', $this->_error->getMessage()));		$file = 'error.php';		// Check template		$directory = isset($params['directory']) ? $params['directory'] : 'templates';		$template = isset($params['template']) ? JFilterInput::getInstance()->clean($params['template'], 'cmd') : 'system';		if (!file_exists($directory . '/' . $template . '/' . $file))		{			$template = 'system';		}		// Set variables		$this->baseurl = JURI::base(true);		$this->template = $template;		$this->debug = isset($params['debug']) ? $params['debug'] : false;		$this->error = $this->_error;		// Load		$data = $this->_loadTemplate($directory . '/' . $template, $file);		parent::render();		return $data;	}	/**	 * Load a template file	 *	 * @param   string  $directory  The name of the template	 * @param   string  $filename   The actual filename	 *	 * @return  string  The contents of the template	 *	 * @since   11.1	 */	public function _loadTemplate($directory, $filename)	{		$contents = '';		// Check to see if we have a valid template file		if (file_exists($directory . '/' . $filename))		{			// Store the file path			$this->_file = $directory . '/' . $filename;			// Get the file content			ob_start();			require_once $directory . '/' . $filename;			$contents = ob_get_contents();			ob_end_clean();		}		return $contents;	}	/**	 * Render the backtrace	 *	 * @return  string  The contents of the backtrace	 *	 * @since   11.1	 */	public function renderBacktrace()	{		$contents = null;		$backtrace = $this->_error->getTrace();		if (is_array($backtrace))		{			ob_start();			$j = 1;			echo '<table cellpadding="0" cellspacing="0" class="Table">';			echo '	<tr>';			echo '		<td colspan="3" class="TD"><strong>Call stack</strong></td>';			echo '	</tr>';			echo '	<tr>';			echo '		<td class="TD"><strong>#</strong></td>';			echo '		<td class="TD"><strong>Function</strong></td>';			echo '		<td class="TD"><strong>Location</strong></td>';			echo '	</tr>';			for ($i = count($backtrace) - 1; $i >= 0; $i--)			{				echo '	<tr>';				echo '		<td class="TD">' . $j . '</td>';				if (isset($backtrace[$i]['class']))				{					echo '	<td class="TD">' . $backtrace[$i]['class'] . $backtrace[$i]['type'] . $backtrace[$i]['function'] . '()</td>';				}				else				{					echo '	<td class="TD">' . $backtrace[$i]['function'] . '()</td>';				}				if (isset($backtrace[$i]['file']))				{					echo '		<td class="TD">' . $backtrace[$i]['file'] . ':' . $backtrace[$i]['line'] . '</td>';				}				else				{					echo '		<td class="TD">&#160;</td>';				}				echo '	</tr>';				$j++;			}			echo '</table>';			$contents = ob_get_contents();			ob_end_clean();		}		return $contents;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds list controller class. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsControllerNewsfeeds extends JControllerAdmin{	/**	 * Proxy for getModel.	 */	public function getModel($name = 'Newsfeed', $prefix = 'NewsfeedsModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}	protected function postDeleteHook(JModelLegacy $model, $ids = null)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $menu JAdminCSSMenu */$shownew = (boolean) $params->get('shownew', 1);$showhelp = $params->get('showhelp', 1);$user = JFactory::getUser();$lang = JFactory::getLanguage();//// Site SubMenu//$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_SYSTEM'), '#'), true);$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_CONTROL_PANEL'), 'index.php', 'class:cpanel'));$menu->addSeparator();if ($user->authorise('core.admin')){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_CONFIGURATION'), 'index.php?option=com_config', 'class:config'));	$menu->addSeparator();}$chm = $user->authorise('core.admin', 'com_checkin');$cam = $user->authorise('core.manage', 'com_cache');if ($chm || $cam ){	// Keep this for when bootstrap supports submenus?	/* $menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MAINTENANCE'), 'index.php?option=com_checkin', 'class:maintenance'), true	);*/	if ($chm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_GLOBAL_CHECKIN'), 'index.php?option=com_checkin', 'class:checkin'));		$menu->addSeparator();	}	if ($cam)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_CLEAR_CACHE'), 'index.php?option=com_cache', 'class:clear'));		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_PURGE_EXPIRED_CACHE'), 'index.php?option=com_cache&view=purge', 'class:purge'));	}	//$menu->getParent();}$menu->addSeparator();if ($user->authorise('core.admin')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_SYSTEM_INFORMATION'), 'index.php?option=com_admin&view=sysinfo', 'class:info')	);}$menu->getParent();//// Users Submenu//if ($user->authorise('core.manage', 'com_users')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USERS'), '#'), true	);	$createUser = $shownew && $user->authorise('core.create', 'com_users');	$createGrp = $user->authorise('core.admin', 'com_users');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USER_MANAGER'), 'index.php?option=com_users&view=users', 'class:user'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_USER'), 'index.php?option=com_users&task=user.add', 'class:newarticle')		);		$menu->getParent();	}	if ($createGrp)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_GROUPS'), 'index.php?option=com_users&view=groups', 'class:groups'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_GROUP'), 'index.php?option=com_users&task=group.add', 'class:newarticle')			);			$menu->getParent();		}		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_LEVELS'), 'index.php?option=com_users&view=levels', 'class:levels'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_LEVEL'), 'index.php?option=com_users&task=level.add', 'class:newarticle')			);			$menu->getParent();		}	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTES'), 'index.php?option=com_users&view=notes', 'class:user-note'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_NOTE'), 'index.php?option=com_users&task=note.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTE_CATEGORIES'), 'index.php?option=com_categories&view=categories&extension=com_users', 'class:category'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_users.notes', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MASS_MAIL_USERS'), 'index.php?option=com_users&view=mail', 'class:massmail')	);	$menu->getParent();}//// Menus Submenu//if ($user->authorise('core.manage', 'com_menus')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENUS'), '#'), true	);	$createMenu = $shownew && $user->authorise('core.create', 'com_menus');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER'), 'index.php?option=com_menus&view=menus', 'class:menumgr'), $createMenu	);	if ($createMenu)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU'), 'index.php?option=com_menus&view=menu&layout=edit', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	// Menu Types	foreach (ModMenuHelper::getMenus() as $menuType)	{		$alt = '*' .$menuType->sef. '*';		if ($menuType->home == 0)		{			$titleicon = '';		}		elseif ($menuType->home == 1 && $menuType->language == '*')		{			$titleicon = ' <i class="icon-home"></i>';		}		elseif ($menuType->home > 1)		{			$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $menuType->home, array('title' => JText::_('MOD_MENU_HOME_MULTIPLE')), true).'</span>';		}		else		{			$image = JHtml::_('image', 'mod_languages/'.$menuType->image.'.gif', null, null, true, true);			if (!$image)			{				$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $alt, array('title' => $menuType->title_native), true).'</span>';			}			else			{				$titleicon = ' <span>' . JHtml::_('image', 'mod_languages/' . $menuType->image . '.gif', $alt, array('title' => $menuType->title_native), true) . '</span>';			}		}		$menu->addChild(			new JMenuNode($menuType->title,	'index.php?option=com_menus&view=items&menutype='.$menuType->menutype, 'class:menu', null, null, $titleicon), $createMenu		);		if ($createMenu)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU_ITEM'), 'index.php?option=com_menus&view=item&layout=edit&menutype='.$menuType->menutype, 'class:newarticle')			);			$menu->getParent();		}	}	$menu->getParent();}//// Content Submenu//if ($user->authorise('core.manage', 'com_content')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT'), '#'), true	);	$createContent = $shownew && $user->authorise('core.create', 'com_content');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_ARTICLE_MANAGER'), 'index.php?option=com_content', 'class:article'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_ARTICLE'), 'index.php?option=com_content&task=article.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_CATEGORY_MANAGER'), 'index.php?option=com_categories&extension=com_content', 'class:category'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_content', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_FEATURED'), 'index.php?option=com_content&view=featured', 'class:featured')	);	$menu->addSeparator();	if ($user->authorise('core.manage', 'com_media'))	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_MEDIA_MANAGER'), 'index.php?option=com_media', 'class:media'));	}	$menu->getParent();}//// Components Submenu//// Get the authorised components and sub-menus.$components = ModMenuHelper::getComponents(true);// Check if there are any components, otherwise, don't render the menuif ($components){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COMPONENTS'), '#'), true);	foreach ($components as &$component)	{		if (!empty($component->submenu))		{			// This component has a db driven submenu.			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img), true);			foreach ($component->submenu as $sub)			{				$menu->addChild(new JMenuNode($sub->text, $sub->link, $sub->img));			}			$menu->getParent();		}		else		{			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img));		}	}	$menu->getParent();}//// Extensions Submenu//$im = $user->authorise('core.manage', 'com_installer');$mm = $user->authorise('core.manage', 'com_modules');$pm = $user->authorise('core.manage', 'com_plugins');$tm = $user->authorise('core.manage', 'com_templates');$lm = $user->authorise('core.manage', 'com_languages');if ($im || $mm || $pm || $tm || $lm){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSIONS'), '#'), true);	if ($im)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSION_MANAGER'), 'index.php?option=com_installer', 'class:install'));		$menu->addSeparator();	}	if ($mm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_MODULE_MANAGER'), 'index.php?option=com_modules', 'class:module'));	}	if ($pm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_PLUGIN_MANAGER'), 'index.php?option=com_plugins', 'class:plugin'));	}	if ($tm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_TEMPLATE_MANAGER'), 'index.php?option=com_templates', 'class:themes'));	}	if ($lm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_LANGUAGE_MANAGER'), 'index.php?option=com_languages', 'class:language'));	}	$menu->getParent();}//// Help Submenu//if ($showhelp == 1){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP'), '#'), true	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_JOOMLA'), 'index.php?option=com_admin&view=help', 'class:help')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_FORUM'), 'http://forum.joomla.org', 'class:help-forum', false, '_blank')	);	if ($forum_url = $params->get('forum_url'))	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_CUSTOM_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$debug = $lang->setDebug(false);	if ($lang->hasKey('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') && JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') != '')	{		$forum_url = 'http://forum.joomla.org/viewforum.php?f=' . (int) JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE');		$lang->setDebug($debug);		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$lang->setDebug($debug);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DOCUMENTATION'), 'http://docs.joomla.org', 'class:help-docs', false, '_blank')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_EXTENSIONS'), 'http://extensions.joomla.org', 'class:help-jed', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_TRANSLATIONS'), 'http://community.joomla.org/translations.html', 'class:help-trans', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_RESOURCES'), 'http://resources.joomla.org', 'class:help-jrd', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_COMMUNITY'), 'http://community.joomla.org', 'class:help-community', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SECURITY'), 'http://developer.joomla.org/security.html', 'class:help-security', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DEVELOPER'), 'http://developer.joomla.org', 'class:help-dev', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SHOP'), 'http://shop.joomla.org', 'class:help-shop', false, '_blank')	);	$menu->getParent();}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tag Model * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsModelTag extends JModelList{	/**	 * The tags that apply.	 *	 * @var    object	 * @since  3.1	 */	protected $tag = null;	/**	 * The list of items associated with the tags.	 *	 * @var    array	 * @since  3.1	 */	protected $items = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   3.1	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'core_content_id', 'c.core_content_id',				'core_title', 'c.core_title',				'core_type_alias', 'c.core_type_alias',				'core_checked_out_user_id', 'c.core_checked_out_user_id',				'core_checked_out_time', 'c.core_checked_out_time',				'core_catid', 'c.core_catid',				'core_state', 'c.core_state',				'core_access', 'c.core_access',				'core_created_user_id', 'c.core_created_user_id',				'core_created_time', 'c.core_created_time',				'core_modified_time', 'c.core_modified_time',				'core_ordering', 'c.core_ordering',				'core_featured', 'c.core_featured',				'core_language', 'c.core_language',				'core_hits', 'c.core_hits',				'core_publish_up', 'c.core_publish_up',				'core_publish_down', 'c.core_publish_down',				'core_images', 'c.core_images',				'core_urls', 'c.core_urls',				'match_count',			);		}		parent::__construct($config);	}	/**	 * Method to get a list of items for a list of tags.	 *	 * @return  mixed  An array of objects on success, false on failure.	 *	 * @since   3.1	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		if (!empty($items))		{			foreach ($items as $item)			{				$explodedTypeAlias = explode('.', $item->type_alias);				$item->link = 'index.php?option=' . $explodedTypeAlias[0] . '&view=' . $explodedTypeAlias[1] . '&id=' . $item->content_item_id . ':' . $item->core_alias;				// Get display date				switch ($this->state->params->get('tag_list_show_date'))				{					case 'modified':						$item->displayDate = $item->core_modified_time;						break;					case 'created':						$item->displayDate = $item->core_created_time;						break;					default:					case 'published':						$item->displayDate = ($item->core_publish_up == 0) ? $item->core_created_time : $item->core_publish_up;						break;				}			}			return $items;		}		else		{			return false;		}	}	/**	 * Method to build an SQL query to load the list data of all items with a given tag.	 *	 * @return  string  An SQL query	 *	 * @since   3.1	 */	protected function getListQuery()	{		$tagId  = $this->getState('tag.id') ? : '';		$typesr = $this->getState('tag.typesr');		$orderByOption = $this->getState('list.ordering', 'c.core_title');		$includeChildren = $this->state->params->get('include_children', 0);		$orderDir = $this->getState('list.direction', 'ASC');		$matchAll = $this->getState('params')->get('return_any_or_all', 1);		$language = $this->getState('tag.language');		$stateFilter = $this->getState('tag.state');	// Optionally filter on language		if (empty($language))		{			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');		}		$listQuery = New JHelperTags;		$query = $listQuery->getTagItemsQuery($tagId, $typesr, $includeChildren, $orderByOption, $orderDir, $matchAll, $language, $stateFilter);		if ($this->state->get('list.filter'))		{			$query->where($this->_db->quoteName('c.core_title') . ' LIKE ' . $this->_db->quote('%' . $this->state->get('list.filter') . '%'));		}		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   3.1	 */	protected function populateState($ordering = 'c.core_title', $direction = 'ASC')	{		$app = JFactory::getApplication('site');		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		// Load state from the request.		$pk = $app->input->getObject('id');		$pk = (array) $pk;		$pkString = '';		foreach ($pk as $id)		{			$pkString .= (int) $id . ',';		}		$pkString = rtrim($pkString, ',');		$this->setState('tag.id', $pkString);		// Get the selected list of types from the request. If none are specified all are used.		$typesr = $app->input->getObject('types');		if ($typesr)		{			$typesr = (array) $typesr;			$this->setState('tag.typesr', $typesr);		}		$language = $app->input->getString('tag_list_language_filter');		$this->setState('tag.language', $language);		// List state information		$format = $app->input->getWord('format');		if ($format == 'feed')		{			$limit = $app->getCfg('feed_limit');		}		else		{			if ($this->state->params->get('show_pagination_limit'))			{				$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');			}			else			{				$limit = $this->state->params->get('maximum', 20);			}		}		$this->setState('list.limit', $limit);		$offset = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $offset);		$itemid = $pkString . ':' . $app->input->get('Itemid', 0, 'int');		$orderCol = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_order', 'filter_order', '', 'string');		$orderCol = !$orderCol ? $this->state->params->get('tag_list_orderby', 'c.core_title') : $orderCol;		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'c.core_title';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_order_direction', 'filter_order_Dir', '', 'string');		$listOrder = !$listOrder ? $this->state->params->get('tag_list_orderby_direction', 'ASC') : $listOrder;		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$this->setState('tag.state', 1);		// Optional filter text		$filterSearch = $app->getUserStateFromRequest('com_tags.tag.list.' . $itemid . '.filter_search', 'filter-search', '', 'string');		$this->setState('list.filter', $filterSearch);	}	/**	 * Method to get tag data for the current tag or tags	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   3.1	 */	public function getItem($pk = null)	{		if (!isset($this->item) ||$this->item === null)		{			$this->item = false;			if (empty($id))			{				$id = $this->getState('tag.id');			}			// Get a level row instance.			$table = JTable::getInstance('Tag', 'TagsTable');			$idsArray = explode(',', $id);			// Attempt to load the rows into an array.			foreach ($idsArray as $id)			{				try				{					$table->load($id);					// Check published state.					if ($published = $this->getState('filter.published'))					{						if ($table->published != $published)						{							return $this->item;						}					}					// Convert the JTable to a clean JObject.					$properties = $table->getProperties(1);					$this->item[] = JArrayHelper::toObject($properties, 'JObject');				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		return $this->item;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Cache component * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheViewCache extends JViewLegacy{	protected $client;	protected $data;	protected $pagination;	protected $state;	public function display($tpl = null)	{		$this->data			= $this->get('Data');		$this->client		= $this->get('Client');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$user = JFactory::getUser();		$condition = ($this->client->name == 'site');		JToolbarHelper::title(JText::_('COM_CACHE_CLEAR_CACHE'), 'clear.png');		JToolbarHelper::custom('delete', 'delete.png', 'delete_f2.png', 'JTOOLBAR_DELETE', true);		JToolbarHelper::divider();		if (JFactory::getUser()->authorise('core.admin', 'com_cache'))		{			JToolbarHelper::preferences('com_cache');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_SITE_MAINTENANCE_CLEAR_CACHE');		JHtmlSidebar::setAction('index.php?option=com_cache');		JHtmlSidebar::addFilter(			// @todo We need an actual label here			'',			'filter_client_id',			JHtml::_('select.options', CacheHelper::getClientOptions(), 'value', 'text', $this->state->get('clientId'))		);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Authentication.joomla * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla Authentication plugin * * @package     Joomla.Plugin * @subpackage  Authentication.joomla * @since       1.5 */class PlgAuthenticationJoomla extends JPlugin{	/**	 * This method should handle any authentication and report back to the subject	 *	 * @access	public	 * @param   array  Array holding the user credentials	 * @param   array  Array of extra options	 * @param   object	Authentication response object	 * @return  boolean	 * @since 1.5	 */	public function onUserAuthenticate($credentials, $options, &$response)	{		$response->type = 'Joomla';		// Joomla does not like blank passwords		if (empty($credentials['password']))		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_EMPTY_PASS_NOT_ALLOWED');			return false;		}		// Get a database object		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('id, password')			->from('#__users')			->where('username=' . $db->quote($credentials['username']));		$db->setQuery($query);		$result = $db->loadObject();		if ($result)		{			$parts	= explode(':', $result->password);			$crypt	= $parts[0];			$salt	= @$parts[1];			$testcrypt = JUserHelper::getCryptedPassword($credentials['password'], $salt);			if ($crypt == $testcrypt)			{				$user = JUser::getInstance($result->id); // Bring this in line with the rest of the system				$response->email = $user->email;				$response->fullname = $user->name;				if (JFactory::getApplication()->isAdmin())				{					$response->language = $user->getParam('admin_language');				}				else {					$response->language = $user->getParam('language');				}				$response->status = JAuthentication::STATUS_SUCCESS;				$response->error_message = '';			} else {				$response->status = JAuthentication::STATUS_FAILURE;				$response->error_message = JText::_('JGLOBAL_AUTH_INVALID_PASS');			}		}		else		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_NO_USER');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_contact.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_contact&task=contacts.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_contact'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>					</th>					<th class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<?php if ($assoc) : ?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tbody>			<?php			$n = count($this->items);			foreach ($this->items as $i => $item) :				$ordering	= $listOrder == 'a.ordering';				$canCreate	= $user->authorise('core.create',     'com_contact.category.'.$item->catid);				$canEdit	= $user->authorise('core.edit',       'com_contact.category.'.$item->catid);				$canCheckin	= $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canEditOwn	= $user->authorise('core.edit.own',   'com_contact.category.'.$item->catid) && $item->created_by == $userId;				$canChange	= $user->authorise('core.edit.state', 'com_contact.category.'.$item->catid) && $canCheckin;				$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_contact&task=edit&type=other&id='.$item->catid);				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip<?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5"							value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'contacts.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'contacts.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit || $canEditOwn) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_contact&task=contact.edit&id='.(int) $item->id); ?>">								<?php echo $this->escape($item->name); ?></a>							<?php else : ?>								<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<span class="small">								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							</span>							<div class="small">								<?php echo $item->category_title; ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'contact.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'contacts.');								endif;								if ($item->featured) :									JHtml::_('dropdown.unfeatured', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.featured', 'cb' . $i, 'contacts.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'contacts.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'contacts.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'contacts.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'contacts.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');							?>						</div>					</td>					<td align="small hidden-phone">						<?php if (!empty($item->linked_user)) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.$item->user_id);?>"><?php echo $item->linked_user;?></a>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('contact.featured', $item->featured, $i, $canChange); ?>					</td>					<td align="small hidden-phone">						<?php echo $item->access_level; ?>					</td>					<?php if ($assoc) : ?>					<td class="hidden-phone">						<?php if ($item->association) : ?>							<?php echo JHtml::_('contact.association', $item->id); ?>						<?php endif; ?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td align="center hidden-phone">						<?php echo $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'banner.cancel' || document.formvalidator.isValid(document.id('banner-form')))		{			Joomla.submitform(task, document.getElementById('banner-form'));		}	}	window.addEvent('domready', function()	{		document.id('jform_type0').addEvent('click', function(e){			document.id('image').setStyle('display', 'block');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'none');		});		document.id('jform_type1').addEvent('click', function(e){			document.id('image').setStyle('display', 'none');			document.id('url').setStyle('display', 'block');			document.id('custom').setStyle('display', 'block');		});		if (document.id('jform_type0').checked==true)		{			document.id('jform_type0').fireEvent('click');		}		else		{			document.id('jform_type1').fireEvent('click');		}	});</script><form action="<?php echo JRoute::_('index.php?option=com_banners&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="banner-form" class="form-validate form-horizontal"><!-- Begin Banner --><div class="span10 form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('COM_BANNERS_BANNER_DETAILS', true)); ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('name'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('name'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('alias'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('alias'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('catid'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('catid'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('type'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('type'); ?>					</div>				</div>				<div id="image">						<?php foreach ($this->form->getFieldset('image') as $field) : ?>							<div class="control-group">								<div class="control-label">									<?php echo $field->label; ?>								</div>								<div class="controls">									<?php echo $field->input; ?>								</div>							</div>						<?php endforeach; ?>				</div>				<div class="control-group" id="custom">					<div class="control-label">						<?php echo $this->form->getLabel('custombannercode'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('custombannercode'); ?>					</div>				</div>				<div class="control-group" id="url">					<div class="control-label">						<?php echo $this->form->getLabel('clickurl'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('clickurl'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('description'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('description'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('id'); ?>					</div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_BANNERS_GROUP_LABEL_PUBLISHING_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('publish') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'otherparams', JText::_('COM_BANNERS_GROUP_LABEL_BANNER_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('otherparams') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>				<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?>	</div>	<!-- End Newsfeed -->	<!-- Begin Sidebar -->	<div class="span2">		<h4><?php echo JText::_('JDETAILS');?></h4>		<hr />		<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('name'); ?>					</div>				</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('sticky'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('sticky'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('language'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('language'); ?>				</div>			</div>		</fieldset>	</div>	<!-- End Sidebar --></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Finder language helper class. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderHelperLanguage{	/**	 * Method to return a plural language code for a taxonomy branch.	 *	 * @param   string  Branch title.	 *	 * @return  string  Language key code.	 */	public static function branchPlural($branchName)	{		$return = preg_replace('/[^a-zA-Z0-9]+/', '_', strtoupper($branchName));		return 'PLG_FINDER_QUERY_FILTER_BRANCH_P_'.$return;	}	/**	 * Method to return a singular language code for a taxonomy branch.	 *	 * @param   string  Branch name.	 *	 * @return  string  Language key code.	 */	public static function branchSingular($branchName)	{		$return = preg_replace('/[^a-zA-Z0-9]+/', '_', strtoupper($branchName));		return 'PLG_FINDER_QUERY_FILTER_BRANCH_S_'.$return;	}	/**	 * Method to load Smart Search component language file.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function loadComponentLanguage()	{		$lang = JFactory::getLanguage();		$lang->load('com_finder', JPATH_SITE);	}	/**	 * Method to load Smart Search plug-in language files.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function loadPluginLanguage()	{		static $loaded = false;		// If already loaded, don't load again.		if ($loaded)		{			return;		}		$loaded = true;		// Get array of all the enabled Smart Search plug-in names.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('name')			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' .  $db->quote('plugin'))			->where($db->quoteName('folder') . ' = ' .  $db->quote('finder'))			->where($db->quoteName('enabled') . ' = 1');		$db->setQuery($query);		$plugins = $db->loadObjectList();		if (empty($plugins))		{			return;		}		// Load generic language strings.		$lang = JFactory::getLanguage();		$lang->load('plg_content_finder', JPATH_ADMINISTRATOR);		// Load language file for each plug-in.		foreach ($plugins as $plugin)		{			$lang->load($plugin->name, JPATH_ADMINISTRATOR);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/debug.php';/** * Methods supporting a list of user records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelDebugGroup extends JModelList{	/**	 * Get a list of the actions.	 *	 * @return  array	 * @since   1.6	 */	public function getDebugActions()	{		$component = $this->getState('filter.component');		return UsersHelperDebug::getDebugActions($component);	}	/**	 * Override getItems method.	 *	 * @return  array	 * @since   1.6	 */	public function getItems()	{		$groupId = $this->getState('filter.group_id');		if (($assets = parent::getItems()) && $groupId)		{			$actions = $this->getDebugActions();			foreach ($assets as &$asset)			{				$asset->checks = array();				foreach ($actions as $action)				{					$name = $action[0];					$level = $action[1];					// Check that we check this action for the level of the asset.					if ($action[1] === null || $action[1] >= $asset->level)					{						// We need to test this action.						$asset->checks[$name] = JAccess::checkGroup($groupId, $action[0], $asset->name);					}					else					{						// We ignore this action.						$asset->checks[$name] = 'skip';					}				}			}		}		return $assets;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Adjust the context to support modal layouts.		$layout = $app->input->get('layout', 'default');		if ($layout)		{			$this->context .= '.' . $layout;		}		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$value = $this->getUserStateFromRequest($this->context . '.filter.group_id', 'group_id', 0, 'int', false);		$this->setState('filter.group_id', $value);		$levelStart = $this->getUserStateFromRequest($this->context . '.filter.level_start', 'filter_level_start', 0, 'int');		$this->setState('filter.level_start', $levelStart);		$value = $this->getUserStateFromRequest($this->context . '.filter.level_end', 'filter_level_end', 0, 'int');		if ($value > 0 && $value < $levelStart)		{			$value = $levelStart;		}		$this->setState('filter.level_end', $value);		$component = $this->getUserStateFromRequest($this->context . '.filter.component', 'filter_component');		$this->setState('filter.component', $component);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.level_start');		$id .= ':' . $this->getState('filter.level_end');		$id .= ':' . $this->getState('filter.component');		return parent::getStoreId($id);	}	/**	 * Get the group being debugged.	 *	 * @return  JObject	 * @since   1.6	 */	public function getGroup()	{		$groupId = (int) $this->getState('filter.group_id');		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('id, title')			->from('#__usergroups')			->where('id = ' . $groupId);		$db->setQuery($query);		try		{			$group = $db->loadObject();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		return $group;	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.name, a.title, a.level, a.lft, a.rgt'			)		);		$query->from($db->quoteName('#__assets') . ' AS a');		// Filter the items over the search string if set.		if ($this->getState('filter.search'))		{			// Escape the search token.			$token = $db->quote('%' . $db->escape($this->getState('filter.search')) . '%');			// Compile the different search clauses.			$searches = array();			$searches[] = 'a.name LIKE ' . $token;			$searches[] = 'a.title LIKE ' . $token;			// Add the clauses to the query.			$query->where('(' . implode(' OR ', $searches) . ')');		}		// Filter on the start and end levels.		$levelStart = (int) $this->getState('filter.level_start');		$levelEnd = (int) $this->getState('filter.level_end');		if ($levelEnd > 0 && $levelEnd < $levelStart)		{			$levelEnd = $levelStart;		}		if ($levelStart > 0)		{			$query->where('a.level >= ' . $levelStart);		}		if ($levelEnd > 0)		{			$query->where('a.level <= ' . $levelEnd);		}		// Filter the items over the component if set.		if ($this->getState('filter.component'))		{			$component = $this->getState('filter.component');			$query->where('(a.name = ' . $db->quote($component) . ' OR a.name LIKE ' . $db->quote($component . '.%') . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');JHtml::_('formbehavior.chosen', 'select');$canDo = TemplatesHelper::getActions();$input = JFactory::getApplication()->input;?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=template'); ?>" method="post" name="adminForm" id="adminForm" class="form-horizontal">		<fieldset id="template-manager">			<div class="pull-left">				<?php echo JHtml::_('templates.thumb', $this->template->element, $this->template->client_id); ?>			</div>			<h2><?php echo ucfirst($this->template->element); ?></h2>			<?php $client = JApplicationHelper::getClientInfo($this->template->client_id); ?>			<p><?php $this->template->xmldata = TemplatesHelper::parseXMLTemplateFile($client->path, $this->template->element);?></p>			<p><?php  echo JText::_($this->template->xmldata->description); ?></p>			<div class="clearfix"></div>			<hr />			<div class="row-fluid">				<div class="span6">					<div class="page-header">						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_MASTER_FILES');?>					</div>					<ul class="nav nav-tabs nav-stacked">						<li>							<?php $id = $this->files['main']['index']->id; ?>							<?php if ($canDo->get('core.edit')) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">								<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_MAIN');?>							<?php if ($canDo->get('core.edit')) : ?>								</a>							<?php endif; ?>						</li>						<?php if ($this->files['main']['error']->exists) : ?>						<li>							<?php $id = $this->files['main']['error']->id; ?>							<?php if ($canDo->get('core.edit')) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">									<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_ERROR');?>							<?php if ($canDo->get('core.edit')) : ?>								</a>							<?php endif; ?>						</li>						<?php endif; ?>						<?php if ($this->files['main']['offline']->exists) : ?>							<li>								<?php $id = $this->files['main']['offline']->id; ?>								<?php if ($canDo->get('core.edit')) : ?>									<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">										<i class="icon-edit"></i>								<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_OFFLINEVIEW');?>								<?php if ($canDo->get('core.edit')) : ?>									</a>								<?php endif; ?>							</li>						<?php endif; ?>						<?php if ($this->files['main']['print']->exists) : ?>						<li>							<?php $id = $this->files['main']['print']->id; ?>							<?php if ($canDo->get('core.edit')) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$id);?>">									<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_EDIT_PRINTVIEW');?>							<?php if ($canDo->get('core.edit')) : ?>								</a>							<?php endif; ?>						</li>						<?php endif; ?>					</ul>				</div>				<div class="span6">					<div class="page-header">						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_CSS');?>					</div>					<?php if (!empty($this->files['css'])) : ?>					<ul class="nav nav-tabs nav-stacked">						<?php foreach ($this->files['css'] as $file) : ?>						<li>							<?php if ($canDo->get('core.edit')) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_templates&task=source.edit&id='.$file->id);?>">								<i class="icon-edit"></i>							<?php endif; ?>								<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_EDIT_CSS', $file->name);?>							<?php if ($canDo->get('core.edit')) : ?>							</a>							<?php endif; ?>						</li>						<?php endforeach; ?>					</ul>					<?php endif; ?>				</div>			</div>			<!--<div>				<a href="#" class="modal">					<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_ADD_CSS');?></a>			</div>-->		</fieldset>		<input type="hidden" name="task" value="" /></form><form action="<?php echo JRoute::_('index.php?option=com_templates&task=template.copy&id=' . $input->getInt('id')); ?>"			method="post" name="adminForm" id="adminForm">	<div  id="collapseModal" class="modal hide fade">		<div class="modal-header">			<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>			<h3><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY');?></h3>		</div>		<div class="modal-body">			<div id="template-manager-css" class="form-horizontal">				<div class="control-group">					<label for="new_name" class="control-label hasTip" title="<?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_DESC'); ?>"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_NEW_NAME_LABEL')?></label>					<div class="controls">						<input class="input-xlarge" type="text" id="new_name" name="new_name"  />					</div>				</div>			</div>		</div>		<div class="modal-footer">			<a href="#" class="btn" data-dismiss="modal">Close</a>			<button class="btn btn-primary" type="submit"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_COPY'); ?></button>		</div>	</div>	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Legacy * @subpackage  Component * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Component helper class * * @package     Joomla.Legacy * @subpackage  Component * @since       11.1 */class JComponentHelper{	/**	 * The component list cache	 *	 * @var    array	 * @since  11.1	 */	protected static $components = array();	/**	 * Get the component information.	 *	 * @param   string   $option  The component option.	 * @param   boolean  $strict  If set and the component does not exist, the enabled attribute will be set to false.	 *	 * @return  object   An object with the information for the component.	 *	 * @since   11.1	 */	public static function getComponent($option, $strict = false)	{		if (!isset(self::$components[$option]))		{			if (self::_load($option))			{				$result = self::$components[$option];			}			else			{				$result = new stdClass;				$result->enabled = $strict ? false : true;				$result->params = new JRegistry;			}		}		else		{			$result = self::$components[$option];		}		return $result;	}	/**	 * Checks if the component is enabled	 *	 * @param   string  $option  The component option.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public static function isEnabled($option)	{		$result = self::getComponent($option, true);		return $result->enabled;	}	/**	 * Gets the parameter object for the component	 *	 * @param   string   $option  The option for the component.	 * @param   boolean  $strict  If set and the component does not exist, false will be returned	 *	 * @return  JRegistry  A JRegistry object.	 *	 * @see     JRegistry	 * @since   11.1	 */	public static function getParams($option, $strict = false)	{		$component = self::getComponent($option, $strict);		return $component->params;	}	/**	 * Applies the global text filters to arbitrary text as per settings for current user groups	 *	 * @param   string  $text  The string to filter	 *	 * @return  string  The filtered string	 *	 * @since   11.4	 */	public static function filterText($text)	{		// Filter settings		$config		= self::getParams('com_config');		$user		= JFactory::getUser();		$userGroups	= JAccess::getGroupsByUser($user->get('id'));		$filters = $config->get('filters');		$blackListTags			= array();		$blackListAttributes	= array();		$customListTags			= array();		$customListAttributes	= array();		$whiteListTags			= array();		$whiteListAttributes	= array();		$noHtml		= false;		$whiteList	= false;		$blackList	= false;		$customList	= false;		$unfiltered	= false;		// Cycle through each of the user groups the user is in.		// Remember they are included in the Public group as well.		foreach ($userGroups as $groupId)		{			// May have added a group by not saved the filters.			if (!isset($filters->$groupId))			{				continue;			}			// Each group the user is in could have different filtering properties.			$filterData = $filters->$groupId;			$filterType	= strtoupper($filterData->filter_type);			if ($filterType == 'NH')			{				// Maximum HTML filtering.				$noHtml = true;			}			elseif ($filterType == 'NONE')			{				// No HTML filtering.				$unfiltered = true;			}			else			{				// Black or white list.				// Preprocess the tags and attributes.				$tags			= explode(',', $filterData->filter_tags);				$attributes		= explode(',', $filterData->filter_attributes);				$tempTags		= array();				$tempAttributes	= array();				foreach ($tags as $tag)				{					$tag = trim($tag);					if ($tag)					{						$tempTags[] = $tag;					}				}				foreach ($attributes as $attribute)				{					$attribute = trim($attribute);					if ($attribute)					{						$tempAttributes[] = $attribute;					}				}				// Collect the black or white list tags and attributes.				// Each list is cummulative.				if ($filterType == 'BL')				{					$blackList				= true;					$blackListTags			= array_merge($blackListTags, $tempTags);					$blackListAttributes	= array_merge($blackListAttributes, $tempAttributes);				}				elseif ($filterType == 'CBL')				{					// Only set to true if Tags or Attributes were added					if ($tempTags || $tempAttributes)					{						$customList				= true;						$customListTags			= array_merge($customListTags, $tempTags);						$customListAttributes	= array_merge($customListAttributes, $tempAttributes);					}				}				elseif ($filterType == 'WL')				{					$whiteList				= true;					$whiteListTags			= array_merge($whiteListTags, $tempTags);					$whiteListAttributes	= array_merge($whiteListAttributes, $tempAttributes);				}			}		}		// Remove duplicates before processing (because the black list uses both sets of arrays).		$blackListTags			= array_unique($blackListTags);		$blackListAttributes	= array_unique($blackListAttributes);		$customListTags			= array_unique($customListTags);		$customListAttributes	= array_unique($customListAttributes);		$whiteListTags			= array_unique($whiteListTags);		$whiteListAttributes	= array_unique($whiteListAttributes);		// Unfiltered assumes first priority.		if ($unfiltered)		{			// Dont apply filtering.		}		else		{			// Custom blacklist precedes Default blacklist			if ($customList)			{				$filter = JFilterInput::getInstance(array(), array(), 1, 1);				// Override filter's default blacklist tags and attributes				if ($customListTags)				{					$filter->tagBlacklist = $customListTags;				}				if ($customListAttributes)				{					$filter->attrBlacklist = $customListAttributes;				}			}			// Black lists take second precedence.			elseif ($blackList)			{				// Remove the white-listed tags and attributes from the black-list.				$blackListTags			= array_diff($blackListTags, $whiteListTags);				$blackListAttributes	= array_diff($blackListAttributes, $whiteListAttributes);				$filter = JFilterInput::getInstance($blackListTags, $blackListAttributes, 1, 1);				// Remove white listed tags from filter's default blacklist				if ($whiteListTags)				{					$filter->tagBlacklist = array_diff($filter->tagBlacklist, $whiteListTags);				}				// Remove white listed attributes from filter's default blacklist				if ($whiteListAttributes)				{					$filter->attrBlacklist = array_diff($filter->attrBlacklist);				}			}			// White lists take third precedence.			elseif ($whiteList)			{				// Turn off XSS auto clean				$filter	= JFilterInput::getInstance($whiteListTags, $whiteListAttributes, 0, 0, 0);			}			// No HTML takes last place.			else			{				$filter = JFilterInput::getInstance();			}			$text = $filter->clean($text, 'html');		}		return $text;	}	/**	 * Render the component.	 *	 * @param   string  $option  The component option.	 * @param   array   $params  The component parameters	 *	 * @return  object	 *	 * @since   11.1	 * @throws  Exception	 */	public static function renderComponent($option, $params = array())	{		$app = JFactory::getApplication();		// Load template language files.		$template = $app->getTemplate(true)->template;		$lang = JFactory::getLanguage();		$lang->load('tpl_' . $template, JPATH_BASE, null, false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", null, false, false)			|| $lang->load('tpl_' . $template, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", $lang->getDefault(), false, false);		if (empty($option))		{			throw new Exception(JText::_('JLIB_APPLICATION_ERROR_COMPONENT_NOT_FOUND'), 404);		}		// Record the scope		$scope = $app->scope;		// Set scope to component name		$app->scope = $option;		// Build the component path.		$option = preg_replace('/[^A-Z0-9_\.-]/i', '', $option);		$file = substr($option, 4);		// Define component path.		define('JPATH_COMPONENT', JPATH_BASE . '/components/' . $option);		define('JPATH_COMPONENT_SITE', JPATH_SITE . '/components/' . $option);		define('JPATH_COMPONENT_ADMINISTRATOR', JPATH_ADMINISTRATOR . '/components/' . $option);		$path = JPATH_COMPONENT . '/' . $file . '.php';		// If component is disabled throw error		if (!self::isEnabled($option) || !file_exists($path))		{			throw new Exception(JText::_('JLIB_APPLICATION_ERROR_COMPONENT_NOT_FOUND'), 404);		}		$task = $app->input->getString('task');		// Load common and local language files.		$lang->load($option, JPATH_BASE, null, false, false) || $lang->load($option, JPATH_COMPONENT, null, false, false)			|| $lang->load($option, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load($option, JPATH_COMPONENT, $lang->getDefault(), false, false);		// Handle template preview outlining.		$contents = null;		// Execute the component.		$contents = self::executeComponent($path);		// Revert the scope		$app->scope = $scope;		return $contents;	}	/**	 * Execute the component.	 *	 * @param   string  $path  The component path.	 *	 * @return  string  The component output	 *	 * @since   11.3	 */	protected static function executeComponent($path)	{		ob_start();		require_once $path;		$contents = ob_get_contents();		ob_end_clean();		return $contents;	}	/**	 * Load the installed components into the components property.	 *	 * @param   string  $option  The element value for the extension	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected static function _load($option)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('extension_id AS id, element AS "option", params, enabled')			->from('#__extensions')			->where($db->quoteName('type') . ' = ' . $db->quote('component'))			->where($db->quoteName('element') . ' = ' . $db->quote($option));		$db->setQuery($query);		$cache = JFactory::getCache('_system', 'callback');		try		{			self::$components[$option] = $cache->get(array($db, 'loadObject'), null, $option, false);		}		catch (RuntimeException $e)		{			// Fatal error.			JLog::add(JText::sprintf('JLIB_APPLICATION_ERROR_COMPONENT_NOT_LOADING', $option, $error), JLog::WARNING, 'jerror');			return false;		}		if (empty(self::$components[$option]))		{			// Fatal error.			$error = JText::_('JLIB_APPLICATION_ERROR_COMPONENT_NOT_FOUND');			JLog::add(JText::sprintf('JLIB_APPLICATION_ERROR_COMPONENT_NOT_LOADING', $option, $error), JLog::WARNING, 'jerror');			return false;		}		// Convert the params to an object.		if (is_string(self::$components[$option]->params))		{			$temp = new JRegistry;			$temp->loadString(self::$components[$option]->params);			self::$components[$option]->params = $temp;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PostgreSQL import driver. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseImporterPostgresql extends JDatabaseImporter{	/**	 * @var    array  An array of cached data.	 * @since  12.1	 */	protected $cache = array();	/**	 * The database connector to use for exporting structure and/or data.	 *	 * @var    JDatabaseDriverPostgresql	 * @since  12.1	 */	protected $db = null;	/**	 * The input source.	 *	 * @var    mixed	 * @since  12.1	 */	protected $from = array();	/**	 * The type of input format (XML).	 *	 * @var    string	 * @since  12.1	 */	protected $asFormat = 'xml';	/**	 * An array of options for the exporter.	 *	 * @var    object	 * @since  12.1	 */	protected $options = null;	/**	 * Constructor.	 *	 * Sets up the default options for the exporter.	 *	 * @since   12.1	 */	public function __construct()	{		$this->options = new stdClass;		$this->cache = array('columns' => array(), 'keys' => array());		// Set up the class defaults:		// Import with only structure		$this->withStructure();		// Export as XML.		$this->asXml();		// Default destination is a string using $output = (string) $exporter;	}	/**	 * Set the output option for the exporter to XML format.	 *	 * @return  JDatabaseImporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 */	public function asXml()	{		$this->asFormat = 'xml';		return $this;	}	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseImporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverPostgresql))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Specifies the data source to import.	 *	 * @param   mixed  $from  The data source to import.	 *	 * @return  JDatabaseImporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 */	public function from($from)	{		$this->from = $from;		return $this;	}	/**	 * Get the SQL syntax to add a column.	 *	 * @param   string            $table  The table name.	 * @param   SimpleXMLElement  $field  The XML field definition.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getAddColumnSQL($table, SimpleXMLElement $field)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' ADD COLUMN ' . $this->getColumnSQL($field);		return $query;	}	/**	 * Get the SQL syntax to add an index.	 *	 * @param   SimpleXMLElement  $field  The XML index definition.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getAddIndexSQL(SimpleXMLElement $field)	{		return (string) $field['Query'];	}	/**	 * Get alters for table if there is a difference.	 *	 * @param   SimpleXMLElement  $structure  The XML structure of the table.	 *	 * @return  array	 *	 * @since   12.1	 */	protected function getAlterTableSQL(SimpleXMLElement $structure)	{		$table = $this->getRealTableName($structure['name']);		$oldFields = $this->db->getTableColumns($table);		$oldKeys = $this->db->getTableKeys($table);		$oldSequence = $this->db->getTableSequences($table);		$alters = array();		// Get the fields and keys from the XML that we are aiming for.		$newFields = $structure->xpath('field');		$newKeys = $structure->xpath('key');		$newSequence = $structure->xpath('sequence');		/* Sequence section */		$oldSeq = $this->getSeqLookup($oldSequence);		$newSequenceLook = $this->getSeqLookup($newSequence);		foreach ($newSequenceLook as $kSeqName => $vSeq)		{			if (isset($oldSeq[$kSeqName]))			{				// The field exists, check it's the same.				$column = $oldSeq[$kSeqName][0];				/* For older database version that doesn't support these fields use default values */				if (version_compare($this->db->getVersion(), '9.1.0') < 0)				{					$column->Min_Value = '1';					$column->Max_Value = '9223372036854775807';					$column->Increment = '1';					$column->Cycle_option = 'NO';					$column->Start_Value = '1';				}				// Test whether there is a change.				$change = ((string) $vSeq[0]['Type'] != $column->Type) || ((string) $vSeq[0]['Start_Value'] != $column->Start_Value)					|| ((string) $vSeq[0]['Min_Value'] != $column->Min_Value) || ((string) $vSeq[0]['Max_Value'] != $column->Max_Value)					|| ((string) $vSeq[0]['Increment'] != $column->Increment) || ((string) $vSeq[0]['Cycle_option'] != $column->Cycle_option)					|| ((string) $vSeq[0]['Table'] != $column->Table) || ((string) $vSeq[0]['Column'] != $column->Column)					|| ((string) $vSeq[0]['Schema'] != $column->Schema) || ((string) $vSeq[0]['Name'] != $column->Name);				if ($change)				{					$alters[] = $this->getChangeSequenceSQL($kSeqName, $vSeq);				}				// Unset this field so that what we have left are fields that need to be removed.				unset($oldSeq[$kSeqName]);			}			else			{				// The sequence is new				$alters[] = $this->getAddSequenceSQL($newSequenceLook[$kSeqName][0]);			}		}		// Any sequences left are orphans		foreach ($oldSeq as $name => $column)		{			// Delete the sequence.			$alters[] = $this->getDropSequenceSQL($name);		}		/* Field section */		// Loop through each field in the new structure.		foreach ($newFields as $field)		{			$fName = (string) $field['Field'];			if (isset($oldFields[$fName]))			{				// The field exists, check it's the same.				$column = $oldFields[$fName];				// Test whether there is a change.				$change = ((string) $field['Type'] != $column->Type) || ((string) $field['Null'] != $column->Null)					|| ((string) $field['Default'] != $column->Default);				if ($change)				{					$alters[] = $this->getChangeColumnSQL($table, $field);				}				// Unset this field so that what we have left are fields that need to be removed.				unset($oldFields[$fName]);			}			else			{				// The field is new.				$alters[] = $this->getAddColumnSQL($table, $field);			}		}		// Any columns left are orphans		foreach ($oldFields as $name => $column)		{			// Delete the column.			$alters[] = $this->getDropColumnSQL($table, $name);		}		/* Index section */		// Get the lookups for the old and new keys		$oldLookup = $this->getIdxLookup($oldKeys);		$newLookup = $this->getIdxLookup($newKeys);		// Loop through each key in the new structure.		foreach ($newLookup as $name => $keys)		{			// Check if there are keys on this field in the existing table.			if (isset($oldLookup[$name]))			{				$same = true;				$newCount = count($newLookup[$name]);				$oldCount = count($oldLookup[$name]);				// There is a key on this field in the old and new tables. Are they the same?				if ($newCount == $oldCount)				{					for ($i = 0; $i < $newCount; $i++)					{						// Check only query field -> different query means different index						$same = ((string) $newLookup[$name][$i]['Query'] == $oldLookup[$name][$i]->Query);						if (!$same)						{							// Break out of the loop. No need to check further.							break;						}					}				}				else				{					// Count is different, just drop and add.					$same = false;				}				if (!$same)				{					$alters[] = $this->getDropIndexSQL($name);					$alters[]  = (string) $newLookup[$name][0]['Query'];				}				// Unset this field so that what we have left are fields that need to be removed.				unset($oldLookup[$name]);			}			else			{				// This is a new key.				$alters[] = (string) $newLookup[$name][0]['Query'];			}		}		// Any keys left are orphans.		foreach ($oldLookup as $name => $keys)		{			if ($oldLookup[$name][0]->is_primary == 'TRUE')			{				$alters[] = $this->getDropPrimaryKeySQL($table, $oldLookup[$name][0]->Index);			}			else			{				$alters[] = $this->getDropIndexSQL($name);			}		}		return $alters;	}	/**	 * Get the SQL syntax to drop a sequence.	 *	 * @param   string  $name  The name of the sequence to drop.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getDropSequenceSQL($name)	{		$query = 'DROP SEQUENCE ' . $this->db->quoteName($name);		return $query;	}	/**	 * Get the syntax to add a sequence.	 *	 * @param   SimpleXMLElement  $field  The XML definition for the sequence.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getAddSequenceSQL($field)	{		/* For older database version that doesn't support these fields use default values */		if (version_compare($this->db->getVersion(), '9.1.0') < 0)		{			$field['Min_Value'] = '1';			$field['Max_Value'] = '9223372036854775807';			$field['Increment'] = '1';			$field['Cycle_option'] = 'NO';			$field['Start_Value'] = '1';		}		$query = 'CREATE SEQUENCE ' . (string) $field['Name'] .				' INCREMENT BY ' . (string) $field['Increment'] . ' MINVALUE ' . $field['Min_Value'] .				' MAXVALUE ' . (string) $field['Max_Value'] . ' START ' . (string) $field['Start_Value'] .				(((string) $field['Cycle_option'] == 'NO' ) ? ' NO' : '' ) . ' CYCLE' .				' OWNED BY ' . $this->db->quoteName(									(string) $field['Schema'] . '.' . (string) $field['Table'] . '.' . (string) $field['Column']								);		return $query;	}	/**	 * Get the syntax to alter a sequence.	 *	 * @param   SimpleXMLElement  $field  The XML definition for the sequence.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getChangeSequenceSQL($field)	{		/* For older database version that doesn't support these fields use default values */		if (version_compare($this->db->getVersion(), '9.1.0') < 0)		{			$field['Min_Value'] = '1';			$field['Max_Value'] = '9223372036854775807';			$field['Increment'] = '1';			$field['Cycle_option'] = 'NO';			$field['Start_Value'] = '1';		}		$query = 'ALTER SEQUENCE ' . (string) $field['Name'] .				' INCREMENT BY ' . (string) $field['Increment'] . ' MINVALUE ' . (string) $field['Min_Value'] .				' MAXVALUE ' . (string) $field['Max_Value'] . ' START ' . (string) $field['Start_Value'] .				' OWNED BY ' . $this->db->quoteName(									(string) $field['Schema'] . '.' . (string) $field['Table'] . '.' . (string) $field['Column']								);		return $query;	}	/**	 * Get the syntax to alter a column.	 *	 * @param   string            $table  The name of the database table to alter.	 * @param   SimpleXMLElement  $field  The XML definition for the field.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getChangeColumnSQL($table, SimpleXMLElement $field)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' ALTER COLUMN ' . $this->db->quoteName((string) $field['Field']) . ' '			. $this->getAlterColumnSQL($table, $field);		return $query;	}	/**	 * Get the SQL syntax for a single column that would be included in a table create statement.	 *	 * @param   string            $table  The name of the database table to alter.	 * @param   SimpleXMLElement  $field  The XML field definition.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getAlterColumnSQL($table, $field)	{		// TODO Incorporate into parent class and use $this.		$blobs = array('text', 'smalltext', 'mediumtext', 'largetext');		$fName = (string) $field['Field'];		$fType = (string) $field['Type'];		$fNull = (string) $field['Null'];		$fDefault = (isset($field['Default']) && $field['Default'] != 'NULL' ) ?						preg_match('/^[0-9]$/', $field['Default']) ? $field['Default'] : $this->db->quote((string) $field['Default'])					: null;		$query = ' TYPE ' . $fType;		if ($fNull == 'NO')		{			if (in_array($fType, $blobs) || $fDefault === null)			{				$query .= ",\nALTER COLUMN " . $this->db->quoteName($fName) . ' SET NOT NULL' .						",\nALTER COLUMN " . $this->db->quoteName($fName) . ' DROP DEFAULT';			}			else			{				$query .= ",\nALTER COLUMN " . $this->db->quoteName($fName) . ' SET NOT NULL' .						",\nALTER COLUMN " . $this->db->quoteName($fName) . ' SET DEFAULT ' . $fDefault;			}		}		else		{			if ($fDefault !== null)			{				$query .= ",\nALTER COLUMN " . $this->db->quoteName($fName) . ' DROP NOT NULL' .						",\nALTER COLUMN " . $this->db->quoteName($fName) . ' SET DEFAULT ' . $fDefault;			}		}		/* sequence was created in other function, here is associated a default value but not yet owner */		if (strpos($fDefault, 'nextval') !== false)		{			$query .= ";\nALTER SEQUENCE " . $this->db->quoteName($table . '_' . $fName . '_seq') . ' OWNED BY ' . $this->db->quoteName($table . '.' . $fName);		}		return $query;	}	/**	 * Get the SQL syntax for a single column that would be included in a table create statement.	 *	 * @param   SimpleXMLElement  $field  The XML field definition.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getColumnSQL(SimpleXMLElement $field)	{		// TODO Incorporate into parent class and use $this.		$blobs = array('text', 'smalltext', 'mediumtext', 'largetext');		$fName = (string) $field['Field'];		$fType = (string) $field['Type'];		$fNull = (string) $field['Null'];		$fDefault = (isset($field['Default']) && $field['Default'] != 'NULL' ) ?						preg_match('/^[0-9]$/', $field['Default']) ? $field['Default'] : $this->db->quote((string) $field['Default'])					: null;		/* nextval() as default value means that type field is serial */		if (strpos($fDefault, 'nextval') !== false)		{			$query = $this->db->quoteName($fName) . ' SERIAL';		}		else		{			$query = $this->db->quoteName($fName) . ' ' . $fType;			if ($fNull == 'NO')			{				if (in_array($fType, $blobs) || $fDefault === null)				{					$query .= ' NOT NULL';				}				else				{					$query .= ' NOT NULL DEFAULT ' . $fDefault;				}			}			else			{				if ($fDefault !== null)				{					$query .= ' DEFAULT ' . $fDefault;				}			}		}		return $query;	}	/**	 * Get the SQL syntax to drop a column.	 *	 * @param   string  $table  The table name.	 * @param   string  $name   The name of the field to drop.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getDropColumnSQL($table, $name)	{		$query = 'ALTER TABLE ' . $this->db->quoteName($table) . ' DROP COLUMN ' . $this->db->quoteName($name);		return $query;	}	/**	 * Get the SQL syntax to drop an index.	 *	 * @param   string  $name  The name of the key to drop.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getDropIndexSQL($name)	{		$query = 'DROP INDEX ' . $this->db->quoteName($name);		return $query;	}	/**	 * Get the SQL syntax to drop a key.	 *	 * @param   string  $table  The table name.	 * @param   string  $name   The constraint name.	 *	 * @return  string	 *	 * @since   12.1	 */	protected function getDropPrimaryKeySQL($table, $name)	{		$query = 'ALTER TABLE ONLY ' . $this->db->quoteName($table) . ' DROP CONSTRAINT ' . $this->db->quoteName($name);		return $query;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   array  $keys  An array of objects that comprise the keys for the table.	 *	 * @return  array  The lookup array. array({key name} => array(object, ...))	 *	 * @since   12.1	 * @throws  Exception	 */	protected function getIdxLookup($keys)	{		// First pass, create a lookup of the keys.		$lookup = array();		foreach ($keys as $key)		{			if ($key instanceof SimpleXMLElement)			{				$kName = (string) $key['Index'];			}			else			{				$kName = $key->Index;			}			if (empty($lookup[$kName]))			{				$lookup[$kName] = array();			}			$lookup[$kName][] = $key;		}		return $lookup;	}	/**	 * Get the details list of sequences for a table.	 *	 * @param   array  $sequences  An array of objects that comprise the sequences for the table.	 *	 * @return  array  The lookup array. array({key name} => array(object, ...))	 *	 * @since   12.1	 * @throws  Exception	 */	protected function getSeqLookup($sequences)	{		// First pass, create a lookup of the keys.		$lookup = array();		foreach ($sequences as $seq)		{			if ($seq instanceof SimpleXMLElement)			{				$sName = (string) $seq['Name'];			}			else			{				$sName = $seq->Name;			}			if (empty($lookup[$sName]))			{				$lookup[$sName] = array();			}			$lookup[$sName][] = $seq;		}		return $lookup;	}	/**	 * Get the real name of the table, converting the prefix wildcard string if present.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  string	The real name of the table.	 *	 * @since   12.1	 */	protected function getRealTableName($table)	{		// TODO Incorporate into parent class and use $this.		$prefix = $this->db->getPrefix();		// Replace the magic prefix if found.		$table = preg_replace('|^#__|', $prefix, $table);		return $table;	}	/**	 * Merges the incoming structure definition with the existing structure.	 *	 * @return  void	 *	 * @note    Currently only supports XML format.	 * @since   12.1	 * @throws  Exception on error.	 * @todo    If it's not XML convert to XML first.	 */	protected function mergeStructure()	{		$prefix = $this->db->getPrefix();		$tables = $this->db->getTableList();		if ($this->from instanceof SimpleXMLElement)		{			$xml = $this->from;		}		else		{			$xml = new SimpleXMLElement($this->from);		}		// Get all the table definitions.		$xmlTables = $xml->xpath('database/table_structure');		foreach ($xmlTables as $table)		{			// Convert the magic prefix into the real table name.			$tableName = (string) $table['name'];			$tableName = preg_replace('|^#__|', $prefix, $tableName);			if (in_array($tableName, $tables))			{				// The table already exists. Now check if there is any difference.				if ($queries = $this->getAlterTableSQL($xml->database->table_structure))				{					// Run the queries to upgrade the data structure.					foreach ($queries as $query)					{						$this->db->setQuery($query);						try						{							$this->db->execute();						}						catch (RuntimeException $e)						{							$this->addLog('Fail: ' . $this->db->getQuery());							throw $e;						}						$this->addLog('Pass: ' . $this->db->getQuery());					}				}			}			else			{				// This is a new table.				$query = $this->xmlToCreate($table);				$this->db->setQuery($query);				try				{					$this->db->execute();				}				catch (RuntimeException $e)				{					$this->addLog('Fail: ' . $this->db->getQuery());					throw $e;				}				$this->addLog('Pass: ' . $this->db->getQuery());			}		}	}	/**	 * Sets the database connector to use for exporting structure and/or data from PostgreSQL.	 *	 * @param   JDatabaseDriverPostgresql  $db  The database connector.	 *	 * @return  JDatabaseImporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 */	public function setDbo(JDatabaseDriverPostgresql $db)	{		$this->db = $db;		return $this;	}	/**	 * Sets an internal option to merge the structure based on the input data.	 *	 * @param   boolean  $setting  True to export the structure, false to not.	 *	 * @return  JDatabaseImporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 */	public function withStructure($setting = true)	{		$this->options->withStructure = (boolean) $setting;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	$fieldSets = $this->form->getFieldsets('request');	if (!empty($fieldSets))	{		$fieldSet = array_shift($fieldSets);		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$fieldSet->name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), 'request-options');		if (isset($fieldSet->description) && trim($fieldSet->description)) :			echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';		endif;	?>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_($label) ?></legend>			<?php $hidden_fields = ''; ?>			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset('request') as $field) : ?>				<?php if (!$field->hidden) : ?>				<li>					<?php echo $field->label; ?>					<?php echo $field->input; ?>				</li>				<?php else : $hidden_fields .= $field->input; ?>				<?php endif; ?>				<?php endforeach; ?>			</ul>			<?php echo $hidden_fields; ?>		</fieldset><?php	}	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<div class="clr"></div>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_($label) ?></legend>			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>				<?php endforeach; ?>			</ul>		</fieldset><?php endforeach;?><?php	$fieldSets = $this->form->getFieldsets('associations');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<div class="clr"></div>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_($label) ?></legend>			<ul class="adminformlist">				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>				<?php endforeach; ?>			</ul>		</fieldset><?php endforeach;?>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleEmail extends JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  11.1	 * @see    http://www.w3.org/TR/html-markup/input.email.html	 */	protected $regex = '^[a-zA-Z0-9.!#$%&*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$';	/**	 * Method to test the email address and optionally check for uniqueness.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		// If the tld attribute is present, change the regular expression to require at least 2 characters for it.		$tld = ((string) $element['tld'] == 'tld' || (string) $element['tld'] == 'required');		if ($tld)		{			$this->regex = '^[a-zA-Z0-9.!#$%&*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]{2,})$';		}		// Determine if the multiple attribute is present		$multiple = ((string) $element['multiple'] == 'true' || (string) $element['multiple'] == 'multiple');		if ($multiple)		{			$values = explode(',', $value);		}		if (!$multiple)		{			// Test the value against the regular expression.			if (!parent::test($element, $value, $group, $input, $form))			{				return false;			}		}		else		{			foreach ($values as $value)			{				// Test the value against the regular expression.				if (!parent::test($element, $value, $group, $input, $form))				{					return false;				}			}		}		// Check if we should test for uniqueness. This only can be used if multiple is not true		$unique = ((string) $element['unique'] == 'true' || (string) $element['unique'] == 'unique');		if ($unique && !$multiple)		{			// Get the database object and a new query object.			$db = JFactory::getDbo();			$query = $db->getQuery(true);			// Build the query.			$query->select('COUNT(*)')				->from('#__users')				->where('email = ' . $db->quote($value));			// Get the extra field check attribute.			$userId = ($form instanceof JForm) ? $form->getValue('id') : '';			$query->where($db->quoteName('id') . ' <> ' . (int) $userId);			// Set and query the database.			$db->setQuery($query);			$duplicate = (bool) $db->loadResult();			if ($duplicate)			{				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Jobs class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinJobs extends JLinkedinObject{	/**	 * Method to retrieve detailed information about a job.	 *	 * @param   integer  $id      The unique identifier for a job.	 * @param   string   $fields  Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getJob($id, $fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/jobs/' . $id;		// Set request parameters.		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get a list of bookmarked jobs for the current member.	 *	 * @param   string  $fields  Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getBookmarked($fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/job-bookmarks';		// Set request parameters.		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to bookmark a job to the current user's account.	 *	 * @param   integer  $id  The unique identifier for a job.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function bookmark($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/job-bookmarks';		// Build xml.		$xml = '<job-bookmark><job><id>' . $id . '</id></job></job-bookmark>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to delete a bookmark.	 *	 * @param   integer  $id  The unique identifier for a job.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function deleteBookmark($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/job-bookmarks/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to retrieve job suggestions for the current user.	 *	 * @param   string   $fields  Request fields beyond the default ones.	 * @param   integer  $start   Starting location within the result set for paginated returns.	 * @param   integer  $count   The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSuggested($fields = null, $start = 0, $count = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/suggestions/job-suggestions';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to search across LinkedIn's job postings.	 *	 * @param   string   $fields        Request fields beyond the default ones.	 * @param   string   $keywords      Members who have all the keywords anywhere in their profile.	 * @param   string   $company_name  Jobs with a matching company name.	 * @param   string   $job_title     Matches jobs with the same job title.	 * @param   string   $country_code  Matches members with a location in a specific country. Values are defined in by ISO 3166 standard.	 * 									Country codes must be in all lower case.	 * @param   integer  $postal_code   Matches members centered around a Postal Code. Must be combined with the country-code parameter.	 * 									Not supported for all countries.	 * @param   integer  $distance      Matches members within a distance from a central point. This is measured in miles.	 * @param   string   $facets        Facet buckets to return, e.g. location.	 * @param   array    $facet         Array of facet values to search over. Contains values for company, date-posted, location, job-function,	 * 									industry, and salary, in exactly this order, null must be specified for an element if no value.	 * @param   integer  $start         Starting location within the result set for paginated returns.	 * @param   integer  $count         The number of results returned.	 * @param   string   $sort          Controls the search result order. There are four options: R (relationship), DA (date-posted-asc),	 * 									DD (date-posted-desc).	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function search($fields = null, $keywords = null, $company_name = null, $job_title = null, $country_code = null, $postal_code = null,		$distance = null, $facets = null, $facet = null, $start = 0, $count = 0, $sort = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/job-search';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if keywords is specified.		if ($keywords)		{			$data['keywords'] = $keywords;		}		// Check if company-name is specified.		if ($company_name)		{			$data['company-name'] = $company_name;		}		// Check if job-title is specified.		if ($job_title)		{			$data['job-title'] = $job_title;		}		// Check if country_code is specified.		if ($country_code)		{			$data['country-code'] = $country_code;		}		// Check if postal_code is specified.		if ($postal_code)		{			$data['postal-code'] = $postal_code;		}		// Check if distance is specified.		if ($distance)		{			$data['distance'] = $distance;		}		// Check if facets is specified.		if ($facets)		{			$data['facets'] = $facets;		}		// Check if facet is specified.		if ($facet)		{			$data['facet'] = array();			for ($i = 0; $i < count($facet); $i++)			{				if ($facet[$i])				{					if ($i == 0)					{						$data['facet'][] = 'company,' . $this->oauth->safeEncode($facet[$i]);					}					if ($i == 1)					{						$data['facet'][] = 'date-posted,' . $facet[$i];					}					if ($i == 2)					{						$data['facet'][] = 'location,' . $facet[$i];					}					if ($i == 3)					{						$data['facet'][] = 'job-function,' . $this->oauth->safeEncode($facet[$i]);					}					if ($i == 4)					{						$data['facet'][] = 'industry,' . $facet[$i];					}					if ($i == 5)					{						$data['facet'][] = 'salary,' . $facet[$i];					}				}			}		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if sort is specified.		if ($sort)		{			$data['sort'] = $sort;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  UCM * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Interface to handle UCM * * @package     Joomla.Libraries * @subpackage  UCM * @since       3.1 */interface JUcm{}
<?php/** * @package     Joomla.Site * @subpackage  mod_breadcrumbs * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><ul class="breadcrumb<?php echo $moduleclass_sfx; ?>">	<?php	if ($params->get('showHere', 1))	{		echo '<li class="active"><span class="divider icon-location hasTooltip" title="' . JText::_('MOD_BREADCRUMBS_HERE') . '"></span></li>';	}	// Get rid of duplicated entries on trail including home page when using multilanguage	for ($i = 0; $i < $count; $i++)	{		if ($i == 1 && !empty($list[$i]->link) && !empty($list[$i - 1]->link) && $list[$i]->link == $list[$i - 1]->link)		{			unset($list[$i]);		}	}	// Find last and penultimate items in breadcrumbs list	end($list);	$last_item_key = key($list);	prev($list);	$penult_item_key = key($list);	// Generate the trail	foreach ($list as $key => $item) :	// Make a link if not the last item in the breadcrumbs	$show_last = $params->get('showLast', 1);	if ($key != $last_item_key)	{		// Render all but last item - along with separator		echo '<li>';		if (!empty($item->link))		{			echo '<a href="' . $item->link . '" class="pathway">' . $item->name . '</a>';		}		else		{			echo '<span>' . $item->name . '</span>';		}		if (($key != $penult_item_key) || $show_last)		{			echo '<span class="divider">' . $separator . '</span>';		}		echo '</li>';	}	elseif ($show_last)	{		// Render last item if reqd.		echo '<li>';		echo '<span>' . $item->name . '</span>';		echo '</li>';	}	endforeach; ?></ul>
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Prototype form model. * * @package     Joomla.Legacy * @subpackage  Model * @see         JForm * @see         JFormField * @see         JFormRule * @since       12.2 */abstract class JModelForm extends JModelLegacy{	/**	 * Array of form objects.	 *	 * @var    array	 * @since  12.2	 */	protected $_forms = array();	/**	 * Method to checkin a row.	 *	 * @param   integer  $pk  The numeric id of the primary key.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   12.2	 */	public function checkin($pk = null)	{		// Only attempt to check the row in if it exists.		if ($pk)		{			$user = JFactory::getUser();			// Get an instance of the row to checkin.			$table = $this->getTable();			if (!$table->load($pk))			{				$this->setError($table->getError());				return false;			}			// Check if this is the user having previously checked out the row.			if ($table->checked_out > 0 && $table->checked_out != $user->get('id') && !$user->authorise('core.admin', 'com_checkin'))			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_CHECKIN_USER_MISMATCH'));				return false;			}			// Attempt to check the row in.			if (!$table->checkin($pk))			{				$this->setError($table->getError());				return false;			}		}		return true;	}	/**	 * Method to check-out a row for editing.	 *	 * @param   integer  $pk  The numeric id of the primary key.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   12.2	 */	public function checkout($pk = null)	{		// Only attempt to check the row in if it exists.		if ($pk)		{			$user = JFactory::getUser();			// Get an instance of the row to checkout.			$table = $this->getTable();			if (!$table->load($pk))			{				$this->setError($table->getError());				return false;			}			// Check if this is the user having previously checked out the row.			if ($table->checked_out > 0 && $table->checked_out != $user->get('id'))			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_CHECKOUT_USER_MISMATCH'));				return false;			}			// Attempt to check the row out.			if (!$table->checkout($user->get('id'), $pk))			{				$this->setError($table->getError());				return false;			}		}		return true;	}	/**	 * Abstract method for getting the form from the model.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   12.2	 */	abstract public function getForm($data = array(), $loadData = true);	/**	 * Method to get a form object.	 *	 * @param   string   $name     The name of the form.	 * @param   string   $source   The form source. Can be XML string if file flag is set to false.	 * @param   array    $options  Optional array of options for the form creation.	 * @param   boolean  $clear    Optional argument to force load a new form.	 * @param   string   $xpath    An optional xpath to search for the fields.	 *	 * @return  mixed  JForm object on success, False on error.	 *	 * @see     JForm	 * @since   12.2	 */	protected function loadForm($name, $source = null, $options = array(), $clear = false, $xpath = false)	{		// Handle the optional arguments.		$options['control'] = JArrayHelper::getValue($options, 'control', false);		// Create a signature hash.		$hash = md5($source . serialize($options));		// Check if we can use a previously loaded form.		if (isset($this->_forms[$hash]) && !$clear)		{			return $this->_forms[$hash];		}		// Get the form.		JForm::addFormPath(JPATH_COMPONENT . '/models/forms');		JForm::addFieldPath(JPATH_COMPONENT . '/models/fields');		try		{			$form = JForm::getInstance($name, $source, $options, false, $xpath);			if (isset($options['load_data']) && $options['load_data'])			{				// Get the data for the form.				$data = $this->loadFormData();			}			else			{				$data = array();			}			// Allow for additional modification of the form, and events to be triggered.			// We pass the data because plugins may require it.			$this->preprocessForm($form, $data);			// Load the data into the form after the plugins have operated.			$form->bind($data);		}		catch (Exception $e)		{			$this->setError($e->getMessage());			return false;		}		// Store the form for later.		$this->_forms[$hash] = $form;		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  array    The default data is an empty array.	 *	 * @since   12.2	 */	protected function loadFormData()	{		return array();	}	/**	 * Method to allow derived classes to preprocess the data.	 *	 * @param   string  $context  The context identifier.	 * @param   mixed   &$data    The data to be processed. It gets altered directly.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function preprocessData($context, &$data)	{		// Get the dispatcher and load the users plugins.		$dispatcher = JEventDispatcher::getInstance();		JPluginHelper::importPlugin('content');		// Trigger the data preparation event.		$results = $dispatcher->trigger('onContentPrepareData', array($context, $data));		// Check for errors encountered while preparing the data.		if (count($results) > 0 && in_array(false, $results, true))		{			$this->setError($dispatcher->getError());		}	}	/**	 * Method to allow derived classes to preprocess the form.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @see     JFormField	 * @since   12.2	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Import the appropriate plugin group.		JPluginHelper::importPlugin($group);		// Get the dispatcher.		$dispatcher = JEventDispatcher::getInstance();		// Trigger the form preparation event.		$results = $dispatcher->trigger('onContentPrepareForm', array($form, $data));		// Check for errors encountered while preparing the form.		if (count($results) && in_array(false, $results, true))		{			// Get the last error.			$error = $dispatcher->getError();			if (!($error instanceof Exception))			{				throw new Exception($error);			}		}	}	/**	 * Method to validate the form data.	 *	 * @param   JForm   $form   The form to validate against.	 * @param   array   $data   The data to validate.	 * @param   string  $group  The name of the field group to validate.	 *	 * @return  mixed  Array of filtered data if valid, false otherwise.	 *	 * @see     JFormRule	 * @see     JFilterInput	 * @since   12.2	 */	public function validate($form, $data, $group = null)	{		// Filter and validate the form data.		$data = $form->filter($data);		$return = $form->validate($data, $group);		// Check for an error.		if ($return instanceof Exception)		{			$this->setError($return->getMessage());			return false;		}		// Check the validation results.		if ($return === false)		{			// Get the validation messages from the form.			foreach ($form->getErrors() as $message)			{				$this->setError($message);			}			return false;		}		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to pagination rendering. * * pagination_list_footer *	Input variable $list is an array with offsets: *		$list[prefix]		: string *		$list[limit]		: int *		$list[limitstart]	: int *		$list[total]		: int *		$list[limitfield]	: string *		$list[pagescounter]	: string *		$list[pageslinks]	: string * * pagination_list_render *	Input variable $list is an array with offsets: *		$list[all] *			[data]		: string *			[active]	: boolean *		$list[start] *			[data]		: string *			[active]	: boolean *		$list[previous] *			[data]		: string *			[active]	: boolean *		$list[next] *			[data]		: string *			[active]	: boolean *		$list[end] *			[data]		: string *			[active]	: boolean *		$list[pages] *			[{PAGE}][data]		: string *			[{PAGE}][active]	: boolean * * pagination_item_active *	Input variable $item is an object with fields: *		$item->base	: integer *		$item->prefix	: string *		$item->link	: string *		$item->text	: string * * pagination_item_inactive *	Input variable $item is an object with fields: *		$item->base	: integer *		$item->prefix	: string *		$item->link	: string *		$item->text	: string * * This gives template designers ultimate control over how pagination is rendered. * * NOTE: If you override pagination_item_active OR pagination_item_inactive you MUST override them both */function pagination_list_footer($list){	$lang = JFactory::getLanguage();	/**	 * Fix javascript jump menu	 *	 * Remove the onchange=Joomla.submitform from the select tag	 * Add in a button with onclick instead	 */	$fixlimit = $list['limitfield'];	$fixlimit = preg_replace('/onchange="Joomla.submitform\(\);"/', '', $fixlimit);	$html = "<div class=\"containerpg\"><div class=\"pagination\">\n";	$html .= "\n<div class=\"limit\"><label for=\"limit\">".JText::_('JGLOBAL_DISPLAY_NUM')." </label>";	$html .= "\n".$fixlimit;	$html .= "\n<button id=\"pagination-go\" type=\"button\" onclick=\"Joomla.submitform()\">" . JText::_('JSUBMIT') . "</button></div>";	$html .= "\n" . $list['pageslinks'];	$html .= "\n<div class=\"limit\">".$list['pagescounter']."</div>";	$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"".$list['limitstart']."\" />";	$html .= "\n<div class=\"clr\"></div></div></div>";	return $html;}function pagination_list_render($list){	$html = null;	if ($list['start']['active'])	{		$html .= "<div class=\"button2-right\"><div class=\"start\">".$list['start']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-right off\"><div class=\"start\">".$list['start']['data']."</div></div>";	}	if ($list['previous']['active'])	{		$html .= "<div class=\"button2-right\"><div class=\"prev\">".$list['previous']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-right off\"><div class=\"prev\">".$list['previous']['data']."</div></div>";	}	$html .= "\n<div class=\"button2-left\"><div class=\"page\">";	foreach ($list['pages'] as $page)	{		$html .= $page['data'];	}	$html .= "\n</div></div>";	if ($list['next']['active'])	{		$html .= "<div class=\"button2-left\"><div class=\"next\">".$list['next']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-left off\"><div class=\"next\">".$list['next']['data']."</div></div>";	}	if ($list['end']['active'])	{		$html .= "<div class=\"button2-left\"><div class=\"end\">".$list['end']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-left off\"><div class=\"end\">".$list['end']['data']."</div></div>";	}	return $html;}function pagination_item_active(&$item){	if ($item->base > 0)	{		return "<a href=\"#\" title=\"".$item->text."\" onclick=\"document.adminForm." . $item->prefix . "limitstart.value=".$item->base."; Joomla.submitform();return false;\">".$item->text."</a>";	}	else	{		return "<a href=\"#\" title=\"".$item->text."\" onclick=\"document.adminForm." . $item->prefix . "limitstart.value=0; Joomla.submitform();return false;\">".$item->text."</a>";	}}function pagination_item_inactive(&$item){	if ($item->active)	{		$class = 'class="active"';	}	else	{		$class = '';	}	return '<span ' . $class . '>' . $item->text . '</span>';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app      = JFactory::getApplication();$template = $app->getTemplate();// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (document.formvalidator.isValid(document.id('component-form')))		{			Joomla.submitform(task, document.getElementById('component-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_config');?>" id="component-form" method="post" name="adminForm" autocomplete="off" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin Sidebar -->		<div id="sidebar" class="span2">			<div class="sidebar-nav">				<?php echo $this->loadTemplate('navigation'); ?>			</div>		</div>		<!-- End Sidebar -->		<div class="span10">			<ul class="nav nav-tabs" id="configTabs">				<?php					$fieldSets = $this->form->getFieldsets();					foreach ($fieldSets as $name => $fieldSet) :						$label = empty($fieldSet->label) ? 'COM_CONFIG_'.$name.'_FIELDSET_LABEL' : $fieldSet->label;				?>					<li><a href="#<?php echo $name;?>" data-toggle="tab"><?php echo  JText::_($label);?></a></li>				<?php					endforeach;				?>			</ul>			<div class="tab-content">				<?php					$fieldSets = $this->form->getFieldsets();					foreach ($fieldSets as $name => $fieldSet) :				?>					<div class="tab-pane" id="<?php echo $name;?>">						<?php							if (isset($fieldSet->description) && !empty($fieldSet->description)) :								echo '<p class="tab-description">'.JText::_($fieldSet->description).'</p>';							endif;							foreach ($this->form->getFieldset($name) as $field):						?>							<div class="control-group">						<?php if (!$field->hidden && $name != "permissions") : ?>								<div class="control-label">									<?php echo $field->label; ?>								</div>						<?php endif; ?>						<div class="<?php if ($name != "permissions") : ?>controls<?php endif; ?>">							<?php echo $field->input; ?>						</div>					</div>				<?php					endforeach;				?>				</div>				<?php				endforeach;				?>			</div>		</div>	</div>	<div>		<input type="hidden" name="id" value="<?php echo $this->component->id;?>" />		<input type="hidden" name="component" value="<?php echo $this->component->option;?>" />		<input type="hidden" name="return" value="<?php echo $this->return;?>" />		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form><script type="text/javascript">		jQuery('#configTabs a:first').tab('show'); // Select first tab</script>
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.admin')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Checkin');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds component helper. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsHelper{	public static $extension = 'com_newsfeeds';	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_NEWSFEEDS_SUBMENU_NEWSFEEDS'),			'index.php?option=com_newsfeeds&view=newsfeeds',			$vName == 'newsfeeds'		);		JHtmlSidebar::addEntry(			JText::_('COM_NEWSFEEDS_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_newsfeeds',			$vName == 'categories'		);		if ($vName == 'categories')		{			JToolbarHelper::title(				JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', JText::_('com_newsfeeds')),				'newsfeeds-categories');		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 *	 * @return  JObject	 */	public static function getActions($categoryId = 0, $newsfeedId = 0)	{		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($categoryId))		{			$assetName = 'com_newsfeeds';			$level = 'component';		}		else		{			$assetName = 'com_newsfeeds.category.'.(int) $categoryId;			$level = 'category';		}		$actions = JAccess::getActions('com_newsfeeds', $level);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Templates manager master display controller. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'styles';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$view   = $this->input->get('view', 'styles');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'style' && $layout == 'edit' && !$this->checkEditId('com_templates.edit.style', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_templates&view=styles', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP client class for connecting to a MediaWiki instance. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiHttp extends JHttp{	/**     * Constructor.     *     * @param   JRegistry       $options    Client options object.     * @param   JHttpTransport  $transport  The HTTP transport object.     *     * @since   12.3     */	public function __construct(JRegistry $options = null, JHttpTransport $transport = null)	{		// Override the JHttp contructor to use JHttpTransportStream.		$this->options = isset($options) ? $options : new JRegistry;		$this->transport = isset($transport) ? $transport : new JHttpTransportStream($this->options);		// Make sure the user agent string is defined.		$this->options->def('api.useragent', 'JMediawiki/1.0');		// Set the default timeout to 120 seconds.		$this->options->def('api.timeout', 120);	}	/**	 * Method to send the GET command to the server.	 *	 * @param   string  $url      Path to the resource.	 * @param   array   $headers  An array of name-value pairs to include in the header of the request.	 *	 * @return  JHttpResponse	 *	 * @since   12.3	 */	public function get($url, array $headers = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		return $this->transport->request('GET', new JUri($url), null, $headers, $this->options->get('api.timeout'), $this->options->get('api.useragent'));	}	/**	 * Method to send the POST command to the server.	 *	 * @param   string  $url      Path to the resource.	 * @param   mixed   $data     Either an associative array or a string to be sent with the request.	 * @param   array   $headers  An array of name-value pairs to include in the header of the request.	 *	 * @return  JHttpResponse	 *	 * @since   12.3	 */	public function post($url, $data, array $headers = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		return $this->transport->request('POST', new JUri($url), $data, $headers, $this->options->get('api.timeout'), $this->options->get('api.useragent'));	}}
<?php/** * @package     Joomla.CMS * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JLoader::register('TagsHelperRoute', JPATH_BASE . '/components/com_tags/helpers/route.php');?><?php if (!empty($displayData)) : ?>	<div class="tags">		<?php foreach ($displayData as $i => $tag) : ?>			<?php if (in_array($tag->access, JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id')))) : ?>				<?php $tagParams = new JRegistry($tag->params); ?>				<?php $link_class = $tagParams->get('tag_link_class', 'label label-info'); ?>				<span class="tag-<?php echo $tag->tag_id; ?> tag-list<?php echo $i ?>">					<a href="<?php echo JRoute::_(TagsHelperRoute::getTagRoute($tag->tag_id . ':' . $tag->alias)) ?>" class="<?php echo $link_class; ?>">						<?php echo $this->escape($tag->title); ?>					</a>				</span>&nbsp;			<?php endif; ?>		<?php endforeach; ?>	</div><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';JHtml::_('bootstrap.tooltip');if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :		if (!isset($this->items[$this->parent->id][$id + 1]))		{			$class = ' class="last"';		}		?>		<div <?php echo $class; ?> >		<?php $class = ''; ?>			<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($item->id));?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_WEBLINKS_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_weblinks.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">						<?php						$this->items[$item->id] = $item->getChildren();						$this->parent = $item;						$this->maxLevelcat--;						echo $this->loadTemplate('items');						$this->parent = $item->getParent();						$this->maxLevelcat++;						?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Item View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewMenu extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form	 = $this->get('Form');		$this->item	 = $this->get('Item');		$this->state = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);		$this->addToolbar();	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$input = JFactory::getApplication()->input;		$input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = MenusHelper::getActions($this->state->get('filter.parent_id'));		JToolbarHelper::title(JText::_($isNew ? 'COM_MENUS_VIEW_NEW_MENU_TITLE' : 'COM_MENUS_VIEW_EDIT_MENU_TITLE'), 'menu.png');		// If a new item, can save the item.  Allow users with edit permissions to apply changes to prevent returning to grid.		if ($isNew && $canDo->get('core.create'))		{			if ($canDo->get('core.edit'))			{				JToolbarHelper::apply('menu.apply');			}			JToolbarHelper::save('menu.save');		}		// If user can edit, can save the item.		if (!$isNew && $canDo->get('core.edit'))		{			JToolbarHelper::apply('menu.apply');			JToolbarHelper::save('menu.save');		}		// If the user can create new items, allow them to see Save & New		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('menu.save2new');		}		if ($isNew)		{			JToolbarHelper::cancel('menu.cancel');		}		else		{			JToolbarHelper::cancel('menu.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_MENUS_MENU_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Displays options as a list of check boxes. * Multiselect may be forced to be true. * * @package     Joomla.Platform * @subpackage  Form * @see         JFormFieldCheckbox * @since       11.1 */class JFormFieldCheckboxes extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Checkboxes';	/**	 * Flag to tell the field to always be in multiple values mode.	 *	 * @var    boolean	 * @since  11.1	 */	protected $forceMultiple = true;	/**	 * Method to get the field input markup for check boxes.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="checkboxes ' . (string) $this->element['class'] . '"' : ' class="checkboxes"';		$checkedOptions = explode(',', (string) $this->element['checked']);		// Start the checkbox field output.		$html[] = '<fieldset id="' . $this->id . '"' . $class . '>';		// Get the field options.		$options = $this->getOptions();		// Build the checkbox field output.		$html[] = '<ul>';		foreach ($options as $i => $option)		{			// Initialize some option attributes.			if (!isset($this->value) || empty($this->value))			{				$checked = (in_array((string) $option->value, (array) $checkedOptions) ? ' checked="checked"' : '');			}			else			{				$value = !is_array($this->value) ? explode(',', $this->value) : $this->value;				$checked = (in_array((string) $option->value, $value) ? ' checked="checked"' : '');			}			$class = !empty($option->class) ? ' class="' . $option->class . '"' : '';			$required = !empty($option->required) ? ' required="required" aria-required="true"' : '';			$disabled = !empty($option->disable) ? ' disabled="disabled"' : '';			// Initialize some JavaScript option attributes.			$onclick = !empty($option->onclick) ? ' onclick="' . $option->onclick . '"' : '';			$html[] = '<li>';			$html[] = '<input type="checkbox" id="' . $this->id . $i . '" name="' . $this->name . '" value="'				. htmlspecialchars($option->value, ENT_COMPAT, 'UTF-8') . '"' . $checked . $class . $onclick . $disabled . $required . '/>';			$html[] = '<label for="' . $this->id . $i . '"' . $class . '>' . JText::_($option->text) . '</label>';			$html[] = '</li>';		}		$html[] = '</ul>';		// End the checkbox field output.		$html[] = '</fieldset>';		return implode($html);	}	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		foreach ($this->element->children() as $option)		{			// Only add <option /> elements.			if ($option->getName() != 'option')			{				continue;			}			// Create a new option object based on the <option /> element.			$tmp = JHtml::_(				'select.option', (string) $option['value'], trim((string) $option), 'value', 'text',				((string) $option['disabled'] == 'true')			);			// Set some option attributes.			$tmp->class = (string) $option['class'];			// Set some JavaScript option attributes.			$tmp->onclick = (string) $option['onclick'];			// Add the option object to the result set.			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class working with menu select lists * * @package     Joomla.Legacy * @subpackage  HTML * @since       11.1 */abstract class JHtmlMenu{	/**	 * Cached array of the menus.	 *	 * @var    array	 * @since  11.1	 */	protected static $menus = null;	/**	 * Cached array of the menus items.	 *	 * @var    array	 * @since  11.1	 */	protected static $items = null;	/**	 * Get a list of the available menus.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function menus()	{		if (empty(self::$menus))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('menutype AS value, title AS text')				->from($db->quoteName('#__menu_types'))				->order('title');			$db->setQuery($query);			self::$menus = $db->loadObjectList();		}		return self::$menus;	}	/**	 * Returns an array of menu items grouped by menu.	 *	 * @param   array  $config  An array of configuration options.	 *	 * @return  array	 */	public static function menuitems($config = array())	{		if (empty(self::$items))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('menutype AS value, title AS text')				->from($db->quoteName('#__menu_types'))				->order('title');			$db->setQuery($query);			$menus = $db->loadObjectList();			$query->clear()				->select('a.id AS value, a.title AS text, a.level, a.menutype')				->from('#__menu AS a')				->where('a.parent_id > 0')				->where('a.type <> ' . $db->quote('url'))				->where('a.client_id = 0');			// Filter on the published state			if (isset($config['published']))			{				if (is_numeric($config['published']))				{					$query->where('a.published = ' . (int) $config['published']);				}				elseif ($config['published'] === '')				{					$query->where('a.published IN (0,1)');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Collate menu items based on menutype			$lookup = array();			foreach ($items as &$item)			{				if (!isset($lookup[$item->menutype]))				{					$lookup[$item->menutype] = array();				}				$lookup[$item->menutype][] = &$item;				$item->text = str_repeat('- ', $item->level) . $item->text;			}			self::$items = array();			foreach ($menus as &$menu)			{				// Start group:				self::$items[] = JHtml::_('select.optgroup', $menu->text);				// Special "Add to this Menu" option:				self::$items[] = JHtml::_('select.option', $menu->value . '.1', JText::_('JLIB_HTML_ADD_TO_THIS_MENU'));				// Menu items:				if (isset($lookup[$menu->value]))				{					foreach ($lookup[$menu->value] as &$item)					{						self::$items[] = JHtml::_('select.option', $menu->value . '.' . $item->value, $item->text);					}				}				// Finish group:				self::$items[] = JHtml::_('select.optgroup', $menu->text);			}		}		return self::$items;	}	/**	 * Displays an HTML select list of menu items.	 *	 * @param   string  $name      The name of the control.	 * @param   string  $selected  The value of the selected option.	 * @param   string  $attribs   Attributes for the control.	 * @param   array   $config    An array of options for the control.	 *	 * @return  string	 */	public static function menuitemlist($name, $selected = null, $attribs = null, $config = array())	{		static $count;		$options = self::menuitems($config);		return JHtml::_(			'select.genericlist', $options, $name,			array(				'id' => isset($config['id']) ? $config['id'] : 'assetgroups_' . (++$count),				'list.attr' => (is_null($attribs) ? 'class="inputbox" size="1"' : $attribs),				'list.select' => (int) $selected,				'list.translate' => false			)		);	}	/**	 * Build the select list for Menu Ordering	 *	 * @param   object   &$row  The row object	 * @param   integer  $id    The id for the row. Must exist to enable menu ordering	 *	 * @return  string	 *	 * @since   11.1	 */	public static function ordering(&$row, $id)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		if ($id)		{			$query->select('ordering AS value, title AS text')				->from($db->quoteName('#__menu'))				->where($db->quoteName('menutype') . ' = ' . $db->quote($row->menutype))				->where($db->quoteName('parent_id') . ' = ' . (int) $row->parent_id)				->where($db->quoteName('published') . ' != -2')				->order('ordering');			$order = JHtml::_('list.genericordering', $query);			$ordering = JHtml::_(				'select.genericlist', $order, 'ordering',				array('list.attr' => 'class="inputbox" size="1"', 'list.select' => (int) $row->ordering)			);		}		else		{			$ordering = '<input type="hidden" name="ordering" value="' . $row->ordering . '" />' . JText::_('JGLOBAL_NEWITEMSLAST_DESC');		}		return $ordering;	}	/**	 * Build the multiple select list for Menu Links/Pages	 *	 * @param   boolean  $all         True if all can be selected	 * @param   boolean  $unassigned  True if unassigned can be selected	 *	 * @return  string	 *	 * @since   11.1	 */	public static function linkoptions($all = false, $unassigned = false)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get a list of the menu items		$query->select('m.id, m.parent_id, m.title, m.menutype')			->from($db->quoteName('#__menu') . ' AS m')			->where($db->quoteName('m.published') . ' = 1')			->order('m.menutype, m.parent_id, m.ordering');		$db->setQuery($query);		$mitems = $db->loadObjectList();		if (!$mitems)		{			$mitems = array();		}		// Establish the hierarchy of the menu		$children = array();		// First pass - collect children		foreach ($mitems as $v)		{			$pt = $v->parent_id;			$list = @$children[$pt] ? $children[$pt] : array();			array_push($list, $v);			$children[$pt] = $list;		}		// Second pass - get an indent list of the items		$list = self::TreeRecurse((int) $mitems[0]->parent_id, '', array(), $children, 9999, 0, 0);		// Code that adds menu name to Display of Page(s)		$mitems = array();		if ($all | $unassigned)		{			$mitems[] = JHtml::_('select.option', '<OPTGROUP>', JText::_('JOPTION_MENUS'));			if ($all)			{				$mitems[] = JHtml::_('select.option', 0, JText::_('JALL'));			}			if ($unassigned)			{				$mitems[] = JHtml::_('select.option', -1, JText::_('JOPTION_UNASSIGNED'));			}			$mitems[] = JHtml::_('select.option', '</OPTGROUP>');		}		$lastMenuType = null;		$tmpMenuType = null;		foreach ($list as $list_a)		{			if ($list_a->menutype != $lastMenuType)			{				if ($tmpMenuType)				{					$mitems[] = JHtml::_('select.option', '</OPTGROUP>');				}				$mitems[] = JHtml::_('select.option', '<OPTGROUP>', $list_a->menutype);				$lastMenuType = $list_a->menutype;				$tmpMenuType = $list_a->menutype;			}			$mitems[] = JHtml::_('select.option', $list_a->id, $list_a->title);		}		if ($lastMenuType !== null)		{			$mitems[] = JHtml::_('select.option', '</OPTGROUP>');		}		return $mitems;	}	/**	 * Build the list representing the menu tree	 *	 * @param   integer  $id         Id of the menu item	 * @param   string   $indent     The indentation string	 * @param   array    $list       The list to process	 * @param   array    &$children  The children of the current item	 * @param   integer  $maxlevel   The maximum number of levels in the tree	 * @param   integer  $level      The starting level	 * @param   string   $type       Type of link: component, URL, alias, separator	 *	 * @return  array	 *	 * @since   11.1	 */	public static function treerecurse($id, $indent, $list, &$children, $maxlevel = 9999, $level = 0, $type = 1)	{		if (@$children[$id] && $level <= $maxlevel)		{			foreach ($children[$id] as $v)			{				$id = $v->id;				if ($type)				{					$pre = '<sup>|_</sup>&#160;';					$spacer = '.&#160;&#160;&#160;&#160;&#160;&#160;';				}				else				{					$pre = '- ';					$spacer = '&#160;&#160;';				}				if ($v->parent_id == 0)				{					$txt = $v->title;				}				else				{					$txt = $pre . $v->title;				}				$list[$id] = $v;				$list[$id]->treename = $indent . $txt;				$list[$id]->children = count(@$children[$id]);				$list = self::TreeRecurse($id, $indent . $spacer, $list, $children, $maxlevel, $level + 1, $type);			}		}		return $list;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_CONTACT_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_CONTACT_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.user'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_contact');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-user-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('contact.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=templates'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('Filters'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TEMPLATES_TEMPLATES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value="*"><?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?></option>				<?php echo JHtml::_('select.options', TemplatesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist" id="template-mgr">		<thead>			<tr>				<th class="checkmark-col">					&#160;				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_TEMPLATE', 'a.element', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'JCLIENT', 'a.client_id', $listDirn, $listOrder); ?>				</th>				<th class="center width-10">					<?php echo JText::_('JVERSION'); ?>				</th>				<th class="width-15">					<?php echo JText::_('JDATE'); ?>				</th>				<th class="width-25">					<?php echo JText::_('JAUTHOR'); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('templates.thumb', $item->element, $item->client_id); ?>				</td>				<td class="template-name">					<a href="<?php echo JRoute::_('index.php?option=com_templates&view=template&id='.(int) $item->extension_id); ?>">						<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_DETAILS', $item->name); ?></a>					<p>					<?php if ($this->preview && $item->client_id == '0') : ?>						<a href="<?php echo JURI::root().'index.php?tp=1&template='.$item->element; ?>" target="_blank">							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_PREVIEW'); ?></a>					<?php elseif ($item->client_id == '1') : ?>						<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN'); ?>					<?php else: ?>						<span class="hasTip" title="<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?>::<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_DESC'); ?>">							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?></span>					<?php endif; ?>					</p>				</td>				<td class="center">					<?php echo $item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>				</td>				<td class="center">					<?php echo $this->escape($item->xmldata->get('version')); ?>				</td>				<td class="center">					<?php echo $this->escape($item->xmldata->get('creationDate')); ?>				</td>				<td>					<?php if ($author = $item->xmldata->get('author')) : ?>						<p><?php echo $this->escape($author); ?></p>					<?php else : ?>						&mdash;					<?php endif; ?>					<?php if ($email = $item->xmldata->get('authorEmail')) : ?>						<p><?php echo $this->escape($email); ?></p>					<?php endif; ?>					<?php if ($url = $item->xmldata->get('authorUrl')) : ?>						<p><a href="<?php echo $this->escape($url); ?>">							<?php echo $this->escape($url); ?></a></p>					<?php endif; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of newsfeed records. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsModelNewsfeeds extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'published', 'a.published',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'ordering', 'a.ordering',				'language', 'a.language',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'cache_time', 'a.cache_time',				'numarticles',			);			$app = JFactory::getApplication();			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$config['filter_fields'][] = 'association';			}		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.published', 'filter_published', '', 'string');		$this->setState('filter.published', $state);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', null);		$this->setState('filter.category_id', $categoryId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// force a language		$forcedLanguage = $app->input->get('forcedLanguage');		if (!empty($forcedLanguage))		{			$this->setState('filter.language', $forcedLanguage);			$this->setState('filter.forcedLanguage', $forcedLanguage);		}		$tag = $this->getUserStateFromRequest($this->context . '.filter.tag', 'filter_tag', '');		$this->setState('filter.tag', $tag);		// Load the parameters.		$params = JComponentHelper::getParams('com_newsfeeds');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.name, a.alias, a.checked_out, a.checked_out_time, a.catid,' .					' a.numarticles, a.cache_time,' .					' a.published, a.access, a.ordering, a.language, a.publish_up, a.publish_down'			)		);		$query->from($db->quoteName('#__newsfeeds') . ' AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the associations.		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$query->select('COUNT(asso2.id)>1 as association')				->join('LEFT', '#__associations AS asso ON asso.id = a.id AND asso.context=' . $db->quote('com_newsfeeds.item'))				->join('LEFT', '#__associations AS asso2 ON asso2.key = asso.key')				->group('a.id');		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state.		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by category.		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$query->where('a.catid = ' . (int) $categoryId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.name LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Filter by a single tag.		$tagId = $this->getState('filter.tag');		if (is_numeric($tagId))		{			$query->where($db->quoteName('tagmap.tag_id') . ' = ' . (int) $tagId)				->join(					'LEFT', $db->quoteName('#__contentitem_tag_map', 'tagmap')					. ' ON ' . $db->quoteName('tagmap.content_item_id') . ' = ' . $db->quoteName('a.id')					. ' AND ' . $db->quoteName('tagmap.type_alias') . ' = ' . $db->quote('com_newsfeeds.newsfeed')				);		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering');		$orderDirn = $this->state->get('list.direction');		if ($orderCol == 'a.ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.2 */class JFormRuleColor extends JFormRule{	/**	 * Method to test for a valid color in hexadecimal.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.2	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$value = trim($value);		if (empty($value))		{			// A color field can't be empty, we default to black. This is the same as the HTML5 spec.			$value = '#000000';			return true;		}		if ($value[0] != '#')		{			return false;		}		// Remove the leading # if present to validate the numeric part		$value = ltrim($value, '#');		// The value must be 6 or 3 characters long		if (!((strlen($value) == 6 || strlen($value) == 3) && ctype_xdigit($value)))		{			return false;		}		// Prepend the # again		$value = '#' . $value;		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Model for the display of system information. * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminModelSysInfo extends JModelLegacy{	/**	 * @var array Some PHP settings	 * @since  1.6	 */	protected $php_settings = null;	/**	 * @var array Config values	 * @since  1.6	 */	protected $config = null;	/**	 * @var array Some system values	 * @since  1.6	 */	protected $info = null;	/**	 * @var string PHP info	 * @since  1.6	 */	protected $php_info = null;	/**	 * Information about writable state of directories	 *	 * @var array	 * @since  1.6	 */	protected $directories = null;	/**	 * The current editor.	 *	 * @var string	 * @since  1.6	 */	protected $editor = null;	/**	 * Method to get the ChangeLog	 *	 * @return array some php settings	 *	 * @since  1.6	 */	public function &getPhpSettings()	{		if (is_null($this->php_settings))		{			$this->php_settings = array();			$this->php_settings['safe_mode']			= ini_get('safe_mode') == '1';			$this->php_settings['display_errors']		= ini_get('display_errors') == '1';			$this->php_settings['short_open_tag']		= ini_get('short_open_tag') == '1';			$this->php_settings['file_uploads']			= ini_get('file_uploads') == '1';			$this->php_settings['magic_quotes_gpc']		= ini_get('magic_quotes_gpc') == '1';			$this->php_settings['register_globals']		= ini_get('register_globals') == '1';			$this->php_settings['output_buffering']		= (bool) ini_get('output_buffering');			$this->php_settings['open_basedir']			= ini_get('open_basedir');			$this->php_settings['session.save_path']	= ini_get('session.save_path');			$this->php_settings['session.auto_start']	= ini_get('session.auto_start');			$this->php_settings['disable_functions']	= ini_get('disable_functions');			$this->php_settings['xml']					= extension_loaded('xml');			$this->php_settings['zlib']					= extension_loaded('zlib');			$this->php_settings['zip']					= function_exists('zip_open') && function_exists('zip_read');			$this->php_settings['mbstring']				= extension_loaded('mbstring');			$this->php_settings['iconv']				= function_exists('iconv');		}		return $this->php_settings;	}	/**	 * Method to get the config	 *	 * @return  array  config values	 *	 * @since  1.6	 */	public function &getConfig()	{		if (is_null($this->config))		{			$registry = new JRegistry(new JConfig);			$this->config = $registry->toArray();			$hidden = array('host', 'user', 'password', 'ftp_user', 'ftp_pass', 'smtpuser', 'smtppass');			foreach ($hidden as $key)			{				$this->config[$key] = 'xxxxxx';			}		}		return $this->config;	}	/**	 * Method to get the system information	 *	 * @return  array system information values	 *	 * @since   1.6	 */	public function &getInfo()	{		if (is_null($this->info))		{			$this->info = array();			$version = new JVersion;			$platform = new JPlatform;			$db = JFactory::getDbo();			if (isset($_SERVER['SERVER_SOFTWARE']))			{				$sf = $_SERVER['SERVER_SOFTWARE'];			}			else {				$sf = getenv('SERVER_SOFTWARE');			}			$this->info['php']			= php_uname();			$this->info['dbversion']	= $db->getVersion();			$this->info['dbcollation']	= $db->getCollation();			$this->info['phpversion']	= phpversion();			$this->info['server']		= $sf;			$this->info['sapi_name']	= php_sapi_name();			$this->info['version']		= $version->getLongVersion();			$this->info['platform']		= $platform->getLongVersion();			$this->info['useragent']	= $_SERVER['HTTP_USER_AGENT'];		}		return $this->info;	}	/**	 * Method to get the PHP info	 *	 * @return  string PHP info	 *	 * @since  1.6	 */	public function &getPHPInfo()	{		if (is_null($this->php_info))		{			ob_start();			date_default_timezone_set('UTC');			phpinfo(INFO_GENERAL | INFO_CONFIGURATION | INFO_MODULES);			$phpinfo = ob_get_contents();			ob_end_clean();			preg_match_all('#<body[^>]*>(.*)</body>#siU', $phpinfo, $output);			$output = preg_replace('#<table[^>]*>#', '<table class="table table-striped adminlist">', $output[1][0]);			$output = preg_replace('#(\w),(\w)#', '\1, \2', $output);			$output = preg_replace('#<hr />#', '', $output);			$output = str_replace('<div class="center">', '', $output);			$output = preg_replace('#<tr class="h">(.*)<\/tr>#', '<thead><tr class="h">$1</tr></thead><tbody>', $output);			$output = str_replace('</table>', '</tbody></table>', $output);			$output = str_replace('</div>', '', $output);			$this->php_info = $output;		}		return $this->php_info;	}	/**	 * Method to get the directory states	 *	 * @return array States of directories	 *	 * @since  1.6	 */	public function getDirectory()	{		if (is_null($this->directories))		{			$this->directories = array();			$registry = JFactory::getConfig();			$cparams = JComponentHelper::getParams('com_media');			$this->_addDirectory('administrator/components', JPATH_ADMINISTRATOR . '/components');			$this->_addDirectory('administrator/language', JPATH_ADMINISTRATOR . '/language');			// List all admin languages			$admin_langs = new DirectoryIterator(JPATH_ADMINISTRATOR . '/language');			foreach ($admin_langs as $alang)			{				if (!$alang->isDir() || $alang->isDot())				{					continue;				}				$name = $alang->getFilename();				$this->_addDirectory('administrator/language/' . $name, JPATH_ADMINISTRATOR . '/language/' . $name);			}			// List all manifests folders			$manifests = new DirectoryIterator(JPATH_ADMINISTRATOR . '/manifests');			foreach ($manifests as $manifest)			{				if (!$manifest->isDir() || $manifest->isDot())				{					continue;				}				$name = $manifest->getFilename();				$this->_addDirectory('administrator/manifests/' . $name, JPATH_ADMINISTRATOR . '/manifests/' . $name);			}			$this->_addDirectory('administrator/modules', JPATH_ADMINISTRATOR . '/modules');			$this->_addDirectory('administrator/templates', JPATH_THEMES);			$this->_addDirectory('components', JPATH_SITE . '/components');			$this->_addDirectory($cparams->get('image_path'), JPATH_SITE . '/' . $cparams->get('image_path'));			// List all images folders			$image_folders = new DirectoryIterator(JPATH_SITE . '/' . $cparams->get('image_path'));			foreach ($image_folders as $folder)			{				if (!$folder->isDir() || $folder->isDot())				{					continue;				}				$name = $manifest->getFilename();				$this->_addDirectory('images/' . $name, JPATH_SITE . '/' . $cparams->get('image_path') . '/' . $name);			}			$this->_addDirectory('language', JPATH_SITE . '/language');			// List all site languages			$site_langs = new DirectoryIterator(JPATH_SITE . '/language');			foreach ($site_langs as $alang)			{				if (!$alang->isDir() || $alang->isDot())				{					continue;				}				$name = $alang->getFilename();				$this->_addDirectory('language/' . $name, JPATH_SITE . '/language/' . $name);			}			$this->_addDirectory('libraries', JPATH_LIBRARIES);			$this->_addDirectory('media', JPATH_SITE . '/media');			$this->_addDirectory('modules', JPATH_SITE . '/modules');			$this->_addDirectory('plugins', JPATH_PLUGINS);			$plugin_groups = new DirectoryIterator(JPATH_SITE . '/language');			foreach ($plugin_groups as $folder)			{				if (!$alang->isDir() || $alang->isDot())				{					continue;				}				$name = $alang->getFilename();				$this->_addDirectory('plugins/' . $name, JPATH_PLUGINS . '/' . $name);			}			$this->_addDirectory('templates', JPATH_SITE . '/templates');			$this->_addDirectory('configuration.php', JPATH_CONFIGURATION . '/configuration.php');			$this->_addDirectory('cache', JPATH_SITE.'/cache', 'COM_ADMIN_CACHE_DIRECTORY');			$this->_addDirectory('administrator/cache', JPATH_CACHE, 'COM_ADMIN_CACHE_DIRECTORY');			$this->_addDirectory($registry->get('log_path', JPATH_ROOT . '/log'), $registry->get('log_path', JPATH_ROOT . '/log'), 'COM_ADMIN_LOG_DIRECTORY');			$this->_addDirectory($registry->get('tmp_path', JPATH_ROOT . '/tmp'), $registry->get('tmp_path', JPATH_ROOT . '/tmp'), 'COM_ADMIN_TEMP_DIRECTORY');		}		return $this->directories;	}	/**	 * Method to add a directory	 *	 * @return void	 * @since  1.6	 */	private function _addDirectory($name, $path, $message = '')	{		$this->directories[$name] = array('writable' => is_writable($path), 'message' => $message);	}	/**	 * Method to get the editor	 *	 * @return  string The default editor	 *	 * @note: has to be removed (it is present in the config...)	 *	 * @since  1.6	 */	public function &getEditor()	{		if (is_null($this->editor))		{			$config = JFactory::getConfig();			$this->editor = $config->get('editor');		}		return $this->editor;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);?>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a multi line area for entry of plain text * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/textarea.html#textarea * @since       11.1 */class JFormFieldTextarea extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Textarea';	/**	 * Method to get the textarea field input markup.	 * Use the rows and columns attributes to specify the dimensions of the area.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$columns = $this->element['cols'] ? ' cols="' . (int) $this->element['cols'] . '"' : '';		$rows = $this->element['rows'] ? ' rows="' . (int) $this->element['rows'] . '"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<textarea name="' . $this->name . '" id="' . $this->id . '"' . $columns . $rows . $class . $disabled . $onchange . $required . '>'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '</textarea>';	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);// Bootstrap the applicationrequire_once dirname(__FILE__) . '/application/bootstrap.php';// Get the application$app = JApplicationWeb::getInstance('InstallationApplicationWeb');// Execute the application$app->execute();
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state',	'com_plugins');$saveOrder	= $listOrder == 'ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_plugins&task=plugins.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_plugins&view=plugins'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="main-container" class="span10"><?php else : ?>	<div id="main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_PLUGINS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_PLUGINS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'enabled', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_NAME_HEADING', 'name', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_FOLDER_HEADING', 'folder', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_PLUGINS_ELEMENT_HEADING', 'element', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'extension_id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="12">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'ordering');				$canEdit    = $user->authorise('core.edit',       'com_plugins');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_plugins') && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->folder?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu" title="<?php echo $item->ordering;?>"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>						</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->extension_id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->enabled, $i, 'plugins.', $canChange); ?>					</td>					<td>						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'plugins.', $canCheckin); ?>						<?php endif; ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_plugins&task=plugin.edit&extension_id='.(int) $item->extension_id); ?>">								<?php echo $item->name; ?></a>						<?php else : ?>								<?php echo $item->name; ?>						<?php endif; ?>					</td>					<td class="nowrap small hidden-phone">						<?php echo $this->escape($item->folder);?>					</td>					<td class="nowrap small hidden-phone">						<?php echo $this->escape($item->element);?>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->extension_id;?>					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of access levels. Access levels control what users in specific * groups can see. * * @package     Joomla.Platform * @subpackage  Form * @see         JAccess * @since       11.1 */class JFormFieldAccessLevel extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'AccessLevel';	/**	 * Method to get the field input markup.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->multiple ? ' multiple="multiple"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field options.		$options = $this->getOptions();		return JHtml::_('access.level', $this->name, $this->value, $attr, $options, $this->id);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseQuerySqlite extends JDatabaseQueryPdo implements JDatabaseQueryPreparable, JDatabaseQueryLimitable{	/**	 * @var integer	 * @since 12.1	 */	protected $limit;	/**	 * @var integer	 * @since 12.1	 */	protected $offset;	/**	 * @var mixed	 * @since 12.1	 */	protected $bounded = array();	/**	 * Method to add a variable to an internal array that will be bound to a prepared SQL statement before query execution. Also	 * removes a variable that has been bounded from the internal bounded array when the passed in value is null.	 *	 * @param   string|integer  $key            The key that will be used in your SQL query to reference the value. Usually of	 *                                          the form ':key', but can also be an integer.	 * @param   mixed           &$value         The value that will be bound. The value is passed by reference to support output	 *                                          parameters such as those possible with stored procedures.	 * @param   integer         $dataType       Constant corresponding to a SQL datatype.	 * @param   integer         $length         The length of the variable. Usually required for OUTPUT parameters.	 * @param   array           $driverOptions  Optional driver options to be used.	 *	 * @return  JDatabaseQuery	 *	 * @since   12.1	 */	public function bind($key = null, &$value = null, $dataType = PDO::PARAM_STR, $length = 0, $driverOptions = array())	{		// Case 1: Empty Key (reset $bounded array)		if (empty($key))		{			$this->bounded = array();			return $this;		}		// Case 2: Key Provided, null value (unset key from $bounded array)		if (is_null($value))		{			if (isset($this->bounded[$key]))			{				unset($this->bounded[$key]);			}			return $this;		}		$obj = new stdClass;		$obj->value = &$value;		$obj->dataType = $dataType;		$obj->length = $length;		$obj->driverOptions = $driverOptions;		// Case 3: Simply add the Key/Value into the bounded array		$this->bounded[$key] = $obj;		return $this;	}	/**	 * Retrieves the bound parameters array when key is null and returns it by reference. If a key is provided then that item is	 * returned.	 *	 * @param   mixed  $key  The bounded variable key to retrieve.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function &getBounded($key = null)	{		if (empty($key))		{			return $this->bounded;		}		else		{			if (isset($this->bounded[$key]))			{				return $this->bounded[$key];			}		}	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function clear($clause = null)	{		switch ($clause)		{			case null:				$this->bounded = array();				break;		}		parent::clear($clause);		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0 || $offset > 0)		{			$query .= ' LIMIT ' . $offset . ', ' . $limit;		}		return $query;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit = (int) $limit;		$this->offset = (int) $offset;		return $this;	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date or datetime to add to	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @link http://www.sqlite.org/lang_datefunc.html	 */	public function dateAdd($date, $interval, $datePart)	{		// SQLite does not support microseconds as a separate unit. Convert the interval to seconds		if (strcasecmp($datePart, 'microseconds') == 0)		{			$interval = .001 * $interval;			$datePart = 'seconds';		}		if (substr($interval, 0, 1) != '-')		{			return "datetime('" . $date . "', '+" . $interval . " " . $datePart . "')";		}		else		{			return "datetime('" . $date . "', '" . $interval . " " . $datePart . "')";		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of newsfeeds. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsViewNewsfeeds extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		NewsfeedsHelper::addSubmenu('newsfeeds');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= NewsfeedsHelper::getActions($state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_NEWSFEEDS_MANAGER_NEWSFEEDS'), 'newsfeeds.png');		if (count($user->getAuthorisedCategories('com_newsfeeds', 'core.create')) > 0)		{			JToolbarHelper::addNew('newsfeed.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('newsfeed.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('newsfeeds.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('newsfeeds.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('newsfeeds.archive');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::checkin('newsfeeds.checkin');			}		if ($state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'newsfeeds.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('newsfeeds.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_newsfeeds');		}		JToolbarHelper::help('JHELP_COMPONENTS_NEWSFEEDS_FEEDS');		JHtmlSidebar::setAction('index.php?option=com_newsfeeds&view=newsfeeds');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.name' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'numarticles' => JText::_('COM_NEWSFEEDS_NUM_ARTICLES_HEADING'),			'a.cache_time' => JText::_('COM_NEWSFEEDS_CACHE_TIME_HEADING'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Override Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesControllerOverride extends JControllerForm{	/**	 * Method to edit an existing override	 *	 * @param   	string	$key		The name of the primary key of the URL variable (not used here).	 * @param   	string	$urlVar	The name of the URL variable if different from the primary key (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function edit($key = null, $urlVar = null)	{		$app     = JFactory::getApplication();		$cid     = $this->input->post->get('cid', array(), 'array');		$context = "$this->option.edit.$this->context";		// Get the constant name		$recordId = (count($cid) ? $cid[0] : $this->input->get('id'));		// Access check		if (!$this->allowEdit())		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return;		}		$app->setUserState($context.'.data', null);		$this->setRedirect('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'));	}	/**	 * Method to save an override	 *	 * @param   	string	$key		The name of the primary key of the URL variable (not used here).	 * @param   	string	$urlVar	The name of the URL variable if different from the primary key (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$model   = $this->getModel();		$data    = $this->input->post->get('jform', array(), 'array');		$context = "$this->option.edit.$this->context";		$task    = $this->getTask();		$recordId = $this->input->get('id');		$data['id'] = $recordId;		// Access check		if (!$this->allowSave($data, 'id'))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return;		}		// Validate the posted data		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return;		}		// Require helper for filter functions called by JForm		require_once JPATH_COMPONENT.'/helpers/languages.php';		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session			$app->setUserState($context.'.data', $data);			// Redirect back to the edit screen			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'), false));			return;		}		// Attempt to save the data		if (!$model->save($validData))		{			// Save the data in the session			$app->setUserState($context.'.data', $validData);			// Redirect back to the edit screen			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($recordId, 'id'), false));			return;		}		// Add message of success		$this->setMessage(JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task		switch ($task)		{			case 'apply':				// Set the record data in the session				$recordId = $model->getState($this->context.'.id');				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend($validData['key'], 'id'), false));				break;			case 'save2new':				// Clear the record id and data from the session				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.$this->getRedirectToItemAppend(null, 'id'), false));				break;			default:				// Clear the record id and data from the session				$app->setUserState($context.'.data', null);				// Redirect to the list screen				$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));				break;		}	}	/**	 * Method to cancel an edit	 *	 * @param   	string	$key	The name of the primary key of the URL variable (not used here).	 *	 * @return  void	 *	 * @since		2.5	 */	public function cancel($key = null, $test = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app     = JFactory::getApplication();		$context = "$this->option.edit.$this->context";		$app->setUserState($context.'.data',	null);		$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Module controller class. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesControllerModule extends JControllerForm{	/**	 * Override parent add method.	 *	 * @return  mixed  True if the record can be added, a JError object if not.	 *	 * @since   1.6	 */	public function add()	{		$app = JFactory::getApplication();		// Get the result of the parent method. If an error, just return it.		$result = parent::add();		if ($result instanceof Exception)		{			return $result;		}		// Look for the Extension ID.		$extensionId = $app->input->get('eid', 0, 'int');		if (empty($extensionId))		{			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_item.'&layout=edit', false));			return JError::raiseWarning(500, JText::_('COM_MODULES_ERROR_INVALID_EXTENSION'));		}		$app->setUserState('com_modules.add.module.extension_id', $extensionId);		$app->setUserState('com_modules.add.module.params', null);		// Parameters could be coming in for a new item, so let's set them.		$params = $app->input->get('params', array(), 'array');		$app->setUserState('com_modules.add.module.params', $params);	}	/**	 * Override parent cancel method to reset the add module state.	 *	 * @param   string  $key  The name of the primary key of the URL variable.	 *	 * @return  boolean  True if access level checks pass, false otherwise.	 *	 * @since   1.6	 */	public function cancel($key = null)	{		$app = JFactory::getApplication();		$result = parent::cancel();		$app->setUserState('com_modules.add.module.extension_id', null);		$app->setUserState('com_modules.add.module.params', null);		return $result;	}	/**	 * Override parent allowSave method.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowSave($data, $key = 'id')	{		// use custom position if selected		if (isset($data['custom_position']))		{			if (empty($data['position']))			{				$data['position'] = $data['custom_position'];			}			unset($data['custom_position']);		}		return parent::allowSave($data, $key);	}	/**	 * Method to run batch operations.	 *	 * @param   string  $model  The model	 *	 * @return  boolean  True on success.	 *	 * @since   1.7	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model	= $this->getModel('Module', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_modules&view=modules'.$this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		$app = JFactory::getApplication();		$task = $this->getTask();		switch ($task)		{			case 'save2new':				$app->setUserState('com_modules.add.module.extension_id', $model->getState('module.extension_id'));				break;			default:				$app->setUserState('com_modules.add.module.extension_id', null);				break;		}		$app->setUserState('com_modules.add.module.params', null);	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include __DIR__ . '/component.php';
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContactHelper', JPATH_ADMINISTRATOR . '/components/com_contact/helpers/contact.php');/** * @package     Joomla.Administrator * @subpackage  com_contact */abstract class JHtmlContact{	/**	 * Get the associated language flags	 *	 * @param   int  $contactid  The item id to search associations	 *	 * @return  string  The language HTML	 */	public static function association($contactid)	{		// Defaults		$html = '';		// Get the associations		if ($associations = JLanguageAssociations::getAssociations('com_contact', '#__contact_details', 'com_contact.item', $contactid))		{			foreach ($associations as $tag => $associated)			{				$associations[$tag] = (int) $associated->id;			}			// Get the associated contact items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('c.*')				->from('#__contact_details as c')				->select('cat.title as category_title')				->join('LEFT', '#__categories as cat ON cat.id=c.catid')				->where('c.id IN (' . implode(',', array_values($associations)) . ')')				->join('LEFT', '#__languages as l ON c.language=l.lang_code')				->select('l.image')				->select('l.title as language_title');			$db->setQuery($query);			try			{				$items = $db->loadObjectList('id');			}			catch (runtimeException $e)			{				throw new Exception($e->getMessage(), 500);				return false;			}			$flags = array();			// Construct html			foreach ($associations as $tag => $associated)			{				if ($associated != $contactid)				{					$flags[] = JText::sprintf(						'COM_CONTACT_TIP_ASSOCIATED_LANGUAGE',						JHtml::_('image', 'mod_languages/' . $items[$associated]->image . '.gif',							$items[$associated]->language_title,							array('title' => $items[$associated]->language_title),							true						),						$items[$associated]->name, $items[$associated]->category_title					);				}			}			$html = JHtml::_('tooltip', implode('<br />', $flags), JText::_('COM_CONTACT_TIP_ASSOCIATION'), 'admin/icon-16-links.png');		}		return $html;	}	/**	 * @param   int $value	The featured value	 * @param   int $i	 * @param   bool $canChange Whether the value can be changed or not	 *	 * @return  string	The anchor tag to toggle featured/unfeatured contacts.	 * @since   1.6	 */	public static function featured($value = 0, $i, $canChange = true)	{		// Array of image, task, title, action		$states	= array(			0	=> array('disabled.png', 'contacts.featured', 'COM_CONTACT_UNFEATURED', 'COM_CONTACT_TOGGLE_TO_FEATURE'),			1	=> array('featured.png', 'contacts.unfeatured', 'JFEATURED', 'COM_CONTACT_TOGGLE_TO_UNFEATURE'),		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[1]);		$html	= JHtml::_('image', 'admin/'.$state[0], JText::_($state[2]), null, true);		if ($canChange)		{			$html	= '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" title="'.JText::_($state[3]).'">'					. $html .'</a>';		}		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$canOrder	= $user->authorise('core.edit.state',	'com_tags');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_tags&task=tags.saveOrderAjax';	JHtml::_('sortablelist.sortable', 'categoryList', 'adminForm', strtolower($listDirn), $saveOrderingUrl, false, true);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function() {		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		} else {			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_tags&view=tags');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)): ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TAGS_ITEMS_SEARCH_FILTER'); ?>" />			</div>			<div class="btn-group hidden-phone">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>			<div class="clearfix"></div>		</div>		<table class="table table-striped" id="categoryList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>				<th width="10%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort',  'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap hidden-phone">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>				</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php			$originalOrders = array();			foreach ($this->items as $i => $item) :				$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);				$canCreate  = $user->authorise('core.create',     'com_tags');				$canEdit    = $user->authorise('core.edit',       'com_tags');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_tags') && $canCheckin;				// Get the parents of item for sorting				if ($item->level > 1)				{					$parentsStr = "";					$_currentParentId = $item->parent_id;					$parentsStr = " ".$_currentParentId;					for ($j = 0; $j < $item->level; $j++)					{						foreach ($this->ordering as $k => $v)						{							$v = implode("-", $v);							$v = "-" . $v . "-";							if (strpos($v, "-" . $_currentParentId . "-") !== false)							{								$parentsStr .= " " . $k;								$_currentParentId = $k;								break;							}						}					}				}				else				{					$parentsStr = "";				}				?>					<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->parent_id;?>" item-id="<?php echo $item->id?>" parents="<?php echo $parentsStr?>" level="<?php echo $item->level?>">						<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel    = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>						<?php else : ?>							<span class="sortable-handler inactive">								<i class="icon-menu"></i>							</span>						<?php endif; ?>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $orderkey + 1;?>" />						</td>						<td class="center hidden-phone">							<?php echo JHtml::_('grid.id', $i, $item->id); ?>						</td>						<td class="center">							<?php echo JHtml::_('jgrid.published', $item->published, $i, 'tags.', $canChange);?>						</td>						<td>							<?php if ($item->level > 0): ?>							<?php echo str_repeat('<span class="gi">&mdash;</span>', $item->level - 1) ?>							<?php endif; ?>							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'tags.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit || $canEditOwn) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_tags&task=tag.edit&id='.$item->id);?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>								<?php echo $this->escape($item->title); ?>							<?php endif; ?>							<span class="small" title="<?php echo $this->escape($item->path); ?>">								<?php if (empty($item->note)) : ?>									<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>								<?php else : ?>									<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>								<?php endif; ?>							</span>						</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_title); ?>					</td>					<td class="small nowrap hidden-phone">					<?php if ($item->language == '*') : ?>						<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>						</td>						<td class="center hidden-phone">							<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt); ?>">								<?php echo (int) $item->id; ?></span>						</td>					</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API User class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1*/class JOpenstreetmapUser extends JOpenstreetmapObject{	/**	 * Method to get user details	 *  	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function getDetails()	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/details';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters);		return $response->body;	}	/**	 * Method to get preferences	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function getPreferences()	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/preferences';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters);		return $response->body;	}	/**	 * Method to replace user preferences	 * 	 * @param   array  $preferences  array of new preferences	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function replacePreferences($preferences)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/preferences';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of preferences		$preference_list = '';		if (!empty($preferences))		{			foreach ($preferences as $key => $value)			{				$preference_list .= '<preference k="' . $key . '" v="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>			<osm version="0.6" generator="JOpenstreetmap">				<preferences>'				. $preference_list .				'</preferences>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to change user preferences	 * 	 * @param   string  $key         key of the preference	 * @param   string  $preference  new value for preference	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function changePreference($key, $preference)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/preferences/' . $key;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $preference);		return $response->body;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Indexer class supporting PostgreSQL for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.0 */class FinderIndexerDriverPostgresql extends FinderIndexer{	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   3.0	 * @throws  Exception on database error.	 */	public function index($item, $format = 'html')	{		// Mark beforeIndexing in the profiler.		static::$profiler ? static::$profiler->mark('beforeIndexing') : null;		$db = JFactory::getDbo();		$nd = $db->getNullDate();		// Check if the item is in the database.		$query = $db->getQuery(true)			->select($db->quoteName('link_id') . ', ' . $db->quoteName('md5sum'))			->from($db->quoteName('#__finder_links'))			->where($db->quoteName('url') . ' = ' . $db->quote($item->url));		// Load the item  from the database.		$db->setQuery($query);		$link = $db->loadObject();		// Get the indexer state.		$state = static::getState();		// Get the signatures of the item.		$curSig = static::getSignature($item);		$oldSig = isset($link->md5sum) ? $link->md5sum : null;		// Get the other item information.		$linkId = empty($link->link_id) ? null : $link->link_id;		$isNew = empty($link->link_id) ? true : false;		// Check the signatures. If they match, the item is up to date.		if (!$isNew && $curSig == $oldSig)		{			return $linkId;		}		/*		 * If the link already exists, flush all the term maps for the item.		 * Maps are stored in 16 tables so we need to iterate through and flush		 * each table one at a time.		 */		if (!$isNew)		{			for ($i = 0; $i <= 15; $i++)			{				// Flush the maps for the link.				$query->clear()					->delete($db->quoteName('#__finder_links_terms' . dechex($i)))					->where($db->quoteName('link_id') . ' = ' . (int) $linkId);				$db->setQuery($query);				$db->execute();			}			// Remove the taxonomy maps.			FinderIndexerTaxonomy::removeMaps($linkId);		}		// Mark afterUnmapping in the profiler.		static::$profiler ? static::$profiler->mark('afterUnmapping') : null;		// Perform cleanup on the item data.		$item->publish_start_date = (int) $item->publish_start_date != 0 ? $item->publish_start_date : $nd;		$item->publish_end_date = (int) $item->publish_end_date != 0 ? $item->publish_end_date : $nd;		$item->start_date = (int) $item->start_date != 0 ? $item->start_date : $nd;		$item->end_date = (int) $item->end_date != 0 ? $item->end_date : $nd;		// Prepare the item description.		$item->description = FinderIndexerHelper::parse($item->summary);		/*		 * Now, we need to enter the item into the links table. If the item		 * already exists in the database, we need to use an UPDATE query.		 * Otherwise, we need to use an INSERT to get the link id back.		 */		if ($isNew)		{			$columnsArray = array(				$db->quoteName('url'), $db->quoteName('route'), $db->quoteName('title'), $db->quoteName('description'),				$db->quoteName('indexdate'), $db->quoteName('published'), $db->quoteName('state'), $db->quoteName('access'),				$db->quoteName('language'), $db->quoteName('type_id'), $db->quoteName('object'), $db->quoteName('publish_start_date'),				$db->quoteName('publish_end_date'), $db->quoteName('start_date'), $db->quoteName('end_date'), $db->quoteName('list_price'),				$db->quoteName('sale_price')			);			// Insert the link.			$query->clear()				->insert($db->quoteName('#__finder_links'))				->columns($columnsArray)				->values(				$db->quote($item->url) . ', '				. $db->quote($item->route) . ', '				. $db->quote($item->title) . ', '				. $db->quote($item->description) . ', '				. $query->currentTimestamp() . ', '				. '1, '				. (int) $item->state . ', '				. (int) $item->access . ', '				. $db->quote($item->language) . ', '				. (int) $item->type_id . ', '				. $db->quote(serialize($item)) . ', '				. $db->quote($item->publish_start_date) . ', '				. $db->quote($item->publish_end_date) . ', '				. $db->quote($item->start_date) . ', '				. $db->quote($item->end_date) . ', '				. (double) ($item->list_price ? $item->list_price : 0) . ', '				. (double) ($item->sale_price ? $item->sale_price : 0)			);			$db->setQuery($query);			$db->execute();			// Get the link id.			$linkId = (int) $db->insertid();		}		else		{			// Update the link.			$query->clear()				->update($db->quoteName('#__finder_links'))				->set($db->quoteName('route') . ' = ' . $db->quote($item->route))				->set($db->quoteName('title') . ' = ' . $db->quote($item->title))				->set($db->quoteName('description') . ' = ' . $db->quote($item->description))				->set($db->quoteName('indexdate') . ' = ' . $query->currentTimestamp())				->set($db->quoteName('state') . ' = ' . (int) $item->state)				->set($db->quoteName('access') . ' = ' . (int) $item->access)				->set($db->quoteName('language') . ' = ' . $db->quote($item->language))				->set($db->quoteName('type_id') . ' = ' . (int) $item->type_id)				->set($db->quoteName('object') . ' = ' . $db->quote(serialize($item)))				->set($db->quoteName('publish_start_date') . ' = ' . $db->quote($item->publish_start_date))				->set($db->quoteName('publish_end_date') . ' = ' . $db->quote($item->publish_end_date))				->set($db->quoteName('start_date') . ' = ' . $db->quote($item->start_date))				->set($db->quoteName('end_date') . ' = ' . $db->quote($item->end_date))				->set($db->quoteName('list_price') . ' = ' . (double) ($item->list_price ? $item->list_price : 0))				->set($db->quoteName('sale_price') . ' = ' . (double) ($item->sale_price ? $item->sale_price : 0))				->where('link_id = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Set up the variables we will need during processing.		$tokens = array();		$count = 0;		// Mark afterLinking in the profiler.		static::$profiler ? static::$profiler->mark('afterLinking') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		/*		 * Process the item's content. The items can customize their		 * processing instructions to define extra properties to process		 * or rearrange how properties are weighted.		 */		foreach ($item->getInstructions() as $group => $properties)		{			// Iterate through the properties of the group.			foreach ($properties as $property)			{				// Check if the property exists in the item.				if (empty($item->$property))				{					continue;				}				// Tokenize the property.				if (is_array($item->$property))				{					// Tokenize an array of content and add it to the database.					foreach ($item->$property as $ip)					{						// If the group is path, we need to a few extra processing						// steps to strip the extension and convert slashes and dashes						// to spaces.						if ($group === static::PATH_CONTEXT)						{							$ip = JFile::stripExt($ip);							$ip = str_replace('/', ' ', $ip);							$ip = str_replace('-', ' ', $ip);						}						// Tokenize a string of content and add it to the database.						$count += $this->tokenizeToDB($ip, $group, $item->language, $format);						// Check if we're approaching the memory limit of the token table.						if ($count > static::$state->options->get('memory_table_limit', 30000))						{							$this->toggleTables(false);						}					}				}				else				{					// If the group is path, we need to a few extra processing					// steps to strip the extension and convert slashes and dashes					// to spaces.					if ($group === static::PATH_CONTEXT)					{						$item->$property = JFile::stripExt($item->$property);						$item->$property = str_replace('/', ' ', $item->$property);						$item->$property = str_replace('-', ' ', $item->$property);					}					// Tokenize a string of content and add it to the database.					$count += $this->tokenizeToDB($item->$property, $group, $item->language, $format);					// Check if we're approaching the memory limit of the token table.					if ($count > static::$state->options->get('memory_table_limit', 30000))					{						$this->toggleTables(false);					}				}			}		}		/*		 * Process the item's taxonomy. The items can customize their		 * taxonomy mappings to define extra properties to map.		 */		foreach ($item->getTaxonomy() as $branch => $nodes)		{			// Iterate through the nodes and map them to the branch.			foreach ($nodes as $node)			{				// Add the node to the tree.				$nodeId = FinderIndexerTaxonomy::addNode($branch, $node->title, $node->state, $node->access);				// Add the link => node map.				FinderIndexerTaxonomy::addMap($linkId, $nodeId);				// Tokenize the node title and add them to the database.				$count += $this->tokenizeToDB($node->title, static::META_CONTEXT, $item->language, $format);			}		}		// Mark afterProcessing in the profiler.		static::$profiler ? static::$profiler->mark('afterProcessing') : null;		/*		 * At this point, all of the item's content has been parsed, tokenized		 * and inserted into the #__finder_tokens table. Now, we need to		 * aggregate all the data into that table into a more usable form. The		 * aggregated data will be inserted into #__finder_tokens_aggregate		 * table.		 */		$query	= 'INSERT INTO ' . $db->quoteName('#__finder_tokens_aggregate') .				' (' . $db->quoteName('term_id') .				', ' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('term_weight') .				', ' . $db->quoteName('context') .				', ' . $db->quoteName('context_weight') .				', ' . $db->quoteName('language') . ')' .				' SELECT' .				' t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context,' .				' ROUND( t1.weight * COUNT( t2.term ) * %F, 8 ) AS context_weight, t1.language' .				' FROM (' .				'   SELECT DISTINCT t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				'   FROM ' . $db->quoteName('#__finder_tokens') . ' AS t1' .				'   WHERE t1.context = %d' .				' ) AS t1' .				' JOIN ' . $db->quoteName('#__finder_tokens') . ' AS t2 ON t2.term = t1.term' .				' LEFT JOIN ' . $db->quoteName('#__finder_terms') . ' AS t ON t.term = t1.term' .				' WHERE t2.context = %d' .				' GROUP BY t1.term, t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				' ORDER BY t1.term DESC';		// Iterate through the contexts and aggregate the tokens per context.		foreach ($state->weights as $context => $multiplier)		{			// Run the query to aggregate the tokens for this context..			$db->setQuery(sprintf($query, $multiplier, $context, $context));			$db->execute();		}		// Mark afterAggregating in the profiler.		static::$profiler ? static::$profiler->mark('afterAggregating') : null;		/*		 * When we pulled down all of the aggregate data, we did a LEFT JOIN		 * over the terms table to try to find all the term ids that		 * already exist for our tokens. If any of the rows in the aggregate		 * table have a term of 0, then no term record exists for that		 * term so we need to add it to the terms table.		 */		/* Emulation of IGNORE INTO behaviour */		$db->setQuery(			' SELECT ta.term' .			' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .			' WHERE ta.term_id = 0'		);		if ($db->loadRow() == null)		{			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_terms') .				' (' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('weight') .				', ' . $db->quoteName('soundex') .				', ' . $db->quoteName('language') . ')' .				' SELECT ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term), ta.language' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .				' WHERE ta.term_id = 0' .				' GROUP BY ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term), ta.language'			);			$db->execute();		}		/*		 * Now, we just inserted a bunch of new records into the terms table		 * so we need to go back and update the aggregate table with all the		 * new term ids.		 */		$query = $db->getQuery(true)			->update($db->quoteName('#__finder_tokens_aggregate') . ' AS ta')			->join('INNER', $db->quoteName('#__finder_terms') . ' AS t ON t.term = ta.term')			->set('ta.term_id = t.term_id')			->where('ta.term_id = 0');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * After we've made sure that all of the terms are in the terms table		 * and the aggregate table has the correct term ids, we need to update		 * the links counter for each term by one.		 */		$query->clear()			->update($db->quoteName('#__finder_terms') . ' AS t')			->join('INNER', $db->quoteName('#__finder_tokens_aggregate') . ' AS ta ON ta.term_id = t.term_id')			->set('t.' . $db->quoteName('links') . ' = t.links + 1');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * Before we can insert all of the mapping rows, we have to figure out		 * which mapping table the rows need to be inserted into. The mapping		 * table for each term is based on the first character of the md5 of		 * the first character of the term. In php, it would be expressed as		 * substr(md5(substr($token, 0, 1)), 0, 1)		 */		$query->clear()			->update($db->quoteName('#__finder_tokens_aggregate'))			->set($db->quoteName('map_suffix') . ' = SUBSTR(MD5(SUBSTR(' . $db->quoteName('term') . ', 1, 1)), 1, 1)');		$db->setQuery($query);		$db->execute();		/*		 * At this point, the aggregate table contains a record for each		 * term in each context. So, we're going to pull down all of that		 * data while grouping the records by term and add all of the		 * sub-totals together to arrive at the final total for each token for		 * this link. Then, we insert all of that data into the appropriate		 * mapping table.		 */		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			/*			 * We have to run this query 16 times, one for each link => term			 * mapping table.			 */			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_links_terms' . $suffix) .				' (' . $db->quoteName('link_id') .				', ' . $db->quoteName('term_id') .				', ' . $db->quoteName('weight') . ')' .				' SELECT ' . (int) $linkId . ', ' . $db->quoteName('term_id') . ',' .				' ROUND(SUM(' . $db->quoteName('context_weight') . '), 8)' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') .				' WHERE ' . $db->quoteName('map_suffix') . ' = ' . $db->quote($suffix) .				' GROUP BY ' . $db->quoteName('term') .				' ORDER BY ' . $db->quoteName('term') . ' DESC'			);			$db->execute();		}		// Mark afterMapping in the profiler.		static::$profiler ? static::$profiler->mark('afterMapping') : null;		// Update the signature.		$query->clear()			->update($db->quoteName('#__finder_links'))			->set($db->quoteName('md5sum') . ' = ' . $db->quote($curSig))			->where($db->quoteName('link_id') . ' = ' . $db->quote($linkId));		$db->setQuery($query);		$db->execute();		// Mark afterSigning in the profiler.		static::$profiler ? static::$profiler->mark('afterSigning') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		// Toggle the token tables back to memory tables.		$this->toggleTables(true);		// Mark afterTruncating in the profiler.		static::$profiler ? static::$profiler->mark('afterTruncating') : null;		return $linkId;	}	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function remove($linkId)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get the indexer state.		$state = static::getState();		// Update the link counts and remove the mapping records.		for ($i = 0; $i <= 15; $i++)		{			// Update the link counts for the terms.			$query->update($db->quoteName('#__finder_terms') . ' AS t')				->join('INNER', $db->quoteName('#__finder_links_terms' . dechex($i)) . ' AS m ON m.term_id = t.term_id')				->set('t.links = t.links - 1')				->where('m.link_id = ' . $db->quote((int) $linkId));			$db->setQuery($query);			$db->execute();			// Remove all records from the mapping tables.			$query->clear()				->delete($db->quoteName('#__finder_links_terms' . dechex($i)))				->where($db->quoteName('link_id') . ' = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Delete all orphaned terms.		$query->clear()			->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Delete the link from the index.		$query->clear()			->delete($db->quoteName('#__finder_links'))			->where($db->quoteName('link_id') . ' = ' . $db->quote((int) $linkId));		$db->setQuery($query);		$db->execute();		// Remove the taxonomy maps.		FinderIndexerTaxonomy::removeMaps($linkId);		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function optimize()	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Delete all orphaned terms.		$query->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Optimize the links table.		$db->setQuery('VACUUM ' . $db->quoteName('#__finder_links'));		$db->execute();		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links'));		$db->execute();		for ($i = 0; $i <= 15; $i++)		{			// Optimize the terms mapping table.			$db->setQuery('VACUUM ' . $db->quoteName('#__finder_links_terms' . dechex($i)));			$db->execute();			$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links_terms' . dechex($i)));			$db->execute();		}		// Optimize the terms mapping table.		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_links_terms'));		$db->execute();		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		// Optimize the taxonomy mapping table.		$db->setQuery('REINDEX TABLE ' . $db->quoteName('#__finder_taxonomy_map'));		$db->execute();		return true;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function addTokensToDB($tokens, $context = '')	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Force tokens to an array.		$tokens = is_array($tokens) ? $tokens : array($tokens);		// Count the number of token values.		$values = 0;		// Insert the tokens into the database.		$query->insert($db->quoteName('#__finder_tokens'))			->columns(				array(					$db->quoteName('term'),					$db->quoteName('stem'),					$db->quoteName('common'),					$db->quoteName('phrase'),					$db->quoteName('weight'),					$db->quoteName('context'),					$db->quoteName('language')				)			);		// Iterate through the tokens to create SQL value sets.		foreach ($tokens as $token)		{			$query->values(				$db->quote($token->term) . ', '					. $db->quote($token->stem) . ', '					. (int) $token->common . ', '					. (int) $token->phrase . ', '					. (float) $token->weight . ', '					. (int) $context . ', '					. $db->quote($token->language)			);			$values++;		}		$db->setQuery($query);		$db->execute();		return $values;	}	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function toggleTables($memory)	{		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Single check box field. * This is a boolean field with null for false and the specified option for true * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.checkbox.html#input.checkbox * @see         JFormFieldCheckboxes * @since       11.1 */class JFormFieldCheckbox extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Checkbox';	/**	 * Method to get the field input markup.	 * The checked element sets the field to selected.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$value = $this->element['value'] ? (string) $this->element['value'] : '1';		$required = $this->required ? ' required="required" aria-required="true"' : '';		if (empty($this->value))		{			$checked = (isset($this->element['checked'] )) ? ' checked="checked"' : '';		}		else		{			$checked = ' checked="checked"';		}		// Initialize JavaScript field attributes.		$onclick = $this->element['onclick'] ? ' onclick="' . (string) $this->element['onclick'] . '"' : '';		return '<input type="checkbox" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($value, ENT_COMPAT, 'UTF-8') . '"' . $class . $checked . $disabled . $onclick . $required . ' />';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/extension.php';/** * Installer Manage Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerModelManage extends InstallerModel{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array('name', 'client_id', 'status', 'type', 'folder', 'extension_id',);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		$status = $this->getUserStateFromRequest($this->context . '.filter.status', 'filter_status', '');		$this->setState('filter.status', $status);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type', '');		$this->setState('filter.type', $categoryId);		$group = $this->getUserStateFromRequest($this->context . '.filter.group', 'filter_group', '');		$this->setState('filter.group', $group);		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		parent::populateState('name', 'asc');	}	/**	 * Enable/Disable an extension.	 *	 * @param   array  &$eid   Extension ids to un/publish	 * @param   int    $value  Publish value	 *	 * @return  boolean  True on success	 *	 * @since   1.5	 */	public function publish(&$eid = array(), $value = 1)	{		$user = JFactory::getUser();		if ($user->authorise('core.edit.state', 'com_installer'))		{			$result = true;			/*			 * Ensure eid is an array of extension ids			 * TODO: If it isn't an array do we want to set an error and fail?			 */			if (!is_array($eid))			{				$eid = array($eid);			}			// Get a table object for the extension type			$table = JTable::getInstance('Extension');			JTable::addIncludePath(JPATH_ADMINISTRATOR . '/components/com_templates/tables');			// Enable the extension in the table and store it in the database			foreach ($eid as $i => $id)			{				$table->load($id);				if ($table->type == 'template')				{					$style = JTable::getInstance('Style', 'TemplatesTable');					if ($style->load(array('template' => $table->element, 'client_id' => $table->client_id, 'home' => 1)))					{						JError::raiseNotice(403, JText::_('COM_INSTALLER_ERROR_DISABLE_DEFAULT_TEMPLATE_NOT_PERMITTED'));						unset($eid[$i]);						continue;					}				}				if ($table->protected == 1)				{					$result = false;					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}				else				{					$table->enabled = $value;				}				if (!$table->store())				{					$this->setError($table->getError());					$result = false;				}			}		}		else		{			$result = false;			JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));		}		return $result;	}	/**	 * Refreshes the cached manifest information for an extension.	 *	 * @param   int  $eid  extension identifier (key in #__extensions)	 *	 * @return  boolean  result of refresh	 *	 * @since   1.6	 */	public function refresh($eid)	{		if (!is_array($eid))		{			$eid = array($eid => 0);		}		// Get an installer object for the extension type		$installer = JInstaller::getInstance();		$result = 0;		// Uninstall the chosen extensions		foreach ($eid as $id)		{			$result |= $installer->refreshManifestCache($id);		}		return $result;	}	/**	 * Remove (uninstall) an extension	 *	 * @param   array  $eid  An array of identifiers	 *	 * @return  boolean  True on success	 *	 * @since   1.5	 */	public function remove($eid = array())	{		$user = JFactory::getUser();		if ($user->authorise('core.delete', 'com_installer'))		{			$failed = array();			/*			 * Ensure eid is an array of extension ids in the form id => client_id			 * TODO: If it isn't an array do we want to set an error and fail?			 */			if (!is_array($eid))			{				$eid = array($eid => 0);			}			// Get an installer object for the extension type			$installer = JInstaller::getInstance();			$row = JTable::getInstance('extension');			// Uninstall the chosen extensions			foreach ($eid as $id)			{				$id = trim($id);				$row->load($id);				if ($row->type && $row->type != 'language')				{					$result = $installer->uninstall($row->type, $id);					// Build an array of extensions that failed to uninstall					if ($result === false)					{						$failed[] = $id;					}				}				else				{					$failed[] = $id;				}			}			$langstring = 'COM_INSTALLER_TYPE_TYPE_' . strtoupper($row->type);			$rowtype = JText::_($langstring);			if (strpos($rowtype, $langstring) !== false)			{				$rowtype = $row->type;			}			if (count($failed))			{				if ($row->type == 'language')				{					// One should always uninstall a language package, not a single language					$msg = JText::_('COM_INSTALLER_UNINSTALL_LANGUAGE');					$result = false;				}				else				{					// There was an error in uninstalling the package					$msg = JText::sprintf('COM_INSTALLER_UNINSTALL_ERROR', $rowtype);					$result = false;				}			}			else			{				// Package uninstalled sucessfully				$msg = JText::sprintf('COM_INSTALLER_UNINSTALL_SUCCESS', $rowtype);				$result = true;			}			$app = JFactory::getApplication();			$app->enqueueMessage($msg);			$this->setState('action', 'remove');			$this->setState('name', $installer->get('name'));			$app->setUserState('com_installer.message', $installer->message);			$app->setUserState('com_installer.extension_message', $installer->get('extension_message'));			return $result;		}		else		{			$result = false;			JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));		}	}	/**	 * Method to get the database query	 *	 * @return  JDatabaseQuery  The database query	 *	 * @since   1.6	 */	protected function getListQuery()	{		$status = $this->getState('filter.status');		$type = $this->getState('filter.type');		$client = $this->getState('filter.client_id');		$group = $this->getState('filter.group');		$query = JFactory::getDbo()->getQuery(true)			->select('*')			->select('2*protected+(1-protected)*enabled as status')			->from('#__extensions')			->where('state=0');		if ($status != '')		{			if ($status == '2')			{				$query->where('protected = 1');			}			else			{				$query->where('protected = 0')					->where('enabled=' . (int) $status);			}		}		if ($type)		{			$query->where('type=' . $this->_db->quote($type));		}		if ($client != '')		{			$query->where('client_id=' . (int) $client);		}		if ($group != '' && in_array($type, array('plugin', 'library', '')))		{			$query->where('folder=' . $this->_db->quote($group == '*' ? '' : $group));		}		// Filter by search in id		$search = $this->getState('filter.search');		if (!empty($search) && stripos($search, 'id:') === 0)		{			$query->where('extension_id = ' . (int) substr($search, 3));		}		return $query;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for all HTML drawing classes. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlAccess{	/**	 * A cached array of the asset groups	 *	 * @var    array	 * @since  11.1	 */	protected static $asset_groups = null;	/**	 * Displays a list of the available access view levels	 *	 * @param   string  $name      The form field name.	 * @param   string  $selected  The name of the selected section.	 * @param   string  $attribs   Additional attributes to add to the select field.	 * @param   mixed   $params    True to add "All Sections" option or and array of options	 * @param   string  $id        The form field id	 *	 * @return  string  The required HTML for the SELECT tag.	 *	 * @since  11.1	 *	 * @see    JFormFieldAccessLevel	 */	public static function level($name, $selected, $attribs = '', $params = true, $id = false)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text')			->from('#__viewlevels AS a')			->group('a.id, a.title, a.ordering')			->order('a.ordering ASC')			->order($db->quoteName('title') . ' ASC');		// Get the options.		$db->setQuery($query);		$options = $db->loadObjectList();		// If params is an array, push these options to the array		if (is_array($params))		{			$options = array_merge($params, $options);		}		// If all levels is allowed, push it into the array.		elseif ($params)		{			array_unshift($options, JHtml::_('select.option', '', JText::_('JOPTION_ACCESS_SHOW_ALL_LEVELS')));		}		return JHtml::_(			'select.genericlist',			$options,			$name,			array(				'list.attr' => $attribs,				'list.select' => $selected,				'id' => $id			)		);	}	/**	 * Displays a list of the available user groups.	 *	 * @param   string   $name      The form field name.	 * @param   string   $selected  The name of the selected section.	 * @param   string   $attribs   Additional attributes to add to the select field.	 * @param   boolean  $allowAll  True to add "All Groups" option.	 *	 * @return  string   The required HTML for the SELECT tag.	 *	 * @see     JFormFieldUsergroup	 *	 * @since   11.1	 */	public static function usergroup($name, $selected, $attribs = '', $allowAll = true)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from($db->quoteName('#__usergroups') . ' AS a')			->join('LEFT', $db->quoteName('#__usergroups') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		for ($i = 0, $n = count($options); $i < $n; $i++)		{			$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;		}		// If all usergroups is allowed, push it into the array.		if ($allowAll)		{			array_unshift($options, JHtml::_('select.option', '', JText::_('JOPTION_ACCESS_SHOW_ALL_GROUPS')));		}		return JHtml::_('select.genericlist', $options, $name, array('list.attr' => $attribs, 'list.select' => $selected));	}	/**	 * Returns a UL list of user groups with check boxes	 *	 * @param   string   $name             The name of the checkbox controls array	 * @param   array    $selected         An array of the checked boxes	 * @param   boolean  $checkSuperAdmin  If false only super admins can add to super admin groups	 *	 * @return  string	 *	 * @since   11.1	 */	public static function usergroups($name, $selected, $checkSuperAdmin = false)	{		static $count;		$count++;		$isSuperAdmin = JFactory::getUser()->authorise('core.admin');		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.*, COUNT(DISTINCT b.id) AS level')			->from($db->quoteName('#__usergroups') . ' AS a')			->join('LEFT', $db->quoteName('#__usergroups') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt, a.parent_id')			->order('a.lft ASC');		$db->setQuery($query);		$groups = $db->loadObjectList();		$html = array();		for ($i = 0, $n = count($groups); $i < $n; $i++)		{			$item = &$groups[$i];			// If checkSuperAdmin is true, only add item if the user is superadmin or the group is not super admin			if ((!$checkSuperAdmin) || $isSuperAdmin || (!JAccess::checkGroup($item->id, 'core.admin')))			{				// Setup  the variable attributes.				$eid = $count . 'group_' . $item->id;				// Don't call in_array unless something is selected				$checked = '';				if ($selected)				{					$checked = in_array($item->id, $selected) ? ' checked="checked"' : '';				}				$rel = ($item->parent_id > 0) ? ' rel="' . $count . 'group_' . $item->parent_id . '"' : '';				// Build the HTML for the item.				$html[] = '	<div class="control-group">';				$html[] = '		<div class="controls">';				$html[] = '			<label class="checkbox" for="' . $eid . '">';				$html[] = '			<input type="checkbox" name="' . $name . '[]" value="' . $item->id . '" id="' . $eid . '"';				$html[] = '					' . $checked . $rel . ' />';				$html[] = '			' . str_repeat('<span class="gi">|&mdash;</span>', $item->level) . $item->title;				$html[] = '			</label>';				$html[] = '		</div>';				$html[] = '	</div>';			}		}		return implode("\n", $html);	}	/**	 * Returns a UL list of actions with check boxes	 *	 * @param   string  $name       The name of the checkbox controls array	 * @param   array   $selected   An array of the checked boxes	 * @param   string  $component  The component the permissions apply to	 * @param   string  $section    The section (within a component) the permissions apply to	 *	 * @return  string	 *	 * @see     JAccess	 * @since   11.1	 */	public static function actions($name, $selected, $component, $section = 'global')	{		static $count;		$count++;		$actions = JAccess::getActionsFromFile(			JPATH_ADMINISTRATOR . '/components/' . $component . '/access.xml',			"/access/section[@name='" . $section . "']/"		);		$html = array();		$html[] = '<ul class="checklist access-actions">';		for ($i = 0, $n = count($actions); $i < $n; $i++)		{			$item = &$actions[$i];			// Setup  the variable attributes.			$eid = $count . 'action_' . $item->id;			$checked = in_array($item->id, $selected) ? ' checked="checked"' : '';			// Build the HTML for the item.			$html[] = '	<li>';			$html[] = '		<input type="checkbox" name="' . $name . '[]" value="' . $item->id . '" id="' . $eid . '"';			$html[] = '			' . $checked . ' />';			$html[] = '		<label for="' . $eid . '">';			$html[] = '			' . JText::_($item->title);			$html[] = '		</label>';			$html[] = '	</li>';		}		$html[] = '</ul>';		return implode("\n", $html);	}	/**	 * Gets a list of the asset groups as an array of JHtml compatible options.	 *	 * @return  mixed  An array or false if an error occurs	 *	 * @since   11.1	 */	public static function assetgroups()	{		if (empty(self::$asset_groups))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id AS value, a.title AS text')				->from($db->quoteName('#__viewlevels') . ' AS a')				->group('a.id, a.title, a.ordering')				->order('a.ordering ASC');			$db->setQuery($query);			self::$asset_groups = $db->loadObjectList();		}		return self::$asset_groups;	}	/**	 * Displays a Select list of the available asset groups	 *	 * @param   string  $name      The name of the select element	 * @param   mixed   $selected  The selected asset group id	 * @param   string  $attribs   Optional attributes for the select field	 * @param   array   $config    An array of options for the control	 *	 * @return  mixed  An HTML string or null if an error occurs	 *	 * @since   11.1	 */	public static function assetgrouplist($name, $selected, $attribs = null, $config = array())	{		static $count;		$options = self::assetgroups();		if (isset($config['title']))		{			array_unshift($options, JHtml::_('select.option', '', $config['title']));		}		return JHtml::_(			'select.genericlist',			$options,			$name,			array(				'id' => isset($config['id']) ? $config['id'] : 'assetgroups_' . (++$count),				'list.attr' => (is_null($attribs) ? 'class="inputbox" size="3"' : $attribs),				'list.select' => (int) $selected			)		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">		window.addEvent('domready', function()		{			document.id('jform_searchstring').addEvent('focus', function()			{				if (!Joomla.overrider.states.refreshed)				{					<?php if ($this->state->get('cache_expired')) : ?>					Joomla.overrider.refreshCache();					Joomla.overrider.states.refreshed = true;					<?php endif; ?>				}				this.removeClass('invalid');			});		});	Joomla.submitbutton = function(task)	{		if (task == 'override.cancel' || document.formvalidator.isValid(document.id('override-form')))		{			Joomla.submitform(task, document.getElementById('override-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_languages&id='.$this->item->key); ?>" method="post" name="adminForm" id="override-form" class="form-validate form-horizontal">	<div class="row-fluid">		<div class="span6">			<fieldset>				<legend><?php echo empty($this->item->key) ? JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_NEW_OVERRIDE_LEGEND') : JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_EDIT_OVERRIDE_LEGEND'); ?></legend>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('key'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('key'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('override'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('override'); ?>					</div>				</div>				<?php if ($this->state->get('filter.client') == 'administrator') : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('both'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('both'); ?>					</div>				</div>				<?php endif; ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('language'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('client'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('client'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('file'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('file'); ?>					</div>				</div>			</fieldset>		</div>		<div class="span6">			<fieldset>				<legend><?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SEARCH_LEGEND'); ?></legend>				<div class="alert alert-info"><p><?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SEARCH_TIP'); ?></p></div>				<div class="control-group">					<?php echo $this->form->getInput('searchstring'); ?>					<button type="submit" class="btn btn-primary" onclick="Joomla.overrider.searchStrings();return false;">						<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_SEARCH_BUTTON'); ?>					</button>					<span id="refresh-status" class="overrider-spinner  help-block">						<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_REFRESHING'); ?>					</span>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('searchtype'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('searchtype'); ?>					</div>				</div>			</fieldset>			<fieldset id="results-container" class="adminform">				<legend><?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_RESULTS_LEGEND'); ?></legend>				<span id="more-results">					<a href="javascript:Joomla.overrider.searchStrings(Joomla.overrider.states.more);">						<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDE_MORE_RESULTS'); ?></a>				</span>			</fieldset>			<input type="hidden" name="task" value="" />			<input type="hidden" name="id" value="<?php echo $this->item->key; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Helper class for Joomla! Search components * * @package     Joomla.Libraries * @subpackage  Search * @since       3.0 */class JSearchHelper{	/**	 * Method to log search terms to the database	 *	 * @param   string  $term       The term being searched	 * @param   string  $component  The component being used for the search	 *	 * @return  void	 *	 * @since   3.0	 */	public static function logSearch($term, $component)	{		// Initialise our variables		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$enable_log_searches = JComponentHelper::getParams($component)->get('enabled');		// Sanitise the term for the database		$search_term = $db->escape(trim(strtolower($term)));		if ($enable_log_searches)		{			// Query the table to determine if the term has been searched previously			$query->select($db->quoteName('hits'))				->from($db->quoteName('#__core_log_searches'))				->where($db->quoteName('search_term') . ' = ' . $db->quote($search_term));			$db->setQuery($query);			$hits = intval($db->loadResult());			// Reset the $query object			$query->clear();			// Update the table based on the results			if ($hits)			{				$query->update($db->quoteName('#__core_log_searches'))					->set('hits = (hits + 1)')					->where($db->quoteName('search_term') . ' = ' . $db->quote($search_term));			}			else			{				$query->insert($db->quoteName('#__core_log_searches'))					->columns(array($db->quoteName('search_term'), $db->quoteName('hits')))					->values($db->quote($search_term) . ', 1');			}			// Execute the update query			$db->setQuery($query);			$db->execute();		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Manage View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewDiscover extends InstallerViewDefault{	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		// Get data from the model		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= InstallerHelper::getActions();		/*		 * Set toolbar items for the page		 */		JToolbarHelper::custom('discover.install', 'upload', 'upload', 'JTOOLBAR_INSTALL', true, false);		JToolbarHelper::custom('discover.refresh', 'refresh', 'refresh', 'COM_INSTALLER_TOOLBAR_DISCOVER', false, false);		JToolbarHelper::divider();		parent::addToolbar();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_DISCOVER');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link model. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectModelLink extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_REDIRECT';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if ($record->published != -2)		{			return false;		}		$user = JFactory::getUser();		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check the component since there are no categories or other assets.		return $user->authorise('core.admin', 'com_redirect');	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Link', $prefix = 'RedirectTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_redirect.link', 'link', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if ($this->canEditState((object) $data) != true)		{			// Disable fields for display.			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_redirect.edit.link.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_redirect.link', $data);		return $data;	}	/**	 * Method to activate links.	 *	 * @param   array     An array of link ids.	 * @param   string    The new URL to set for the redirect.	 * @param   string    A comment for the redirect links.	 * @return  boolean  Returns true on success, false on failure.	 * @since   1.6	 */	public function activate(&$pks, $url, $comment = null)	{		$user = JFactory::getUser();		$db = $this->getDbo();		// Sanitize the ids.		$pks = (array) $pks;		JArrayHelper::toInteger($pks);		// Populate default comment if necessary.		$comment = (!empty($comment)) ? $comment : JText::sprintf('COM_REDIRECT_REDIRECTED_ON', JHtml::_('date', time()));		// Access checks.		if (!$user->authorise('core.admin', 'com_redirect'))		{			$pks = array();			$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDIT_NOT_PERMITTED'));			return false;		}		if (!empty($pks))		{			// Update the link rows.			$query = $db->getQuery(true)				->update($db->quoteName('#__redirect_links'))				->set($db->quoteName('new_url') . ' = ' . $db->quote($url))				->set($db->quoteName('published') . ' = ' . $db->quote(1))				->set($db->quoteName('comment') . ' = ' . $db->quote($comment))				->where($db->quoteName('id') . ' IN (' . implode(',', $pks) . ')');			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$script = "\t".'Joomla.submitbutton = function(pressbutton) {'."\n";$script .= "\t\t".'var form = document.adminForm;'."\n";$script .= "\t\t".'if (pressbutton == \'mail.cancel\') {'."\n";$script .= "\t\t\t".'Joomla.submitform(pressbutton);'."\n";$script .= "\t\t\t".'return;'."\n";$script .= "\t\t".'}'."\n";$script .= "\t\t".'// do field validation'."\n";$script .= "\t\t".'if (form.jform_subject.value == ""){'."\n";$script .= "\t\t\t".'alert("'.JText::_('COM_USERS_MAIL_PLEASE_FILL_IN_THE_SUBJECT', true).'");'."\n";$script .= "\t\t".'} else if (getSelectedValue(\'adminForm\',\'jform[group]\') < 0){'."\n";$script .= "\t\t\t".'alert("'.JText::_('COM_USERS_MAIL_PLEASE_SELECT_A_GROUP', true).'");'."\n";$script .= "\t\t".'} else if (form.jform_message.value == ""){'."\n";$script .= "\t\t\t".'alert("'.JText::_('COM_USERS_MAIL_PLEASE_FILL_IN_THE_MESSAGE', true).'");'."\n";$script .= "\t\t".'} else {'."\n";$script .= "\t\t\t".'Joomla.submitform(pressbutton);'."\n";$script .= "\t\t".'}'."\n";$script .= "\t\t".'}'."\n";// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('formbehavior.chosen', 'select');JFactory::getDocument()->addScriptDeclaration($script);?><form action="<?php echo JRoute::_('index.php?option=com_users&view=mail'); ?>" name="adminForm" method="post" id="adminForm">	<div class="row-fluid">		<div class="span9">			<fieldset class="adminform">				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('subject'); ?></div>					<div class="controls"><?php echo $this->form->getInput('subject'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('message'); ?></div>					<div class="controls"><?php echo $this->form->getInput('message'); ?></div>				</div>			</fieldset>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		</div>		<div class="span3">			<fieldset class="form-inline">				<div class="control-group checkbox">					<div class="controls"><?php echo $this->form->getInput('recurse'); ?> <?php echo $this->form->getLabel('recurse'); ?></div>				</div>				<div class="control-group checkbox">					<div class="control-label"><?php echo $this->form->getInput('mode'); ?> <?php echo $this->form->getLabel('mode'); ?></div>				</div>				<div class="control-group checkbox">					<div class="control-label"><?php echo $this->form->getInput('disabled'); ?> <?php echo $this->form->getLabel('disabled'); ?></div>				</div>				<div class="control-group checkbox">					<div class="control-label"><?php echo $this->form->getInput('bcc'); ?> <?php echo $this->form->getLabel('bcc'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('group'); ?></div>					<div class="controls"><?php echo $this->form->getInput('group'); ?></div>				</div>			</fieldset>		</div>	</div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Content.finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Finder Content Plugin * * @package     Joomla.Plugin * @subpackage  Content.finder * @since       2.5 */class PlgContentFinder extends JPlugin{	/**	 * Finder after save content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string  The context of the content passed to the plugin (added in 1.6)	 * @param   object		A JTableContent object	 * @param   bool		If the content has just been created	 * @since	2.5	 */	public function onContentAfterSave($context, $article, $isNew)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderAfterSave event.		$dispatcher->trigger('onFinderAfterSave', array($context, $article, $isNew));	}	/**	 * Finder before save content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string  The context of the content passed to the plugin (added in 1.6)	 * @param   object		A JTableContent object	 * @param   bool		If the content is just about to be created	 * @since   2.5	 */	public function onContentBeforeSave($context, $article, $isNew)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderBeforeSave event.		$dispatcher->trigger('onFinderBeforeSave', array($context, $article, $isNew));	}	/**	 * Finder after delete content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string  The context of the content passed to the plugin (added in 1.6)	 * @param   object		A JTableContent object	 * @since   2.5	 */	public function onContentAfterDelete($context, $article)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderAfterDelete event.		$dispatcher->trigger('onFinderAfterDelete', array($context, $article));	}	/**	 * Finder change state content method	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 * @since   2.5	 */	public function onContentChangeState($context, $pks, $value)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderChangeState event.		$dispatcher->trigger('onFinderChangeState', array($context, $pks, $value));	}	/**	 * Finder change category state content method	 * Article is passed by reference, but after the save, so no changes will be saved.	 * Method is called right after the content is saved	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 * @since   2.5	 */	public function onCategoryChangeState($extension, $pks, $value)	{		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('finder');		// Trigger the onFinderCategoryChangeState event.		$dispatcher->trigger('onFinderCategoryChangeState', array($extension, $pks, $value));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');/** * Banner model for the Joomla Banners component. * * @package     Joomla.Site * @subpackage  com_banners * @since       1.5 */class BannersModelBanner extends JModelLegacy{	protected $_item;	/**	 * Clicks the URL, incrementing the counter	 *	 * @return  void	 *	 * @since   1.5	 */	public function click()	{		$id = $this->getState('banner.id');		// update click count		$db = $this->getDbo();		$query = $db->getQuery(true)			->update('#__banners')			->set('clicks = (clicks + 1)')			->where('id = ' . (int) $id);		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			JError::raiseError(500, $e->getMessage());		}		// track clicks		$item = $this->getItem();		$trackClicks = $item->track_clicks;		if ($trackClicks < 0 && $item->cid)		{			$trackClicks = $item->client_track_clicks;		}		if ($trackClicks < 0)		{			$config = JComponentHelper::getParams('com_banners');			$trackClicks = $config->get('track_clicks');		}		if ($trackClicks > 0)		{			$trackDate = JFactory::getDate()->format('Y-m-d H');			$query->clear()				->select($db->quoteName('count'))				->from('#__banner_tracks')				->where('track_type=2')				->where('banner_id=' . (int) $id)				->where('track_date=' . $db->quote($trackDate));			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JError::raiseError(500, $e->getMessage());			}			$count = $db->loadResult();			$query->clear();			if ($count)			{				// update count				$query->update('#__banner_tracks')					->set($db->quoteName('count') . ' = (' . $db->quote('count') . ' + 1)')					->where('track_type=2')					->where('banner_id=' . (int) $id)					->where('track_date=' . $db->quote($trackDate));			}			else			{				// insert new count				//sqlsrv change				$query->insert('#__banner_tracks')					->columns(						array(							$db->quoteName('count'), $db->quoteName('track_type'),							$db->quoteName('banner_id'), $db->quoteName('track_date')						)					)					->values('1, 2,' . (int) $id . ',' . $db->quote($trackDate));			}			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JError::raiseError(500, $e->getMessage());			}		}	}	/**	 * Get the data for a banner.	 *	 * @return  object	 */	public function &getItem()	{		if (!isset($this->_item))		{			$cache = JFactory::getCache('com_banners', '');			$id = $this->getState('banner.id');			$this->_item = $cache->get($id);			if ($this->_item === false)			{				// redirect to banner url				$db = $this->getDbo();				$query = $db->getQuery(true)					->select(						'a.clickurl as clickurl,' .							'a.cid as cid,' .							'a.track_clicks as track_clicks'					)					->from('#__banners as a')					->where('a.id = ' . (int) $id)					->join('LEFT', '#__banner_clients AS cl ON cl.id = a.cid')					->select('cl.track_clicks as client_track_clicks');				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					JError::raiseError(500, $e->getMessage());				}				$this->_item = $db->loadObject();				$cache->store($this->_item, $id);			}		}		return $this->_item;	}	/**	 * Get the URL for a banner	 *	 * @return  string	 *	 * @since   1.5	 */	public function getUrl()	{		$item = $this->getItem();		$url = $item->clickurl;		// check for links		if (!preg_match('#http[s]?://|index[2]?\.php#', $url))		{			$url = "http://$url";		}		return $url;	}}
<?php/** * @package     Joomla.Platform * @subpackage  OAuth * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();jimport('joomla.environment.response');/** * Joomla Platform class for interacting with an OAuth 1.0 and 1.0a server. * * @package     Joomla.Platform * @subpackage  OAuth * * @since       13.1 */abstract class JOAuth1Client{	/**	 * @var    JRegistry  Options for the JOAuth1Client object.	 * @since  13.1	 */	protected $options;	/**	 * @var array  Contains access token key, secret and verifier.	 * @since 13.1	 */	protected $token = array();	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var    JInput The input object to use in retrieving GET/POST data.	 * @since  13.1	 */	protected $input;	/**	 * @var   JApplicationWeb  The application object to send HTTP headers for redirects.	 * @since 13.1	 */	protected $application;	/**	 * @var   string  Selects which version of OAuth to use: 1.0 or 1.0a.	 * @since 13.1	 */	protected $version;	/**	 * Constructor.	 *	 * @param   JRegistry        $options      OAuth1Client options object.	 * @param   JHttp            $client       The HTTP client object.	 * @param   JInput           $input        The input object	 * @param   JApplicationWeb  $application  The application object	 * @param   string           $version      Specify the OAuth version. By default we are using 1.0a.	 *	 * @since 13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JInput $input = null, JApplicationWeb $application = null,		$version = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : JHttpFactory::getHttp($this->options);		$this->input = isset($input) ? $input : JFactory::getApplication()->input;		$this->application = isset($application) ? $application : new JApplicationWeb;		$this->version = isset($version) ? $version : '1.0a';	}	/**	 * Method to for the oauth flow.	 *	 * @return void	 *	 * @since  13.1	 *	 * @throws DomainException	 */	public function authenticate()	{		// Already got some credentials stored?		if ($this->token)		{			$response = $this->verifyCredentials();			if ($response)			{				return $this->token;			}			else			{				$this->token = null;			}		}		// Check for callback.		if (strcmp($this->version, '1.0a') === 0)		{			$verifier = $this->input->get('oauth_verifier');		}		else		{			$verifier = $this->input->get('oauth_token');		}		if (empty($verifier))		{			// Generate a request token.			$this->_generateRequestToken();			// Authenticate the user and authorise the app.			$this->_authorise();		}		// Callback		else		{			$session = JFactory::getSession();			// Get token form session.			$this->token = array('key' => $session->get('key', null, 'oauth_token'), 'secret' => $session->get('secret', null, 'oauth_token'));			// Verify the returned request token.			if (strcmp($this->token['key'], $this->input->get('oauth_token')) !== 0)			{				throw new DomainException('Bad session!');			}			// Set token verifier for 1.0a.			if (strcmp($this->version, '1.0a') === 0)			{				$this->token['verifier'] = $this->input->get('oauth_verifier');			}			// Generate access token.			$this->_generateAccessToken();			// Return the access token.			return $this->token;		}	}	/**	 * Method used to get a request token.	 *	 * @return void	 *	 * @since  13.1	 * @throws  DomainException	 */	private function _generateRequestToken()	{		// Set the callback URL.		if ($this->getOption('callback'))		{			$parameters = array(				'oauth_callback' => $this->getOption('callback')			);		}		else		{			$parameters = array();		}		// Make an OAuth request for the Request Token.		$response = $this->oauthRequest($this->getOption('requestTokenURL'), 'POST', $parameters);		parse_str($response->body, $params);		if (strcmp($this->version, '1.0a') === 0 && strcmp($params['oauth_callback_confirmed'], 'true') !== 0)		{			throw new DomainException('Bad request token!');		}		// Save the request token.		$this->token = array('key' => $params['oauth_token'], 'secret' => $params['oauth_token_secret']);		// Save the request token in session		$session = JFactory::getSession();		$session->set('key', $this->token['key'], 'oauth_token');		$session->set('secret', $this->token['secret'], 'oauth_token');	}	/**	 * Method used to authorise the application.	 *	 * @return void	 *	 * @since  13.1	 */	private function _authorise()	{		$url = $this->getOption('authoriseURL') . '?oauth_token=' . $this->token['key'];		if ($this->getOption('scope'))		{			$scope = is_array($this->getOption('scope')) ? implode(' ', $this->getOption('scope')) : $this->getOption('scope');			$url .= '&scope=' . urlencode($scope);		}		if ($this->getOption('sendheaders'))		{			$this->application->redirect($url);		}	}	/**	 * Method used to get an access token.	 *	 * @return void	 *	 * @since  13.1	 */	private function _generateAccessToken()	{		// Set the parameters.		$parameters = array(			'oauth_token' => $this->token['key']		);		if (strcmp($this->version, '1.0a') === 0)		{			$parameters = array_merge($parameters, array('oauth_verifier' => $this->token['verifier']));		}		// Make an OAuth request for the Access Token.		$response = $this->oauthRequest($this->getOption('accessTokenURL'), 'POST', $parameters);		parse_str($response->body, $params);		// Save the access token.		$this->token = array('key' => $params['oauth_token'], 'secret' => $params['oauth_token_secret']);	}	/**	 * Method used to make an OAuth request.	 *	 * @param   string  $url         The request URL.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 * @param   mixed   $data        The POST request data.	 * @param   array   $headers     An array of name-value pairs to include in the header of the request	 *	 * @return  object  The JHttpResponse object.	 *	 * @since 13.1	 * @throws  DomainException	 */	public function oauthRequest($url, $method, $parameters, $data = array(), $headers = array())	{		// Set the parameters.		$defaults = array(			'oauth_consumer_key' => $this->getOption('consumer_key'),			'oauth_signature_method' => 'HMAC-SHA1',			'oauth_version' => '1.0',			'oauth_nonce' => $this->generateNonce(),			'oauth_timestamp' => time()		);		$parameters = array_merge($parameters, $defaults);		// Do not encode multipart parameters. Do not include $data in the signature if $data is not array.		if (isset($headers['Content-Type']) && strpos($headers['Content-Type'], 'multipart/form-data') !== false || !is_array($data))		{			$oauth_headers = $parameters;		}		else		{			// Use all parameters for the signature.			$oauth_headers = array_merge($parameters, $data);		}		// Sign the request.		$oauth_headers = $this->_signRequest($url, $method, $oauth_headers);		// Get parameters for the Authorisation header.		if (is_array($data))		{			$oauth_headers = array_diff_key($oauth_headers, $data);		}		// Send the request.		switch ($method)		{			case 'GET':				$url = $this->toUrl($url, $data);				$response = $this->client->get($url, array('Authorization' => $this->_createHeader($oauth_headers)));				break;			case 'POST':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->post($url, $data, $headers);				break;			case 'PUT':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->put($url, $data, $headers);				break;			case 'DELETE':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->delete($url, $headers);				break;		}		// Validate the response code.		$this->validateResponse($url, $response);		return $response;	}	/**	 * Method to validate a response.	 *	 * @param   string         $url       The request URL.	 * @param   JHttpResponse  $response  The response to validate.	 *	 * @return  void	 *	 * @since  13.1	 * @throws DomainException	 */	abstract public function validateResponse($url, $response);	/**	 * Method used to create the header for the POST request.	 *	 * @param   array  $parameters  Array containing request parameters.	 *	 * @return  string  The header.	 *	 * @since 13.1	 */	private function _createHeader($parameters)	{		$header = 'OAuth ';		foreach ($parameters as $key => $value)		{			if (!strcmp($header, 'OAuth '))			{				$header .= $key . '="' . $this->safeEncode($value) . '"';			}			else			{				$header .= ', ' . $key . '="' . $value . '"';			}		}		return $header;	}	/**	 * Method to create the URL formed string with the parameters.	 *	 * @param   string  $url         The request URL.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return  string  The formed URL.	 *	 * @since  13.1	 */	public function toUrl($url, $parameters)	{		foreach ($parameters as $key => $value)		{			if (is_array($value))			{				foreach ($value as $k => $v)				{					if (strpos($url, '?') === false)					{						$url .= '?' . $key . '=' . $v;					}					else					{						$url .= '&' . $key . '=' . $v;					}				}			}			else			{				if (strpos($value, ' ') !== false)				{					$value = $this->safeEncode($value);				}				if (strpos($url, '?') === false)				{					$url .= '?' . $key . '=' . $value;				}				else				{					$url .= '&' . $key . '=' . $value;				}			}		}		return $url;	}	/**	 * Method used to sign requests.	 *	 * @param   string  $url         The URL to sign.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return  void	 *	 * @since   13.1	 */	private function _signRequest($url, $method, $parameters)	{		// Create the signature base string.		$base = $this->_baseString($url, $method, $parameters);		$parameters['oauth_signature'] = $this->safeEncode(			base64_encode(				hash_hmac('sha1', $base, $this->_prepareSigningKey(), true)				)			);		return $parameters;	}	/**	 * Prepare the signature base string.	 *	 * @param   string  $url         The URL to sign.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return string  The base string.	 *	 * @since 13.1	 */	private function _baseString($url, $method, $parameters)	{		// Sort the parameters alphabetically		uksort($parameters, 'strcmp');		// Encode parameters.		foreach ($parameters as $key => $value)		{			$key = $this->safeEncode($key);			if (is_array($value))			{				foreach ($value as $k => $v)				{					$v = $this->safeEncode($v);					$kv[] = "{$key}={$v}";				}			}			else			{				$value = $this->safeEncode($value);				$kv[] = "{$key}={$value}";			}		}		// Form the parameter string.		$params = implode('&', $kv);		// Signature base string elements.		$base = array(			$method,			$url,			$params			);		// Return the base string.		return implode('&', $this->safeEncode($base));	}	/**	 * Encodes the string or array passed in a way compatible with OAuth.	 * If an array is passed each array value will will be encoded.	 *	 * @param   mixed  $data  The scalar or array to encode.	 *	 * @return  string  $data encoded in a way compatible with OAuth.	 *	 * @since 13.1	 */	public function safeEncode($data)	{		if (is_array($data))		{			return array_map(array($this, 'safeEncode'), $data);		}		elseif (is_scalar($data))		{			return str_ireplace(				array('+', '%7E'),				array(' ', '~'),				rawurlencode($data)				);		}		else		{			return '';		}	}	/**	 * Method used to generate the current nonce.	 *	 * @return  string  The current nonce.	 *	 * @since 13.1	 */	public static function generateNonce()	{		$mt = microtime();		$rand = mt_rand();		// The md5s look nicer than numbers.		return md5($mt . $rand);	}	/**	 * Prepares the OAuth signing key.	 *	 * @return string  The prepared signing key.	 *	 * @since 13.1	 */	private function _prepareSigningKey()	{		return $this->safeEncode($this->getOption('consumer_secret')) . '&' . $this->safeEncode(($this->token) ? $this->token['secret'] : '');	}	/**	 * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;	 * returns a 401 status code and an error message if not.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	abstract public function verifyCredentials();	/**	 * Get an option from the JOauth1aClient instance.	 *	 * @param   string  $key  The name of the option to get	 *	 * @return  mixed  The option value	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JOauth1aClient instance.	 *	 * @param   string  $key    The name of the option to set	 * @param   mixed   $value  The option value to set	 *	 * @return  JOAuth1Client  This object for method chaining	 *	 * @since   13.1	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}	/**	 * Get the oauth token key or secret.	 *	 * @return  array  The oauth token key and secret.	 *	 * @since   13.1	 */	public function getToken()	{		return $this->token;	}	/**	 * Set the oauth token.	 *	 * @param   array  $token  The access token key and secret.	 *	 * @return  JOAuth1Client  This object for method chaining.	 *	 * @since   13.1	 */	public function setToken($token)	{		$this->token = $token;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users component debugging helper. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersHelperDebug{	/**	 * Get a list of the components.	 *	 * @return  array	 * @since   1.6	 */	public static function getComponents()	{		// Initialise variable.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('name AS text, element AS value')			->from('#__extensions')			->where('enabled >= 1')			->where('type =' . $db->quote('component'));		$items = $db->setQuery($query)->loadObjectList();		if (count($items))		{			$lang = JFactory::getLanguage();			foreach ($items as &$item)			{				// Load language				$extension = $item->value;				$source = JPATH_ADMINISTRATOR . '/components/' . $extension;				$lang->load("$extension.sys", JPATH_ADMINISTRATOR, null, false, false)					|| $lang->load("$extension.sys", $source, null, false, false)					|| $lang->load("$extension.sys", JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					|| $lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				// Translate component name				$item->text = JText::_($item->text);			}			// Sort by component name			JArrayHelper::sortObjects($items, 'text', 1, true, $lang->getLocale());		}		return $items;	}	/**	 * Get a list of the actions for the component or code actions.	 *	 * @param   string    The name of the component.	 *	 * @return  array	 * @since   1.6	 */	public static function getDebugActions($component = null)	{		$actions = array();		// Try to get actions for the component		if (!empty($component))		{			$component_actions = JAccess::getActions($component);			if (!empty($component_actions))			{				foreach ($component_actions as &$action)				{					$actions[$action->title] = array($action->name, $action->description);				}			}		}		// Use default actions from configuration if no component selected or component doesn't have actions		if (empty($actions))		{			$filename = JPATH_ADMINISTRATOR . '/components/com_config/models/forms/application.xml';			if (is_file($filename))			{				$xml = simplexml_load_file($filename);				foreach ($xml->children()->fieldset as $fieldset)				{					if ('permissions' == (string) $fieldset['name'])					{						foreach ($fieldset->children() as $field)						{							if ('rules' == (string) $field['name'])							{								foreach ($field->children() as $action)								{									$actions[(string) $action['title']] = array(										(string) $action['name'],										(string) $action['description']									);								}								break;								break;								break;							}						}					}				}				// Load language				$lang = JFactory::getLanguage();				$extension = 'com_config';				$source = JPATH_ADMINISTRATOR . '/components/' . $extension;				$lang->load($extension, JPATH_ADMINISTRATOR, null, false, false)					|| $lang->load($extension, $source, null, false, false)					|| $lang->load($extension, JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					|| $lang->load($extension, $source, $lang->getDefault(), false, false);			}		}		return $actions;	}	/**	 * Get a list of filter options for the levels.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getLevelsOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '1', JText::sprintf('COM_USERS_OPTION_LEVEL_COMPONENT', 1));		$options[] = JHtml::_('select.option', '2', JText::sprintf('COM_USERS_OPTION_LEVEL_CATEGORY', 2));		$options[] = JHtml::_('select.option', '3', JText::sprintf('COM_USERS_OPTION_LEVEL_DEEPER', 3));		$options[] = JHtml::_('select.option', '4', '4');		$options[] = JHtml::_('select.option', '5', '5');		$options[] = JHtml::_('select.option', '6', '6');		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Access checks are done internally because of different requirements for the two controllers.// Tell the browser not to cache this page.JResponse::setHeader('Expires', 'Mon, 26 Jul 1997 05:00:00 GMT', true);$controller = JControllerLegacy::getInstance('Config');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API object class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */abstract class JOpenstreetmapObject{	/**	 * @var    JRegistry  Options for the Openstreetmap object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var JOpenstreetmapOauth The OAuth client.	 * @since 13.1	 */	protected $oauth;	/**	 * Constructor.	 *	 * @param   JRegistry            &$options  Openstreetmap options object.	 * @param   JHttp                $client    The HTTP client object.	 * @param   JOpenstreetmapOauth  $oauth     Openstreetmap oauth client	 *	 * @since   13.1	 */	public function __construct(JRegistry &$options = null, JHttp $client = null, JOpenstreetmapOauth $oauth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JHttp($this->options);		$this->oauth = $oauth;	}	/**	 * Get an option from the JOpenstreetmapObject instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JOpenstreetmapObject instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JOpenstreetmapObject  This object for method chaining.	 *	 * @since   13.1	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}	/**	 * Method to send the request which does not require authentication.	 *	 * @param   string  $path     The path of the request to make	 * @param   string  $method   The request method.	 * @param   array   $headers  The headers passed in the request.	 * @param   mixed   $data     Either an associative array or a string to be sent with the post request.	 *	 * @return  SimpleXMLElement  The XML response	 *	 * @since   13.1	 * @throws  DomainException	 */	public function sendRequest($path, $method='GET', $headers = array(), $data='')	{		// Send the request.		switch ($method)		{			case 'GET':				$response = $this->client->get($path, $headers);				break;			case 'POST':				$response = $this->client->post($path, $data, $headers);				break;		}		// Validate the response code.		if ($response->code != 200)		{			$error = htmlspecialchars($response->body);			throw new DomainException($error, $response->code);		}		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Administrator Application helper class. * Provide many supporting API functions. * * @package     Joomla.Administrator * @subpackage  Application * @since       1.5 */class JAdministratorHelper{	/**	 * Return the application option string [main component].	 *	 * @return  string  The component to access.	 *	 * @since   1.5	 */	public static function findOption()	{		$app = JFactory::getApplication();		$option = strtolower($app->input->get('option'));		$app->loadIdentity();		$user = $app->getIdentity();		if ($user->get('guest') || !$user->authorise('core.login.admin'))		{			$option = 'com_login';		}		if (empty($option))		{			$option = 'com_cpanel';		}		$app->input->set('option', $option);		return $option;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$params = JFactory::getApplication()->getTemplate(true)->params;$logo = $params->get('logo');$showRightColumn = 0;$showleft = 0;$showbottom = 0;// get params$color			= $params->get('templatecolor');$navposition	= $params->get('navposition');//get language and direction$doc = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><meta name="language" content="<?php echo $this->language; ?>" />	<title><?php echo $this->error->getCode(); ?> - <?php echo $this->title; ?></title><?php if ($this->error->getCode() >= 400 && $this->error->getCode() < 500) { 	?>		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/system.css" type="text/css" />		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/position.css" type="text/css" media="screen,projection" />		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/layout.css" type="text/css" media="screen,projection" />		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/print.css" type="text/css" media="Print" />		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/<?php echo htmlspecialchars($color); ?>.css" type="text/css" /><?php	$files = JHtml::_('stylesheet', 'templates/'.$this->template.'/css/general.css', null, false, true);	if ($files):		if (!is_array($files)):			$files = array($files);		endif;		foreach ($files as $file) :?>		<link rel="stylesheet" href="<?php echo $file;?>" type="text/css" /><?php		endforeach;	endif;?>		 <link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/<?php echo htmlspecialchars($color); ?>.css" type="text/css" />		<?php if ($this->direction == 'rtl') : ?>			<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/template_rtl.css" type="text/css" />			<?php if (file_exists(JPATH_SITE . '/templates/'.$this->template.'/css/' . $color . '_rtl.css')) :?>				<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/<?php echo $color ?>_rtl.css" type="text/css" />			<?php endif; ?>		<?php endif; ?>		<?php			$debug = JFactory::getConfig()->get('debug_lang');			if (JDEBUG || $debug)			{		?>			<link rel="stylesheet" href="<?php echo $this->baseurl ?>/media/cms/css/debug.css" type="text/css" />		<?php			}		?>		<!--[if lte IE 6]>			<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/ieonly.css" rel="stylesheet" type="text/css" />		<![endif]-->		<!--[if IE 7]>			<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/ie7only.css" rel="stylesheet" type="text/css" />		<![endif]-->		<!--[if lt IE 9]>			<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script>		<![endif]--><style type="text/css">			<!--			#errorboxbody			{margin:30px}			#errorboxbody h2			{font-weight:normal;			font-size:1.5em}			#searchbox			{background:#eee;			padding:10px;			margin-top:20px;			border:solid 1px #ddd			}			--></style></head><body>	<div id="all">		<div id="back">		<div id="header">					<div class="logoheader">						<?php								$params = JFactory::getApplication()->getTemplate(true)->params;								$logo = $params->get('logo');							?>						 <h1 id="logo">                                        <?php if ($logo) : ?>                                        <img src="<?php echo $this->baseurl ?>/<?php echo htmlspecialchars($logo); ?>"  alt="<?php echo htmlspecialchars($params->get('sitetitle'));?>" />                                        <?php endif;?>                                        <?php if (!$logo ) : ?>                                        <?php echo htmlspecialchars($params->get('sitetitle'));?>                                        <?php endif; ?>                                        <span class="header1">                                        <?php echo htmlspecialchars($params->get('sitedescription'));?>                                        </span></h1>					</div><!-- end logoheader -->						<ul class="skiplinks">							<li><a href="#wrapper2" class="u2"><?php echo JText::_('TPL_BEEZ3_SKIP_TO_ERROR_CONTENT'); ?></a></li>							<li><a href="#nav" class="u2"><?php echo JText::_('TPL_BEEZ3_ERROR_JUMP_TO_NAV'); ?></a></li>						</ul>						<div id="line"></div>				</div><!-- end header -->		<div id="contentarea2" >							<div class="left1" id="nav">				<h2 class="unseen"><?php echo JText::_('TPL_BEEZ3_NAVIGATION'); ?></h2>											<?php $module = JModuleHelper::getModule('menu');											echo JModuleHelper::renderModule($module);	?>							</div>					<!-- end navi -->			<div id="wrapper2">			<div id="errorboxbody">						<h2><?php echo JText::_('JERROR_AN_ERROR_HAS_OCCURRED'); ?><br />								<?php echo JText::_('JERROR_LAYOUT_PAGE_NOT_FOUND'); ?></h2>								<?php if (JModuleHelper::getModule('search')) : ?>									<div id="searchbox">									<h3 class="unseen"><?php echo JText::_('TPL_BEEZ3_SEARCH'); ?></h3>									<p><?php echo JText::_('JERROR_LAYOUT_SEARCH'); ?></p>									<?php $module = JModuleHelper::getModule('search');									echo JModuleHelper::renderModule($module);	?>									</div>								<?php endif; ?>								<div>								<p><a href="<?php echo $this->baseurl; ?>/index.php" title="<?php echo JText::_('JERROR_LAYOUT_GO_TO_THE_HOME_PAGE'); ?>"><?php echo JText::_('JERROR_LAYOUT_HOME_PAGE'); ?></a></p>								</div>						<h3><?php echo JText::_('JERROR_LAYOUT_PLEASE_CONTACT_THE_SYSTEM_ADMINISTRATOR'); ?></h3>						<h2>#<?php echo $this->error->getCode(); ?>&nbsp;<?php echo $this->error->getMessage();?></h2> <br />			</div><!-- end wrapper -->		</div><!-- end contentarea -->						<?php if ($this->debug) :							echo $this->renderBacktrace();						endif; ?>			</div>  <!--end all -->			</div>			</div>			 <div id="footer-outer">			<div id="footer-sub">                                <div id="footer">                                        <p>                                                <?php echo JText::_('TPL_BEEZ3_POWERED_BY');?> <a href="http://www.joomla.org/">Joomla!&#174;</a>                                        </p>                                </div><!-- end footer -->                         </div><!-- end footer-sub -->                       </div></body></html><?php } else { ?><?phpif (!isset($this->error)){	$this->error = JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));	$this->debug = false;}?>	<link rel="stylesheet" href="<?php echo $this->baseurl; ?>/templates/system/css/error.css" type="text/css" /></head><body>	<div class="error">		<div id="outline">		<div id="errorboxoutline">			<div id="errorboxheader"> <?php echo $this->title; ?></div>			<div id="errorboxbody">			<p><strong><?php echo JText::_('JERROR_LAYOUT_NOT_ABLE_TO_VISIT'); ?></strong></p>				<ol>					<li><?php echo JText::_('JERROR_LAYOUT_AN_OUT_OF_DATE_BOOKMARK_FAVOURITE'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_SEARCH_ENGINE_OUT_OF_DATE_LISTING'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_MIS_TYPED_ADDRESS'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_YOU_HAVE_NO_ACCESS_TO_THIS_PAGE'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_REQUESTED_RESOURCE_WAS_NOT_FOUND'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_ERROR_HAS_OCCURRED_WHILE_PROCESSING_YOUR_REQUEST'); ?></li>				</ol>			<p><strong><?php echo JText::_('JERROR_LAYOUT_PLEASE_TRY_ONE_OF_THE_FOLLOWING_PAGES'); ?></strong></p>				<ul>					<li><a href="<?php echo $this->baseurl; ?>/index.php" title="<?php echo JText::_('JERROR_LAYOUT_GO_TO_THE_HOME_PAGE'); ?>"><?php echo JText::_('JERROR_LAYOUT_HOME_PAGE'); ?></a></li>					<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_search" title="<?php echo JText::_('JERROR_LAYOUT_SEARCH_PAGE'); ?>"><?php echo JText::_('JERROR_LAYOUT_SEARCH_PAGE'); ?></a></li>				</ul>			<p><?php echo JText::_('JERROR_LAYOUT_PLEASE_CONTACT_THE_SYSTEM_ADMINISTRATOR'); ?>.</p>			<div id="techinfo">			<p><?php echo $this->error->getMessage(); ?></p>			<p>				<?php if ($this->debug) :					echo $this->renderBacktrace();				endif; ?>			</p>			</div>			</div>		</div>		</div>	</div></body></html><?php } ?>
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Public cache handler * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheController{	/**	 * @var    JCache	 * @since  11.1	 */	public $cache;	/**	 * @var    array  Array of options	 * @since  11.1	 */	public $options;	/**	 * Constructor	 *	 * @param   array  $options  Array of options	 *	 * @since   11.1	 */	public function __construct($options)	{		$this->cache = new JCache($options);		$this->options = & $this->cache->_options;		// Overwrite default options with given options		foreach ($options as $option => $value)		{			if (isset($options[$option]))			{				$this->options[$option] = $options[$option];			}		}	}	/**	 * Magic method to proxy JCacheControllerMethods	 *	 * @param   string  $name       Name of the function	 * @param   array   $arguments  Array of arguments for the function	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function __call($name, $arguments)	{		$nazaj = call_user_func_array(array($this->cache, $name), $arguments);		return $nazaj;	}	/**	 * Returns a reference to a cache adapter object, always creating it	 *	 * @param   string  $type     The cache object type to instantiate; default is output.	 * @param   array   $options  Array of options	 *	 * @return  JCache  A JCache object	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($type = 'output', $options = array())	{		self::addIncludePath(JPATH_PLATFORM . '/joomla/cache/controller');		$type = strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $type));		$class = 'JCacheController' . ucfirst($type);		if (!class_exists($class))		{			// Search for the class file in the JCache include paths.			jimport('joomla.filesystem.path');			if ($path = JPath::find(self::addIncludePath(), strtolower($type) . '.php'))			{				include_once $path;			}			else			{				throw new RuntimeException('Unable to load Cache Controller: ' . $type, 500);			}		}		return new $class($options);	}	/**	 * Set caching enabled state	 *	 * @param   boolean  $enabled  True to enable caching	 *	 * @return  void	 *	 * @since   11.1	 */	public function setCaching($enabled)	{		$this->cache->setCaching($enabled);	}	/**	 * Set cache lifetime	 *	 * @param   integer  $lt  Cache lifetime	 *	 * @return  void	 *	 * @since   11.1	 */	public function setLifeTime($lt)	{		$this->cache->setLifeTime($lt);	}	/**	 * Add a directory where JCache should search for controllers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array   An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!empty($path) && !in_array($path, $paths))		{			jimport('joomla.filesystem.path');			array_unshift($paths, JPath::clean($path));		}		return $paths;	}	/**	 * Get stored cached data by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  mixed   False on no result, cached object otherwise	 *	 * @since   11.1	 */	public function get($id, $group = null)	{		$data = false;		$data = $this->cache->get($id, $group);		if ($data === false)		{			$locktest = new stdClass;			$locktest->locked = null;			$locktest->locklooped = null;			$locktest = $this->cache->lock($id, $group);			if ($locktest->locked == true && $locktest->locklooped == true)			{				$data = $this->cache->get($id, $group);			}			if ($locktest->locked == true)			{				$this->cache->unlock($id, $group);			}		}		// Check again because we might get it from second attempt		if ($data !== false)		{			// Trim to fix unserialize errors			$data = unserialize(trim($data));		}		return $data;	}	/**	 * Store data to cache by id and group	 *	 * @param   mixed    $data        The data to store	 * @param   string   $id          The cache data id	 * @param   string   $group       The cache data group	 * @param   boolean  $wrkarounds  True to use wrkarounds	 *	 * @return  boolean  True if cache stored	 * 	 * @since   11.1	 */	public function store($data, $id, $group = null, $wrkarounds = true)	{		$locktest = new stdClass;		$locktest->locked = null;		$locktest->locklooped = null;		$locktest = $this->cache->lock($id, $group);		if ($locktest->locked == false && $locktest->locklooped == true)		{			$locktest = $this->cache->lock($id, $group);		}		$sucess = $this->cache->store(serialize($data), $id, $group);		if ($locktest->locked == true)		{			$this->cache->unlock($id, $group);		}		return $sucess;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_quickicon * * @package     Joomla.Administrator * @subpackage  mod_quickicon * @since       1.6 */abstract class ModQuickIconHelper{	/**	 * Stack to hold buttons	 *	 * @since   1.6	 */	protected static $buttons = array();	/**	 * Helper method to return button list.	 *	 * This method returns the array by reference so it can be	 * used to add custom buttons or remove default ones.	 *	 * @param   JRegistry	The module parameters.	 *	 * @return  array  An array of buttons	 * @since   1.6	 */	public static function &getButtons($params)	{		$key = (string) $params;		if (!isset(self::$buttons[$key]))		{			$context = $params->get('context', 'mod_quickicon');			if ($context == 'mod_quickicon')			{				// Load mod_quickicon language file in case this method is called before rendering the module			JFactory::getLanguage()->load('mod_quickicon');				self::$buttons[$key] = array(					array(						'link' => JRoute::_('index.php?option=com_content&task=article.add'),						'image' => 'file-add',						'icon' => 'header/icon-48-article-add.png',						'text' => JText::_('MOD_QUICKICON_ADD_NEW_ARTICLE'),						'access' => array('core.manage', 'com_content', 'core.create', 'com_content', )					),					array(						'link' => JRoute::_('index.php?option=com_content'),						'image' => 'pencil-2',						'icon' => 'header/icon-48-article.png',						'text' => JText::_('MOD_QUICKICON_ARTICLE_MANAGER'),						'access' => array('core.manage', 'com_content')					),					array(						'link' => JRoute::_('index.php?option=com_categories&extension=com_content'),						'image' => 'folder',						'icon' => 'header/icon-48-category.png',						'text' => JText::_('MOD_QUICKICON_CATEGORY_MANAGER'),						'access' => array('core.manage', 'com_content')					),					array(						'link' => JRoute::_('index.php?option=com_media'),						'image' => 'pictures',						'icon' => 'header/icon-48-media.png',						'text' => JText::_('MOD_QUICKICON_MEDIA_MANAGER'),						'access' => array('core.manage', 'com_media')					),					array(						'link' => JRoute::_('index.php?option=com_menus'),						'image' => 'list-view',						'icon' => 'header/icon-48-menumgr.png',						'text' => JText::_('MOD_QUICKICON_MENU_MANAGER'),						'access' => array('core.manage', 'com_menus')					),					array(						'link' => JRoute::_('index.php?option=com_users'),						'image' => 'address',						'icon' => 'header/icon-48-user.png',						'text' => JText::_('MOD_QUICKICON_USER_MANAGER'),						'access' => array('core.manage', 'com_users')					),					array(						'link' => JRoute::_('index.php?option=com_modules'),						'image' => 'cube',						'icon' => 'header/icon-48-module.png',						'text' => JText::_('MOD_QUICKICON_MODULE_MANAGER'),						'access' => array('core.manage', 'com_modules')					),					array(						'link' => JRoute::_('index.php?option=com_installer'),						'image' => 'puzzle',						'icon' => 'header/icon-48-extension.png',						'text' => JText::_('MOD_QUICKICON_EXTENSION_MANAGER'),						'access' => array('core.manage', 'com_installer')					),					array(						'link' => JRoute::_('index.php?option=com_languages'),						'image' => 'comments-2',						'icon' => 'header/icon-48-language.png',						'text' => JText::_('MOD_QUICKICON_LANGUAGE_MANAGER'),						'access' => array('core.manage', 'com_languages')					),					array(						'link' => JRoute::_('index.php?option=com_config'),						'image' => 'cog',						'icon' => 'header/icon-48-config.png',						'text' => JText::_('MOD_QUICKICON_GLOBAL_CONFIGURATION'),						'access' => array('core.manage', 'com_config', 'core.admin', 'com_config')					),					array(						'link' => JRoute::_('index.php?option=com_templates'),						'image' => 'eye',						'icon' => 'header/icon-48-themes.png',						'text' => JText::_('MOD_QUICKICON_TEMPLATE_MANAGER'),						'access' => array('core.manage', 'com_templates')					),					array(						'link' => JRoute::_('index.php?option=com_admin&task=profile.edit&id='.JFactory::getUser()->id),						'image' => 'vcard',						'icon' => 'header/icon-48-user-profile.png',						'text' => JText::_('MOD_QUICKICON_PROFILE'),						'access' => true					),				);			}			else			{				self::$buttons[$key] = array();			}			// Include buttons defined by published quickicon plugins			JPluginHelper::importPlugin('quickicon');			$app = JFactory::getApplication();			$arrays = (array) $app->triggerEvent('onGetIcons', array($context));			foreach ($arrays as $response)			{				foreach ($response as $icon)				{					$default = array(						'link' => null,						'image' => 'cog',						'text' => null,						'access' => true					);					$icon = array_merge($default, $icon);					if (!is_null($icon['link']) && !is_null($icon['text']))					{						self::$buttons[$key][] = $icon;					}				}			}		}		return self::$buttons[$key];	}	/**	 * Get the alternate title for the module	 *	 * @param   JRegistry	The module parameters.	 * @param   object		The module.	 *	 * @return  string	The alternate title for the module.	 */	public static function getTitle($params, $module)	{		$key = $params->get('context', 'mod_quickicon') . '_title';		if (JFactory::getLanguage()->hasKey($key))		{			return JText::_($key);		}		else		{			return $module->title;		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Editors-xtd.pagebreak * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Editor Pagebreak buton * * @package     Joomla.Plugin * @subpackage  Editors-xtd.pagebreak * @since       1.5 */class PlgButtonPagebreak extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Display the button	 *	 * @return array A two element array of (imageName, textToInsert)	 */	public function onDisplay($name)	{		JHtml::_('behavior.modal');		$link = 'index.php?option=com_content&amp;view=article&amp;layout=pagebreak&amp;tmpl=component&amp;e_name='.$name;		$button = new JObject;		$button->modal = true;		$button->link  = $link;		$button->text  = JText::_('PLG_EDITORSXTD_PAGEBREAK_BUTTON_PAGEBREAK');		$button->name  = 'copy';		$button->options = "{handler: 'iframe', size: {x: 500, y: 300}}";		return $button;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';JHtml::_('bootstrap.tooltip');$lang	= JFactory::getLanguage();if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :		if (!isset($this->items[$this->parent->id][$id + 1]))		{			$class = ' class="last"';		}		?>		<div <?php echo $class; ?> >		<?php $class = ''; ?>			<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($item->id));?>">				<?php echo $this->escape($item->title); ?></a>				<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>					<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>">						<?php echo $item->numitems; ?>					</span>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) : ?>					<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>				<?php endif;?>			</h3>			<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>				<?php if ($item->description) : ?>					<div class="category-desc">						<?php echo JHtml::_('content.prepare', $item->description, '', 'com_content.categories'); ?>					</div>				<?php endif; ?>			<?php endif; ?>			<?php if (count($item->getChildren()) > 0) :?>				<div class="collapse fade" id="category-<?php echo $item->id;?>">				<?php				$this->items[$item->id] = $item->getChildren();				$this->parent = $item;				$this->maxLevelcat--;				echo $this->loadTemplate('items');				$this->parent = $item->getParent();				$this->maxLevelcat++;				?>				</div>			<?php endif; ?>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Form Field class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldTimezone extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Timezone';	/**	 * The list of available timezone groups to use.	 *	 * @var    array	 *	 * @since  11.1	 */	protected static $zones = array('Africa', 'America', 'Antarctica', 'Arctic', 'Asia', 'Atlantic', 'Australia', 'Europe', 'Indian', 'Pacific');	/**	 * Method to get the time zone field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   11.1	 */	protected function getGroups()	{		$groups = array();		$keyField = $this->element['key_field'] ? (string) $this->element['key_field'] : 'id';		$keyValue = $this->form->getValue($keyField);		// If the timezone is not set use the server setting.		if (strlen($this->value) == 0 && empty($keyValue))		{			$this->value = JFactory::getConfig()->get('offset');		}		// Get the list of time zones from the server.		$zones = DateTimeZone::listIdentifiers();		// Build the group lists.		foreach ($zones as $zone)		{			// Time zones not in a group we will ignore.			if (strpos($zone, '/') === false)			{				continue;			}			// Get the group/locale from the timezone.			list ($group, $locale) = explode('/', $zone, 2);			// Only use known groups.			if (in_array($group, self::$zones))			{				// Initialize the group if necessary.				if (!isset($groups[$group]))				{					$groups[$group] = array();				}				// Only add options where a locale exists.				if (!empty($locale))				{					$groups[$group][$zone] = JHtml::_('select.option', $zone, str_replace('_', ' ', $locale), 'value', 'text', false);				}			}		}		// Sort the group lists.		ksort($groups);		foreach ($groups as $zone => & $location)		{			sort($location);		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Module model. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesModelModule extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_MODULES';	/**	 * @var    string  The help screen key for the module.	 * @since  1.6	 */	protected $helpKey = 'JHELP_EXTENSIONS_MODULE_MANAGER_EDIT';	/**	 * @var    string  The help screen base URL for the module.	 * @since  1.6	 */	protected $helpURL;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('id');		if (!$pk)		{			if ($extensionId = (int) $app->getUserState('com_modules.add.module.extension_id'))			{				$this->setState('extension.id', $extensionId);			}		}		$this->setState('module.id', $pk);		// Load the parameters.		$params	= JComponentHelper::getParams('com_modules');		$this->setState('params', $params);	}	/**	 * Method to perform batch operations on a set of modules.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.7	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['position_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if (!empty($commands['position_id']))			{				if ($cmd == 'c')				{					$result = $this->batchCopy($commands['position_id'], $pks, $contexts);					if (is_array($result))					{						$pks = $result;					}					else					{						return false;					}				}				elseif ($cmd == 'm' && !$this->batchMove($commands['position_id'], $pks, $contexts))				{					return false;				}				$done = true;			}		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy modules to a new position or current.	 *	 * @param   integer  $value     The new value matching a module position.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchCopy($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		$newIds = array();		$i = 0;		foreach ($pks as $pk)		{			if ($user->authorise('core.create', 'com_modules'))			{				$table->reset();				$table->load($pk);				// Set the new position				if ($value == 'noposition')				{					$position = '';				}				elseif ($value == 'nochange')				{					$position = $table->position;				}				else				{					$position = $value;				}				$table->position = $position;				// Alter the title if necessary				$data = $this->generateNewTitle(0, $table->title, $table->position);				$table->title = $data['0'];				// Reset the ID because we are making a copy				$table->id = 0;				// Unpublish the new module				$table->published = 0;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}				// Get the new item ID				$newId = $table->get('id');				// Add the new ID to the array				$newIds[$i]	= $newId;				$i++;				// Now we need to handle the module assignments				$db = $this->getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('menuid'))					->from($db->quoteName('#__modules_menu'))					->where($db->quoteName('moduleid') . ' = ' . $pk);				$db->setQuery($query);				$menus = $db->loadColumn();				// Insert the new records into the table				foreach ($menus as $menu)				{					$query->clear()						->insert($db->quoteName('#__modules_menu'))						->columns(array($db->quoteName('moduleid'), $db->quoteName('menuid')))						->values($newId . ', ' . $menu);					$db->setQuery($query);					$db->execute();				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch move modules to a new position or current.	 *	 * @param   integer  $value     The new value matching a module position.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchMove($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', 'com_modules'))			{				$table->reset();				$table->load($pk);				// Set the new position				if ($value == 'noposition')				{					$position = '';				}				elseif ($value == 'nochange')				{					$position = $table->position;				}				else				{					$position = $value;				}				$table->position = $position;				// Alter the title if necessary				$data = $this->generateNewTitle(0, $table->title, $table->position);				$table->title = $data['0'];				// Unpublish the moved module				$table->published = 0;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to delete rows.	 *	 * @param   array  &$pks  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   1.6	 * @throws  Exception	 */	public function delete(&$pks)	{		$pks	= (array) $pks;		$user	= JFactory::getUser();		$table	= $this->getTable();		// Iterate the items to delete each one.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				// Access checks.				if (!$user->authorise('core.delete', 'com_modules') || $table->published != -2)				{					JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));					return;				}				if (!$table->delete($pk))				{					throw new Exception($table->getError());				}				else				{					// Delete the menu assignments					$db    = $this->getDbo();					$query = $db->getQuery(true)						->delete('#__modules_menu')						->where('moduleid=' . (int) $pk);					$db->setQuery($query);					$db->execute();				}				// Clear module cache				parent::cleanCache($table->module, $table->client_id);			}			else			{				throw new Exception($table->getError());			}		}		// Clear modules cache		$this->cleanCache();		return true;	}	/**	 * Method to duplicate modules.	 *	 * @param   array  &$pks  An array of primary key IDs.	 *	 * @return  boolean  True if successful.	 *	 * @since   1.6	 * @throws  Exception	 */	public function duplicate(&$pks)	{		$user	= JFactory::getUser();		$db		= $this->getDbo();		// Access checks.		if (!$user->authorise('core.create', 'com_modules'))		{			throw new Exception(JText::_('JERROR_CORE_CREATE_NOT_PERMITTED'));		}		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($table->load($pk, true))			{				// Reset the id to create a new record.				$table->id = 0;				// Alter the title.				$m = null;				if (preg_match('#\((\d+)\)$#', $table->title, $m))				{					$table->title = preg_replace('#\(\d+\)$#', '(' . ($m[1] + 1) . ')', $table->title);				}				else				{					$table->title .= ' (2)';				}				// Unpublish duplicate module				$table->published = 0;				if (!$table->check() || !$table->store())				{					throw new Exception($table->getError());				}				// $query = 'SELECT menuid'				//	. ' FROM #__modules_menu'				//	. ' WHERE moduleid = ' . (int) $pk				//	;				$query	= $db->getQuery(true)					->select('menuid')					->from('#__modules_menu')					->where('moduleid=' . (int) $pk);				$this->_db->setQuery($query);				$rows = $this->_db->loadColumn();				foreach ($rows as $menuid)				{					$tuples[] = '(' . (int) $table->id . ',' . (int) $menuid . ')';				}			}			else			{				throw new Exception($table->getError());			}		}		if (!empty($tuples))		{			// Module-Menu Mapping: Do it in one query			$query = 'INSERT INTO #__modules_menu (moduleid,menuid) VALUES ' . implode(',', $tuples);			$this->_db->setQuery($query);			try			{				$this->_db->execute();			}			catch (RuntimeException $e)			{				return JError::raiseWarning(500, $e->getMessage());			}		}		// Clear modules cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title.	 *	 * @param   integer  $category_id  The id of the category. Not used here.	 * @param   string   $title        The title.	 * @param   string   $position     The position.	 *	 * @return  array  Contains the modified title.	 *	 * @since   2.5	 */	protected function generateNewTitle($category_id, $title, $position)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('position' => $position, 'title' => $title)))		{			$title = JString::increment($title);		}		return array($title);	}	/**	 * Method to get the client object	 *	 * @return  void	 *	 * @since   1.6	 */	public function &getClient()	{		return $this->_client;	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  JForm  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item		= $this->getItem();			$clientId	= $item->client_id;			$module		= $item->module;		}		else		{			$clientId	= JArrayHelper::getValue($data, 'client_id');			$module		= JArrayHelper::getValue($data, 'module');		}		// These variables are used to add data from the plugin XML files.		$this->setState('item.client_id', $clientId);		$this->setState('item.module', $module);		// Get the form.		$form = $this->loadForm('com_modules.module', 'module', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$form->setFieldAttribute('position', 'client', $this->getState('item.client_id') == 0 ? 'site' : 'administrator');		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		$app = JFactory::getApplication();		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_modules.edit.module.data', array());		if (empty($data))		{			$data = $this->getItem();			// This allows us to inject parameter settings into a new module.			$params = $app->getUserState('com_modules.add.module.params');			if (is_array($params))			{				$data->set('params', $params);			}		}		$this->preprocessData('com_modules.module', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   1.6	 */	public function getItem($pk = null)	{		$pk	= (!empty($pk)) ? (int) $pk : (int) $this->getState('module.id');		$db	= $this->getDbo();		if (!isset($this->_cache[$pk]))		{			$false	= false;			// Get a row instance.			$table = $this->getTable();			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $error = $table->getError())			{				$this->setError($error);				return $false;			}			// Check if we are creating a new extension.			if (empty($pk))			{				if ($extensionId = (int) $this->getState('extension.id'))				{					$query	= $db->getQuery(true)						->select('element, client_id')						->from('#__extensions')						->where('extension_id = ' . $extensionId)						->where('type = ' . $db->quote('module'));					$db->setQuery($query);					try					{						$extension = $db->loadObject();					}					catch (RuntimeException $e)					{						$this->setError($e->getMessage);						return false;					}					if (empty($extension))					{						$this->setError('COM_MODULES_ERROR_CANNOT_FIND_MODULE');						return false;					}					// Extension found, prime some module values.					$table->module    = $extension->element;					$table->client_id = $extension->client_id;				}				else				{					$app = JFactory::getApplication();					$app->redirect(JRoute::_('index.php?option=com_modules&view=modules', false));					return false;				}			}			// Convert to the JObject before adding other data.			$properties = $table->getProperties(1);			$this->_cache[$pk] = JArrayHelper::toObject($properties, 'JObject');			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($table->params);			$this->_cache[$pk]->params = $registry->toArray();			// Determine the page assignment mode.			$db->setQuery(				'SELECT menuid' .				' FROM #__modules_menu' .				' WHERE moduleid = ' . $pk			);			$assigned = $db->loadColumn();			if (empty($pk))			{				// If this is a new module, assign to all pages.				$assignment = 0;			}			elseif (empty($assigned))			{				// For an existing module it is assigned to none.				$assignment = '-';			}			else			{				if ($assigned[0] > 0)				{					$assignment = +1;				}				elseif ($assigned[0] < 0)				{					$assignment = -1;				}				else				{					$assignment = 0;				}			}			$this->_cache[$pk]->assigned = $assigned;			$this->_cache[$pk]->assignment = $assignment;			// Get the module XML.			$client	= JApplicationHelper::getClientInfo($table->client_id);			$path	= JPath::clean($client->path . '/modules/' . $table->module . '/' . $table->module . '.xml');			if (file_exists($path))			{				$this->_cache[$pk]->xml = simplexml_load_file($path);			}			else			{				$this->_cache[$pk]->xml = null;			}		}		return $this->_cache[$pk];	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 *	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL);	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   string  $type    The table type to instantiate	 * @param   string  $prefix  A prefix for the table class name. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A database object	 *	 * @since   1.6	*/	public function getTable($type = 'Module', $prefix = 'JTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Prepare and sanitise the table prior to saving.	 *	 * @param   JTable  $table  The database object	 *	 * @return  void	 *	 * @since   1.6	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		$table->title		= htmlspecialchars_decode($table->title, ENT_QUOTES);		if (empty($table->id))		{			// Set the values			// $table->created = $date->toSql();		}		else		{			// Set the values			// $table->modified    = $date->toSql();			// $table->modified_by = $user->get('id');		}	}	/**	 * Method to preprocess the form	 *	 * @param   JForm   $form   A form object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error loading the form.	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		jimport('joomla.filesystem.path');		$lang     = JFactory::getLanguage();		$clientId = $this->getState('item.client_id');		$module   = $this->getState('item.module');		$client   = JApplicationHelper::getClientInfo($clientId);		$formFile = JPath::clean($client->path . '/modules/' . $module . '/' . $module . '.xml');		// Load the core and/or local language file(s).		$lang->load($module, $client->path, null, false, false)			||	$lang->load($module, $client->path . '/modules/' . $module, null, false, false)			||	$lang->load($module, $client->path, $lang->getDefault(), false, false)			||	$lang->load($module, $client->path . '/modules/' . $module, $lang->getDefault(), false, false);		if (file_exists($formFile))		{			// Get the module form.			if (!$form->loadFile($formFile, false, '//config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Attempt to load the xml file.			if (!$xml = simplexml_load_file($formFile))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}			// Get the help data from the XML file if present.			$help = $xml->xpath('/extension/help');			if (!empty($help))			{				$helpKey = trim((string) $help[0]['key']);				$helpURL = trim((string) $help[0]['url']);				$this->helpKey = $helpKey ? $helpKey : $this->helpKey;				$this->helpURL = $helpURL ? $helpURL : $this->helpURL;			}		}		// Load the default advanced params		JForm::addFormPath(JPATH_ADMINISTRATOR . '/components/com_modules/models/forms');		$form->loadFile('advanced', false);		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * Loads ContentHelper for filters before validating data.	 *	 * @param   object  $form   The form to validate against.	 * @param   array   $data   The data to validate.	 * @param   string  $group  The name of the group(defaults to null).	 *	 * @return  mixed  Array of filtered data if valid, false otherwise.	 *	 * @since   1.1	 */	public function validate($form, $data, $group = null)	{		require_once JPATH_ADMINISTRATOR . '/components/com_content/helpers/content.php';		return parent::validate($form, $data, $group);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$input      = JFactory::getApplication()->input;		$table		= $this->getTable();		$pk			= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('module.id');		$isNew		= true;		// Include the content modules for the onSave events.		JPluginHelper::importPlugin('extension');		// Load the row if saving an existing record.		if ($pk > 0)		{			$table->load($pk);			$isNew = false;		}		// Alter the title and published state for Save as Copy		if ($input->get('task') == 'save2copy')		{			$orig_data  = $input->post->get('jform', array(), 'array');			$orig_table = clone($this->getTable());			$orig_table->load((int) $orig_data['id']);			if ($data['title'] == $orig_table->title)			{				$data['title'] .= ' ' . JText::_('JGLOBAL_COPY');				$data['published'] = 0;			}		}		// Bind the data.		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Prepare the row for saving		$this->prepareTable($table);		// Check the data.		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_modules.module', &$table, $isNew));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data.		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Process the menu link mappings.		$assignment = isset($data['assignment']) ? $data['assignment'] : 0;		// Delete old module to menu item associations		// $db->setQuery(		//	'DELETE FROM #__modules_menu'.		//	' WHERE moduleid = '.(int) $table->id		// );		$db    = $this->getDbo();		$query = $db->getQuery(true)			->delete('#__modules_menu')			->where('moduleid = ' . (int) $table->id);		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If the assignment is numeric, then something is selected (otherwise it's none).		if (is_numeric($assignment))		{			// Variable is numeric, but could be a string.			$assignment = (int) $assignment;			// Logic check: if no module excluded then convert to display on all.			if ($assignment == -1 && empty($data['assigned']))			{				$assignment = 0;			}			// Check needed to stop a module being assigned to `All`			// and other menu items resulting in a module being displayed twice.			if ($assignment === 0)			{				// Assign new module to `all` menu item associations.				// $this->_db->setQuery(				//  'INSERT INTO #__modules_menu'.				//  ' SET moduleid = ' . (int) $table->id . ', menuid = 0'				// )				$query->clear()					->insert('#__modules_menu')					->columns(array($db->quoteName('moduleid'), $db->quoteName('menuid')))					->values((int) $table->id . ', 0');				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}			elseif (!empty($data['assigned']))			{				// Get the sign of the number.				$sign = $assignment < 0 ? -1 : +1;				// Preprocess the assigned array.				$tuples = array();				foreach ($data['assigned'] as &$pk)				{					$tuples[] = '(' . (int) $table->id . ',' . (int) $pk * $sign . ')';				}				$this->_db->setQuery(					'INSERT INTO #__modules_menu (moduleid, menuid) VALUES ' .					implode(',', $tuples)				);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}		}		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_modules.module', &$table, $isNew));		// Compute the extension id of this module in case the controller wants it.		$query	= $db->getQuery(true)			->select('extension_id')			->from('#__extensions AS e')			->join('LEFT', '#__modules AS m ON e.element = m.module')			->where('m.id = ' . (int) $table->id);		$db->setQuery($query);		try		{			$extensionId = $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return false;		}		$this->setState('module.extension_id', $extensionId);		$this->setState('module.id', $table->id);		// Clear modules cache		$this->cleanCache();		// Clean module cache		parent::cleanCache($table->module, $table->client_id);		return true;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object  $table  A record object.	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 *	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'client_id = ' . (int) $table->client_id;		$condition[] = 'position = ' . $this->_db->quote($table->position);		return $condition;	}	/**	 * Custom clean cache method for different clients	 *	 * @param   string   $group      The name of the plugin group to import (defaults to null).	 * @param   integer  $client_id  The client ID. [optional]	 *	 * @return  void	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_modules', $this->getClient());	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides a modal media selector including upload mechanism * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldMedia extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	protected $type = 'Media';	/**	 * The initialised state of the document object.	 *	 * @var    boolean	 * @since  1.6	 */	protected static $initialised = false;	/**	 * Method to get the field input markup for a media selector.	 * Use attributes to identify specific created_by and asset_id fields	 *	 * @return  string  The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		$assetField = $this->element['asset_field'] ? (string) $this->element['asset_field'] : 'asset_id';		$authorField = $this->element['created_by_field'] ? (string) $this->element['created_by_field'] : 'created_by';		$asset = $this->form->getValue($assetField) ? $this->form->getValue($assetField) : (string) $this->element['asset_id'];		if ($asset == '')		{			$asset = JFactory::getApplication()->input->get('option');		}		$link = (string) $this->element['link'];		if (!self::$initialised)		{			// Load the modal behavior script.			JHtml::_('behavior.modal');			// Build the script.			$script = array();			$script[] = '	function jInsertFieldValue(value, id) {';			$script[] = '		var old_value = document.id(id).value;';			$script[] = '		if (old_value != value) {';			$script[] = '			var elem = document.id(id);';			$script[] = '			elem.value = value;';			$script[] = '			elem.fireEvent("change");';			$script[] = '			if (typeof(elem.onchange) === "function") {';			$script[] = '				elem.onchange();';			$script[] = '			}';			$script[] = '			jMediaRefreshPreview(id);';			$script[] = '		}';			$script[] = '	}';			$script[] = '	function jMediaRefreshPreview(id) {';			$script[] = '		var value = document.id(id).value;';			$script[] = '		var img = document.id(id + "_preview");';			$script[] = '		if (img) {';			$script[] = '			if (value) {';			$script[] = '				img.src = "' . JURI::root() . '" + value;';			$script[] = '				document.id(id + "_preview_empty").setStyle("display", "none");';			$script[] = '				document.id(id + "_preview_img").setStyle("display", "");';			$script[] = '			} else { ';			$script[] = '				img.src = ""';			$script[] = '				document.id(id + "_preview_empty").setStyle("display", "");';			$script[] = '				document.id(id + "_preview_img").setStyle("display", "none");';			$script[] = '			} ';			$script[] = '		} ';			$script[] = '	}';			$script[] = '	function jMediaRefreshPreviewTip(tip)';			$script[] = '	{';			$script[] = '		var img = tip.getElement("img.media-preview");';			$script[] = '		tip.getElement("div.tip").setStyle("max-width", "none");';			$script[] = '		var id = img.getProperty("id");';			$script[] = '		id = id.substring(0, id.length - "_preview".length);';			$script[] = '		jMediaRefreshPreview(id);';			$script[] = '		tip.setStyle("display", "block");';			$script[] = '	}';			// Add the script to the document head.			JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));			self::$initialised = true;		}		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// The text field.		$html[] = '<div class="input-prepend input-append">';		// The Preview.		$preview = (string) $this->element['preview'];		$showPreview = true;		$showAsTooltip = false;		switch ($preview)		{			case 'no': // Deprecated parameter value			case 'false':			case 'none':				$showPreview = false;				break;			case 'yes': // Deprecated parameter value			case 'true':			case 'show':				break;			case 'tooltip':			default:				$showAsTooltip = true;				$options = array(					'onShow' => 'jMediaRefreshPreviewTip',				);				JHtml::_('behavior.tooltip', '.hasTipPreview', $options);				break;		}		if ($showPreview)		{			if ($this->value && file_exists(JPATH_ROOT . '/' . $this->value))			{				$src = JURI::root() . $this->value;			}			else			{				$src = '';			}			$width = isset($this->element['preview_width']) ? (int) $this->element['preview_width'] : 300;			$height = isset($this->element['preview_height']) ? (int) $this->element['preview_height'] : 200;			$style = '';			$style .= ($width > 0) ? 'max-width:' . $width . 'px;' : '';			$style .= ($height > 0) ? 'max-height:' . $height . 'px;' : '';			$imgattr = array(				'id' => $this->id . '_preview',				'class' => 'media-preview',				'style' => $style,			);			$img = JHtml::image($src, JText::_('JLIB_FORM_MEDIA_PREVIEW_ALT'), $imgattr);			$previewImg = '<div id="' . $this->id . '_preview_img"' . ($src ? '' : ' style="display:none"') . '>' . $img . '</div>';			$previewImgEmpty = '<div id="' . $this->id . '_preview_empty"' . ($src ? ' style="display:none"' : '') . '>'				. JText::_('JLIB_FORM_MEDIA_PREVIEW_EMPTY') . '</div>';			$html[] = '<div class="media-preview add-on">';			if ($showAsTooltip)			{				$tooltip = $previewImgEmpty . $previewImg;				$options = array(					'title' => JText::_('JLIB_FORM_MEDIA_PREVIEW_SELECTED_IMAGE'),					'text' => '<i class="icon-eye"></i>',					'class' => 'hasTipPreview'				);				$html[] = JHtml::tooltip($tooltip, $options);			}			else			{				$html[] = ' ' . $previewImgEmpty;				$html[] = ' ' . $previewImg;			}			$html[] = '</div>';		}		$html[] = '	<input type="text" class="input-small" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '" readonly="readonly"' . $attr . ' />';		$directory = (string) $this->element['directory'];		if ($this->value && file_exists(JPATH_ROOT . '/' . $this->value))		{			$folder = explode('/', $this->value);			$folder = array_diff_assoc($folder, explode('/', JComponentHelper::getParams('com_media')->get('image_path', 'images')));			array_pop($folder);			$folder = implode('/', $folder);		}		elseif (file_exists(JPATH_ROOT . '/' . JComponentHelper::getParams('com_media')->get('image_path', 'images') . '/' . $directory))		{			$folder = $directory;		}		else		{			$folder = '';		}		// The button.		if ($this->element['disabled'] != true)		{			JHtml::_('bootstrap.tooltip');			$html[] = '<a class="modal btn" title="' . JText::_('JLIB_FORM_BUTTON_SELECT') . '" href="'				. ($this->element['readonly'] ? ''				: ($link ? $link					: 'index.php?option=com_media&amp;view=images&amp;tmpl=component&amp;asset=' . $asset . '&amp;author='					. $this->form->getValue($authorField)) . '&amp;fieldid=' . $this->id . '&amp;folder=' . $folder) . '"'				. ' rel="{handler: \'iframe\', size: {x: 800, y: 500}}">';			$html[] = JText::_('JLIB_FORM_BUTTON_SELECT') . '</a><a class="btn hasTooltip" title="' . JText::_('JLIB_FORM_BUTTON_CLEAR') . '" href="#" onclick="';			$html[] = 'jInsertFieldValue(\'\', \'' . $this->id . '\');';			$html[] = 'return false;';			$html[] = '">';			$html[] = '<i class="icon-remove"></i></a>';		}		$html[] = '</div>';		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactModelContact extends JModelForm{	/**	 * @since   1.6	 */	protected $view_item = 'contact';	protected $_item = null;	/**	 * Model context string.	 *	 * @var		string	 */	protected $_context = 'com_contact.contact';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('site');		// Load state from the request.		$pk = $app->input->getInt('id');		$this->setState('contact.id', $pk);		// Load the parameters.		$params = $app->getParams();		$this->setState('params', $params);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_contact')) &&  (!$user->authorise('core.edit', 'com_contact'))){			$this->setState('filter.published', 1);			$this->setState('filter.archived', 2);		}	}	/**	 * Method to get the contact form.	 *	 * The base form is loaded from XML and then an event is fired	 *	 *	 * @param   array  $data		An optional array of data for the form to interrogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_contact.contact', 'contact', array('control' => 'jform', 'load_data' => true));		if (empty($form))		{			return false;		}		$id = $this->getState('contact.id');		$params = $this->getState('params');		$contact = $this->_item[$id];		$params->merge($contact->params);		if (!$params->get('show_email_copy', 0)){			$form->removeField('contact_email_copy');		}		return $form;	}	protected function loadFormData()	{		$data = (array) JFactory::getApplication()->getUserState('com_contact.contact.data', array());		$this->preprocessData('com_contact.contact', $data);		return $data;	}	/**	 * Gets a contact	 *	 * @param integer $pk  Id for the contact	 *	 * @return mixed Object or null	 */	public function &getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');		if ($this->_item === null)		{			$this->_item = array();		}		if (!isset($this->_item[$pk]))		{			try			{				$db = $this->getDbo();				$query = $db->getQuery(true);				//sqlsrv changes				$case_when = ' CASE WHEN ';				$case_when .= $query->charLength('a.alias', '!=', '0');				$case_when .= ' THEN ';				$a_id = $query->castAsChar('a.id');				$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');				$case_when .= ' ELSE ';				$case_when .= $a_id.' END as slug';				$case_when1 = ' CASE WHEN ';				$case_when1 .= $query->charLength('c.alias', '!=', '0');				$case_when1 .= ' THEN ';				$c_id = $query->castAsChar('c.id');				$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');				$case_when1 .= ' ELSE ';				$case_when1 .= $c_id.' END as catslug';				$query->select($this->getState('item.select', 'a.*') . ','.$case_when.','.$case_when1)					->from('#__contact_details AS a')				// Join on category table.					->select('c.title AS category_title, c.alias AS category_alias, c.access AS category_access')					->join('LEFT', '#__categories AS c on c.id = a.catid')				// Join over the categories to get parent category titles					->select('parent.title as parent_title, parent.id as parent_id, parent.path as parent_route, parent.alias as parent_alias')					->join('LEFT', '#__categories as parent ON parent.id = c.parent_id')					->where('a.id = ' . (int) $pk);				// Filter by start and end dates.				$nullDate = $db->quote($db->getNullDate());				$nowDate = $db->quote(JFactory::getDate()->toSql());				// Filter by published state.				$published = $this->getState('filter.published');				$archived = $this->getState('filter.archived');				if (is_numeric($published))				{					$query->where('(a.published = ' . (int) $published . ' OR a.published =' . (int) $archived . ')')						->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')						->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');				}				$db->setQuery($query);				$data = $db->loadObject();				if (empty($data))				{					JError::raiseError(404, JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'));				}				// Check for published state if filter set.				if (((is_numeric($published)) || (is_numeric($archived))) && (($data->published != $published) && ($data->published != $archived)))				{					JError::raiseError(404, JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'));				}				// Convert parameter fields to objects.				$registry = new JRegistry;				$registry->loadString($data->params);				$data->params = clone $this->getState('params');				$data->params->merge($registry);				$registry = new JRegistry;				$registry->loadString($data->metadata);				$data->metadata = $registry;				$data->tags = new JHelperTags;				$data->tags->getItemTags('com_contact.contact', $data->id);				// Compute access permissions.				if ($access = $this->getState('filter.access')) {					// If the access filter has been set, we already know this user can view.					$data->params->set('access-view', true);				}				else {					// If no access filter is set, the layout takes some responsibility for display of limited information.					$user = JFactory::getUser();					$groups = $user->getAuthorisedViewLevels();					if ($data->catid == 0 || $data->category_access === null)					{						$data->params->set('access-view', in_array($data->access, $groups));					}					else {						$data->params->set('access-view', in_array($data->access, $groups) && in_array($data->category_access, $groups));					}				}				$this->_item[$pk] = $data;			}			catch (Exception $e)			{				$this->setError($e);				$this->_item[$pk] = false;			}		}		if ($this->_item[$pk])		{			if ($extendedData = $this->getContactQuery($pk))			{				$this->_item[$pk]->articles = $extendedData->articles;				$this->_item[$pk]->profile = $extendedData->profile;			}		}		return $this->_item[$pk];	}	protected function getContactQuery($pk = null)	{		// TODO: Cache on the fingerprint of the arguments		$db		= $this->getDbo();		$user	= JFactory::getUser();		$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');		$query	= $db->getQuery(true);		if ($pk)		{			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id.' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('cc.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('cc.id');			$case_when1 .= $query->concatenate(array($c_id, 'cc.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id.' END as catslug';			$query->select(				'a.*, cc.access as category_access, cc.title as category_name, '				. $case_when . ',' . $case_when1			)				->from('#__contact_details AS a')				->join('INNER', '#__categories AS cc on cc.id = a.catid')				->where('a.id = ' . (int) $pk);			$published = $this->getState('filter.published');			$archived = $this->getState('filter.archived');			if (is_numeric($published))			{				$query->where('a.published IN (1,2)')					->where('cc.published IN (1,2)');			}			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN ('.$groups.')');			try			{				$db->setQuery($query);				$result = $db->loadObject();				if (empty($result))				{					throw new Exception(JText::_('COM_CONTACT_ERROR_CONTACT_NOT_FOUND'), 404);				}			// If we are showing a contact list, then the contact parameters take priority			// So merge the contact parameters with the merged parameters				if ($this->getState('params')->get('show_contact_list'))				{					$registry = new JRegistry;					$registry->loadString($result->params);					$this->getState('params')->merge($registry);				}			}			catch (Exception $e)			{				$this->setError($e);				return false;			}			if ($result)			{				$user	= JFactory::getUser();				$groups	= implode(',', $user->getAuthorisedViewLevels());				//get the content by the linked user				$query	= $db->getQuery(true)					->select('a.id')					->select('a.title')					->select('a.state')					->select('a.access')					->select('a.created');				// SQL Server changes				$case_when = ' CASE WHEN ';				$case_when .= $query->charLength('a.alias', '!=', '0');				$case_when .= ' THEN ';				$a_id = $query->castAsChar('a.id');				$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');				$case_when .= ' ELSE ';				$case_when .= $a_id.' END as slug';				$case_when1 = ' CASE WHEN ';				$case_when1 .= $query->charLength('c.alias', '!=', '0');				$case_when1 .= ' THEN ';				$c_id = $query->castAsChar('c.id');				$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');				$case_when1 .= ' ELSE ';				$case_when1 .= $c_id.' END as catslug';				$query->select($case_when1 . ',' . $case_when)					->from('#__content as a')					->join('LEFT', '#__categories as c on a.catid=c.id')					->where('a.created_by = ' . (int) $result->user_id)					->where('a.access IN ('. $groups.')')					->order('a.state DESC, a.created DESC');				// filter per language if plugin published				if (JLanguageMultilang::isEnabled())				{					$query->where(('a.created_by = ' . (int) $result->user_id) AND ('a.language=' . $db->quote(JFactory::getLanguage()->getTag()) . ' OR a.language=' . $db->quote('*')));				}				if (is_numeric($published))				{					$query->where('a.state IN (1,2)');				}				$db->setQuery($query, 0, 10);				$articles = $db->loadObjectList();				$result->articles = $articles;				//get the profile information for the linked user				require_once JPATH_ADMINISTRATOR.'/components/com_users/models/user.php';				$userModel = JModelLegacy::getInstance('User', 'UsersModel', array('ignore_request' => true));				$data = $userModel->getItem((int) $result->user_id);				JPluginHelper::importPlugin('user');				$form = new JForm('com_users.profile');				// Get the dispatcher.				$dispatcher	= JEventDispatcher::getInstance();				// Trigger the form preparation event.				$dispatcher->trigger('onContentPrepareForm', array($form, $data));				// Trigger the data preparation event.				$dispatcher->trigger('onContentPrepareData', array('com_users.profile', $data));				// Load the data into the form after the plugins have operated.				$form->bind($data);				$result->profile = $form;				$this->contact = $result;				return $result;			}		}	}	/**	 * Increment the hit counter for the contact.	 *	 * @param   int  $pk  Optional primary key of the article to increment.	 *	 * @return  boolean  True if successful; false otherwise and internal error set.	 *	 * @since   3.0	 */	public function hit($pk = 0)	{		$input = JFactory::getApplication()->input;		$hitcount = $input->getInt('hitcount', 1);		if ($hitcount)		{			$pk = (!empty($pk)) ? $pk : (int) $this->getState('contact.id');			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__contact_details' .				' SET hits = hits + 1' .				' WHERE id = '.(int) $pk			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class JFormFieldCategoryParent extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.6	 */	protected $type = 'CategoryParent';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		// Initialise variables.		$options = array();		$name = (string) $this->element['name'];		// Let's get the id for the current item, either category or content item.		$jinput = JFactory::getApplication()->input;		// For categories the old category is the category id 0 for new category.		if ($this->element['parent'])		{			$oldCat = $jinput->get('id', 0);			$oldParent = $this->form->getValue($name);		}		else			// For items the old category is the category they are in when opened or 0 if new.		{			$thisItem = $jinput->get('id', 0);			$oldCat = $this->form->getValue($name);		}		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level')			->from('#__categories AS a')			->join('LEFT', $db->quoteName('#__categories') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Filter by the type		if ($extension = $this->form->getValue('extension'))		{			$query->where('(a.extension = ' . $db->quote($extension) . ' OR a.parent_id = 0)');		}		if ($this->element['parent'])		{			// Prevent parenting to children of this item.			if ($id = $this->form->getValue('id'))			{				$query->join('LEFT', $db->quoteName('#__categories') . ' AS p ON p.id = ' . (int) $id)					->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');				$rowQuery = $db->getQuery(true);				$rowQuery->select('a.id AS value, a.title AS text, a.level, a.parent_id')					->from('#__categories AS a')					->where('a.id = ' . (int) $id);				$db->setQuery($rowQuery);				$row = $db->loadObject();			}		}		$query->where('a.published IN (0,1)')			->group('a.id, a.title, a.level, a.lft, a.rgt, a.extension, a.parent_id')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			// Translate ROOT			if ($options[$i]->level == 0)			{				$options[$i]->text = JText::_('JGLOBAL_ROOT_PARENT');			}			$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;		}		// Get the current user object.		$user = JFactory::getUser();		// For new items we want a list of categories you are allowed to create in.		if ($oldCat == 0)		{			foreach ($options as $i => $option)			{				// To take save or create in a category you need to have create rights for that category				// unless the item is already in that category.				// Unset the option if the user isn't authorised for it. In this field assets are always categories.				if ($user->authorise('core.create', $extension . '.category.' . $option->value) != true)				{					unset($options[$i]);				}			}		}		// If you have an existing category id things are more complex.		else		{			//$categoryOld = $this->form->getValue($name);			foreach ($options as $i => $option)			{				// If you are only allowed to edit in this category but not edit.state, you should not get any				// option to change the category parent for a category or the category for a content item,				// but you should be able to save in that category.				if ($user->authorise('core.edit.state', $extension . '.category.' . $oldCat) != true)				{					if ($option->value != $oldCat)					{						echo 'y';						unset($options[$i]);					}				}				// However, if you can edit.state you can also move this to another category for which you have				// create permission and you should also still be able to save in the current category.				elseif				(($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					&& $option->value != $oldCat				)				{					echo 'x';					unset($options[$i]);				}			}		}		if (isset($row) && !isset($options[0]))		{			if ($row->parent_id == '1')			{				$parent = new stdClass;				$parent->text = JText::_('JGLOBAL_ROOT_PARENT');				array_unshift($options, $parent);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP factory class. * * @package     Joomla.Platform * @subpackage  HTTP * @since       12.1 */class JHttpFactory{	/**	 * method to recieve Http instance.	 *	 * @param   JRegistry  $options   Client options object.	 * @param   mixed      $adapters  Adapter (string) or queue of adapters (array) to use for communication.	 *	 * @return  JHttp      Joomla Http class	 *	 * @since   12.1	 */	public static function getHttp(JRegistry $options = null, $adapters = null)	{		if (empty($options))		{			$options = new JRegistry;		}		return new JHttp($options, self::getAvailableDriver($options, $adapters));	}	/**	 * Finds an available http transport object for communication	 *	 * @param   JRegistry  $options  Option for creating http transport object	 * @param   mixed      $default  Adapter (string) or queue of adapters (array) to use	 *	 * @return  JHttpTransport Interface sub-class	 *	 * @since   12.1	 */	public static function getAvailableDriver(JRegistry $options, $default = null)	{		if (is_null($default))		{			$availableAdapters = self::getHttpTransports();		}		else		{			settype($default, 'array');			$availableAdapters = $default;		}		// Check if there is available http transport adapters		if (!count($availableAdapters))		{			return false;		}		foreach ($availableAdapters as $adapter)		{			$class = 'JHttpTransport' . ucfirst($adapter);			if ($class::isSupported())			{				return new $class($options);			}		}		return false;	}	/**	 * Get the http transport handlers	 *	 * @return  array  An array of available transport handlers	 *	 * @since   12.1	 */	public static function getHttpTransports()	{		$names = array();		$iterator = new DirectoryIterator(__DIR__ . '/transport');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if ($file->isFile() && substr($fileName, strrpos($fileName, '.') + 1) == 'php')			{				$names[] = substr($fileName, 0, strrpos($fileName, '.'));			}		}		return $names;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');$input     = JFactory::getApplication()->input;$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectNewsfeed');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds&layout=modal&tmpl=component&function='.$function);?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<fieldset class="filter clearfix">		<div class="btn-toolbar">			<div class="btn-group pull-left">				<label for="filter_search">					<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>				</label>				<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>">					<i class="icon-search"></i></button>				<button type="button" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();">					<i class="icon-remove"></i></button>			</div>				<input onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('0', '<?php echo $this->escape(addslashes(JText::_('COM_NEWSFEEDS_SELECT_A_FEED'))); ?>', null, null);" class="btn" type="button" value="<?php echo JText::_('COM_NEWSFEEDS_FIELD_VALUE_NONE'); ?>" />			<div class="clearfix"></div>		</div>		<hr class="hr-condensed" />		<div class="filters">			<select name="filter_access" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<select name="filter_published" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds', array('filter.language' => array('*', $this->state->get('filter.forcedLanguage')))), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />			<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<select name="filter_language" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<?php endif; ?>		</div>	</fieldset>	<table class="table table-striped table-condensed">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td align="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Manage Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerControllerManage extends JControllerLegacy{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unpublish', 'publish');		$this->registerTask('publish',   'publish');	}	/**	 * Enable/Disable an extension (if supported).	 *	 * @return  void	 *	 * @since   1.6	 */	public function publish()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('publish' => 1, 'unpublish' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_INSTALLER_ERROR_NO_EXTENSIONS_SELECTED'));		}		else		{			// Get the model.			$model	= $this->getModel('manage');			// Change the state of the records.			if (!$model->publish($ids, $value))			{				JError::raiseWarning(500, implode('<br />', $model->getErrors()));			}			else			{				if ($value == 1)				{					$ntext = 'COM_INSTALLER_N_EXTENSIONS_PUBLISHED';				}				elseif ($value == 0)				{					$ntext = 'COM_INSTALLER_N_EXTENSIONS_UNPUBLISHED';				}				$this->setMessage(JText::plural($ntext, count($ids)));			}		}		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}	/**	 * Remove an extension (Uninstall).	 *	 * @return  void	 *	 * @since   1.5	 */	public function remove()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$eid   = $this->input->get('cid', array(), 'array');		$model = $this->getModel('manage');		JArrayHelper::toInteger($eid, array());		$result = $model->remove($eid);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}	/**	 * Refreshes the cached metadata about an extension.	 *	 * Useful for debugging and testing purposes when the XML file might change.	 *	 * @return  void	 *	 * @since   1.6	 */	public function refresh()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$uid   = $this->input->get('cid', array(), 'array');		$model = $this->getModel('manage');		JArrayHelper::toInteger($uid, array());		$result = $model->refresh($uid);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Database session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @since       11.1 */class JSessionStorageDatabase extends JSessionStorage{	/**	 * Read the data for a particular session identifier from the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		try		{			// Get the session data from the database table.			$query = $db->getQuery(true)				->select($db->quoteName('data'))			->from($db->quoteName('#__session'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($id));			$db->setQuery($query);			$result = (string) $db->loadResult();			$result = str_replace('\0\0\0', chr(0) . '*' . chr(0), $result);			return $result;		}		catch (Exception $e)		{			return false;		}	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id    The session identifier.	 * @param   string  $data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $data)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		$data = str_replace(chr(0) . '*' . chr(0), '\0\0\0', $data);		try		{			$query = $db->getQuery(true)				->update($db->quoteName('#__session'))			->set($db->quoteName('data') . ' = ' . $db->quote($data))			->set($db->quoteName('time') . ' = ' . $db->quote((int) time()))			->where($db->quoteName('session_id') . ' = ' . $db->quote($id));			// Try to update the session data in the database table.			$db->setQuery($query);			if (!$db->execute())			{				return false;			}			/* Since $db->execute did not throw an exception, so the query was successful.			Either the data changed, or the data was identical.			In either case we are done.			*/			return true;		}		catch (Exception $e)		{			return false;		}	}	/**	 * Destroy the data for a particular session identifier in the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		try		{			$query = $db->getQuery(true)				->delete($db->quoteName('#__session'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($id));			// Remove a session from the database.			$db->setQuery($query);			return (boolean) $db->execute();		}		catch (Exception $e)		{			return false;		}	}	/**	 * Garbage collect stale sessions from the SessionHandler backend.	 *	 * @param   integer  $lifetime  The maximum age of a session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc($lifetime = 1440)	{		// Get the database connection object and verify its connected.		$db = JFactory::getDbo();		// Determine the timestamp threshold with which to purge old sessions.		$past = time() - $lifetime;		try		{			$query = $db->getQuery(true)				->delete($db->quoteName('#__session'))			->where($db->quoteName('time') . ' < ' . $db->quote((int) $past));			// Remove expired sessions from the database.			$db->setQuery($query);			return (boolean) $db->execute();		}		catch (Exception $e)		{			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_users')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}JLoader::register('UsersHelper', __DIR__ . '/helpers/users.php');$controller	= JControllerLegacy::getInstance('Users');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class for managing HTTP sessions * * Provides access to session-state values as well as session-level * settings and lifetime management methods. * Based on the standard PHP session handling mechanism it provides * more advanced features such as expire timeouts. * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSession implements IteratorAggregate{	/**	 * Internal state.	 * One of 'inactive'|'active'|'expired'|'destroyed'|'error'	 *	 * @var    string	 * @see    getState()	 * @since  11.1	 */	protected $_state = 'inactive';	/**	 * Maximum age of unused session in minutes	 *	 * @var    string	 * @since  11.1	 */	protected $_expire = 15;	/**	 * The session store object.	 *	 * @var    JSessionStorage	 * @since  11.1	 */	protected $_store = null;	/**	 * Security policy.	 * List of checks that will be done.	 *	 * Default values:	 * - fix_browser	 * - fix_adress	 *	 * @var array	 * @since  11.1	 */	protected $_security = array('fix_browser');	/**	 * Force cookies to be SSL only	 * Default  false	 *	 * @var    boolean	 * @since  11.1	 */	protected $_force_ssl = false;	/**	 * @var    JSession  JSession instances container.	 * @since  11.3	 */	protected static $instance;	/**	 * @var    string	 * @since  12.2	 */	protected $storeName;	/**	 * Holds the JInput object	 *	 * @var    JInput	 * @since  12.2	 */	private $_input = null;	/**	 * Holds the event dispatcher object	 *	 * @var    JEventDispatcher	 * @since  12.2	 */	private $_dispatcher = null;	/**	 * Constructor	 *	 * @param   string  $store    The type of storage for the session.	 * @param   array   $options  Optional parameters	 *	 * @since   11.1	 */	public function __construct($store = 'none', array $options = array())	{		// Need to destroy any existing sessions started with session.auto_start		if (session_id())		{			session_unset();			session_destroy();		}		// Disable transparent sid support		ini_set('session.use_trans_sid', '0');		// Only allow the session ID to come from cookies and nothing else.		ini_set('session.use_only_cookies', '1');		// Create handler		$this->_store = JSessionStorage::getInstance($store, $options);		$this->storeName = $store;		// Set options		$this->_setOptions($options);		$this->_setCookieParams();		$this->_state = 'inactive';	}	/**	 * Magic method to get read-only access to properties.	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  mixed   The value of the property	 *	 * @since   12.2	 */	public function __get($name)	{		if ($name === 'storeName')		{			return $this->$name;		}		if ($name === 'state' || $name === 'expire')		{			$property = '_' . $name;			return $this->$property;		}	}	/**	 * Returns the global Session object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $handler  The type of session handler.	 * @param   array   $options  An array of configuration options.	 *	 * @return  JSession  The Session object.	 *	 * @since   11.1	 */	public static function getInstance($handler, $options)	{		if (!is_object(self::$instance))		{			self::$instance = new JSession($handler, $options);		}		return self::$instance;	}	/**	 * Get current state of session	 *	 * @return  string  The session state	 *	 * @since   11.1	 */	public function getState()	{		return $this->_state;	}	/**	 * Get expiration time in minutes	 *	 * @return  integer  The session expiration time in minutes	 *	 * @since   11.1	 */	public function getExpire()	{		return $this->_expire;	}	/**	 * Get a session token, if a token isn't set yet one will be generated.	 *	 * Tokens are used to secure forms from spamming attacks. Once a token	 * has been generated the system will check the post request to see if	 * it is present, if not it will invalidate the session.	 *	 * @param   boolean  $forceNew  If true, force a new token to be created	 *	 * @return  string  The session token	 *	 * @since   11.1	 */	public function getToken($forceNew = false)	{		$token = $this->get('session.token');		// Create a token		if ($token === null || $forceNew)		{			$token = $this->_createToken(12);			$this->set('session.token', $token);		}		return $token;	}	/**	 * Method to determine if a token exists in the session. If not the	 * session will be set to expired	 *	 * @param   string   $tCheck       Hashed token to be verified	 * @param   boolean  $forceExpire  If true, expires the session	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function hasToken($tCheck, $forceExpire = true)	{		// Check if a token exists in the session		$tStored = $this->get('session.token');		// Check token		if (($tStored !== $tCheck))		{			if ($forceExpire)			{				$this->_state = 'expired';			}			return false;		}		return true;	}	/**	 * Method to determine a hash for anti-spoofing variable names	 *	 * @param   boolean  $forceNew  If true, force a new token to be created	 *	 * @return  string  Hashed var name	 *	 * @since   11.1	 */	public static function getFormToken($forceNew = false)	{		$user    = JFactory::getUser();		$session = JFactory::getSession();		// TODO: Decouple from legacy JApplication class.		if (is_callable(array('JApplication', 'getHash')))		{			$hash = JApplication::getHash($user->get('id', 0) . $session->getToken($forceNew));		}		else		{			$hash = md5(JFactory::getApplication()->get('secret') . $user->get('id', 0) . $session->getToken($forceNew));		}		return $hash;	}	/**	 * Retrieve an external iterator.	 *	 * @return  ArrayIterator  Return an ArrayIterator of $_SESSION.	 *	 * @since   12.2	 */	public function getIterator()	{		return new ArrayIterator($_SESSION);	}	/**	 * Checks for a form token in the request.	 *	 * Use in conjunction with JHtml::_('form.token') or JSession::getFormToken.	 *	 * @param   string  $method  The request method in which to look for the token key.	 *	 * @return  boolean  True if found and valid, false otherwise.	 *	 * @since   12.1	 */	public static function checkToken($method = 'post')	{		$token = self::getFormToken();		$app = JFactory::getApplication();		if (!$app->input->$method->get($token, '', 'alnum'))		{			$session = JFactory::getSession();			if ($session->isNew())			{				// Redirect to login screen.				$app->redirect(JRoute::_('index.php'), JText::_('JLIB_ENVIRONMENT_SESSION_EXPIRED'));				$app->close();			}			else			{				return false;			}		}		else		{			return true;		}	}	/**	 * Get session name	 *	 * @return  string  The session name	 *	 * @since   11.1	 */	public function getName()	{		if ($this->_state === 'destroyed')		{			// @TODO : raise error			return null;		}		return session_name();	}	/**	 * Get session id	 *	 * @return  string  The session name	 *	 * @since   11.1	 */	public function getId()	{		if ($this->_state === 'destroyed')		{			// @TODO : raise error			return null;		}		return session_id();	}	/**	 * Get the session handlers	 *	 * @return  array  An array of available session handlers	 *	 * @since   11.1	 */	public static function getStores()	{		$connectors = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/storage');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JSessionStorage' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$connectors[] = str_ireplace('.php', '', $fileName);			}		}		return $connectors;	}	/**	 * Shorthand to check if the session is active	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function isActive()	{		return (bool) ($this->_state == 'active');	}	/**	 * Check whether this session is currently created	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function isNew()	{		$counter = $this->get('session.counter');		return (bool) ($counter === 1);	}	/**	 * Check whether this session is currently created	 *	 * @param   JInput            $input       JInput object for the session to use.	 * @param   JEventDispatcher  $dispatcher  Dispatcher object for the session to use.	 *	 * @return  void.	 *	 * @since   12.2	 */	public function initialise(JInput $input, JEventDispatcher $dispatcher = null)	{		$this->_input      = $input;		$this->_dispatcher = $dispatcher;	}	/**	 * Get data from the session store	 *	 * @param   string  $name       Name of a variable	 * @param   mixed   $default    Default value of a variable if not set	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  mixed  Value of a variable	 *	 * @since   11.1	 */	public function get($name, $default = null, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active' && $this->_state !== 'expired')		{			// @TODO :: generated error here			$error = null;			return $error;		}		if (isset($_SESSION[$namespace][$name]))		{			return $_SESSION[$namespace][$name];		}		return $default;	}	/**	 * Set data into the session store.	 *	 * @param   string  $name       Name of a variable.	 * @param   mixed   $value      Value of a variable.	 * @param   string  $namespace  Namespace to use, default to 'default'.	 *	 * @return  mixed  Old value of a variable.	 *	 * @since   11.1	 */	public function set($name, $value = null, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		$old = isset($_SESSION[$namespace][$name]) ? $_SESSION[$namespace][$name] : null;		if (null === $value)		{			unset($_SESSION[$namespace][$name]);		}		else		{			$_SESSION[$namespace][$name] = $value;		}		return $old;	}	/**	 * Check whether data exists in the session store	 *	 * @param   string  $name       Name of variable	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  boolean  True if the variable exists	 *	 * @since   11.1	 */	public function has($name, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions.		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		return isset($_SESSION[$namespace][$name]);	}	/**	 * Unset data from the session store	 *	 * @param   string  $name       Name of variable	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  mixed   The value from session or NULL if not set	 *	 * @since   11.1	 */	public function clear($name, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		$value = null;		if (isset($_SESSION[$namespace][$name]))		{			$value = $_SESSION[$namespace][$name];			unset($_SESSION[$namespace][$name]);		}		return $value;	}	/**	 * Start a session.	 *	 * @return  void	 *	 * @since   12.2	 */	public function start()	{		if ($this->_state === 'active')		{			return;		}		$this->_start();		$this->_state = 'active';		// Initialise the session		$this->_setCounter();		$this->_setTimers();		// Perform security checks		$this->_validate();		if ($this->_dispatcher instanceof JEventDispatcher)		{			$this->_dispatcher->trigger('onAfterSessionStart');		}	}	/**	 * Start a session.	 *	 * Creates a session (or resumes the current one based on the state of the session)	 *	 * @return  boolean  true on success	 *	 * @since   11.1	 */	protected function _start()	{		// Start session if not started		if ($this->_state === 'restart')		{			session_regenerate_id(true);		}		else		{			$session_name = session_name();			// Get the JInputCookie object			$cookie = $this->_input->cookie;			if (is_null($cookie->get($session_name)))			{				$session_clean = $this->_input->get($session_name, false, 'string');				if ($session_clean)				{					session_id($session_clean);					$cookie->set($session_name, '', time() - 3600);				}			}		}		/**		 * Write and Close handlers are called after destructing objects since PHP 5.0.5.		 * Thus destructors can use sessions but session handler can't use objects.		 * So we are moving session closure before destructing objects.		 *		 * Replace with session_register_shutdown() when dropping compatibility with PHP 5.3		 */		register_shutdown_function('session_write_close');		session_cache_limiter('none');		session_start();		return true;	}	/**	 * Frees all session variables and destroys all data registered to a session	 *	 * This method resets the $_SESSION variable and destroys all of the data associated	 * with the current session in its storage (file or DB). It forces new session to be	 * started after this method is called. It does not unset the session cookie.	 *	 * @return  boolean  True on success	 *	 * @see     session_destroy()	 * @see     session_unset()	 * @since   11.1	 */	public function destroy()	{		// Session was already destroyed		if ($this->_state === 'destroyed')		{			return true;		}		/*		 * In order to kill the session altogether, such as to log the user out, the session id		 * must also be unset. If a cookie is used to propagate the session id (default behavior),		 * then the session cookie must be deleted.		 */		if (isset($_COOKIE[session_name()]))		{			$config = JFactory::getConfig();			$cookie_domain = $config->get('cookie_domain', '');			$cookie_path = $config->get('cookie_path', '/');			setcookie(session_name(), '', time() - 42000, $cookie_path, $cookie_domain);		}		session_unset();		session_destroy();		$this->_state = 'destroyed';		return true;	}	/**	 * Restart an expired or locked session.	 *	 * @return  boolean  True on success	 *	 * @see     destroy	 * @since   11.1	 */	public function restart()	{		$this->destroy();		if ($this->_state !== 'destroyed')		{			// @TODO :: generated error here			return false;		}		// Re-register the session handler after a session has been destroyed, to avoid PHP bug		$this->_store->register();		$this->_state = 'restart';		// Regenerate session id		session_regenerate_id(true);		$this->_start();		$this->_state = 'active';		$this->_validate();		$this->_setCounter();		return true;	}	/**	 * Create a new session and copy variables from the old one	 *	 * @return  boolean $result true on success	 *	 * @since   11.1	 */	public function fork()	{		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return false;		}		// Save values		$values = $_SESSION;		// Keep session config		$cookie = session_get_cookie_params();		// Kill session		session_destroy();		// Re-register the session store after a session has been destroyed, to avoid PHP bug		$this->_store->register();		// Restore config		session_set_cookie_params($cookie['lifetime'], $cookie['path'], $cookie['domain'], $cookie['secure'], true);		// Restart session with new id		session_regenerate_id(true);		session_start();		return true;	}	/**	 * Writes session data and ends session	 *	 * Session data is usually stored after your script terminated without the need	 * to call JSession::close(), but as session data is locked to prevent concurrent	 * writes only one script may operate on a session at any time. When using	 * framesets together with sessions you will experience the frames loading one	 * by one due to this locking. You can reduce the time needed to load all the	 * frames by ending the session as soon as all changes to session variables are	 * done.	 *	 * @return  void	 *	 * @see     session_write_close()	 * @since   11.1	 */	public function close()	{		session_write_close();	}	/**	 * Set session cookie parameters	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _setCookieParams()	{		$cookie = session_get_cookie_params();		if ($this->_force_ssl)		{			$cookie['secure'] = true;		}		$config = JFactory::getConfig();		if ($config->get('cookie_domain', '') != '')		{			$cookie['domain'] = $config->get('cookie_domain');		}		if ($config->get('cookie_path', '') != '')		{			$cookie['path'] = $config->get('cookie_path');		}		session_set_cookie_params($cookie['lifetime'], $cookie['path'], $cookie['domain'], $cookie['secure'], true);	}	/**	 * Create a token-string	 *	 * @param   integer  $length  Length of string	 *	 * @return  string  Generated token	 *	 * @since   11.1	 */	protected function _createToken($length = 32)	{		static $chars = '0123456789abcdef';		$max = strlen($chars) - 1;		$token = '';		$name = session_name();		for ($i = 0; $i < $length; ++$i)		{			$token .= $chars[(rand(0, $max))];		}		return md5($token . $name);	}	/**	 * Set counter of session usage	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setCounter()	{		$counter = $this->get('session.counter', 0);		++$counter;		$this->set('session.counter', $counter);		return true;	}	/**	 * Set the session timers	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setTimers()	{		if (!$this->has('session.timer.start'))		{			$start = time();			$this->set('session.timer.start', $start);			$this->set('session.timer.last', $start);			$this->set('session.timer.now', $start);		}		$this->set('session.timer.last', $this->get('session.timer.now'));		$this->set('session.timer.now', time());		return true;	}	/**	 * Set additional session options	 *	 * @param   array  $options  List of parameter	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setOptions(array $options)	{		// Set name		if (isset($options['name']))		{			session_name(md5($options['name']));		}		// Set id		if (isset($options['id']))		{			session_id($options['id']);		}		// Set expire time		if (isset($options['expire']))		{			$this->_expire = $options['expire'];		}		// Get security options		if (isset($options['security']))		{			$this->_security = explode(',', $options['security']);		}		if (isset($options['force_ssl']))		{			$this->_force_ssl = (bool) $options['force_ssl'];		}		// Sync the session maxlifetime		ini_set('session.gc_maxlifetime', $this->_expire);		return true;	}	/**	 * Do some checks for security reason	 *	 * - timeout check (expire)	 * - ip-fixiation	 * - browser-fixiation	 *	 * If one check failed, session data has to be cleaned.	 *	 * @param   boolean  $restart  Reactivate session	 *	 * @return  boolean  True on success	 *	 * @see     http://shiflett.org/articles/the-truth-about-sessions	 * @since   11.1	 */	protected function _validate($restart = false)	{		// Allow to restart a session		if ($restart)		{			$this->_state = 'active';			$this->set('session.client.address', null);			$this->set('session.client.forwarded', null);			$this->set('session.client.browser', null);			$this->set('session.token', null);		}		// Check if session has expired		if ($this->_expire)		{			$curTime = $this->get('session.timer.now', 0);			$maxTime = $this->get('session.timer.last', 0) + $this->_expire;			// Empty session variables			if ($maxTime < $curTime)			{				$this->_state = 'expired';				return false;			}		}		// Record proxy forwarded for in the session in case we need it later		if (isset($_SERVER['HTTP_X_FORWARDED_FOR']))		{			$this->set('session.client.forwarded', $_SERVER['HTTP_X_FORWARDED_FOR']);		}		// Check for client address		if (in_array('fix_adress', $this->_security) && isset($_SERVER['REMOTE_ADDR']))		{			$ip = $this->get('session.client.address');			if ($ip === null)			{				$this->set('session.client.address', $_SERVER['REMOTE_ADDR']);			}			elseif ($_SERVER['REMOTE_ADDR'] !== $ip)			{				$this->_state = 'error';				return false;			}		}		// Check for clients browser		if (in_array('fix_browser', $this->_security) && isset($_SERVER['HTTP_USER_AGENT']))		{			$browser = $this->get('session.client.browser');			if ($browser === null)			{				$this->set('session.client.browser', $_SERVER['HTTP_USER_AGENT']);			}			elseif ($_SERVER['HTTP_USER_AGENT'] !== $browser)			{				// @todo remove code: 				$this->_state	=	'error';				// @todo remove code: 				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a plugin. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.5 */class PluginsViewPlugin extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$canDo = PluginsHelper::getActions();		JToolbarHelper::title(JText::sprintf('COM_PLUGINS_MANAGER_PLUGIN', JText::_($this->item->name)), 'plugin');		// If not checked out, can save the item.		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('plugin.apply');			JToolbarHelper::save('plugin.save');		}		JToolbarHelper::cancel('plugin.cancel', 'JTOOLBAR_CLOSE');		JToolbarHelper::divider();		// Get the help information for the plugin item.		$lang = JFactory::getLanguage();		$help = $this->get('Help');		if ($lang->hasKey($help->url))		{			$debug = $lang->setDebug(false);			$url = JText::_($help->url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($help->key, false, $url);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */abstract class JHtmlModules{	/**	 * Builds an array of template options	 *	 * @param   integer  $clientId  The client id	 * @param   string   $state     The state of the template	 *	 * @return  array	 */	public static function templates($clientId = 0, $state = '')	{		$options   = array();		$templates = ModulesHelper::getTemplates($clientId, $state);		foreach ($templates as $template)		{			$options[]	= JHtml::_('select.option', $template->element, $template->name);		}		return $options;	}	/**	 * Builds an array of template type options	 *	 * @return  array	 */	public static function types()	{		$options = array();		$options[] = JHtml::_('select.option', 'user', 'COM_MODULES_OPTION_POSITION_USER_DEFINED');		$options[] = JHtml::_('select.option', 'template', 'COM_MODULES_OPTION_POSITION_TEMPLATE_DEFINED');		return $options;	}	/**	 * Builds an array of template state options	 *	 * @return  array	 */	public static function templateStates()	{		$options = array();		$options[] = JHtml::_('select.option', '1', 'JENABLED');		$options[] = JHtml::_('select.option', '0', 'JDISABLED');		return $options;	}	/**	 * Returns a published state on a grid	 *	 * @param   integer  $value     The state value.	 * @param   integer  $i         The row index	 * @param   boolean  $enabled   An optional setting for access control on the action.	 * @param   string   $checkbox  An optional prefix for checkboxes.	 *	 * @return  string        The Html code	 *	 * @see     JHtmlJGrid::state	 * @since   1.7.1	 */	public static function state($value, $i, $enabled = true, $checkbox = 'cb')	{		$states	= array(			1 => array(				'unpublish',				'COM_MODULES_EXTENSION_PUBLISHED_ENABLED',				'COM_MODULES_HTML_UNPUBLISH_ENABLED',				'COM_MODULES_EXTENSION_PUBLISHED_ENABLED',				true,				'publish',				'publish'			),			0 => array(				'publish',				'COM_MODULES_EXTENSION_UNPUBLISHED_ENABLED',				'COM_MODULES_HTML_PUBLISH_ENABLED',				'COM_MODULES_EXTENSION_UNPUBLISHED_ENABLED',				true,				'unpublish',				'unpublish'			),			-1 => array(				'unpublish',				'COM_MODULES_EXTENSION_PUBLISHED_DISABLED',				'COM_MODULES_HTML_UNPUBLISH_DISABLED',				'COM_MODULES_EXTENSION_PUBLISHED_DISABLED',				true,				'warning',				'warning'			),			-2 => array(				'publish',				'COM_MODULES_EXTENSION_UNPUBLISHED_DISABLED',				'COM_MODULES_HTML_PUBLISH_DISABLED',				'COM_MODULES_EXTENSION_UNPUBLISHED_DISABLED',				true,				'unpublish',				'unpublish'			),		);		return JHtml::_('jgrid.state', $states, $value, $i, 'modules.', $enabled, true, $checkbox);	}	/**	 * Display a batch widget for the module position selector.	 *	 * @param   integer  $clientId  The client ID	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function positions($clientId)	{		// Create the copy/move options.		$options = array(			JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),			JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE'))		);		// Create the batch selector to change select the category by which to move or copy.		$lines = array(			'<label id="batch-choose-action-lbl" for="batch-choose-action">',			JText::_('COM_MODULES_BATCH_POSITION_LABEL'),			'</label>',			'<div id="batch-choose-action" class="control-group">',			'<select name="batch[position_id]" class="inputbox" id="batch-position-id">',			'<option value="">' . JText::_('JSELECT') . '</option>',			'<option value="nochange">' . JText::_('COM_MODULES_BATCH_POSITION_NOCHANGE') . '</option>',			'<option value="noposition">' . JText::_('COM_MODULES_BATCH_POSITION_NOPOSITION') . '</option>',			JHtml::_('select.options',	self::positionList($clientId)),			'</select>',			'</div>', '<div id="batch-move-copy" class="control-group radio">',			JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'),			'</div>'		);		return implode("\n", $lines);	}	/**	 * Method to get the field options.	 *	 * @param   integer  $clientId  The client ID	 *	 * @return  array  The field option objects.	 *	 * @since   2.5	 */	public static function positionList($clientId = 0)	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('DISTINCT(position) as value')			->select('position as text')			->from($db->quoteName('#__modules'))			->where($db->quoteName('client_id') . ' = ' . (int) $clientId)			->order('position');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pop the first item off the array if it's blank		if (count($options))		{			if (strlen($options[0]->text) < 1)			{				array_shift($options);			}		}		return $options;	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);if (file_exists(__DIR__ . '/defines.php')){	include_once __DIR__ . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', __DIR__);	require_once JPATH_BASE.'/includes/defines.php';}require_once JPATH_BASE.'/includes/framework.php';require_once JPATH_BASE.'/includes/helper.php';require_once JPATH_BASE.'/includes/toolbar.php';// Mark afterLoad in the profiler.JDEBUG ? $_PROFILER->mark('afterLoad') : null;// Instantiate the application.$app = JFactory::getApplication('administrator');// Initialise the application.$app->initialise(	array('language' => $app->getUserState('application.lang')));// Mark afterIntialise in the profiler.JDEBUG ? $_PROFILER->mark('afterInitialise') : null;// Route the application.$app->route();// Mark afterRoute in the profiler.JDEBUG ? $_PROFILER->mark('afterRoute') : null;// Dispatch the application.$app->dispatch();// Mark afterDispatch in the profiler.JDEBUG ? $_PROFILER->mark('afterDispatch') : null;// Render the application.$app->render();// Mark afterRender in the profiler.JDEBUG ? $_PROFILER->mark('afterRender') : null;// Return the response.echo $app;
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class JFormFieldMenuOrdering extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.7	 */	protected $type = 'MenuOrdering';	/**	 * Method to get the list of siblings in a menu.	 * The method requires that parent be set.	 *	 * @return  array  The field option objects or false if the parent field has not been set	 * @since   1.7	 */	protected function getOptions()	{		$options = array();		// Get the parent		$parent_id = $this->form->getValue('parent_id', 0);		if (empty($parent_id))		{			return false;		}		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text')			->from('#__menu AS a')			->where('a.published >= 0')			->where('a.parent_id =' . (int) $parent_id);		if ($menuType = $this->form->getValue('menutype'))		{			$query->where('a.menutype = ' . $db->quote($menuType));		}		else		{			$query->where('a.menutype != ' . $db->quote(''));		}		$query->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$options = array_merge(			array(array('value' => '-1', 'text' => JText::_('COM_MENUS_ITEM_FIELD_ORDERING_VALUE_FIRST'))),			$options,			array(array('value' => '-2', 'text' => JText::_('COM_MENUS_ITEM_FIELD_ORDERING_VALUE_LAST')))		);		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to get the field input markup	 *	 * @return  string  The field input markup.	 * @since   1.7	 */	protected function getInput()	{		if ($this->form->getValue('id', 0) == 0)		{			return '<span class="readonly">' . JText::_('COM_MENUS_ITEM_FIELD_ORDERING_TEXT') . '</span>';		}		else		{			return parent::getInput();		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of available cache handlers * * @package     Joomla.Platform * @subpackage  Form * @see         JCache * @since       11.1 */class JFormFieldCacheHandler extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'CacheHandler';	/**	 * Method to get the field options.	 *	 * @return  array    The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Convert to name => name array.		foreach (JCache::getStores() as $store)		{			$options[] = JHtml::_('select.option', $store, JText::_('JLIB_FORM_VALUE_CACHE_' . $store), 'value', 'text');		}		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $this UsersViewNote */JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');?><script language="javascript" type="text/javascript">Joomla.submitbutton = function(task){	if (task == 'note.cancel' || document.formvalidator.isValid(document.id('note-form')))	{		Joomla.submitform(task, document.getElementById('note-form'));	}}</script><form action="<?php echo JRoute::_('index.php?option=com_users&view=note&id='.(int) $this->item->id);?>" method="post" name="adminForm" id="note-form" class="form-validate form-horizontal">		<fieldset class="adminform">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('subject'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('subject'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('user_id'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('user_id'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('catid'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('catid'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('review_time'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('review_time'); ?>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('body'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('body'); ?>				</div>			</div>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'source.cancel' || document.formvalidator.isValid(document.id('source-form')))		{			<?php echo $this->form->getField('source')->save(); ?>			Joomla.submitform(task, document.getElementById('source-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_templates&layout=edit'); ?>" method="post" name="adminForm" id="source-form" class="form-validate">	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<fieldset class="adminform">		<legend><?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_FILENAME', $this->source->filename, $this->template->element); ?></legend>		<?php echo $this->form->getLabel('source'); ?>		<div class="clr"></div>		<div class="editor-border">		<?php echo $this->form->getInput('source'); ?>		</div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</fieldset>	<?php echo $this->form->getInput('extension_id'); ?>	<?php echo $this->form->getInput('filename'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo = UsersHelper::getActions();// Get the form fieldsets.$fieldsets = $this->form->getFieldsets();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'user.cancel' || document.formvalidator.isValid(document.id('user-form')))		{			Joomla.submitform(task, document.getElementById('user-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_users&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="user-form" class="form-validate form-horizontal" enctype="multipart/form-data">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('COM_USERS_USER_ACCOUNT_DETAILS', true)); ?>				<?php foreach ($this->form->getFieldset('user_details') as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php if ($this->grouplist) : ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'groups', JText::_('COM_USERS_ASSIGNED_GROUPS', true)); ?>					<?php echo $this->loadTemplate('groups'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>			<?php			foreach ($fieldsets as $fieldset) :				if ($fieldset->name == 'user_details') :					continue;				endif;			?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $fieldset->name, JText::_($fieldset->label, true)); ?>				<?php foreach ($this->form->getFieldset($fieldset->name) as $field) : ?>					<?php if ($field->hidden) : ?>						<div class="control-group">							<div class="controls">								<?php echo $field->input; ?>							</div>						</div>					<?php else: ?>						<div class="control-group">							<div class="control-label">								<?php echo $field->label; ?>							</div>							<div class="controls">								<?php echo $field->input; ?>							</div>						</div>					<?php endif; ?>				<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT_ADMINISTRATOR . '/helpers/content.php';/** * Item Model for an Article. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentModelArticle extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_CONTENT';	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   11.1	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$extension = JFactory::getApplication()->input->get('option', '');		$user = JFactory::getUser();		if (!$user->authorise('core.create', $extension . '.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->title);			$table->title = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			//$table->ordering	= 1;			// Get the featured state			$featured = $table->featured;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;			// Check if the article was featured and update the #__content_frontpage table			if ($featured == 1)			{				$db = $this->getDbo();				$query = $db->getQuery(true)					->insert($db->quoteName('#__content_frontpage'))					->values($newId . ', 0');				$db->setQuery($query);				$db->execute();			}		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->state != -2)			{				return;			}			$user = JFactory::getUser();			return $user->authorise('core.delete', 'com_content.article.' . (int) $record->id);		}	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check for existing article.		if (!empty($record->id))		{			return $user->authorise('core.edit.state', 'com_content.article.' . (int) $record->id);		}		// New article, so check against the category.		elseif (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_content.category.' . (int) $record->catid);		}		// Default to component settings if neither article nor category known.		else		{			return parent::canEditState('com_content');		}	}	/**	 * Prepare and sanitise the table data prior to saving.	 *	 * @param   JTable    A JTable object.	 *	 * @return  void	 * @since   1.6	 */	protected function prepareTable($table)	{		// Set the publish date to now		$db = $this->getDbo();		if ($table->state == 1 && (int) $table->publish_up == 0)		{			$table->publish_up = JFactory::getDate()->toSql();		}		if ($table->state == 1 && intval($table->publish_down) == 0)		{			$table->publish_down = $db->getNullDate();		}		// Increment the content version number.		$table->version++;		// Reorder the articles within the category so the new article is first		if (empty($table->id))		{			$table->reorder('catid = ' . (int) $table->catid . ' AND state >= 0');		}	}	/**	 * Returns a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 *	 * @return  JTable    A database object	 */	public function getTable($type = 'Content', $prefix = 'JTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get a single record.	 *	 * @param   integer    The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($pk = null)	{		if ($item = parent::getItem($pk))		{			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($item->attribs);			$item->attribs = $registry->toArray();			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($item->metadata);			$item->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($item->images);			$item->images = $registry->toArray();			// Convert the urls field to an array.			$registry = new JRegistry;			$registry->loadString($item->urls);			$item->urls = $registry->toArray();			$item->articletext = trim($item->fulltext) != '' ? $item->introtext . "<hr id=\"system-readmore\" />" . $item->fulltext : $item->introtext;			if (!empty($item->id))			{				$item->tags = new JHelperTags;				$item->tags->getTagIds($item->id, 'com_content.article');				$item->metadata['tags'] = $item->tags;			}		}		// Load associated content items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$item->associations = array();			if ($item->id != null)			{				$associations = JLanguageAssociations::getAssociations('com_content', '#__content', 'com_content.item', $item->id);				foreach ($associations as $tag => $association)				{					$item->associations[$tag] = $association->id;				}			}		}		return $item;	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_content.article', 'article', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		$jinput = JFactory::getApplication()->input;		// The front end calls this model and uses a_id to avoid id clashes so we need to check for that first.		if ($jinput->get('a_id'))		{			$id = $jinput->get('a_id', 0);		}		// The back end uses id so we use that the rest of the time and set it to 0 by default.		else		{			$id = $jinput->get('id', 0);		}		// Determine correct permissions to check.		if ($this->getState('article.id'))		{			$id = $this->getState('article.id');			// Existing record. Can only edit in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit');			// Existing record. Can only edit own articles in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit.own');		}		else		{			// New record. Can only create in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.create');		}		$user = JFactory::getUser();		// Check for existing article.		// Modify the form based on Edit State access controls.		if ($id != 0 && (!$user->authorise('core.edit.state', 'com_content.article.' . (int) $id))			|| ($id == 0 && !$user->authorise('core.edit.state', 'com_content'))		)		{			// Disable fields for display.			$form->setFieldAttribute('featured', 'disabled', 'true');			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			$form->setFieldAttribute('state', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is an article you can edit.			$form->setFieldAttribute('featured', 'filter', 'unset');			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');			$form->setFieldAttribute('state', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$app = JFactory::getApplication();		$data = $app->getUserState('com_content.edit.article.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('article.id') == 0)			{				$data->set('catid', $app->input->getInt('catid', $app->getUserState('com_content.articles.filter.category_id')));			}		}		$this->preprocessData('com_content.article', $data);		return $data;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$app = JFactory::getApplication();		if (isset($data['images']) && is_array($data['images']))		{			$registry = new JRegistry;			$registry->loadArray($data['images']);			$data['images'] = (string) $registry;		}		if (isset($data['urls']) && is_array($data['urls']))		{			$registry = new JRegistry;			$registry->loadArray($data['urls']);			$data['urls'] = (string) $registry;		}		// Alter the title for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($title, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['title']);			$data['title'] = $title;			$data['alias'] = $alias;			$data['state'] = 0;		}		if (parent::save($data))		{			if (isset($data['featured']))			{				$this->featured($this->getState($this->getName() . '.id'), $data['featured']);			}			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$id = (int) $this->getState($this->getName() . '.id');				$item = $this->getItem($id);				// Adding self to the association				$associations = $data['associations'];				foreach ($associations as $tag => $id)				{					if (empty($id))					{						unset($associations[$tag]);					}				}				// Detecting all item menus				$all_language = $item->language == '*';				if ($all_language && !empty($associations))				{					JError::raiseNotice(403, JText::_('COM_CONTENT_ERROR_ALL_LANGUAGE_ASSOCIATED'));				}				$associations[$item->language] = $item->id;				// Deleting old association for these items				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->delete('#__associations')					->where('context=' . $db->quote('com_content.item'))					->where('id IN (' . implode(',', $associations) . ')');				$db->setQuery($query);				$db->execute();				if ($error = $db->getErrorMsg())				{					$this->setError($error);					return false;				}				if (!$all_language && count($associations))				{					// Adding new association for these items					$key = md5(json_encode($associations));					$query->clear()						->insert('#__associations');					foreach ($associations as $tag => $id)					{						$query->values($id . ',' . $db->quote('com_content.item') . ',' . $db->quote($key));					}					$db->setQuery($query);					$db->execute();					if ($error = $db->getErrorMsg())					{						$this->setError($error);						return false;					}				}			}			return true;		}		return false;	}	/**	 * Method to toggle the featured setting of articles.	 *	 * @param   array    The ids of the items to toggle.	 * @param   integer  The value to toggle to.	 *	 * @return  boolean  True on success.	 */	public function featured($pks, $value = 0)	{		// Sanitize the ids.		$pks = (array) $pks;		JArrayHelper::toInteger($pks);		if (empty($pks))		{			$this->setError(JText::_('COM_CONTENT_NO_ITEM_SELECTED'));			return false;		}		$table = $this->getTable('Featured', 'ContentTable');		try		{			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__content' .					' SET featured = ' . (int) $value .					' WHERE id IN (' . implode(',', $pks) . ')'			);			$db->execute();			if ((int) $value == 0)			{				// Adjust the mapping table.				// Clear the existing features settings.				$db->setQuery(					'DELETE FROM #__content_frontpage' .						' WHERE content_id IN (' . implode(',', $pks) . ')'				);				$db->execute();			}			else			{				// first, we find out which of our new featured articles are already featured.				$query = $db->getQuery(true)					->select('f.content_id')					->from('#__content_frontpage AS f')					->where('content_id IN (' . implode(',', $pks) . ')');				//echo $query;				$db->setQuery($query);				$old_featured = $db->loadColumn();				// we diff the arrays to get a list of the articles that are newly featured				$new_featured = array_diff($pks, $old_featured);				// Featuring.				$tuples = array();				foreach ($new_featured as $pk)				{					$tuples[] = '(' . $pk . ', 0)';				}				if (count($tuples))				{					$db->setQuery(						'INSERT INTO #__content_frontpage (' . $db->quoteName('content_id') . ', ' . $db->quoteName('ordering') . ')' .							' VALUES ' . implode(',', $tuples)					);					$db->execute();				}			}		}		catch (Exception $e)		{			$this->setError($e->getMessage());			return false;		}		$table->reorder();		$this->cleanCache();		return true;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object    A record object.	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = ' . (int) $table->catid;		return $condition;	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since    3.0	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Association content items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			// force to array (perhaps move to $this->loadFormData())			$data = (array) $data;			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_CONTENT_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if (empty($data['language']) || $tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'modal_article');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');				}			}			if ($add)			{				$form->load($addform, false);			}		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Custom clean the cache of com_content and content modules	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_content');		parent::cleanCache('mod_articles_archive');		parent::cleanCache('mod_articles_categories');		parent::cleanCache('mod_articles_category');		parent::cleanCache('mod_articles_latest');		parent::cleanCache('mod_articles_news');		parent::cleanCache('mod_articles_popular');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('metadata');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-options');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">			<?php if ($name == 'jmetadata') : // Include the real fields in this panel. ?>				<li><?php echo $this->form->getLabel('metadesc'); ?>				<?php echo $this->form->getInput('metadesc'); ?></li>				<li><?php echo $this->form->getLabel('metakey'); ?>				<?php echo $this->form->getInput('metakey'); ?></li>				<li><?php echo $this->form->getLabel('xreference'); ?>				<?php echo $this->form->getInput('xreference'); ?></li>			<?php endif; ?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Library installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterLibrary extends JAdapterInstance{	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path where to find language files.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent->setPath('source', JPATH_PLATFORM . '/' . $this->parent->extension->element);		}		$this->manifest = $this->parent->getManifest();		$extension = 'lib_' . strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd'));		$name = strtolower((string) $this->manifest->libraryname);		$lang = JFactory::getLanguage();		$source = $path ? $path : JPATH_PLATFORM . "/$name";		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension's name		$name = JFilterInput::getInstance()->clean((string) $this->manifest->name, 'string');		$element = str_replace('.xml', '', basename($this->parent->getPath('manifest')));		$this->set('name', $name);		$this->set('element', $element);		$db = $this->parent->getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('library'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		$result = $db->loadResult();		if ($result)		{			// Already installed, can we upgrade?			if ($this->parent->isOverwrite() || $this->parent->isUpgrade())			{				// We can upgrade, so uninstall the old one				$installer = new JInstaller; // we don't want to compromise this instance!				$installer->uninstall('library', $result);			}			else			{				// Abort the install, no upgrade possible				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_LIB_INSTALL_ALREADY_INSTALLED'));				return false;			}		}		// Get the library's description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Set the installation path		$group = (string) $this->manifest->libraryname;		if (!$group)		{			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_LIB_INSTALL_NOFILE'));			return false;		}		else		{			$this->parent->setPath('extension_root', JPATH_PLATFORM . '/' . implode(DIRECTORY_SEPARATOR, explode('/', $group)));		}		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// If the library directory does not exist, let's create it		$created = false;		if (!file_exists($this->parent->getPath('extension_root')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_root')))			{				$this->parent->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_LIB_INSTALL_FAILED_TO_CREATE_DIRECTORY', $this->parent->getPath('extension_root'))				);				return false;			}		}		/*		 * If we created the library directory and will want to remove it if we		 * have to roll back the installation, let's add it to the installation		 * step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_root')));		}		// Copy all necessary files		if ($this->parent->parseFiles($this->manifest->files, -1) === false)		{			// Install failed, roll back changes			$this->parent->abort();			return false;		}		// Parse optional tags		$this->parent->parseLanguages($this->manifest->languages);		$this->parent->parseMedia($this->manifest->media);		// Extension Registration		$row = JTable::getInstance('extension');		$row->name = $this->get('name');		$row->type = 'library';		$row->element = $this->get('element');		// There is no folder for libraries		$row->folder = '';		$row->enabled = 1;		$row->protected = 0;		$row->access = 1;		$row->client_id = 0;		$row->params = $this->parent->getParams();		// Custom data		$row->custom_data = '';		$row->manifest_cache = $this->parent->generateManifestCache();		if (!$row->store())		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_LIB_INSTALL_ROLLBACK', $db->stderr(true)));			return false;		}		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $this->parent->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/libraries/' . basename($this->parent->getPath('manifest'));		if (!$this->parent->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_LIB_INSTALL_COPY_SETUP'));			return false;		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		// Since this is just files, an update removes old files		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extensions name		$name = (string) $this->manifest->name;		$name = JFilterInput::getInstance()->clean($name, 'string');		$element = str_replace('.xml', '', basename($this->parent->getPath('manifest')));		$this->set('name', $name);		$this->set('element', $element);		// We don't want to compromise this instance!		$installer = new JInstaller;		$db = $this->parent->getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('library'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		$result = $db->loadResult();		if ($result)		{			// Already installed, which would make sense			$installer->uninstall('library', $result);		}		// Now create the new files		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   string  $id  The id of the library to uninstall.	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$retval = true;		// First order of business will be to load the module object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id) || !strlen($row->element))		{			JLog::add(JText::_('ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the library we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_WARNCORELIBRARY'), JLog::WARNING, 'jerror');			return false;		}		$manifestFile = JPATH_MANIFESTS . '/libraries/' . $row->element . '.xml';		// Because libraries may not have their own folders we cannot use the standard method of finding an installation manifest		if (file_exists($manifestFile))		{			$manifest = new JInstallerManifestLibrary($manifestFile);			// Set the library root path			$this->parent->setPath('extension_root', JPATH_PLATFORM . '/' . $manifest->libraryname);			$xml = simplexml_load_file($manifestFile);			// If we cannot load the XML file return null			if (!$xml)			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_LOAD_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			// Check for a valid XML root tag.			if ($xml->getName() != 'extension')			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_INVALID_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			$this->parent->removeFiles($xml->files, -1);			JFile::delete($manifestFile);		}		else		{			// Remove this row entry since its invalid			$row->delete($row->extension_id);			unset($row);			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_UNINSTALL_INVALID_NOTFOUND_MANIFEST'), JLog::WARNING, 'jerror');			return false;		}		// TODO: Change this so it walked up the path backwards so we clobber multiple empties		// If the folder is empty, let's delete it		if (JFolder::exists($this->parent->getPath('extension_root')))		{			if (is_dir($this->parent->getPath('extension_root')))			{				$files = JFolder::files($this->parent->getPath('extension_root'));				if (!count($files))				{					JFolder::delete($this->parent->getPath('extension_root'));				}			}		}		$this->parent->removeFiles($xml->media);		$this->parent->removeFiles($xml->languages);		$row->delete($row->extension_id);		unset($row);		return $retval;	}	/**	 * Custom discover method	 *	 * @return  array  JExtension  list of extensions available	 *	 * @since   3.1	 */	public function discover()	{		$results = array();		$file_list = JFolder::files(JPATH_MANIFESTS . '/libraries', '\.xml$');		foreach ($file_list as $file)		{			$manifest_details = JInstaller::parseXMLInstallFile(JPATH_MANIFESTS . '/libraries/' . $file);			$file = JFile::stripExt($file);			$extension = JTable::getInstance('extension');			$extension->set('type', 'library');			$extension->set('client_id', 0);			$extension->set('element', $file);			$extension->set('folder', '');			$extension->set('name', $file);			$extension->set('state', -1);			$extension->set('manifest_cache', json_encode($manifest_details));			$extension->set('params', '{}');			$results[] = $extension;		}		return $results;	}	/**	 * Custom discover_install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function discover_install()	{		/* Libraries are a strange beast; they are actually references to files		 * There are two parts to a library which are disjunct in their locations		 * 1) The manifest file (stored in /JPATH_MANIFESTS/libraries)		 * 2) The actual files (stored in /JPATH_PLATFORM/libraryname)		 * Thus installation of a library is the process of dumping files		 * in two different places. As such it is impossible to perform		 * any operation beyond mere registration of a library under the presumption		 * that the files exist in the appropriate location so that come uninstall		 * time they can be adequately removed.		 */		$manifestPath = JPATH_MANIFESTS . '/libraries/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = 1;		$this->parent->extension->params = $this->parent->getParams();		if ($this->parent->extension->store())		{			return true;		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean  Result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$manifestPath = JPATH_MANIFESTS . '/libraries/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_LIB_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterLibrary instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerLibrary extends JInstallerAdapterLibrary{}
<?php/** * @package     Joomla.Legacy * @subpackage  Error * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// Error Definition: Illegal Optionsconst JERROR_ILLEGAL_OPTIONS = 1;// Error Definition: Callback does not existconst JERROR_CALLBACK_NOT_CALLABLE = 2;// Error Definition: Illegal Handlerconst JERROR_ILLEGAL_MODE = 3;/** * Error Handling Class * * This class is inspired in design and concept by patErrorManager <http://www.php-tools.net> * * patErrorManager contributors include: * - gERD Schaufelberger	<gerd@php-tools.net> * - Sebastian Mordziol	<argh@php-tools.net> * - Stephan Schmidt		<scst@php-tools.net> * * @package     Joomla.Legacy * @subpackage  Error * @since       11.1 * @deprecated  12.1   Use PHP Exception */abstract class JError{	/**	 * Legacy error handling marker	 *	 * @var    boolean  True to enable legacy error handling using JError, false to use exception handling.  This flag	 *                  is present to allow an easy transition into exception handling for code written against the	 *                  existing JError API in Joomla.	 * @since  11.1	 */	public static $legacy = false;	/**	 * Array of message levels	 *	 * @var    array	 * @since  11.1	 */	protected static $levels = array(E_NOTICE => 'Notice', E_WARNING => 'Warning', E_ERROR => 'Error');	protected static $handlers = array(		E_NOTICE => array('mode' => 'ignore'),		E_WARNING => array('mode' => 'ignore'),		E_ERROR => array('mode' => 'ignore')	);	protected static $stack = array();	/**	 * Method to determine if a value is an exception object.	 *	 * @param   mixed  $object  Object to check.	 *	 * @return  boolean  True if argument is an exception, false otherwise.	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function isError($object)	{		JLog::add('JError::isError() is deprecated.', JLog::WARNING, 'deprecated');		return $object instanceof Exception;	}	/**	 * Method for retrieving the last exception object in the error stack	 *	 * @param   boolean  $unset  True to remove the error from the stack.	 *	 * @return  mixed  Last exception object in the error stack or boolean false if none exist	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function getError($unset = false)	{		JLog::add('JError::getError() is deprecated.', JLog::WARNING, 'deprecated');		if (!isset(self::$stack[0]))		{			return false;		}		if ($unset)		{			$error = array_shift(self::$stack);		}		else		{			$error = &self::$stack[0];		}		return $error;	}	/**	 * Method for retrieving the exception stack	 *	 * @return  array  Chronological array of errors that have been stored during script execution	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function getErrors()	{		JLog::add('JError::getErrors() is deprecated.', JLog::WARNING, 'deprecated');		return self::$stack;	}	/**	 * Method to add non-JError thrown JExceptions to the JError stack for debugging purposes	 *	 * @param   JException  &$e  Add an exception to the stack.	 *	 * @return  void	 *	 * @since       11.1	 * @deprecated  12.1	 */	public static function addToStack(JException &$e)	{		JLog::add('JError::addToStack() is deprecated.', JLog::WARNING, 'deprecated');		self::$stack[] = &$e;	}	/**	 * Create a new JException object given the passed arguments	 *	 * @param   integer  $level      The error level - use any of PHP's own error levels for	 *                               this: E_ERROR, E_WARNING, E_NOTICE, E_USER_ERROR,	 *                               E_USER_WARNING, E_USER_NOTICE.	 * @param   string   $code       The application-internal error code for this error	 * @param   string   $msg        The error message, which may also be shown the user if need be.	 * @param   mixed    $info       Optional: Additional error information (usually only	 *                               developer-relevant information that the user should never see,	 *                               like a database DSN).	 * @param   boolean  $backtrace  Add a stack backtrace to the exception.	 *	 * @return  mixed    The JException object	 *	 * @since       11.1	 * @deprecated  12.1  Use PHP Exception	 * @see         JException	 */	public static function raise($level, $code, $msg, $info = null, $backtrace = false)	{		JLog::add('JError::raise() is deprecated.', JLog::WARNING, 'deprecated');		// Build error object		$exception = new JException($msg, $code, $level, $info, $backtrace);		return self::throwError($exception);	}	/**	 * Throw an error	 *	 * @param   object  &$exception  An exception to throw.	 *	 * @return  reference	 *	 * @deprecated  12.1  Use PHP Exception	 * @see     JException	 * @since   11.1	 */	public static function throwError(&$exception)	{		JLog::add('JError::throwError() is deprecated.', JLog::WARNING, 'deprecated');		static $thrown = false;		// If thrown is hit again, we've come back to JError in the middle of throwing another JError, so die!		if ($thrown)		{			self::handleEcho($exception, array());			// Inifite loop.			jexit();		}		$thrown = true;		$level = $exception->get('level');		// See what to do with this kind of error		$handler = self::getErrorHandling($level);		$function = 'handle' . ucfirst($handler['mode']);		if (is_callable(array('JError', $function)))		{			$reference = call_user_func_array(array('JError', $function), array(&$exception, (isset($handler['options'])) ? $handler['options'] : array()));		}		else		{			// This is required to prevent a very unhelpful white-screen-of-death			jexit(				'JError::raise -> Static method JError::' . $function . ' does not exist. Contact a developer to debug' .				'<br /><strong>Error was</strong> <br />' . $exception->getMessage()			);		}		// We don't need to store the error, since JException already does that for us!		// Remove loop check		$thrown = false;		return $reference;	}	/**	 * Wrapper method for the raise() method with predefined error level of E_ERROR and backtrace set to true.	 *	 * @param   string  $code  The application-internal error code for this error	 * @param   string  $msg   The error message, which may also be shown the user if need be.	 * @param   mixed   $info  Optional: Additional error information (usually only	 *                         developer-relevant information that the user should	 *                         never see, like a database DSN).	 *	 * @return  object  $error  The configured JError object	 *	 * @deprecated   12.1       Use PHP Exception	 * @see        raise()	 * @since   11.1	 */	public static function raiseError($code, $msg, $info = null)	{		JLog::add('JError::raiseError() is deprecated.', JLog::WARNING, 'deprecated');		return self::raise(E_ERROR, $code, $msg, $info, true);	}	/**	 * Wrapper method for the {@link raise()} method with predefined error level of E_WARNING and	 * backtrace set to false.	 *	 * @param   string  $code  The application-internal error code for this error	 * @param   string  $msg   The error message, which may also be shown the user if need be.	 * @param   mixed   $info  Optional: Additional error information (usually only	 *                         developer-relevant information that	 *                         the user should never see, like a database DSN).	 *	 * @return  object  The configured JError object	 *	 * @deprecated  12.1  Use PHP Exception	 * @see        JError	 * @see        raise()	 * @since      11.1	 */	public static function raiseWarning($code, $msg, $info = null)	{		JLog::add('JError::raiseWarning() is deprecated.', JLog::WARNING, 'deprecated');		return self::raise(E_WARNING, $code, $msg, $info);	}	/**	 * Wrapper method for the {@link raise()} method with predefined error	 * level of E_NOTICE and backtrace set to false.	 *	 * @param   string  $code  The application-internal error code for this error	 * @param   string  $msg   The error message, which may also be shown the user if need be.	 * @param   mixed   $info  Optional: Additional error information (usually only	 *                         developer-relevant information that the user	 *                         should never see, like a database DSN).	 *	 * @return  object   The configured JError object	 *	 * @deprecated       12.1   Use PHP Exception	 * @see     raise()	 * @since   11.1	 */	public static function raiseNotice($code, $msg, $info = null)	{		JLog::add('JError::raiseNotice() is deprecated.', JLog::WARNING, 'deprecated');		return self::raise(E_NOTICE, $code, $msg, $info);	}	/**	 * Method to get the current error handler settings for a specified error level.	 *	 * @param   integer  $level  The error level to retrieve. This can be any of PHP's	 *                           own error levels, e.g. E_ALL, E_NOTICE...	 *	 * @return  array    All error handling details	 *	 * @deprecated   12.1  Use PHP Exception	 * @since   11.1	 */	public static function getErrorHandling($level)	{		JLog::add('JError::getErrorHandling() is deprecated.', JLog::WARNING, 'deprecated');		return self::$handlers[$level];	}	/**	 * Method to set the way the JError will handle different error levels. Use this if you want to override the default settings.	 *	 * Error handling modes:	 * - ignore	 * - echo	 * - verbose	 * - die	 * - message	 * - log	 * - callback	 *	 * You may also set the error handling for several modes at once using PHP's bit operations.	 * Examples:	 * - E_ALL = Set the handling for all levels	 * - E_ERROR | E_WARNING = Set the handling for errors and warnings	 * - E_ALL ^ E_ERROR = Set the handling for all levels except errors	 *	 * @param   integer  $level    The error level for which to set the error handling	 * @param   string   $mode     The mode to use for the error handling.	 * @param   mixed    $options  Optional: Any options needed for the given mode.	 *	 * @return  mixed  True on success or a JException object if failed.	 *	 * @deprecated  12.1  Use PHP Exception	 * @since   11.1	 */	public static function setErrorHandling($level, $mode, $options = null)	{		JLog::add('JError::setErrorHandling() is deprecated.', JLog::WARNING, 'deprecated');		$levels = self::$levels;		$function = 'handle' . ucfirst($mode);		if (!is_callable(array('JError', $function)))		{			return self::raiseError(E_ERROR, 'JError:' . JERROR_ILLEGAL_MODE, 'Error Handling mode is not known', 'Mode: ' . $mode . ' is not implemented.');		}		foreach ($levels as $eLevel => $eTitle)		{			if (($level & $eLevel) != $eLevel)			{				continue;			}			// Set callback options			if ($mode == 'callback')			{				if (!is_array($options))				{					return self::raiseError(E_ERROR, 'JError:' . JERROR_ILLEGAL_OPTIONS, 'Options for callback not valid');				}				if (!is_callable($options))				{					$tmp = array('GLOBAL');					if (is_array($options))					{						$tmp[0] = $options[0];						$tmp[1] = $options[1];					}					else					{						$tmp[1] = $options;					}					return self::raiseError(						E_ERROR,						'JError:' . JERROR_CALLBACK_NOT_CALLABLE,						'Function is not callable',						'Function:' . $tmp[1] . ' scope ' . $tmp[0] . '.'					);				}			}			// Save settings			self::$handlers[$eLevel] = array('mode' => $mode);			if ($options != null)			{				self::$handlers[$eLevel]['options'] = $options;			}		}		return true;	}	/**	 * Method that attaches the error handler to JError	 *	 * @return  void	 *	 * @deprecated  12.1	 * @see     set_error_handler	 * @since   11.1	 */	public static function attachHandler()	{		JLog::add('JError::getErrorHandling() is deprecated.', JLog::WARNING, 'deprecated');		set_error_handler(array('JError', 'customErrorHandler'));	}	/**	 * Method that detaches the error handler from JError	 *	 * @return  void	 *	 * @deprecated  12.1	 * @see     restore_error_handler	 * @since   11.1	 */	public static function detachHandler()	{		JLog::add('JError::detachHandler() is deprecated.', JLog::WARNING, 'deprecated');		restore_error_handler();	}	/**	 * Method to register a new error level for handling errors	 *	 * This allows you to add custom error levels to the built-in	 * - E_NOTICE	 * - E_WARNING	 * - E_NOTICE	 *	 * @param   integer  $level    Error level to register	 * @param   string   $name     Human readable name for the error level	 * @param   string   $handler  Error handler to set for the new error level [optional]	 *	 * @return  boolean  True on success; false if the level already has been registered	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function registerErrorLevel($level, $name, $handler = 'ignore')	{		JLog::add('JError::registerErrorLevel() is deprecated.', JLog::WARNING, 'deprecated');		if (isset(self::$levels[$level]))		{			return false;		}		self::$levels[$level] = $name;		self::setErrorHandling($level, $handler);		return true;	}	/**	 * Translate an error level integer to a human readable string	 * e.g. E_ERROR will be translated to 'Error'	 *	 * @param   integer  $level  Error level to translate	 *	 * @return  mixed  Human readable error level name or boolean false if it doesn't exist	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function translateErrorLevel($level)	{		JLog::add('JError::translateErrorLevel() is deprecated.', JLog::WARNING, 'deprecated');		if (isset(self::$levels[$level]))		{			return self::$levels[$level];		}		return false;	}	/**	 * Ignore error handler	 * - Ignores the error	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object   The exception object	 *	 * @deprecated  12.1	 * @see     raise()	 * @since   11.1	 */	public static function handleIgnore(&$error, $options)	{		JLog::add('JError::handleIgnore() is deprecated.', JLog::WARNING, 'deprecated');		return $error;	}	/**	 * Echo error handler	 * - Echos the error message to output	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleEcho(&$error, $options)	{		JLog::add('JError::handleEcho() is deprecated.', JLog::WARNING, 'deprecated');		$level_human = self::translateErrorLevel($error->get('level'));		// If system debug is set, then output some more information.		if (defined('JDEBUG'))		{			$backtrace = $error->getTrace();			$trace = '';			for ($i = count($backtrace) - 1; $i >= 0; $i--)			{				if (isset($backtrace[$i]['class']))				{					$trace .= sprintf("\n%s %s %s()", $backtrace[$i]['class'], $backtrace[$i]['type'], $backtrace[$i]['function']);				}				else				{					$trace .= sprintf("\n%s()", $backtrace[$i]['function']);				}				if (isset($backtrace[$i]['file']))				{					$trace .= sprintf(' @ %s:%d', $backtrace[$i]['file'], $backtrace[$i]['line']);				}			}		}		if (isset($_SERVER['HTTP_HOST']))		{			// Output as html			echo "<br /><b>jos-$level_human</b>: "				. $error->get('message') . "<br />\n"				. (defined('JDEBUG') ? nl2br($trace) : '');		}		else		{			// Output as simple text			if (defined('STDERR'))			{				fwrite(STDERR, "J$level_human: " . $error->get('message') . "\n");				if (defined('JDEBUG'))				{					fwrite(STDERR, $trace);				}			}			else			{				echo "J$level_human: " . $error->get('message') . "\n";				if (defined('JDEBUG'))				{					echo $trace;				}			}		}		return $error;	}	/**	 * Verbose error handler	 * - Echos the error message to output as well as related info	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleVerbose(&$error, $options)	{		JLog::add('JError::handleVerbose() is deprecated.', JLog::WARNING, 'deprecated');		$level_human = self::translateErrorLevel($error->get('level'));		$info = $error->get('info');		if (isset($_SERVER['HTTP_HOST']))		{			// Output as html			echo "<br /><b>J$level_human</b>: " . $error->get('message') . "<br />\n";			if ($info != null)			{				echo "&#160;&#160;&#160;" . $info . "<br />\n";			}			echo $error->getBacktrace(true);		}		else		{			// Output as simple text			echo "J$level_human: " . $error->get('message') . "\n";			if ($info != null)			{				echo "\t" . $info . "\n";			}		}		return $error;	}	/**	 * Die error handler	 * - Echos the error message to output and then dies	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleDie(&$error, $options)	{		JLog::add('JError::handleDie() is deprecated.', JLog::WARNING, 'deprecated');		$level_human = self::translateErrorLevel($error->get('level'));		if (isset($_SERVER['HTTP_HOST']))		{			// Output as html			jexit("<br /><b>J$level_human</b>: " . $error->get('message') . "<br />\n");		}		else		{			// Output as simple text			if (defined('STDERR'))			{				fwrite(STDERR, "J$level_human: " . $error->get('message') . "\n");				jexit();			}			else			{				jexit("J$level_human: " . $error->get('message') . "\n");			}		}		return $error;	}	/**	 * Message error handler	 * Enqueues the error message into the system queue	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleMessage(&$error, $options)	{		JLog::add('JError::hanleMessage() is deprecated.', JLog::WARNING, 'deprecated');		$appl = JFactory::getApplication();		$type = ($error->get('level') == E_NOTICE) ? 'notice' : 'error';		$appl->enqueueMessage($error->get('message'), $type);		return $error;	}	/**	 * Log error handler	 * Logs the error message to a system log file	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleLog(&$error, $options)	{		JLog::add('JError::handleLog() is deprecated.', JLog::WARNING, 'deprecated');		static $log;		if ($log == null)		{			$options['text_file'] = date('Y-m-d') . '.error.log';			$options['format'] = "{DATE}\t{TIME}\t{LEVEL}\t{CODE}\t{MESSAGE}";			JLog::addLogger($options, JLog::ALL, array('error'));		}		$entry = new JLogEntry(			str_replace(array("\r", "\n"), array('', '\\n'), $error->get('message')),			$error->get('level'),			'error'		);		$entry->code = $error->get('code');		JLog::add($entry);		return $error;	}	/**	 * Callback error handler	 * - Send the error object to a callback method for error handling	 *	 * @param   object  &$error   Exception object to handle	 * @param   array   $options  Handler options	 *	 * @return  object  The exception object	 *	 * @deprecated  12.1	 * @see         raise()	 * @since       11.1	 */	public static function handleCallback(&$error, $options)	{		JLog::add('JError::handleCallback() is deprecated.', JLog::WARNING, 'deprecated');		return call_user_func($options, $error);	}	/**	 * Display a custom error page and exit gracefully	 *	 * @param   object  &$error  Exception object	 *	 * @return  void	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function customErrorPage(&$error)	{		JLog::add('JError::customErrorPage() is deprecated.', JLog::WARNING, 'deprecated');		$app = JFactory::getApplication();		$document = JDocument::getInstance('error');		if ($document)		{			$config = JFactory::getConfig();			// Get the current template from the application			$template = $app->getTemplate();			// Push the error object into the document			$document->setError($error);			@ob_end_clean();			$document->setTitle(JText::_('Error') . ': ' . $error->get('code'));			$data = $document->render(false, array('template' => $template, 'directory' => JPATH_THEMES, 'debug' => $config->get('debug')));			// Failsafe to get the error displayed.			if (empty($data))			{				self::handleEcho($error, array());			}			else			{				// Do not allow cache				JResponse::allowCache(false);				JResponse::setBody($data);				echo JResponse::toString();			}		}		else		{			// Just echo the error since there is no document			// This is a common use case for Command Line Interface applications.			self::handleEcho($error, array());		}		$app->close(0);	}	/**	 * Display a message to the user	 *	 * @param   integer  $level  The error level - use any of PHP's own error levels	 *                   for this: E_ERROR, E_WARNING, E_NOTICE, E_USER_ERROR,	 *                   E_USER_WARNING, E_USER_NOTICE.	 * @param   string   $msg    Error message, shown to user if need be.	 *	 * @return  void	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function customErrorHandler($level, $msg)	{		JLog::add('JError::customErrorHandler() is deprecated.', JLog::WARNING, 'deprecated');		self::raise($level, '', $msg);	}	/**	 * Render the backtrace	 *	 * @param   integer  $error  The error	 *	 * @return  string  Contents of the backtrace	 *	 * @deprecated  12.1	 * @since   11.1	 */	public static function renderBacktrace($error)	{		JLog::add('JError::renderBacktrace() is deprecated.', JLog::WARNING, 'deprecated');		$contents = null;		$backtrace = $error->getTrace();		if (is_array($backtrace))		{			ob_start();			$j = 1;			echo '<table cellpadding="0" cellspacing="0" class="Table">';			echo '		<tr>';			echo '				<td colspan="3" class="TD"><strong>Call stack</strong></td>';			echo '		</tr>';			echo '		<tr>';			echo '				<td class="TD"><strong>#</strong></td>';			echo '				<td class="TD"><strong>Function</strong></td>';			echo '				<td class="TD"><strong>Location</strong></td>';			echo '		</tr>';			for ($i = count($backtrace) - 1; $i >= 0; $i--)			{				echo '		<tr>';				echo '				<td class="TD">' . $j . '</td>';				if (isset($backtrace[$i]['class']))				{					echo '		<td class="TD">' . $backtrace[$i]['class'] . $backtrace[$i]['type'] . $backtrace[$i]['function'] . '()</td>';				}				else				{					echo '		<td class="TD">' . $backtrace[$i]['function'] . '()</td>';				}				if (isset($backtrace[$i]['file']))				{					echo '				<td class="TD">' . $backtrace[$i]['file'] . ':' . $backtrace[$i]['line'] . '</td>';				}				else				{					echo '				<td class="TD">&#160;</td>';				}				echo '		</tr>';				$j++;			}			echo '</table>';			$contents = ob_get_contents();			ob_end_clean();		}		return $contents;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" ><head>	<link rel="stylesheet" href="templates/system/css/error.css" type="text/css" /></head><body>	<table width="550" align="center" class="outline">	<tr>		<td align="center">			<h1>				<?php echo $this->error->getCode() ?> - <?php echo JText::_('JERROR_AN_ERROR_HAS_OCCURRED') ?>			</h1>		</td>	</tr>	<tr>		<td width="39%" align="center">			<p><?php echo $this->error->getMessage(); ?></p>			<p><a href="index.php"><?php echo JText::_('JGLOBAL_TPL_CPANEL_LINK_TEXT') ?></a></p>			<p>				<?php if ($this->debug) :					echo $this->renderBacktrace();				endif; ?>			</p>		</td>	</tr>	</table></body></html>
<?php/** * @package     Joomla.Plugin * @subpackage  Editors-xtd.article * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Editor Article buton * * @package     Joomla.Plugin * @subpackage  Editors-xtd.article * @since       1.5 */class PlgButtonArticle extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Display the button	 *	 * @return array A four element array of (article_id, article_title, category_id, object)	 */	public function onDisplay($name)	{		/*		 * Javascript to insert the link		 * View element calls jSelectArticle when an article is clicked		 * jSelectArticle creates the link tag, sends it to the editor,		 * and closes the select frame.		 */		$js = "		function jSelectArticle(id, title, catid, object, link, lang)		{			var hreflang = '';			if (lang !== '')			{				var hreflang = ' hreflang = \"' + lang + '\"';			}			var tag = '<a' + hreflang + ' href=\"' + link + '\">' + title + '</a>';			jInsertEditorText(tag, '".$name."');			SqueezeBox.close();		}";		$doc = JFactory::getDocument();		$doc->addScriptDeclaration($js);		JHtml::_('behavior.modal');		/*		 * Use the built-in element view to select the article.		 * Currently uses blank class.		 */		$link = 'index.php?option=com_content&amp;view=articles&amp;layout=modal&amp;tmpl=component&amp;'.JSession::getFormToken().'=1';		$button = new JObject;		$button->modal = true;		$button->link = $link;		$button->text = JText::_('PLG_ARTICLE_BUTTON_ARTICLE');		$button->name = 'file-add';		$button->options = "{handler: 'iframe', size: {x: 800, y: 500}}";		return $button;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$client		= $this->state->get('filter.client_id') ? 'administrator' : 'site';$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_modules');$saveOrder	= $listOrder == 'ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_modules&task=modules.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_modules'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="15%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_POSITION', 'position', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone" >						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_MODULE', 'name', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_PAGES', 'pages', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language_title', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'ordering');				$canCreate  = $user->authorise('core.create',     'com_modules');				$canEdit    = $user->authorise('core.edit',       'com_modules');				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_modules') && $canCheckin;			?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->position?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>						<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order" />					<?php else : ?>						<span class="sortable-handler inactive" >							<i class="icon-menu"></i>						</span>					<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('modules.state', $item->published, $i, $canChange, 'cb'); ?>					</td>					<td class="has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'modules.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_modules&task=module.edit&id='.(int) $item->id); ?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>									<?php echo $this->escape($item->title); ?>							<?php endif; ?>							<?php if (!empty($item->note)) : ?>								<div class="small">									<?php echo JText::sprintf('JGLOBAL_LIST_NOTE', $this->escape($item->note));?>								</div>							<?php endif; ?>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'module.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'modules.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'modules.');								endif;								JHtml::_('dropdown.divider');								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'modules.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'modules.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'modules.');								endif;								// Render dropdown list								echo JHtml::_('dropdown.render');								?>						</div>					</td>					<td class="small hidden-phone">						<?php if ($item->position) : ?>							<span class="label label-info">								<?php echo $item->position; ?>							</span>						<?php else : ?>							<span class="label">								<?php echo JText::_('JNONE'); ?>							</span>						<?php endif; ?>					</td>					<td class="small hidden-phone">						<?php echo $item->name;?>					</td>					<td class="small hidden-phone">						<?php echo $item->pages; ?>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="small hidden-phone">						<?php if ($item->language == ''):?>							<?php echo JText::_('JDEFAULT'); ?>						<?php elseif ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_contact.category');$saveOrder	= $listOrder == 'a.ordering';$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><form action="<?php echo JRoute::_('index.php?option=com_contact'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTACT_SEARCH_IN_NAME'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="nowrap featured-col">					<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder, null, 'desc'); ?>				</th>				<th class="title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'contacts.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>					<th width="5%">						<?php echo JHtml::_('grid.sort', 'COM_CONTACT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>				<?php endif;?>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php		$n = count($this->items);		foreach ($this->items as $i => $item) :			$ordering   = $listOrder == 'a.ordering';			$canCreate  = $user->authorise('core.create',     'com_contact.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_contact.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;			$canEditOwn = $user->authorise('core.edit.own',   'com_contact.category.' . $item->catid) && $item->created_by == $userId;			$canChange  = $user->authorise('core.edit.state', 'com_contact.category.' . $item->catid) && $canCheckin;			$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_contact&task=edit&type=other&id='.$item->catid);			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'contacts.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit || $canEditOwn) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_contact&task=contact.edit&id='.(int) $item->id); ?>">						<?php echo $this->escape($item->name); ?></a>					<?php else : ?>						<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td align="center">					<?php if (!empty($item->linked_user)) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=user.edit&id='.$item->user_id);?>"><?php echo $item->linked_user;?></a>					<?php endif; ?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'contacts.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo JHtml::_('contact.featured', $item->featured, $i, $canChange); ?>				</td>				<td class="center">					<?php echo $item->category_title; ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) :?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'contacts.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $n, ($item->catid == @$this->items[$i + 1]->catid), 'contacts.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'contacts.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $n, ($item->catid == @$this->items[$i + 1]->catid), 'contacts.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $item->access_level; ?>				</td>				<?php if ($assoc) : ?>					<td class="center">						<?php if ($item->association) : ?>							<?php echo JHtml::_('contact.association', $item->id); ?>						<?php endif; ?>					</td>				<?php endif;?>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');$published	= $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_TAGS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_TAGS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-tag-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('tag.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Plugin * @subpackage  System.sef * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! SEF Plugin * * @package     Joomla.Plugin * @subpackage  System.sef * @since       1.5 */class PlgSystemSef extends JPlugin{	/**	 * Add the canonical uri to the head	 *	 * @return  void	 *	 * @since   3.0	 */	public function onAfterRoute()	{		$app = JFactory::getApplication();		$doc = JFactory::getDocument();		if ($app->getName() != 'site' || $doc->getType() !== 'html')		{			return true;		}		$router = $app->getRouter();		$uri     = JUri::getInstance();		$domain  = $this->params->get('domain');		if ($domain === null || $domain === '')		{			$domain = $uri->toString(array('scheme', 'host', 'port'));		}		$parsed = $router->parse($uri);		$fakelink = 'index.php?' . http_build_query($parsed);		$link = $domain . JRoute::_($fakelink, false);		if ($uri !== $link)		{			$doc->addHeadLink(htmlspecialchars($link), 'canonical');		}	}	/**	 * Converting the site URL to fit to the HTTP request	 *	 * @return  void	 */	public function onAfterRender()	{		$app = JFactory::getApplication();		if ($app->getName() != 'site' || $app->getCfg('sef') == '0')		{			return true;		}		// Replace src links		$base   = JURI::base(true).'/';		$buffer = JResponse::getBody();		$regex  = '#href="index.php\?([^"]*)#m';		$buffer = preg_replace_callback($regex, array('PlgSystemSef', 'route'), $buffer);		$this->checkBuffer($buffer);		$protocols = '[a-zA-Z0-9]+:'; //To check for all unknown protocals (a protocol must contain at least one alpahnumeric fillowed by :		$regex     = '#(src|href|poster)="(?!/|' . $protocols . '|\#|\')([^"]*)"#m';		$buffer    = preg_replace($regex, "$1=\"$base\$2\"", $buffer);		$this->checkBuffer($buffer);		$regex  = '#(onclick="window.open\(\')(?!/|' . $protocols . '|\#)([^/]+[^\']*?\')#m';		$buffer = preg_replace($regex, '$1' . $base . '$2', $buffer);		$this->checkBuffer($buffer);		// ONMOUSEOVER / ONMOUSEOUT		$regex  = '#(onmouseover|onmouseout)="this.src=([\']+)(?!/|' . $protocols . '|\#|\')([^"]+)"#m';		$buffer = preg_replace($regex, '$1="this.src=$2' . $base .'$3$4"', $buffer);		$this->checkBuffer($buffer);		// Background image		$regex  = '#style\s*=\s*[\'\"](.*):\s*url\s*\([\'\"]?(?!/|' . $protocols . '|\#)([^\)\'\"]+)[\'\"]?\)#m';		$buffer = preg_replace($regex, 'style="$1: url(\'' . $base .'$2$3\')', $buffer);		$this->checkBuffer($buffer);		// OBJECT <param name="xx", value="yy"> -- fix it only inside the <param> tag		$regex  = '#(<param\s+)name\s*=\s*"(movie|src|url)"[^>]\s*value\s*=\s*"(?!/|' . $protocols . '|\#|\')([^"]*)"#m';		$buffer = preg_replace($regex, '$1name="$2" value="' . $base . '$3"', $buffer);		$this->checkBuffer($buffer);		// OBJECT <param value="xx", name="yy"> -- fix it only inside the <param> tag		$regex  = '#(<param\s+[^>]*)value\s*=\s*"(?!/|' . $protocols . '|\#|\')([^"]*)"\s*name\s*=\s*"(movie|src|url)"#m';		$buffer = preg_replace($regex, '<param value="' . $base .'$2" name="$3"', $buffer);		$this->checkBuffer($buffer);		// OBJECT data="xx" attribute -- fix it only in the object tag		$regex  = '#(<object\s+[^>]*)data\s*=\s*"(?!/|' . $protocols . '|\#|\')([^"]*)"#m';		$buffer = preg_replace($regex, '$1data="' . $base . '$2"$3', $buffer);		$this->checkBuffer($buffer);		JResponse::setBody($buffer);		return true;	}	/**	 * @param   string  $buffer	 *	 * @return  void	 */	private function checkBuffer($buffer)	{		if ($buffer === null)		{			switch (preg_last_error())			{				case PREG_BACKTRACK_LIMIT_ERROR:					$message = "PHP regular expression limit reached (pcre.backtrack_limit)";					break;				case PREG_RECURSION_LIMIT_ERROR:					$message = "PHP regular expression limit reached (pcre.recursion_limit)";					break;				case PREG_BAD_UTF8_ERROR:					$message = "Bad UTF8 passed to PCRE function";					break;				default:					$message = "Unknown PCRE error calling PCRE function";			}			throw new RuntimeException($message);		}	}	/**	 * Replaces the matched tags	 *	 * @param   array  &$matches  An array of matches (see preg_match_all)	 *	 * @return  string	 */	protected static function route(&$matches)	{		$url   = $matches[1];		$url   = str_replace('&amp;', '&', $url);		$route = JRoute::_('index.php?'.$url);		return 'href="' . $route;	}}
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Application define. *///Global definitions.//Joomla framework path definitions.$parts = explode(DIRECTORY_SEPARATOR, JPATH_BASE);//Defines.define('JPATH_ROOT',          implode(DIRECTORY_SEPARATOR, $parts));define('JPATH_SITE',          JPATH_ROOT);define('JPATH_CONFIGURATION', JPATH_ROOT);define('JPATH_ADMINISTRATOR', JPATH_ROOT . '/administrator');define('JPATH_LIBRARIES',     JPATH_ROOT . '/libraries');define('JPATH_PLUGINS',       JPATH_ROOT . '/plugins');define('JPATH_INSTALLATION',  JPATH_ROOT . '/installation');define('JPATH_THEMES',        JPATH_BASE . '/templates');define('JPATH_CACHE',         JPATH_BASE . '/cache');define('JPATH_MANIFESTS',     JPATH_ADMINISTRATOR . '/manifests');
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_templates */class JHtmlTemplates{	/**	 * Display the thumb for the template.	 *	 * @param   string	The name of the active view.	 */	public static function thumb($template, $clientId = 0)	{		$client		= JApplicationHelper::getClientInfo($clientId);		$basePath	= $client->path.'/templates/'.$template;		$baseUrl	= ($clientId == 0) ? JUri::root(true) : JUri::root(true).'/administrator';		$thumb		= $basePath.'/template_thumbnail.png';		$preview	= $basePath.'/template_preview.png';		$html		= '';		if (file_exists($thumb))		{			$clientPath = ($clientId == 0) ? '' : 'administrator/';			$thumb	= $clientPath.'templates/'.$template.'/template_thumbnail.png';			$html	= JHtml::_('image', $thumb, JText::_('COM_TEMPLATES_PREVIEW'));			if (file_exists($preview))			{				$preview	= $baseUrl.'/templates/'.$template.'/template_preview.png';				$html		= '<a href="'.$preview.'" class="thumbnail pull-left modal" title="'.JText::_('COM_TEMPLATES_CLICK_TO_ENLARGE').'">'.$html.'</a>';			}		}		return $html;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the search component * * @package     Joomla.Site * @subpackage  com_search * @since       1.0 */class SearchViewSearch extends JViewLegacy{	public function display($tpl = null)	{		require_once JPATH_COMPONENT_ADMINISTRATOR.'/helpers/search.php';		$app     = JFactory::getApplication();		$pathway = $app->getPathway();		$uri     = JURI::getInstance();		$error   = null;		$rows    = null;		$results = null;		$total   = 0;		// Get some data from the model		$areas      = $this->get('areas');		$state      = $this->get('state');		$searchword = $state->get('keyword');		$params     = $app->getParams();		$menus = $app->getMenu();		$menu  = $menus->getActive();		// because the application sets a default page title, we need to get it		// right from the menu item itself		if (is_object($menu))		{			$menu_params = new JRegistry;			$menu_params->loadString($menu->params);			if (!$menu_params->get('page_title'))			{				$params->set('page_title',	JText::_('COM_SEARCH_SEARCH'));			}		}		else		{			$params->set('page_title',	JText::_('COM_SEARCH_SEARCH'));		}		$title = $params->get('page_title');		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($params->get('menu-meta_description'))		{			$this->document->setDescription($params->get('menu-meta_description'));		}		if ($params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $params->get('menu-meta_keywords'));		}		if ($params->get('robots'))		{			$this->document->setMetadata('robots', $params->get('robots'));		}		// built select lists		$orders = array();		$orders[] = JHtml::_('select.option', 'newest', JText::_('COM_SEARCH_NEWEST_FIRST'));		$orders[] = JHtml::_('select.option', 'oldest', JText::_('COM_SEARCH_OLDEST_FIRST'));		$orders[] = JHtml::_('select.option', 'popular', JText::_('COM_SEARCH_MOST_POPULAR'));		$orders[] = JHtml::_('select.option', 'alpha', JText::_('COM_SEARCH_ALPHABETICAL'));		$orders[] = JHtml::_('select.option', 'category', JText::_('JCATEGORY'));		$lists = array();		$lists['ordering'] = JHtml::_('select.genericlist', $orders, 'ordering', 'class="inputbox"', 'value', 'text', $state->get('ordering'));		$searchphrases         = array();		$searchphrases[]       = JHtml::_('select.option',  'all', JText::_('COM_SEARCH_ALL_WORDS'));		$searchphrases[]       = JHtml::_('select.option',  'any', JText::_('COM_SEARCH_ANY_WORDS'));		$searchphrases[]       = JHtml::_('select.option',  'exact', JText::_('COM_SEARCH_EXACT_PHRASE'));		$lists['searchphrase'] = JHtml::_('select.radiolist',  $searchphrases, 'searchphrase', '', 'value', 'text', $state->get('match'));		// log the search		JSearchHelper::logSearch($searchword, 'com_search');		//limit searchword		$lang = JFactory::getLanguage();		$upper_limit = $lang->getUpperLimitSearchWord();		$lower_limit = $lang->getLowerLimitSearchWord();		if (SearchHelper::limitSearchWord($searchword))		{			$error = JText::sprintf('COM_SEARCH_ERROR_SEARCH_MESSAGE', $lower_limit, $upper_limit);		}		// Sanitise searchword		if (SearchHelper::santiseSearchWord($searchword, $state->get('match')))		{			$error = JText::_('COM_SEARCH_ERROR_IGNOREKEYWORD');		}		if (!$searchword && !empty($this->input) && count($this->input->post))		{			// $error = JText::_('COM_SEARCH_ERROR_ENTERKEYWORD');		}		// Put the filtered results back into the model		// for next release, the checks should be done in the model perhaps...		$state->set('keyword', $searchword);		if ($error == null)		{			$results	= $this->get('data');			$total		= $this->get('total');			$pagination	= $this->get('pagination');			require_once JPATH_SITE . '/components/com_content/helpers/route.php';			for ($i = 0, $count = count($results); $i < $count; $i++)			{				$row = &$results[$i]->text;				if ($state->get('match') == 'exact')				{					$searchwords = array($searchword);					$needle = $searchword;				}				else {					$searchworda = preg_replace('#\xE3\x80\x80#s', ' ', $searchword);					$searchwords = preg_split("/\s+/u", $searchworda);					$needle = $searchwords[0];				}				$row = SearchHelper::prepareSearchContent($row, $needle);				$searchwords = array_unique($searchwords);				$searchRegex = '#(';				$x = 0;				foreach ($searchwords as $k => $hlword)				{					$searchRegex .= ($x == 0 ? '' : '|');					$searchRegex .= preg_quote($hlword, '#');					$x++;				}				$searchRegex .= ')#iu';				$row = preg_replace($searchRegex, '<span class="highlight">\0</span>', $row);				$result = &$results[$i];				if ($result->created)				{					$created = JHtml::_('date', $result->created, JText::_('DATE_FORMAT_LC3'));				}				else {					$created = '';				}				$result->text		= JHtml::_('content.prepare', $result->text, '', 'com_search.search');				$result->created	= $created;				$result->count		= $i + 1;			}		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->pagination = &$pagination;		$this->results = &$results;		$this->lists = &$lists;		$this->params = &$params;		$this->ordering = $state->get('ordering');		$this->searchword = $searchword;		$this->origkeyword = $state->get('origkeyword');		$this->searchphrase = $state->get('match');		$this->searchareas = $areas;		$this->total = $total;		$this->error = $error;		$this->action = $uri;		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.popover');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$lang = JFactory::getLanguage();JText::script('COM_FINDER_INDEX_CONFIRM_PURGE_PROMPT');JText::script('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'index.purge')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_PURGE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	if (pressbutton == 'index.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=index');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<?php if (!$this->pluginState['plg_content_finder']->enabled) : ?>			<div class="alert fade in">				<button class="close" data-dismiss="alert"></button>				<?php echo JText::_('COM_FINDER_INDEX_PLUGIN_CONTENT_NOT_ENABLED'); ?>			</div>		<?php endif; ?>		<table class="table table-striped">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="5%">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'l.published', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'l.title', $listDirn, $listOrder); ?>					</th>					<th class="hidden-phone"></th>					<th width="5%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_INDEX_TYPE', 'l.type_id', $listDirn, $listOrder); ?>					</th>					<th width="15%" class="hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_INDEX_DATE', 'l.indexdate', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tbody>				<?php if (count($this->items) == 0) : ?>				<tr class="row0">					<td align="center" colspan="6">						<?php						if ($this->total == 0)						{							echo JText::_('COM_FINDER_INDEX_NO_DATA') . '  ' . JText::_('COM_FINDER_INDEX_TIP');						} else {							echo JText::_('COM_FINDER_INDEX_NO_CONTENT');						}						?>					</td>				</tr>				<?php endif; ?>				<?php $canChange = JFactory::getUser()->authorise('core.manage', 'com_finder'); ?>				<?php foreach ($this->items as $i => $item) : ?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->link_id); ?>					</td>					<td>						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'index.', $canChange, 'cb'); ?>					</td>					<td>						<strong>							<?php echo $this->escape($item->title); ?>						</strong>						<small class="muted">						<?php							if (strlen($item->url) > 80)							{								echo substr($item->url, 0, 70) . '...';							} else {								echo $item->url;							}						?>						</small>					</td>					<td class="hidden-phone">						<?php if (intval($item->publish_start_date) or intval($item->publish_end_date) or intval($item->start_date) or intval($item->end_date)) : ?>							<i class="icon-calendar pull-right pop hasPopover" data-placement="left" title="<?php echo JText::_('JDETAILS');?>" data-content="<?php echo JText::sprintf('COM_FINDER_INDEX_DATE_INFO', $item->publish_start_date, $item->publish_end_date, $item->start_date, $item->end_date);?>"></i>						<?php endif; ?>					</td>					<td class="small nowrap hidden-phone">						<?php						$key = FinderHelperLanguage::branchSingular($item->t_title);						echo $lang->hasKey($key) ? JText::_($key) : $item->t_title;						?>					</td>					<td class="small nowrap hidden-phone">						<?php echo JHtml::_('date', $item->indexdate, JText::_('DATE_FORMAT_LC4')); ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>			<tfoot>				<tr>					<td colspan="6" class="nowrap">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>		</table>		<input type="hidden" name="task" value="display" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');/** * Abstract Table class * * Parent class to all tables. * * @package     Joomla.Platform * @subpackage  Table * @link        http://docs.joomla.org/JTable * @since       11.1 * @tutorial	Joomla.Platform/jtable.cls */abstract class JTable extends JObject{	/**	 * Include paths for searching for JTable classes.	 *	 * @var    array	 * @since  12.1	 */	private static $_includePaths = array();	/**	 * Name of the database table to model.	 *	 * @var    string	 * @since  11.1	 */	protected $_tbl = '';	/**	 * Name of the primary key field in the table.	 *	 * @var    string	 * @since  11.1	 */	protected $_tbl_key = '';	/**	 * JDatabaseDriver object.	 *	 * @var    JDatabaseDriver	 * @since  11.1	 */	protected $_db;	/**	 * Should rows be tracked as ACL assets?	 *	 * @var    boolean	 * @since  11.1	 */	protected $_trackAssets = false;	/**	 * The rules associated with this record.	 *	 * @var    JAccessRules  A JAccessRules object.	 * @since  11.1	 */	protected $_rules;	/**	 * Indicator that the tables have been locked.	 *	 * @var    boolean	 * @since  11.1	 */	protected $_locked = false;	/**	 * Object constructor to set table and key fields.  In most cases this will	 * be overridden by child classes to explicitly set the table and key fields	 * for a particular database table.	 *	 * @param   string           $table  Name of the table to model.	 * @param   string           $key    Name of the primary key field in the table.	 * @param   JDatabaseDriver  $db     JDatabaseDriver object.	 *	 * @since   11.1	 */	public function __construct($table, $key, $db)	{		// Set internal variables.		$this->_tbl = $table;		$this->_tbl_key = $key;		$this->_db = $db;		// Initialise the table properties.		$fields = $this->getFields();		if ($fields)		{			foreach ($fields as $name => $v)			{				// Add the field if it is not already present.				if (!property_exists($this, $name))				{					$this->$name = null;				}			}		}		// If we are tracking assets, make sure an access field exists and initially set the default.		if (property_exists($this, 'asset_id'))		{			$this->_trackAssets = true;		}		// If the access property exists, set the default.		if (property_exists($this, 'access'))		{			$this->access = (int) JFactory::getConfig()->get('access');		}	}	/**	 * Get the columns from database table.	 *	 * @return  mixed  An array of the field names, or false if an error occurs.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function getFields()	{		static $cache = null;		if ($cache === null)		{			// Lookup the fields for this table only once.			$name = $this->_tbl;			$fields = $this->_db->getTableColumns($name, false);			if (empty($fields))			{				throw new UnexpectedValueException(sprintf('No columns found for %s table', $name));			}			$cache = $fields;		}		return $cache;	}	/**	 * Static method to get an instance of a JTable class if it can be found in	 * the table include paths.  To add include paths for searching for JTable	 * classes @see JTable::addIncludePath().	 *	 * @param   string  $type    The type (name) of the JTable class to get an instance of.	 * @param   string  $prefix  An optional prefix for the table class name.	 * @param   array   $config  An optional array of configuration values for the JTable object.	 *	 * @return  mixed    A JTable object if found or boolean false if one could not be found.	 *	 * @link    http://docs.joomla.org/JTable/getInstance	 * @since   11.1	 */	public static function getInstance($type, $prefix = 'JTable', $config = array())	{		// Sanitize and prepare the table class name.		$type = preg_replace('/[^A-Z0-9_\.-]/i', '', $type);		$tableClass = $prefix . ucfirst($type);		// Only try to load the class if it doesn't already exist.		if (!class_exists($tableClass))		{			// Search for the class file in the JTable include paths.			$path = JPath::find(self::addIncludePath(), strtolower($type) . '.php');			if ($path)			{				// Import the class file.				include_once $path;				// If we were unable to load the proper class, raise a warning and return false.				if (!class_exists($tableClass))				{					JLog::add(JText::sprintf('JLIB_DATABASE_ERROR_CLASS_NOT_FOUND_IN_FILE', $tableClass), JLog::WARNING, 'jerror');					return false;				}			}			else			{				// If we were unable to find the class file in the JTable include paths, raise a warning and return false.				JLog::add(JText::sprintf('JLIB_DATABASE_ERROR_NOT_SUPPORTED_FILE_NOT_FOUND', $type), JLog::WARNING, 'jerror');				return false;			}		}		// If a database object was passed in the configuration array use it, otherwise get the global one from JFactory.		$db = isset($config['dbo']) ? $config['dbo'] : JFactory::getDbo();		// Instantiate a new table class and return it.		return new $tableClass($db);	}	/**	 * Add a filesystem path where JTable should search for table class files.	 * You may either pass a string or an array of paths.	 *	 * @param   mixed  $path  A filesystem path or array of filesystem paths to add.	 *	 * @return  array  An array of filesystem paths to find JTable classes in.	 *	 * @link    http://docs.joomla.org/JTable/addIncludePath	 * @since   11.1	 */	public static function addIncludePath($path = null)	{		// If the internal paths have not been initialised, do so with the base table path.		if (empty(self::$_includePaths))		{			self::$_includePaths = array(__DIR__);		}		// Convert the passed path(s) to add to an array.		settype($path, 'array');		// If we have new paths to add, do so.		if (!empty($path) && !in_array($path, self::$_includePaths))		{			// Check and add each individual new path.			foreach ($path as $dir)			{				// Sanitize path.				$dir = trim($dir);				// Add to the front of the list so that custom paths are searched first.				array_unshift(self::$_includePaths, $dir);			}		}		return self::$_includePaths;	}	/**	 * Method to compute the default name of the asset.	 * The default name is in the form table_name.id	 * where id is the value of the primary key of the table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetName()	{		$k = $this->_tbl_key;		return $this->_tbl . '.' . (int) $this->$k;	}	/**	 * Method to return the title to use for the asset table.  In	 * tracking the assets a title is kept for each asset so that there is some	 * context available in a unified access manager.  Usually this would just	 * return $this->title or $this->name or whatever is being used for the	 * primary name of the row. If this method is not overridden, the asset name is used.	 *	 * @return  string  The string to use as the title in the asset table.	 *	 * @link    http://docs.joomla.org/JTable/getAssetTitle	 * @since   11.1	 */	protected function _getAssetTitle()	{		return $this->_getAssetName();	}	/**	 * Method to get the parent asset under which to register this one.	 * By default, all assets are registered to the ROOT node with ID,	 * which will default to 1 if none exists.	 * The extended class can define a table and id to lookup.  If the	 * asset does not exist it will be created.	 *	 * @param   JTable   $table  A JTable object for the asset parent.	 * @param   integer  $id     Id to look up	 *	 * @return  integer	 *	 * @since   11.1	 */	protected function _getAssetParentId($table = null, $id = null)	{		// For simple cases, parent to the asset root.		$assets = self::getInstance('Asset', 'JTable', array('dbo' => $this->getDbo()));		$rootId = $assets->getRootId();		if (!empty($rootId))		{			return $rootId;		}		return 1;	}	/**	 * Method to get the database table name for the class.	 *	 * @return  string  The name of the database table being modeled.	 *	 * @since   11.1	 *	 * @link    http://docs.joomla.org/JTable/getTableName	 */	public function getTableName()	{		return $this->_tbl;	}	/**	 * Method to get the primary key field name for the table.	 *	 * @return  string  The name of the primary key for the table.	 *	 * @link    http://docs.joomla.org/JTable/getKeyName	 * @since   11.1	 */	public function getKeyName()	{		return $this->_tbl_key;	}	/**	 * Method to get the JDatabaseDriver object.	 *	 * @return  JDatabaseDriver  The internal database driver object.	 *	 * @link    http://docs.joomla.org/JTable/getDBO	 * @since   11.1	 */	public function getDbo()	{		return $this->_db;	}	/**	 * Method to set the JDatabaseDriver object.	 *	 * @param   JDatabaseDriver  $db  A JDatabaseDriver object to be used by the table object.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/setDBO	 * @since   11.1	 */	public function setDBO(JDatabaseDriver $db)	{		$this->_db = $db;		return true;	}	/**	 * Method to set rules for the record.	 *	 * @param   mixed  $input  A JAccessRules object, JSON string, or array.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setRules($input)	{		if ($input instanceof JAccessRules)		{			$this->_rules = $input;		}		else		{			$this->_rules = new JAccessRules($input);		}	}	/**	 * Method to get the rules for the record.	 *	 * @return  JAccessRules object	 *	 * @since   11.1	 */	public function getRules()	{		return $this->_rules;	}	/**	 * Method to reset class properties to the defaults set in the class	 * definition. It will ignore the primary key as well as any private class	 * properties.	 *	 * @return  void	 *	 * @link    http://docs.joomla.org/JTable/reset	 * @since   11.1	 */	public function reset()	{		// Get the default values for the class from the table.		foreach ($this->getFields() as $k => $v)		{			// If the property is not the primary key or private, reset it.			if ($k != $this->_tbl_key && (strpos($k, '_') !== 0))			{				$this->$k = $v->Default;			}		}	}	/**	 * Method to bind an associative array or object to the JTable instance.This	 * method only binds properties that are publicly accessible and optionally	 * takes an array of properties to ignore when binding.	 *	 * @param   mixed  $src     An associative array or object to bind to the JTable instance.	 * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/bind	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function bind($src, $ignore = array())	{		// If the source value is not an array or object return false.		if (!is_object($src) && !is_array($src))		{			throw new InvalidArgumentException(sprintf('%s::bind(*%s*)', get_class($this), gettype($src)));		}		// If the source value is an object, get its accessible properties.		if (is_object($src))		{			$src = get_object_vars($src);		}		// If the ignore value is a string, explode it over spaces.		if (!is_array($ignore))		{			$ignore = explode(' ', $ignore);		}		// Bind the source value, excluding the ignored fields.		foreach ($this->getProperties() as $k => $v)		{			// Only process fields not in the ignore array.			if (!in_array($k, $ignore))			{				if (isset($src[$k]))				{					$this->$k = $src[$k];				}			}		}		return true;	}	/**	 * Method to load a row from the database by primary key and bind the fields	 * to the JTable instance properties.	 *	 * @param   mixed    $keys   An optional primary key value to load the row by, or an array of fields to match.  If not	 *                           set the instance property value is used.	 * @param   boolean  $reset  True to reset the default values before loading the new row.	 *	 * @return  boolean  True if successful. False if row not found.	 *	 * @link    http://docs.joomla.org/JTable/load	 * @since   11.1	 * @throws  RuntimeException	 * @throws  UnexpectedValueException	 */	public function load($keys = null, $reset = true)	{		if (empty($keys))		{			// If empty, use the value of the current key			$keyName = $this->_tbl_key;			$keyValue = $this->$keyName;			// If empty primary key there's is no need to load anything			if (empty($keyValue))			{				return true;			}			$keys = array($keyName => $keyValue);		}		elseif (!is_array($keys))		{			// Load by primary key.			$keys = array($this->_tbl_key => $keys);		}		if ($reset)		{			$this->reset();		}		// Initialise the query.		$query = $this->_db->getQuery(true)			->select('*')			->from($this->_tbl);		$fields = array_keys($this->getProperties());		foreach ($keys as $field => $value)		{			// Check that $field is in the table.			if (!in_array($field, $fields))			{				throw new UnexpectedValueException(sprintf('Missing field in database: %s &#160; %s.', get_class($this), $field));			}			// Add the search tuple to the query.			$query->where($this->_db->quoteName($field) . ' = ' . $this->_db->quote($value));		}		$this->_db->setQuery($query);		$row = $this->_db->loadAssoc();		// Check that we have a result.		if (empty($row))		{			return false;		}		// Bind the object with the row and return.		return $this->bind($row);	}	/**	 * Method to perform sanity checks on the JTable instance properties to ensure	 * they are safe to store in the database.  Child classes should override this	 * method to make sure the data they are storing in the database is safe and	 * as expected before storage.	 *	 * @return  boolean  True if the instance is sane and able to be stored in the database.	 *	 * @link    http://docs.joomla.org/JTable/check	 * @since   11.1	 */	public function check()	{		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		$k = $this->_tbl_key;		if (!empty($this->asset_id))		{			$currentAssetId = $this->asset_id;		}		if (0 == $this->$k)		{			$this->$k = null;		}		// The asset id field is managed privately by this class.		if ($this->_trackAssets)		{			unset($this->asset_id);		}		// If a primary key exists update the object, otherwise insert it.		if ($this->$k)		{			$this->_db->updateObject($this->_tbl, $this, $this->_tbl_key, $updateNulls);		}		else		{			$this->_db->insertObject($this->_tbl, $this, $this->_tbl_key);		}		// If the table is not set to track assets return true.		if (!$this->_trackAssets)		{			return true;		}		if ($this->_locked)		{			$this->_unlock();		}		/*		 * Asset Tracking		 */		$parentId = $this->_getAssetParentId();		$name = $this->_getAssetName();		$title = $this->_getAssetTitle();		$asset = self::getInstance('Asset', 'JTable', array('dbo' => $this->getDbo()));		$asset->loadByName($name);		// Re-inject the asset id.		$this->asset_id = $asset->id;		// Check for an error.		$error = $asset->getError();		if ($error)		{			$this->setError($error);			return false;		}		// Specify how a new or moved node asset is inserted into the tree.		if (empty($this->asset_id) || $asset->parent_id != $parentId)		{			$asset->setLocation($parentId, 'last-child');		}		// Prepare the asset to be stored.		$asset->parent_id = $parentId;		$asset->name = $name;		$asset->title = $title;		if ($this->_rules instanceof JAccessRules)		{			$asset->rules = (string) $this->_rules;		}		if (!$asset->check() || !$asset->store($updateNulls))		{			$this->setError($asset->getError());			return false;		}		// Create an asset_id or heal one that is corrupted.		if (empty($this->asset_id) || ($currentAssetId != $this->asset_id && !empty($this->asset_id)))		{			// Update the asset_id field in this table.			$this->asset_id = (int) $asset->id;			$query = $this->_db->getQuery(true)				->update($this->_db->quoteName($this->_tbl))				->set('asset_id = ' . (int) $this->asset_id)				->where($this->_db->quoteName($k) . ' = ' . (int) $this->$k);			$this->_db->setQuery($query);			$this->_db->execute();		}		return true;	}	/**	 * Method to provide a shortcut to binding, checking and storing a JTable	 * instance to the database table.  The method will check a row in once the	 * data has been stored and if an ordering filter is present will attempt to	 * reorder the table rows based on the filter.  The ordering filter is an instance	 * property name.  The rows that will be reordered are those whose value matches	 * the JTable instance for the property specified.	 *	 * @param   mixed   $src             An associative array or object to bind to the JTable instance.	 * @param   string  $orderingFilter  Filter for the order updating	 * @param   mixed   $ignore          An optional array or space separated list of properties	 *                                   to ignore while binding.	 *	 * @return  boolean  True on success.	 *	 * @link	http://docs.joomla.org/JTable/save	 * @since   11.1	 */	public function save($src, $orderingFilter = '', $ignore = '')	{		// Attempt to bind the source to the instance.		if (!$this->bind($src, $ignore))		{			return false;		}		// Run any sanity checks on the instance and verify that it is ready for storage.		if (!$this->check())		{			return false;		}		// Attempt to store the properties to the database table.		if (!$this->store())		{			return false;		}		// Attempt to check the row in, just in case it was checked out.		if (!$this->checkin())		{			return false;		}		// If an ordering filter is set, attempt reorder the rows in the table based on the filter and value.		if ($orderingFilter)		{			$filterValue = $this->$orderingFilter;			$this->reorder($orderingFilter ? $this->_db->quoteName($orderingFilter) . ' = ' . $this->_db->quote($filterValue) : '');		}		// Set the error to empty and return true.		$this->setError('');		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   mixed  $pk  An optional primary key value to delete.  If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/delete	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			throw new UnexpectedValueException('Null primary key not allowed.');		}		// If tracking assets, remove the asset first.		if ($this->_trackAssets)		{			// Get and the asset name.			$this->$k = $pk;			$name = $this->_getAssetName();			$asset = self::getInstance('Asset');			if ($asset->loadByName($name))			{				if (!$asset->delete())				{					$this->setError($asset->getError());					return false;				}			}			else			{				$this->setError($asset->getError());				return false;			}		}		// Delete the row by primary key.		$query = $this->_db->getQuery(true)			->delete($this->_tbl)			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		// Check for a database error.		$this->_db->execute();		return true;	}	/**	 * Method to check a row out if the necessary properties/fields exist.  To	 * prevent race conditions while editing rows in a database, a row can be	 * checked out if the fields 'checked_out' and 'checked_out_time' are available.	 * While a row is checked out, any attempt to store the row by a user other	 * than the one who checked the row out should be held until the row is checked	 * in again.	 *	 * @param   integer  $userId  The Id of the user checking out the row.	 * @param   mixed    $pk      An optional primary key value to check out.  If not set	 *                            the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/checkOut	 * @since   11.1	 */	public function checkOut($userId, $pk = null)	{		// If there is no checked_out or checked_out_time field, just return true.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			throw new UnexpectedValueException('Null primary key not allowed.');		}		// Get the current time in MySQL format.		$time = JFactory::getDate()->toSql();		// Check the row out by primary key.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set($this->_db->quoteName('checked_out') . ' = ' . (int) $userId)			->set($this->_db->quoteName('checked_out_time') . ' = ' . $this->_db->quote($time))			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		$this->_db->execute();		// Set table values in the object.		$this->checked_out = (int) $userId;		$this->checked_out_time = $time;		return true;	}	/**	 * Method to check a row in if the necessary properties/fields exist.  Checking	 * a row in will allow other users the ability to edit the row.	 *	 * @param   mixed  $pk  An optional primary key value to check out.  If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/checkIn	 * @since   11.1	 */	public function checkIn($pk = null)	{		// If there is no checked_out or checked_out_time field, just return true.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			throw new UnexpectedValueException('Null primary key not allowed.');		}		// Check the row in by primary key.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set($this->_db->quoteName('checked_out') . ' = 0')			->set($this->_db->quoteName('checked_out_time') . ' = ' . $this->_db->quote($this->_db->getNullDate()))			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		// Check for a database error.		$this->_db->execute();		// Set table values in the object.		$this->checked_out = 0;		$this->checked_out_time = '';		return true;	}	/**	 * Method to increment the hits for a row if the necessary property/field exists.	 *	 * @param   mixed  $pk  An optional primary key value to increment. If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/hit	 * @since   11.1	 */	public function hit($pk = null)	{		// If there is no hits field, just return true.		if (!property_exists($this, 'hits'))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk === null)		{			return false;		}		// Check the row in by primary key.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set($this->_db->quoteName('hits') . ' = (' . $this->_db->quoteName('hits') . ' + 1)')			->where($this->_tbl_key . ' = ' . $this->_db->quote($pk));		$this->_db->setQuery($query);		$this->_db->execute();		// Set table values in the object.		$this->hits++;		return true;	}	/**	 * Method to determine if a row is checked out and therefore uneditable by	 * a user. If the row is checked out by the same user, then it is considered	 * not checked out -- as the user can still edit it.	 *	 * @param   integer  $with     The userid to preform the match with, if an item is checked	 *                             out by this user the function will return false.	 * @param   integer  $against  The userid to perform the match against when the function	 *                             is used as a static function.	 *	 * @return  boolean  True if checked out.	 *	 * @link    http://docs.joomla.org/JTable/isCheckedOut	 * @since   11.1	 */	public function isCheckedOut($with = 0, $against = null)	{		// Handle the non-static case.		if (isset($this) && ($this instanceof JTable) && is_null($against))		{			$against = $this->get('checked_out');		}		// The item is not checked out or is checked out by the same user.		if (!$against || ($against == $with))		{			return false;		}		$db = JFactory::getDbo();		$db->setQuery('SELECT COUNT(userid) FROM ' . $db->quoteName('#__session') . ' WHERE ' . $db->quoteName('userid') . ' = ' . (int) $against);		$checkedOut = (boolean) $db->loadResult();		// If a session exists for the user then it is checked out.		return $checkedOut;	}	/**	 * Method to get the next ordering value for a group of rows defined by an SQL WHERE clause.	 * This is useful for placing a new item last in a group of items in the table.	 *	 * @param   string  $where  WHERE clause to use for selecting the MAX(ordering) for the table.	 *	 * @return  mixed  Boolean false an failure or the next ordering value as an integer.	 *	 * @link    http://docs.joomla.org/JTable/getNextOrder	 * @since   11.1	 */	public function getNextOrder($where = '')	{		// If there is no ordering field set an error and return false.		if (!property_exists($this, 'ordering'))		{			throw new UnexpectedValueException(sprintf('%s does not support ordering.', get_class($this)));		}		// Get the largest ordering value for a given where clause.		$query = $this->_db->getQuery(true)			->select('MAX(ordering)')			->from($this->_tbl);		if ($where)		{			$query->where($where);		}		$this->_db->setQuery($query);		$max = (int) $this->_db->loadResult();		// Return the largest ordering value + 1.		return ($max + 1);	}	/**	 * Method to compact the ordering values of rows in a group of rows	 * defined by an SQL WHERE clause.	 *	 * @param   string  $where  WHERE clause to use for limiting the selection of rows to compact the ordering values.	 *	 * @return  mixed  Boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/reorder	 * @since   11.1	 */	public function reorder($where = '')	{		// If there is no ordering field set an error and return false.		if (!property_exists($this, 'ordering'))		{			throw new UnexpectedValueException(sprintf('%s does not support ordering.', get_class($this)));		}		$k = $this->_tbl_key;		// Get the primary keys and ordering values for the selection.		$query = $this->_db->getQuery(true)			->select($this->_tbl_key . ', ordering')			->from($this->_tbl)			->where('ordering >= 0')			->order('ordering');		// Setup the extra where and ordering clause data.		if ($where)		{			$query->where($where);		}		$this->_db->setQuery($query);		$rows = $this->_db->loadObjectList();		// Compact the ordering values.		foreach ($rows as $i => $row)		{			// Make sure the ordering is a positive integer.			if ($row->ordering >= 0)			{				// Only update rows that are necessary.				if ($row->ordering != $i + 1)				{					// Update the row ordering field.					$query = $this->_db->getQuery(true)						->update($this->_tbl)						->set('ordering = ' . ($i + 1))						->where($this->_tbl_key . ' = ' . $this->_db->quote($row->$k));					$this->_db->setQuery($query);					$this->_db->execute();				}			}		}		return true;	}	/**	 * Method to move a row in the ordering sequence of a group of rows defined by an SQL WHERE clause.	 * Negative numbers move the row up in the sequence and positive numbers move it down.	 *	 * @param   integer  $delta  The direction and magnitude to move the row in the ordering sequence.	 * @param   string   $where  WHERE clause to use for limiting the selection of rows to compact the	 *                           ordering values.	 *	 * @return  mixed    Boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/move	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function move($delta, $where = '')	{		// If there is no ordering field set an error and return false.		if (!property_exists($this, 'ordering'))		{			throw new UnexpectedValueException(sprintf('%s does not support ordering.', get_class($this)));		}		// If the change is none, do nothing.		if (empty($delta))		{			return true;		}		$k = $this->_tbl_key;		$row = null;		$query = $this->_db->getQuery(true);		// Select the primary key and ordering values from the table.		$query->select($this->_tbl_key . ', ordering')			->from($this->_tbl);		// If the movement delta is negative move the row up.		if ($delta < 0)		{			$query->where('ordering < ' . (int) $this->ordering)				->order('ordering DESC');		}		// If the movement delta is positive move the row down.		elseif ($delta > 0)		{			$query->where('ordering > ' . (int) $this->ordering)				->order('ordering ASC');		}		// Add the custom WHERE clause if set.		if ($where)		{			$query->where($where);		}		// Select the first row with the criteria.		$this->_db->setQuery($query, 0, 1);		$row = $this->_db->loadObject();		// If a row is found, move the item.		if (!empty($row))		{			// Update the ordering field for this instance to the row's ordering value.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('ordering = ' . (int) $row->ordering)				->where($this->_tbl_key . ' = ' . $this->_db->quote($this->$k));			$this->_db->setQuery($query);			$this->_db->execute();			// Update the ordering field for the row to this instance's ordering value.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('ordering = ' . (int) $this->ordering)				->where($this->_tbl_key . ' = ' . $this->_db->quote($row->$k));			$this->_db->setQuery($query);			$this->_db->execute();			// Update the instance value.			$this->ordering = $row->ordering;		}		else		{			// Update the ordering field for this instance.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('ordering = ' . (int) $this->ordering)				->where($this->_tbl_key . ' = ' . $this->_db->quote($this->$k));			$this->_db->setQuery($query);			$this->_db->execute();		}		return true;	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.	 *                            If not set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success; false if $pks is empty.	 *	 * @link    http://docs.joomla.org/JTable/publish	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				return false;			}		}		// Update the publishing state for rows with the given primary keys.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('published = ' . (int) $state);		// Determine if there is checkin support for the table.		if (property_exists($this, 'checked_out') || property_exists($this, 'checked_out_time'))		{			$query->where('(checked_out = 0 OR checked_out = ' . (int) $userId . ')');			$checkin = true;		}		else		{			$checkin = false;		}		// Build the WHERE clause for the primary keys.		$query->where($k . ' = ' . implode(' OR ' . $k . ' = ', $pks));		$this->_db->setQuery($query);		$this->_db->execute();		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->published = $state;		}		$this->setError('');		return true;	}	/**	 * Method to lock the database table for writing.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function _lock()	{		$this->_db->lockTable($this->_tbl);		$this->_locked = true;		return true;	}	/**	 * Method to unlock the database table for writing.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	protected function _unlock()	{		$this->_db->unlockTables();		$this->_locked = false;		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Login Model * * @package     Joomla.Administrator * @subpackage  com_login * @since       1.5 */class LoginModelLogin extends JModelLegacy{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$credentials = array(			'username' => JRequest::getVar('username', '', 'method', 'username'),			'password' => JRequest::getVar('passwd', '', 'post', 'string', JREQUEST_ALLOWRAW)		);		$this->setState('credentials', $credentials);		// check for return URL from the request first		if ($return = JRequest::getVar('return', '', 'method', 'base64'))		{			$return = base64_decode($return);			if (!JURI::isInternal($return))			{				$return = '';			}		}		// Set the return URL if empty.		if (empty($return))		{			$return = 'index.php';		}		$this->setState('return', $return);	}	/**	 * Get the administrator login module by name (real, eg 'login' or folder, eg 'mod_login')	 *	 * @param   string  $name   The name of the module	 * @param   string  $title  The title of the module, optional	 *	 * @return  object  The Module object	 *	 * @since   11.1	 */	public static function getLoginModule($name = 'mod_login', $title = null)	{		$result = null;		$modules = self::_load($name);		$total = count($modules);		for ($i = 0; $i < $total; $i++)		{			// Match the title if we're looking for a specific instance of the module			if (!$title || $modules[$i]->title == $title)			{				$result = $modules[$i];				break; // Found it			}		}		// If we didn't find it, and the name is mod_something, create a dummy object		if (is_null($result) && substr($name, 0, 4) == 'mod_')		{			$result = new stdClass;			$result->id = 0;			$result->title = '';			$result->module = $name;			$result->position = '';			$result->content = '';			$result->showtitle = 0;			$result->control = '';			$result->params = '';			$result->user = 0;		}		return $result;	}	/**	 * Load login modules.	 *	 * Note that we load regardless of state or access level since access	 * for public is the only thing that makes sense since users are not logged in	 * and the module lets them log in.	 * This is put in as a failsafe to avoid super user lock out caused by an unpublished	 * login module or by a module set to have a viewing access level that is not Public.	 *	 * @param   string  $name   The name of the module	 *	 * @return  array	 *	 * @since   11.1	 */	protected static function _load($module)	{		static $clean;		if (isset($clean))		{			return $clean;		}		$app = JFactory::getApplication();		$lang = JFactory::getLanguage()->getTag();		$clientId = (int) $app->getClientId();		$cache = JFactory::getCache('com_modules', '');		$cacheid = md5(serialize(array($clientId, $lang)));		$loginmodule = array();		if (!($clean = $cache->get($cacheid)))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('m.id, m.title, m.module, m.position, m.showtitle, m.params')				->from('#__modules AS m')				->where('m.module =' . $db->quote($module) . ' AND m.client_id = 1')				->join('LEFT', '#__extensions AS e ON e.element = m.module AND e.client_id = m.client_id')				->where('e.enabled = 1');			// Filter by language			if ($app->isSite() && $app->getLanguageFilter())			{				$query->where('m.language IN (' . $db->quote($lang) . ',' . $db->quote('*') . ')');			}			$query->order('m.position, m.ordering');			// Set the query			$db->setQuery($query);			try			{				$modules = $db->loadObjectList();			}			catch (RuntimeException $e)			{				JError::raiseWarning(500, JText::sprintf('JLIB_APPLICATION_ERROR_MODULE_LOAD', $e->getMessage()));				return $loginmodule;			}			// Return to simple indexing that matches the query order.			$loginmodule = $modules;			$cache->store($loginmodule, $cacheid);		}		return $loginmodule;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');JFormHelper::loadFieldClass('radio');/** * Sample data Form Field class. * * @package  Joomla.Installation * @since    1.6 */class JFormFieldSample extends JFormFieldRadio{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Sample';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6	 */	protected function getOptions()	{		$lang = JFactory::getLanguage();		$options = array();		$type = $this->form->getValue('db_type');		// Some database drivers share DDLs; point these drivers to the correct parent		if ($type == 'mysqli')		{			$type = 'mysql';		}		elseif ($type == 'sqlsrv')		{			$type = 'sqlazure';		}		// Get a list of files in the search path with the given filter.		$files = JFolder::files(JPATH_INSTALLATION . '/sql/' . $type, '^sample.*\.sql$');		// Add option to not install sampledata.		$options[] = JHtml::_('select.option', '', 'INSTL_SITE_INSTALL_SAMPLE_NONE');		// Build the options list from the list of files.		if (is_array($files))		{			foreach ($files as $file)			{				$options[] = JHtml::_('select.option', $file, $lang->hasKey($key = 'INSTL_' . ($file = JFile::stripExt($file)) . '_SET') ? $key : $file);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		if (!$this->value)		{			$conf = JFactory::getConfig();			if ($conf->get('sampledata'))			{				$this->value = $conf->get('sampledata');			}			else			{				$this->value = '';			}		}		return parent::getInput();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Interface * * @package     Joomla.Platform * @subpackage  Database * @since       11.2 */interface JDatabaseInterface{	/**	 * Test to see if the connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.2	 */	public static function isSupported();}/** * Joomla Platform Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 * * @method      string  q()   q($text, $escape = true)  Alias for quote method * @method      string  qn()  qn($name, $as = null)     Alias for quoteName method */abstract class JDatabaseDriver extends JDatabase implements JDatabaseInterface{	/**	 * The name of the database.	 *	 * @var    string	 * @since  11.4	 */	private $_database;	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  11.1	 */	public $name;	/**	 * @var    resource  The database connection resource.	 * @since  11.1	 */	protected $connection;	/**	 * @var    integer  The number of SQL statements executed by the database driver.	 * @since  11.1	 */	protected $count = 0;	/**	 * @var    resource  The database connection cursor from the last query.	 * @since  11.1	 */	protected $cursor;	/**	 * @var    boolean  The database driver debugging state.	 * @since  11.1	 */	protected $debug = false;	/**	 * @var    integer  The affected row limit for the current SQL statement.	 * @since  11.1	 */	protected $limit = 0;	/**	 * @var    array  The log of executed SQL statements by the database driver.	 * @since  11.1	 */	protected $log = array();	/**	 * @var    string  The character(s) used to quote SQL statement names such as table names or field names,	 *                 etc.  The child classes should define this as necessary.  If a single character string the	 *                 same character is used for both sides of the quoted name, else the first character will be	 *                 used for the opening quote and the second for the closing quote.	 * @since  11.1	 */	protected $nameQuote;	/**	 * @var    string  The null or zero representation of a timestamp for the database driver.  This should be	 *                 defined in child classes to hold the appropriate value for the engine.	 * @since  11.1	 */	protected $nullDate;	/**	 * @var    integer  The affected row offset to apply for the current SQL statement.	 * @since  11.1	 */	protected $offset = 0;	/**	 * @var    array  Passed in upon instantiation and saved.	 * @since  11.1	 */	protected $options;	/**	 * @var    mixed  The current SQL statement to execute.	 * @since  11.1	 */	protected $sql;	/**	 * @var    string  The common database table prefix.	 * @since  11.1	 */	protected $tablePrefix;	/**	 * @var    boolean  True if the database engine supports UTF-8 character encoding.	 * @since  11.1	 */	protected $utf = true;	/**	 * @var         integer  The database error number	 * @since       11.1	 * @deprecated  12.1	 */	protected $errorNum = 0;	/**	 * @var         string  The database error message	 * @since       11.1	 * @deprecated  12.1	 */	protected $errorMsg;	/**	 * @var    array  JDatabaseDriver instances container.	 * @since  11.1	 */	protected static $instances = array();	/**	 * @var    string  The minimum supported database version.	 * @since  12.1	 */	protected static $dbMinimum;	/**	 * Get a list of available database connectors.  The list will only be populated with connectors that both	 * the class exists and the static test method returns true.  This gives us the ability to have a multitude	 * of connector classes that are self-aware as to whether or not they are able to be used on a given system.	 *	 * @return  array  An array of available database connectors.	 *	 * @since   11.1	 */	public static function getConnectors()	{		$connectors = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/driver');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JDatabaseDriver' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$connectors[] = str_ireplace('.php', '', $fileName);			}		}		return $connectors;	}	/**	 * Method to return a JDatabaseDriver instance based on the given options.  There are three global options and then	 * the rest are specific to the database driver.  The 'driver' option defines which JDatabaseDriver class is	 * used for the connection -- the default is 'mysqli'.  The 'database' option determines which database is to	 * be used for the connection.  The 'select' option determines whether the connector should automatically select	 * the chosen database.	 *	 * Instances are unique to the given options and new objects are only created when a unique options array is	 * passed into the method.  This ensures that we don't end up with unnecessary database connection resources.	 *	 * @param   array  $options  Parameters to be passed to the database driver.	 *	 * @return  JDatabaseDriver  A database object.	 *	 * @since   11.1	 */	public static function getInstance($options = array())	{		// Sanitize the database connector options.		$options['driver']   = (isset($options['driver'])) ? preg_replace('/[^A-Z0-9_\.-]/i', '', $options['driver']) : 'mysqli';		$options['database'] = (isset($options['database'])) ? $options['database'] : null;		$options['select']   = (isset($options['select'])) ? $options['select'] : true;		// Get the options signature for the database connector.		$signature = md5(serialize($options));		// If we already have a database connector instance for these options then just use that.		if (empty(self::$instances[$signature]))		{			// Derive the class name from the driver.			$class = 'JDatabaseDriver' . ucfirst(strtolower($options['driver']));			// If the class still doesn't exist we have nothing left to do but throw an exception.  We did our best.			if (!class_exists($class))			{				throw new RuntimeException(sprintf('Unable to load Database Driver: %s', $options['driver']));			}			// Create our new JDatabaseDriver connector based on the options given.			try			{				$instance = new $class($options);			}			catch (RuntimeException $e)			{				throw new RuntimeException(sprintf('Unable to connect to the Database: %s', $e->getMessage()));			}			// Set the new connector to the global instances based on signature.			self::$instances[$signature] = $instance;		}		return self::$instances[$signature];	}	/**	 * Splits a string of multiple queries into an array of individual queries.	 *	 * @param   string  $query  Input SQL string with which to split into individual queries.	 *	 * @return  array  The queries from the input string separated into an array.	 *	 * @since   11.1	 */	public static function splitSql($query)	{		$start = 0;		$open = false;		$char = '';		$end = strlen($query);		$queries = array();		for ($i = 0; $i < $end; $i++)		{			$current = substr($query, $i, 1);			if (($current == '"' || $current == '\''))			{				$n = 2;				while (substr($query, $i - $n + 1, 1) == '\\' && $n < $i)				{					$n++;				}				if ($n % 2 == 0)				{					if ($open)					{						if ($current == $char)						{							$open = false;							$char = '';						}					}					else					{						$open = true;						$char = $current;					}				}			}			if (($current == ';' && !$open) || $i == $end - 1)			{				$queries[] = substr($query, $start, ($i - $start + 1));				$start = $i + 1;			}		}		return $queries;	}	/**	 * Magic method to provide method alias support for quote() and quoteName().	 *	 * @param   string  $method  The called method.	 * @param   array   $args    The array of arguments passed to the method.	 *	 * @return  string  The aliased method's return value or null.	 *	 * @since   11.1	 */	public function __call($method, $args)	{		if (empty($args))		{			return;		}		switch ($method)		{			case 'q':				return $this->quote($args[0], isset($args[1]) ? $args[1] : true);				break;			case 'qn':				return $this->quoteName($args[0], isset($args[1]) ? $args[1] : null);				break;		}	}	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   11.1	 */	public function __construct($options)	{		// Initialise object variables.		$this->_database = (isset($options['database'])) ? $options['database'] : '';		$this->tablePrefix = (isset($options['prefix'])) ? $options['prefix'] : 'jos_';		$this->count = 0;		$this->errorNum = 0;		$this->log = array();		// Set class options.		$this->options = $options;	}	/**	 * Alter database's character set, obtaining query string from protected member.	 *	 * @param   string  $dbName  The database name that will be altered	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function alterDbCharacterSet($dbName)	{		if (is_null($dbName))		{			throw new RuntimeException('Database name must not be null.');		}		$this->setQuery($this->getAlterDbCharacterSet($dbName));		return $this->execute();	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	abstract public function connect();	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   11.1	 */	abstract public function connected();	/**	 * Create a new database using information from $options object, obtaining query string	 * from protected member.	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database	 *	 * @since   12.2	 * @throws  RuntimeException	 */	public function createDatabase($options, $utf = true)	{		if (is_null($options))		{			throw new RuntimeException('$options object must not be null.');		}		elseif (empty($options->db_name))		{			throw new RuntimeException('$options object must have db_name set.');		}		elseif (empty($options->db_user))		{			throw new RuntimeException('$options object must have db_user set.');		}		$this->setQuery($this->getCreateDatabaseQuery($options, $utf));		return $this->execute();	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	abstract public function disconnect();	/**	 * Drops a table from the database.	 *	 * @param   string   $table     The name of the database table to drop.	 * @param   boolean  $ifExists  Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriver     Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function dropTable($table, $ifExists = true);	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string   The escaped string.	 *	 * @since   11.1	 */	abstract public function escape($text, $extra = false);	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchArray($cursor = null);	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchAssoc($cursor = null);	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   11.1	 */	abstract protected function fetchObject($cursor = null, $class = 'stdClass');	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   11.1	 */	abstract protected function freeResult($cursor = null);	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   11.1	 */	abstract public function getAffectedRows();	/**	 * Return the query string to alter the database character set.	 *	 * @param   string  $dbName  The database name	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 */	protected function getAlterDbCharacterSet($dbName)	{		$query = 'ALTER DATABASE ' . $this->quoteName($dbName) . ' CHARACTER SET `utf8`';		return $query;	}	/**	 * Return the query string to create new Database.	 * Each database driver, other than MySQL, need to override this member to return correct string.	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database	 *	 * @since   12.2	 */	protected function getCreateDatabaseQuery($options, $utf)	{		if ($utf)		{			$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name) . ' CHARACTER SET `utf8`';		}		else		{			$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name);		}		return $query;	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   11.1	 */	abstract public function getCollation();	/**	 * Method that provides access to the underlying database connection. Useful for when you need to call a	 * proprietary method such as postgresql's lo_* methods.	 *	 * @return  resource  The underlying database connection resource.	 *	 * @since   11.1	 */	public function getConnection()	{		return $this->connection;	}	/**	 * Get the total number of SQL statements executed by the database driver.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function getCount()	{		return $this->count;	}	/**	 * Gets the name of the database used by this conneciton.	 *	 * @return  string	 *	 * @since   11.4	 */	protected function getDatabase()	{		return $this->_database;	}	/**	 * Returns a PHP date() function compliant date format for the database driver.	 *	 * @return  string  The format string.	 *	 * @since   11.1	 */	public function getDateFormat()	{		return 'Y-m-d H:i:s';	}	/**	 * Get the database driver SQL statement log.	 *	 * @return  array  SQL statements executed by the database driver.	 *	 * @since   11.1	 */	public function getLog()	{		return $this->log;	}	/**	 * Get the minimum supported database version.	 *	 * @return  string  The minimum version number for the database driver.	 *	 * @since   12.1	 */	public function getMinimum()	{		return static::$dbMinimum;	}	/**	 * Get the null or zero representation of a timestamp for the database driver.	 *	 * @return  string  Null or zero representation of a timestamp.	 *	 * @since   11.1	 */	public function getNullDate()	{		return $this->nullDate;	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   11.1	 */	abstract public function getNumRows($cursor = null);	/**	 * Get the common table prefix for the database driver.	 *	 * @return  string  The common database table prefix.	 *	 * @since   11.1	 */	public function getPrefix()	{		return $this->tablePrefix;	}	/**	 * Gets an exporter class object.	 *	 * @return  JDatabaseExporter  An exporter object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getExporter()	{		// Derive the class name from the driver.		$class = 'JDatabaseExporter' . ucfirst($this->name);		// Make sure we have an exporter class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Exporter not found.');		}		$o = new $class;		$o->setDbo($this);		return $o;	}	/**	 * Gets an importer class object.	 *	 * @return  JDatabaseImporter  An importer object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getImporter()	{		// Derive the class name from the driver.		$class = 'JDatabaseImporter' . ucfirst($this->name);		// Make sure we have an importer class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Importer not found');		}		$o = new $class;		$o->setDbo($this);		return $o;	}	/**	 * Get the current query object or a new JDatabaseQuery object.	 *	 * @param   boolean  $new  False to return the current query object, True to return a new JDatabaseQuery object.	 *	 * @return  JDatabaseQuery  The current query object or a new object extending the JDatabaseQuery class.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function getQuery($new = false)	{		if ($new)		{			// Derive the class name from the driver.			$class = 'JDatabaseQuery' . ucfirst($this->name);			// Make sure we have a query class for this driver.			if (!class_exists($class))			{				// If it doesn't exist we are at an impasse so throw an exception.				throw new RuntimeException('Database Query Class not found.');			}			return new $class($this);		}		else		{			return $this->sql;		}	}	/**	 * Get a new iterator on the current query.	 *	 * @param   string  $column  An option column to use as the iterator key.	 * @param   string  $class   The class of object that is returned.	 *	 * @return  JDatabaseIterator  A new database iterator.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getIterator($column = null, $class = 'stdClass')	{		// Derive the class name from the driver.		$iteratorClass = 'JDatabaseIterator' . ucfirst($this->name);		// Make sure we have an iterator class for this driver.		if (!class_exists($iteratorClass))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException(sprintf('class *%s* is not defined', $iteratorClass));		}		// Return a new iterator		return new $iteratorClass($this->execute(), $column, $class);	}	/**	 * Retrieves field information about the given tables.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True (default) to only return field types.	 *	 * @return  array  An array of fields by table.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableColumns($table, $typeOnly = true);	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableCreate($tables);	/**	 * Retrieves field information about the given tables.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  An array of keys for the table(s).	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableKeys($tables);	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function getTableList();	/**	 * Determine whether or not the database engine supports UTF-8 character encoding.	 *	 * @return  boolean  True if the database engine supports UTF-8 character encoding.	 *	 * @since   11.1	 * @deprecated 12.3 Use hasUTFSupport() instead	 */	public function getUTFSupport()	{		JLog::add('JDatabase::getUTFSupport() is deprecated. Use JDatabase::hasUTFSupport() instead.', JLog::WARNING, 'deprecated');		return $this->hasUTFSupport();	}	/**	 * Determine whether or not the database engine supports UTF-8 character encoding.	 *	 * @return  boolean  True if the database engine supports UTF-8 character encoding.	 *	 * @since   12.1	 */	public function hasUTFSupport()	{		return $this->utf;	}	/**	 * Get the version of the database connector	 *	 * @return  string  The database connector version.	 *	 * @since   11.1	 */	abstract public function getVersion();	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   11.1	 */	abstract public function insertid();	/**	 * Inserts a row into a table based on an object's properties.	 *	 * @param   string  $table    The name of the database table to insert into.	 * @param   object  &$object  A reference to an object whose public properties match the table fields.	 * @param   string  $key      The name of the primary key. If provided the object property is updated.	 *	 * @return  boolean    True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function insertObject($table, &$object, $key = null)	{		$fields = array();		$values = array();		// Iterate over the object variables to build the query fields and values.		foreach (get_object_vars($object) as $k => $v)		{			// Only process non-null scalars.			if (is_array($v) or is_object($v) or $v === null)			{				continue;			}			// Ignore any internal fields.			if ($k[0] == '_')			{				continue;			}			// Prepare and sanitize the fields and values for the database query.			$fields[] = $this->quoteName($k);			$values[] = $this->quote($v);		}		// Create the base insert statement.		$query = $this->getQuery(true)			->insert($this->quoteName($table))				->columns($fields)				->values(implode(',', $values));		// Set the query and execute the insert.		$this->setQuery($query);		if (!$this->execute())		{			return false;		}		// Update the primary key if it exists.		$id = $this->insertid();		if ($key && $id && is_string($key))		{			$object->$key = $id;		}		return true;	}	/**	 * Method to check whether the installed database version is supported by the database driver	 *	 * @return  boolean  True if the database version is supported	 *	 * @since   12.1	 */	public function isMinimumVersion()	{		return version_compare($this->getVersion(), static::$dbMinimum) >= 0;	}	/**	 * Method to get the first row of the result set from the database query as an associative array	 * of ['field_name' => 'row_value'].	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadAssoc()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an associative array.		if ($array = $this->fetchAssoc($cursor))		{			$ret = $array;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an associative array	 * of ['field_name' => 'row_value'].  The array of rows can optionally be keyed by a field name, but defaults to	 * a sequential numeric array.	 *	 * NOTE: Chosing to key the result array by a non-unique field name can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key     The name of a field on which to key the result array.	 * @param   string  $column  An optional column name. Instead of the whole row, only this column value will be in	 * the result array.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadAssocList($key = null, $column = null)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set.		while ($row = $this->fetchAssoc($cursor))		{			$value = ($column) ? (isset($row[$column]) ? $row[$column] : $row) : $row;			if ($key)			{				$array[$row[$key]] = $value;			}			else			{				$array[] = $value;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get an array of values from the <var>$offset</var> field in each row of the result set from	 * the database query.	 *	 * @param   integer  $offset  The row offset to use to build the result array.	 *	 * @return  mixed    The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadColumn($offset = 0)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as arrays.		while ($row = $this->fetchArray($cursor))		{			$array[] = $row[$offset];		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get the next row in the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The result of the query as an array, false if there are no more rows.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadNextObject($class = 'stdClass')	{		JLog::add(__METHOD__ . '() is deprecated. Use JDatabase::getIterator() instead.', JLog::WARNING, 'deprecated');		$this->connect();		static $cursor = null;		// Execute the query and get the result set cursor.		if ( is_null($cursor) )		{			if (!($cursor = $this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchObject($cursor, $class))		{			return $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		$cursor = null;		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadNextRow()	{		JLog::add('JDatabase::loadNextRow() is deprecated. Use JDatabase::getIterator() instead.', JLog::WARNING, 'deprecated');		$this->connect();		static $cursor = null;		// Execute the query and get the result set cursor.		if ( is_null($cursor) )		{			if (!($cursor = $this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchArray($cursor))		{			return $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		$cursor = null;		return false;	}	/**	 * Method to get the first row of the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadObject($class = 'stdClass')	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an object of type $class.		if ($object = $this->fetchObject($cursor, $class))		{			$ret = $object;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an object.  The array	 * of objects can optionally be keyed by a field name, but defaults to a sequential numeric array.	 *	 * NOTE: Choosing to key the result array by a non-unique field name can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key    The name of a field on which to key the result array.	 * @param   string  $class  The class name to use for the returned row objects.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadObjectList($key = '', $class = 'stdClass')	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as objects of type $class.		while ($row = $this->fetchObject($cursor, $class))		{			if ($key)			{				$array[$row->$key] = $row;			}			else			{				$array[] = $row;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Method to get the first field of the first row of the result set from the database query.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadResult()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = $this->fetchArray($cursor))		{			$ret = $row[0];		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get the first row of the result set from the database query as an array.  Columns are indexed	 * numerically so the first column in the result set would be accessible via <var>$row[0]</var>, etc.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRow()	{		$this->connect();		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = $this->fetchArray($cursor))		{			$ret = $row;		}		// Free up system resources and return.		$this->freeResult($cursor);		return $ret;	}	/**	 * Method to get an array of the result set rows from the database query where each row is an array.  The array	 * of objects can optionally be keyed by a field offset, but defaults to a sequential numeric array.	 *	 * NOTE: Choosing to key the result array by a non-unique field can result in unwanted	 * behavior and should be avoided.	 *	 * @param   string  $key  The name of a field on which to key the result array.	 *	 * @return  mixed   The return value or null if the query failed.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function loadRowList($key = null)	{		$this->connect();		$array = array();		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get all of the rows from the result set as arrays.		while ($row = $this->fetchArray($cursor))		{			if ($key !== null)			{				$array[$row[$key]] = $row;			}			else			{				$array[] = $row;			}		}		// Free up system resources and return.		$this->freeResult($cursor);		return $array;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $tableName  The name of the table to unlock.	 *	 * @return  JDatabaseDriver     Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function lockTable($tableName);	/**	 * Method to quote and optionally escape a string to database requirements for insertion into the database.	 *	 * @param   string   $text    The string to quote.	 * @param   boolean  $escape  True (default) to escape the string, false to leave it unchanged.	 *	 * @return  string  The quoted input string.	 *	 * @since   11.1	 */	public function quote($text, $escape = true)	{		return '\'' . ($escape ? $this->escape($text) : $text) . '\'';	}	/**	 * Wrap an SQL statement identifier name such as column, table or database names in quotes to prevent injection	 * risks and reserved word conflicts.	 *	 * @param   mixed  $name  The identifier name to wrap in quotes, or an array of identifier names to wrap in quotes.	 *                        Each type supports dot-notation name.	 * @param   mixed  $as    The AS query part associated to $name. It can be string or array, in latter case it has to be	 *                        same length of $name; if is null there will not be any AS part for string or array element.	 *	 * @return  mixed  The quote wrapped name, same type of $name.	 *	 * @since   11.1	 */	public function quoteName($name, $as = null)	{		if (is_string($name))		{			$quotedName = $this->quoteNameStr(explode('.', $name));			$quotedAs = '';			if (!is_null($as))			{				settype($as, 'array');				$quotedAs .= ' AS ' . $this->quoteNameStr($as);			}			return $quotedName . $quotedAs;		}		else		{			$fin = array();			if (is_null($as))			{				foreach ($name as $str)				{					$fin[] = $this->quoteName($str);				}			}			elseif (is_array($name) && (count($name) == count($as)))			{				$count = count($name);				for ($i = 0; $i < $count; $i++)				{					$fin[] = $this->quoteName($name[$i], $as[$i]);				}			}			return $fin;		}	}	/**	 * Quote strings coming from quoteName call.	 *	 * @param   array  $strArr  Array of strings coming from quoteName dot-explosion.	 *	 * @return  string  Dot-imploded string of quoted parts.	 *	 * @since 11.3	 */	protected function quoteNameStr($strArr)	{		$parts = array();		$q = $this->nameQuote;		foreach ($strArr as $part)		{			if (is_null($part))			{				continue;			}			if (strlen($q) == 1)			{				$parts[] = $q . $part . $q;			}			else			{				$parts[] = $q{0} . $part . $q{1};			}		}		return implode('.', $parts);	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   11.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = '';		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "'", $startPos);			$k = strpos($query, '"', $startPos);			if (($k !== false) && (($k < $j) || ($j === false)))			{				$quoteChar = '"';				$j = $k;			}			else			{				$quoteChar = "'";			}			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Table prefix	 * @param   string  $prefix    For the table - used to rename constraints in non-mysql databases	 *	 * @return  JDatabaseDriver    Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function renameTable($oldTable, $newTable, $backup = null, $prefix = null);	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function select($database);	/**	 * Sets the database debugging state for the driver.	 *	 * @param   boolean  $level  True to enable debugging.	 *	 * @return  boolean  The old debugging level.	 *	 * @since   11.1	 */	public function setDebug($level)	{		$previous = $this->debug;		$this->debug = (bool) $level;		return $previous;	}	/**	 * Sets the SQL statement string for later execution.	 *	 * @param   mixed    $query   The SQL statement to set either as a JDatabaseQuery object or a string.	 * @param   integer  $offset  The affected row offset to set.	 * @param   integer  $limit   The maximum affected rows to set.	 *	 * @return  JDatabaseDriver  This object to support method chaining.	 *	 * @since   11.1	 */	public function setQuery($query, $offset = 0, $limit = 0)	{		$this->sql = $query;		$this->limit = (int) max(0, $limit);		$this->offset = (int) max(0, $offset);		return $this;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	abstract public function setUTF();	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionCommit();	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionRollback();	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	abstract public function transactionStart();	/**	 * Method to truncate a table.	 *	 * @param   string  $table  The table to truncate	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function truncateTable($table)	{		$this->setQuery('TRUNCATE TABLE ' . $this->quoteName($table));		$this->execute();	}	/**	 * Updates a row in a table based on an object's properties.	 *	 * @param   string   $table    The name of the database table to update.	 * @param   object   &$object  A reference to an object whose public properties match the table fields.	 * @param   array    $key      The name of the primary key.	 * @param   boolean  $nulls    True to update null fields or false to ignore them.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function updateObject($table, &$object, $key, $nulls = false)	{		$fields = array();		$where = array();		if (is_string($key))		{			$key = array($key);		}		if (is_object($key))		{			$key = (array) $key;		}		// Create the base update statement.		$statement = 'UPDATE ' . $this->quoteName($table) . ' SET %s WHERE %s';		// Iterate over the object variables to build the query fields/value pairs.		foreach (get_object_vars($object) as $k => $v)		{			// Only process scalars that are not internal fields.			if (is_array($v) or is_object($v) or $k[0] == '_')			{				continue;			}			// Set the primary key to the WHERE clause instead of a field to update.			if (in_array($k, $key))			{				$where[] = $this->quoteName($k) . '=' . $this->quote($v);				continue;			}			// Prepare and sanitize the fields and values for the database query.			if ($v === null)			{				// If the value is null and we want to update nulls then set it.				if ($nulls)				{					$val = 'NULL';				}				// If the value is null and we do not want to update nulls then ignore this field.				else				{					continue;				}			}			// The field is not null so we prep it for update.			else			{				$val = $this->quote($v);			}			// Add the field to be updated.			$fields[] = $this->quoteName($k) . '=' . $val;		}		// We don't have any fields to update.		if (empty($fields))		{			return true;		}		// Set the query and execute the update.		$this->setQuery(sprintf($statement, implode(",", $fields), implode(' AND ', $where)));		return $this->execute();	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	abstract public function execute();	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriver  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public abstract function unlockTables();}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectPosition');$lang      = JFactory::getLanguage();$ordering  = $this->escape($this->state->get('list.ordering'));$direction = $this->escape($this->state->get('list.direction'));$clientId  = $this->state->get('filter.client_id');$state     = $this->state->get('filter.state');$template  = $this->state->get('filter.template');$type      = $this->state->get('filter.type');?><form action="<?php echo JRoute::_('index.php?option=com_modules&view=positions&layout=modal&tmpl=component&function='.$function.'&client_id=' .$clientId);?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label for="filter_search">				<?php echo JText::_('JSearch_Filter_Label'); ?>			</label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_MODULES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.templateStates'), 'value', 'text', $state, true);?>			</select>			<label class="selectlabel" for="filter_type">				<?php echo JText::_('COM_MODULES_OPTION_SELECT_TYPE'); ?>			</label>			<select name="filter_type" class="inputbox" id="filter_type">				<option value=""><?php echo JText::_('COM_MODULES_OPTION_SELECT_TYPE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.types'), 'value', 'text', $type, true);?>			</select>			<label class="selectlabel" for="filter_template">				<?php echo JText::_('JOPTION_SELECT_TEMPLATE'); ?>			</label>			<select name="filter_template" class="inputbox" id="filter_template">				<option value=""><?php echo JText::_('JOPTION_SELECT_TEMPLATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.templates', $clientId), 'value', 'text', $template, true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist">		<thead>			<tr>				<th class="title width-20">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'value', $direction, $ordering); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_TEMPLATES', 'templates', $direction, $ordering); ?>				</th>			</tr>		</thead>		<tbody>		<?php $i = 1; foreach ($this->items as $value => $templates) : ?>			<tr class="row<?php echo $i = 1 - $i;?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $function;?>('<?php echo $value; ?>');"><?php echo $this->escape($value); ?></a>				</td>				<td>					<?php if (!empty($templates)):?>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $function;?>('<?php echo $value; ?>');">						<ul>						<?php foreach ($templates as $template => $label):?>							<li><?php echo $lang->hasKey($label) ? JText::sprintf('COM_MODULES_MODULE_TEMPLATE_POSITION', JText::_($template), JText::_($label)) : JText::_($template);?></li>						<?php endforeach;?>						</ul>					</a>					<?php endif;?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $ordering; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $direction; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to write the config file for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallConfig extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the options from the session		$options = $model->getOptions();		// Get the database model.		$configuration = new InstallationModelConfiguration;		// Attempt to setup the configuration.		$return = $configuration->setup($options);		$r = new stdClass;		$r->view = 'install';		// Check if the database was initialised		if (!$return)		{			$r->view = 'database';		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_feed * * @package     Joomla.Administrator * @subpackage  mod_feed * @since       1.5 */class ModFeedHelper{	/**	 * Method to load a feed.	 *	 * @param   JRegisty  $params  The parameters object.	 *	 * @return  JFeedReader|string  Return a JFeedReader object or a string message if error.	 */	static function getFeed($params)	{		// Module params		$rssurl = $params->get('rssurl', '');		// Get RSS parsed object		$cache_time = 0;		if ($params->get('cache'))		{			$cache_time = $params->get('cache_time', 15) * 60;		}		try		{			jimport('joomla.feed.factory');			$feed   = new JFeedFactory;			$rssDoc = $feed->getFeed($rssurl);		}		catch (InvalidArgumentException $e)		{			$msg = JText::_('MOD_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		catch (RunTimeException $e)		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');		}		if (empty($rssDoc))		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');			return $msg;		}		$lists = array();		if ($rssDoc)		{			return $rssDoc;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Search class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiSearch extends JMediawikiObject{	/**     * Method to perform a full text search.     *     * @param   string   $srsearch     Search for all page titles (or content) that has this value.     * @param   array    $srnamespace  The namespace(s) to enumerate.     * @param   string   $srwhat       Search inside the text or titles.     * @param   array    $srinfo       What metadata to return.     * @param   array    $srprop       What properties to return.     * @param   boolean  $srredirects  Include redirect pages in the search.     * @param   integer  $sroffest     Use this value to continue paging.     * @param   integer  $srlimit      How many total pages to return.     *     * @return  object     *     * @since   12.3     */	public function search($srsearch, array $srnamespace = null, $srwhat = null, array $srinfo = null, array $srprop = null,		$srredirects = null, $sroffest = null, $srlimit = null)	{		// Build the request.		$path = '?action=query&list=search';		if (isset($srsearch))		{			$path .= '&srsearch=' . $srsearch;		}		if (isset($srnamespace))		{			$path .= '&srnamespace=' . $this->buildParameter($srnamespace);		}		if (isset($srwhat))		{			$path .= '&srwhat=' . $srwhat;		}		if (isset($srinfo))		{			$path .= '&srinfo=' . $this->buildParameter($srinfo);		}		if (isset($srprop))		{			$path .= '&srprop=' . $this->buildParameter($srprop);		}		if ($srredirects)		{			$path .= '&srredirects=';		}		if (isset($sroffest))		{			$path .= '&sroffest=' . $sroffest;		}		if (isset($srlimit))		{			$path .= '&srlimit=' . $srlimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to search the wiki using opensearch protocol.     *     * @param   string   $search     Search string.	 * @param   integer  $limit	     Maximum amount of results to return.     * @param   array    $namespace  Namespaces to search.     * @param   string   $suggest    Do nothing if $wgEnableOpenSearchSuggest is false.     * @param   string   $format     Output format.     *     * @return  object     *     * @since   12.3     */	public function openSearch($search, $limit = null, array $namespace = null, $suggest = null, $format = null)	{		// Build the request.		$path = '?action=query&list=search';		if (isset($search))		{			$path .= '&search=' . $search;		}		if (isset($limit))		{			$path .= '&limit=' . $limit;		}		if (isset($namespace))		{			$path .= '&namespace=' . $this->buildParameter($namespace);		}		if (isset($suggest))		{			$path .= '&suggest=' . $suggest;		}		if (isset($format))		{			$path .= '&format=' . $format;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Utitlity class for multilang * * @package     Joomla.Libraries * @subpackage  Language * @since       2.5.4 */class JLanguageMultilang{	/**	 * Method to determine if the language filter plugin is enabled.	 * This works for both site and administrator.	 *	 * @return  boolean  True if site is supporting multiple languages; false otherwise.	 *	 * @since   2.5.4	 */	public static function isEnabled()	{		// Flag to avoid doing multiple database queries.		static $tested = false;		// Status of language filter plugin.		static $enabled = false;		// Get application object.		$app = JFactory::getApplication();		// If being called from the front-end, we can avoid the database query.		if ($app->isSite())		{			$enabled = $app->getLanguageFilter();			return $enabled;		}		// If already tested, don't test again.		if (!$tested)		{			// Determine status of language filter plug-in.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('enabled')				->from($db->quoteName('#__extensions'))				->where($db->quoteName('type') . ' = ' . $db->quote('plugin'))				->where($db->quoteName('folder') . ' = ' . $db->quote('system'))				->where($db->quoteName('element') . ' = ' . $db->quote('languagefilter'));			$db->setQuery($query);			$enabled = $db->loadResult();			$tested = true;		}		return $enabled;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('MenusHelper', JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * @package     Joomla.Administrator * @subpackage  com_menus */abstract class MenusHtmlMenus{	/**	 * @param   int $itemid	The menu item id	 */	public static function association($itemid)	{		// Get the associations		$associations = MenusHelper::getAssociations($itemid);		// Get the associated menu items		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('m.*')			->select('mt.title as menu_title')			->from('#__menu as m')			->join('LEFT', '#__menu_types as mt ON mt.menutype=m.menutype')			->where('m.id IN ('.implode(',', array_values($associations)).')')			->join('LEFT', '#__languages as l ON m.language=l.lang_code')			->select('l.image')			->select('l.title as language_title');		$db->setQuery($query);		try		{			$items = $db->loadObjectList('id');		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return false;		}		// Construct html		$text = array();		foreach ($associations as $tag => $associated)		{			if ($associated != $itemid)			{				$text[] = JText::sprintf('COM_MENUS_TIP_ASSOCIATED_LANGUAGE', JHtml::_('image', 'mod_languages/' . $items[$associated]->image . '.gif', $items[$associated]->language_title, array('title' => $items[$associated]->language_title), true), $items[$associated]->title, $items[$associated]->menu_title);			}		}		return JHtml::_('tooltip', implode('<br />', $text), JText::_('COM_MENUS_TIP_ASSOCIATION'), 'admin/icon-16-links.png');	}	/**	 * Returns a published state on a grid	 *	 * @param   integer       $value			The state value.	 * @param   integer       $i				The row index	 * @param   boolean       $enabled			An optional setting for access control on the action.	 * @param   string        $checkbox			An optional prefix for checkboxes.	 *	 * @return  string        The Html code	 *	 * @see JHtmlJGrid::state	 *	 * @since   1.7.1	 */	public static function state($value, $i, $enabled = true, $checkbox = 'cb')	{		$states	= array(			9	=> array(				'unpublish',				'',				'COM_MENUS_HTML_UNPUBLISH_HEADING',				'',				false,				'publish',				'publish'			),			8	=> array(				'publish',				'',				'COM_MENUS_HTML_PUBLISH_HEADING',				'',				false,				'unpublish',				'unpublish'			),			7	=> array(				'unpublish',				'',				'COM_MENUS_HTML_UNPUBLISH_SEPARATOR',				'',				false,				'publish',				'publish'			),			6	=> array(				'publish',				'',				'COM_MENUS_HTML_PUBLISH_SEPARATOR',				'',				false,				'unpublish',				'unpublish'			),			5	=> array(				'unpublish',				'',				'COM_MENUS_HTML_UNPUBLISH_ALIAS',				'',				false,				'publish',				'publish'			),			4	=> array(				'publish',				'',				'COM_MENUS_HTML_PUBLISH_ALIAS',				'',				false,				'unpublish',				'unpublish'			),			3	=> array(				'unpublish',				'',				'COM_MENUS_HTML_UNPUBLISH_URL',				'',				false,				'publish',				'publish'			),			2	=> array(				'publish',				'',				'COM_MENUS_HTML_PUBLISH_URL',				'',				false,				'unpublish',				'unpublish'			),			1	=> array(				'unpublish',				'COM_MENUS_EXTENSION_PUBLISHED_ENABLED',				'COM_MENUS_HTML_UNPUBLISH_ENABLED',				'COM_MENUS_EXTENSION_PUBLISHED_ENABLED',				true,				'publish',				'publish'			),			0	=> array(				'publish',				'COM_MENUS_EXTENSION_UNPUBLISHED_ENABLED',				'COM_MENUS_HTML_PUBLISH_ENABLED',				'COM_MENUS_EXTENSION_UNPUBLISHED_ENABLED',				true,				'unpublish',				'unpublish'			),			-1	=> array(				'unpublish',				'COM_MENUS_EXTENSION_PUBLISHED_DISABLED',				'COM_MENUS_HTML_UNPUBLISH_DISABLED',				'COM_MENUS_EXTENSION_PUBLISHED_DISABLED',				true,				'warning',				'warning'			),			-2	=> array(				'publish',				'COM_MENUS_EXTENSION_UNPUBLISHED_DISABLED',				'COM_MENUS_HTML_PUBLISH_DISABLED',				'COM_MENUS_EXTENSION_UNPUBLISHED_DISABLED',				true,				'unpublish',				'unpublish'			),		);		return JHtml::_('jgrid.state', $states, $value, $i, 'items.', $enabled, true, $checkbox);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Extension.Joomla * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! master extension plugin. * * @package     Joomla.Plugin * @subpackage  Extension.Joomla * @since       1.6 */class PlgExtensionJoomla extends JPlugin{	/**	 * @var    integer Extension Identifier	 * @since  1.6	 */	private $eid = 0;	/**	 * @var    JInstaller Installer object	 * @since  1.6	 */	private $installer = null;	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Adds an update site to the table if it doesn't exist.	 *	 * @param   string   $name      The friendly name of the site	 * @param   string   $type      The type of site (e.g. collection or extension)	 * @param   string   $location  The URI for the site	 * @param   boolean  $enabled   If this site is enabled	 *	 * @return  void	 *	 * @since   1.6	 */	private function addUpdateSite($name, $type, $location, $enabled)	{		$db = JFactory::getDbo();		// Look if the location is used already; doesn't matter what type you can't have two types at the same address, doesn't make sense		$query = $db->getQuery(true)			->select('update_site_id')			->from('#__update_sites')			->where('location = ' . $db->quote($location));		$db->setQuery($query);		$update_site_id = (int) $db->loadResult();		// If it doesn't exist, add it!		if (!$update_site_id)		{			$query->clear()				->insert('#__update_sites')				->columns(array($db->quoteName('name'), $db->quoteName('type'), $db->quoteName('location'), $db->quoteName('enabled')))				->values($db->quote($name) . ', ' . $db->quote($type) . ', ' . $db->quote($location) . ', ' . (int) $enabled);			$db->setQuery($query);			if ($db->execute())			{				// Link up this extension to the update site				$update_site_id = $db->insertid();			}		}		// Check if it has an update site id (creation might have faileD)		if ($update_site_id)		{			// Look for an update site entry that exists			$query->clear()				->select('update_site_id')				->from('#__update_sites_extensions')				->where('update_site_id = ' . $update_site_id)				->where('extension_id = ' . $this->eid);			$db->setQuery($query);			$tmpid = (int) $db->loadResult();			if (!$tmpid)			{				// Link this extension to the relevant update site				$query->clear()					->insert('#__update_sites_extensions')					->columns(array($db->quoteName('update_site_id'), $db->quoteName('extension_id')))					->values($update_site_id . ', ' . $this->eid);				$db->setQuery($query);				$db->execute();			}		}	}	/**	 * Handle post extension install update sites	 *	 * @param   JInstaller  $installer  Installer object	 * @param   integer     $eid        Extension Identifier	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterInstall($installer, $eid )	{		if ($eid)		{			$this->installer = $installer;			$this->eid = $eid;			// After an install we only need to do update sites			$this->processUpdateSites();		}	}	/**	 * Handle extension uninstall	 *	 * @param   JInstaller  $installer  Installer instance	 * @param   integer     $eid        Extension id	 * @param   integer     $result     Installation result	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterUninstall($installer, $eid, $result)	{		if ($eid)		{			// Wipe out any update_sites_extensions links			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->delete('#__update_sites_extensions')				->where('extension_id = ' . $eid);			$db->setQuery($query);			$db->execute();			// Delete any unused update sites			$query->clear()				->select('update_site_id')				->from('#__update_sites_extensions');			$db->setQuery($query);			$results = $db->loadColumn();			if (is_array($results))			{				// So we need to delete the update sites and their associated updates				$updatesite_delete = $db->getQuery(true);				$updatesite_delete->delete('#__update_sites');				$updatesite_query = $db->getQuery(true);				$updatesite_query->select('update_site_id')					->from('#__update_sites');				// If we get results back then we can exclude them				if (count($results))				{					$updatesite_query->where('update_site_id NOT IN (' . implode(',', $results) . ')');					$updatesite_delete->where('update_site_id NOT IN (' . implode(',', $results) . ')');				}				// So let's find what update sites we're about to nuke and remove their associated extensions				$db->setQuery($updatesite_query);				$update_sites_pending_delete = $db->loadColumn();				if (is_array($update_sites_pending_delete) && count($update_sites_pending_delete))				{					// Nuke any pending updates with this site before we delete it					// TODO: investigate alternative of using a query after the delete below with a query and not in like above					$query->clear()						->delete('#__updates')						->where('update_site_id IN (' . implode(',', $update_sites_pending_delete) . ')');					$db->setQuery($query);					$db->execute();				}				// Note: this might wipe out the entire table if there are no extensions linked				$db->setQuery($updatesite_delete);				$db->execute();			}			// Last but not least we wipe out any pending updates for the extension			$query->clear()				->delete('#__updates')				->where('extension_id = '. $eid);			$db->setQuery($query);			$db->execute();		}	}	/**	 * After update of an extension	 *	 * @param   JInstaller  $installer  Installer object	 * @param   integer     $eid        Extension identifier	 *	 * @return  void	 *	 * @since   1.6	 */	public function onExtensionAfterUpdate($installer, $eid)	{		if ($eid)		{			$this->installer = $installer;			$this->eid = $eid;			// handle any update sites			$this->processUpdateSites();		}	}	/**	 * Processes the list of update sites for an extension.	 *	 * @return  void	 *	 * @since   1.6	 */	private function processUpdateSites()	{		$manifest		= $this->installer->getManifest();		$updateservers	= $manifest->updateservers;		if ($updateservers)		{			$children = $updateservers->children();		}		else		{			$children = array();		}		if (count($children))		{			foreach ($children as $child)			{				$attrs = $child->attributes();				$this->addUpdateSite($attrs['name'], $attrs['type'], $child, true);			}		}		else		{			$data = (string) $updateservers;			if (strlen($data))			{				// We have a single entry in the update server line, let us presume this is an extension line				$this->addUpdateSite(JText::_('PLG_EXTENSION_JOOMLA_UNKNOWN_SITE'), 'extension', $data, true);			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a select list of session handler options. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldSessionHandler extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'SessionHandler';	/**	 * Method to get the session handler field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Get the options from JSession.		foreach (JSession::getStores() as $store)		{			$options[] = JHtml::_('select.option', $store, JText::_('JLIB_FORM_VALUE_SESSION_' . $store), 'value', 'text');		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Form Field class for the Joomla CMS. * Supports a select grouped list of template styles * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldTemplatestyle extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'TemplateStyle';	/**	 * Method to get the list of template style options	 * grouped by template.	 * Use the client attribute to specify a specific client.	 * Use the template attribute to specify a specific template	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   1.6	 */	protected function getGroups()	{		$groups = array();		$lang = JFactory::getLanguage();		// Get the client and client_id.		$clientName = $this->element['client'] ? (string) $this->element['client'] : 'site';		$client = JApplicationHelper::getClientInfo($clientName, true);		// Get the template.		$template = (string) $this->element['template'];		// Get the database object and a new query object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Build the query.		$query->select('s.id, s.title, e.name as name, s.template')			->from('#__template_styles as s')			->where('s.client_id = ' . (int) $client->id)			->order('template')			->order('title');		if ($template)		{			$query->where('s.template = ' . $db->quote($template));		}		$query->join('LEFT', '#__extensions as e on e.element=s.template')			->where('e.enabled=1')			->where($db->quoteName('e.type') . '=' . $db->quote('template'));		// Set the query and load the styles.		$db->setQuery($query);		$styles = $db->loadObjectList();		// Build the grouped list array.		if ($styles)		{			foreach ($styles as $style)			{				$template = $style->template;				$lang->load('tpl_' . $template . '.sys', $client->path, null, false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path . '/templates/' . $template, null, false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path, $lang->getDefault(), false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path . '/templates/' . $template, $lang->getDefault(), false, false);				$name = JText::_($style->name);				// Initialize the group if necessary.				if (!isset($groups[$name]))				{					$groups[$name] = array();				}				$groups[$name][] = JHtml::_('select.option', $style->id, $style->title);			}		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of modules. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewModules extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items)){			JFactory::getApplication()->enqueueMessage(				JText::_('COM_MODULES_MSG_MANAGE_NO_MODULES'),				'warning'			);		}		$this->addToolbar();		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= ModulesHelper::getActions();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_MODULES_MANAGER_MODULES'), 'module.png');		if ($canDo->get('core.create'))		{			$title = JText::_('JTOOLBAR_NEW');			$dhtml = "<button onClick=\"location.href='index.php?option=com_modules&amp;view=select'\" class=\"btn btn-small btn-success\">						<i class=\"icon-plus icon-white\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'new');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('module.edit');		}		if ($canDo->get('core.create'))		{			JToolbarHelper::custom('modules.duplicate', 'copy.png', 'copy_f2.png', 'JTOOLBAR_DUPLICATE', true);		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('modules.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('modules.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::checkin('modules.checkin');		}		if ($state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'modules.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('modules.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_modules');		}		JToolbarHelper::help('JHELP_EXTENSIONS_MODULE_MANAGER');		JHtmlSidebar::addEntry(			JText::_('JSITE'),			'index.php?option=com_modules&filter_client_id=0',			$this->state->get('filter.client_id') == 0		);		JHtmlSidebar::addEntry(			JText::_('JADMINISTRATOR'),			'index.php?option=com_modules&filter_client_id=1',			$this->state->get('filter.client_id') == 1		);		JHtmlSidebar::setAction('index.php?option=com_modules');		JHtmlSidebar::addFilter(			// @todo we need a label for this			'',			'filter_client_id',			JHtml::_('select.options', ModulesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id')),			false		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', ModulesHelper::getStateOptions(), 'value', 'text', $this->state->get('filter.state'))		);		JHtmlSidebar::addFilter(			JText::_('COM_MODULES_OPTION_SELECT_POSITION'),			'filter_position',			JHtml::_('select.options', ModulesHelper::getPositions($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.position'))		);		JHtmlSidebar::addFilter(			JText::_('COM_MODULES_OPTION_SELECT_MODULE'),			'filter_module',			JHtml::_('select.options', ModulesHelper::getModules($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.module'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		$this->sidebar = JHtmlSidebar::render();	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'position' => JText::_('COM_MODULES_HEADING_POSITION'),			'name' => JText::_('COM_MODULES_HEADING_MODULE'),			'pages' => JText::_('COM_MODULES_HEADING_PAGES'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'language_title' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// JLayout for standard handling of the details sidebar in administrator edit screens.$title = $displayData->get('form')->getValue('title');$published = $displayData->get('form')->getValue('published');?><div class="span2"><h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<?php if (empty($title)) : ?>					<div class="control-group">						<div class="controls">							<?php echo $displayData->get('form')->getValue('name'); ?>						</div>					</div>				<?php else : ?>				<div class="control-group">					<div class="controls">						<?php echo $displayData->get('form')->getValue('title'); ?>					</div>				</div>				<?php endif; ?>				<?php if ($published) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $displayData->get('form')->getLabel('published'); ?>						</div>						<div class="controls">							<?php echo $displayData->get('form')->getInput('published'); ?>						</div>					</div>				<?php else : ?>					<div class="control-group">						<div class="control-label">							<?php echo $displayData->get('form')->getLabel('state'); ?>						</div>						<div class="controls">							<?php echo $displayData->get('form')->getInput('state'); ?>						</div>					</div>				<?php endif; ?>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('featured'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('featured'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('language'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<?php foreach ($displayData->get('form')->getFieldset('jmetadata') as $field) : ?>						<?php if ($field->name == 'jform[metadata][tags][]') :?>						<div class="control-group">							<div class="control-label"><?php echo $field->label; ?></div>							<div class="controls"><?php echo $field->input; ?></div>						</div>						<?php endif; ?>					<?php endforeach; ?>				</div>			</fieldset>		</div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');$input     = JFactory::getApplication()->input;$function  = $input->getCmd('function', 'jSelectContact');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_contact&view=contacts&layout=modal&tmpl=component&function='.$function);?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<fieldset class="filter clearfix">		<div class="btn-toolbar">			<div class="btn-group pull-left">				<label for="filter_search">					<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>				</label>				<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>">					<i class="icon-search"></i></button>				<button type="button" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();">					<i class="icon-remove"></i></button>			</div>			<input onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('0', '<?php echo $this->escape(addslashes(JText::_('COM_CONTACT_SELECT_A_CONTACT'))); ?>', null, null);" class="btn" type="button" value="<?php echo JText::_('COM_CONTACT_FIELD_VALUE_NONE'); ?>" />			<div class="clearfix"></div>		</div>		<hr class="hr-condensed" />		<div class="filters">			<select name="filter_access" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<select name="filter_published" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_contact', array('filter.language' => array('*', $this->state->get('filter.forcedLanguage')))), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />			<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<select name="filter_language" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<?php endif; ?>		</div>	</fieldset>	<table class="table table-striped table-condensed">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="center nowrap">					<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="6">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</td>				<td align="center">					<?php if (!empty($item->linked_user)) : ?>						<?php echo $item->linked_user;?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td align="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<input type="hidden" name="task" value="" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $this UsersViewNotes */JHtml::_('behavior.tooltip');$user = JFactory::getUser();$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn = $this->escape($this->state->get('list.direction'));$canEdit = $user->authorise('core.edit', 'com_users');?><form action="<?php echo JRoute::_('index.php?option=com_users&view=notes');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('COM_USERS_SEARCH_IN_NOTE_TITLE'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_NOTE_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<span class="faux-label")><?php echo JText::_('COM_USERS_FILTER_LABEL'); ?></span>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id" >				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php				echo JHtml::_(					'select.options', JHtml::_('category.options', 'com_users.notes'),					'value', 'text', $this->state->get('filter.category_id')				); ?>			</select>			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php				echo JHtml::_(					'select.options', JHtml::_('jgrid.publishedOptions'),					'value', 'text', $this->state->get('filter.state'), true				); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="toggle" value="" class="checklist-toggle" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="width-15">					<?php echo JHtml::_('grid.sort', 'COM_USERS_USER_HEADING', 'u.name', $listDirn, $listOrder); ?>				</th>				<th  class="title">					<?php echo JHtml::_('grid.sort', 'COM_USERS_SUBJECT_HEADING', 'a.subject', $listDirn, $listOrder); ?>				</th>				<th class="width-20">					<?php echo JHtml::_('grid.sort', 'COM_USERS_CATEGORY_HEADING', 'c.title', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_USERS_REVIEW_HEADING', 'a.review_time', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<?php $canChange	= $user->authorise('core.edit.state',	'com_users'); ?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center checklist">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=note.edit&id='.$item->id);?>">							<?php echo $this->escape($item->user_name); ?></a>					<?php else : ?>						<?php echo $this->escape($item->user_name); ?>					<?php endif; ?>				</td>				<td>					<?php if ($item->subject) : ?>						<?php echo $this->escape($item->subject); ?>					<?php else : ?>						<?php echo JText::_('COM_USERS_EMPTY_SUBJECT'); ?>					<?php endif; ?>				</td>				<td class="center">					<?php if ($item->catid && $item->cparams->get('image')) : ?>					<?php echo JHtml::_('users.image', $item->cparams->get('image')); ?>					<?php endif; ?>					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'notes.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php if ((int) $item->review_time) : ?>						<?php echo $this->escape($item->review_time); ?>					<?php else : ?>						<?php echo JText::_('COM_USERS_EMPTY_REVIEW'); ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Menus Menu Items View. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusViewItems extends JViewLegacy{	protected $f_levels;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$lang 		= JFactory::getLanguage();		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		MenusHelper::addSubmenu('items');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->ordering = array();		// Preprocess the list of items to find ordering divisions.		foreach ($this->items as $item)		{			$this->ordering[$item->parent_id][] = $item->id;			// item type text			switch ($item->type)			{				case 'url':					$value = JText::_('COM_MENUS_TYPE_EXTERNAL_URL');					break;				case 'alias':					$value = JText::_('COM_MENUS_TYPE_ALIAS');					break;				case 'separator':					$value = JText::_('COM_MENUS_TYPE_SEPARATOR');					break;				case 'heading':					$value = JText::_('COM_MENUS_TYPE_HEADING');					break;				case 'component':				default:					// load language						$lang->load($item->componentname.'.sys', JPATH_ADMINISTRATOR, null, false, false)					||	$lang->load($item->componentname.'.sys', JPATH_ADMINISTRATOR.'/components/'.$item->componentname, null, false, false)					||	$lang->load($item->componentname.'.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					||	$lang->load($item->componentname.'.sys', JPATH_ADMINISTRATOR.'/components/'.$item->componentname, $lang->getDefault(), false, false);					if (!empty($item->componentname))					{						$value	= JText::_($item->componentname);						$vars	= null;						parse_str($item->link, $vars);						if (isset($vars['view']))						{							// Attempt to load the view xml file.							$file = JPATH_SITE.'/components/'.$item->componentname.'/views/'.$vars['view'].'/metadata.xml';							if (is_file($file) && $xml = simplexml_load_file($file))							{								// Look for the first view node off of the root node.								if ($view = $xml->xpath('view[1]'))								{									if (!empty($view[0]['title']))									{										$vars['layout'] = isset($vars['layout']) ? $vars['layout'] : 'default';										// Attempt to load the layout xml file.										// If Alternative Menu Item, get template folder for layout file										if (strpos($vars['layout'], ':') > 0)										{											// Use template folder for layout file											$temp = explode(':', $vars['layout']);											$file = JPATH_SITE.'/templates/'.$temp[0].'/html/'.$item->componentname.'/'.$vars['view'].'/'.$temp[1].'.xml';											// Load template language file											$lang->load('tpl_'.$temp[0].'.sys', JPATH_SITE, null, false, false)											||	$lang->load('tpl_'.$temp[0].'.sys', JPATH_SITE.'/templates/'.$temp[0], null, false, false)											||	$lang->load('tpl_'.$temp[0].'.sys', JPATH_SITE, $lang->getDefault(), false, false)											||	$lang->load('tpl_'.$temp[0].'.sys', JPATH_SITE.'/templates/'.$temp[0], $lang->getDefault(), false, false);										}										else										{											// Get XML file from component folder for standard layouts											$file = JPATH_SITE.'/components/'.$item->componentname.'/views/'.$vars['view'].'/tmpl/'.$vars['layout'].'.xml';										}										if (is_file($file) && $xml = simplexml_load_file($file))										{											// Look for the first view node off of the root node.											if ($layout = $xml->xpath('layout[1]'))											{												if (!empty($layout[0]['title']))												{													$value .= '  ' . JText::_(trim((string) $layout[0]['title']));												}											}											if (!empty($layout[0]->message[0]))											{												$item->item_type_desc = JText::_(trim((string) $layout[0]->message[0]));											}										}									}								}								unset($xml);							}							else							{								// Special case for absent views								$value .= '  ' . $vars['view'];							}						}					}					else					{						if (preg_match("/^index.php\?option=([a-zA-Z\-0-9_]*)/", $item->link, $result))						{							$value = JText::sprintf('COM_MENUS_TYPE_UNEXISTING', $result[1]);						}						else {							$value = JText::_('COM_MENUS_TYPE_UNKNOWN');						}					}					break;			}			$item->item_type = $value;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/menus.php';		$canDo	= MenusHelper::getActions($this->state->get('filter.parent_id'));		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_MENUS_VIEW_ITEMS_TITLE'), 'menumgr.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('item.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('item.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('items.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('items.unpublish', 'JTOOLBAR_UNPUBLISH', true);		}		if (JFactory::getUser()->authorise('core.admin'))		{			JToolbarHelper::checkin('items.checkin', 'JTOOLBAR_CHECKIN', true);		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'items.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('items.trash');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::makeDefault('items.setDefault', 'COM_MENUS_TOOLBAR_SET_HOME');		}		if (JFactory::getUser()->authorise('core.admin'))		{			JToolbarHelper::custom('items.rebuild', 'refresh.png', 'refresh_f2.png', 'JToolbar_Rebuild', false);		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		JToolbarHelper::help('JHELP_MENUS_MENU_ITEM_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_menus&view=items');		JHtmlSidebar::addFilter(			// @todo we need a label here			'',			'menutype',			JHtml::_('select.options', JHtml::_('menu.menus'), 'value', 'text', $this->state->get('filter.menutype')),			false		);		JHtmlSidebar::addFilter(			JText::_('COM_MENUS_OPTION_SELECT_LEVEL'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions', array('archived' => false)), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.lft' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.home' => JText::_('COM_MENUS_HEADING_HOME'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'association' => JText::_('COM_MENUS_HEADING_ASSOCIATION'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Indexer view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewIndexer extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	public function display($tpl = null)	{		JHtml::_('behavior.framework');		JHtml::_('stylesheet', 'com_finder/indexer.css', false, true, false);		JHtml::_('script', 'com_finder/indexer.js', false, true);		JHtml::_('script', 'system/progressbar.js', true, true);		parent::display();	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * Joomla! system checks. */@ini_set('magic_quotes_runtime', 0);/* * Installation check, and check on removal of the install directory. */if (!file_exists(JPATH_CONFIGURATION.'/configuration.php') || (filesize(JPATH_CONFIGURATION.'/configuration.php') < 10) || file_exists(JPATH_INSTALLATION.'/index.php')){	header('Location: ../installation/index.php');	exit();}//// Joomla system startup.//// System includes.require_once JPATH_LIBRARIES.'/import.legacy.php';JError::setErrorHandling(E_NOTICE, 'message');JError::setErrorHandling(E_WARNING, 'message');JError::setErrorHandling(E_ERROR, 'message', array('JError', 'customErrorPage'));// Botstrap the CMS libraries.require_once JPATH_LIBRARIES.'/cms.php';// Pre-Load configuration.ob_start();require_once JPATH_CONFIGURATION.'/configuration.php';ob_end_clean();// System configuration.$config = new JConfig;// Set the error_reportingswitch ($config->error_reporting){	case 'default':	case '-1':		break;	case 'none':	case '0':		error_reporting(0);		break;	case 'simple':		error_reporting(E_ERROR | E_WARNING | E_PARSE);		ini_set('display_errors', 1);		break;	case 'maximum':		error_reporting(E_ALL);		ini_set('display_errors', 1);		break;	case 'development':		error_reporting(-1);		ini_set('display_errors', 1);		break;	default:		error_reporting($config->error_reporting);		ini_set('display_errors', 1);		break;}define('JDEBUG', $config->debug);unset($config);/* * Joomla! framework loading. */// System profiler.if (JDEBUG){	$_PROFILER = JProfiler::getInstance('Application');}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Route Helper * * @static * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */abstract class ContentHelperRoute{	protected static $lookup = array();	/**	 * @param   integer  The route of the content item	 */	public static function getArticleRoute($id, $catid = 0, $language = 0)	{		$needles = array(			'article'  => array((int) $id)		);		//Create the link		$link = 'index.php?option=com_content&view=article&id='. $id;		if ((int) $catid > 1)		{			$categories = JCategories::getInstance('Content');			$category = $categories->get((int) $catid);			if ($category)			{				$needles['category'] = array_reverse($category->getPath());				$needles['categories'] = $needles['category'];				$link .= '&catid='.$catid;			}		}		if ($language && $language != "*" && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang='.$lang->sef;					$needles['language'] = $language;				}			}		}		if ($item = self::_findItem($needles))		{			$link .= '&Itemid='.$item;		}		elseif ($item = self::_findItem())		{			$link .= '&Itemid='.$item;		}		return $link;	}	public static function getCategoryRoute($catid, $language = 0)	{		if ($catid instanceof JCategoryNode)		{			$id = $catid->id;			$category = $catid;		}		else		{			$id = (int) $catid;			$category = JCategories::getInstance('Content')->get($id);		}		if ($id < 1)		{			$link = '';		}		else		{			$link = 'index.php?option=com_content&view=category&id='.$id;			$needles = array(				'category' => array($id)			);			if ($language && $language != "*" && JLanguageMultilang::isEnabled())			{				$db		= JFactory::getDbo();				$query	= $db->getQuery(true)					->select('a.sef AS sef')					->select('a.lang_code AS lang_code')					->from('#__languages AS a');				$db->setQuery($query);				$langs = $db->loadObjectList();				foreach ($langs as $lang)				{					if ($language == $lang->lang_code)					{						$link .= '&lang='.$lang->sef;						$needles['language'] = $language;					}				}			}			if ($item = self::_findItem($needles))			{				$link .= '&Itemid='.$item;			}			else			{				//Create the link				if ($category)				{					$catids = array_reverse($category->getPath());					$needles['category'] = $catids;					$needles['categories'] = $catids;					if ($item = self::_findItem($needles))					{						$link .= '&Itemid='.$item;					}					elseif ($item = self::_findItem())					{						$link .= '&Itemid='.$item;					}				}			}		}		return $link;	}	public static function getFormRoute($id)	{		//Create the link		if ($id)		{			$link = 'index.php?option=com_content&task=article.edit&a_id='. $id;		}		else		{			$link = 'index.php?option=com_content&task=article.edit&a_id=0';		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component	= JComponentHelper::getComponent('com_content');			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items		= $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];					if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id'])) {						// here it will become a bit tricky						// language != * can override existing entries						// language == * cannot override existing entries						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && $active->component == 'com_content' && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// if not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$lang = JFactory::getLanguage();$upper_limit = $lang->getUpperLimitSearchWord();JHtml::_('bootstrap.tooltip');?><form id="searchForm" action="<?php echo JRoute::_('index.php?option=com_search');?>" method="post">	<div class="btn-toolbar">		<div class="btn-group pull-left">			<input type="text" name="searchword" placeholder="<?php echo JText::_('COM_SEARCH_SEARCH_KEYWORD'); ?>" id="search-searchword" size="30" maxlength="<?php echo $upper_limit; ?>" value="<?php echo $this->escape($this->origkeyword); ?>" class="inputbox" />		</div>		<div class="btn-group pull-left">			<button name="Search" onclick="this.form.submit()" class="btn hasTooltip" title="<?php echo JText::_('COM_SEARCH_SEARCH');?>"><span class="icon-search"></span></button>		</div>		<input type="hidden" name="task" value="search" />		<div class="clearfix"></div>	</div>	<div class="searchintro<?php echo $this->params->get('pageclass_sfx'); ?>">		<?php if (!empty($this->searchword)):?>		<p><?php echo JText::plural('COM_SEARCH_SEARCH_KEYWORD_N_RESULTS', '<span class="badge badge-info">'. $this->total. '</span>');?></p>		<?php endif;?>	</div>	<fieldset class="phrases">		<legend><?php echo JText::_('COM_SEARCH_FOR');?>		</legend>			<div class="phrases-box">			<?php echo $this->lists['searchphrase']; ?>			</div>			<div class="ordering-box">			<label for="ordering" class="ordering">				<?php echo JText::_('COM_SEARCH_ORDERING');?>			</label>			<?php echo $this->lists['ordering'];?>			</div>	</fieldset>	<?php if ($this->params->get('search_areas', 1)) : ?>		<fieldset class="only">		<legend><?php echo JText::_('COM_SEARCH_SEARCH_ONLY');?></legend>		<?php foreach ($this->searchareas['search'] as $val => $txt) :			$checked = is_array($this->searchareas['active']) && in_array($val, $this->searchareas['active']) ? 'checked="checked"' : '';		?>		<label for="area-<?php echo $val;?>" class="checkbox">			<input type="checkbox" name="areas[]" value="<?php echo $val;?>" id="area-<?php echo $val;?>" <?php echo $checked;?> >			<?php echo JText::_($txt); ?>		</label>		<?php endforeach; ?>		</fieldset>	<?php endif; ?><?php if ($this->total > 0) : ?>	<div class="form-limit">		<label for="limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>		</label>		<?php echo $this->pagination->getLimitBox(); ?>	</div><p class="counter">		<?php echo $this->pagination->getPagesCounter(); ?>	</p><?php endif; ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Users access levels view. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewLevels extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		UsersHelper::addSubmenu('levels');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= UsersHelper::getActions();		JToolbarHelper::title(JText::_('COM_USERS_VIEW_LEVELS_TITLE'), 'levels');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('level.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('level.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'level.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_users');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_USERS_ACCESS_LEVELS');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelRegistration extends JModelForm{	/**	 * @var    object  The user registration data.	 * @since  1.6	 */	protected $data;	/**	 * Method to activate a user account.	 *	 * @param   string  $token  The activation token.	 *	 * @return  mixed    False on failure, user object on success.	 *	 * @since   1.6	 */	public function activate($token)	{		$config = JFactory::getConfig();		$userParams = JComponentHelper::getParams('com_users');		$db = $this->getDbo();		// Get the user id based on the token.		$query = $db->getQuery(true);		$query->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('activation') . ' = ' . $db->quote($token))			->where($db->quoteName('block') . ' = ' . 1)			->where($db->quoteName('lastvisitDate') . ' = ' . $db->quote($db->getNullDate()));		$db->setQuery($query);		try		{			$userId = (int) $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);			return false;		}		// Check for a valid user id.		if (!$userId)		{			$this->setError(JText::_('COM_USERS_ACTIVATION_TOKEN_NOT_FOUND'));			return false;		}		// Load the users plugin group.		JPluginHelper::importPlugin('user');		// Activate the user.		$user = JFactory::getUser($userId);		// Admin activation is on and user is verifying their email		if (($userParams->get('useractivation') == 2) && !$user->getParam('activate', 0))		{			$uri = JUri::getInstance();			// Compile the admin notification mail values.			$data = $user->getProperties();			$data['activation'] = JApplication::getHash(JUserHelper::genRandomPassword());			$user->set('activation', $data['activation']);			$data['siteurl'] = JUri::base();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$data['fromname'] = $config->get('fromname');			$data['mailfrom'] = $config->get('mailfrom');			$data['sitename'] = $config->get('sitename');			$user->setParam('activate', 1);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATE_WITH_ADMIN_ACTIVATION_SUBJECT',				$data['name'],				$data['sitename']			);			$emailBody = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATE_WITH_ADMIN_ACTIVATION_BODY',				$data['sitename'],				$data['name'],				$data['email'],				$data['username'],				$data['activate']			);			// get all admin users			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail', 'id')))				->from($db->quoteName('#__users')				->where($db->quoteName('sendEmail') . ' = ' . 1));			$db->setQuery($query);			try			{				$rows = $db->loadObjectList();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			// Send mail to all users with users creating permissions and receiving system emails			foreach ($rows as $row)			{				$usercreator = JFactory::getUser($row->id);				if ($usercreator->authorise('core.create', 'com_users'))				{					$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $row->email, $emailSubject, $emailBody);					// Check for an error.					if ($return !== true)					{						$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));						return false;					}				}			}		}		// Admin activation is on and admin is activating the account		elseif (($userParams->get('useractivation') == 2) && $user->getParam('activate', 0))		{			$user->set('activation', '');			$user->set('block', '0');			// Compile the user activated notification mail values.			$data = $user->getProperties();			$user->setParam('activate', 0);			$data['fromname'] = $config->get('fromname');			$data['mailfrom'] = $config->get('mailfrom');			$data['sitename'] = $config->get('sitename');			$data['siteurl'] = JUri::base();			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATED_BY_ADMIN_ACTIVATION_SUBJECT',				$data['name'],				$data['sitename']			);			$emailBody = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATED_BY_ADMIN_ACTIVATION_BODY',				$data['name'],				$data['siteurl'],				$data['username']			);			$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $data['email'], $emailSubject, $emailBody);			// Check for an error.			if ($return !== true)			{				$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));				return false;			}		}		else		{			$user->set('activation', '');			$user->set('block', '0');		}		// Store the user object.		if (!$user->save())		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_ACTIVATION_SAVE_FAILED', $user->getError()));			return false;		}		return $user;	}	/**	 * Method to get the registration form data.	 *	 * The base form data is loaded and then an event is fired	 * for users plugins to extend the data.	 *	 * @return  mixed  Data object on success, false on failure.	 *	 * @since   1.6	 */	public function getData()	{		if ($this->data === null)		{			$this->data = new stdClass;			$app = JFactory::getApplication();			$params = JComponentHelper::getParams('com_users');			// Override the base user data with any data in the session.			$temp = (array) $app->getUserState('com_users.registration.data', array());			foreach ($temp as $k => $v)			{				$this->data->$k = $v;			}			// Get the groups the user should be added to after registration.			$this->data->groups = array();			// Get the default new user group, Registered if not specified.			$system = $params->get('new_usertype', 2);			$this->data->groups[] = $system;			// Unset the passwords.			unset($this->data->password1);			unset($this->data->password2);			// Get the dispatcher and load the users plugins.			$dispatcher = JEventDispatcher::getInstance();			JPluginHelper::importPlugin('user');			// Trigger the data preparation event.			$results = $dispatcher->trigger('onContentPrepareData', array('com_users.registration', $this->data));			// Check for errors encountered while preparing the data.			if (count($results) && in_array(false, $results, true))			{				$this->setError($dispatcher->getError());				$this->data = false;			}		}		return $this->data;	}	/**	 * Method to get the registration form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array    $data      An optional array of data for the form to interogate.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  JForm  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.registration', 'registration', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		$data = $this->getData();		$this->preprocessData('com_users.registration', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		$userParams = JComponentHelper::getParams('com_users');		//Add the choice for site language at registration time		if ($userParams->get('site_language') == 1 && $userParams->get('frontend_userparams') == 1)		{			$form->loadFile('sitelang', false);		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$app = JFactory::getApplication();		$params = $app->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to save the form data.	 *	 * @param   array  $temp  The form data.	 *	 * @return  mixed  The user id on success, false on failure.	 *	 * @since   1.6	 */	public function register($temp)	{		$config = JFactory::getConfig();		$db = $this->getDbo();		$params = JComponentHelper::getParams('com_users');		// Initialise the table with JUser.		$user = new JUser;		$data = (array) $this->getData();		// Merge in the registration data.		foreach ($temp as $k => $v)		{			$data[$k] = $v;		}		// Prepare the data for the user object.		$data['email'] = $data['email1'];		$data['password'] = $data['password1'];		$useractivation = $params->get('useractivation');		$sendpassword = $params->get('sendpassword', 1);		// Check if the user needs to activate their account.		if (($useractivation == 1) || ($useractivation == 2))		{			$data['activation'] = JApplication::getHash(JUserHelper::genRandomPassword());			$data['block'] = 1;		}		// Bind the data.		if (!$user->bind($data))		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_BIND_FAILED', $user->getError()));			return false;		}		// Load the users plugin group.		JPluginHelper::importPlugin('user');		// Store the data.		if (!$user->save())		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $user->getError()));			return false;		}		// Compile the notification mail values.		$data = $user->getProperties();		$data['fromname'] = $config->get('fromname');		$data['mailfrom'] = $config->get('mailfrom');		$data['sitename'] = $config->get('sitename');		$data['siteurl'] = JUri::root();		// Handle account activation/confirmation emails.		if ($useractivation == 2)		{			// Set the link to confirm the user email.			$uri = JUri::getInstance();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ADMIN_ACTIVATION_BODY',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ADMIN_ACTIVATION_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username']				);			}		}		elseif ($useractivation == 1)		{			// Set the link to activate the user account.			$uri = JUri::getInstance();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ACTIVATION_BODY',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ACTIVATION_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username']				);			}		}		else		{			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_BODY',					$data['name'],					$data['sitename'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['siteurl']				);			}		}		// Send the registration email.		$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $data['email'], $emailSubject, $emailBody);		// Send Notification mail to administrators		if (($params->get('useractivation') < 2) && ($params->get('mail_to_admin') == 1))		{			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			$emailBodyAdmin = JText::sprintf(				'COM_USERS_EMAIL_REGISTERED_NOTIFICATION_TO_ADMIN_BODY',				$data['name'],				$data['username'],				$data['siteurl']			);			// Get all admin users			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail')))				->from($db->quoteName('#__users')				->where($db->quoteName('sendEmail') . ' = ' . 1));			$db->setQuery($query);			try			{				$rows = $db->loadObjectList();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			// Send mail to all superadministrators id			foreach ($rows as $row)			{				$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $row->email, $emailSubject, $emailBodyAdmin);				// Check for an error.				if ($return !== true)				{					$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));					return false;				}			}		}		// Check for an error.		if ($return !== true)		{			$this->setError(JText::_('COM_USERS_REGISTRATION_SEND_MAIL_FAILED'));			// Send a system message to administrators receiving system mails			$db = JFactory::getDbo();			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail', 'id')))				->from($db->quoteName('#__users'))				->where($db->quoteName('block') . ' = ' . (int) 0)				->where($db->quoteName('sendEmail') . ' = ' . (int) 1);			$db->setQuery($query);			try			{				$sendEmail = $db->loadColumn();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			if (count($sendEmail) > 0)			{				$jdate = new JDate;				// Build the query to add the messages				foreach ($sendEmail as $userid)				{					$values = array($db->quote($userid), $db->quote($userid), $db->quote($jdate->toSql()), $db->quote(JText::_('COM_USERS_MAIL_SEND_FAILURE_SUBJECT')), $db->quote(JText::sprintf('COM_USERS_MAIL_SEND_FAILURE_BODY', $return, $data['username'])));					$query = $db->getQuery(true);					$query->insert($db->quoteName('#__messages'))						->columns($db->quoteName(array('user_id_from', 'user_id_to', 'date_time', 'subject', 'message')))						->values(implode(',', $values));					$db->setQuery($query);					try					{						$db->execute();					}					catch (RuntimeException $e)					{						$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);						return false;					}				}			}			return false;		}		if ($useractivation == 1)		{			return "useractivate";		}		elseif ($useractivation == 2)		{			return "adminactivate";		}		else		{			return $user->id;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks helper. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class WeblinksHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 * @since   1.6	 */	public static function addSubmenu($vName = 'weblinks')	{		JHtmlSidebar::addEntry(			JText::_('COM_WEBLINKS_SUBMENU_WEBLINKS'),			'index.php?option=com_weblinks&view=weblinks',			$vName == 'weblinks'		);		JHtmlSidebar::addEntry(			JText::_('COM_WEBLINKS_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_weblinks',			$vName == 'categories'		);		if ($vName == 'categories')		{			JToolbarHelper::title(				JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', JText::_('com_weblinks')),				'weblinks-categories');		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 * @return  JObject	 * @since   1.6	 */	public static function getActions($categoryId = 0)	{		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($categoryId))		{			$assetName = 'com_weblinks';			$level = 'component';		}		else		{			$assetName = 'com_weblinks.category.'.(int) $categoryId;			$level = 'category';		}		$actions = JAccess::getActions('com_weblinks', $level);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  User * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Authorisation helper class, provides static methods to perform various tasks relevant * to the Joomla user and authorisation classes * * This class has influences and some method logic from the Horde Auth package * * @package     Joomla.Platform * @subpackage  User * @since       11.1 */abstract class JUserHelper{	/**	 * Method to add a user to a group.	 *	 * @param   integer  $userId   The id of the user.	 * @param   integer  $groupId  The id of the group.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function addUserToGroup($userId, $groupId)	{		// Get the user object.		$user = new JUser((int) $userId);		// Add the user to the group if necessary.		if (!in_array($groupId, $user->groups))		{			// Get the title of the group.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select($db->quoteName('title'))				->from($db->quoteName('#__usergroups'))				->where($db->quoteName('id') . ' = ' . (int) $groupId);			$db->setQuery($query);			$title = $db->loadResult();			// If the group does not exist, return an exception.			if (!$title)			{				throw new RuntimeException('Access Usergroup Invalid');			}			// Add the group data to the user object.			$user->groups[$title] = $groupId;			// Store the user object.			$user->save();		}		if (session_id())		{			// Set the group data for any preloaded user objects.			$temp = JFactory::getUser((int) $userId);			$temp->groups = $user->groups;			// Set the group data for the user object in the session.			$temp = JFactory::getUser();			if ($temp->id == $userId)			{				$temp->groups = $user->groups;			}		}		return true;	}	/**	 * Method to get a list of groups a user is in.	 *	 * @param   integer  $userId  The id of the user.	 *	 * @return  array    List of groups	 *	 * @since   11.1	 */	public static function getUserGroups($userId)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		return isset($user->groups) ? $user->groups : array();	}	/**	 * Method to remove a user from a group.	 *	 * @param   integer  $userId   The id of the user.	 * @param   integer  $groupId  The id of the group.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function removeUserFromGroup($userId, $groupId)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		// Remove the user from the group if necessary.		$key = array_search($groupId, $user->groups);		if ($key !== false)		{			// Remove the user from the group.			unset($user->groups[$key]);			// Store the user object.			$user->save();		}		// Set the group data for any preloaded user objects.		$temp = JFactory::getUser((int) $userId);		$temp->groups = $user->groups;		// Set the group data for the user object in the session.		$temp = JFactory::getUser();		if ($temp->id == $userId)		{			$temp->groups = $user->groups;		}		return true;	}	/**	 * Method to set the groups for a user.	 *	 * @param   integer  $userId  The id of the user.	 * @param   array    $groups  An array of group ids to put the user in.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function setUserGroups($userId, $groups)	{		// Get the user object.		$user = JUser::getInstance((int) $userId);		// Set the group ids.		JArrayHelper::toInteger($groups);		$user->groups = $groups;		// Get the titles for the user groups.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('id') . ', ' . $db->quoteName('title'))			->from($db->quoteName('#__usergroups'))			->where($db->quoteName('id') . ' = ' . implode(' OR ' . $db->quoteName('id') . ' = ', $user->groups));		$db->setQuery($query);		$results = $db->loadObjectList();		// Set the titles for the user groups.		for ($i = 0, $n = count($results); $i < $n; $i++)		{			$user->groups[$results[$i]->id] = $results[$i]->id;		}		// Store the user object.		$user->save();		if ($session_id())		{			// Set the group data for any preloaded user objects.			$temp = JFactory::getUser((int) $userId);			$temp->groups = $user->groups;			// Set the group data for the user object in the session.			$temp = JFactory::getUser();			if ($temp->id == $userId)			{				$temp->groups = $user->groups;			}		}		return true;	}	/**	 * Gets the user profile information	 *	 * @param   integer  $userId  The id of the user.	 *	 * @return  object	 *	 * @since   11.1	 */	public static function getProfile($userId = 0)	{		if ($userId == 0)		{			$user	= JFactory::getUser();			$userId	= $user->id;		}		// Get the dispatcher and load the user's plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		$data = new JObject;		$data->id = $userId;		// Trigger the data preparation event.		$dispatcher->trigger('onContentPrepareData', array('com_users.profile', &$data));		return $data;	}	/**	 * Method to activate a user	 *	 * @param   string  $activation  Activation string	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function activateUser($activation)	{		// Initialize some variables.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Let's get the id of the user we want to activate		$query->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('activation') . ' = ' . $db->quote($activation))			->where($db->quoteName('block') . ' = 1')			->where($db->quoteName('lastvisitDate') . ' = ' . $db->quote('0000-00-00 00:00:00'));		$db->setQuery($query);		$id = (int) $db->loadResult();		// Is it a valid user to activate?		if ($id)		{			$user = JUser::getInstance((int) $id);			$user->set('block', '0');			$user->set('activation', '');			// Time to take care of business.... store the user.			if (!$user->save())			{				JLog::add($user->getError(), JLog::WARNING, 'jerror');				return false;			}		}		else		{			JLog::add(JText::_('JLIB_USER_ERROR_UNABLE_TO_FIND_USER'), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Returns userid if a user exists	 *	 * @param   string  $username  The username to search on.	 *	 * @return  integer  The user id or 0 if not found.	 *	 * @since   11.1	 */	public static function getUserId($username)	{		// Initialise some variables		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('username') . ' = ' . $db->quote($username));		$db->setQuery($query, 0, 1);		return $db->loadResult();	}	/**	 * Formats a password using the current encryption.	 *	 * @param   string   $plaintext     The plaintext password to encrypt.	 * @param   string   $salt          The salt to use to encrypt the password. []	 *                                  If not present, a new salt will be	 *                                  generated.	 * @param   string   $encryption    The kind of password encryption to use.	 *                                  Defaults to md5-hex.	 * @param   boolean  $show_encrypt  Some password systems prepend the kind of	 *                                  encryption to the crypted password ({SHA},	 *                                  etc). Defaults to false.	 *	 * @return  string  The encrypted password.	 *	 * @since   11.1	 */	public static function getCryptedPassword($plaintext, $salt = '', $encryption = 'md5-hex', $show_encrypt = false)	{		// Get the salt to use.		$salt = self::getSalt($encryption, $salt, $plaintext);		// Encrypt the password.		switch ($encryption)		{			case 'plain':				return $plaintext;			case 'sha':				$encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext));				return ($show_encrypt) ? '{SHA}' . $encrypted : $encrypted;			case 'crypt':			case 'crypt-des':			case 'crypt-md5':			case 'crypt-blowfish':				return ($show_encrypt ? '{crypt}' : '') . crypt($plaintext, $salt);			case 'md5-base64':				$encrypted = base64_encode(mhash(MHASH_MD5, $plaintext));				return ($show_encrypt) ? '{MD5}' . $encrypted : $encrypted;			case 'ssha':				$encrypted = base64_encode(mhash(MHASH_SHA1, $plaintext . $salt) . $salt);				return ($show_encrypt) ? '{SSHA}' . $encrypted : $encrypted;			case 'smd5':				$encrypted = base64_encode(mhash(MHASH_MD5, $plaintext . $salt) . $salt);				return ($show_encrypt) ? '{SMD5}' . $encrypted : $encrypted;			case 'aprmd5':				$length = strlen($plaintext);				$context = $plaintext . '$apr1$' . $salt;				$binary = self::_bin(md5($plaintext . $salt . $plaintext));				for ($i = $length; $i > 0; $i -= 16)				{					$context .= substr($binary, 0, ($i > 16 ? 16 : $i));				}				for ($i = $length; $i > 0; $i >>= 1)				{					$context .= ($i & 1) ? chr(0) : $plaintext[0];				}				$binary = self::_bin(md5($context));				for ($i = 0; $i < 1000; $i++)				{					$new = ($i & 1) ? $plaintext : substr($binary, 0, 16);					if ($i % 3)					{						$new .= $salt;					}					if ($i % 7)					{						$new .= $plaintext;					}					$new .= ($i & 1) ? substr($binary, 0, 16) : $plaintext;					$binary = self::_bin(md5($new));				}				$p = array();				for ($i = 0; $i < 5; $i++)				{					$k = $i + 6;					$j = $i + 12;					if ($j == 16)					{						$j = 5;					}					$p[] = self::_toAPRMD5((ord($binary[$i]) << 16) | (ord($binary[$k]) << 8) | (ord($binary[$j])), 5);				}				return '$apr1$' . $salt . '$' . implode('', $p) . self::_toAPRMD5(ord($binary[11]), 3);			case 'md5-hex':			default:				$encrypted = ($salt) ? md5($plaintext . $salt) : md5($plaintext);				return ($show_encrypt) ? '{MD5}' . $encrypted : $encrypted;		}	}	/**	 * Returns a salt for the appropriate kind of password encryption.	 * Optionally takes a seed and a plaintext password, to extract the seed	 * of an existing password, or for encryption types that use the plaintext	 * in the generation of the salt.	 *	 * @param   string  $encryption  The kind of password encryption to use.	 *                               Defaults to md5-hex.	 * @param   string  $seed        The seed to get the salt from (probably a	 *                               previously generated password). Defaults to	 *                               generating a new seed.	 * @param   string  $plaintext   The plaintext password that we're generating	 *                               a salt for. Defaults to none.	 *	 * @return  string  The generated or extracted salt.	 *	 * @since   11.1	 */	public static function getSalt($encryption = 'md5-hex', $seed = '', $plaintext = '')	{		// Encrypt the password.		switch ($encryption)		{			case 'crypt':			case 'crypt-des':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 2);				}				else				{					return substr(md5(mt_rand()), 0, 2);				}				break;			case 'crypt-md5':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 12);				}				else				{					return '$1$' . substr(md5(mt_rand()), 0, 8) . '$';				}				break;			case 'crypt-blowfish':				if ($seed)				{					return substr(preg_replace('|^{crypt}|i', '', $seed), 0, 16);				}				else				{					return '$2$' . substr(md5(mt_rand()), 0, 12) . '$';				}				break;			case 'ssha':				if ($seed)				{					return substr(preg_replace('|^{SSHA}|', '', $seed), -20);				}				else				{					return mhash_keygen_s2k(MHASH_SHA1, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);				}				break;			case 'smd5':				if ($seed)				{					return substr(preg_replace('|^{SMD5}|', '', $seed), -16);				}				else				{					return mhash_keygen_s2k(MHASH_MD5, $plaintext, substr(pack('h*', md5(mt_rand())), 0, 8), 4);				}				break;			case 'aprmd5': /* 64 characters that are valid for APRMD5 passwords. */				$APRMD5 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';				if ($seed)				{					return substr(preg_replace('/^\$apr1\$(.{8}).*/', '\\1', $seed), 0, 8);				}				else				{					$salt = '';					for ($i = 0; $i < 8; $i++)					{						$salt .= $APRMD5{rand(0, 63)};					}					return $salt;				}				break;			default:				$salt = '';				if ($seed)				{					$salt = $seed;				}				return $salt;				break;		}	}	/**	 * Generate a random password	 *	 * @param   integer  $length  Length of the password to generate	 *	 * @return  string  Random Password	 *	 * @since   11.1	 */	public static function genRandomPassword($length = 8)	{		$salt = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";		$base = strlen($salt);		$makepass = '';		/*		 * Start with a cryptographic strength random string, then convert it to		 * a string with the numeric base of the salt.		 * Shift the base conversion on each character so the character		 * distribution is even, and randomize the start shift so it's not		 * predictable.		 */		$random = JCrypt::genRandomBytes($length + 1);		$shift = ord($random[0]);		for ($i = 1; $i <= $length; ++$i)		{			$makepass .= $salt[($shift + ord($random[$i])) % $base];			$shift += ord($random[$i]);		}		return $makepass;	}	/**	 * Converts to allowed 64 characters for APRMD5 passwords.	 *	 * @param   string   $value  The value to convert.	 * @param   integer  $count  The number of characters to convert.	 *	 * @return  string  $value converted to the 64 MD5 characters.	 *	 * @since   11.1	 */	protected static function _toAPRMD5($value, $count)	{		/* 64 characters that are valid for APRMD5 passwords. */		$APRMD5 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';		$aprmd5 = '';		$count = abs($count);		while (--$count)		{			$aprmd5 .= $APRMD5[$value & 0x3f];			$value >>= 6;		}		return $aprmd5;	}	/**	 * Converts hexadecimal string to binary data.	 *	 * @param   string  $hex  Hex data.	 *	 * @return  string  Binary data.	 *	 * @since   11.1	 */	private static function _bin($hex)	{		$bin = '';		$length = strlen($hex);		for ($i = 0; $i < $length; $i += 2)		{			$tmp = sscanf(substr($hex, $i, 2), '%x');			$bin .= chr(array_shift($tmp));		}		return $bin;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$doc = JFactory::getDocument();$lang = JFactory::getLanguage();// Add JavaScript FrameworksJHtml::_('bootstrap.framework');JHtml::_('bootstrap.tooltip');// Add Stylesheets$doc->addStyleSheet('templates/' .$this->template. '/css/template.css');// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Detecting Active Variables$option   = $app->input->getCmd('option', '');$view     = $app->input->getCmd('view', '');$layout   = $app->input->getCmd('layout', '');$task     = $app->input->getCmd('task', '');$itemid   = $app->input->getCmd('Itemid', '');$sitename = $app->getCfg('sitename');// Check if debug is on$config = JFactory::getConfig();$debug  = (boolean) $config->get('debug');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" ><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<meta http-equiv="X-UA-Compatible" content="IE=edge" />	<jdoc:include type="head" />	<script type="text/javascript">		window.addEvent('domready', function ()		{			document.getElementById('form-login').username.select();			document.getElementById('form-login').username.focus();		});	</script>	<style type="text/css">		/* Responsive Styles */		@media (max-width: 480px) {			.view-login .container {				margin-top: -170px;			}			.btn {				font-size: 13px;				padding: 4px 10px 4px;			}		}		<?php if ($debug) : ?>			.view-login .container {				position: static;				margin-top: 20px;				margin-left: auto;				margin-right: auto;			}			.view-login .navbar-fixed-bottom {				display: none;			}		<?php endif; ?>	</style>	<!--[if lt IE 9]>		<script src="../media/jui/js/html5.js"></script>	<![endif]--></head><body class="site <?php echo $option . " view-" . $view . " layout-" . $layout . " task-" . $task . " itemid-" . $itemid . " ";?>">	<!-- Container -->	<div class="container">		<div id="content">			<!-- Begin Content -->			<div id="element-box" class="login well">				<img src="<?php echo $this->baseurl; ?>/templates/<?php echo $this->template ?>/images/joomla.png" alt="Joomla!" />				<hr />				<jdoc:include type="message" />				<jdoc:include type="component" />			</div>			<noscript>				<?php echo JText::_('JGLOBAL_WARNJAVASCRIPT') ?>			</noscript>			<!-- End Content -->		</div>	</div>	<div class="navbar navbar-fixed-bottom hidden-phone">		<p class="pull-right">&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>		<a class="login-joomla" href="http://www.joomla.org" class="hasTooltip" title="<?php echo JText::_('TPL_ISIS_ISFREESOFTWARE');?>">Joomla!&#174;</a>		<a href="<?php echo JURI::root(); ?>" class="pull-left"><i class="icon-share icon-white"></i> <?php echo JText::_('COM_LOGIN_RETURN_TO_SITE_HOME_PAGE') ?></a>	</div>	<jdoc:include type="modules" name="debug" style="none" /></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users component helper. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersHelper{	/**	 * @var    JObject  A cache for the available actions.	 * @since  1.6	 */	protected static $actions;	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_USERS_SUBMENU_USERS'),			'index.php?option=com_users&view=users',			$vName == 'users'		);		// Groups and Levels are restricted to core.admin		$canDo = self::getActions();		if ($canDo->get('core.admin'))		{			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_GROUPS'),				'index.php?option=com_users&view=groups',				$vName == 'groups'			);			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_LEVELS'),				'index.php?option=com_users&view=levels',				$vName == 'levels'			);			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_NOTES'),				'index.php?option=com_users&view=notes',				$vName == 'notes'			);			$extension = JFactory::getApplication()->input->getString('extension');			JHtmlSidebar::addEntry(				JText::_('COM_USERS_SUBMENU_NOTE_CATEGORIES'),				'index.php?option=com_categories&extension=com_users',				$vName == 'categories' || $extension == 'com_users'			);		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since   1.6	 * @todo    Refactor to work with notes	 */	public static function getActions()	{		if (empty(self::$actions))		{			$user = JFactory::getUser();			self::$actions = new JObject;			$actions = JAccess::getActions('com_users');			foreach ($actions as $action)			{				self::$actions->set($action->name, $user->authorise($action->name, 'com_users'));			}		}		return self::$actions;	}	/**	 * Get a list of filter options for the blocked state of a user.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getStateOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('JENABLED'));		$options[] = JHtml::_('select.option', '1', JText::_('JDISABLED'));		return $options;	}	/**	 * Get a list of filter options for the activated state of a user.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getActiveOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '0', JText::_('COM_USERS_ACTIVATED'));		$options[] = JHtml::_('select.option', '1', JText::_('COM_USERS_UNACTIVATED'));		return $options;	}	/**	 * Get a list of the user groups for filtering.	 *	 * @return  array  An array of JHtmlOption elements.	 *	 * @since   1.6	 */	public static function getGroups()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value')			->select('a.title AS text')			->select('COUNT(DISTINCT b.id) AS level')			->from('#__usergroups as a')			->join('LEFT', '#__usergroups  AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseNotice(500, $e->getMessage());			return null;		}		foreach ($options as &$option)		{			$option->text = str_repeat('- ', $option->level).$option->text;		}		return $options;	}	/**	 * Creates a list of range options used in filter select list	 * used in com_users on users view	 *	 * @return  array	 *	 * @since   2.5	 */	public static function getRangeOptions()	{		$options = array(			JHtml::_('select.option', 'today', JText::_('COM_USERS_OPTION_RANGE_TODAY')),			JHtml::_('select.option', 'past_week', JText::_('COM_USERS_OPTION_RANGE_PAST_WEEK')),			JHtml::_('select.option', 'past_1month', JText::_('COM_USERS_OPTION_RANGE_PAST_1MONTH')),			JHtml::_('select.option', 'past_3month', JText::_('COM_USERS_OPTION_RANGE_PAST_3MONTH')),			JHtml::_('select.option', 'past_6month', JText::_('COM_USERS_OPTION_RANGE_PAST_6MONTH')),			JHtml::_('select.option', 'past_year', JText::_('COM_USERS_OPTION_RANGE_PAST_YEAR')),			JHtml::_('select.option', 'post_year', JText::_('COM_USERS_OPTION_RANGE_POST_YEAR')),		);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Search component helper. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.5 */class SearchHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 * @since   1.6	 */	public static function addSubmenu($vName)	{		// Not required.	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_search';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	public static function santiseSearchWord(&$searchword, $searchphrase)	{		$ignored = false;		$lang = JFactory::getLanguage();		$tag			= $lang->getTag();		$search_ignore	= $lang->getIgnoredSearchWords();		// Deprecated in 1.6 use $lang->getIgnoredSearchWords instead		$ignoreFile		= $lang->getLanguagePath() . '/' . $tag . '/' . $tag.'.ignore.php';		if (file_exists($ignoreFile))		{			include $ignoreFile;		}		// check for words to ignore		$aterms = explode(' ', JString::strtolower($searchword));		// first case is single ignored word		if (count($aterms) == 1 && in_array(JString::strtolower($searchword), $search_ignore))		{			$ignored = true;		}		// filter out search terms that are too small		$lower_limit = $lang->getLowerLimitSearchWord();		foreach ($aterms as $aterm)		{			if (JString::strlen($aterm) < $lower_limit)			{				$search_ignore[] = $aterm;			}		}		// next is to remove ignored words from type 'all' or 'any' (not exact) searches with multiple words		if (count($aterms) > 1 && $searchphrase != 'exact')		{			$pruned = array_diff($aterms, $search_ignore);			$searchword = implode(' ', $pruned);		}		return $ignored;	}	/**	 * @since  1.5	 */	public static function limitSearchWord(&$searchword)	{		$restriction = false;		$lang = JFactory::getLanguage();		// limit searchword to a maximum of characters		$upper_limit = $lang->getUpperLimitSearchWord();		if (JString::strlen($searchword) > $upper_limit)		{			$searchword		= JString::substr($searchword, 0, $upper_limit - 1);			$restriction	= true;		}		// searchword must contain a minimum of characters		if ($searchword && JString::strlen($searchword) < $lang->getLowerLimitSearchWord())		{			$searchword		= '';			$restriction	= true;		}		return $restriction;	}	/**	 * Logs a search term	 *	 * @param   string  $search_term  The term being searched	 *	 * @return  void	 *	 * @since   1.5	 * @deprecated  4.0  Use JSearchHelper::logSearch() instead	 */	public static function logSearch($search_term)	{		JLog::add(__METHOD__ . '() is deprecated, use JSearchHelper::logSearch() instead.', JLog::WARNING, 'deprecated');		JSearchHelper::logSearch($search_term, 'com_search');	}	/**	 * Prepares results from search for display	 *	 * @param string The source string	 * @param string The searchword to select around	 * @return  string	 *	 * @since  1.5	 */	public static function prepareSearchContent($text, $searchword)	{		// strips tags won't remove the actual jscript		$text = preg_replace("'<script[^>]*>.*?</script>'si", "", $text);		$text = preg_replace('/{.+?}/', '', $text);		//$text = preg_replace('/<a\s+.*?href="([^"]+)"[^>]*>([^<]+)<\/a>/is','\2', $text);		// replace line breaking tags with whitespace		$text = preg_replace("'<(br[^/>]*?/|hr[^/>]*?/|/(div|h[1-6]|li|p|td))>'si", ' ', $text);		return self::_smartSubstr(strip_tags($text), $searchword);	}	/**	 * Checks an object for search terms (after stripping fields of HTML)	 *	 * @param object The object to check	 * @param string Search words to check for	 * @param array List of object variables to check against	 * @returns boolean True if searchTerm is in object, false otherwise	 */	public static function checkNoHtml($object, $searchTerm, $fields)	{		$searchRegex = array(				'#<script[^>]*>.*?</script>#si',				'#<style[^>]*>.*?</style>#si',				'#<!.*?(--|]])>#si',				'#<[^>]*>#i'				);		$terms = explode(' ', $searchTerm);		if (empty($fields))		{			return false;		}		foreach ($fields as $field)		{			if (!isset($object->$field))			{				continue;			}			$text = $object->$field;			foreach ($searchRegex as $regex)			{				$text = preg_replace($regex, '', $text);			}			foreach ($terms as $term)			{				if (JString::stristr($text, $term) !== false)				{					return true;				}			}		}		return false;	}	/**	 * returns substring of characters around a searchword	 *	 * @param string The source string	 * @param int Number of chars to return	 * @param string The searchword to select around	 * @return  string	 *	 * @since  1.5	 */	public static function _smartSubstr($text, $searchword)	{		$lang = JFactory::getLanguage();		$length = $lang->getSearchDisplayedCharactersNumber();		$textlen = JString::strlen($text);		$lsearchword = JString::strtolower($searchword);		$wordfound = false;		$pos = 0;		while ($wordfound === false && $pos < $textlen)		{			if (($wordpos = @JString::strpos($text, ' ', $pos + $length)) !== false)			{				$chunk_size = $wordpos - $pos;			} else {				$chunk_size = $length;			}			$chunk = JString::substr($text, $pos, $chunk_size);			$wordfound = JString::strpos(JString::strtolower($chunk), $lsearchword);			if ($wordfound === false)			{				$pos += $chunk_size + 1;			}		}		if ($wordfound !== false)		{			return (($pos > 0) ? '...&#160;' : '') . $chunk . '&#160;...';		}		else		{			if (($wordpos = @JString::strpos($text, ' ', $length)) !== false)			{				return JString::substr($text, 0, $wordpos) . '&#160;...';			} else {				return JString::substr($text, 0, $length);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view level model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelLevel extends JModelAdmin{	/**	 * @var	array	A list of the access levels in use.	 * @since   1.6	 */	protected $levelsInUse = null;	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	$record	A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		// Check if the access level is being used by any content.		if ($this->levelsInUse === null)		{			// Populate the list once.			$this->levelsInUse = array();			$db		= $this->getDbo();			$query	= $db->getQuery(true)				->select('DISTINCT access');				// from is added dynamically			// Get all the tables and the prefix			$tables = $db->getTableList();			//$fields = $db->getTableFields($tables);			$prefix = $db->getPrefix();			foreach ($tables as $table)			{				// Get all of the columns in the table				$fields = $db->getTableColumns($table);				// We are looking for the access field.  If custom tables are using something other				// than the 'access' field they are on their own unfortunately.				// Also make sure the table prefix matches the live db prefix (eg, it is not a "bak_" table)				if ((strpos($table, $prefix) === 0) && (isset($fields['access'])))				{					// Lookup the distinct values of the field.					$query->clear('from')						->from($db->quoteName($table));					$db->setQuery($query);					try					{						$values = $db->loadColumn();					}					catch (RuntimeException $e)					{						$this->setError($e->getMessage());						return false;					}					$this->levelsInUse = array_merge($this->levelsInUse, $values);					// TODO Could assemble an array of the tables used by each view level list those,					// giving the user a clue in the error where to look.				}			}			// Get uniques.			$this->levelsInUse = array_unique($this->levelsInUse);			// Ok, after all that we are ready to check the record :)		}		if (in_array($record->id, $this->levelsInUse))		{			$this->setError(JText::sprintf('COM_USERS_ERROR_VIEW_LEVEL_IN_USE', $record->id, $record->title));			return false;		}		return parent::canDelete($record);	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	 * @since   1.6	*/	public function getTable($type = 'Viewlevel', $prefix = 'JTable', $config = array())	{		$return = JTable::getInstance($type, $prefix, $config);		return $return;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		// Convert the params field to an array.		$result->rules = json_decode($result->rules);		return $result;	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Get the form.		$form = $this->loadForm('com_users.level', 'level', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.edit.level.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_users.level', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $groups = '')	{		parent::preprocessForm($form, $data, 'user');	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		if (!isset($data['rules']))		{			$data['rules'] = array();		}		return parent::save($data);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo = LanguagesHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'language.cancel' || document.formvalidator.isValid(document.id('language-form')))		{			Joomla.submitform(task, document.getElementById('language-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_languages&layout=edit&lang_id='.(int) $this->item->lang_id); ?>" method="post" name="adminForm" id="language-form" class="form-validate form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('JDETAILS', true)); ?>			<div class="control-group">				<div class="controls">					<?php if ($this->item->lang_id) : ?>						<?php echo JText::sprintf('JGLOBAL_RECORD_NUMBER', $this->item->lang_id); ?>					<?php else : ?>						<?php echo JText::_('COM_LANGUAGES_VIEW_LANGUAGE_EDIT_NEW_TITLE'); ?>					<?php endif; ?>				</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title_native'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title_native'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('sef'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('sef'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('image'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('image'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lang_code'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lang_code'); ?>					</div>			</div>			<?php if ($canDo->get('core.edit.state')) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('published'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('description'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('description'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lang_id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lang_id'); ?>					</div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>			<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'site_name', JText::_('COM_LANGUAGES_FIELDSET_SITE_NAME_LABEL', true)); ?>			<?php foreach ($this->form->getFieldset('site_name') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL Server database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/cc296152(SQL.90).aspx * @since       12.1 */class JDatabaseDriverSqlsrv extends JDatabaseDriver{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlsrv';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = '[]';	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 * @since  12.1	 */	protected $nullDate = '1900-01-01 00:00:00';	/**	 * @var    string  The minimum supported database version.	 * @since  12.1	 */	protected static $dbMinimum = '10.50.1600.1';	/**	 * Test to see if the SQLSRV connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('sqlsrv_connect'));	}	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : '';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['select'] = (isset($options['select'])) ? (bool) $options['select'] : true;		// Finalize initialisation		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_resource($this->connection))		{			sqlsrv_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		// Build the connection configuration array.		$config = array(			'Database' => $this->options['database'],			'uid' => $this->options['user'],			'pwd' => $this->options['password'],			'CharacterSet' => 'UTF-8',			'ReturnDatesAsStrings' => true);		// Make sure the SQLSRV extension for PHP is installed and enabled.		if (!function_exists('sqlsrv_connect'))		{			throw new RuntimeException('PHP extension sqlsrv_connect is not available.');		}		// Attempt to connect to the server.		if (!($this->connection = @ sqlsrv_connect($this->options['host'], $config)))		{			throw new RuntimeException('Database sqlsrv_connect failed');		}		// Make sure that DB warnings are not returned as errors.		sqlsrv_configure('WarningsReturnAsErrors', 0);		// If auto-select is enabled select the given database.		if ($this->options['select'] && !empty($this->options['database']))		{			$this->select($this->options['database']);		}	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		if (is_resource($this->connection))		{			sqlsrv_close($this->connection);		}		$this->connection = null;	}	/**	 * Get table constraints	 *	 * @param   string  $tableName  The name of the database table.	 *	 * @return  array  Any constraints available for the table.	 *	 * @since   12.1	 */	protected function getTableConstraints($tableName)	{		$this->connect();		$query = $this->getQuery(true);		$this->setQuery(			'SELECT CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME = ' . $query->quote($tableName)		);		return $this->loadColumn();	}	/**	 * Rename constraints.	 *	 * @param   array   $constraints  Array(strings) of table constraints	 * @param   string  $prefix       A string	 * @param   string  $backup       A string	 *	 * @return  void	 *	 * @since   12.1	 */	protected function renameConstraints($constraints = array(), $prefix = null, $backup = null)	{		$this->connect();		foreach ($constraints as $constraint)		{			$this->setQuery('sp_rename ' . $constraint . ',' . str_replace($prefix, $backup, $constraint));			$this->execute();		}	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * The escaping for MSSQL isn't handled in the driver though that would be nice.  Because of this we need	 * to handle the escaping ourselves.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$result = addslashes($text);		$result = str_replace("\'", "''", $result);		$result = str_replace('\"', '"', $result);		$result = str_replace('\/', '/', $result);		if ($extra)		{			// We need the below str_replace since the search in sql server doesn't recognize _ character.			$result = str_replace('_', '[_]', $result);		}		return $result;	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		// TODO: Run a blank query here		return true;	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverSqlsrv  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true);		if ($ifExists)		{			$this->setQuery(				'IF EXISTS(SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = ' . $query->quote($tableName) . ') DROP TABLE ' . $tableName			);		}		else		{			$this->setQuery('DROP TABLE ' . $tableName);		}		$this->execute();		return $this;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		return sqlsrv_rows_affected($this->cursor);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 */	public function getCollation()	{		// TODO: Not fake this		return 'MSSQL UTF-8 (UCS2)';	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		$this->connect();		return sqlsrv_num_rows($cursor ? $cursor : $this->cursor);	}	/**	 * Retrieves field information about the given tables.	 *	 * @param   mixed    $table     A table name	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$result = array();		$table_temp = $this->replacePrefix((string) $table);		// Set the query to get the table fields statement.		$this->setQuery(			'SELECT column_name as Field, data_type as Type, is_nullable as \'Null\', column_default as \'Default\'' .			' FROM information_schema.columns WHERE table_name = ' . $this->quote($table_temp)		);		$fields = $this->loadObjectList();		// If we only want the type as the value add just that to the list.		if ($typeOnly)		{			foreach ($fields as $field)			{				$result[$field->Field] = preg_replace("/[(0-9)]/", '', $field->Type);			}		}		// If we want the whole field data object add that to the list.		else		{			foreach ($fields as $field)			{				$result[$field->Field] = $field;			}		}		return $result;	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * This is unsupported by MSSQL.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		return '';	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		// TODO To implement.		return array();	}	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		// Set the query to get the tables statement.		$this->setQuery('SELECT name FROM ' . $this->getDatabase() . '.sys.Tables WHERE type = \'U\';');		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$version = sqlsrv_server_info($this->connection);		return $version['SQLServerVersion'];	}	/**	 * Inserts a row into a table based on an object's properties.	 *	 * @param   string  $table    The name of the database table to insert into.	 * @param   object  &$object  A reference to an object whose public properties match the table fields.	 * @param   string  $key      The name of the primary key. If provided the object property is updated.	 *	 * @return  boolean    True on success.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function insertObject($table, &$object, $key = null)	{		$fields = array();		$values = array();		$statement = 'INSERT INTO ' . $this->quoteName($table) . ' (%s) VALUES (%s)';		foreach (get_object_vars($object) as $k => $v)		{			if (is_array($v) or is_object($v) or $v === null)			{				continue;			}			if (!$this->checkFieldExists($table, $k))			{				continue;			}			if ($k[0] == '_')			{				// Internal field				continue;			}			if ($k == $key && $key == 0)			{				continue;			}			$fields[] = $this->quoteName($k);			$values[] = $this->Quote($v);		}		// Set the query and execute the insert.		$this->setQuery(sprintf($statement, implode(',', $fields), implode(',', $values)));		if (!$this->execute())		{			return false;		}		$id = $this->insertid();		if ($key && $id)		{			$object->$key = $id;		}		return true;	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		// TODO: SELECT IDENTITY		$this->setQuery('SELECT @@IDENTITY');		return (int) $this->loadResult();	}	/**	 * Method to get the first field of the first row of the result set from the database query.	 *	 * @return  mixed  The return value or null if the query failed.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadResult()	{		$ret = null;		// Execute the query and get the result set cursor.		if (!($cursor = $this->execute()))		{			return null;		}		// Get the first row from the result set as an array.		if ($row = sqlsrv_fetch_array($cursor, SQLSRV_FETCH_NUMERIC))		{			$ret = $row[0];		}		// Free up system resources and return.		$this->freeResult($cursor);		// For SQLServer - we need to strip slashes		$ret = stripslashes($ret);		return $ret;	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 * @throws  Exception	 */	public function execute()	{		$this->connect();		if (!is_resource($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query = $this->limit($query, $this->limit, $this->offset);		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// SQLSrv_num_rows requires a static or keyset cursor.		if (strncmp(ltrim(strtoupper($query)), 'SELECT', strlen('SELECT')) == 0)		{			$array = array('Scrollable' => SQLSRV_CURSOR_KEYSET);		}		else		{			$array = array();		}		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @sqlsrv_query($this->connection, $query, array(), $array);		// If an error occurred handle it.		if (!$this->cursor)		{			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					// Get the error number and message.					$errors = sqlsrv_errors();					$this->errorNum = $errors[0]['SQLSTATE'];					$this->errorMsg = $errors[0]['message'] . 'SQL=' . $query;					// Throw the normal query exception.					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				// Get the error number and message.				$errors = sqlsrv_errors();				$this->errorNum = $errors[0]['SQLSTATE'];				$this->errorMsg = $errors[0]['message'] . 'SQL=' . $query;				// Throw the normal query exception.				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->cursor;	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   12.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$escaped = false;		$startPos = 0;		$quoteChar = '';		$literal = '';		$query = trim($query);		$n = strlen($query);		while ($startPos < $n)		{			$ip = strpos($query, $prefix, $startPos);			if ($ip === false)			{				break;			}			$j = strpos($query, "N'", $startPos);			$k = strpos($query, '"', $startPos);			if (($k !== false) && (($k < $j) || ($j === false)))			{				$quoteChar = '"';				$j = $k;			}			else			{				$quoteChar = "'";			}			if ($j === false)			{				$j = $n;			}			$literal .= str_replace($prefix, $this->tablePrefix, substr($query, $startPos, $j - $startPos));			$startPos = $j;			$j = $startPos + 1;			if ($j >= $n)			{				break;			}			// Quote comes first, find end of quote			while (true)			{				$k = strpos($query, $quoteChar, $j);				$escaped = false;				if ($k === false)				{					break;				}				$l = $k - 1;				while ($l >= 0 && $query{$l} == '\\')				{					$l--;					$escaped = !$escaped;				}				if ($escaped)				{					$j = $k + 1;					continue;				}				break;			}			if ($k === false)			{				// Error in the query - no end quote; ignore it				break;			}			$literal .= substr($query, $startPos, $k - $startPos + 1);			$startPos = $k + 1;		}		if ($startPos < $n)		{			$literal .= substr($query, $startPos, $n - $startPos);		}		return $literal;	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		if (!$database)		{			return false;		}		if (!sqlsrv_query($this->connection, 'USE ' . $database, null, array('scrollable' => SQLSRV_CURSOR_STATIC)))		{			throw new RuntimeException('Could not connect to database');		}		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		// TODO: Remove this?	}	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		$this->setQuery('COMMIT TRANSACTION');		$this->execute();	}	/**	 * Method to roll back a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionRollback()	{		$this->connect();		$this->setQuery('ROLLBACK TRANSACTION');		$this->execute();	}	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		$this->setQuery('BEGIN TRANSACTION');		$this->execute();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return sqlsrv_fetch_array($cursor ? $cursor : $this->cursor, SQLSRV_FETCH_NUMERIC);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return sqlsrv_fetch_array($cursor ? $cursor : $this->cursor, SQLSRV_FETCH_ASSOC);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return sqlsrv_fetch_object($cursor ? $cursor : $this->cursor, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		sqlsrv_free_stmt($cursor ? $cursor : $this->cursor);	}	/**	 * Method to check and see if a field exists in a table.	 *	 * @param   string  $table  The table in which to verify the field.	 * @param   string  $field  The field to verify.	 *	 * @return  boolean  True if the field exists in the table.	 *	 * @since   12.1	 */	protected function checkFieldExists($table, $field)	{		$this->connect();		$table = $this->replacePrefix((string) $table);		$query = "SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS" . " WHERE TABLE_NAME = '$table' AND COLUMN_NAME = '$field'" .			" ORDER BY ORDINAL_POSITION";		$this->setQuery($query);		if ($this->loadResult())		{			return true;		}		else		{			return false;		}	}	/**	 * Method to wrap an SQL statement to provide a LIMIT and OFFSET behavior for scrolling through a result set.	 *	 * @param   string   $query   The SQL statement to process.	 * @param   integer  $limit   The maximum affected rows to set.	 * @param   integer  $offset  The affected row offset to set.	 *	 * @return  string   The processed SQL statement.	 *	 * @since   12.1	 */	protected function limit($query, $limit, $offset)	{		$orderBy = stristr($query, 'ORDER BY');		if (is_null($orderBy) || empty($orderBy))		{			$orderBy = 'ORDER BY (select 0)';		}		$query = str_ireplace($orderBy, '', $query);		$rowNumberText = ',ROW_NUMBER() OVER (' . $orderBy . ') AS RowNumber FROM ';		$query = preg_replace('/\\s+FROM/', '\\1 ' . $rowNumberText . ' ', $query, 1);		$query = 'SELECT TOP ' . $this->limit . ' * FROM (' . $query . ') _myResults WHERE RowNumber > ' . $this->offset;		return $query;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Table prefix	 * @param   string  $prefix    For the table - used to rename constraints in non-mysql databases	 *	 * @return  JDatabaseDriverSqlsrv  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$constraints = array();		if (!is_null($prefix) && !is_null($backup))		{			$constraints = $this->getTableConstraints($oldTable);		}		if (!empty($constraints))		{			$this->renameConstraints($constraints, $prefix, $backup);		}		$this->setQuery("sp_rename '" . $oldTable . "', '" . $newTable . "'");		return $this->execute();	}	/**	 * Locks a table in the database.	 *	 * @param   string  $tableName  The name of the table to lock.	 *	 * @return  JDatabaseDriverSqlsrv  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function lockTable($tableName)	{		return $this;	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverSqlsrv  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Joomla Platform class for interacting with a Facebook API instance. * * @package     Joomla.Platform * @subpackage  Facebook * @since       13.1 */class JFacebook{	/**	 * @var    JRegistry  Options for the Facebook object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var    JFacebookOAuth  The OAuth client.	 * @since  13.1	 */	protected $oauth;	/**	 * @var    JFacebookUser  Facebook API object for user.	 * @since  13.1	 */	protected $user;	/**	* @var    JFacebookStatus  Facebook API object for status.	* @since  13.1	*/	protected $status;	/**	* @var    JFacebookCheckin  Facebook API object for checkin.	* @since  13.1	*/	protected $checkin;	/**	* @var    JFacebookEvent  Facebook API object for event.	* @since  13.1	*/	protected $event;	/**	* @var    JFacebookGroup  Facebook API object for group.	* @since  13.1	*/	protected $group;	/**	* @var    JFacebookLink  Facebook API object for link.	* @since  13.1	*/	protected $link;	/**	* @var    JFacebookNote  Facebook API object for note.	* @since  13.1	*/	protected $note;	/**	* @var    JFacebookPost  Facebook API object for post.	* @since  13.1	*/	protected $post;	/**	* @var    JFacebookComment  Facebook API object for comment.	* @since  13.1	*/	protected $comment;	/**	* @var    JFacebookPhoto  Facebook API object for photo.	* @since  13.1	*/	protected $photo;	/**	* @var    JFacebookVideo  Facebook API object for video.	* @since  13.1	*/	protected $video;	/**	* @var    JFacebookAlbum  Facebook API object for album.	* @since  13.1	*/	protected $album;	/**	 * Constructor.	 *	 * @param   JFacebookOAuth  $oauth    OAuth client.	 * @param   JRegistry       $options  Facebook options object.	 * @param   JFacebookHttp   $client   The HTTP client object.	 *	 * @since   13.1	 */	public function __construct(JFacebookOAuth $oauth = null, JRegistry $options = null, JHttp $client = null)	{		$this->oauth = $oauth;		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'https://graph.facebook.com/');	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JFacebookObject  Facebook API object (status, user, friends etc).	 *	 * @since   13.1	 */	public function __get($name)	{		switch ($name)		{			case 'user':				if ($this->user == null)				{					$this->user = new JFacebookUser($this->options, $this->client, $this->oauth);				}				return $this->user;			case 'status':				if ($this->status == null)				{					$this->status = new JFacebookStatus($this->options, $this->client, $this->oauth);				}				return $this->status;			case 'checkin':				if ($this->checkin == null)				{					$this->checkin = new JFacebookCheckin($this->options, $this->client, $this->oauth);				}				return $this->checkin;			case 'event':				if ($this->event == null)				{					$this->event = new JFacebookEvent($this->options, $this->client, $this->oauth);				}				return $this->event;			case 'group':				if ($this->group == null)				{					$this->group = new JFacebookGroup($this->options, $this->client, $this->oauth);				}				return $this->group;			case 'link':				if ($this->link == null)				{					$this->link = new JFacebookLink($this->options, $this->client, $this->oauth);				}				return $this->link;			case 'note':				if ($this->note == null)				{					$this->note = new JFacebookNote($this->options, $this->client, $this->oauth);				}				return $this->note;			case 'post':				if ($this->post == null)				{					$this->post = new JFacebookPost($this->options, $this->client, $this->oauth);				}				return $this->post;			case 'comment':				if ($this->comment == null)				{					$this->comment = new JFacebookComment($this->options, $this->client, $this->oauth);				}				return $this->comment;			case 'photo':				if ($this->photo == null)				{					$this->photo = new JFacebookPhoto($this->options, $this->client, $this->oauth);				}				return $this->photo;			case 'video':				if ($this->video == null)				{					$this->video = new JFacebookVideo($this->options, $this->client, $this->oauth);				}				return $this->video;			case 'album':				if ($this->album == null)				{					$this->album = new JFacebookAlbum($this->options, $this->client, $this->oauth);				}				return $this->album;		}	}	/**	 * Get an option from the JFacebook instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JFacebook instance.	 *	* @param   string  $key    The name of the option to set.	* @param   mixed   $value  The option value to set.	*	* @return  JFacebook  This object for method chaining.	*	* @since   13.1	*/	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Post class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/post/ * @since       13.1 */class JFacebookPost extends JFacebookObject{	/**	 * Method to get a post. Requires authentication and read_stream permission for all data.	 *	 * @param   string  $post  The post id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPost($post)	{		return $this->get($post);	}	/**	 * Method to delete a post if it was created by this application. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deletePost($post)	{		return $this->deleteConnection($post);	}	/**	 * Method to get a post's comments. Requires authentication and read_stream permission.	 *	 * @param   string   $post    The post id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($post, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($post, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post     The post id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($post, $message)	{		// Set POST request parameters.		$data['message'] = $message;		return $this->createConnection($post, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get post's likes. Requires authentication and read_stream permission.	 *	 * @param   string   $post    The post id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($post, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($post, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($post)	{		return $this->createConnection($post, 'likes');	}	/**	 * Method to unlike a post. Requires authentication and publish_stream permission	 *	 * @param   string  $post  The post id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($post)	{		return $this->deleteConnection($post, 'likes');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo = UsersHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'group.cancel' || document.formvalidator.isValid(document.id('group-form')))		{			Joomla.submitform(task, document.getElementById('group-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_users&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="group-form" class="form-validate form-horizontal">	<fieldset>		<legend><?php echo JText::_('COM_USERS_USERGROUP_DETAILS');?></legend>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('title'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('title'); ?>			</div>		</div>		<div class="control-group">			<?php $parent_id = $this->form->getField('parent_id');?>			<?php if (!$parent_id->hidden) : ?>				<div class="control-label">					<?php echo $parent_id->label; ?>				</div>			<?php endif;?>			<div class="controls">				<?php echo $parent_id->input; ?>			</div>		</div>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentXML class, provides an easy interface to parse and display XML output * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentXml extends JDocument{	/**	 * Document name	 *	 * @var    string	 * @since  12.1	 */	protected $name = 'joomla';	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'application/xml';		// Set document type		$this->_type = 'xml';	}	/**	 * Render the document.	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since  11.1	 */	public function render($cache = false, $params = array())	{		parent::render();		JResponse::setHeader('Content-disposition', 'inline; filename="' . $this->getName() . '.xml"', true);		return $this->getBuffer();	}	/**	 * Returns the document name	 *	 * @return  string	 *	 * @since  11.1	 */	public function getName()	{		return $this->name;	}	/**	 * Sets the document name	 *	 * @param   string  $name  Document name	 *	 * @return  JDocumentXml instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setName($name = 'joomla')	{		$this->name = $name;		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Link class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/link/ * @since       13.1 */class JFacebookLink extends JFacebookObject{	/**	 * Method to get a link. Requires authentication and read_stream permission for non-public links.	 *	 * @param   string  $link  The link id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLink($link)	{		return $this->get($link);	}	/**	 * Method to get a link's comments. Requires authentication and read_stream permission for non-public links.	 *	 * @param   string   $link    The link id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($link, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($link, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a link. Requires authentication and publish_stream permission.	 *	 * @param   string  $link     The link id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($link, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($link, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get link's likes. Requires authentication and read_stream permission for non-public links.	 *	 * @param   string   $link    The link id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($link, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($link, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a link. Requires authentication and publish_stream permission.	 *	 * @param   string  $link  The link id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($link)	{		return $this->createConnection($link, 'likes');	}	/**	 * Method to unlike a link. Requires authentication and publish_stream permission.	 *	 * @param   string  $link  The link id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($link)	{		return $this->deleteConnection($link, 'likes');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Abstract Extension Model * * @abstract * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerModel extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'name',				'client_id',				'enabled',				'type',				'folder',				'extension_id',			);		}		parent::__construct($config);	}	/**	 * Returns an object list	 *	 * @param   string  $query       The query	 * @param   int     $limitstart  Offset	 * @param   int     $limit       The number of records	 *	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$ordering	= $this->getState('list.ordering');		$search		= $this->getState('filter.search');		// Replace slashes so preg_match will work		$search 	= str_replace('/', ' ', $search);		$db			= $this->getDbo();		if ($ordering == 'name' || (!empty($search) && stripos($search, 'id:') !== 0))		{			$db->setQuery($query);			$result = $db->loadObjectList();			$lang = JFactory::getLanguage();			$this->translate($result);			if (!empty($search))			{				foreach ($result as $i => $item)				{					if (!preg_match("/$search/i", $item->name))					{						unset($result[$i]);					}				}			}			JArrayHelper::sortObjects($result, $this->getState('list.ordering'), $this->getState('list.direction') == 'desc' ? -1 : 1, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			$query->order($db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array  &$items  The array of objects	 *	 * @return  array The array of translated objects	 */	private function translate(&$items)	{		$lang = JFactory::getLanguage();		foreach ($items as &$item)		{			if (strlen($item->manifest_cache))			{				$data = json_decode($item->manifest_cache);				if ($data)				{					foreach ($data as $key => $value)					{						if ($key == 'type')						{							// Ignore the type field							continue;						}						$item->$key = $value;					}				}			}			$item->author_info = @$item->authorEmail . '<br />' . @$item->authorUrl;			$item->client = $item->client_id ? JText::_('JADMINISTRATOR') : JText::_('JSITE');			$path = $item->client_id ? JPATH_ADMINISTRATOR : JPATH_SITE;			switch ($item->type)			{				case 'component':					$extension = $item->element;					$source = JPATH_ADMINISTRATOR . '/components/' . $extension;						$lang->load("$extension.sys", JPATH_ADMINISTRATOR, null, false, false)					||	$lang->load("$extension.sys", $source, null, false, false)					||	$lang->load("$extension.sys", JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					||	$lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				break;				case 'file':					$extension = 'files_' . $item->element;						$lang->load("$extension.sys", JPATH_SITE, null, false, false)					||	$lang->load("$extension.sys", JPATH_SITE, $lang->getDefault(), false, false);				break;				case 'library':					$extension = 'lib_' . $item->element;						$lang->load("$extension.sys", JPATH_SITE, null, false, false)					||	$lang->load("$extension.sys", JPATH_SITE, $lang->getDefault(), false, false);				break;				case 'module':					$extension = $item->element;					$source = $path . '/modules/' . $extension;						$lang->load("$extension.sys", $path, null, false, false)					||	$lang->load("$extension.sys", $source, null, false, false)					||	$lang->load("$extension.sys", $path, $lang->getDefault(), false, false)					||	$lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				break;				case 'package':					$extension = $item->element;						$lang->load("$extension.sys", JPATH_SITE, null, false, false)					||	$lang->load("$extension.sys", JPATH_SITE, $lang->getDefault(), false, false);				break;				case 'plugin':					$extension = 'plg_' . $item->folder . '_' . $item->element;					$source = JPATH_PLUGINS . '/' . $item->folder . '/' . $item->element;						$lang->load("$extension.sys", JPATH_ADMINISTRATOR, null, false, false)					||	$lang->load("$extension.sys", $source, null, false, false)					||	$lang->load("$extension.sys", JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					||	$lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				break;				case 'template':					$extension = 'tpl_' . $item->element;					$source = $path . '/templates/' . $item->element;						$lang->load("$extension.sys", $path, null, false, false)					||	$lang->load("$extension.sys", $source, null, false, false)					||	$lang->load("$extension.sys", $path, $lang->getDefault(), false, false)					||	$lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				break;			}			if (!in_array($item->type, array('language', 'template', 'library')))			{				$item->name = JText::_($item->name);			}			settype($item->description, 'string');			if (!in_array($item->type, array('language')))			{				$item->description = JText::_($item->description);			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Images class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiImages extends JMediawikiObject{	/**     * Method to get all images contained on the given page(s).     *     * @param   array    $titles         Page titles to retrieve images.     * @param   integer  $imagelimit     How many images to return.     * @param   boolean  $imagecontinue  When more results are available, use this to continue.     * @param   integer  $imimages       Only list these images.     * @param   string   $imdir          The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getImages(array $titles, $imagelimit = null, $imagecontinue = null, $imimages = null, $imdir = null)	{		// Build the request.		$path = '?action=query&prop=images';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($imagelimit))		{			$path .= '&imagelimit=' . $imagelimit;		}		if ($imagecontinue)		{			$path .= '&imagecontinue=';		}		if (isset($imimages))		{			$path .= '&imimages=' . $imimages;		}		if (isset($imdir))		{			$path .= '&imdir=' . $imdir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all images contained on the given page(s).     *     * @param   array  $titles  Page titles to retrieve links.     *     * @return  object     *     * @since   12.3     */	public function getImagesUsed(array $titles)	{		// Build the request.		$path = '?action=query&generator=images&prop=info';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all image information and upload history.     *     * @param   array    $liprop             What image information to get.     * @param   integer  $lilimit            How many image revisions to return.     * @param   string   $listart            Timestamp to start listing from.     * @param   string   $liend              Timestamp to stop listing at.     * @param   integer  $liurlwidth         URL to an image scaled to this width will be returned..     * @param   integer  $liurlheight        URL to an image scaled to this height will be returned.     * @param   string   $limetadataversion  Version of metadata to use.     * @param   string   $liurlparam         A handler specific parameter string.     * @param   boolean  $licontinue         When more results are available, use this to continue.     *     * @return  object     *     * @since   12.3     */	public function getImageInfo(array $liprop = null, $lilimit = null, $listart = null, $liend = null, $liurlwidth = null,		$liurlheight = null, $limetadataversion = null, $liurlparam = null, $licontinue = null)	{		// Build the request.		$path = '?action=query&prop=imageinfo';		if (isset($liprop))		{			$path .= '&liprop=' . $this->buildParameter($liprop);		}		if (isset($lilimit))		{			$path .= '&lilimit=' . $lilimit;		}		if (isset($listart))		{			$path .= '&listart=' . $listart;		}		if (isset($liend))		{			$path .= '&liend=' . $liend;		}		if (isset($liurlwidth))		{			$path .= '&liurlwidth=' . $liurlwidth;		}		if (isset($liurlheight))		{			$path .= '&liurlheight=' . $liurlheight;		}		if (isset($limetadataversion))		{			$path .= '&limetadataversion=' . $limetadataversion;		}		if (isset($liurlparam))		{			$path .= '&liurlparam=' . $liurlparam;		}		if ($licontinue)		{			$path .= '&alcontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to enumerate all images.     *     * @param   string   $aifrom        The image title to start enumerating from.     * @param   string   $aito          The image title to stop enumerating at.     * @param   string   $aiprefix      Search for all image titles that begin with this value.     * @param   integer  $aiminsize     Limit to images with at least this many bytes.     * @param   integer  $aimaxsize     Limit to images with at most this many bytes.     * @param   integer  $ailimit       How many images in total to return.     * @param   string   $aidir         The direction in which to list.     * @param   string   $aisha1        SHA1 hash of image.     * @param   string   $aisha1base36  SHA1 hash of image in base 36.     * @param   array    $aiprop        What image information to get.     * @param   string   $aimime        What MIME type to search for.     *     * @return  object     *     * @since   12.3     */	public function enumerateImages($aifrom = null, $aito = null, $aiprefix = null, $aiminsize = null, $aimaxsize = null, $ailimit = null,		$aidir = null, $aisha1 = null, $aisha1base36 = null, array $aiprop = null, $aimime = null)	{		// Build the request.		$path = '?action=query&list=allimages';		if (isset($aifrom))		{			$path .= '&aifrom=' . $aifrom;		}		if (isset($aito))		{			$path .= '&aito=' . $aito;		}		if (isset($aiprefix))		{			$path .= '&aiprefix=' . $aiprefix;		}		if (isset($aiminsize))		{			$path .= '&aiminsize=' . $aiminsize;		}		if (isset($aimaxsize))		{			$path .= '&aimaxsize=' . $aimaxsize;		}		if (isset($ailimit))		{			$path .= '&ailimit=' . $ailimit;		}		if (isset($aidir))		{			$path .= '&aidir=' . $aidir;		}		if (isset($aisha1))		{			$path .= '&aisha1=' . $aisha1;		}		if (isset($aisha1base36))		{			$path .= '&$aisha1base36=' . $aisha1base36;		}		if (isset($aiprop))		{			$path .= '&aiprop=' . $this->buildParameter($aiprop);		}		if (isset($aimime))		{			$path .= '&aimime=' . $aimime;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class working with users * * @package     Joomla.Platform * @subpackage  HTML * @since       11.4 */abstract class JHtmlUser{	/**	 * Displays a list of user groups.	 *	 * @param   boolean  $includeSuperAdmin  true to include super admin groups, false to exclude them	 *	 * @return  array  An array containing a list of user groups.	 *	 * @since   11.4	 */	public static function groups($includeSuperAdmin = false)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from($db->quoteName('#__usergroups') . ' AS a')			->join('LEFT', $db->quoteName('#__usergroups') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		for ($i = 0, $n = count($options); $i < $n; $i++)		{			$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;			$groups[] = JHtml::_('select.option', $options[$i]->value, $options[$i]->text);		}		// Exclude super admin groups if requested		if (!$includeSuperAdmin)		{			$filteredGroups = array();			foreach ($groups as $group)			{				if (!JAccess::checkGroup($group->value, 'core.admin'))				{					$filteredGroups[] = $group;				}			}			$groups = $filteredGroups;		}		return $groups;	}	/**	 * Get a list of users.	 *	 * @return  string	 *	 * @since   11.4	 */	public static function userlist()	{		// Get the database object and a new query object.		$db    = JFactory::getDbo();		$query = $db->getQuery(true);		// Build the query.		$query->select('a.id AS value, a.name AS text')			->from('#__users AS a')			->where('a.block = 0')			->order('a.name');		// Set the query and load the options.		$db->setQuery($query);		$items = $db->loadObjectList();		return $items;	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Categories class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiCategories extends JMediawikiObject{	/**     * Method to list all categories the page(s) belong to.     *     * @param   array    $titles        Page titles to retrieve categories.     * @param   array    $clprop        List of additional properties to get.     * @param   array    $clshow        Type of categories to show.     * @param   integer  $cllimit       Number of categories to return.     * @param   boolean  $clcontinue    Continue when more results are available.     * @param   array    $clcategories  Only list these categories.     * @param   string   $cldir         Direction of listing.     *     * @return  object     *     * @since   12.1     */	public function getCategories(array $titles, array $clprop = null, array $clshow = null, $cllimit = null, $clcontinue = false,		array $clcategories = null, $cldir = null)	{		// Build the request.		$path = '?action=query&prop=categories';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($clprop))		{			$path .= '&clprop=' . $this->buildParameter($clprop);		}		if (isset($clshow))		{			$path .= '&$clshow=' . $this->buildParameter($clshow);		}		if (isset($cllimit))		{			$path .= '&cllimit=' . $cllimit;		}		if ($clcontinue)		{			$path .= '&clcontinue=';		}		if (isset($clcategories))		{			$path .= '&clcategories=' . $this->buildParameter($clcategories);		}		if (isset($cldir))		{			$path .= '&cldir=' . $cldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get information about all categories used.     *     * @param   array  $titles  Page titles to retrieve categories.     *     * @return  object     *     * @since   12.3     */	public function getCategoriesUsed(array $titles)	{		// Build the request		$path = '?action=query&generator=categories&prop=info';		// Append titles to the request		$path .= '&titles=' . $this->buildParameter($titles);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get information about the given categories.     *     * @param   array    $titles      Page titles to retrieve categories.     * @param   boolean  $clcontinue  Continue when more results are available.     *     * @return  object     *     * @since   12.3     */	public function getCategoriesInfo(array $titles, $clcontinue = false)	{		// Build the request.		$path = '?action=query&prop=categoryinfo';		// Append titles to the request		$path .= '&titles=' . $this->buildParameter($titles);		if ($clcontinue)		{			$path .= '&clcontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to enumerate all categories.     *     * @param   string   $acfrom    The category to start enumerating from.     * @param   string   $acto      The category to stop enumerating at.     * @param   string   $acprefix  Search for all category titles that begin with this value.     * @param   string   $acdir     Direction to sort in.     * @param   integer  $acmin     Minimum number of category members.     * @param   integer  $acmax     Maximum number of category members.     * @param   integer  $aclimit   How many categories to return.     * @param   array    $acprop    Which properties to get.     *     * @return  object     *     * @since   12.3     */	public function enumerateCategories($acfrom = null, $acto = null, $acprefix = null, $acdir = null, $acmin = null,		$acmax = null, $aclimit = null, array $acprop = null)	{		// Build the request.		$path = '?action=query&list=allcategories';		if (isset($acfrom))		{			$path .= '&acfrom=' . $acfrom;		}		if (isset($acto))		{			$path .= '&acto=' . $acto;		}		if (isset($acprefix))		{			$path .= '&acprefix=' . $acprefix;		}		if (isset($acdir))		{			$path .= '&acdir=' . $acdir;		}		if (isset($acfrom))		{			$path .= '&acfrom=' . $acfrom;		}		if (isset($acmin))		{			$path .= '&acmin=' . $acmin;		}		if (isset($acmax))		{			$path .= '&acmax=' . $acmax;		}		if (isset($aclimit))		{			$path .= '&aclimit=' . $aclimit;		}		if (isset($acprop))		{			$path .= '&acprop=' . $this->buildParameter($acprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to list change tags.     *     * @param   array   $tgprop   List of properties to get.     * @param   string  $tglimit  The maximum number of tags to limit.     *     * @return  object     *     * @since   12.3     */	public function getChangeTags(array $tgprop = null, $tglimit = null)	{		// Build the request.		$path = '?action=query&list=tags';		if (isset($tgprop))		{			$path .= '&tgprop=' . $this->buildParameter($tgprop);		}		if (isset($tglimit))		{			$path .= '&tglimit=' . $tglimit;		}		// @TODO add support for $tgcontinue		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Category Controller * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesControllerCategory extends JControllerForm{	/**	 * The extension for which the categories apply.	 *	 * @var    string	 * @since  1.6	 */	protected $extension;	/**	 * Constructor.	 *	 * @param  array  $config  An optional associative array of configuration settings.	 *	 * @since  1.6	 * @see    JController	 */	public function __construct($config = array())	{		parent::__construct($config);		// Guess the JText message prefix. Defaults to the option.		if (empty($this->extension))		{			$this->extension = $this->input->get('extension', 'com_content');		}	}	/**	 * Method to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		return ($user->authorise('core.create', $this->extension) || count($user->getAuthorisedCategories($this->extension, 'core.create')));	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'parent_id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$user = JFactory::getUser();		$userId = $user->get('id');		// Check general edit permission first.		if ($user->authorise('core.edit', $this->extension))		{			return true;		}		// Check specific edit permission.		if ($user->authorise('core.edit', $this->extension . '.category.' . $recordId))		{			return true;		}		// Fallback on edit.own.		// First test if the permission is available.		if ($user->authorise('core.edit.own', $this->extension . '.category.' . $recordId) || $user->authorise('core.edit.own', $this->extension))		{			// Now test the owner is the user.			$ownerId = (int) isset($data['created_user_id']) ? $data['created_user_id'] : 0;			if (empty($ownerId) && $recordId)			{				// Need to do a lookup from the model.				$record = $this->getModel()->getItem($recordId);				if (empty($record))				{					return false;				}				$ownerId = $record->created_user_id;			}			// If the owner matches 'me' then do the test.			if ($ownerId == $userId)			{				return true;			}		}		return false;	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   1.6	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Category');		// Preset the redirect		$this->setRedirect('index.php?option=com_categories&view=categories&extension=' . $this->extension);		return parent::batch($model);	}	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $urlVar    The name of the URL variable for the id.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $urlVar = 'id')	{		$append = parent::getRedirectToItemAppend($recordId);		$append .= '&extension=' . $this->extension;		return $append;	}	/**	 * Gets the URL arguments to append to a list redirect.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToListAppend()	{		$append = parent::getRedirectToListAppend();		$append .= '&extension=' . $this->extension;		return $append;	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		$task = $this->getTask();		$item = $model->getItem();		if (isset($item->params) && is_array($item->params))		{			$registry = new JRegistry;			$registry->loadArray($item->params);			$item->params = (string) $registry;		}		if (isset($item->metadata) && is_array($item->metadata))		{			$registry = new JRegistry;			$registry->loadArray($item->metadata);			$item->metadata = (string) $registry;		}		$id = $item->id;		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of template extension records. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesModelTemplates extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'folder', 'a.folder',				'element', 'a.element',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'state', 'a.state',				'enabled', 'a.enabled',				'access', 'a.access', 'access_level',				'ordering', 'a.ordering',				'client_id', 'a.client_id',			);		}		parent::__construct($config);	}	/**	 * Override parent getItems to add extra XML metadata.	 *	 * @since   1.6	 */	public function getItems()	{		$items = parent::getItems();		foreach ($items as &$item)		{			$client = JApplicationHelper::getClientInfo($item->client_id);			$item->xmldata = TemplatesHelper::parseXMLTemplateFile($client->path, $item->element);		}		return $items;	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id, a.name, a.element, a.client_id'			)		);		$query->from($db->quoteName('#__extensions') . ' AS a');		// Filter by extension type.		$query->where($db->quoteName('type') . ' = ' . $db->quote('template'));		// Filter by client.		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('a.client_id = ' . (int) $clientId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.element LIKE ' . $search . ' OR a.name LIKE ' . $search);			}		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.folder')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', null);		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_templates');		$this->setState('params', $params);		// List state information.		parent::populateState('a.element', 'asc');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app	= JFactory::getApplication();$doc	= JFactory::getDocument();$lang	= JFactory::getLanguage();$input	= $app->input;$user	= JFactory::getUser();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Load template javascript$doc->addScript('templates/'.$this->template.'/js/template.js', 'text/javascript');// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo  $this->language; ?>" lang="<?php echo  $this->language; ?>" dir="<?php echo  $this->direction; ?>"><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<jdoc:include type="head" /><!-- Load additional CSS styles for Internet Explorer --><!--[if IE 8]>	<link href="templates/<?php echo  $this->template ?>/css/ie8.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if IE 7]>	<link href="templates/<?php echo  $this->template ?>/css/ie7.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--></head><body id="minwidth-body"><div id="containerwrap">	<!-- Header Logo -->	<div id="header">		<!-- Site Title and Skip to Content -->		<div class="title-ua">			<h1 class="title"><?php echo $this->params->get('showSiteName') ? $app->getCfg('sitename') . " " . JText::_('JADMINISTRATION') : JText::_('JADMINISTRATION'); ?></h1>			<div id="skiplinkholder"><p><a id="skiplink" href="#skiptarget"><?php echo JText::_('TPL_HATHOR_SKIP_TO_MAIN_CONTENT'); ?></a></p></div>		</div>	</div><!-- end header -->	<!-- Main Menu Navigation -->	<div id="nav">		<div id="module-menu">			<h2 class="element-invisible"><?php echo JText::_('TPL_HATHOR_MAIN_MENU'); ?></h2>			<jdoc:include type="modules" name="menu" />		</div>		<div class="clr"></div>	</div><!-- end nav -->	<!-- Status Module -->	<div id="module-status">		<jdoc:include type="modules" name="status"/>			<?php			//Display an harcoded logout			$task = $app->input->get('task');			if ($task == 'edit' || $task == 'editA' || $app->input->getInt('hidemainmenu'))			{				$logoutLink = '';			} else {				$logoutLink = JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');			}			$hideLinks = $app->input->getBool('hidemainmenu');			$output = array();			// Print the Preview link to Main site.			//$output[] = '<span class="viewsite"><a href="'.JURI::root().'" target="_blank">'.JText::_('JGLOBAL_VIEW_SITE').'</a></span>';			// Print the logout link.			//$output[] = '<span class="logout">' .($hideLinks ? '' : '<a href="'.$logoutLink.'">').JText::_('JLOGOUT').($hideLinks ? '' : '</a>').'</span>';			// Output the items.			foreach ($output as $item) :			echo $item;			endforeach;			?>	</div>	<!-- Content Area -->	<div id="content">		<!-- Component Title -->		<jdoc:include type="modules" name="title" />		<!-- System Messages -->		<jdoc:include type="message" />		<!-- Sub Menu Navigation -->		<div class="subheader">			<?php if (!$app->input->getInt('hidemainmenu')) : ?>				<h3 class="element-invisible"><?php echo JText::_('TPL_HATHOR_SUB_MENU'); ?></h3>				<jdoc:include type="modules" name="submenu" style="xhtmlid" id="submenu-box" />			<?php echo " " ?>			<?php else : ?>				<div id="no-submenu"></div>			<?php endif; ?>		</div>		<!-- Toolbar Icon Buttons -->		<div class="toolbar-box">			<jdoc:include type="modules" name="toolbar" style="xhtml" />			<div class="clr"></div>		</div>		<!-- Beginning of Actual Content -->		<div id="element-box">			<div id="container-collapse" class="container-collapse"></div>			<p id="skiptargetholder"><a id="skiptarget" class="skip" tabindex="-1"></a></p>			<!-- The main component -->			<jdoc:include type="component" />			<div class="clr"></div>		</div><!-- end of element-box -->		<noscript>			<?php echo  JText::_('JGLOBAL_WARNJAVASCRIPT') ?>		</noscript>		<div class="clr"></div>	</div><!-- end of content -->	<div class="clr"></div></div><!-- end of containerwrap --><!-- Footer --><div id="footer">	<jdoc:include type="modules" name="footer" style="none"  />	<p class="copyright">		<?php $joomla = '<a href="http://www.joomla.org">Joomla!&#174;</a>';			echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla) ?>	</p></div><script type="text/javascript">	(function($){		$(document).ready(function () {			// Patches to fix some wrong render of chosen fields			$('.chzn-container, .chzn-drop, .chzn-choices .search-field input').each(function (index) {				$(this).css({					'width': 'auto'				});			});		});	})(jQuery);</script></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Categories component * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesViewCategory extends JViewLegacy{	protected $form;	protected $item;	protected $state;	protected $assoc;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		$this->canDo = CategoriesHelper::getActions($this->state->get('category.component'));		$this->assoc = $this->get('Assoc');		$input = JFactory::getApplication()->input;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$input->set('hidemainmenu', true);		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$input      = JFactory::getApplication()->input;		$extension	= $input->get('extension');		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		// Avoid nonsense situation.		if ($extension == 'com_categories')		{			return;		}		// The extension can be in the form com_foo.section		$parts = explode('.', $extension);		$component = $parts[0];		$section = (count($parts) > 1) ? $parts[1] : null;		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load($component, JPATH_BASE, null, false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, null, false, false)		||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, $lang->getDefault(), false, false);		// Load the category helper.		require_once JPATH_COMPONENT.'/helpers/categories.php';		// Get the results for each action.		$canDo = CategoriesHelper::getActions($component, $this->item->id);		// If a component categories title string is present, let's use it.		if ($lang->hasKey($component_title_key = $component.($section?"_$section":'').'_CATEGORY_'.($isNew?'ADD':'EDIT').'_TITLE'))		{			$title = JText::_($component_title_key);		}		// Else if the component section string exits, let's use it		elseif ($lang->hasKey($component_section_key = $component.($section?"_$section":'')))		{			$title = JText::sprintf('COM_CATEGORIES_CATEGORY_'.($isNew?'ADD':'EDIT').'_TITLE', $this->escape(JText::_($component_section_key)));		}		// Else use the base title		else {			$title = JText::_('COM_CATEGORIES_CATEGORY_BASE_'.($isNew?'ADD':'EDIT').'_TITLE');		}		// Load specific css component		JHtml::_('stylesheet', $component.'/administrator/categories.css', array(), true);		// Prepare the toolbar.		JToolbarHelper::title($title, 'category-'.($isNew?'add':'edit').' '.substr($component, 4).($section?"-$section":'').'-category-'.($isNew?'add':'edit'));		// For new records, check the create permission.		if ($isNew && (count($user->getAuthorisedCategories($component, 'core.create')) > 0))		{			JToolbarHelper::apply('category.apply');			JToolbarHelper::save('category.save');			JToolbarHelper::save2new('category.save2new');		}		// If not checked out, can save the item.		elseif (!$checkedOut && ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_user_id == $userId)))		{			JToolbarHelper::apply('category.apply');			JToolbarHelper::save('category.save');			if ($canDo->get('core.create'))			{				JToolbarHelper::save2new('category.save2new');			}		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('category.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('category.cancel');		}		else		{			JToolbarHelper::cancel('category.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		// Compute the ref_key if it does exist in the component		if (!$lang->hasKey($ref_key = strtoupper($component.($section?"_$section":'')).'_CATEGORY_'.($isNew?'ADD':'EDIT').'_HELP_KEY'))		{			$ref_key = 'JHELP_COMPONENTS_'.strtoupper(substr($component, 4).($section?"_$section":'')).'_CATEGORY_'.($isNew?'ADD':'EDIT');		}		// Get help for the category/section view for the component by		// -remotely searching in a language defined dedicated URL: *component*_HELP_URL		// -locally  searching in a component help file if helpURL param exists in the component and is set to ''		// -remotely searching in a component URL if helpURL param exists in the component and is NOT set to ''		if ($lang->hasKey($lang_help_url = strtoupper($component).'_HELP_URL'))		{			$debug = $lang->setDebug(false);			$url = JText::_($lang_help_url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($ref_key, JComponentHelper::getParams($component)->exists('helpURL'), $url, $component);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');// Get the user object.$user = JFactory::getUser();// Check if user is allowed to add/edit based on tags permissions.$canEdit = $user->authorise('core.edit', 'com_tags');$canCreate = $user->authorise('core.create', 'com_tags');$canEditState = $user->authorise('core.edit.state', 'com_tags');$columns = $this->params->get('tag_columns', 1);// Avoid division by 0 and negative columns.if ($columns < 1){	$columns = 1;}$bsspans = floor(12 / $columns);if ($bsspans < 1){	$bsspans = 1;}$bscolumns = min($columns, floor(12 / $bsspans));$n = count($this->items);?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) : ?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') !== '0') : ?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search">					<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL') . '&#160;'; ?>				</label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_TAGS_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_TAGS_TITLE_FILTER_LABEL'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />		<input type="hidden" name="task" value="" />		<div class="clearfix"></div>	</fieldset>	<?php endif; ?><?php if ($this->items == false || $n == 0) : ?>	<p><?php echo JText::_('COM_TAGS_NO_TAGS'); ?></p><?php else : ?>	<?php foreach ($this->items as $i => $item) : ?>		<?php if ($n == 1 || $i == 0 || $bscolumns == 1 || $i % $bscolumns == 0) : ?>			<ul class="thumbnails">		<?php endif; ?>		<?php if ((!empty($item->access)) && in_array($item->access, $this->user->getAuthorisedViewLevels())) : ?> 			<li class="cat-list-row<?php echo $i % 2; ?>" >				<h3>					<a href="<?php echo JRoute::_(TagsHelperRoute::getTagRoute($item->id . ':' . $item->alias)); ?>">						<?php echo $this->escape($item->title); ?>					</a>				</h3>		<?php endif; ?>		<?php if ($this->params->get('all_tags_show_tag_image') && !empty($item->images)) : ?>			<?php $images  = json_decode($item->images); ?>			<span class="tag-body">			<?php if (!empty($images->image_intro)): ?>				<?php $imgfloat = (empty($images->float_intro)) ? $this->params->get('float_intro') : $images->float_intro; ?>				<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image">					<img				<?php if ($images->image_intro_caption) : ?>					<?php echo 'class="caption"' . ' title="' . htmlspecialchars($images->image_intro_caption) . '"'; ?>				<?php endif; ?>				src="<?php echo $images->image_intro; ?>" alt="<?php echo htmlspecialchars($images->image_fulltext_alt); ?>"/>				</div>			<?php endif; ?>			</span>		<?php endif; ?>		<div class="caption">			<?php if ($this->params->get('all_tags_show_tag_description', 1)) : ?>				<span class="tag-body">					<?php echo JHtml::_('string.truncate', $item->description, $this->params->get('tag_list_item_maximum_characters')); ?>				</span>			<?php endif; ?>			<?php if ($this->params->get('all_tags_show_tag_hits')) : ?>				<span class="list-hits badge badge-info">					<?php echo JText::sprintf('JGLOBAL_HITS_COUNT', $item->hits); ?>				</span>			<?php endif; ?>		</div>	</li>		<?php if (($i == 0 && $n == 1) || $i == $n - 1 || $bscolumns == 1 || (($i + 1) % $bscolumns == 0)) : ?>			</ul>		<?php endif; ?>	<?php endforeach; ?><?php endif;?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('CategoriesHelper', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/categories.php');/** * @package     Joomla.Administrator * @subpackage  com_categories */abstract class JHtmlCategoriesAdministrator{	/**	 * @param   int $catid	The category item id	 */	public static function association($catid, $extension = 'com_content')	{		// Get the associations		$associations = CategoriesHelper::getAssociations($catid, $extension);		JArrayHelper::toInteger($associations);		// Get the associated categories		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('c.*')			->from('#__categories as c')			->where('c.id IN ('.implode(',', array_values($associations)).')')			->join('LEFT', '#__languages as l ON c.language=l.lang_code')			->select('l.image')			->select('l.title as language_title');		$db->setQuery($query);		$items = $db->loadObjectList('id');		// Check for a database error.		if ($error = $db->getErrorMsg())		{			JError::raiseWarning(500, $error);			return false;		}		// Construct html		$text = array();		foreach ($associations as $tag => $associated)		{			if ($associated != $catid)			{				$text[] = JText::sprintf('COM_CATEGORIES_TIP_ASSOCIATED_LANGUAGE', JHtml::_('image', 'mod_languages/'.$items[$associated]->image.'.gif', $items[$associated]->language_title, array('title' => $items[$associated]->language_title), true), $items[$associated]->title);			}		}		return JHtml::_('tooltip', implode('<br />', $text), JText::_('COM_CATEGORIES_TIP_ASSOCIATION'), 'admin/icon-16-links.png');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with phpsetting * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlPhpSetting{	/**	 * Method to generate a boolean message for a value	 *	 * @param boolean $val is the value set?	 *	 * @return  string html code	 */	public static function boolean($val)	{		if ($val)		{			return JText::_('JON');		}		else		{			return JText::_('JOFF');		}	}	/**	 * Method to generate a boolean message for a value	 *	 * @param boolean $val is the value set?	 *	 * @return  string html code	 */	public static function set($val)	{		if ($val)		{			return JText::_('JYES');		}		else		{			return JText::_('JNO');		}	}	/**	 * Method to generate a string message for a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 */	public static function string($val)	{		if (empty($val))		{			return JText::_('JNONE');		}		else		{			return $val;		}	}	/**	 * Method to generate an integer from a value	 *	 * @param string $val a php ini value	 *	 * @return  string html code	 *	 * @deprecated  4.0  Use intval() or casting instead.	 */	public static function integer($val)	{		JLog::add('JHtmlPhpSetting::integer() is deprecated. Use intval() or casting instead.', JLog::WARNING, 'deprecated');		return (int) $val;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><div id="installer-update">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=update');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty($this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif; ?>	<?php if ($this->showMessage) : ?>		<div class="alert alert-info">			<a class="close" data-dismiss="alert" href="#">&times;</a>			<?php echo $this->loadTemplate('message'); ?>		</div>	<?php endif; ?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<div id="filter-bar" class="btn-toolbar">		<div class="btn-group pull-right hidden-phone">			<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>			<?php echo $this->pagination->getLimitBox(); ?>		</div>		<div class="filter-search btn-group pull-left">			<input type="text" name="filter_search" placeholder="<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('JSEARCH_FILTER'); ?>" />		</div>		<div class="btn-group pull-left">			<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>			<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>		</div>	</div>	<div class="clearfix"> </div>	<!-- Begin Content -->		<?php if (count($this->items)) : ?>		<table class="table table-striped" >			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_INSTALLTYPE', 'extension_id', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_TYPE', 'type', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center">						<?php echo JText::_('JVERSION'); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_FOLDER', 'folder', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_CLIENT', 'client_id', $listDirn, $listOrder); ?>					</th>					<th width="25%">						<?php echo JText::_('COM_INSTALLER_HEADING_DETAILSURL'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="9">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php				foreach ($this->items as $i => $item) :				$client = $item->client_id ? JText::_('JADMINISTRATOR') : JText::_('JSITE');			?>				<tr class="row<?php echo $i % 2; ?>">					<td>						<?php echo JHtml::_('grid.id', $i, $item->update_id); ?>					</td>					<td>						<span class="editlinktip hasTip" title="<?php echo JText::_('JGLOBAL_DESCRIPTION'); ?>::<?php echo $item->description ? $this->escape($item->description) : JText::_('COM_INSTALLER_MSG_UPDATE_NODESC'); ?>">						<?php echo $this->escape($item->name); ?>						</span>					</td>					<td class="center">						<?php echo $item->extension_id ? JText::_('COM_INSTALLER_MSG_UPDATE_UPDATE') : JText::_('COM_INSTALLER_NEW_INSTALL') ?>					</td>					<td>						<?php echo JText::_('COM_INSTALLER_TYPE_' . $item->type) ?>					</td>					<td class="center">						<?php echo $item->version ?>					</td>					<td class="center">						<?php echo @$item->folder != '' ? $item->folder : JText::_('COM_INSTALLER_TYPE_NONAPPLICABLE'); ?>					</td>					<td class="center">						<?php echo $client; ?>					</td>					<td><?php echo $item->detailsurl ?>						<?php if (isset($item->infourl)) : ?>							<br />							<a href="<?php echo $item->infourl; ?>" target="_blank">							<?php echo $this->escape($item->infourl); ?>							</a>						<?php endif; ?>					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php else : ?>			<div class="alert alert-info">				<a class="close" data-dismiss="alert" href="#">&times;</a>				<?php echo JText::_('COM_INSTALLER_MSG_UPDATE_NOUPDATES'); ?>			</div>		<?php endif; ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class JFormFieldMenuParent extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.6	 */	protected $type = 'MenuParent';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level')			->from('#__menu AS a')			->join('LEFT', $db->quoteName('#__menu') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		if ($menuType = $this->form->getValue('menutype'))		{			$query->where('a.menutype = ' . $db->quote($menuType));		}		else		{			$query->where('a.menutype != ' . $db->quote(''));		}		// Prevent parenting to children of this item.		if ($id = $this->form->getValue('id'))		{			$query->join('LEFT', $db->quoteName('#__menu') . ' AS p ON p.id = ' . (int) $id)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');		}		$query->where('a.published != -2')			->group('a.id, a.title, a.level, a.lft, a.rgt, a.menutype, a.parent_id, a.published')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Field to select a user id from a modal list. * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6.0 */class JFormFieldUser extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6.0	 */	public $type = 'User';	/**	 * Method to get the user field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   1.6.0	 */	protected function getInput()	{		$html = array();		$groups = $this->getGroups();		$excluded = $this->getExcluded();		$link = 'index.php?option=com_users&amp;view=users&amp;layout=modal&amp;tmpl=component&amp;field=' . $this->id			. (isset($groups) ? ('&amp;groups=' . base64_encode(json_encode($groups))) : '')			. (isset($excluded) ? ('&amp;excluded=' . base64_encode(json_encode($excluded))) : '');		// Initialize some field attributes.		$attr = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		// Initialize JavaScript field attributes.		$onchange = (string) $this->element['onchange'];		// Load the modal behavior script.		JHtml::_('behavior.modal', 'a.modal_' . $this->id);		// Build the script.		$script = array();		$script[] = '	function jSelectUser_' . $this->id . '(id, title) {';		$script[] = '		var old_id = document.getElementById("' . $this->id . '_id").value;';		$script[] = '		if (old_id != id) {';		$script[] = '			document.getElementById("' . $this->id . '_id").value = id;';		$script[] = '			document.getElementById("' . $this->id . '_name").value = title;';		$script[] = '			' . $onchange;		$script[] = '		}';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Load the current username if available.		$table = JTable::getInstance('user');		if ($this->value)		{			$table->load($this->value);		}		else		{			$table->username = JText::_('JLIB_FORM_SELECT_USER');		}		// Create a dummy text field with the user name.		$html[] = '<div class="input-append">';		$html[] = '	<input class="input-medium" type="text" id="' . $this->id . '_name" value="' . htmlspecialchars($table->name, ENT_COMPAT, 'UTF-8') . '"'			. ' disabled="disabled"' . $attr . ' />';		// Create the user select button.		if ($this->element['readonly'] != 'true')		{			$html[] = '		<a class="btn btn-primary modal_' . $this->id . '" title="' . JText::_('JLIB_FORM_CHANGE_USER') . '" href="' . $link . '"'				. ' rel="{handler: \'iframe\', size: {x: 800, y: 500}}">';			$html[] = '<i class="icon-user"></i></a>';		}		$html[] = '</div>';		// Create the real field, hidden, that stored the user id.		$html[] = '<input type="hidden" id="' . $this->id . '_id" name="' . $this->name . '" value="' . (int) $this->value . '" />';		return implode("\n", $html);	}	/**	 * Method to get the filtering groups (null means no filtering)	 *	 * @return  mixed  array of filtering groups or null.	 *	 * @since   1.6.0	 */	protected function getGroups()	{		return null;	}	/**	 * Method to get the users to exclude from the list of users	 *	 * @return  mixed  Array of users to exclude or null to to not exclude them	 *	 * @since   1.6.0	 */	protected function getExcluded()	{		return null;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if ($this->user->get('guest')):	// The user is not logged in.	echo $this->loadTemplate('login');else:	// The user is already logged in.	echo $this->loadTemplate('logout');endif;
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.updater.update');jimport('legacy.application.helper');jimport('legacy.component.helper');/** * Language Installer model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelLanguages extends JModelBase{	/**	 * @var    object  Client object	 * @since  3.1	 */	protected $client = null;	/**	 * @var    array  Languages description	 * @since  3.1	 */	protected $data = null;	/**	 * @var    string  Language path	 * @since  3.1	 */	protected $path = null;	/**	 * @var    integer  Total number of languages installed	 * @since  3.1	 */	protected $langlist = null;	/**	 * Constructor	 *	 * Deletes the default installation config file and recreates it with the good config file.	 *	 * @since  3.1	 */	public function __construct()	{		// Overrides application config and set the configuration.php file so tokens and database works		JFactory::$config = null;		JFactory::getConfig(JPATH_SITE . '/configuration.php');		JFactory::$session = null;		parent::__construct();	}	/**	 * Generate a list of language choices to install in the Joomla CMS	 *	 * @return  boolean  True if successful	 *	 * @since   3.1	 */	public function getItems()	{		$updater = JUpdater::getInstance();		/*		 * The following function uses extension_id 600, that is the English language extension id.		 * In #__update_sites_extensions you should have 600 linked to the Accredited Translations Repo		 */		$updater->findUpdates(array(600), 0);		$db		= JFactory::getDbo();		$query	= $db->getQuery(true);		// Select the required fields from the updates table		$query->select('update_id, name, version')			->from('#__updates')			->order('name');		$db->setQuery($query);		$list = $db->loadObjectList();		if (!$list || $list instanceof Exception)		{			$list = array();		}		return $list;	}	/**	 * Method that installs in Joomla! the selected languages in the Languages View of the installer	 *	 * @param   array  $lids  list of the update_id value of the languages to install	 *	 * @return  boolean True if successful	 */	public function install($lids)	{		/* @var InstallationApplicationWeb $app */		$app       = JFactory::getApplication();		$installer = JInstaller::getInstance();		// Loop through every selected language		foreach ($lids as $id)		{			// Loads the update database object that represents the language			$language = JTable::getInstance('update');			$language->load($id);			// Get the url to the XML manifest file of the selected language			$remote_manifest = $this->getLanguageManifest($id);			if (!$remote_manifest)			{				// Could not find the url, the information in the update server may be corrupt				$message = JText::sprintf('INSTL_DEFAULTLANGUAGE_COULD_NOT_INSTALL_LANGUAGE', $language->name);				$message .= ' ' . JText::_('INSTL_DEFAULTLANGUAGE_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Based on the language XML manifest get the url of the package to download			$package_url = $this->getPackageUrl($remote_manifest);			if (!$package_url)			{				// Could not find the url , maybe the url is wrong in the update server, or there is not internet access				$message = JText::sprintf('INSTL_DEFAULTLANGUAGE_COULD_NOT_INSTALL_LANGUAGE', $language->name);				$message .= ' ' . JText::_('INSTL_DEFAULTLANGUAGE_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Download the package to the tmp folder			$package = $this->downloadPackage($package_url);			// Install the package			if (!$installer->install($package['dir']))			{				// There was an error installing the package				$message = JText::sprintf('INSTL_DEFAULTLANGUAGE_COULD_NOT_INSTALL_LANGUAGE', $language->name);				$message .= ' ' . JText::_('INSTL_DEFAULTLANGUAGE_TRY_LATER');				$app->enqueueMessage($message);				continue;			}			// Cleanup the install files in tmp folder			if (!is_file($package['packagefile']))			{				$config = JFactory::getConfig();				$package['packagefile'] = $config->get('tmp_path') . '/' . $package['packagefile'];			}			JInstallerHelper::cleanupInstall($package['packagefile'], $package['extractdir']);			// Delete the installed language from the list			$language->delete($id);		}		return true;	}	/**	 * Gets the manifest file of a selected language from a the language list in a update server.	 *	 * @param   integer  $uid  The id of the language in the #__updates table	 *	 * @return  string	 *	 * @since   3.1	 */	protected function getLanguageManifest($uid)	{		$instance = JTable::getInstance('update');		$instance->load($uid);		$detailurl = trim($instance->detailsurl);		return $detailurl;	}	/**	 * Finds the url of the package to download.	 *	 * @param   string  $remote_manifest  url to the manifest XML file of the remote package	 *	 * @return  string|bool	 *	 * @since   3.1	 */	protected function getPackageUrl($remote_manifest)	{		$update = new JUpdate;		$update->loadFromXML($remote_manifest);		$package_url = trim($update->get('downloadurl', false)->_data);		return $package_url;	}	/**	 * Download a language package from a URL and unpack it in the tmp folder.	 *	 * @param   string  $url  url of the package	 *	 * @return  array|bool Package details or false on failure	 *	 * @since   3.1	 */	protected function downloadPackage($url)	{		// Download the package from the given URL		$p_file = JInstallerHelper::downloadPackage($url);		// Was the package downloaded?		if (!$p_file)		{			JFactory::getApplication()->enqueueMessage(JText::_('COM_INSTALLER_MSG_INSTALL_INVALID_URL'), 'warning');			return false;		}		$config		= JFactory::getConfig();		$tmp_dest	= $config->get('tmp_path');		// Unpack the downloaded package file		$package = JInstallerHelper::unpack($tmp_dest . '/' . $p_file);		return $package;	}	/**	 * Method to get Languages item data for the Administrator	 *	 * @return  array	 *	 * @since   3.1	 */	public function getInstalledlangsAdministrator()	{		return $this->getInstalledlangs('administrator');	}	/**	 * Method to get Languages item data for the Frontend	 *	 * @return  array	 *	 * @since   3.1	 */	public function getInstalledlangsFrontend()	{		return $this->getInstalledlangs('site');	}	/**	 * Method to get Languages item data	 *	 * @param   string  $cms_client  name of the cms client	 *	 * @return  array	 *	 * @since   3.1	 */	protected function getInstalledlangs($cms_client = 'administrator')	{		// Get information		$path     = $this->getPath();		$client   = $this->getClient($cms_client);		$langlist = $this->getLanguageList($client->id);		// Compute all the languages		$data = array();		foreach ($langlist as $lang)		{			$file = $path . '/' . $lang . '/' . $lang . '.xml';			$info = JInstaller::parseXMLInstallFile($file);			$row = new stdClass;			$row->language = $lang;			if (!is_array($info))			{				continue;			}			foreach ($info as $key => $value)			{				$row->$key = $value;			}			// If current then set published			$params = JComponentHelper::getParams('com_languages');			if ($params->get($client->name, 'en-GB') == $row->language)			{				$row->published	= 1;			}			else			{				$row->published = 0;			}			$row->checked_out = 0;			$data[] = $row;		}		usort($data, array($this, 'compareLanguages'));		return $data;	}	/**	 * Method to get installed languages data.	 *	 * @param   integer  $client_id  The client ID to retrieve data for	 *	 * @return  object  The language data	 *	 * @since   3.1	 */	protected function getLanguageList($client_id = 1)	{		// Create a new db object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Select field element from the extensions table.		$query->select('a.element, a.name')			->from('#__extensions AS a')			->where('a.type = ' . $db->quote('language'))			->where('state = 0')			->where('enabled = 1')			->where('client_id=' . (int) $client_id);		$db->setQuery($query);		$this->langlist = $db->loadColumn();		return $this->langlist;	}	/**	 * Method to compare two languages in order to sort them	 *	 * @param   object  $lang1  the first language	 * @param   object  $lang2  the second language	 *	 * @return  integer	 *	 * @since   3.1	 */	protected function compareLanguages($lang1, $lang2)	{		return strcmp($lang1->name, $lang2->name);	}	/**	 * Method to get the path	 *	 * @return  string  The path to the languages folders	 *	 * @since   3.1	 */	protected function getPath()	{		if (is_null($this->path))		{			$client = $this->getClient();			$this->path = JLanguage::getLanguagePath($client->path);		}		return $this->path;	}	/**	 * Method to get the client object of Administrator or FrontEnd	 *	 * @param   string  $client  name of the client object	 *	 * @return  object	 *	 * @since   3.1	 */	protected function getClient($client = 'administrator')	{		$this->client = JApplicationHelper::getClientInfo($client, true);		return $this->client;	}	/**	 * Method to set the default language.	 *	 * @param   string  $language    The language to be set as default	 * @param   string  $cms_client  The name of the CMS client	 *	 * @return  boolean	 *	 * @since   3.1	 */	public function setDefault($language, $cms_client = 'administrator')	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		$client	= $this->getClient($cms_client);		$params = JComponentHelper::getParams('com_languages');		$params->set($client->name, $language);		$table = JTable::getInstance('extension');		$id    = $table->find(array('element' => 'com_languages'));		// Load		if (!$table->load($id))		{			$app->enqueueMessage($table->getError(), 'warning');			return false;		}		$table->params = (string) $params;		// Pre-save checks		if (!$table->check())		{			$app->enqueueMessage($table->getError(), 'warning');			return false;		}		// Save the changes		if (!$table->store())		{			$app->enqueueMessage($table->getError(), 'warning');			return false;		}		return true;	}	/**	 * Get the current setup options from the session.	 *	 * @return  array	 *	 * @since   3.1	 */	public function getOptions()	{		$session = JFactory::getSession();		$options = $session->get('setup.options', array());		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Tags List Controller * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsControllerTags extends JControllerAdmin{	/**	 * Proxy for getModel	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 *	 * @return  JModelLegacy  The model.	 * @since   3.1	 */	public function getModel($name = 'Tag', $prefix = 'TagsModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Rebuild the nested set tree.	 *	 * @return  boolean  False on failure or error, true on success.	 *	 * @since   3.1	 */	public function rebuild()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$extension = $this->input->get('extension');		$this->setRedirect(JRoute::_('index.php?option=com_tags&view=tags', false));		$model = $this->getModel();		if ($model->rebuild()) {			// Rebuild succeeded.			$this->setMessage(JText::_('COM_TAGS_REBUILD_SUCCESS'));			return true;		} else {			// Rebuild failed.			$this->setMessage(JText::_('COM_TAGSS_REBUILD_FAILURE'));			return false;		}	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules Component Positions Model * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesModelPositions extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'value',				'templates',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context.'.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context.'.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$clientId = $app->input->getInt('client_id', 0);		$this->setState('filter.client_id', $clientId);		$template = $this->getUserStateFromRequest($this->context.'.filter.template', 'filter_template', '', 'string');		$this->setState('filter.template', $template);		$type = $this->getUserStateFromRequest($this->context.'.filter.type', 'filter_type', '', 'string');		$this->setState('filter.type', $type);		// Load the parameters.		$params = JComponentHelper::getParams('com_modules');		$this->setState('params', $params);		// List state information.		parent::populateState('value', 'asc');	}	/**	 * Method to get an array of data items.	 *	 * @return  mixed  An array of data items on success, false on failure.	 * @since   1.6	 */	public function getItems()	{		if (!isset($this->items))		{			$lang            = JFactory::getLanguage();			$search          = $this->getState('filter.search');			$state           = $this->getState('filter.state');			$clientId        = $this->getState('filter.client_id');			$filter_template = $this->getState('filter.template');			$type            = $this->getState('filter.type');			$ordering        = $this->getState('list.ordering');			$direction       = $this->getState('list.direction');			$limitstart      = $this->getState('list.start');			$limit           = $this->getState('list.limit');			$client          = JApplicationHelper::getClientInfo($clientId);			if ($type != 'template')			{				// Get the database object and a new query object.				$query	= $this->_db->getQuery(true)					->select('DISTINCT(position) as value')					->from('#__modules')					->where($this->_db->quoteName('client_id').' = '.(int) $clientId);				if ($search)				{					$query->where('position LIKE '.$this->_db->quote('%'.$this->_db->escape($search, true).'%'));				}				$this->_db->setQuery($query);				try				{					$positions = $this->_db->loadObjectList('value');				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}				foreach ($positions as $value => $position)				{					$positions[$value] = array();				}			}			else			{				$positions = array();			}			// Load the positions from the installed templates.			foreach (ModulesHelper::getTemplates($clientId) as $template)			{				$path = JPath::clean($client->path.'/templates/'.$template->element.'/templateDetails.xml');				if (file_exists($path))				{					$xml = simplexml_load_file($path);					if (isset($xml->positions[0]))					{						$lang->load('tpl_'.$template->element.'.sys', $client->path, null, false, false)					||	$lang->load('tpl_'.$template->element.'.sys', $client->path.'/templates/'.$template->element, null, false, false)					||	$lang->load('tpl_'.$template->element.'.sys', $client->path, $lang->getDefault(), false, false)					||	$lang->load('tpl_'.$template->element.'.sys', $client->path.'/templates/'.$template->element, $lang->getDefault(), false, false);						foreach ($xml->positions[0] as $position)						{							$value = (string) $position['value'];							$label = (string) $position;							if (!$value)							{								$value = $label;								$label = preg_replace('/[^a-zA-Z0-9_\-]/', '_', 'TPL_'.$template->element.'_POSITION_'.$value);								$altlabel = preg_replace('/[^a-zA-Z0-9_\-]/', '_', 'COM_MODULES_POSITION_'.$value);								if (!$lang->hasKey($label) && $lang->hasKey($altlabel))								{									$label = $altlabel;								}							}							if ($type == 'user' || ($state != '' && $state != $template->enabled))							{								unset($positions[$value]);							}							elseif (preg_match(chr(1) . $search . chr(1) . 'i', $value) && ($filter_template == '' || $filter_template == $template->element))							{								if (!isset($positions[$value]))								{									$positions[$value] = array();								}								$positions[$value][$template->name] = $label;							}						}					}				}			}			$this->total = count($positions);			if ($limitstart >= $this->total)			{				$limitstart = $limitstart < $limit ? 0 : $limitstart - $limit;				$this->setState('list.start', $limitstart);			}			if ($ordering == 'value')			{				if ($direction == 'asc')				{					ksort($positions);				}				else {					krsort($positions);				}			}			else {				if ($direction == 'asc')				{					asort($positions);				}				else {					arsort($positions);				}			}			$this->items = array_slice($positions, $limitstart, $limit ? $limit : null);		}		return $this->items;	}	/**	 * Method to get the total number of items.	 *	 * @return  int	The total number of items.	 * @since   1.6	 */	public function getTotal()	{		if (!isset($this->total))		{			$this->getItems();		}		return $this->total;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$clientId = $this->state->get('filter.client_id');$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_MODULES_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_MODULES_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('modules.positions', $clientId);?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-position-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('module.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Usergroup table class. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableUsergroup extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__usergroups', 'id', $db);	}	/**	 * Method to check the current record to save	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		// Validate the title.		if ((trim($this->title)) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_USERGROUP_TITLE'));			return false;		}		// Check for a duplicate parent_id, title.		// There is a unique index on the (parent_id, title) field in the table.		$db = $this->_db;		$query = $db->getQuery(true)			->select('COUNT(title)')			->from($this->_tbl)			->where('title = ' . $db->quote(trim($this->title)))			->where('parent_id = ' . (int) $this->parent_id)			->where('id <> ' . (int) $this->id);		$db->setQuery($query);		if ($db->loadResult() > 0)		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_USERGROUP_TITLE_EXISTS'));			return false;		}		return true;	}	/**	 * Method to recursively rebuild the nested set tree.	 *	 * @param   integer  $parent_id  The root of the tree to rebuild.	 * @param   integer  $left       The left id to start with in building the tree.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function rebuild($parent_id = 0, $left = 0)	{		// Get the database object		$db = $this->_db;		// Get all children of this node		$db->setQuery('SELECT id FROM ' . $this->_tbl . ' WHERE parent_id=' . (int) $parent_id . ' ORDER BY parent_id, title');		$children = $db->loadColumn();		// The right value of this node is the left value + 1		$right = $left + 1;		// Execute this function recursively over all children		for ($i = 0, $n = count($children); $i < $n; $i++)		{			// $right is the current right value, which is incremented on recursion return			$right = $this->rebuild($children[$i], $right);			// If there is an update failure, return false to break out of the recursion			if ($right === false)			{				return false;			}		}		// We've got the left value, and now that we've processed		// the children of this node we also know the right value		$db->setQuery('UPDATE ' . $this->_tbl . ' SET lft=' . (int) $left . ', rgt=' . (int) $right . ' WHERE id=' . (int) $parent_id);		// If there is an update failure, return false to break out of the recursion		if (!$db->execute())		{			return false;		}		// Return the right value of this node + 1		return $right + 1;	}	/**	 * Inserts a new row if id is zero or updates an existing row in the database table	 *	 * @param   boolean  $updateNulls  If false, null object variables are not updated	 *	 * @return  boolean  True if successful, false otherwise and an internal error message is set	 *	 * @since   11.1	 */	public function store($updateNulls = false)	{		if ($result = parent::store($updateNulls))		{			// Rebuild the nested set tree.			$this->rebuild();		}		return $result;	}	/**	 * Delete this object and its dependencies	 *	 * @param   integer  $oid  The primary key of the user group to delete.	 *	 * @return  mixed  Boolean or Exception.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 * @throws  UnexpectedValueException on data error.	 */	public function delete($oid = null)	{		if ($oid)		{			$this->load($oid);		}		if ($this->id == 0)		{			throw new UnexpectedValueException('Global Category not found');		}		if ($this->parent_id == 0)		{			throw new UnexpectedValueException('Root categories cannot be deleted.');		}		if ($this->lft == 0 || $this->rgt == 0)		{			throw new UnexpectedValueException('Left-Right data inconsistency. Cannot delete usergroup.');		}		$db = $this->_db;		// Select the usergroup ID and its children		$query = $db->getQuery(true)			->select($db->quoteName('c.id'))			->from($db->quoteName($this->_tbl) . 'AS c')			->where($db->quoteName('c.lft') . ' >= ' . (int) $this->lft)			->where($db->quoteName('c.rgt') . ' <= ' . (int) $this->rgt);		$db->setQuery($query);		$ids = $db->loadColumn();		if (empty($ids))		{			throw new UnexpectedValueException('Left-Right data inconsistency. Cannot delete usergroup.');		}		// Delete the category dependencies		// @todo Remove all related threads, posts and subscriptions		// Delete the usergroup and its children		$query->clear()			->delete($db->quoteName($this->_tbl))			->where($db->quoteName('id') . ' IN (' . implode(',', $ids) . ')');		$db->setQuery($query);		$db->execute();		// Delete the usergroup in view levels		$replace = array();		foreach ($ids as $id)		{			$replace[] = ',' . $db->quote("[$id,") . ',' . $db->quote("[") . ')';			$replace[] = ',' . $db->quote(",$id,") . ',' . $db->quote(",") . ')';			$replace[] = ',' . $db->quote(",$id]") . ',' . $db->quote("]") . ')';			$replace[] = ',' . $db->quote("[$id]") . ',' . $db->quote("[]") . ')';		}		// SQLSsrv change. Alternative for regexp		$query->clear()			->select('id, rules')			->from('#__viewlevels');		$db->setQuery($query);		$rules = $db->loadObjectList();		$match_ids = array();		foreach ($rules as $rule)		{			foreach ($ids as $id)			{				if (strstr($rule->rules, '[' . $id) || strstr($rule->rules, ',' . $id) || strstr($rule->rules, $id . ']'))				{					$match_ids[] = $rule->id;				}			}		}		if (!empty($match_ids))		{			$query = $db->getQuery(true)				->set('rules=' . str_repeat('replace(', 4 * count($ids)) . 'rules' . implode('', $replace))				->update('#__viewlevels')				->where('id IN (' . implode(',', $match_ids) . ')');			$db->setQuery($query);			$db->execute();		}		// Delete the user to usergroup mappings for the group(s) from the database.		$query->clear()			->delete($db->quoteName('#__user_usergroup_map'))			->where($db->quoteName('group_id') . ' IN (' . implode(',', $ids) . ')');		$db->setQuery($query);		$db->execute();		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewTracks extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		BannersHelper::addSubmenu('tracks');		$this->addToolbar();		require_once JPATH_COMPONENT .'/models/fields/bannerclient.php';		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/banners.php';		$canDo	= BannersHelper::getActions($this->state->get('filter.category_id'));		JToolbarHelper::title(JText::_('COM_BANNERS_MANAGER_TRACKS'), 'banners-tracks.png');		$bar = JToolBar::getInstance('toolbar');			$bar->appendButton('Slider', 'export', 'JTOOLBAR_EXPORT', 'index.php?option=com_banners&amp;view=download&amp;tmpl=component', 600, 300);		$document = JFactory::getDocument();		$app = JFactory::getApplication();		if ($canDo->get('core.delete'))		{			$bar->appendButton('Confirm', 'COM_BANNERS_DELETE_MSG', 'delete', 'COM_BANNERS_TRACKS_DELETE', 'tracks.delete', false);			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_banners');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_TRACKS');		JHtmlSidebar::setAction('index.php?option=com_banners&view=tracks');		JHtmlSidebar::addFilter(			JText::_('COM_BANNERS_SELECT_CLIENT'),			'filter_client_id',			JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('COM_BANNERS_SELECT_TYPE'),			'filter_type',			JHtml::_('select.options', array(JHtml::_('select.option', 1, JText::_('COM_BANNERS_IMPRESSION')), JHtml::_('select.option', 2, JText::_('COM_BANNERS_CLICK'))), 'value', 'text', $this->state->get('filter.type'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'b.name' => JText::_('COM_BANNERS_HEADING_NAME'),			'cl.name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'track_type' => JText::_('COM_BANNERS_HEADING_TYPE'),			'count' => JText::_('COM_BANNERS_HEADING_COUNT'),			'track_date' => JText::_('JDATE')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_redirect&view=links'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_REDIRECT_SEARCH_LINKS'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', RedirectHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_OLD_URL', 'a.old_url', $listDirn, $listOrder); ?>				</th>				<th class="width-30">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_NEW_URL', 'a.new_url', $listDirn, $listOrder); ?>				</th>				<th class="width-30">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_REFERRER', 'a.referer', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'COM_REDIRECT_HEADING_CREATED_DATE', 'a.created_date', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$canCreate = $user->authorise('core.create',     'com_redirect');			$canEdit   = $user->authorise('core.edit',       'com_redirect');			$canChange = $user->authorise('core.edit.state', 'com_redirect');			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_redirect&task=link.edit&id='.$item->id);?>" title="<?php echo $this->escape($item->old_url); ?>">							<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?></a>					<?php else : ?>							<?php echo $this->escape(str_replace(JURI::root(), '', $item->old_url)); ?>					<?php endif; ?>				</td>				<td>					<?php echo $this->escape($item->new_url); ?>				</td>				<td>					<?php echo $this->escape($item->referer); ?>				</td>				<td class="center">					<?php echo JHtml::_('date', $item->created_date, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo JHtml::_('redirect.published', $item->published, $i); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<p class="footer-tip">		<?php if ($this->enabled) : ?>			<span class="enabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_ENABLED'); ?></span>		<?php else : ?>			<span class="disabled"><?php echo JText::_('COM_REDIRECT_PLUGIN_DISABLED'); ?></span>		<?php endif; ?>	</p>	<div class="clr"></div>	<?php if (!empty($this->items)) : ?>		<?php echo $this->loadTemplate('addform'); ?>	<?php endif; ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();// This checks if the config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params['show_publishing_options']);$input = JFactory::getApplication()->input;if (!$editoroptions):	$params['show_publishing_options'] = '1';	$params['show_article_options'] = '1';	$params['show_urls_images_backend'] = '0';	$params['show_urls_images_frontend'] = '0';endif;// Check if the article uses configuration settings besides global. If so, use them.if (!empty($this->item->attribs['show_publishing_options'])):		$params['show_publishing_options'] = $this->item->attribs['show_publishing_options'];endif;if (!empty($this->item->attribs['show_article_options'])):		$params['show_article_options'] = $this->item->attribs['show_article_options'];endif;if (!empty($this->item->attribs['show_urls_images_backend'])):		$params['show_urls_images_backend'] = $this->item->attribs['show_urls_images_backend'];endif;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><div class="article-edit"><form action="<?php echo JRoute::_('index.php?option=com_content&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo empty($this->item->id) ? JText::_('COM_CONTENT_NEW_ARTICLE') : JText::sprintf('COM_CONTENT_EDIT_ARTICLE', $this->item->id); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<li><?php echo $this->form->getLabel('alias'); ?>				<?php echo $this->form->getInput('alias'); ?></li>				<li><?php echo $this->form->getLabel('catid'); ?>				<?php echo $this->form->getInput('catid'); ?></li>				<li><?php echo $this->form->getLabel('state'); ?>				<?php echo $this->form->getInput('state'); ?></li>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<?php if ($this->canDo->get('core.admin')) : ?>					<li><span class="faux-label"><?php echo JText::_('JGLOBAL_ACTION_PERMISSIONS_LABEL'); ?></span>						<button type="button" onclick="document.location.href='#access-rules';">							<?php echo JText::_('JGLOBAL_PERMISSIONS_ANCHOR'); ?>						</button>					</li>				<?php endif; ?>				<li><?php echo $this->form->getLabel('featured'); ?>				<?php echo $this->form->getInput('featured'); ?></li>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<!-- Tag field -->				<?php foreach ($this->get('form')->getFieldset('jmetadata') as $field) : ?>					<?php if ($field->name == 'jform[metadata][tags][]') :?>						<li>							<?php echo $field->label; ?>							<div class="is-tagbox">								<?php echo $field->input; ?>							</div>						</li>					<?php endif; ?>				<?php endforeach; ?>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>			</ul>			<div class="clr"></div>			<?php echo $this->form->getLabel('articletext'); ?>			<div class="clr"></div>			<?php echo $this->form->getInput('articletext'); ?>			<div class="clr"></div>		</fieldset>	</div>	<div class="col options-section">		<?php echo JHtml::_('sliders.start', 'content-sliders-' . $this->item->id, array('useCookie' => 1)); ?>		<?php // Do not show the publishing options if the edit form is configured not to. ?>		<?php  if ($params['show_publishing_options'] || ( $params['show_publishing_options'] = '' && !empty($editoroptions)) ) : ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_FIELDSET_PUBLISHING'), 'publishing-details'); ?>			<fieldset class="panelform">				<ul class="adminformlist">					<li><?php echo $this->form->getLabel('created_by'); ?>					<?php echo $this->form->getInput('created_by'); ?></li>					<li><?php echo $this->form->getLabel('created_by_alias'); ?>					<?php echo $this->form->getInput('created_by_alias'); ?></li>					<li><?php echo $this->form->getLabel('created'); ?>					<?php echo $this->form->getInput('created'); ?></li>						<li><?php echo $this->form->getLabel('publish_up'); ?>						<?php echo $this->form->getInput('publish_up'); ?></li>					<li><?php echo $this->form->getLabel('publish_down'); ?>					<?php echo $this->form->getInput('publish_down'); ?></li>					<?php if ($this->item->modified_by) : ?>						<li><?php echo $this->form->getLabel('modified_by'); ?>						<?php echo $this->form->getInput('modified_by'); ?></li>						<li><?php echo $this->form->getLabel('modified'); ?>						<?php echo $this->form->getInput('modified'); ?></li>					<?php endif; ?>					<?php if ($this->item->version) : ?>						<li><?php echo $this->form->getLabel('version'); ?>						<?php echo $this->form->getInput('version'); ?></li>					<?php endif; ?>					<?php if ($this->item->hits) : ?>						<li><?php echo $this->form->getLabel('hits'); ?>						<?php echo $this->form->getInput('hits'); ?></li>					<?php endif; ?>				</ul>			</fieldset>		<?php  endif; ?>		<?php  $fieldSets = $this->form->getFieldsets('attribs'); ?>			<?php foreach ($fieldSets as $name => $fieldSet) : ?>				<?php					// If the parameter says to show the article options or if the parameters have never been set, we will					// show the article options.					if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))):					// Go through all the fieldsets except the configuration and basic-limited, which are					// handled separately below.					if ($name != 'editorConfig' && $name != 'basic-limited') : ?>						<?php echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-options'); ?>						<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>							<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>						<?php endif; ?>						<fieldset class="panelform">							<ul class="adminformlist">							<?php foreach ($this->form->getFieldset($name) as $field) : ?>								<li><?php echo $field->label; ?>								<?php echo $field->input; ?></li>							<?php endforeach; ?>							</ul>						</fieldset>					<?php endif ?>					<?php // If we are not showing the options we need to use the hidden fields so the values are not lost.  ?>				<?php  elseif ($name == 'basic-limited') : ?>						<?php foreach ($this->form->getFieldset('basic-limited') as $field) : ?>							<?php  echo $field->input; ?>						<?php endforeach; ?>				<?php endif; ?>			<?php endforeach; ?>			<?php // Not the best place, but here for continuity with 1.5/1/6/1.7 ?>				<fieldset class="panelform">				</fieldset>				<?php					// We need to make a separate space for the configuration					// so that those fields always show to those wih permissions					if ( $this->canDo->get('core.admin')   ):  ?>					<?php  echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_SLIDER_EDITOR_CONFIG'), 'configure-sliders'); ?>						<fieldset  class="panelform" >							<ul class="adminformlist">							<?php foreach ($this->form->getFieldset('editorConfig') as $field) : ?>								<li><?php echo $field->label; ?>								<?php echo $field->input; ?></li>							<?php endforeach; ?>							</ul>						</fieldset>				<?php endif ?>		<?php // The url and images fields only show if the configuration is set to allow them.  ?>		<?php // This is for legacy reasons. ?>		<?php if ($params['show_urls_images_backend']) : ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_FIELDSET_URLS_AND_IMAGES'), 'urls_and_images-options'); ?>				<fieldset class="panelform">				<ul class="adminformlist">					<li>					<?php echo $this->form->getLabel('images'); ?>					<?php echo $this->form->getInput('images'); ?></li>					<?php foreach ($this->form->getGroup('images') as $field) : ?>						<li>							<?php if (!$field->hidden) : ?>								<?php echo $field->label; ?>							<?php endif; ?>							<?php echo $field->input; ?>						</li>					<?php endforeach; ?>						<?php foreach ($this->form->getGroup('urls') as $field) : ?>						<li>							<?php if (!$field->hidden) : ?>								<?php echo $field->label; ?>							<?php endif; ?>							<?php echo $field->input; ?>						</li>					<?php endforeach; ?>				</ul>				</fieldset>		<?php endif; ?>		<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'), 'meta-options'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'); ?></legend>				<?php echo $this->loadTemplate('metadata'); ?>			</fieldset>		<?php			$fieldSets = $this->form->getFieldsets('associations');			foreach ($fieldSets as $name => $fieldSet) :				$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CONTENT_'.$name.'_FIELDSET_LABEL';				echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');					if (isset($fieldSet->description) && trim($fieldSet->description)) :						echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';					endif;					?>				<div class="clr"></div>				<fieldset class="panelform">					<ul class="adminformlist">						<?php foreach ($this->form->getFieldset($name) as $field) : ?>							<li><?php echo $field->label; ?>							<?php echo $field->input; ?></li>						<?php endforeach; ?>					</ul>				</fieldset>			<?php endforeach;?>		<?php echo JHtml::_('sliders.end'); ?>	</div>	<div class="clr"></div>	<?php if ($this->canDo->get('core.admin')) : ?>		<div  class="col rules-section">			<?php echo JHtml::_('sliders.start', 'permissions-sliders-' . $this->item->id, array('useCookie' => 1)); ?>				<?php echo JHtml::_('sliders.panel', JText::_('COM_CONTENT_FIELDSET_RULES'), 'access-rules'); ?>				<fieldset class="panelform">					<legend class="element-invisible"><?php echo JText::_('COM_CONTENT_FIELDSET_RULES'); ?></legend>					<?php echo $this->form->getLabel('rules'); ?>					<?php echo $this->form->getInput('rules'); ?>				</fieldset>			<?php echo JHtml::_('sliders.end'); ?>		</div>	<?php endif; ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="return" value="<?php echo $input->getCmd('return');?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form><div class="clr"></div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.path');jimport('joomla.utilities.arrayhelper');/** * Form Class for the Joomla Platform. * * This class implements a robust API for constructing, populating, filtering, and validating forms. * It uses XML definitions to construct form fields and a variety of field and rule classes to * render and validate the form. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html4/interact/forms.html * @link        http://www.w3.org/TR/html5/forms.html * @since       11.1 */class JForm{	/**	 * The JRegistry data store for form fields during display.	 * @var    object	 * @since  11.1	 */	protected $data;	/**	 * The form object errors array.	 * @var    array	 * @since  11.1	 */	protected $errors = array();	/**	 * The name of the form instance.	 * @var    string	 * @since  11.1	 */	protected $name;	/**	 * The form object options for use in rendering and validation.	 * @var    array	 * @since  11.1	 */	protected $options = array();	/**	 * The form XML definition.	 * @var    SimpleXMLElement	 * @since  11.1	 */	protected $xml;	/**	 * Form instances.	 * @var    array	 * @since  11.1	 */	protected static $forms = array();	/**	 * Method to instantiate the form object.	 *	 * @param   string  $name     The name of the form.	 * @param   array   $options  An array of form options.	 *	 * @since   11.1	 */	public function __construct($name, array $options = array())	{		// Set the name for the form.		$this->name = $name;		// Initialise the JRegistry data.		$this->data = new JRegistry;		// Set the options if specified.		$this->options['control'] = isset($options['control']) ? $options['control'] : false;	}	/**	 * Method to bind data to the form.	 *	 * @param   mixed  $data  An array or object of data to bind to the form.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function bind($data)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		// The data must be an object or array.		if (!is_object($data) && !is_array($data))		{			return false;		}		// Convert the input to an array.		if (is_object($data))		{			if ($data instanceof JRegistry)			{				// Handle a JRegistry.				$data = $data->toArray();			}			elseif ($data instanceof JObject)			{				// Handle a JObject.				$data = $data->getProperties();			}			else			{				// Handle other types of objects.				$data = (array) $data;			}		}		// Process the input data.		foreach ($data as $k => $v)		{			if ($this->findField($k))			{				// If the field exists set the value.				$this->data->set($k, $v);			}			elseif (is_object($v) || JArrayHelper::isAssociative($v))			{				// If the value is an object or an associative array hand it off to the recursive bind level method.				$this->bindLevel($k, $v);			}		}		return true;	}	/**	 * Method to bind data to the form for the group level.	 *	 * @param   string  $group  The dot-separated form group path on which to bind the data.	 * @param   mixed   $data   An array or object of data to bind to the form for the group level.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function bindLevel($group, $data)	{		// Ensure the input data is an array.		settype($data, 'array');		// Process the input data.		foreach ($data as $k => $v)		{			if ($this->findField($k, $group))			{				// If the field exists set the value.				$this->data->set($group . '.' . $k, $v);			}			elseif (is_object($v) || JArrayHelper::isAssociative($v))			{				// If the value is an object or an associative array, hand it off to the recursive bind level method				$this->bindLevel($group . '.' . $k, $v);			}		}	}	/**	 * Method to filter the form data.	 *	 * @param   array   $data   An array of field values to filter.	 * @param   string  $group  The dot-separated form group path on which to filter the fields.	 *	 * @return  mixed  Array or false.	 *	 * @since   11.1	 */	public function filter($data, $group = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		$input = new JRegistry($data);		$output = new JRegistry;		// Get the fields for which to filter the data.		$fields = $this->findFieldsByGroup($group);		if (!$fields)		{			// PANIC!			return false;		}		// Filter the fields.		foreach ($fields as $field)		{			$name = (string) $field['name'];			// Get the field groups for the element.			$attrs = $field->xpath('ancestor::fields[@name]/@name');			$groups = array_map('strval', $attrs ? $attrs : array());			$group = implode('.', $groups);			// Get the field value from the data input.			if ($group)			{				// Filter the value if it exists.				if ($input->exists($group . '.' . $name))				{					$output->set($group . '.' . $name, $this->filterField($field, $input->get($group . '.' . $name, (string) $field['default'])));				}			}			else			{				// Filter the value if it exists.				if ($input->exists($name))				{					$output->set($name, $this->filterField($field, $input->get($name, (string) $field['default'])));				}			}		}		return $output->toArray();	}	/**	 * Return all errors, if any.	 *	 * @return  array  Array of error messages or RuntimeException objects.	 *	 * @since   11.1	 */	public function getErrors()	{		return $this->errors;	}	/**	 * Method to get a form field represented as a JFormField object.	 *	 * @param   string  $name   The name of the form field.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 * @param   mixed   $value  The optional value to use as the default for the field.	 *	 * @return  mixed  The JFormField object for the field or boolean false on error.	 *	 * @since   11.1	 */	public function getField($name, $group = null, $value = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		// Attempt to find the field by name and group.		$element = $this->findField($name, $group);		// If the field element was not found return false.		if (!$element)		{			return false;		}		return $this->loadField($element, $group, $value);	}	/**	 * Method to get an attribute value from a field XML element.  If the attribute doesn't exist or	 * is null then the optional default value will be used.	 *	 * @param   string  $name       The name of the form field for which to get the attribute value.	 * @param   string  $attribute  The name of the attribute for which to get a value.	 * @param   mixed   $default    The optional default value to use if no attribute value exists.	 * @param   string  $group      The optional dot-separated form group path on which to find the field.	 *	 * @return  mixed  The attribute value for the field.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function getFieldAttribute($name, $attribute, $default = null, $group = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Find the form field element from the definition.		$element = $this->findField($name, $group);		// If the element exists and the attribute exists for the field return the attribute value.		if (($element instanceof SimpleXMLElement) && ((string) $element[$attribute]))		{			return (string) $element[$attribute];		}		// Otherwise return the given default value.		else		{			return $default;		}	}	/**	 * Method to get an array of JFormField objects in a given fieldset by name.  If no name is	 * given then all fields are returned.	 *	 * @param   string  $set  The optional name of the fieldset.	 *	 * @return  array  The array of JFormField objects in the fieldset.	 *	 * @since   11.1	 */	public function getFieldset($set = null)	{		$fields = array();		// Get all of the field elements in the fieldset.		if ($set)		{			$elements = $this->findFieldsByFieldset($set);		}		// Get all fields.		else		{			$elements = $this->findFieldsByGroup();		}		// If no field elements were found return empty.		if (empty($elements))		{			return $fields;		}		// Build the result array from the found field elements.		foreach ($elements as $element)		{			// Get the field groups for the element.			$attrs = $element->xpath('ancestor::fields[@name]/@name');			$groups = array_map('strval', $attrs ? $attrs : array());			$group = implode('.', $groups);			// If the field is successfully loaded add it to the result array.			if ($field = $this->loadField($element, $group))			{				$fields[$field->id] = $field;			}		}		return $fields;	}	/**	 * Method to get an array of fieldset objects optionally filtered over a given field group.	 *	 * @param   string  $group  The dot-separated form group path on which to filter the fieldsets.	 *	 * @return  array  The array of fieldset objects.	 *	 * @since   11.1	 */	public function getFieldsets($group = null)	{		$fieldsets = array();		$sets = array();		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return $fieldsets;		}		if ($group)		{			// Get the fields elements for a given group.			$elements = &$this->findGroup($group);			foreach ($elements as &$element)			{				// Get an array of <fieldset /> elements and fieldset attributes within the fields element.				if ($tmp = $element->xpath('descendant::fieldset[@name] | descendant::field[@fieldset]/@fieldset'))				{					$sets = array_merge($sets, (array) $tmp);				}			}		}		else		{			// Get an array of <fieldset /> elements and fieldset attributes.			$sets = $this->xml->xpath('//fieldset[@name] | //field[@fieldset]/@fieldset');		}		// If no fieldsets are found return empty.		if (empty($sets))		{			return $fieldsets;		}		// Process each found fieldset.		foreach ($sets as $set)		{			// Are we dealing with a fieldset element?			if ((string) $set['name'])			{				// Only create it if it doesn't already exist.				if (empty($fieldsets[(string) $set['name']]))				{					// Build the fieldset object.					$fieldset = (object) array('name' => '', 'label' => '', 'description' => '');					foreach ($set->attributes() as $name => $value)					{						$fieldset->$name = (string) $value;					}					// Add the fieldset object to the list.					$fieldsets[$fieldset->name] = $fieldset;				}			}			// Must be dealing with a fieldset attribute.			else			{				// Only create it if it doesn't already exist.				if (empty($fieldsets[(string) $set]))				{					// Attempt to get the fieldset element for data (throughout the entire form document).					$tmp = $this->xml->xpath('//fieldset[@name="' . (string) $set . '"]');					// If no element was found, build a very simple fieldset object.					if (empty($tmp))					{						$fieldset = (object) array('name' => (string) $set, 'label' => '', 'description' => '');					}					// Build the fieldset object from the element.					else					{						$fieldset = (object) array('name' => '', 'label' => '', 'description' => '');						foreach ($tmp[0]->attributes() as $name => $value)						{							$fieldset->$name = (string) $value;						}					}					// Add the fieldset object to the list.					$fieldsets[$fieldset->name] = $fieldset;				}			}		}		return $fieldsets;	}	/**	 * Method to get the form control. This string serves as a container for all form fields. For	 * example, if there is a field named 'foo' and a field named 'bar' and the form control is	 * empty the fields will be rendered like: <input name="foo" /> and <input name="bar" />.  If	 * the form control is set to 'joomla' however, the fields would be rendered like:	 * <input name="joomla[foo]" /> and <input name="joomla[bar]" />.	 *	 * @return  string  The form control string.	 *	 * @since   11.1	 */	public function getFormControl()	{		return (string) $this->options['control'];	}	/**	 * Method to get an array of JFormField objects in a given field group by name.	 *	 * @param   string   $group   The dot-separated form group path for which to get the form fields.	 * @param   boolean  $nested  True to also include fields in nested groups that are inside of the	 *                            group for which to find fields.	 *	 * @return  array    The array of JFormField objects in the field group.	 *	 * @since   11.1	 */	public function getGroup($group, $nested = false)	{		$fields = array();		// Get all of the field elements in the field group.		$elements = $this->findFieldsByGroup($group, $nested);		// If no field elements were found return empty.		if (empty($elements))		{			return $fields;		}		// Build the result array from the found field elements.		foreach ($elements as $element)		{			// Get the field groups for the element.			$attrs	= $element->xpath('ancestor::fields[@name]/@name');			$groups	= array_map('strval', $attrs ? $attrs : array());			$group	= implode('.', $groups);			// If the field is successfully loaded add it to the result array.			if ($field = $this->loadField($element, $group))			{				$fields[$field->id] = $field;			}		}		return $fields;	}	/**	 * Method to get a form field markup for the field input.	 *	 * @param   string  $name   The name of the form field.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 * @param   mixed   $value  The optional value to use as the default for the field.	 *	 * @return  string  The form field markup.	 *	 * @since   11.1	 */	public function getInput($name, $group = null, $value = null)	{		// Attempt to get the form field.		if ($field = $this->getField($name, $group, $value))		{			return $field->input;		}		return '';	}	/**	 * Method to get the label for a field input.	 *	 * @param   string  $name   The name of the form field.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 *	 * @return  string  The form field label.	 *	 * @since   11.1	 */	public function getLabel($name, $group = null)	{		// Attempt to get the form field.		if ($field = $this->getField($name, $group))		{			return $field->label;		}		return '';	}	/**	 * Method to get the form name.	 *	 * @return  string  The name of the form.	 *	 * @since   11.1	 */	public function getName()	{		return $this->name;	}	/**	 * Method to get the value of a field.	 *	 * @param   string  $name     The name of the field for which to get the value.	 * @param   string  $group    The optional dot-separated form group path on which to get the value.	 * @param   mixed   $default  The optional default value of the field value is empty.	 *	 * @return  mixed  The value of the field or the default value if empty.	 *	 * @since   11.1	 */	public function getValue($name, $group = null, $default = null)	{		// If a group is set use it.		if ($group)		{			$return = $this->data->get($group . '.' . $name, $default);		}		else		{			$return = $this->data->get($name, $default);		}		return $return;	}	/**	 * Method to load the form description from an XML string or object.	 *	 * The replace option works per field.  If a field being loaded already exists in the current	 * form definition then the behavior or load will vary depending upon the replace flag.  If it	 * is set to true, then the existing field will be replaced in its exact location by the new	 * field being loaded.  If it is false, then the new field being loaded will be ignored and the	 * method will move on to the next field to load.	 *	 * @param   string  $data     The name of an XML string or object.	 * @param   string  $replace  Flag to toggle whether form fields should be replaced if a field	 *                            already exists with the same group/name.	 * @param   string  $xpath    An optional xpath to search for the fields.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function load($data, $replace = true, $xpath = false)	{		// If the data to load isn't already an XML element or string return false.		if ((!($data instanceof SimpleXMLElement)) && (!is_string($data)))		{			return false;		}		// Attempt to load the XML if a string.		if (is_string($data))		{			try			{				$data = new SimpleXMLElement($data);			}			catch (Exception $e)			{				return false;			}			// Make sure the XML loaded correctly.			if (!$data)			{				return false;			}		}		// If we have no XML definition at this point let's make sure we get one.		if (empty($this->xml))		{			// If no XPath query is set to search for fields, and we have a <form />, set it and return.			if (!$xpath && ($data->getName() == 'form'))			{				$this->xml = $data;				// Synchronize any paths found in the load.				$this->syncPaths();				return true;			}			// Create a root element for the form.			else			{				$this->xml = new SimpleXMLElement('<form></form>');			}		}		// Get the XML elements to load.		$elements = array();		if ($xpath)		{			$elements = $data->xpath($xpath);		}		elseif ($data->getName() == 'form')		{			$elements = $data->children();		}		// If there is nothing to load return true.		if (empty($elements))		{			return true;		}		// Load the found form elements.		foreach ($elements as $element)		{			// Get an array of fields with the correct name.			$fields = $element->xpath('descendant-or-self::field');			foreach ($fields as $field)			{				// Get the group names as strings for ancestor fields elements.				$attrs = $field->xpath('ancestor::fields[@name]/@name');				$groups = array_map('strval', $attrs ? $attrs : array());				// Check to see if the field exists in the current form.				if ($current = $this->findField((string) $field['name'], implode('.', $groups)))				{					// If set to replace found fields, replace the data and remove the field so we don't add it twice.					if ($replace)					{						$olddom = dom_import_simplexml($current);						$loadeddom = dom_import_simplexml($field);						$addeddom = $olddom->ownerDocument->importNode($loadeddom);						$olddom->parentNode->replaceChild($addeddom, $olddom);						$loadeddom->parentNode->removeChild($loadeddom);					}					else					{						unset($field);					}				}			}			// Merge the new field data into the existing XML document.			self::addNode($this->xml, $element);		}		// Synchronize any paths found in the load.		$this->syncPaths();		return true;	}	/**	 * Method to load the form description from an XML file.	 *	 * The reset option works on a group basis. If the XML file references	 * groups that have already been created they will be replaced with the	 * fields in the new XML file unless the $reset parameter has been set	 * to false.	 *	 * @param   string  $file   The filesystem path of an XML file.	 * @param   string  $reset  Flag to toggle whether form fields should be replaced if a field	 *                          already exists with the same group/name.	 * @param   string  $xpath  An optional xpath to search for the fields.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function loadFile($file, $reset = true, $xpath = false)	{		// Check to see if the path is an absolute path.		if (!is_file($file))		{			// Not an absolute path so let's attempt to find one using JPath.			$file = JPath::find(self::addFormPath(), strtolower($file) . '.xml');			// If unable to find the file return false.			if (!$file)			{				return false;			}		}		// Attempt to load the XML file.		$xml = simplexml_load_file($file);		return $this->load($xml, $reset, $xpath);	}	/**	 * Method to remove a field from the form definition.	 *	 * @param   string  $name   The name of the form field for which remove.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function removeField($name, $group = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Find the form field element from the definition.		$element = $this->findField($name, $group);		// If the element exists remove it from the form definition.		if ($element instanceof SimpleXMLElement)		{			$dom = dom_import_simplexml($element);			$dom->parentNode->removeChild($dom);		}		return true;	}	/**	 * Method to remove a group from the form definition.	 *	 * @param   string  $group  The dot-separated form group path for the group to remove.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function removeGroup($group)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Get the fields elements for a given group.		$elements = &$this->findGroup($group);		foreach ($elements as &$element)		{			$dom = dom_import_simplexml($element);			$dom->parentNode->removeChild($dom);		}		return true;	}	/**	 * Method to reset the form data store and optionally the form XML definition.	 *	 * @param   boolean  $xml  True to also reset the XML form definition.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function reset($xml = false)	{		unset($this->data);		$this->data = new JRegistry;		if ($xml)		{			unset($this->xml);			$this->xml = new SimpleXMLElement('<form></form>');		}		return true;	}	/**	 * Method to set a field XML element to the form definition.  If the replace flag is set then	 * the field will be set whether it already exists or not.  If it isn't set, then the field	 * will not be replaced if it already exists.	 *	 * @param   SimpleXMLElement  $element  The XML element object representation of the form field.	 * @param   string            $group    The optional dot-separated form group path on which to set the field.	 * @param   boolean           $replace  True to replace an existing field if one already exists.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function setField(SimpleXMLElement $element, $group = null, $replace = true)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Find the form field element from the definition.		$old = &$this->findField((string) $element['name'], $group);		// If an existing field is found and replace flag is false do nothing and return true.		if (!$replace && !empty($old))		{			return true;		}		// If an existing field is found and replace flag is true remove the old field.		if ($replace && !empty($old) && ($old instanceof SimpleXMLElement))		{			$dom = dom_import_simplexml($old);			$dom->parentNode->removeChild($dom);		}		// If no existing field is found find a group element and add the field as a child of it.		if ($group)		{			// Get the fields elements for a given group.			$fields = &$this->findGroup($group);			// If an appropriate fields element was found for the group, add the element.			if (isset($fields[0]) && ($fields[0] instanceof SimpleXMLElement))			{				self::addNode($fields[0], $element);			}		}		else		{			// Set the new field to the form.			self::addNode($this->xml, $element);		}		// Synchronize any paths found in the load.		$this->syncPaths();		return true;	}	/**	 * Method to set an attribute value for a field XML element.	 *	 * @param   string  $name       The name of the form field for which to set the attribute value.	 * @param   string  $attribute  The name of the attribute for which to set a value.	 * @param   mixed   $value      The value to set for the attribute.	 * @param   string  $group      The optional dot-separated form group path on which to find the field.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function setFieldAttribute($name, $attribute, $value, $group = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Find the form field element from the definition.		$element = $this->findField($name, $group);		// If the element doesn't exist return false.		if (!($element instanceof SimpleXMLElement))		{			return false;		}		// Otherwise set the attribute and return true.		else		{			$element[$attribute] = $value;			// Synchronize any paths found in the load.			$this->syncPaths();			return true;		}	}	/**	 * Method to set some field XML elements to the form definition.  If the replace flag is set then	 * the fields will be set whether they already exists or not.  If it isn't set, then the fields	 * will not be replaced if they already exist.	 *	 * @param   array    &$elements  The array of XML element object representations of the form fields.	 * @param   string   $group      The optional dot-separated form group path on which to set the fields.	 * @param   boolean  $replace    True to replace existing fields if they already exist.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public function setFields(&$elements, $group = null, $replace = true)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			throw new UnexpectedValueException(sprintf('%s::getFieldAttribute `xml` is not an instance of SimpleXMLElement', get_class($this)));		}		// Make sure the elements to set are valid.		foreach ($elements as $element)		{			if (!($element instanceof SimpleXMLElement))			{				throw new UnexpectedValueException(sprintf('$element not SimpleXMLElement in %s::setFields', get_class($this)));			}		}		// Set the fields.		$return = true;		foreach ($elements as $element)		{			if (!$this->setField($element, $group, $replace))			{				$return = false;			}		}		// Synchronize any paths found in the load.		$this->syncPaths();		return $return;	}	/**	 * Method to set the value of a field. If the field does not exist in the form then the method	 * will return false.	 *	 * @param   string  $name   The name of the field for which to set the value.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 * @param   mixed   $value  The value to set for the field.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function setValue($name, $group = null, $value = null)	{		// If the field does not exist return false.		if (!$this->findField($name, $group))		{			return false;		}		// If a group is set use it.		if ($group)		{			$this->data->set($group . '.' . $name, $value);		}		else		{			$this->data->set($name, $value);		}		return true;	}	/**	 * Method to validate form data.	 *	 * Validation warnings will be pushed into JForm::errors and should be	 * retrieved with JForm::getErrors() when validate returns boolean false.	 *	 * @param   array   $data   An array of field values to validate.	 * @param   string  $group  The optional dot-separated form group path on which to filter the	 *                          fields to be validated.	 *	 * @return  mixed  True on sucess.	 *	 * @since   11.1	 */	public function validate($data, $group = null)	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		$return = true;		// Create an input registry object from the data to validate.		$input = new JRegistry($data);		// Get the fields for which to validate the data.		$fields = $this->findFieldsByGroup($group);		if (!$fields)		{			// PANIC!			return false;		}		// Validate the fields.		foreach ($fields as $field)		{			$value = null;			$name = (string) $field['name'];			// Get the group names as strings for ancestor fields elements.			$attrs = $field->xpath('ancestor::fields[@name]/@name');			$groups = array_map('strval', $attrs ? $attrs : array());			$group = implode('.', $groups);			// Get the value from the input data.			if ($group)			{				$value = $input->get($group . '.' . $name);			}			else			{				$value = $input->get($name);			}			// Validate the field.			$valid = $this->validateField($field, $group, $value, $input);			// Check for an error.			if ($valid instanceof Exception)			{				array_push($this->errors, $valid);				$return = false;			}		}		return $return;	}	/**	 * Method to apply an input filter to a value based on field data.	 *	 * @param   string  $element  The XML element object representation of the form field.	 * @param   mixed   $value    The value to filter for the field.	 *	 * @return  mixed   The filtered value.	 *	 * @since   11.1	 */	protected function filterField($element, $value)	{		// Make sure there is a valid SimpleXMLElement.		if (!($element instanceof SimpleXMLElement))		{			return false;		}		// Get the field filter type.		$filter = (string) $element['filter'];		// Process the input value based on the filter.		$return = null;		switch (strtoupper($filter))		{			// Access Control Rules.			case 'RULES':				$return = array();				foreach ((array) $value as $action => $ids)				{					// Build the rules array.					$return[$action] = array();					foreach ($ids as $id => $p)					{						if ($p !== '')						{							$return[$action][$id] = ($p == '1' || $p == 'true') ? true : false;						}					}				}				break;			// Do nothing, thus leaving the return value as null.			case 'UNSET':				break;			// No Filter.			case 'RAW':				$return = $value;				break;			// Filter the input as an array of integers.			case 'INT_ARRAY':				// Make sure the input is an array.				if (is_object($value))				{					$value = get_object_vars($value);				}				$value = is_array($value) ? $value : array($value);				JArrayHelper::toInteger($value);				$return = $value;				break;			// Filter safe HTML.			case 'SAFEHTML':				$return = JFilterInput::getInstance(null, null, 1, 1)->clean($value, 'string');				break;			// Convert a date to UTC based on the server timezone offset.			case 'SERVER_UTC':				if ((int) $value > 0)				{					// Get the server timezone setting.					$offset = JFactory::getConfig()->get('offset');					// Return an SQL formatted datetime string in UTC.					$return = JFactory::getDate($value, $offset)->toSql();				}				else				{					$return = '';				}				break;			// Convert a date to UTC based on the user timezone offset.			case 'USER_UTC':				if ((int) $value > 0)				{					// Get the user timezone setting defaulting to the server timezone setting.					$offset = JFactory::getUser()->getParam('timezone', JFactory::getConfig()->get('offset'));					// Return a MySQL formatted datetime string in UTC.					$return = JFactory::getDate($value, $offset)->toSql();				}				else				{					$return = '';				}				break;			// Ensures a protocol is present in the saved field. Only use when			// the only permitted protocols requre '://'. See JFormRuleUrl for list of these.			case 'URL':				if (empty($value))				{					return;				}				$value = JFilterInput::getInstance()->clean($value, 'html');				$value = trim($value);				// Check for a protocol				$protocol = parse_url($value, PHP_URL_SCHEME);				// If there is no protocol and the relative option is not specified,				// we assume that it is an external URL and prepend http://.				if (($element['type'] == 'url' && !$protocol &&  !$element['relative'])					|| (!$element['type'] == 'url' && !$protocol))				{					$protocol = 'http';					// If it looks like an internal link, then add the root.					if (substr($value, 0) == 'index.php')					{						$value = JURI::root() . $value;					}					// Otherwise we treat it is an external link.					// Put the url back together.					$value = $protocol . '://' . $value;				}				// If relative URLS are allowed we assume that URLs without protocols are internal.				elseif (!$protocol && $element['relative'])				{					$host = JURI::getInstance('SERVER')->gethost();					// If it starts with the host string, just prepend the protocol.					if (substr($value, 0) == $host)					{						$value = 'http://' . $value;					}					// Otherwise prepend the root.					else					{						$value = JURI::root() . $value;					}				}				$return = $value;				break;			case 'TEL':				$value = trim($value);				// Does it match the NANP pattern?				if (preg_match('/^(?:\+?1[-. ]?)?\(?([2-9][0-8][0-9])\)?[-. ]?([2-9][0-9]{2})[-. ]?([0-9]{4})$/', $value) == 1)				{					$number = (string) preg_replace('/[^\d]/', '', $value);					if (substr($number, 0, 1) == 1)					{						$number = substr($number, 1);					}					if (substr($number, 0, 2) == '+1')					{						$number = substr($number, 2);					}					$result = '1.' . $number;				}				// If not, does it match ITU-T?				elseif (preg_match('/^\+(?:[0-9] ?){6,14}[0-9]$/', $value) == 1)				{					$countrycode = substr($value, 0, strpos($value, ' '));					$countrycode = (string) preg_replace('/[^\d]/', '', $countrycode);					$number = strstr($value, ' ');					$number = (string) preg_replace('/[^\d]/', '', $number);					$result = $countrycode . '.' . $number;				}				// If not, does it match EPP?				elseif (preg_match('/^\+[0-9]{1,3}\.[0-9]{4,14}(?:x.+)?$/', $value) == 1)				{					if (strstr($value, 'x'))					{						$xpos = strpos($value, 'x');						$value = substr($value, 0, $xpos);					}					$result = str_replace('+', '', $value);				}				// Maybe it is already ccc.nnnnnnn?				elseif (preg_match('/[0-9]{1,3}\.[0-9]{4,14}$/', $value) == 1)				{					$result = $value;				}				// If not, can we make it a string of digits?				else				{					$value = (string) preg_replace('/[^\d]/', '', $value);					if ($value != null && strlen($value) <= 15)					{						$length = strlen($value);						// If it is fewer than 13 digits assume it is a local number						if ($length <= 12)						{							$result = '.' . $value;						}						else						{							// If it has 13 or more digits let's make a country code.							$cclen = $length - 12;							$result = substr($value, 0, $cclen) . '.' . substr($value, $cclen);						}					}					// If not let's not save anything.					else					{						$result = '';					}				}				$return = $result;				break;			default:				// Check for a callback filter.				if (strpos($filter, '::') !== false && is_callable(explode('::', $filter)))				{					$return = call_user_func(explode('::', $filter), $value);				}				// Filter using a callback function if specified.				elseif (function_exists($filter))				{					$return = call_user_func($filter, $value);				}				// Filter using JFilterInput. All HTML code is filtered by default.				else				{					$return = JFilterInput::getInstance()->clean($value, $filter);				}				break;		}		return $return;	}	/**	 * Method to get a form field represented as an XML element object.	 *	 * @param   string  $name   The name of the form field.	 * @param   string  $group  The optional dot-separated form group path on which to find the field.	 *	 * @return  mixed  The XML element object for the field or boolean false on error.	 *	 * @since   11.1	 */	protected function findField($name, $group = null)	{		$element = false;		$fields = array();		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		// Let's get the appropriate field element based on the method arguments.		if ($group)		{			// Get the fields elements for a given group.			$elements = &$this->findGroup($group);			// Get all of the field elements with the correct name for the fields elements.			foreach ($elements as $element)			{				// If there are matching field elements add them to the fields array.				if ($tmp = $element->xpath('descendant::field[@name="' . $name . '"]'))				{					$fields = array_merge($fields, $tmp);				}			}			// Make sure something was found.			if (!$fields)			{				return false;			}			// Use the first correct match in the given group.			$groupNames = explode('.', $group);			foreach ($fields as &$field)			{				// Get the group names as strings for ancestor fields elements.				$attrs = $field->xpath('ancestor::fields[@name]/@name');				$names = array_map('strval', $attrs ? $attrs : array());				// If the field is in the exact group use it and break out of the loop.				if ($names == (array) $groupNames)				{					$element = &$field;					break;				}			}		}		else		{			// Get an array of fields with the correct name.			$fields = $this->xml->xpath('//field[@name="' . $name . '"]');			// Make sure something was found.			if (!$fields)			{				return false;			}			// Search through the fields for the right one.			foreach ($fields as &$field)			{				// If we find an ancestor fields element with a group name then it isn't what we want.				if ($field->xpath('ancestor::fields[@name]'))				{					continue;				}				// Found it!				else				{					$element = &$field;					break;				}			}		}		return $element;	}	/**	 * Method to get an array of <field /> elements from the form XML document which are	 * in a specified fieldset by name.	 *	 * @param   string  $name  The name of the fieldset.	 *	 * @return  mixed  Boolean false on error or array of SimpleXMLElement objects.	 *	 * @since   11.1	 */	protected function &findFieldsByFieldset($name)	{		$false = false;		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return $false;		}		/*		 * Get an array of <field /> elements that are underneath a <fieldset /> element		 * with the appropriate name attribute, and also any <field /> elements with		 * the appropriate fieldset attribute.		 */		$fields = $this->xml->xpath('//fieldset[@name="' . $name . '"]//field | //field[@fieldset="' . $name . '"]');		return $fields;	}	/**	 * Method to get an array of <field /> elements from the form XML document which are	 * in a control group by name.	 *	 * @param   mixed    $group   The optional dot-separated form group path on which to find the fields.	 *                            Null will return all fields. False will return fields not in a group.	 * @param   boolean  $nested  True to also include fields in nested groups that are inside of the	 *                            group for which to find fields.	 *	 * @return  mixed  Boolean false on error or array of SimpleXMLElement objects.	 *	 * @since   11.1	 */	protected function &findFieldsByGroup($group = null, $nested = false)	{		$false = false;		$fields = array();		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return $false;		}		// Get only fields in a specific group?		if ($group)		{			// Get the fields elements for a given group.			$elements = &$this->findGroup($group);			// Get all of the field elements for the fields elements.			foreach ($elements as $element)			{				// If there are field elements add them to the return result.				if ($tmp = $element->xpath('descendant::field'))				{					// If we also want fields in nested groups then just merge the arrays.					if ($nested)					{						$fields = array_merge($fields, $tmp);					}					// If we want to exclude nested groups then we need to check each field.					else					{						$groupNames = explode('.', $group);						foreach ($tmp as $field)						{							// Get the names of the groups that the field is in.							$attrs = $field->xpath('ancestor::fields[@name]/@name');							$names = array_map('strval', $attrs ? $attrs : array());							// If the field is in the specific group then add it to the return list.							if ($names == (array) $groupNames)							{								$fields = array_merge($fields, array($field));							}						}					}				}			}		}		elseif ($group === false)		{			// Get only field elements not in a group.			$fields = $this->xml->xpath('descendant::fields[not(@name)]/field | descendant::fields[not(@name)]/fieldset/field ');		}		else		{			// Get an array of all the <field /> elements.			$fields = $this->xml->xpath('//field');		}		return $fields;	}	/**	 * Method to get a form field group represented as an XML element object.	 *	 * @param   string  $group  The dot-separated form group path on which to find the group.	 *	 * @return  mixed  An array of XML element objects for the group or boolean false on error.	 *	 * @since   11.1	 */	protected function &findGroup($group)	{		$false = false;		$groups = array();		$tmp = array();		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return $false;		}		// Make sure there is actually a group to find.		$group = explode('.', $group);		if (!empty($group))		{			// Get any fields elements with the correct group name.			$elements = $this->xml->xpath('//fields[@name="' . (string) $group[0] . '"]');			// Check to make sure that there are no parent groups for each element.			foreach ($elements as $element)			{				if (!$element->xpath('ancestor::fields[@name]'))				{					$tmp[] = $element;				}			}			// Iterate through the nested groups to find any matching form field groups.			for ($i = 1, $n = count($group); $i < $n; $i++)			{				// Initialise some loop variables.				$validNames = array_slice($group, 0, $i + 1);				$current = $tmp;				$tmp = array();				// Check to make sure that there are no parent groups for each element.				foreach ($current as $element)				{					// Get any fields elements with the correct group name.					$children = $element->xpath('descendant::fields[@name="' . (string) $group[$i] . '"]');					// For the found fields elements validate that they are in the correct groups.					foreach ($children as $fields)					{						// Get the group names as strings for ancestor fields elements.						$attrs = $fields->xpath('ancestor-or-self::fields[@name]/@name');						$names = array_map('strval', $attrs ? $attrs : array());						// If the group names for the fields element match the valid names at this						// level add the fields element.						if ($validNames == $names)						{							$tmp[] = $fields;						}					}				}			}			// Only include valid XML objects.			foreach ($tmp as $element)			{				if ($element instanceof SimpleXMLElement)				{					$groups[] = $element;				}			}		}		return $groups;	}	/**	 * Method to load, setup and return a JFormField object based on field data.	 *	 * @param   string  $element  The XML element object representation of the form field.	 * @param   string  $group    The optional dot-separated form group path on which to find the field.	 * @param   mixed   $value    The optional value to use as the default for the field.	 *	 * @return  mixed  The JFormField object for the field or boolean false on error.	 *	 * @since   11.1	 */	protected function loadField($element, $group = null, $value = null)	{		// Make sure there is a valid SimpleXMLElement.		if (!($element instanceof SimpleXMLElement))		{			return false;		}		// Get the field type.		$type = $element['type'] ? (string) $element['type'] : 'text';		// Load the JFormField object for the field.		$field = $this->loadFieldType($type);		// If the object could not be loaded, get a text field object.		if ($field === false)		{			$field = $this->loadFieldType('text');		}		/*		 * Get the value for the form field if not set.		 * Default to the translated version of the 'default' attribute		 * if 'translate_default' attribute if set to 'true' or '1'		 * else the value of the 'default' attribute for the field.		 */		if ($value === null)		{			$default = (string) $element['default'];			if (($translate = $element['translate_default']) && ((string) $translate == 'true' || (string) $translate == '1'))			{				$lang = JFactory::getLanguage();				if ($lang->hasKey($default))				{					$debug = $lang->setDebug(false);					$default = JText::_($default);					$lang->setDebug($debug);				}				else				{					$default = JText::_($default);				}			}			$value = $this->getValue((string) $element['name'], $group, $default);		}		// Setup the JFormField object.		$field->setForm($this);		if ($field->setup($element, $value, $group))		{			return $field;		}		else		{			return false;		}	}	/**	 * Proxy for {@link JFormHelper::loadFieldType()}.	 *	 * @param   string   $type  The field type.	 * @param   boolean  $new   Flag to toggle whether we should get a new instance of the object.	 *	 * @return  mixed  JFormField object on success, false otherwise.	 *	 * @since   11.1	 */	protected function loadFieldType($type, $new = true)	{		return JFormHelper::loadFieldType($type, $new);	}	/**	 * Proxy for JFormHelper::loadRuleType().	 *	 * @param   string   $type  The rule type.	 * @param   boolean  $new   Flag to toggle whether we should get a new instance of the object.	 *	 * @return  mixed  JFormRule object on success, false otherwise.	 *	 * @see     JFormHelper::loadRuleType()	 * @since   11.1	 */	protected function loadRuleType($type, $new = true)	{		return JFormHelper::loadRuleType($type, $new);	}	/**	 * Method to synchronize any field, form or rule paths contained in the XML document.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @todo    Maybe we should receive all addXXXpaths attributes at once?	 */	protected function syncPaths()	{		// Make sure there is a valid JForm XML document.		if (!($this->xml instanceof SimpleXMLElement))		{			return false;		}		// Get any addfieldpath attributes from the form definition.		$paths = $this->xml->xpath('//*[@addfieldpath]/@addfieldpath');		$paths = array_map('strval', $paths ? $paths : array());		// Add the field paths.		foreach ($paths as $path)		{			$path = JPATH_ROOT . '/' . ltrim($path, '/\\');			self::addFieldPath($path);		}		// Get any addformpath attributes from the form definition.		$paths = $this->xml->xpath('//*[@addformpath]/@addformpath');		$paths = array_map('strval', $paths ? $paths : array());		// Add the form paths.		foreach ($paths as $path)		{			$path = JPATH_ROOT . '/' . ltrim($path, '/\\');			self::addFormPath($path);		}		// Get any addrulepath attributes from the form definition.		$paths = $this->xml->xpath('//*[@addrulepath]/@addrulepath');		$paths = array_map('strval', $paths ? $paths : array());		// Add the rule paths.		foreach ($paths as $path)		{			$path = JPATH_ROOT . '/' . ltrim($path, '/\\');			self::addRulePath($path);		}		return true;	}	/**	 * Method to validate a JFormField object based on field data.	 *	 * @param   SimpleXMLElement  $element  The XML element object representation of the form field.	 * @param   string            $group    The optional dot-separated form group path on which to find the field.	 * @param   mixed             $value    The optional value to use as the default for the field.	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate	 *                                      against the entire form.	 *	 * @return  mixed  Boolean true if field value is valid, Exception on failure.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 * @throws  UnexpectedValueException	 */	protected function validateField(SimpleXMLElement $element, $group = null, $value = null, JRegistry $input = null)	{		$valid = true;		// Check if the field is required.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if ($required)		{			// If the field is required and the value is empty return an error message.			if (($value === '') || ($value === null))			{				if ($element['label'])				{					$message = JText::_($element['label']);				}				else				{					$message = JText::_($element['name']);				}				$message = JText::sprintf('JLIB_FORM_VALIDATE_FIELD_REQUIRED', $message);				return new RuntimeException($message);			}		}		// Get the field validation rule.		if ($type = (string) $element['validate'])		{			// Load the JFormRule object for the field.			$rule = $this->loadRuleType($type);			// If the object could not be loaded return an error message.			if ($rule === false)			{				throw new UnexpectedValueException(sprintf('%s::validateField() rule `%s` missing.', get_class($this), $type));			}			// Run the field validation rule test.			$valid = $rule->test($element, $value, $group, $input, $this);			// Check for an error in the validation test.			if ($valid instanceof Exception)			{				return $valid;			}		}		// Check if the field is valid.		if ($valid === false)		{			// Does the field have a defined error message?			$message = (string) $element['message'];			if ($message)			{				$message = JText::_($element['message']);				return new UnexpectedValueException($message);			}			else			{				$message = JText::_($element['label']);				$message = JText::sprintf('JLIB_FORM_VALIDATE_FIELD_INVALID', $message);				return new UnexpectedValueException($message);			}		}		return true;	}	/**	 * Proxy for {@link JFormHelper::addFieldPath()}.	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @since   11.1	 */	public static function addFieldPath($new = null)	{		return JFormHelper::addFieldPath($new);	}	/**	 * Proxy for JFormHelper::addFormPath().	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @see     JFormHelper::addFormPath()	 * @since   11.1	 */	public static function addFormPath($new = null)	{		return JFormHelper::addFormPath($new);	}	/**	 * Proxy for JFormHelper::addRulePath().	 *	 * @param   mixed  $new  A path or array of paths to add.	 *	 * @return  array  The list of paths that have been added.	 *	 * @see JFormHelper::addRulePath()	 * @since   11.1	 */	public static function addRulePath($new = null)	{		return JFormHelper::addRulePath($new);	}	/**	 * Method to get an instance of a form.	 *	 * @param   string  $name     The name of the form.	 * @param   string  $data     The name of an XML file or string to load as the form definition.	 * @param   array   $options  An array of form options.	 * @param   string  $replace  Flag to toggle whether form fields should be replaced if a field	 *                            already exists with the same group/name.	 * @param   string  $xpath    An optional xpath to search for the fields.	 *	 * @return  object  JForm instance.	 *	 * @since   11.1	 * @throws  InvalidArgumentException if no data provided.	 * @throws  RuntimeException if the form could not be loaded.	 */	public static function getInstance($name, $data = null, $options = array(), $replace = true, $xpath = false)	{		// Reference to array with form instances		$forms = &self::$forms;		// Only instantiate the form if it does not already exist.		if (!isset($forms[$name]))		{			$data = trim($data);			if (empty($data))			{				throw new InvalidArgumentException(sprintf('JForm::getInstance(name, *%s*)', gettype($data)));			}			// Instantiate the form.			$forms[$name] = new JForm($name, $options);			// Load the data.			if (substr(trim($data), 0, 1) == '<')			{				if ($forms[$name]->load($data, $replace, $xpath) == false)				{					throw new RuntimeException('JForm::getInstance could not load form');				}			}			else			{				if ($forms[$name]->loadFile($data, $replace, $xpath) == false)				{					throw new RuntimeException('JForm::getInstance could not load file');				}			}		}		return $forms[$name];	}	/**	 * Adds a new child SimpleXMLElement node to the source.	 *	 * @param   SimpleXMLElement  $source  The source element on which to append.	 * @param   SimpleXMLElement  $new     The new element to append.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function addNode(SimpleXMLElement $source, SimpleXMLElement $new)	{		// Add the new child node.		$node = $source->addChild($new->getName(), trim($new));		// Add the attributes of the child node.		foreach ($new->attributes() as $name => $value)		{			$node->addAttribute($name, $value);		}		// Add any children of the new node.		foreach ($new->children() as $child)		{			self::addNode($node, $child);		}	}	/**	 * Update the attributes of a child node	 *	 * @param   SimpleXMLElement  $source  The source element on which to append the attributes	 * @param   SimpleXMLElement  $new     The new element to append	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function mergeNode(SimpleXMLElement $source, SimpleXMLElement $new)	{		// Update the attributes of the child node.		foreach ($new->attributes() as $name => $value)		{			if (isset($source[$name]))			{				$source[$name] = (string) $value;			}			else			{				$source->addAttribute($name, $value);			}		}	}	/**	 * Merges new elements into a source <fields> element.	 *	 * @param   SimpleXMLElement  $source  The source element.	 * @param   SimpleXMLElement  $new     The new element to merge.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function mergeNodes(SimpleXMLElement $source, SimpleXMLElement $new)	{		// The assumption is that the inputs are at the same relative level.		// So we just have to scan the children and deal with them.		// Update the attributes of the child node.		foreach ($new->attributes() as $name => $value)		{			if (isset($source[$name]))			{				$source[$name] = (string) $value;			}			else			{				$source->addAttribute($name, $value);			}		}		foreach ($new->children() as $child)		{			$type = $child->getName();			$name = $child['name'];			// Does this node exist?			$fields = $source->xpath($type . '[@name="' . $name . '"]');			if (empty($fields))			{				// This node does not exist, so add it.				self::addNode($source, $child);			}			else			{				// This node does exist.				switch ($type)				{					case 'field':						self::mergeNode($fields[0], $child);						break;					default:						self::mergeNodes($fields[0], $child);						break;				}			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (isset($fieldSet->description) && trim($fieldSet->description)) :	echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';endif;?><fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>	<ul class="adminformlist">			<li><?php echo $this->form->getLabel('created_user_id'); ?>			<?php echo $this->form->getInput('created_user_id'); ?></li>			<li><?php echo $this->form->getLabel('created_by_alias'); ?>			<?php echo $this->form->getInput('created_by_alias'); ?></li>			<li><?php echo $this->form->getLabel('created_time'); ?>			<?php echo $this->form->getInput('created_time'); ?></li>			<li><?php echo $this->form->getLabel('publish_up'); ?>			<?php echo $this->form->getInput('publish_up'); ?></li>			<li><?php echo $this->form->getLabel('publish_down'); ?>			<?php echo $this->form->getInput('publish_down'); ?></li>			<li><?php echo $this->form->getLabel('modified_user_id'); ?>			<?php echo $this->form->getInput('modified_user_id'); ?></li>			<li><?php echo $this->form->getLabel('modified_time'); ?>			<?php echo $this->form->getInput('modified_time'); ?></li>			<li><?php echo $this->form->getLabel('version'); ?>			<?php echo $this->form->getInput('version'); ?></li>			</ul></fieldset><?php $fieldSets = $this->form->getFieldsets('params'); foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API Companies class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinCompanies extends JLinkedinObject{	/**	 * Method to retrieve companies using a company ID, a universal name, or an email domain.	 *	 * @param   integer  $id      The unique internal numeric company identifier.	 * @param   string   $name    The unique string identifier for a company.	 * @param   string   $domain  Company email domains.	 * @param   string   $fields  Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 * @throws  RuntimeException	 */	public function getCompanies($id = null, $name = null, $domain = null, $fields = null)	{		// At least one value is needed to retrieve data.		if ($id == null && $name == null && $domain == null)		{			// We don't have a valid entry			throw new RuntimeException('You must specify a company ID, a universal name, or an email domain.');		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/companies';		if ($id && $name)		{			$base .= '::(' . $id . ',universal-name=' . $name . ')';		}		elseif ($id)		{			$base .= '/' . $id;		}		elseif ($name)		{			$base .= '/universal-name=' . $name;		}		// Set request parameters.		$data['format'] = 'json';		if ($domain)		{			$data['email-domain'] = $domain;		}		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to read shares for a particular company .	 *	 * @param   string   $id     The unique company identifier.	 * @param   string   $type   Any valid Company Update Type from the table: https://developer.linkedin.com/reading-company-updates.	 * @param   integer  $count  Maximum number of updates to return.	 * @param   integer  $start  The offset by which to start Network Update pagination.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getUpdates($id, $type = null, $count = 0, $start = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/companies/' . $id . '/updates';		// Set request parameters.		$data['format'] = 'json';		// Check if type is specified.		if ($type)		{			$data['event-type'] = $type;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to search across company pages.	 *	 * @param   string   $fields    Request fields beyond the default ones.	 * @param   string   $keywords  Members who have all the keywords anywhere in their profile.	 * @param   boolean  $hq        Matching companies by the headquarters location. When this is set to "true" and a location facet is used,	 * 								this restricts returned companies to only those whose headquarters resides in the specified location.	 * @param   string   $facets    Facet buckets to return, e.g. location.	 * @param   array    $facet     Array of facet values to search over. Contains values for location, industry, network, company-size,	 * 								num-followers-range and fortune, in exactly this order, null must be specified for an element if no value.	 * @param   integer  $start     Starting location within the result set for paginated returns.	 * @param   integer  $count     The number of results returned.	 * @param   string   $sort      Controls the search result order. There are four options: relevance, relationship,	 * 								followers and company-size.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function search($fields = null, $keywords = null, $hq = false, $facets = null, $facet = null, $start = 0, $count = 0, $sort = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/company-search';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if keywords is specified.		if ($keywords)		{			$data['keywords'] = $keywords;		}		// Check if hq is true.		if ($hq)		{			$data['hq-only'] = $hq;		}		// Check if facets is specified.		if ($facets)		{			$data['facets'] = $facets;		}		// Check if facet is specified.		if ($facet)		{			$data['facet'] = array();			for ($i = 0; $i < count($facet); $i++)			{				if ($facet[$i])				{					if ($i == 0)					{						$data['facet'][] = 'location,' . $facet[$i];					}					if ($i == 1)					{						$data['facet'][] = 'industry,' . $facet[$i];					}					if ($i == 2)					{						$data['facet'][] = 'network,' . $facet[$i];					}					if ($i == 3)					{						$data['facet'][] = 'company-size,' . $facet[$i];					}					if ($i == 4)					{						$data['facet'][] = 'num-followers-range,' . $facet[$i];					}					if ($i == 5)					{						$data['facet'][] = 'fortune,' . $facet[$i];					}				}			}		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Check if sort is specified.		if ($sort)		{			$data['sort'] = $sort;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get a list of companies the current member is following.	 *	 * @param   string  $fields  Request fields beyond the default ones.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getFollowed($fields = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/following/companies';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to follow a company.	 *	 * @param   string  $id  The unique identifier for a company.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function follow($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 201);		// Set the API base		$base = '/v1/people/~/following/companies';		// Build xml.		$xml = '<company><id>' . $id . '</id></company>';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		return $response;	}	/**	 * Method to unfollow a company.	 *	 * @param   string  $id  The unique identifier for a company.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function unfollow($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the success response code.		$this->oauth->setOption('success_code', 204);		// Set the API base		$base = '/v1/people/~/following/companies/id=' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters);		return $response;	}	/**	 * Method to get a collection of suggested companies for the current user.	 *	 * @param   string   $fields  Request fields beyond the default ones.	 * @param   integer  $start   Starting location within the result set for paginated returns.	 * @param   integer  $count   The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getSuggested($fields = null, $start = 0, $count = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/suggestions/to-follow/companies';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get a collection of suggested companies for the current user.	 *	 * @param   string   $id      The unique identifier for a company.	 * @param   string   $fields  Request fields beyond the default ones.	 * @param   integer  $start   Starting location within the result set for paginated returns.	 * @param   integer  $count   The number of results returned.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getProducts($id, $fields = null, $start = 0, $count = 0)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/companies/' . $id . '/products';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count > 0)		{			$data['count'] = $count;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink Component HTML Helper * * @static * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class JHtmlIcon{	public static function create($weblink, $params)	{		$uri = JURI::getInstance();		$url = JRoute::_(WeblinksHelperRoute::getFormRoute(0, base64_encode($uri)));		$text = JHtml::_('image', 'system/new.png', JText::_('JNEW'), null, true);		$button = JHtml::_('link', $url, $text);		$output = '<span class="hasTip" title="'.JText::_('COM_WEBLINKS_FORM_CREATE_WEBLINK').'">'.$button.'</span>';		return $output;	}	public static function edit($weblink, $params, $attribs = array())	{		$uri = JURI::getInstance();		if ($params && $params->get('popup'))		{			return;		}		if ($weblink->state < 0)		{			return;		}		JHtml::_('behavior.tooltip');		$url	= WeblinksHelperRoute::getFormRoute($weblink->id, base64_encode($uri));		$icon	= $weblink->state ? 'edit.png' : 'edit_unpublished.png';		$text	= JHtml::_('image', 'system/'.$icon, JText::_('JGLOBAL_EDIT'), null, true);		if ($weblink->state == 0)		{			$overlib = JText::_('JUNPUBLISHED');		}		else		{			$overlib = JText::_('JPUBLISHED');		}		$date = JHtml::_('date', $weblink->created);		$author = $weblink->created_by_alias ? $weblink->created_by_alias : $weblink->author;		$overlib .= '&lt;br /&gt;';		$overlib .= $date;		$overlib .= '&lt;br /&gt;';		$overlib .= htmlspecialchars($author, ENT_COMPAT, 'UTF-8');		$button = JHtml::_('link', JRoute::_($url), $text);		$output = '<span class="hasTip" title="'.JText::_('COM_WEBLINKS_EDIT').' :: '.$overlib.'">'.$button.'</span>';		return $output;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds Component Route Helper * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.5 */abstract class NewsfeedsHelperRoute{	protected static $lookup;	/**	 * @param   integer  The route of the newsfeed	 */	public static function getNewsfeedRoute($id, $catid, $language = 0)	{		$needles = array(			'newsfeed'  => array((int) $id)		);		//Create the link		$link = 'index.php?option=com_newsfeeds&view=newsfeed&id='. $id;		if ((int) $catid > 1)		{			$categories = JCategories::getInstance('Newsfeeds');			$category = $categories->get((int) $catid);			if ($category)			{				//TODO Throw error that the category either not exists or is unpublished				$needles['category'] = array_reverse($category->getPath());				$needles['categories'] = $needles['category'];				$link .= '&catid='.$catid;			}		}		if ($language && $language != "*" && JLanguageMultilang::isEnabled())		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select('a.sef AS sef')				->select('a.lang_code AS lang_code')				->from('#__languages AS a');			$db->setQuery($query);			$langs = $db->loadObjectList();			foreach ($langs as $lang)			{				if ($language == $lang->lang_code)				{					$link .= '&lang='.$lang->sef;					$needles['language'] = $language;				}			}		}		if ($item = self::_findItem($needles))		{			$link .= '&Itemid='.$item;		}		elseif ($item = self::_findItem())		{			$link .= '&Itemid='.$item;		}		return $link;	}	public static function getCategoryRoute($catid, $language = 0)	{		if ($catid instanceof JCategoryNode)		{			$id = $catid->id;			$category = $catid;		}		else		{			$id = (int) $catid;			$category = JCategories::getInstance('Newsfeeds')->get($id);		}		if ($id < 1)		{			$link = '';		}		else		{			//Create the link			$link = 'index.php?option=com_newsfeeds&view=category&id='.$id;			$needles = array(				'category' => array($id)			);			if ($language && $language != "*" && JLanguageMultilang::isEnabled())			{				$db		= JFactory::getDbo();				$query	= $db->getQuery(true)					->select('a.sef AS sef')					->select('a.lang_code AS lang_code')					->from('#__languages AS a');				$db->setQuery($query);				$langs = $db->loadObjectList();				foreach ($langs as $lang)				{					if ($language == $lang->lang_code)					{						$link .= '&lang='.$lang->sef;						$needles['language'] = $language;					}				}			}			if ($item = self::_findItem($needles))			{				$link .= '&Itemid='.$item;			}			else			{				if ($category)				{					$catids = array_reverse($category->getPath());					$needles = array(						'category' => $catids,						'categories' => $catids					);					if ($item = self::_findItem($needles))					{						$link .= '&Itemid='.$item;					}					elseif ($item = self::_findItem())					{						$link .= '&Itemid='.$item;					}				}			}		}		return $link;	}	protected static function _findItem($needles = null)	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu('site');		$language	= isset($needles['language']) ? $needles['language'] : '*';		// Prepare the reverse lookup array.		if (!isset(self::$lookup[$language]))		{			self::$lookup[$language] = array();			$component	= JComponentHelper::getComponent('com_newsfeeds');			$attributes = array('component_id');			$values = array($component->id);			if ($language != '*')			{				$attributes[] = 'language';				$values[] = array($needles['language'], '*');			}			$items = $menus->getItems($attributes, $values);			foreach ($items as $item)			{				if (isset($item->query) && isset($item->query['view']))				{					$view = $item->query['view'];				if (!isset(self::$lookup[$language][$view]))					{						self::$lookup[$language][$view] = array();					}					if (isset($item->query['id']))					{						// here it will become a bit tricky						// language != * can override existing entries						// language == * cannot override existing entries						if (!isset(self::$lookup[$language][$view][$item->query['id']]) || $item->language != '*')						{							self::$lookup[$language][$view][$item->query['id']] = $item->id;						}					}				}			}		}		if ($needles)		{			foreach ($needles as $view => $ids)			{				if (isset(self::$lookup[$language][$view]))				{					foreach ($ids as $id)					{						if (isset(self::$lookup[$language][$view][(int) $id]))						{							return self::$lookup[$language][$view][(int) $id];						}					}				}			}		}		$active = $menus->getActive();		if ($active && ($active->language == '*' || !JLanguageMultilang::isEnabled()))		{			return $active->id;		}		// if not found, return language specific home link		$default = $menus->getDefault($language);		return !empty($default->id) ? $default->id : null;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Update View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewUpdate extends InstallerViewDefault{	/**	 * List of update items	 *	 * @var array	 */	protected $items;	/**	 * Model state object	 *	 * @var  object	 */	protected $state;	/**	 * List pagination	 *	 * @var JPagination	 */	protected $pagination;	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$app = JFactory::getApplication();		// Get data from the model		$this->state = $this->get('State');		$this->items = $this->get('Items');		$this->pagination = $this->get('Pagination');		$paths = new stdClass;		$paths->first = '';		$this->paths = &$paths;		if (count($this->items) > 0)		{			$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_WARNINGS_UPDATE_NOTICE'), 'notice');		}		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo = InstallerHelper::getActions();		JToolbarHelper::custom('update.update', 'upload', 'upload', 'COM_INSTALLER_TOOLBAR_UPDATE', true, false);		JToolbarHelper::custom('update.find', 'refresh', 'refresh', 'COM_INSTALLER_TOOLBAR_FIND_UPDATES', false, false);		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_UPDATE');		JHtmlSidebar::setAction('index.php?option=com_installer&view=manage');		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_CLIENT_SELECT'),			'filter_client_id',			JHtml::_('select.options', array('0' => 'JSITE', '1' => 'JADMINISTRATOR'), 'value', 'text', $this->state->get('filter.client_id'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_TYPE_SELECT'),			'filter_type',			JHtml::_('select.options', InstallerHelper::getExtensionTypes(), 'value', 'text', $this->state->get('filter.type'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_FOLDER_SELECT'),			'filter_group',			JHtml::_(				'select.options',				array_merge(InstallerHelper::getExtensionGroupes(), array('*' => JText::_('COM_INSTALLER_VALUE_FOLDER_NONAPPLICABLE'))),				'value',				'text',				$this->state->get('filter.group'),				true			)		);		parent::addToolbar();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User groups list controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerGroups extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_GROUPS';	/**	 * Proxy for getModel.	 *	 * @since   1.6	 */	public function getModel($name = 'Group', $prefix = 'UsersModel')	{		return parent::getModel($name, $prefix, array('ignore_request' => true));	}	/**	 * Removes an item.	 *	 * Overrides JControllerAdmin::delete to check the core.admin permission.	 *	 * @since   1.6	 */	public function delete()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::delete();	}	/**	 * Method to publish a list of records.	 *	 * Overrides JControllerAdmin::publish to check the core.admin permission.	 *	 * @since   1.6	 */	public function publish()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::publish();	}	/**	 * Changes the order of one or more records.	 *	 * Overrides JControllerAdmin::reorder to check the core.admin permission.	 *	 * @since   1.6	 */	public function reorder()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::reorder();	}	/**	 * Method to save the submitted ordering values for records.	 *	 * Overrides JControllerAdmin::saveorder to check the core.admin permission.	 *	 * @since   1.6	 */	public function saveorder()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::saveorder();	}	/**	 * Check in of one or more records.	 *	 * Overrides JControllerAdmin::checkin to check the core.admin permission.	 *	 * @since   1.6	 */	public function checkin()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::checkin();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact */class ContactViewContact extends JViewLegacy{	protected $state;	protected $item;	public function display()	{		// Get model data.		$state = $this->get('State');		$item = $this->get('Item');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		$doc = JFactory::getDocument();		$doc->setMetaData('Content-Type', 'text/directory', true);		$app		= JFactory::getApplication();		$params 	= $app->getParams();		$user		= JFactory::getUser();		$dispatcher = JEventDispatcher::getInstance();		// Compute lastname, firstname and middlename		$item->name = trim($item->name);		// "Lastname, Firstname Midlename" format support		// e.g. "de Gaulle, Charles"		$namearray = explode(',', $item->name);		if (count($namearray) > 1 )		{			$lastname = $namearray[0];			$card_name = $lastname;			$name_and_midname = trim($namearray[1]);			$firstname = '';			if (!empty($name_and_midname))			{				$namearray = explode(' ', $name_and_midname);				$firstname = $namearray[0];				$middlename = (count($namearray) > 1) ? $namearray[1] : '';				$card_name = $firstname . ' ' . ($middlename ? $middlename . ' ' : '') .  $card_name;			}		}		// "Firstname Middlename Lastname" format support		else {			$namearray = explode(' ', $item->name);			$middlename = (count($namearray) > 2) ? $namearray[1] : '';			$firstname = array_shift($namearray);			$lastname = count($namearray) ? end($namearray) : '';			$card_name = $firstname . ($middlename ? ' ' . $middlename : '') . ($lastname ? ' ' . $lastname : '');		}		$rev = date('c', strtotime($item->modified));		JResponse::setHeader('Content-disposition', 'attachment; filename="'.$card_name.'.vcf"', true);		$vcard = array();		$vcard[] .= 'BEGIN:VCARD';		$vcard[] .= 'VERSION:3.0';		$vcard[]  = 'N:'.$lastname.';'.$firstname.';'.$middlename;		$vcard[]  = 'FN:'. $item->name;		$vcard[]  = 'TITLE:'.$item->con_position;		$vcard[]  = 'TEL;TYPE=WORK,VOICE:'.$item->telephone;		$vcard[]  = 'TEL;TYPE=WORK,FAX:'.$item->fax;		$vcard[]  = 'TEL;TYPE=WORK,MOBILE:'.$item->mobile;		$vcard[]  = 'ADR;TYPE=WORK:;;'.$item->address.';'.$item->suburb.';'.$item->state.';'.$item->postcode.';'.$item->country;		$vcard[]  = 'LABEL;TYPE=WORK:'.$item->address."\n".$item->suburb."\n".$item->state."\n".$item->postcode."\n".$item->country;		$vcard[]  = 'EMAIL;TYPE=PREF,INTERNET:'.$item->email_to;		$vcard[]  = 'URL:'.$item->webpage;		$vcard[]  = 'REV:'.$rev.'Z';		$vcard[]  = 'END:VCARD';		echo implode("\n", $vcard);		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $children;	protected $pagination;	protected $lead_items = array();	protected $intro_items = array();	protected $link_items = array();	protected $columns = 1;	public function display($tpl = null)	{		$app	= JFactory::getApplication();		$user	= JFactory::getUser();		// Get some data from the models		$state		= $this->get('State');		$params		= $state->params;		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent		= $this->get('Parent');		$pagination = $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		// Check whether category access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// PREPARE THE DATA		// Get the metrics for the structural page layout.		$numLeading	= $params->def('num_leading_articles', 1);		$numIntro	= $params->def('num_intro_articles', 4);		$numLinks	= $params->def('num_links', 4);		// Compute the article slugs and prepare introtext (runs content plugins).		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item = &$items[$i];			$item->slug = $item->alias ? ($item->id . ':' . $item->alias) : $item->id;			$item->parent_slug = ($item->parent_alias) ? ($item->parent_id . ':' . $item->parent_alias) : $item->parent_id;			// No link for ROOT category			if ($item->parent_alias == 'root')			{				$item->parent_slug = null;			}			$item->catslug		= $item->category_alias ? ($item->catid.':'.$item->category_alias) : $item->catid;			$item->event = new stdClass;			$dispatcher = JEventDispatcher::getInstance();			// Old plugins: Ensure that text property is available			if (!isset($item->text))			{				$item->text = $item->introtext;			}			JPluginHelper::importPlugin('content');			$results = $dispatcher->trigger('onContentPrepare', array ('com_content.category', &$item, &$this->params, 0));			// Old plugins: Use processed text as introtext			$item->introtext = $item->text;			$results = $dispatcher->trigger('onContentAfterTitle', array('com_content.category', &$item, &$item->params, 0));			$item->event->afterDisplayTitle = trim(implode("\n", $results));			$results = $dispatcher->trigger('onContentBeforeDisplay', array('com_content.category', &$item, &$item->params, 0));			$item->event->beforeDisplayContent = trim(implode("\n", $results));			$results = $dispatcher->trigger('onContentAfterDisplay', array('com_content.category', &$item, &$item->params, 0));			$item->event->afterDisplayContent = trim(implode("\n", $results));		}		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $category->id) === false)))		{			// Get the layout from the merged category params			if ($layout = $category->params->get('category_layout'))			{				$this->setLayout($layout);			}		}		// At this point, we are in a menu item, so we don't override the layout		elseif (isset($active->query['layout']))		{			// We need to set the layout from the query in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		// For blog layouts, preprocess the breakdown of leading, intro and linked articles.		// This makes it much easier for the designer to just interrogate the arrays.		if (($params->get('layout_type') == 'blog') || ($this->getLayout() == 'blog'))		{			$max = count($items);			// The first group is the leading articles.			$limit = $numLeading;			for ($i = 0; $i < $limit && $i < $max; $i++)			{				$this->lead_items[$i] = &$items[$i];			}			// The second group is the intro articles.			$limit = $numLeading + $numIntro;			// Order articles across, then down (or single column mode)			for ($i = $numLeading; $i < $limit && $i < $max; $i++)			{				$this->intro_items[$i] = &$items[$i];			}			$this->columns = max(1, $params->def('num_columns', 1));			$order = $params->def('multi_column_order', 1);			if ($order == 0 && $this->columns > 1)			{				// call order down helper				$this->intro_items = ContentHelperQuery::orderDownColumns($this->intro_items, $this->columns);			}			$limit = $numLeading + $numIntro + $numLinks;			// The remainder are the links.			for ($i = $numLeading + $numIntro; $i < $limit && $i < $max;$i++)			{					$this->link_items[$i] = &$items[$i];			}		}		$children = array($category->id => $children);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevel = $params->get('maxLevel', -1);		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		// Increment the category hit counter		$model = $this->getModel();		$model->hit();		$this->category->tags = new JHelperTags;		$this->category->tags->getItemTags('com_content.category', $this->category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_content' || $menu->query['view'] == 'article' || $id != $this->category->id))		{			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_content' || $menu->query['view'] == 'article' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => ContentHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}		// Add feed links		if ($this->params->get('show_feed_link', 1))		{			$link = '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link . '&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link . '&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'tag.cancel' || document.formvalidator.isValid(document.id('tag-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('tag-form'));		}	}</script><div class="weblink-edit"><form action="<?php echo JRoute::_('index.php?option=com_tags&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="tag-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo empty($this->item->id) ? JText::_('JTOOLBAR_NEW') : JText::sprintf('JTOOLBAR_EDIT', $this->item->id); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<li><?php echo $this->form->getLabel('alias'); ?>				<?php echo $this->form->getInput('alias'); ?></li>				<li><?php echo $this->form->getLabel('parent_id'); ?>				<?php echo $this->form->getInput('parent_id'); ?></li>				<li><?php echo $this->form->getLabel('published'); ?>				<?php echo $this->form->getInput('published'); ?></li>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>			</ul>			<div>				<?php echo $this->form->getLabel('description'); ?>				<div class="clr"></div>				<?php echo $this->form->getInput('description'); ?>			</div>		</fieldset>	</div>	<div class="col options-section">		<?php echo JHtml::_('sliders.start', 'weblink-sliders-'.$this->item->id, array('useCookie' => 1)); ?>		<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_PUBLISHING'), 'publishing-details'); ?>		<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_PUBLISHING'); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('created_by'); ?>				<?php echo $this->form->getInput('created_by'); ?></li>				<li><?php echo $this->form->getLabel('created_by_alias'); ?>				<?php echo $this->form->getInput('created_by_alias'); ?></li>				<li><?php echo $this->form->getLabel('created'); ?>				<?php echo $this->form->getInput('created'); ?></li>				<li><?php echo $this->form->getLabel('publish_up'); ?>				<?php echo $this->form->getInput('publish_up'); ?></li>				<li><?php echo $this->form->getLabel('publish_down'); ?>				<?php echo $this->form->getInput('publish_down'); ?></li>				<?php if ($this->item->modified_user_id) : ?>					<li><?php echo $this->form->getLabel('modified_user_id'); ?>					<?php echo $this->form->getInput('modified_user_id'); ?></li>					<li><?php echo $this->form->getLabel('modified'); ?>					<?php echo $this->form->getInput('modified'); ?></li>				<?php endif; ?>				<?php if ($this->item->hits) : ?>					<li><?php echo $this->form->getLabel('hits'); ?>					<?php echo $this->form->getInput('hits'); ?></li>				<?php endif; ?>			</ul>		</fieldset>		<?php echo $this->loadTemplate('options'); ?>		<?php echo $this->loadTemplate('metadata'); ?>		<?php echo JHtml::_('sliders.end'); ?>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<div class="clr"></div></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><div id="installer-update"><form action="<?php echo JRoute::_('index.php?option=com_installer&view=update');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<?php if ($this->showMessage) : ?>		<?php echo $this->loadTemplate('message'); ?>	<?php endif; ?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<?php if (count($this->items)) : ?>	<table class="adminlist" cellspacing="1">		<thead>			<tr>				<th class="checkmark-col"><input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" /></th>				<th class="nowrap"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?></th>				<th class="nowrap"><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_INSTALLTYPE', 'extension_id', $listDirn, $listOrder); ?></th>				<th ><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_TYPE', 'type', $listDirn, $listOrder); ?></th>				<th class="width-10" class="center"><?php echo JText::_('JVERSION'); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_FOLDER', 'folder', $listDirn, $listOrder); ?></th>				<th><?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_CLIENT', 'client_id', $listDirn, $listOrder); ?></th>				<th class="width-25"><?php echo JText::_('COM_INSTALLER_HEADING_DETAILSURL'); ?></th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item):			$client	= $item->client_id ? JText::_('JADMINISTRATOR') : JText::_('JSITE');		?>			<tr class="row<?php echo $i % 2; ?>">				<td><?php echo JHtml::_('grid.id', $i, $item->update_id); ?></td>				<td>					<span class="editlinktip hasTip" title="<?php echo JText::_('JGLOBAL_DESCRIPTION');?>::<?php echo $item->description ? $item->description : JText::_('COM_INSTALLER_MSG_UPDATE_NODESC'); ?>">					<?php echo $item->name; ?>					</span>				</td>				<td class="center">					<?php echo $item->extension_id ? JText::_('COM_INSTALLER_MSG_UPDATE_UPDATE') : JText::_('COM_INSTALLER_NEW_INSTALL') ?>				</td>				<td><?php echo JText::_('COM_INSTALLER_TYPE_' . $item->type) ?></td>				<td class="center"><?php echo $item->version ?></td>				<td class="center"><?php echo @$item->folder != '' ? $item->folder : JText::_('COM_INSTALLER_TYPE_NONAPPLICABLE'); ?></td>				<td class="center"><?php echo $client; ?></td>				<td><?php echo $item->detailsurl ?>					<?php if (isset($item->infourl)) : ?>					<br /><a href="<?php echo $item->infourl;?>"><?php echo $item->infourl;?></a>					<?php endif; ?>				</td>			</tr>		<?php endforeach;?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<?php else : ?>		<p class="nowarning"><?php echo JText::_('COM_INSTALLER_MSG_UPDATE_NOUPDATES'); ?></p>	<?php endif; ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides a grouped list select field. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldGroupedList extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'GroupedList';	/**	 * Method to get the field option groups.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	protected function getGroups()	{		$groups = array();		$label = 0;		foreach ($this->element->children() as $element)		{			switch ($element->getName())			{				// The element is an <option />				case 'option':					// Initialize the group if necessary.					if (!isset($groups[$label]))					{						$groups[$label] = array();					}					// Create a new option object based on the <option /> element.					$tmp = JHtml::_(						'select.option', ($element['value']) ? (string) $element['value'] : trim((string) $element),						JText::alt(trim((string) $element), preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)), 'value', 'text',						((string) $element['disabled'] == 'true')					);					// Set some option attributes.					$tmp->class = (string) $element['class'];					// Set some JavaScript option attributes.					$tmp->onclick = (string) $element['onclick'];					// Add the option.					$groups[$label][] = $tmp;					break;				// The element is a <group />				case 'group':					// Get the group label.					if ($groupLabel = (string) $element['label'])					{						$label = JText::_($groupLabel);					}					// Initialize the group if necessary.					if (!isset($groups[$label]))					{						$groups[$label] = array();					}					// Iterate through the children and build an array of options.					foreach ($element->children() as $option)					{						// Only add <option /> elements.						if ($option->getName() != 'option')						{							continue;						}						// Create a new option object based on the <option /> element.						$tmp = JHtml::_(							'select.option', ($option['value']) ? (string) $option['value'] : JText::_(trim((string) $option)),							JText::_(trim((string) $option)), 'value', 'text', ((string) $option['disabled'] == 'true')						);						// Set some option attributes.						$tmp->class = (string) $option['class'];						// Set some JavaScript option attributes.						$tmp->onclick = (string) $option['onclick'];						// Add the option.						$groups[$label][] = $tmp;					}					if ($groupLabel)					{						$label = count($groups);					}					break;				// Unknown element type.				default:					throw new UnexpectedValueException(sprintf('Unsupported element %s in JFormFieldGroupedList', $element->getName()), 500);			}		}		reset($groups);		return $groups;	}	/**	 * Method to get the field input markup fora grouped list.	 * Multiselect is enabled by using the multiple attribute.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->multiple ? ' multiple="multiple"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field groups.		$groups = (array) $this->getGroups();		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_(				'select.groupedlist', $groups, null,				array(					'list.attr' => $attr, 'id' => $this->id, 'list.select' => $this->value, 'group.items' => null, 'option.key.toHtml' => false,					'option.text.toHtml' => false				)			);			$html[] = '<input type="hidden" name="' . $this->name . '" value="' . $this->value . '"/>';		}		// Create a regular list.		else		{			$html[] = JHtml::_(				'select.groupedlist', $groups, $this->name,				array(					'list.attr' => $attr, 'id' => $this->id, 'list.select' => $this->value, 'group.items' => null, 'option.key.toHtml' => false,					'option.text.toHtml' => false				)			);		}		return implode($html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_SEO_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('seo') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banner table * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersTableBanner extends JTable{	/**	 * Constructor	 *	 * @since   1.5	 */	public function __construct(&$_db)	{		parent::__construct('#__banners', 'id', $_db);		$date = JFactory::getDate();		$this->created = $date->toSql();	}	public function clicks()	{		$query = 'UPDATE #__banners'		. ' SET clicks = (clicks + 1)'		. ' WHERE id = ' . (int) $this->id;		$this->_db->setQuery($query);		$this->_db->execute();	}	/**	 * Overloaded check function	 *	 * @return  boolean	 * @see     JTable::check	 * @since   1.5	 */	public function check()	{		// Set name		$this->name = htmlspecialchars_decode($this->name, ENT_QUOTES);		// Set alias		$this->alias = JApplication::stringURLSafe($this->alias);		if (empty($this->alias))		{			$this->alias = JApplication::stringURLSafe($this->name);		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		// Set ordering		if ($this->state < 0)		{			// Set ordering to 0 if state is archived or trashed			$this->ordering = 0;		} elseif (empty($this->ordering))		{			// Set ordering to last if ordering was 0			$this->ordering = self::getNextOrder($this->_db->quoteName('catid').'=' . $this->_db->quote($this->catid).' AND state>=0');		}		return true;	}	/**	 * Overloaded bind function	 *	 * @param   array  $hash named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see JTable:bind	 * @since 1.5	 */	public function bind($array, $ignore = array())	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			if ((int) $registry->get('width', 0) < 0){				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_NEGATIVE_NOT_PERMITTED', JText::_('COM_BANNERS_FIELD_WIDTH_LABEL')));				return false;			}			if ((int) $registry->get('height', 0) < 0){				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_NEGATIVE_NOT_PERMITTED', JText::_('COM_BANNERS_FIELD_HEIGHT_LABEL')));				return false;			}			// Converts the width and height to an absolute numeric value:			$width = abs((int) $registry->get('width', 0));			$height = abs((int) $registry->get('height', 0));			// Sets the width and height to an empty string if = 0			$registry->set('width', ($width ? $width : ''));			$registry->set('height', ($height ? $height : ''));			$array['params'] = (string) $registry;		}		if (isset($array['imptotal']))		{			$array['imptotal'] = abs((int) $array['imptotal']);		}		return parent::bind($array, $ignore);	}	/**	 * Method to store a row	 *	 * @param boolean $updateNulls True to update fields even if they are null.	 */	public function store($updateNulls = false)	{		if (empty($this->id))		{			$purchase_type = $this->purchase_type;			if ($purchase_type < 0 && $this->cid)			{				$client = JTable::getInstance('Client', 'BannersTable');				$client->load($this->cid);				$purchase_type = $client->purchase_type;			}			if ($purchase_type < 0)			{				$params = JComponentHelper::getParams('com_banners');				$purchase_type = $params->get('purchase_type');			}			switch($purchase_type)			{				case 1:					$this->reset = $this->_db->getNullDate();					break;				case 2:					$date = JFactory::getDate('+1 year '.date('Y-m-d', strtotime('now')));					$reset = $this->_db->quote($date->toSql());					break;				case 3:					$date = JFactory::getDate('+1 month '.date('Y-m-d', strtotime('now')));					$reset = $this->_db->quote($date->toSql());					break;				case 4:					$date = JFactory::getDate('+7 day '.date('Y-m-d', strtotime('now')));					$reset = $this->_db->quote($date->toSql());					break;				case 5:					$date = JFactory::getDate('+1 day '.date('Y-m-d', strtotime('now')));					$reset = $this->_db->quote($date->toSql());					break;			}			// Store the row			parent::store($updateNulls);		}		else		{			// Get the old row			$oldrow = JTable::getInstance('Banner', 'BannersTable');			if (!$oldrow->load($this->id) && $oldrow->getError())			{				$this->setError($oldrow->getError());			}			// Verify that the alias is unique			$table = JTable::getInstance('Banner', 'BannersTable');			if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))			{				$this->setError(JText::_('COM_BANNERS_ERROR_UNIQUE_ALIAS'));				return false;			}			// Store the new row			parent::store($updateNulls);			// Need to reorder ?			if ($oldrow->state >= 0 && ($this->state < 0 || $oldrow->catid != $this->catid))			{				// Reorder the oldrow				$this->reorder($this->_db->quoteName('catid').'=' . $this->_db->quote($oldrow->catid).' AND state>=0');			}		}		return count($this->getErrors()) == 0;	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published, 2=archived, -2=trashed]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Get an instance of the table		$table = JTable::getInstance('Banner', 'BannersTable');		// For all keys		foreach ($pks as $pk)		{			// Load the banner			if (!$table->load($pk))			{				$this->setError($table->getError());			}			// Verify checkout			if ($table->checked_out == 0 || $table->checked_out == $userId)			{				// Change the state				$table->state = $state;				$table->checked_out = 0;				$table->checked_out_time = $this->_db->getNullDate();				// Check the row				$table->check();				// Store the row				if (!$table->store())				{					$this->setError($table->getError());				}			}		}		return count($this->getErrors()) == 0;	}	/**	 * Method to set the sticky state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The sticky state. eg. [0 = unsticked, 1 = sticked]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function stick($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Get an instance of the table		$table = JTable::getInstance('Banner', 'BannersTable');		// For all keys		foreach ($pks as $pk)		{			// Load the banner			if (!$table->load($pk))			{				$this->setError($table->getError());			}			// Verify checkout			if ($table->checked_out == 0 || $table->checked_out == $userId)			{				// Change the state				$table->sticky = $state;				$table->checked_out = 0;				$table->checked_out_time = $this->_db->getNullDate();				// Check the row				$table->check();				// Store the row				if (!$table->store())				{					$this->setError($table->getError());				}			}		}		return count($this->getErrors()) == 0;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.response');/** * Base class for a Joomla! application. * * Acts as a Factory class for application specific objects and provides many * supporting API functions. Derived clases should supply the route(), dispatch() * and render() functions. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 */class JApplication extends JApplicationBase{	/**	 * The client identifier.	 *	 * @var    integer	 * @since  11.1	 */	protected $_clientId = null;	/**	 * The application message queue.	 *	 * @var    array	 * @since  11.1	 */	protected $_messageQueue = array();	/**	 * The name of the application.	 *	 * @var    array	 * @since  11.1	 */	protected $_name = null;	/**	 * The scope of the application.	 *	 * @var    string	 * @since  11.1	 */	public $scope = null;	/**	 * The time the request was made.	 *	 * @var    date	 * @since  11.1	 */	public $requestTime = null;	/**	 * The time the request was made as Unix timestamp.	 *	 * @var    integer	 * @since  11.1	 */	public $startTime = null;	/**	 * @var    JApplicationWebClient  The application client object.	 * @since  12.2	 */	public $client;	/**	 * @var    array  JApplication instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor.	 *	 * @param   array  $config  A configuration array including optional elements such as session	 * session_name, clientId and others. This is not exhaustive.	 *	 * @since   11.1	 */	public function __construct($config = array())	{		// Set the view name.		$this->_name = $this->getName();		// Only set the clientId if available.		if (isset($config['clientId']))		{			$this->_clientId = $config['clientId'];		}		// Enable sessions by default.		if (!isset($config['session']))		{			$config['session'] = true;		}		// Create the input object		$this->input = new JInput;		$this->client = new JApplicationWebClient;		$this->loadDispatcher();		// Set the session default name.		if (!isset($config['session_name']))		{			$config['session_name'] = $this->_name;		}		// Set the default configuration file.		if (!isset($config['config_file']))		{			$config['config_file'] = 'configuration.php';		}		// Create the configuration object.		if (file_exists(JPATH_CONFIGURATION . '/' . $config['config_file']))		{			$this->_createConfiguration(JPATH_CONFIGURATION . '/' . $config['config_file']);		}		// Create the session if a session name is passed.		if ($config['session'] !== false)		{			$this->_createSession(self::getHash($config['session_name']));		}		$this->requestTime = gmdate('Y-m-d H:i');		// Used by task system to ensure that the system doesn't go over time.		$this->startTime = JProfiler::getmicrotime();	}	/**	 * Returns the global JApplication object, only creating it if it	 * doesn't already exist.	 *	 * @param   mixed   $client  A client identifier or name.	 * @param   array   $config  An optional associative array of configuration settings.	 * @param   string  $prefix  A prefix for class names	 *	 * @return  JApplication A JApplication object.	 *	 * @since   11.1	 */	public static function getInstance($client, $config = array(), $prefix = 'J')	{		if (empty(self::$instances[$client]))		{			// Load the router object.			$info = JApplicationHelper::getClientInfo($client, true);			$path = $info->path . '/includes/application.php';			if (file_exists($path))			{				include_once $path;				// Create a JApplication object.				$classname = $prefix . ucfirst($client);				$instance = new $classname($config);			}			else			{				$error = JError::raiseError(500, JText::sprintf('JLIB_APPLICATION_ERROR_APPLICATION_LOAD', $client));				return $error;			}			self::$instances[$client] = $instance;		}		return self::$instances[$client];	}	/**	 * Initialise the application.	 *	 * @param   array  $options  An optional associative array of configuration settings.	 *	 * @return  void	 *	 * @since   11.1	 */	public function initialise($options = array())	{		// Set the language in the class.		$config = JFactory::getConfig();		// Check that we were given a language in the array (since by default may be blank).		if (isset($options['language']))		{			$config->set('language', $options['language']);		}		// Set user specific editor.		$user = JFactory::getUser();		$editor = $user->getParam('editor', $this->getCfg('editor'));		if (!JPluginHelper::isEnabled('editors', $editor))		{			$editor = $this->getCfg('editor');			if (!JPluginHelper::isEnabled('editors', $editor))			{				$editor = 'none';			}		}		$config->set('editor', $editor);		// Trigger the onAfterInitialise event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterInitialise');	}	/**	 * Route the application.	 *	 * Routing is the process of examining the request environment to determine which	 * component should receive the request. The component optional parameters	 * are then set in the request object to be processed when the application is being	 * dispatched.	 *	 * @return  void	 *	 * @since   11.1	 */	public function route()	{		// Get the full request URI.		$uri = clone JURI::getInstance();		$router = $this->getRouter();		$result = $router->parse($uri);		foreach ($result as $key => $value)		{			$this->input->def($key, $value);		}		// Trigger the onAfterRoute event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterRoute');	}	/**	 * Dispatch the application.	 *	 * Dispatching is the process of pulling the option from the request object and	 * mapping them to a component. If the component does not exist, it handles	 * determining a default component to dispatch.	 *	 * @param   string  $component  The component to dispatch.	 *	 * @return  void	 *	 * @since   11.1	 */	public function dispatch($component = null)	{		$document = JFactory::getDocument();		$contents = JComponentHelper::renderComponent($component);		$document->setBuffer($contents, 'component');		// Trigger the onAfterDispatch event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterDispatch');	}	/**	 * Render the application.	 *	 * Rendering is the process of pushing the document buffers into the template	 * placeholders, retrieving data from the document and pushing it into	 * the JResponse buffer.	 *	 * @return  void	 *	 * @since   11.1	 */	public function render()	{		$params = array('template' => $this->getTemplate(), 'file' => 'index.php', 'directory' => JPATH_THEMES, 'params' => $template->params);		// Parse the document.		$document = JFactory::getDocument();		$document->parse($params);		// Trigger the onBeforeRender event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onBeforeRender');		// Render the document.		$caching = ($this->getCfg('caching') >= 2) ? true : false;		JResponse::setBody($document->render($caching, $params));		// Trigger the onAfterRender event.		$this->triggerEvent('onAfterRender');	}	/**	 * Redirect to another URL.	 *	 * Optionally enqueues a message in the system message queue (which will be displayed	 * the next time a page is loaded) using the enqueueMessage method. If the headers have	 * not been sent the redirect will be accomplished using a "301 Moved Permanently"	 * code in the header pointing to the new location. If the headers have already been	 * sent this will be accomplished using a JavaScript statement.	 *	 * @param   string   $url      The URL to redirect to. Can only be http/https URL	 * @param   string   $msg      An optional message to display on redirect.	 * @param   string   $msgType  An optional message type. Defaults to message.	 * @param   boolean  $moved    True if the page is 301 Permanently Moved, otherwise 303 See Other is assumed.	 *	 * @return  void  Calls exit().	 *	 * @since   11.1	 *	 * @see     JApplication::enqueueMessage()	 */	public function redirect($url, $msg = '', $msgType = 'message', $moved = false)	{		// Check for relative internal links.		if (preg_match('#^index2?\.php#', $url))		{			$url = JURI::base() . $url;		}		// Strip out any line breaks.		$url = preg_split("/[\r\n]/", $url);		$url = $url[0];		/*		 * If we don't start with a http we need to fix this before we proceed.		 * We could validly start with something else (e.g. ftp), though this would		 * be unlikely and isn't supported by this API.		 */		if (!preg_match('#^http#i', $url))		{			$uri = JURI::getInstance();			$prefix = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			if ($url[0] == '/')			{				// We just need the prefix since we have a path relative to the root.				$url = $prefix . $url;			}			else			{				// It's relative to where we are now, so lets add that.				$parts = explode('/', $uri->toString(array('path')));				array_pop($parts);				$path = implode('/', $parts) . '/';				$url = $prefix . $path . $url;			}		}		// If the message exists, enqueue it.		if (trim($msg))		{			$this->enqueueMessage($msg, $msgType);		}		// Persist messages if they exist.		if (count($this->_messageQueue))		{			$session = JFactory::getSession();			$session->set('application.queue', $this->_messageQueue);		}		// If the headers have been sent, then we cannot send an additional location header		// so we will output a javascript redirect statement.		if (headers_sent())		{			echo "<script>document.location.href='" . htmlspecialchars($url) . "';</script>\n";		}		else		{			$document = JFactory::getDocument();			jimport('phputf8.utils.ascii');			if (($this->client->engine == JApplicationWebClient::TRIDENT) && !utf8_is_ascii($url))			{				// MSIE type browser and/or server cause issues when url contains utf8 character,so use a javascript redirect method				echo '<html><head><meta http-equiv="content-type" content="text/html; charset=' . $document->getCharset() . '" />'					. '<script>document.location.href=\'' . htmlspecialchars($url) . '\';</script></head></html>';			}			else			{				// All other browsers, use the more efficient HTTP header method				header($moved ? 'HTTP/1.1 301 Moved Permanently' : 'HTTP/1.1 303 See other');				header('Location: ' . $url);				header('Content-Type: text/html; charset=' . $document->getCharset());			}		}		$this->close();	}	/**	 * Enqueue a system message.	 *	 * @param   string  $msg   The message to enqueue.	 * @param   string  $type  The message type. Default is message.	 *	 * @return  void	 *	 * @since   11.1	 */	public function enqueueMessage($msg, $type = 'message')	{		// For empty queue, if messages exists in the session, enqueue them first.		if (!count($this->_messageQueue))		{			$session = JFactory::getSession();			$sessionQueue = $session->get('application.queue');			if (count($sessionQueue))			{				$this->_messageQueue = $sessionQueue;				$session->set('application.queue', null);			}		}		// Enqueue the message.		$this->_messageQueue[] = array('message' => $msg, 'type' => strtolower($type));	}	/**	 * Get the system message queue.	 *	 * @return  array  The system message queue.	 *	 * @since   11.1	 */	public function getMessageQueue()	{		// For empty queue, if messages exists in the session, enqueue them.		if (!count($this->_messageQueue))		{			$session = JFactory::getSession();			$sessionQueue = $session->get('application.queue');			if (count($sessionQueue))			{				$this->_messageQueue = $sessionQueue;				$session->set('application.queue', null);			}		}		return $this->_messageQueue;	}	/**	 * Gets a configuration value.	 *	 * An example is in application/japplication-getcfg.php Getting a configuration	 *	 * @param   string  $varname  The name of the value to get.	 * @param   string  $default  Default value to return	 *	 * @return  mixed  The user state.	 *	 * @since   11.1	 */	public function getCfg($varname, $default = null)	{		$config = JFactory::getConfig();		return $config->get('' . $varname, $default);	}	/**	 * Method to get the application name.	 *	 * The dispatcher name is by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor.	 *	 * @return  string  The name of the dispatcher.	 *	 * @since   11.1	 */	public function getName()	{		$name = $this->_name;		if (empty($name))		{			$r = null;			if (!preg_match('/J(.*)/i', get_class($this), $r))			{				JLog::add(JText::_('JLIB_APPLICATION_ERROR_APPLICATION_GET_NAME'), JLog::WARNING, 'jerror');			}			$name = strtolower($r[1]);		}		return $name;	}	/**	 * Gets a user state.	 *	 * @param   string  $key      The path of the state.	 * @param   mixed   $default  Optional default value, returned if the internal value is null.	 *	 * @return  mixed  The user state or null.	 *	 * @since   11.1	 */	public function getUserState($key, $default = null)	{		$session = JFactory::getSession();		$registry = $session->get('registry');		if (!is_null($registry))		{			return $registry->get($key, $default);		}		return $default;	}	/**	 * Sets the value of a user state variable.	 *	 * @param   string  $key    The path of the state.	 * @param   string  $value  The value of the variable.	 *	 * @return  mixed  The previous state, if one existed.	 *	 * @since   11.1	 */	public function setUserState($key, $value)	{		$session = JFactory::getSession();		$registry = $session->get('registry');		if (!is_null($registry))		{			return $registry->set($key, $value);		}		return null;	}	/**	 * Gets the value of a user state variable.	 *	 * @param   string  $key      The key of the user state variable.	 * @param   string  $request  The name of the variable passed in a request.	 * @param   string  $default  The default value for the variable if not found. Optional.	 * @param   string  $type     Filter for the variable, for valid values see {@link JFilterInput::clean()}. Optional.	 *	 * @return  The request user state.	 *	 * @since   11.1	 */	public function getUserStateFromRequest($key, $request, $default = null, $type = 'none')	{		$cur_state = $this->getUserState($key, $default);		$new_state = $this->input->get($request, null, $type);		// Save the new value only if it was set in this request.		if ($new_state !== null)		{			$this->setUserState($key, $new_state);		}		else		{			$new_state = $cur_state;		}		return $new_state;	}	/**	 * Login authentication function.	 *	 * Username and encoded password are passed the onUserLogin event which	 * is responsible for the user validation. A successful validation updates	 * the current session record with the user's details.	 *	 * Username and encoded password are sent as credentials (along with other	 * possibilities) to each observer (authentication plugin) for user	 * validation.  Successful validation will update the current session with	 * the user details.	 *	 * @param   array  $credentials  Array('username' => string, 'password' => string)	 * @param   array  $options      Array('remember' => boolean)	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function login($credentials, $options = array())	{		// Get the global JAuthentication object.		jimport('joomla.user.authentication');		$authenticate = JAuthentication::getInstance();		$response = $authenticate->authenticate($credentials, $options);		if ($response->status === JAuthentication::STATUS_SUCCESS)		{			// Validate that the user should be able to login (different to being authenticated).			// This permits authentication plugins blocking the user			$authorisations = $authenticate->authorise($response, $options);			foreach ($authorisations as $authorisation)			{				$denied_states = array(JAuthentication::STATUS_EXPIRED, JAuthentication::STATUS_DENIED);				if (in_array($authorisation->status, $denied_states))				{					// Trigger onUserAuthorisationFailure Event.					$this->triggerEvent('onUserAuthorisationFailure', array((array) $authorisation));					// If silent is set, just return false.					if (isset($options['silent']) && $options['silent'])					{						return false;					}					// Return the error.					switch ($authorisation->status)					{						case JAuthentication::STATUS_EXPIRED:							return JError::raiseWarning('102002', JText::_('JLIB_LOGIN_EXPIRED'));							break;						case JAuthentication::STATUS_DENIED:							return JError::raiseWarning('102003', JText::_('JLIB_LOGIN_DENIED'));							break;						default:							return JError::raiseWarning('102004', JText::_('JLIB_LOGIN_AUTHORISATION'));							break;					}				}			}			// Import the user plugin group.			JPluginHelper::importPlugin('user');			// OK, the credentials are authenticated and user is authorised.  Lets fire the onLogin event.			$results = $this->triggerEvent('onUserLogin', array((array) $response, $options));			/*			 * If any of the user plugins did not successfully complete the login routine			 * then the whole method fails.			 *			 * Any errors raised should be done in the plugin as this provides the ability			 * to provide much more information about why the routine may have failed.			 */			if (!in_array(false, $results, true))			{				// Set the remember me cookie if enabled.				if (isset($options['remember']) && $options['remember'])				{					// Create the encryption key, apply extra hardening using the user agent string.					$privateKey = self::getHash(@$_SERVER['HTTP_USER_AGENT']);					$key = new JCryptKey('simple', $privateKey, $privateKey);					$crypt = new JCrypt(new JCryptCipherSimple, $key);					$rcookie = $crypt->encrypt(json_encode($credentials));					$lifetime = time() + 365 * 24 * 60 * 60;					// Use domain and path set in config for cookie if it exists.					$cookie_domain = $this->getCfg('cookie_domain', '');					$cookie_path = $this->getCfg('cookie_path', '/');					$secure = $this->isSSLConnection();					setcookie(self::getHash('JLOGIN_REMEMBER'), $rcookie, $lifetime, $cookie_path, $cookie_domain, $secure, true);				}				return true;			}		}		// Trigger onUserLoginFailure Event.		$this->triggerEvent('onUserLoginFailure', array((array) $response));		// If silent is set, just return false.		if (isset($options['silent']) && $options['silent'])		{			return false;		}		// If status is success, any error will have been raised by the user plugin		if ($response->status !== JAuthentication::STATUS_SUCCESS)		{			JLog::add($response->error_message, JLog::WARNING, 'jerror');		}		return false;	}	/**	 * Logout authentication function.	 *	 * Passed the current user information to the onUserLogout event and reverts the current	 * session record back to 'anonymous' parameters.	 * If any of the authentication plugins did not successfully complete	 * the logout routine then the whole method fails. Any errors raised	 * should be done in the plugin as this provides the ability to give	 * much more information about why the routine may have failed.	 *	 * @param   integer  $userid   The user to load - Can be an integer or string - If string, it is converted to ID automatically	 * @param   array    $options  Array('clientid' => array of client id's)	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function logout($userid = null, $options = array())	{		// Get a user object from the JApplication.		$user = JFactory::getUser($userid);		// Build the credentials array.		$parameters['username'] = $user->get('username');		$parameters['id'] = $user->get('id');		// Set clientid in the options array if it hasn't been set already.		if (!isset($options['clientid']))		{			$options['clientid'] = $this->getClientId();		}		// Import the user plugin group.		JPluginHelper::importPlugin('user');		// OK, the credentials are built. Lets fire the onLogout event.		$results = $this->triggerEvent('onUserLogout', array($parameters, $options));		// Check if any of the plugins failed. If none did, success.		if (!in_array(false, $results, true))		{			// Use domain and path set in config for cookie if it exists.			$cookie_domain = $this->getCfg('cookie_domain', '');			$cookie_path = $this->getCfg('cookie_path', '/');			setcookie(self::getHash('JLOGIN_REMEMBER'), false, time() - 86400, $cookie_path, $cookie_domain);			return true;		}		// Trigger onUserLoginFailure Event.		$this->triggerEvent('onUserLogoutFailure', array($parameters));		return false;	}	/**	 * Gets the name of the current template.	 *	 * @param   array  $params  An optional associative array of configuration settings	 *	 * @return  string  System is the fallback.	 *	 * @since   11.1	 */	public function getTemplate($params = array())	{		return 'system';	}	/**	 * Returns the application JRouter object.	 *	 * @param   string  $name     The name of the application.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JRouter  A JRouter object	 *	 * @since   11.1	 */	static public function getRouter($name = null, array $options = array())	{		if (!isset($name))		{			$app = JFactory::getApplication();			$name = $app->getName();		}		jimport('joomla.application.router');		try		{			$router = JRouter::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $router;	}	/**	 * This method transliterates a string into an URL	 * safe string or returns a URL safe UTF-8 string	 * based on the global configuration	 *	 * @param   string  $string  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	static public function stringURLSafe($string)	{		if (JFactory::getConfig()->get('unicodeslugs') == 1)		{			$output = JFilterOutput::stringURLUnicodeSlug($string);		}		else		{			$output = JFilterOutput::stringURLSafe($string);		}		return $output;	}	/**	 * Returns the application JPathway object.	 *	 * @param   string  $name     The name of the application.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JPathway  A JPathway object	 *	 * @since   11.1	 */	public function getPathway($name = null, $options = array())	{		if (!isset($name))		{			$name = $this->_name;		}		try		{			$pathway = JPathway::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $pathway;	}	/**	 * Returns the application JPathway object.	 *	 * @param   string  $name     The name of the application/client.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JMenu  JMenu object.	 *	 * @since   11.1	 */	public function getMenu($name = null, $options = array())	{		if (!isset($name))		{			$name = $this->_name;		}		try		{			$menu = JMenu::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $menu;	}	/**	 * Provides a secure hash based on a seed	 *	 * @param   string  $seed  Seed string.	 *	 * @return  string  A secure hash	 *	 * @since   11.1	 */	public static function getHash($seed)	{		return md5(JFactory::getConfig()->get('secret') . $seed);	}	/**	 * Create the configuration registry.	 *	 * @param   string  $file  The path to the configuration file	 *	 * @return  JConfig  A JConfig object	 *	 * @since   11.1	 */	protected function _createConfiguration($file)	{		JLoader::register('JConfig', $file);		// Create the JConfig object.		$config = new JConfig;		// Get the global configuration object.		$registry = JFactory::getConfig();		// Load the configuration values into the registry.		$registry->loadObject($config);		return $config;	}	/**	 * Create the user session.	 *	 * Old sessions are flushed based on the configuration value for the cookie	 * lifetime. If an existing session, then the last access time is updated.	 * If a new session, a session id is generated and a record is created in	 * the #__sessions table.	 *	 * @param   string  $name  The sessions name.	 *	 * @return  JSession  JSession on success. May call exit() on database error.	 *	 * @since   11.1	 */	protected function _createSession($name)	{		$options = array();		$options['name'] = $name;		switch ($this->_clientId)		{			case 0:				if ($this->getCfg('force_ssl') == 2)				{					$options['force_ssl'] = true;				}				break;			case 1:				if ($this->getCfg('force_ssl') >= 1)				{					$options['force_ssl'] = true;				}				break;		}		$this->registerEvent('onAfterSessionStart', array($this, 'afterSessionStart'));		$session = JFactory::getSession($options);		$session->initialise($this->input, $this->dispatcher);		$session->start();		// TODO: At some point we need to get away from having session data always in the db.		$db = JFactory::getDbo();		// Remove expired sessions from the database.		$time = time();		if ($time % 2)		{			// The modulus introduces a little entropy, making the flushing less accurate			// but fires the query less than half the time.			$query = $db->getQuery(true)				->delete($db->quoteName('#__session'))				->where($db->quoteName('time') . ' < ' . $db->quote((int) ($time - $session->getExpire())));			$db->setQuery($query);			$db->execute();		}		// Check to see the the session already exists.		$handler = $this->getCfg('session_handler');		if (($handler != 'database' && ($time % 2 || $session->isNew()))			|| ($handler == 'database' && $session->isNew()))		{			$this->checkSession();		}		return $session;	}	/**	 * Checks the user session.	 *	 * If the session record doesn't exist, initialise it.	 * If session is new, create session variables	 *	 * @return  void	 *	 * @since   11.1	 */	public function checkSession()	{		$db = JFactory::getDbo();		$session = JFactory::getSession();		$user = JFactory::getUser();		$query = $db->getQuery(true)			->select($db->quoteName('session_id'))			->from($db->quoteName('#__session'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($session->getId()));		$db->setQuery($query, 0, 1);		$exists = $db->loadResult();		// If the session record doesn't exist initialise it.		if (!$exists)		{			$query->clear();			if ($session->isNew())			{				$query->insert($db->quoteName('#__session'))					->columns($db->quoteName('session_id') . ', ' . $db->quoteName('client_id') . ', ' . $db->quoteName('time'))					->values($db->quote($session->getId()) . ', ' . (int) $this->getClientId() . ', ' . $db->quote((int) time()));				$db->setQuery($query);			}			else			{				$query->insert($db->quoteName('#__session'))					->columns(						$db->quoteName('session_id') . ', ' . $db->quoteName('client_id') . ', ' . $db->quoteName('guest') . ', ' .						$db->quoteName('time') . ', ' . $db->quoteName('userid') . ', ' . $db->quoteName('username')					)					->values(						$db->quote($session->getId()) . ', ' . (int) $this->getClientId() . ', ' . (int) $user->get('guest') . ', ' .						$db->quote((int) $session->get('session.timer.start')) . ', ' . (int) $user->get('id') . ', ' . $db->quote($user->get('username'))					);				$db->setQuery($query);			}			// If the insert failed, exit the application.			try			{				$db->execute();			}			catch (RuntimeException $e)			{				jexit($e->getMessage());			}		}	}	/**	 * After the session has been started we need to populate it with some default values.	 *	 * @return  void	 *	 * @since   12.2	 */	public function afterSessionStart()	{		$session = JFactory::getSession();		if ($session->isNew())		{			$session->set('registry', new JRegistry('session'));			$session->set('user', new JUser);		}	}	/**	 * Gets the client id of the current running application.	 *	 * @return  integer  A client identifier.	 *	 * @since   11.1	 */	public function getClientId()	{		return $this->_clientId;	}	/**	 * Is admin interface?	 *	 * @return  boolean  True if this application is administrator.	 *	 * @since   11.1	 */	public function isAdmin()	{		return ($this->_clientId == 1);	}	/**	 * Is site interface?	 *	 * @return  boolean  True if this application is site.	 *	 * @since   11.1	 */	public function isSite()	{		return ($this->_clientId == 0);	}	/**	 * Method to determine if the host OS is  Windows	 *	 * @return  boolean  True if Windows OS	 *	 * @since   11.1	 * @deprecated  13.3 Use the IS_WIN constant instead.	 */	public static function isWinOS()	{		JLog::add('JApplication::isWinOS() is deprecated. Use the IS_WIN constant instead.', JLog::WARNING, 'deprecated');		return IS_WIN;	}	/**	 * Determine if we are using a secure (SSL) connection.	 *	 * @return  boolean  True if using SSL, false if not.	 *	 * @since   12.2	 */	public function isSSLConnection()	{		return ((isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) || getenv('SSL_PROTOCOL_VERSION'));	}	/**	 * Returns the response as a string.	 *	 * @return  string  The response	 *	 * @since   11.1	 */	public function __toString()	{		$compress = $this->getCfg('gzip', false);		return JResponse::toString($compress);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_feed * * @package     Joomla.Site * @subpackage  mod_feed * @since       1.5 */class ModFeedHelper{	public static function getFeed($params)	{		// module params		$rssurl	= $params->get('rssurl', '');		// get RSS parsed object		$cache_time = 0;		if ($params->get('cache'))		{			$cache_time  = $params->get('cache_time', 15) * 60;		}		try		{			$feed = new JFeedFactory;			$rssDoc = $feed->getFeed($rssurl);		}		catch (InvalidArgumentException $e)		{			$msg = JText::_('MOD_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		catch (RunTimeException $e)		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');		}		if (empty($rssDoc))		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');			return $msg;		}		if ($rssDoc)		{			return $rssDoc;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of users. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewDebugUser extends JViewLegacy{	protected $actions;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Access check.		if (!JFactory::getUser()->authorise('core.manage', 'com_users') || !JFactory::getConfig()->get('debug'))		{			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));		}		$this->actions		= $this->get('DebugActions');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->user			= $this->get('User');		$this->levels		= UsersHelperDebug::getLevelsOptions();		$this->components	= UsersHelperDebug::getComponents();		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::sprintf('COM_USERS_VIEW_DEBUG_USER_TITLE', $this->user->id, $this->user->name), 'user');		JToolbarHelper::help('JHELP_USERS_DEBUG_USERS');		JHtmlSidebar::setAction('index.php?option=com_users&view=debuguser&user_id=' . (int) $this->state->get('filter.user_id'));		$option = '';		if (!empty($this->components))		{			$option = JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));		}		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_COMPONENT'),			'filter_component',			$option		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'),			'filter_level_start',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'))		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'),			'filter_level_end',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'))		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><div class="reset <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form id="user-registration" action="<?php echo JRoute::_('index.php?option=com_users&task=reset.request'); ?>" method="post" class="form-validate form-horizontal">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		</fieldset>		<?php endforeach; ?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentControllerFeatured extends ContentControllerArticles{	/**	 * Removes an item	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user = JFactory::getUser();		$ids  = $this->input->get('cid', array(), 'array');		// Access checks.		foreach ($ids as $i => $id)		{			if (!$user->authorise('core.delete', 'com_content.article.'.(int) $id))			{				// Prune items that you can't delete.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Remove the items.			if (!$model->featured($ids, 0))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_content&view=featured');	}	/**	 * Method to publish a list of articles.	 *	 * @return  void	 * @since   1.0	 */	public function publish()	{		parent::publish();		$this->setRedirect('index.php?option=com_content&view=featured');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Feature', $prefix = 'ContentModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.framework');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.modal');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task, type)	{		if (task == 'item.setType' || task == 'item.setMenuType')		{			if (task == 'item.setType')			{				document.id('item-form').elements['jform[type]'].value = type;				document.id('fieldtype').value = 'type';			} else {				document.id('item-form').elements['jform[menutype]'].value = type;			}			Joomla.submitform('item.setType', document.id('item-form'));		} else if (task == 'item.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			Joomla.submitform(task, document.id('item-form'));		}		else		{			// special case for modal popups validation response			$$('#item-form .modal-value.invalid').each(function(field){				var idReversed = field.id.split("").reverse().join("");				var separatorLocation = idReversed.indexOf('_');				var name = idReversed.substr(separatorLocation).split("").reverse().join("")+'name';				document.id(name).addClass('invalid');			});		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_menus&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('COM_MENUS_ITEM_DETAILS', true)); ?>				<div class="row-fluid">					<div class="span6">						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('type'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('type'); ?>							</div>						</div>						<?php if ($this->item->type == 'url') : ?>							<?php $this->form->setFieldAttribute('link', 'readonly', 'false');?>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('link'); ?>								</div>								<div class="controls">									<?php echo $this->form->getInput('link'); ?>								</div>							</div>						<?php endif; ?>						<?php if ($this->item->link == 'index.php?option=com_wrapper&view=wrapper') : ?>							<?php $fieldSets = $this->form->getFieldsets('params'); ?>							<?php foreach ($this->form->getFieldset('request') as $field) : ?>								<div class="control-group">									<div class="control-label">										<?php echo $field->label; ?>									</div>									<div class="controls">										<?php echo $field->input; ?>									</div>								</div>							<?php endforeach; ?>						<?php endif; ?>						<?php							$fieldSets = $this->form->getFieldsets('request');							if (!empty($fieldSets)) :								$fieldSet = array_shift($fieldSets);								$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MENUS_' . $fieldSet->name . '_FIELDSET_LABEL';								if (isset($fieldSet->description) && trim($fieldSet->description)) :									echo '<p class="tip">' . $this->escape(JText::_($fieldSet->description)) . '</p>';								endif;							?>								<?php $hidden_fields = ''; ?>								<?php foreach ($this->form->getFieldset('request') as $field) : ?>									<?php if (!$field->hidden) : ?>									<div class="control-group">										<div class="control-label">											<?php echo $field->label; ?>										</div>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>									<?php else : $hidden_fields .= $field->input; ?>									<?php endif; ?>								<?php endforeach; ?>							<?php echo $hidden_fields; ?>						<?php endif; ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('title'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('title'); ?>							</div>						</div>						<?php if ($this->item->type == 'alias') : ?>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('aliastip'); ?>								</div>							</div>						<?php endif; ?>						<?php if ($this->item->type != 'url') : ?>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('alias'); ?>								</div>								<div class="controls">									<?php echo $this->form->getInput('alias'); ?>								</div>							</div>						<?php endif; ?>						<hr />						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('published'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('published'); ?>							</div>						</div>						<?php if ($this->item->type !== 'url') : ?>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('link'); ?>								</div>								<div class="controls">									<?php echo $this->form->getInput('link'); ?>								</div>							</div>						<?php endif ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('menutype'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('menutype'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('parent_id'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('parent_id'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('menuordering'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('menuordering'); ?>							</div>						</div>					</div>					<div class="span6">						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('access'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('access'); ?>							</div>						</div>						<?php if ($this->item->type == 'component') : ?>							<div class="control-group">								<div class="control-label">									<?php echo $this->form->getLabel('home'); ?>								</div>								<div class="controls">									<?php echo $this->form->getInput('home'); ?>								</div>							</div>						<?php endif; ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('browserNav'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('browserNav'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('template_style_id'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('template_style_id'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('language'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('language'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('note'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('note'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('id'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('id'); ?>							</div>						</div>					</div>				</div>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'options', JText::_('COM_MENUS_ADVANCED_FIELDSET_LABEL', true)); ?>				<?php echo $this->loadTemplate('options'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php if ($assoc) : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>			<?php if (!empty($this->modules)) : ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'modules', JText::_('COM_MENUS_ITEM_MODULE_ASSIGNMENT', true)); ?>					<?php echo $this->loadTemplate('modules'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo $this->form->getInput('component_id'); ?>	<?php echo JHtml::_('form.token'); ?>	<input type="hidden" id="fieldtype" name="fieldtype" value="" /></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Editors-xtd.readmore * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Editor Readmore buton * * @package     Joomla.Plugin * @subpackage  Editors-xtd.readmore * @since       1.5 */class PlgButtonReadmore extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * readmore button	 * @return array A two element array of (imageName, textToInsert)	 */	public function onDisplay($name)	{		$doc = JFactory::getDocument();		// button is not active in specific content components		$getContent = $this->_subject->getContent($name);		$present = JText::_('PLG_READMORE_ALREADY_EXISTS', true);		$js = "			function insertReadmore(editor)			{				var content = $getContent				if (content.match(/<hr\s+id=(\"|')system-readmore(\"|')\s*\/*>/i))				{					alert('$present');					return false;				} else {					jInsertEditorText('<hr id=\"system-readmore\" />', editor);				}			}			";		$doc->addScriptDeclaration($js);		$button = new JObject;		$button->modal = false;		$button->onclick = 'insertReadmore(\''.$name.'\');return false;';		$button->text = JText::_('PLG_READMORE_BUTTON_READMORE');		$button->name = 'arrow-down';		// TODO: The button writer needs to take into account the javascript directive		//$button->link', 'javascript:void(0)');		$button->link = '#';		return $button;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_messages&view=messages'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_MESSAGES_SEARCH_IN_SUBJECT'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MESSAGES_SEARCH_IN_SUBJECT'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-left">				<select name="filter_state" class="inputbox" onchange="this.form.submit()">					<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>					<?php echo JHtml::_('select.options', MessagesHelper::getStateOptions(), 'value', 'text', $this->state->get('filter.state'));?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'COM_MESSAGES_HEADING_SUBJECT', 'a.subject', $listDirn, $listOrder); ?>					</th>					<th width="5%">						<?php echo JHtml::_('grid.sort', 'COM_MESSAGES_HEADING_READ', 'a.state', $listDirn, $listOrder); ?>					</th>					<th width="15%">						<?php echo JHtml::_('grid.sort', 'COM_MESSAGES_HEADING_FROM', 'a.user_id_from', $listDirn, $listOrder); ?>					</th>					<th width="20%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JDATE', 'a.date_time', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="6">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canChange = $user->authorise('core.edit.state', 'com_messages');				?>				<tr class="row<?php echo $i % 2; ?>">					<td>						<?php echo JHtml::_('grid.id', $i, $item->message_id); ?>					</td>					<td>						<a href="<?php echo JRoute::_('index.php?option=com_messages&view=message&message_id='.(int) $item->message_id); ?>">							<?php echo $this->escape($item->subject); ?></a>					</td>					<td class="center">						<?php echo JHtml::_('messages.state', $item->state, $i, $canChange); ?>					</td>					<td>						<?php echo $item->user_from; ?>					</td>					<td>						<?php echo JHtml::_('date', $item->date_time, JText::_('DATE_FORMAT_LC2')); ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<div>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset id="filter-bar"><legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>	<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MODULES_MODULES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>	</div>	<div class="filter-select">			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('COM_INSTALLER_VALUE_CLIENT_SELECT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<?php echo JHtml::_('select.options', array('0' => JText::_('JSITE'), '1' => JText::_('JADMINISTRATOR')), 'value', 'text', $this->state->get('filter.client_id'), true);?>			</select>            <label class="selectlabel" for="filter_status">				<?php echo JText::_('COM_INSTALLER_VALUE_STATE_SELECT'); ?>			</label>			<select name="filter_status" class="inputbox" id="filter_status">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', InstallerHelper::getExtensionTypes(), 'value', 'text', $this->state->get('filter.status'), true);?>			</select>            <label class="selectlabel" for="filter_type">				<?php echo JText::_('COM_INSTALLER_VALUE_TYPE_SELECT'); ?>			</label>			<select name="filter_type" class="inputbox" id="filter_type">				<option value=""><?php echo JText::_('COM_INSTALLER_VALUE_TYPE_SELECT');?></option>				<?php echo JHtml::_('select.options', InstallerHelper::getExtensionTypes(), 'value', 'text', $this->state->get('filter.type'), true);?>			</select>			<label class="selectlabel" for="filter_group">				<?php echo JText::_('COM_INSTALLER_VALUE_FOLDER_SELECT'); ?>			</label>			<select name="filter_group" class="inputbox" id="filter_group">				<option value=""><?php echo JText::_('COM_INSTALLER_VALUE_FOLDER_SELECT');?></option>				<?php echo JHtml::_('select.options', array_merge(InstallerHelper::getExtensionGroupes(), array('*' => JText::_('COM_INSTALLER_VALUE_FOLDER_NONAPPLICABLE'))), 'value', 'text', $this->state->get('filter.group'), true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div></fieldset><div class="clr"></div>
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');/** * Banners model for the Joomla Banners component. * * @package     Joomla.Site * @subpackage  com_banners * @since       1.6 */class BannersModelBanners extends JModelList{	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.tag_search');		$id .= ':' . $this->getState('filter.client_id');		$id .= ':' . serialize($this->getState('filter.category_id'));		$id .= ':' . serialize($this->getState('filter.keywords'));		return parent::getStoreId($id);	}	/**	 * Gets a list of banners	 *	 * @return  array  An array of banner objects.	 * @since   1.6	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		$ordering = $this->getState('filter.ordering');		$tagSearch = $this->getState('filter.tag_search');		$cid = $this->getState('filter.client_id');		$categoryId = $this->getState('filter.category_id');		$keywords = $this->getState('filter.keywords');		$randomise = ($ordering == 'random');		$nullDate = $db->quote($db->getNullDate());		$query->select(			'a.id as id,' .				'a.type as type,' .				'a.name as name,' .				'a.clickurl as clickurl,' .				'a.cid as cid,' .				'a.params as params,' .				'a.custombannercode as custombannercode,' .				'a.track_impressions as track_impressions,' .				'cl.track_impressions as client_track_impressions'		)			->from('#__banners as a')			->join('LEFT', '#__banner_clients AS cl ON cl.id = a.cid')			->where('a.state=1')			->where('(' . $query->currentTimestamp() . ' >= a.publish_up OR a.publish_up = ' . $nullDate . ')')			->where('(' . $query->currentTimestamp() . ' <= a.publish_down OR a.publish_down = ' . $nullDate . ')')			->where('(a.imptotal = 0 OR a.impmade <= a.imptotal)');		if ($cid)		{			$query->join('LEFT', '#__categories as cat ON a.catid = cat.id')				->where('a.cid = ' . (int) $cid)				->where('cl.state = 1');		}		// Filter by a single or group of categories		$categoryId = $this->getState('filter.category_id');		$catid = $this->getState('filter.category_id', array());		if (is_numeric($categoryId))		{			$type = $this->getState('filter.category_id.include', true) ? '= ' : '<> ';			// Add subcategory check			$includeSubcategories = $this->getState('filter.subcategories', false);			$categoryEquals = 'a.catid ' . $type . (int) $categoryId;			if ($includeSubcategories)			{				$levels = (int) $this->getState('filter.max_category_levels', '1');				// Create a subquery for the subcategory list				$subQuery = $db->getQuery(true);				$subQuery->select('sub.id')					->from('#__categories as sub')					->join('INNER', '#__categories as this ON sub.lft > this.lft AND sub.rgt < this.rgt')					->where('this.id = ' . (int) $categoryId)					->where('sub.level <= this.level + ' . $levels);				// Add the subquery to the main query				$query->where('(' . $categoryEquals . ' OR a.catid IN (' . $subQuery->__toString() . '))');			}			else			{				$query->where($categoryEquals);			}		}		elseif ((is_array($categoryId)) && (count($categoryId) > 0))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			if ($categoryId != '0')			{				$type = $this->getState('filter.category_id.include', true) ? 'IN' : 'NOT IN';				$query->where('a.catid ' . $type . ' (' . $categoryId . ')');			}		}		if ($tagSearch)		{			if (count($keywords) == 0)			{				$query->where('0');			}			else			{				$temp = array();				$config = JComponentHelper::getParams('com_banners');				$prefix = $config->get('metakey_prefix');				foreach ($keywords as $keyword)				{					$keyword = trim($keyword);					$condition1 = "a.own_prefix=1 AND a.metakey_prefix=SUBSTRING(" . $db->quote($keyword) . ",1,LENGTH( a.metakey_prefix)) OR a.own_prefix=0 AND cl.own_prefix=1 AND cl.metakey_prefix=SUBSTRING(" . $db->quote($keyword) . ",1,LENGTH(cl.metakey_prefix)) OR a.own_prefix=0 AND cl.own_prefix=0 AND " . ($prefix == substr($keyword, 0, strlen($prefix)) ? '1' : '0');					$condition2 = "a.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					if ($cid)					{						$condition2 .= " OR cl.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					}					if ($catid)					{						$condition2 .= " OR cat.metakey REGEXP '[[:<:]]" . $db->escape($keyword) . "[[:>:]]'";					}					$temp[] = "($condition1) AND ($condition2)";				}				$query->where('(' . implode(' OR ', $temp) . ')');			}		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		$query->order('a.sticky DESC,' . ($randomise ? 'RAND()' : 'a.ordering'));		return $query;	}	/**	 * Get a list of banners.	 *	 * @return  array	 * @since   1.6	 */	public function getItems()	{		if (!isset($this->cache['items']))		{			$this->cache['items'] = parent::getItems();			foreach ($this->cache['items'] as &$item)			{				$parameters = new JRegistry;				$parameters->loadString($item->params);				$item->params = $parameters;			}		}		return $this->cache['items'];	}	/**	 * Makes impressions on a list of banners	 *	 * @return  void	 * @since   1.6	 */	public function impress()	{		$trackDate = JFactory::getDate()->format('Y-m-d H');		$items = $this->getItems();		$db = $this->getDbo();		$query = $db->getQuery(true);		foreach ($items as $item)		{			// Increment impression made			$id = $item->id;			$query->clear()				->update('#__banners')				->set('impmade = (impmade + 1)')				->where('id = ' . (int) $id);			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JError::raiseError(500, $e->getMessage());			}			// track impressions			$trackImpressions = $item->track_impressions;			if ($trackImpressions < 0 && $item->cid)			{				$trackImpressions = $item->client_track_impressions;			}			if ($trackImpressions < 0)			{				$config = JComponentHelper::getParams('com_banners');				$trackImpressions = $config->get('track_impressions');			}			if ($trackImpressions > 0)			{				// is track already created ?				$query->clear()					->select($db->quoteName('count'))					->from('#__banner_tracks')					->where('track_type=1')					->where('banner_id=' . (int) $id)					->where('track_date=' . $db->quote($trackDate));				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					JError::raiseError(500, $e->getMessage());				}				$count = $db->loadResult();				$query->clear();				if ($count)				{					// update count					$query->update('#__banner_tracks')						->set($db->quoteName('count') . ' = (' . $db->quote('count') . ' + 1)')						->where('track_type=1')						->where('banner_id=' . (int) $id)						->where('track_date=' . $db->quote($trackDate));				}				else				{					// insert new count					//sqlsrv change					$query->insert('#__banner_tracks')						->columns(							array(								$db->quoteName('count'), $db->quoteName('track_type'),								$db->quoteName('banner_id'), $db->quoteName('track_date')							)						)						->values('1, 1, ' . (int) $id . ', ' . $db->quote($trackDate));				}				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					JError::raiseError(500, $e->getMessage());				}			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Statistics model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelStatistics extends JModelLegacy{	/**	 * Method to get the component statistics	 *	 * @return  object  The component statistics	 *	 * @since   2.5	 */	public function getData()	{		// Initialise		$db = $this->getDbo();		$query = $db->getQuery(true);		$data = new JObject;		$query->select('COUNT(term_id)')			->from($db->quoteName('#__finder_terms'));		$db->setQuery($query);		$data->term_count = $db->loadResult();		$query->clear()			->select('COUNT(link_id)')			->from($db->quoteName('#__finder_links'));		$db->setQuery($query);		$data->link_count = $db->loadResult();		$query->clear()			->select('COUNT(id)')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' = 1');		$db->setQuery($query);		$data->taxonomy_branch_count = $db->loadResult();		$query->clear()			->select('COUNT(id)')			->from($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('parent_id') . ' > 1');		$db->setQuery($query);		$data->taxonomy_node_count = $db->loadResult();		$query->clear()			->select('t.title AS type_title, COUNT(a.link_id) AS link_count')			->from($db->quoteName('#__finder_links') . ' AS a')			->join('INNER', $db->quoteName('#__finder_types') . ' AS t ON t.id = a.type_id')			->group('a.type_id, t.title')			->order($db->quoteName('type_title'), 'ASC');		$db->setQuery($query);		$data->type_list = $db->loadObjectList();		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Map table class for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderTableMap extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  &$db  JDatabaseDriver connector object.	 *	 * @since   2.5	 */	public function __construct(&$db)	{		parent::__construct('#__finder_taxonomy', 'id', $db);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table. The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An array of primary key values to update.  If not	 *                            set the instance property value is used. [optional]	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published] [optional]	 * @param   integer  $userId  The user id of the user performing the operation. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k . '=' . implode(' OR ' . $k . '=', $pks);		// Update the publishing state for rows with the given primary keys.		$query = $this->_db->getQuery(true)			->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('state') . ' = ' . (int) $state)			->where($where);		$this->_db->setQuery($query);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexer', __DIR__ . '/indexer.php');JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerResult', __DIR__ . '/result.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');/** * Prototype adapter class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexerAdapter extends JPlugin{	/**	 * The context is somewhat arbitrary but it must be unique or there will be	 * conflicts when managing plugin/indexer state. A good best practice is to	 * use the plugin name suffix as the context. For example, if the plugin is	 * named 'plgFinderContent', the context could be 'Content'.	 *	 * @var    string	 * @since  2.5	 */	protected $context;	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension;	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout;	/**	 * The mime type of the content the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $mime;	/**	 * The access level of an item before save.	 *	 * @var    integer	 * @since  2.5	 */	protected $old_access;	/**	 * The access level of a category before save.	 *	 * @var    integer	 * @since  2.5	 */	protected $old_cataccess;	/**	 * The type of content the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title;	/**	 * The type id of the content.	 *	 * @var    integer	 * @since  2.5	 */	protected $type_id;	/**	 * The database object.	 *	 * @var    object	 * @since  2.5	 */	protected $db;	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table;	/**	 * The indexer object.	 *	 * @var    FinderIndexer	 * @since  3.0	 */	protected $indexer;	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'state';	/**	 * Method to instantiate the indexer adapter.	 *	 * @param   object  &$subject  The object to observe.	 * @param   array   $config    An array that holds the plugin configuration.	 *	 * @since   2.5	 */	public function __construct(&$subject, $config)	{		// Get the database object.		$this->db = JFactory::getDbo();		// Call the parent constructor.		parent::__construct($subject, $config);		// Get the type id.		$this->type_id = $this->getTypeId();		// Add the content type if it doesn't exist and is set.		if (empty($this->type_id) && !empty($this->type_title))		{			$this->type_id = FinderIndexerHelper::addContentType($this->type_title, $this->mime);		}		// Check for a layout override.		if ($this->params->get('layout'))		{			$this->layout = $this->params->get('layout');		}		// Get the indexer object		$this->indexer = FinderIndexer::getInstance();	}	/**	 * Method to get the adapter state and push it into the indexer.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws    Exception on error.	 */	public function onStartIndex()	{		// Get the indexer state.		$iState = FinderIndexer::getState();		// Get the number of content items.		$total = (int) $this->getContentCount();		// Add the content count to the total number of items.		$iState->totalItems += $total;		// Populate the indexer state information for the adapter.		$iState->pluginState[$this->context]['total'] = $total;		$iState->pluginState[$this->context]['offset'] = 0;		// Set the indexer state.		FinderIndexer::setState($iState);	}	/**	 * Method to prepare for the indexer to be run. This method will often	 * be used to include dependencies and things of that nature.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on error.	 */	public function onBeforeIndex()	{		// Get the indexer and adapter state.		$iState = FinderIndexer::getState();		$aState = $iState->pluginState[$this->context];		// Check the progress of the indexer and the adapter.		if ($iState->batchOffset == $iState->batchSize || $aState['offset'] == $aState['total'])		{			return true;		}		// Run the setup method.		return $this->setup();	}	/**	 * Method to index a batch of content items. This method can be called by	 * the indexer many times throughout the indexing process depending on how	 * much content is available for indexing. It is important to track the	 * progress correctly so we can display it to the user.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on error.	 */	public function onBuildIndex()	{		// Get the indexer and adapter state.		$iState = FinderIndexer::getState();		$aState = $iState->pluginState[$this->context];		// Check the progress of the indexer and the adapter.		if ($iState->batchOffset == $iState->batchSize || $aState['offset'] == $aState['total'])		{			return true;		}		// Get the batch offset and size.		$offset = (int) $aState['offset'];		$limit = (int) ($iState->batchSize - $iState->batchOffset);		// Get the content items to index.		$items = $this->getItems($offset, $limit);		// Iterate through the items and index them.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			// Index the item.			$this->index($items[$i]);			// Adjust the offsets.			$offset++;			$iState->batchOffset++;			$iState->totalItems--;		}		// Update the indexer state.		$aState['offset'] = $offset;		$iState->pluginState[$this->context] = $aState;		FinderIndexer::setState($iState);		return true;	}	/**	 * Method to change the value of a content item's property in the links	 * table. This is used to synchronize published and access states that	 * are changed when not editing an item directly.	 *	 * @param   string   $id        The ID of the item to change.	 * @param   string   $property  The property that is being changed.	 * @param   integer  $value     The new value of that property.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws    Exception on database error.	 */	protected function change($id, $property, $value)	{		// Check for a property we know how to handle.		if ($property !== 'state' && $property !== 'access')		{			return true;		}		// Get the url for the content id.		$item = $this->db->quote($this->getUrl($id, $this->extension, $this->layout));		// Update the content items.		$query = $this->db->getQuery(true)			->update($this->db->quoteName('#__finder_links'))			->set($this->db->quoteName($property) . ' = ' . (int) $value)			->where($this->db->quoteName('url') . ' = ' . $item);		$this->db->setQuery($query);		$this->db->execute();		return true;	}	/**	 * Method to index an item.	 *	 * @param   FinderIndexerResult  $item  The item to index as a FinderIndexerResult object.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function index(FinderIndexerResult $item);	/**	 * Method to reindex an item.	 *	 * @param   integer  $id  The ID of the item to reindex.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function reindex($id)	{		// Run the setup method.		$this->setup();		// Get the item.		$item = $this->getItem($id);		// Index the item.		$this->index($item);	}	/**	 * Method to remove an item from the index.	 *	 * @param   string  $id  The ID of the item to remove.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function remove($id)	{		// Get the item's URL		$url = $this->db->quote($this->getUrl($id, $this->extension, $this->layout));		// Get the link ids for the content items.		$query = $this->db->getQuery(true)			->select($this->db->quoteName('link_id'))			->from($this->db->quoteName('#__finder_links'))			->where($this->db->quoteName('url') . ' = ' . $url);		$this->db->setQuery($query);		$items = $this->db->loadColumn();		// Check the items.		if (empty($items))		{			return true;		}		// Remove the items.		foreach ($items as $item)		{			$this->indexer->remove($item);		}		return true;	}	/**	 * Method to setup the adapter before indexing.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function setup();	/**	 * Method to update index data on category access level changes	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function categoryAccessChange($row)	{		$query = clone($this->getStateQuery());		$query->where('c.id = ' . (int) $row->id);		// Get the access level.		$this->db->setQuery($query);		$items = $this->db->loadObjectList();		// Adjust the access level for each item within the category.		foreach ($items as $item)		{			// Set the access level.			$temp = max($item->access, $row->access);			// Update the item.			$this->change((int) $item->id, 'access', $temp);			// Reindex the item			$this->reindex($row->id);		}	}	/**	 * Method to update index data on category access level changes	 *	 * @param   array    $pks    A list of primary key ids of the content that has changed state.	 * @param   integer  $value  The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function categoryStateChange($pks, $value)	{		// The item's published state is tied to the category		// published state so we need to look up all published states		// before we change anything.		foreach ($pks as $pk)		{			$query = clone($this->getStateQuery());			$query->where('c.id = ' . (int) $pk);			// Get the published states.			$this->db->setQuery($query);			$items = $this->db->loadObjectList();			// Adjust the state for each item within the category.			foreach ($items as $item)			{				// Translate the state.				$temp = $this->translateState($item->state, $value);				// Update the item.				$this->change($item->id, 'state', $temp);				// Reindex the item				$this->reindex($item->id);			}		}	}	/**	 * Method to check the existing access level for categories	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function checkCategoryAccess($row)	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('access'))			->from($this->db->quoteName('#__categories'))			->where($this->db->quoteName('id') . ' = ' . (int) $row->id);		$this->db->setQuery($query);		// Store the access level to determine if it changes		$this->old_cataccess = $this->db->loadResult();	}	/**	 * Method to check the existing access level for items	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function checkItemAccess($row)	{		$query = $this->db->getQuery(true)			->select($this->db->quoteName('access'))			->from($this->db->quoteName($this->table))			->where($this->db->quoteName('id') . ' = ' . (int) $row->id);		$this->db->setQuery($query);		// Store the access level to determine if it changes		$this->old_access = $this->db->loadResult();	}	/**	 * Method to get the number of content items available to index.	 *	 * @return  integer  The number of content items available to index.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getContentCount()	{		$return = 0;		// Get the list query.		$query = $this->getListQuery();		// Check if the query is valid.		if (empty($query))		{			return $return;		}		// Tweak the SQL query to make the total lookup faster.		if ($query instanceof JDatabaseQuery)		{			$query = clone($query);			$query->clear('select')				->select('COUNT(*)')				->clear('order');		}		// Get the total number of content items to index.		$this->db->setQuery($query);		$return = (int) $this->db->loadResult();		return $return;	}	/**	 * Method to get a content item to index.	 *	 * @param   integer  $id  The id of the content item.	 *	 * @return  FinderIndexerResult  A FinderIndexerResult object.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getItem($id)	{		// Get the list query and add the extra WHERE clause.		$query = $this->getListQuery();		$query->where('a.id = ' . (int) $id);		// Get the item to index.		$this->db->setQuery($query);		$row = $this->db->loadAssoc();		// Convert the item to a result object.		$item = JArrayHelper::toObject($row, 'FinderIndexerResult');		// Set the item type.		$item->type_id = $this->type_id;		// Set the item layout.		$item->layout = $this->layout;		return $item;	}	/**	 * Method to get a list of content items to index.	 *	 * @param   integer         $offset  The list offset.	 * @param   integer         $limit   The list limit.	 * @param   JDatabaseQuery  $query   A JDatabaseQuery object. [optional]	 *	 * @return  array  An array of FinderIndexerResult objects.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getItems($offset, $limit, $query = null)	{		$items = array();		// Get the content items to index.		$this->db->setQuery($this->getListQuery($query), $offset, $limit);		$rows = $this->db->loadAssocList();		// Convert the items to result objects.		foreach ($rows as $row)		{			// Convert the item to a result object.			$item = JArrayHelper::toObject($row, 'FinderIndexerResult');			// Set the item type.			$item->type_id = $this->type_id;			// Set the mime type.			$item->mime = $this->mime;			// Set the item layout.			$item->layout = $this->layout;			// Set the extension if present			if (isset($row->extension))			{				$item->extension = $row->extension;			}			// Add the item to the stack.			$items[] = $item;		}		return $items;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object. [optional]	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $this->db->getQuery(true);		return $query;	}	/**	 * Method to get the plugin type	 *	 * @param   integer  $id  The plugin ID	 *	 * @return  string  The plugin type	 *	 * @since   2.5	 */	protected function getPluginType($id)	{		// Prepare the query		$query = $this->db->getQuery(true)			->select($this->db->quoteName('element'))			->from($this->db->quoteName('#__extensions'))			->where($this->db->quoteName('extension_id') . ' = ' . (int) $id);		$this->db->setQuery($query);		$type = $this->db->loadResult();		return $type;	}	/**	 * Method to get a SQL query to load the published and access states for	 * an article and category.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true);		// Item ID		$query->select('a.id');		// Item and category published state		$query->select('a.' . $this->state_field . ' AS state, c.published AS cat_state');		// Item and category access levels		$query->select('a.access, c.access AS cat_access')			->from($this->table . ' AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		return $query;	}	/**	 * Method to get the query clause for getting items to update by time.	 *	 * @param   string  $time  The modified timestamp.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getUpdateQueryByTime($time)	{		// Build an SQL query based on the modified time.		$query = $this->db->getQuery(true)			->where('a.modified >= ' . $this->db->quote($time));		return $query;	}	/**	 * Method to get the query clause for getting items to update by id.	 *	 * @param   array  $ids  The ids to load.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getUpdateQueryByIds($ids)	{		// Build an SQL query based on the item ids.		$query = $this->db->getQuery(true)			->where('a.id IN(' . implode(',', $ids) . ')');		return $query;	}	/**	 * Method to get the type id for the adapter content.	 *	 * @return  integer  The numeric type id for the content.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getTypeId()	{		// Get the type id from the database.		$query = $this->db->getQuery(true)			->select($this->db->quoteName('id'))			->from($this->db->quoteName('#__finder_types'))			->where($this->db->quoteName('title') . ' = ' . $this->db->quote($this->type_title));		$this->db->setQuery($query);		$result = (int) $this->db->loadResult();		return $result;	}	/**	 * Method to get the URL for the item. The URL is how we look up the link	 * in the Finder index.	 *	 * @param   integer  $id         The id of the item.	 * @param   string   $extension  The extension the category is in.	 * @param   string   $view       The view for the URL.	 *	 * @return  string  The URL of the item.	 *	 * @since   2.5	 */	protected function getURL($id, $extension, $view)	{		return 'index.php?option=' . $extension . '&view=' . $view . '&id=' . $id;	}	/**	 * Method to get the page title of any menu item that is linked to the	 * content item, if it exists and is set.	 *	 * @param   string  $url  The url of the item.	 *	 * @return  mixed  The title on success, null if not found.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function getItemMenuTitle($url)	{		$return = null;		// Set variables		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Build a query to get the menu params.		$query = $this->db->getQuery(true)			->select($this->db->quoteName('params'))			->from($this->db->quoteName('#__menu'))			->where($this->db->quoteName('link') . ' = ' . $this->db->quote($url))			->where($this->db->quoteName('published') . ' = 1')			->where($this->db->quoteName('access') . ' IN (' . $groups . ')');		// Get the menu params from the database.		$this->db->setQuery($query);		$params = $this->db->loadResult();		// Check the results.		if (empty($params))		{			return $return;		}		// Instantiate the params.		$params = json_decode($params);		// Get the page title if it is set.		if ($params->page_title)		{			$return = $params->page_title;		}		return $return;	}	/**	 * Method to update index data on access level changes	 *	 * @param   JTable  $row  A JTable object	 *	 * @return  void	 *	 * @since   2.5	 */	protected function itemAccessChange($row)	{		$query = clone($this->getStateQuery());		$query->where('a.id = ' . (int) $row->id);		// Get the access level.		$this->db->setQuery($query);		$item = $this->db->loadObject();		// Set the access level.		$temp = max($row->access, $item->cat_access);		// Update the item.		$this->change((int) $row->id, 'access', $temp);	}	/**	 * Method to update index data on published state changes	 *	 * @param   array    $pks    A list of primary key ids of the content that has changed state.	 * @param   integer  $value  The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function itemStateChange($pks, $value)	{		// The item's published state is tied to the category		// published state so we need to look up all published states		// before we change anything.		foreach ($pks as $pk)		{			$query = clone($this->getStateQuery());			$query->where('a.id = ' . (int) $pk);			// Get the published states.			$this->db->setQuery($query);			$item = $this->db->loadObject();			// Translate the state.			$temp = $this->translateState($value, $item->cat_state);			// Update the item.			$this->change($pk, 'state', $temp);			// Reindex the item			$this->reindex($pk);		}	}	/**	 * Method to update index data when a plugin is disabled	 *	 * @param   array  $pks  A list of primary key ids of the content that has changed state.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function pluginDisable($pks)	{		// Since multiple plugins may be disabled at a time, we need to check first		// that we're handling the appropriate one for the context		foreach ($pks as $pk)		{			if ($this->getPluginType($pk) == strtolower($this->context))			{				// Get all of the items to unindex them				$query = clone($this->getStateQuery());				$this->db->setQuery($query);				$items = $this->db->loadColumn();				// Remove each item				foreach ($items as $item)				{					$this->remove($item);				}			}		}	}	/**	 * Method to translate the native content states into states that the	 * indexer can use.	 *	 * @param   integer  $item      The item state.	 * @param   integer  $category  The category state. [optional]	 *	 * @return  integer  The translated indexer state.	 *	 * @since   2.5	 */	protected function translateState($item, $category = null)	{		// If category is present, factor in its states as well		if ($category !== null)		{			if ($category == 0)			{				$item = 0;			}		}		// Translate the state		switch ($item)		{			// Published and archived items only should return a published state			case 1;			case 2:				return 1;			// All other states should return a unpublished state			default:			case 0:				return 0;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" role="presentation" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_CONTENT_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_CONTENT_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_content');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('article.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class JFormFieldModuleOrder extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ModuleOrder';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		$html[] = '<script type="text/javascript">';		$ordering = $this->form->getValue('ordering');		$position = $this->form->getValue('position');		$clientId = $this->form->getValue('client_id');		$html[] = 'var originalOrder = "' . $ordering . '";';		$html[] = 'var originalPos = "' . $position . '";';		$html[] = 'var orders = new Array();';		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('position, ordering, title')			->from('#__modules')			->where('client_id = ' . (int) $clientId)			->order('ordering');		$db->setQuery($query);		try		{			$orders = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return false;		}		$orders2 = array();		for ($i = 0, $n = count($orders); $i < $n; $i++)		{			if (!isset($orders2[$orders[$i]->position]))			{				$orders2[$orders[$i]->position] = 0;			}			$orders2[$orders[$i]->position]++;			$ord = $orders2[$orders[$i]->position];			$title = JText::sprintf('COM_MODULES_OPTION_ORDER_POSITION', $ord, addslashes($orders[$i]->title));			$html[] = 'orders[' . $i . '] =  new Array("' . $orders[$i]->position . '","' . $ord . '","' . $title . '");';		}		$html[] = 'writeDynaList(\'name="' . $this->name . '" id="' . $this->id . '"' . $attr . '\', orders, originalPos, originalPos, originalOrder);';		$html[] = '</script>';		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to initialise the database for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallDatabase extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the options from the session		$options = $model->getOptions();		// Get the database model.		$db = new InstallationModelDatabase;		// Attempt to create the database tables.		$return = $db->createTables($options);		$r = new stdClass;		$r->view = 'install';		// Check if the database was initialised		if (!$return)		{			$r->view = 'database';		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_related_items * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_content/helpers/route.php';/** * Helper for mod_related_items * * @package     Joomla.Site * @subpackage  mod_related_items * @since       1.5 */abstract class ModRelatedItemsHelper{	public static function getList($params)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		$date = JFactory::getDate();		$option = $app->input->get('option');		$view = $app->input->get('view');		$temp = $app->input->getString('id');		$temp = explode(':', $temp);		$id = $temp[0];		$nullDate = $db->getNullDate();		$now = $date->toSql();		$related = array();		$query = $db->getQuery(true);		if ($option == 'com_content' && $view == 'article' && $id)		{			// select the meta keywords from the item			$query->select('metakey')				->from('#__content')				->where('id = ' . (int) $id);			$db->setQuery($query);			if ($metakey = trim($db->loadResult()))			{				// explode the meta keys on a comma				$keys = explode(',', $metakey);				$likes = array();				// assemble any non-blank word(s)				foreach ($keys as $key)				{					$key = trim($key);					if ($key)					{						$likes[] = $db->escape($key);					}				}				if (count($likes))				{					// select other items based on the metakey field 'like' the keys found					$query->clear()						->select('a.id')						->select('a.title')						->select('DATE_FORMAT(a.created, "%Y-%m-%d") as created')						->select('a.catid')						->select('cc.access AS cat_access')						->select('cc.published AS cat_state');					// Sqlsrv changes					$case_when = ' CASE WHEN ';					$case_when .= $query->charLength('a.alias', '!=', '0');					$case_when .= ' THEN ';					$a_id = $query->castAsChar('a.id');					$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');					$case_when .= ' ELSE ';					$case_when .= $a_id . ' END as slug';					$query->select($case_when);					$case_when = ' CASE WHEN ';					$case_when .= $query->charLength('cc.alias', '!=', '0');					$case_when .= ' THEN ';					$c_id = $query->castAsChar('cc.id');					$case_when .= $query->concatenate(array($c_id, 'cc.alias'), ':');					$case_when .= ' ELSE ';					$case_when .= $c_id . ' END as catslug';					$query->select($case_when)						->from('#__content AS a')						->join('LEFT', '#__content_frontpage AS f ON f.content_id = a.id')						->join('LEFT', '#__categories AS cc ON cc.id = a.catid')						->where('a.id != ' . (int) $id)						->where('a.state = 1')						->where('a.access IN (' . $groups . ')');					$concat_string = $query->concatenate(array('","', ' REPLACE(a.metakey, ", ", ",")', ' ","'));					$query->where('(' . $concat_string . ' LIKE "%' . implode('%" OR ' . $concat_string . ' LIKE "%', $likes) . '%")') //remove single space after commas in keywords)						->where('(a.publish_up = ' . $db->quote($nullDate) . ' OR a.publish_up <= ' . $db->quote($now) . ')')						->where('(a.publish_down = ' . $db->quote($nullDate) . ' OR a.publish_down >= ' . $db->quote($now) . ')');					// Filter by language					if (JLanguageMultilang::isEnabled())					{						$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');					}					$db->setQuery($query);					$temp = $db->loadObjectList();					if (count($temp))					{						foreach ($temp as $row)						{							if ($row->cat_state == 1)							{								$row->route = JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catslug));								$related[] = $row;							}						}					}					unset ($temp);				}			}		}		return $related;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsViewTag extends JViewLegacy{	public function display($tpl = null)	{		$app      = JFactory::getApplication();		$document = JFactory::getDocument();		$document->link = JRoute::_(TagsHelperRoute::getTagRoute($app->input->getInt('id')));		$app->input->set('limit', $app->getCfg('feed_limit'));		$params = $app->getParams();		$siteEmail = $app->getCfg('mailfrom');		$fromName  = $app->getCfg('fromname');		$feedEmail = $app->getCfg('feed_email', 'author');		$document->editor = $fromName;		if ($feedEmail != "none")		{			$document->editorEmail = $siteEmail;		}		// Get some data from the model		$items    = $this->get('Items');		$tag = $this->get('Item');		foreach ($items as $item)		{			// Strip HTML from feed item title			$title = $this->escape($item->core_title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// URL link to tagged item			// Change to new routing once it is merged			$link = JRoute::_($item->link);			// Strip HTML from feed item description text			$description = $item->core_body;			$author			= $item->core_created_by_alias ? $item->core_created_by_alias : $item->author;			$date = ($item->displayDate ? date('r', strtotime($item->displayDate)) : '');			// Load individual item creator class			$feeditem = new JFeedItem;			$feeditem->title       = $title;			$feeditem->link        = $link;			$feeditem->description = $description;			$feeditem->date        = $date;			$feeditem->category    = $item->title;			$feeditem->author      = $author;			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$item->authorEmail = $row->author_email;			}			// Loads item info into RSS array			$document->addItem($feeditem);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');JFormHelper::loadFieldClass('list');/** * Supports an HTML select list of folder * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldFolderList extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'FolderList';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Initialize some field attributes.		$filter = (string) $this->element['filter'];		$exclude = (string) $this->element['exclude'];		$hideNone = (string) $this->element['hide_none'];		$hideDefault = (string) $this->element['hide_default'];		// Get the path in which to search for file options.		$path = (string) $this->element['directory'];		if (!is_dir($path))		{			$path = JPATH_ROOT . '/' . $path;		}		// Prepend some default options based on field attributes.		if (!$hideNone)		{			$options[] = JHtml::_('select.option', '-1', JText::alt('JOPTION_DO_NOT_USE', preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)));		}		if (!$hideDefault)		{			$options[] = JHtml::_('select.option', '', JText::alt('JOPTION_USE_DEFAULT', preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)));		}		// Get a list of folders in the search path with the given filter.		$folders = JFolder::folders($path, $filter);		// Build the options list from the list of folders.		if (is_array($folders))		{			foreach ($folders as $folder)			{				// Check to see if the file is in the exclude mask.				if ($exclude)				{					if (preg_match(chr(1) . $exclude . chr(1), $folder))					{						continue;					}				}				$options[] = JHtml::_('select.option', $folder, $folder);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides a hidden field * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.hidden.html#input.hidden * @since       11.1 */class JFormFieldHidden extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Hidden';	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="hidden" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $class . $disabled . $onchange . ' />';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Adsense data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataAdsense extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/adsense');		}	}	/**	 * Method to get an Adsense account's settings from Google	 *	 * @param   string   $accountID    ID of account to get	 * @param   boolean  $subaccounts  Include list of subaccounts	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getAccount($accountID, $subaccounts = true)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . ($subaccounts ? '?tree=true' : '');			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense accounts from Google	 *	 * @param   array  $options   Search settings	 * @param   int    $maxpages  Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listAccounts($options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense clients from Google	 *	 * @param   string  $accountID  ID of account to list the clients from	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listClients($accountID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an AdSense AdUnit	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $adunitID    ID of adunit to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getUnit($accountID, $adclientID, $adunitID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels for a specific Adunit	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $adunitID    ID of adunit to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUnitChannels($accountID, $adclientID, $adunitID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/adunits/' . urlencode($adunitID) . '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to get an Adsense Channel	 *	 * @param   string  $accountID   ID of account to get	 * @param   string  $adclientID  ID of client to get	 * @param   string  $channelID   ID of channel to get	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 */	public function getChannel($accountID, $adclientID, $channelID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/';			$url .= urlencode($adclientID) . '/customchannels/' . urlencode($channelID);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Custom Channels	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client to list channels from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Adunits for a specific Custom Channel	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   string  $channelID   ID of channel to list units from	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listChannelUnits($accountID, $adclientID, $channelID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/adclients/' . urlencode($adclientID);			$url .= '/customchannels/' . urlencode($channelID) . '/adunits?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to generate a report from Google AdSense	 *	 * @param   string  $accountID   ID of account	 * @param   string  $adclientID  ID of client	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listUrlChannels($accountID, $adclientID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID);			$url .= '/adclients/' . urlencode($adclientID) . '/urlchannels?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of AdSense Channel URLs	 *	 * @param   string  $accountID  ID of account	 * @param   mixed   $start      Start day	 * @param   mixed   $end        End day	 * @param   array   $options    Search settings	 * @param   int     $maxpages   Maximum number of pages of accounts to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function generateReport($accountID, $start, $end = false, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			if (is_int($start))			{				$startobj = new DateTime;				$startobj->setTimestamp($start);			}			elseif (is_string($start))			{				$startobj = new DateTime($start);			}			elseif (is_a($start, 'DateTime'))			{				$startobj = $start;			}			else			{				throw new InvalidArgumentException('Invalid start time.');			}			if (!$end)			{				$endobj = new DateTime;			}			elseif (is_int($end))			{				$endobj = new DateTime;				$endobj->setTimestamp($end);			}			elseif (is_string($end))			{				$endobj = new DateTime($end);			}			elseif (is_a($end, 'DateTime'))			{				$endobj = $end;			}			else			{				throw new InvalidArgumentException('Invalid end time.');			}			$options['startDate'] = $startobj->format('Y-m-d');			$options['endDate'] = $endobj->format('Y-m-d');			$begin = array_key_exists('startIndex', $options) ? $options['startIndex'] : 0;			unset($options['startIndex']);			$url = 'https://www.googleapis.com/adsense/v1.1/accounts/' . urlencode($accountID) . '/reports?' . http_build_query($options);			if (strpos($url, '&'))			{				$url .= '&';			}			$i = 0;			$data['rows'] = array();			do			{				$jdata = $this->query($url . 'startIndex=' . count($data['rows']));				$newdata = json_decode($jdata->body, true);				if ($newdata && array_key_exists('rows', $newdata))				{					$newdata['rows'] = array_merge($data['rows'], $newdata['rows']);					$data = $newdata;				}				else				{					throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");				}				$i++;			}			while (count($data['rows']) < $data['totalMatchedRows'] && $i < $maxpages);			return $data;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_contact */class ContactControllerContact extends JControllerForm{	public function getModel($name = '', $prefix = '', $config = array('ignore_request' => true))	{		return parent::getModel($name, $prefix, array('ignore_request' => false));	}	public function submit()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app    = JFactory::getApplication();		$model  = $this->getModel('contact');		$params = JComponentHelper::getParams('com_contact');		$stub   = $this->input->getString('id');		$id     = (int) $stub;		// Get the data from POST		$data  = $this->input->post->get('jform', array(), 'array');		$contact = $model->getItem($id);		$params->merge($contact->params);		// Check for a valid session cookie		if ($params->get('validate_session', 0))		{			if (JFactory::getSession()->getState() != 'active'){				JError::raiseWarning(403, JText::_('COM_CONTACT_SESSION_INVALID'));				// Save the data in the session.				$app->setUserState('com_contact.contact.data', $data);				// Redirect back to the contact form.				$this->setRedirect(JRoute::_('index.php?option=com_contact&view=contact&id='.$stub, false));				return false;			}		}		// Contact plugins		JPluginHelper::importPlugin('contact');		$dispatcher	= JEventDispatcher::getInstance();		// Validate the posted data.		$form = $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$validate = $model->validate($form, $data);		if ($validate === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_contact.contact.data', $data);			// Redirect back to the contact form.			$this->setRedirect(JRoute::_('index.php?option=com_contact&view=contact&id='.$stub, false));			return false;		}		// Validation succeeded, continue with custom handlers		$results	= $dispatcher->trigger('onValidateContact', array(&$contact, &$data));		foreach ($results as $result)		{			if ($result instanceof Exception)			{				return false;			}		}		// Passed Validation: Process the contact plugins to integrate with other applications		$results = $dispatcher->trigger('onSubmitContact', array(&$contact, &$data));		// Send the email		$sent = false;		if (!$params->get('custom_reply'))		{			$sent = $this->_sendEmail($data, $contact);		}		// Set the success message if it was a success		if (!($sent instanceof Exception))		{			$msg = JText::_('COM_CONTACT_EMAIL_THANKS');		}		else		{			$msg = '';		}		// Flush the data from the session		$app->setUserState('com_contact.contact.data', null);		// Redirect if it is set in the parameters, otherwise redirect back to where we came from		if ($contact->params->get('redirect'))		{			$this->setRedirect($contact->params->get('redirect'), $msg);		}		else		{			$this->setRedirect(JRoute::_('index.php?option=com_contact&view=contact&id='.$stub, false), $msg);		}		return true;	}	private function _sendEmail($data, $contact)	{			$app		= JFactory::getApplication();			$params 	= JComponentHelper::getParams('com_contact');			if ($contact->email_to == '' && $contact->user_id != 0)			{				$contact_user = JUser::getInstance($contact->user_id);				$contact->email_to = $contact_user->get('email');			}			$mailfrom	= $app->getCfg('mailfrom');			$fromname	= $app->getCfg('fromname');			$sitename	= $app->getCfg('sitename');			$copytext 	= JText::sprintf('COM_CONTACT_COPYTEXT_OF', $contact->name, $sitename);			$name		= $data['contact_name'];			$email		= $data['contact_email'];			$subject	= $data['contact_subject'];			$body		= $data['contact_message'];			// Prepare email body			$prefix = JText::sprintf('COM_CONTACT_ENQUIRY_TEXT', JURI::base());			$body	= $prefix."\n".$name.' <'.$email.'>'."\r\n\r\n".stripslashes($body);			$mail = JFactory::getMailer();			$mail->addRecipient($contact->email_to);			$mail->addReplyTo(array($email, $name));			$mail->setSender(array($mailfrom, $fromname));			$mail->setSubject($sitename.': '.$subject);			$mail->setBody($body);			$sent = $mail->Send();			//If we are supposed to copy the sender, do so.			// check whether email copy function activated			if ( array_key_exists('contact_email_copy', $data)  )			{				$copytext		= JText::sprintf('COM_CONTACT_COPYTEXT_OF', $contact->name, $sitename);				$copytext		.= "\r\n\r\n".$body;				$copysubject	= JText::sprintf('COM_CONTACT_COPYSUBJECT_OF', $subject);				$mail = JFactory::getMailer();				$mail->addRecipient($email);				$mail->addReplyTo(array($email, $name));				$mail->setSender(array($mailfrom, $fromname));				$mail->setSubject($copysubject);				$mail->setBody($copytext);				$sent = $mail->Send();			}			return $sent;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Status class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/status/ * @since       13.1 */class JFacebookStatus extends JFacebookObject{	/**	 * Method to get a status message. Requires authentication.	 *	 * @param   string  $status  The status message id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getStatus($status)	{		return $this->get($status);	}	/**	 * Method to get a status message's comments. Requires authentication.	 *	 * @param   string   $status  The status message id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($status, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($status, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a comment to the status message. Requires authentication and publish_stream and user_status or friends_status permission.	 *	 * @param   string  $status   The status message id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($status, $message)	{		// Set POST request parameters.		$data['message'] = $message;		return $this->createConnection($status, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream and user_status or friends_status permission.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get a status message's likes. Requires authentication.	 *	 * @param   string   $status  The status message id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($status, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($status, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like status message. Requires authentication and publish_stream and user_status or friends_status permission.	 *	 * @param   string  $status  The status message id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createLike($status)	{		return $this->createConnection($status, 'likes');	}	/**	 * Method to unlike a status message. Requires authentication and publish_stream and user_status or friends_status permission.	 *	 * @param   string  $status  The status message id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteLike($status)	{		return $this->deleteConnection($status, 'likes');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @since       13.1 */abstract class JFacebookObject{	/**	 * @var    JRegistry  Options for the Facebook object.	 * @since  13.1	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var    JFacebookOAuth  The OAuth client.	 * @since  13.1	 */	protected $oauth;	/**	 * Constructor.	 *	 * @param   JRegistry       $options  Facebook options object.	 * @param   JHttp           $client   The HTTP client object.	 * @param   JFacebookOAuth  $oauth    The OAuth client.	 *	 * @since   13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JFacebookOAuth $oauth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JHttp($this->options);		$this->oauth = $oauth;	}	/**	 * Method to build and return a full request URL for the request.  This method will	 * add appropriate pagination details if necessary and also prepend the API url	 * to have a complete URL for the request.	 *	 * @param   string     $path    URL to inflect.	 * @param   integer    $limit   The number of objects per page.	 * @param   integer    $offset  The object's number on the page.	 * @param   timestamp  $until   A unix timestamp or any date accepted by strtotime.	 * @param   timestamp  $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  string  The request URL.	 *	 * @since   13.1	 */	protected function fetchUrl($path, $limit = 0, $offset = 0, $until = null, $since = null)	{		// Get a new JUri object fousing the api url and given path.		$uri = new JUri($this->options->get('api.url') . $path);		if ($limit > 0)		{			$uri->setVar('limit', (int) $limit);		}		if ($offset > 0)		{			$uri->setVar('offset', (int) $offset);		}		if ($until != null)		{			$uri->setVar('until', $until);		}		if ($since != null)		{			$uri->setVar('since', $since);		}		return (string) $uri;	}	/**	 * Method to send the request.	 *	 * @param   string   $path     The path of the request to make.	 * @param   mixed    $data     Either an associative array or a string to be sent with the post request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return   mixed  The request response.	 *	 * @since    13.1	 * @throws   DomainException	 */	public function sendRequest($path, $data = '', array $headers = null, $limit = 0, $offset = 0, $until = null, $since = null)	{		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $limit, $offset, $until, $since), $headers);		$response = json_decode($response->body);		// Validate the response.		if (property_exists($response, 'error'))		{			throw new RuntimeException($response->error->message);		}		return $response;	}	/**	 * Method to get an object.	 *	 * @param   string  $object  The object id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function get($object)	{		if ($this->oauth != null)		{			if ($this->oauth->isAuthenticated())			{				$response = $this->oauth->query($this->fetchUrl($object));				return json_decode($response->body);			}			else			{				return false;			}		}		// Send the request.		return $this->sendRequest($object);	}	/**	 * Method to get object's connection.	 *	 * @param   string   $object        The object id.	 * @param   string   $connection    The object's connection name.	 * @param   string   $extra_fields  URL fields.	 * @param   integer  $limit         The number of objects per page.	 * @param   integer  $offset        The object's number on the page.	 * @param   string   $until         A unix timestamp or any date accepted by strtotime.	 * @param   string   $since         A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getConnection($object, $connection = null, $extra_fields = '', $limit = 0, $offset = 0, $until = null, $since = null)	{		$path = $object . '/' . $connection . $extra_fields;		if ($this->oauth != null)		{			if ($this->oauth->isAuthenticated())			{				$response = $this->oauth->query($this->fetchUrl($path, $limit, $offset, $until, $since));				if (strcmp($response->body, ''))				{					return json_decode($response->body);				}				else				{					return $response->headers['Location'];				}			}			else			{				return false;			}		}		// Send the request.		return $this->sendRequest($path, '', null, $limit, $offset, $until, $since);	}	/**	 * Method to create a connection.	 *	 * @param   string  $object      The object id.	 * @param   string  $connection  The object's connection name.	 * @param   array   $parameters  The POST request parameters.	 * @param   array   $headers     An array of name-value pairs to include in the header of the request	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createConnection($object, $connection = null, $parameters = null, array $headers = null)	{		if ($this->oauth->isAuthenticated())		{			// Build the request path.			if ($connection != null)			{				$path = $object . '/' . $connection;			}			else			{				$path = $object;			}			// Send the post request.			$response = $this->oauth->query($this->fetchUrl($path), $parameters, $headers, 'post');			return json_decode($response->body);		}		else		{			return false;		}	}	/**	 * Method to delete a connection.	 *	 * @param   string  $object        The object id.	 * @param   string  $connection    The object's connection name.	 * @param   string  $extra_fields  URL fields.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteConnection($object, $connection = null, $extra_fields = '')	{		if ($this->oauth->isAuthenticated())		{			// Build the request path.			if ($connection != null)			{				$path = $object . '/' . $connection . $extra_fields;			}			else			{				$path = $object . $extra_fields;			}			// Send the delete request.			$response = $this->oauth->query($this->fetchUrl($path), null, array(), 'delete');			return json_decode($response->body);		}		else		{			return false;		}	}	/**	 * Method used to set the OAuth client.	 *	 * @param   JFacebookOAuth  $oauth  The OAuth client object.	 *	 * @return  JFacebookObject  This object for method chaining.	 *	 * @since   13.1	 */	public function setOAuth($oauth)	{		$this->oauth = $oauth;		return $this;	}	/**	 * Method used to get the OAuth client.	 *	 * @return  JFacebookOAuth  The OAuth client	 *	 * @since   13.1	 */	public function getOAuth()	{		return $this->oauth;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports a modal contact picker. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class JFormFieldModal_Contacts extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Modal_Contacts';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		// Load the javascript		JHtml::_('behavior.framework');		JHtml::_('behavior.modal', 'a.modal');		JHtml::_('bootstrap.tooltip');		// Build the script.		$script = array();		$script[] = '	function jSelectChart_'.$this->id.'(id, name, object) {';		$script[] = '		document.id("'.$this->id.'_id").value = id;';		$script[] = '		document.id("'.$this->id.'_name").value = name;';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Get the title of the linked chart		$db = JFactory::getDbo();		$db->setQuery(			'SELECT name' .			' FROM #__contact_details' .			' WHERE id = '.(int) $this->value		);		try		{			$title = $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage);		}		if (empty($title))		{			$title = JText::_('COM_CONTACT_SELECT_A_CONTACT');		}		$link = 'index.php?option=com_contact&amp;view=contacts&amp;layout=modal&amp;tmpl=component&amp;function=jSelectChart_'.$this->id;		if (isset($this->element['language']))		{			$link .= '&amp;forcedLanguage='.$this->element['language'];		}		$html = "\n".'<div class="input-append"><input type="text" class="input-medium" id="'.$this->id.'_name" value="'.htmlspecialchars($title, ENT_QUOTES, 'UTF-8').'" disabled="disabled" /><a class="modal btn" title="'.JText::_('COM_CONTACT_CHANGE_CONTACT_BUTTON').'"  href="'.$link.'" rel="{handler: \'iframe\', size: {x: 800, y: 450}}"><i class="icon-address hasTooltip" title="'.JText::_('COM_CONTACT_CHANGE_CONTACT_BUTTON').'"></i> '.JText::_('JSELECT').'</a></div>'."\n";		// The active contact id field.		if (0 == (int) $this->value)		{			$value = '';		}		else		{			$value = (int) $this->value;		}		// class='required' for client side validation		$class = '';		if ($this->required)		{			$class = ' class="required modal-value"';		}		$html .= '<input type="hidden" id="'.$this->id.'_id"'.$class.' name="'.$this->name.'" value="'.$value.'" />';		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContactHelper', JPATH_ADMINISTRATOR . '/components/com_contact/helpers/contact.php');/** * Item Model for a Contact. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactModelContact extends JModelAdmin{	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   2.5	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['category_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['category_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['category_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['tag']))		{			if (!$this->batchTag($commands['tag'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (strlen($commands['user_id']) > 0)		{			if (!$this->batchUser($commands['user_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   11.1	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_contact.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->name);			$table->name = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			//$table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch change a linked user.	 *	 * @param   integer  $value     The new value matching a User ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchUser($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->user_id = (int) $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			return $user->authorise('core.delete', 'com_contact.category.' . (int) $record->catid);		}	}	/**	 * Method to test whether a record can have its state edited.	 *	 * @param   object    $record    A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check against the category.		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_contact.category.' . (int) $record->catid);		}		// Default to component settings if category not known.		else		{			return parent::canEditState($record);		}	}	/**	 * Returns a Table object, always creating it	 *	 * @param   type      $type      The table type to instantiate	 * @param   string    $prefix    A prefix for the table class name. Optional.	 * @param   array     $config    Configuration array for model. Optional.	 *	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Contact', $prefix = 'ContactTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the row form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		JForm::addFieldPath('JPATH_ADMINISTRATOR/components/com_users/models/fields');		// Get the form.		$form = $this->loadForm('com_contact.contact', 'contact', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('featured', 'disabled', 'true');			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('featured', 'filter', 'unset');			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get a single record.	 *	 * @param   integer    $pk    The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		if ($item = parent::getItem($pk))		{			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($item->metadata);			$item->metadata = $registry->toArray();		}		// Load associated contact items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$item->associations = array();			if ($item->id != null)			{				$associations = JLanguageAssociations::getAssociations('com_contact', '#__contact_details', 'com_contact.item', $item->id);				foreach ($associations as $tag => $association)				{					$item->associations[$tag] = $association->id;				}			}		}		// Load item tags		if (!empty($item->id))		{			$item->tags = new JHelperTags;			$item->tags->getTagIds($item->id, 'com_contact.contact');			$item->metadata['tags'] = $item->tags;		}		return $item;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_contact.edit.contact.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('contact.id') == 0)			{				$app = JFactory::getApplication();				$data->set('catid', $app->input->get('catid', $app->getUserState('com_contact.contacts.filter.category_id'), 'int'));			}		}		$this->preprocessData('com_contact.contact', $data);		return $data;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since    3.0	 */	public function save($data)	{		$app = JFactory::getApplication();		// Alter the title for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($name, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['name']);			$data['name'] = $name;			$data['alias'] = $alias;			$data['published'] = 0;		}		if (parent::save($data))		{			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$id = (int) $this->getState($this->getName() . '.id');				$item = $this->getItem($id);				// Adding self to the association				$associations = $data['associations'];				foreach ($associations as $tag => $id)				{					if (empty($id))					{						unset($associations[$tag]);					}				}				// Detecting all item menus				$all_language = $item->language == '*';				if ($all_language && !empty($associations))				{					JError::raiseNotice(403, JText::_('COM_CONTACT_ERROR_ALL_LANGUAGE_ASSOCIATED'));				}				$associations[$item->language] = $item->id;				// Deleting old association for these items				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->delete('#__associations')					->where('context=' . $db->quote('com_contact.item'))					->where('id IN (' . implode(',', $associations) . ')');				$db->setQuery($query);				$db->execute();				if ($error = $db->getErrorMsg())				{					$this->setError($error);					return false;				}				if (!$all_language && count($associations))				{					// Adding new association for these items					$key = md5(json_encode($associations));					$query->clear()						->insert('#__associations');					foreach ($associations as $tag => $id)					{						$query->values($id . ',' . $db->quote('com_contact.item') . ',' . $db->quote($key));					}					$db->setQuery($query);					$db->execute();					if ($error = $db->getErrorMsg())					{						$this->setError($error);						return false;					}				}			}			return true;		}		return false;	}	/**	 * Prepare and sanitise the table prior to saving.	 *	 * @param   JTable    $table	 *	 * @return  void	 * @since   1.6	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		$table->name = htmlspecialchars_decode($table->name, ENT_QUOTES);		$table->alias = JApplication::stringURLSafe($table->alias);		if (empty($table->alias))		{			$table->alias = JApplication::stringURLSafe($table->name);		}		if (empty($table->id))		{			// Set the values			$table->created = $date->toSql();			// Set ordering to the last item if not set			if (empty($table->ordering))			{				$db = JFactory::getDbo();				$db->setQuery('SELECT MAX(ordering) FROM #__contact_details');				$max = $db->loadResult();				$table->ordering = $max + 1;			}		}		else		{			// Set the values			$table->modified = $date->toSql();			$table->modified_by = $user->get('id');		}		// Increment the content version number.		$table->version++;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   JTable    $table    A record object.	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = ' . (int) $table->catid;		return $condition;	}	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Association content items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			// force to array (perhaps move to $this->loadFormData())			$data = (array) $data;			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_CONTACT_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if (empty($data['language']) || $tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'modal_contacts');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');				}			}			if ($add)			{				$form->load($addform, false);			}		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to toggle the featured setting of contacts.	 *	 * @param   array    $pks      The ids of the items to toggle.	 * @param   integer  $value    The value to toggle to.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function featured($pks, $value = 0)	{		// Sanitize the ids.		$pks = (array) $pks;		JArrayHelper::toInteger($pks);		if (empty($pks))		{			$this->setError(JText::_('COM_CONTACT_NO_ITEM_SELECTED'));			return false;		}		$table = $this->getTable();		try		{			$db = $this->getDbo();			$db->setQuery(				'UPDATE #__contact_details' .					' SET featured = ' . (int) $value .					' WHERE id IN (' . implode(',', $pks) . ')'			);			$db->execute();		}		catch (Exception $e)		{			$this->setError($e->getMessage());			return false;		}		$table->reorder();		// Clean component's cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($category_id, $alias, $name)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'catid' => $category_id)))		{			if ($name == $table->name)			{				$name = JString::increment($name);			}			$alias = JString::increment($alias, 'dash');		}		return array($name, $alias);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_weblinks.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_weblinks&task=weblinks.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'weblinkList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_weblinks&view=weblinks'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_WEBLINKS_SEARCH_IN_TITLE');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_WEBLINKS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_WEBLINKS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="weblinkList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'a.ordering');				$item->cat_link	= JRoute::_('index.php?option=com_categories&extension=com_weblinks&task=edit&type=other&cid[]='. $item->catid);				$canCreate  = $user->authorise('core.create',     'com_weblinks.category.' . $item->catid);				$canEdit    = $user->authorise('core.edit',       'com_weblinks.category.' . $item->catid);				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_weblinks.category.' . $item->catid) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">					<?php if ($canChange) :						$disableClassName = '';						$disabledLabel	  = '';						if (!$saveOrder) :							$disabledLabel    = JText::_('JORDERINGDISABLED');							$disableClassName = 'inactive tip-top';						endif; ?>						<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">							<i class="icon-menu"></i>						</span>						<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order " />					<?php else : ?>						<span class="sortable-handler inactive" >							<i class="icon-menu"></i>						</span>					<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->state, $i, 'weblinks.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'weblinks.', $canCheckin); ?>						<?php endif; ?>						<?php if ($canEdit) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_weblinks&task=weblink.edit&id='.(int) $item->id); ?>">								<?php echo $this->escape($item->title); ?></a>						<?php else : ?>								<?php echo $this->escape($item->title); ?>						<?php endif; ?>						<span class="small">							<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>						</span>						<div class="small">							<?php echo $this->escape($item->category_title); ?>						</div>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="center hidden-phone">						<?php echo $item->hits; ?>					</td>					<td class="small nowrap hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view level controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerLevel extends JControllerForm{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_LEVEL';	/**	 * Method to check if you can save a new or existing record.	 *	 * Overrides JControllerForm::allowSave to check the core.admin permission.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowSave($data, $key = 'id')	{		return (JFactory::getUser()->authorise('core.admin', $this->option) && parent::allowSave($data, $key));	}	/**	 * Method to remove a record.	 */	public function delete()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$user = JFactory::getUser();		$ids  = $this->input->get('cid', array(), 'array');		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		elseif (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_USERS_NO_LEVELS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			JArrayHelper::toInteger($ids);			// Remove the items.			if (!$model->delete($ids))			{				JError::raiseWarning(500, $model->getError());			}			else {				$this->setMessage(JText::plural('COM_USERS_N_LEVELS_DELETED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_users&view=levels');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Cache lite storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://pear.php.net/package/Cache_Lite/ * @since       11.1 */class JCacheStorageCachelite extends JCacheStorage{	/**	 * @var    object	 * @since  11.1	 */	protected static $CacheLiteInstance = null;	/**	 * @var	 * @since   11.1	 */	protected $_root;	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		$this->_root = $options['cachebase'];		$cloptions = array(			'cacheDir' => $this->_root . '/',			'lifeTime' => $this->_lifetime,			'fileLocking' => $this->_locking,			'automaticCleaningFactor' => isset($options['autoclean']) ? $options['autoclean'] : 200,			'fileNameProtection' => false,			'hashedDirectoryLevel' => 0,			'caching' => $options['caching']);		if (self::$CacheLiteInstance === null)		{			$this->initCache($cloptions);		}	}	/**	 * Instantiates the appropriate CacheLite object.	 * Only initializes the engine if it does not already exist.	 * Note this is a protected method	 *	 * @param   array  $cloptions  optional parameters	 *	 * @return  object	 *	 * @since   11.1	 */	protected function initCache($cloptions)	{		require_once 'Cache/Lite.php';		self::$CacheLiteInstance = new Cache_Lite($cloptions);		return self::$CacheLiteInstance;	}	/**	 * Get cached data from a file by id and group	 *	 * @param   string   $id         The cache data id.	 * @param   string   $group      The cache data group.	 * @param   boolean  $checkTime  True to verify cache time expiration threshold.	 *	 * @return  mixed  Boolean false on failure or a cached data string.	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		self::$CacheLiteInstance->setOption('cacheDir', $this->_root . '/' . $group . '/');		$this->_getCacheId($id, $group);		$data = self::$CacheLiteInstance->get($this->rawname, $group);		return $data;	}	/**	 * Get all cached data	 *	 * @return  array	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$path = $this->_root;		$folders = new DirectoryIterator($path);		$data = array();		foreach ($folders as $folder)		{			if (!$folder->isDir() || $folder->isDot())			{				continue;			}			$foldername = $folder->getFilename();			$files = new DirectoryIterator($path . '/' . $foldername);			$item  = new JCacheStorageHelper($foldername);			foreach ($files as $file)			{				if (!$file->isFile())				{					continue;				}				$filename = $file->getFilename();				$item->updateSize(filesize($path . '/' . $foldername . '/' . $filename) / 1024);			}			$data[$foldername] = $item;		}		return $data;	}	/**	 * Store the data to a file by id and group	 *	 * @param   string  $id     The cache data id.	 * @param   string  $group  The cache data group.	 * @param   string  $data   The data to store in cache.	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$dir = $this->_root . '/' . $group;		// If the folder doesn't exist try to create it		if (!is_dir($dir))		{			// Make sure the index file is there			$indexFile = $dir . '/index.html';			@mkdir($dir) && file_put_contents($indexFile, '<!DOCTYPE html><title></title>');		}		// Make sure the folder exists		if (!is_dir($dir))		{			return false;		}		self::$CacheLiteInstance->setOption('cacheDir', $this->_root . '/' . $group . '/');		$this->_getCacheId($id, $group);		$success = self::$CacheLiteInstance->save($data, $this->rawname, $group);		if ($success == true)		{			return $success;		}		else		{			return false;		}	}	/**	 * Remove a cached data file by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		self::$CacheLiteInstance->setOption('cacheDir', $this->_root . '/' . $group . '/');		$this->_getCacheId($id, $group);		$success = self::$CacheLiteInstance->remove($this->rawname, $group);		if ($success == true)		{			return $success;		}		else		{			return false;		}	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group.	 * @param   string  $mode   The mode for cleaning cache [group|notgroup].	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		jimport('joomla.filesystem.folder');		if (trim($group) == '')		{			$clmode = 'notgroup';		}		if ($mode == null)		{			$clmode = 'group';		}		switch ($mode)		{			case 'notgroup':				$clmode = 'notingroup';				$success = self::$CacheLiteInstance->clean($group, $clmode);				break;			case 'group':				if (is_dir($this->_root . '/' . $group))				{					$clmode = $group;					self::$CacheLiteInstance->setOption('cacheDir', $this->_root . '/' . $group . '/');					$success = self::$CacheLiteInstance->clean($group, $clmode);					JFolder::delete($this->_root . '/' . $group);				}				else				{					$success = true;				}				break;			default:				if (is_dir($this->_root . '/' . $group))				{					$clmode = $group;					self::$CacheLiteInstance->setOption('cacheDir', $this->_root . '/' . $group . '/');					$success = self::$CacheLiteInstance->clean($group, $clmode);				}				else				{					$success = true;				}				break;		}		if ($success == true)		{			return $success;		}		else		{			return false;		}	}	/**	 * Garbage collect expired cache data	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		$result = true;		self::$CacheLiteInstance->setOption('automaticCleaningFactor', 1);		self::$CacheLiteInstance->setOption('hashedDirectoryLevel', 1);		$success1 = self::$CacheLiteInstance->_cleanDir($this->_root . '/', false, 'old');		if (!($dh = opendir($this->_root . '/')))		{			return false;		}		while ($file = readdir($dh))		{			if (($file != '.') && ($file != '..') && ($file != '.svn'))			{				$file2 = $this->_root . '/' . $file;				if (is_dir($file2))				{					$result = ($result && (self::$CacheLiteInstance->_cleanDir($file2 . '/', false, 'old')));				}			}		}		$success = ($success1 && $result);		return $success;	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		@include_once 'Cache/Lite.php';		if (class_exists('Cache_Lite'))		{			return true;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * An editarea field for content creation * * @package     Joomla.Libraries * @subpackage  Form * @see         JEditor * @since       1.6 */class JFormFieldEditor extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'Editor';	/**	 * The JEditor object.	 *	 * @var    JEditor	 * @since  1.6	 */	protected $editor;	/**	 * Method to get the field input markup for the editor area	 *	 * @return  string  The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		$rows        = (int) $this->element['rows'];		$cols        = (int) $this->element['cols'];		$height      = ((string) $this->element['height']) ? (string) $this->element['height'] : '250';		$width       = ((string) $this->element['width']) ? (string) $this->element['width'] : '100%';		$assetField  = $this->element['asset_field'] ? (string) $this->element['asset_field'] : 'asset_id';		$authorField = $this->element['created_by_field'] ? (string) $this->element['created_by_field'] : 'created_by';		$asset       = $this->form->getValue($assetField) ? $this->form->getValue($assetField) : (string) $this->element['asset_id'];		// Build the buttons array.		$buttons = (string) $this->element['buttons'];		if ($buttons == 'true' || $buttons == 'yes' || $buttons == '1')		{			$buttons = true;		}		elseif ($buttons == 'false' || $buttons == 'no' || $buttons == '0')		{			$buttons = false;		}		else		{			$buttons = explode(',', $buttons);		}		$hide = ((string) $this->element['hide']) ? explode(',', (string) $this->element['hide']) : array();		// Get an editor object.		$editor = $this->getEditor();		return $editor			->display(			$this->name, htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8'), $width, $height, $cols, $rows,			$buttons ? (is_array($buttons) ? array_merge($buttons, $hide) : $hide) : false, $this->id, $asset,			$this->form->getValue($authorField)		);	}	/**	 * Method to get a JEditor object based on the form field.	 *	 * @return  JEditor  The JEditor object.	 *	 * @since   1.6	 */	protected function getEditor()	{		// Only create the editor if it is not already created.		if (empty($this->editor))		{			$editor = null;			// Get the editor type attribute. Can be in the form of: editor="desired|alternative".			$type = trim((string) $this->element['editor']);			if ($type)			{				// Get the list of editor types.				$types = explode('|', $type);				// Get the database object.				$db = JFactory::getDbo();				// Iterate over teh types looking for an existing editor.				foreach ($types as $element)				{					// Build the query.					$query = $db->getQuery(true)						->select('element')						->from('#__extensions')						->where('element = ' . $db->quote($element))						->where('folder = ' . $db->quote('editors'))						->where('enabled = 1');					// Check of the editor exists.					$db->setQuery($query, 0, 1);					$editor = $db->loadResult();					// If an editor was found stop looking.					if ($editor)					{						break;					}				}			}			// Create the JEditor instance based on the given editor.			if (is_null($editor))			{				$conf = JFactory::getConfig();				$editor = $conf->get('editor');			}			$this->editor = JEditor::getInstance($editor);		}		return $this->editor;	}	/**	 * Method to get the JEditor output for an onSave event.	 *	 * @return  string  The JEditor object output.	 *	 * @since   1.6	 */	public function save()	{		return $this->getEditor()->save($this->id);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.modal');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=templates'); ?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>    	<div id="filter-bar" class="btn-toolbar">  		<div class="filter-search btn-group pull-left">  			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_TEMPLATES_TEMPLATES_FILTER_SEARCH_DESC'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TEMPLATES_TEMPLATES_FILTER_SEARCH_DESC'); ?>" />  		</div>  		<div class="btn-group pull-left">  			<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>  			<button class="btn tip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>  		</div>  	</div>  	<div class="clearfix"> </div>  	<table class="table table-striped" id="template-mgr">  		<thead>  			<tr>  				<th class="col1template">  					&#160;  				</th>  				<th>  					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_TEMPLATE', 'a.element', $listDirn, $listOrder); ?>  				</th>  				<th width="10%">  					<?php echo JHtml::_('grid.sort', 'JCLIENT', 'a.client_id', $listDirn, $listOrder); ?>  				</th>  				<th width="10%">  					<?php echo JText::_('JVERSION'); ?>  				</th>  				<th width="15%">  					<?php echo JText::_('JDATE'); ?>  				</th>  				<th width="25%" >  					<?php echo JText::_('JAUTHOR'); ?>  				</th>  			</tr>  		</thead>  		<tfoot>  			<tr>  				<td colspan="8">  					<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  		<tbody>  		<?php foreach ($this->items as $i => $item) : ?>  			<tr class="row<?php echo $i % 2; ?>">  				<td class="center">  					<?php echo JHtml::_('templates.thumb', $item->element, $item->client_id); ?>  				</td>  				<td class="template-name">  					<a href="<?php echo JRoute::_('index.php?option=com_templates&view=template&id='.(int) $item->extension_id); ?>">  						<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_DETAILS', ucfirst($item->name)); ?></a>  					<p>  					<?php if ($this->preview && $item->client_id == '0') : ?>  						<a href="<?php echo JURI::root().'index.php?tp=1&template='.$item->element; ?>" target="_blank">  							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_PREVIEW'); ?></a>  					<?php elseif ($item->client_id == '1') : ?>  						<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN'); ?>  					<?php else: ?>  						<span class="hasTip" title="<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?>::<?php echo JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_DESC'); ?>">  							<?php echo  JText::sprintf('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?></span>  					<?php endif; ?>  					</p>  				</td>  				<td class="small">  					<?php echo $item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>  				</td>  				<td class="small">  					<?php echo $this->escape($item->xmldata->get('version')); ?>  				</td>  				<td class="small">  					<?php echo $this->escape($item->xmldata->get('creationDate')); ?>  				</td>  				<td>  					<?php if ($author = $item->xmldata->get('author')) : ?>  						<p><?php echo $this->escape($author); ?></p>  					<?php else : ?>  						&mdash;  					<?php endif; ?>  					<?php if ($email = $item->xmldata->get('authorEmail')) : ?>  						<p><?php echo $this->escape($email); ?></p>  					<?php endif; ?>  					<?php if ($url = $item->xmldata->get('authorUrl')) : ?>  						<p><a href="<?php echo $this->escape($url); ?>">  							<?php echo $this->escape($url); ?></a></p>  					<?php endif; ?>  				</td>  			</tr>  			<?php endforeach; ?>  		</tbody>  	</table>    	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Template style controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerStyle extends JControllerForm{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_TEMPLATES_STYLE';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners component helper. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_BANNERS_SUBMENU_BANNERS'),			'index.php?option=com_banners&view=banners',			$vName == 'banners'		);		JHtmlSidebar::addEntry(			JText::_('COM_BANNERS_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_banners',			$vName == 'categories'		);		if ($vName == 'categories')		{			JToolbarHelper::title(				JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', JText::_('com_banners')),				'banners-categories');		}		JHtmlSidebar::addEntry(			JText::_('COM_BANNERS_SUBMENU_CLIENTS'),			'index.php?option=com_banners&view=clients',			$vName == 'clients'		);		JHtmlSidebar::addEntry(			JText::_('COM_BANNERS_SUBMENU_TRACKS'),			'index.php?option=com_banners&view=tracks',			$vName == 'tracks'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 *	 * @return  JObject	 * @since   1.6	 */	public static function getActions($categoryId = 0)	{		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($categoryId))		{			$assetName = 'com_banners';			$level = 'component';		}		else		{			$assetName = 'com_banners.category.'.(int) $categoryId;			$level = 'category';		}		$actions = JAccess::getActions('com_banners', $level);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * @return  boolean	 * @since   1.6	 */	public static function updateReset()	{		$user = JFactory::getUser();		$db = JFactory::getDbo();		$nullDate = $db->getNullDate();		$now = JFactory::getDate();		$query = $db->getQuery(true)			->select('*')			->from('#__banners')			->where($db->quote($now) . ' >= ' . $db->quote('reset'))			->where($db->quoteName('reset') . ' != ' . $db->quote($nullDate) . ' AND ' . $db->quoteName('reset') . '!=NULL')			->where('(' . $db->quoteName('checked_out') . ' = 0 OR ' . $db->quoteName('checked_out') . ' = ' . (int) $db->quote($user->id) . ')');		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return false;		}		JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');		foreach ($rows as $row)		{			$purchase_type = $row->purchase_type;			if ($purchase_type < 0 && $row->cid)			{				$client = JTable::getInstance('Client', 'BannersTable');				$client->load($row->cid);				$purchase_type = $client->purchase_type;			}			if ($purchase_type < 0)			{				$params = JComponentHelper::getParams('com_banners');				$purchase_type = $params->get('purchase_type');			}			switch($purchase_type)			{				case 1:					$reset = $nullDate;					break;				case 2:					$date = JFactory::getDate('+1 year '.date('Y-m-d', strtotime('now')));					$reset = $db->quote($date->toSql());					break;				case 3:					$date = JFactory::getDate('+1 month '.date('Y-m-d', strtotime('now')));					$reset = $db->quote($date->toSql());					break;				case 4:					$date = JFactory::getDate('+7 day '.date('Y-m-d', strtotime('now')));					$reset = $db->quote($date->toSql());					break;				case 5:					$date = JFactory::getDate('+1 day '.date('Y-m-d', strtotime('now')));					$reset = $db->quote($date->toSql());					break;			}			// Update the row ordering field.			$query->clear()				->update($db->quoteName('#__banners'))				->set($db->quoteName('reset') . ' = ' . $db->quote($reset))				->set($db->quoteName('impmade') . ' = ' . $db->quote(0))				->set($db->quoteName('clicks') . ' = ' . $db->quote(0))				->where($db->quoteName('id') . ' = ' . $db->quote($row->id));			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JError::raiseWarning(500, $db->getMessage());				return false;			}		}		return true;	}	public static function getClientOptions()	{		$options = array();		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('id As value, name As text')			->from('#__banner_clients AS a')			->order('a.name');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Merge any additional options in the XML definition.		//$options = array_merge(parent::getOptions(), $options);		array_unshift($options, JHtml::_('select.option', '0', JText::_('COM_BANNERS_NO_CLIENT')));		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Pages class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiPages extends JMediawikiObject{	/**     * Method to edit a page.	 *	 * @param   string  $title         Page title.	 * @param   int     $section       Section number.	 * @param   string  $sectiontitle  The title for a new section.	 * @param   string  $text          Page content.	 * @param   string  $summary       Title of the page you want to delete.     *     * @return  object     *     * @since   12.3     */	public function editPage($title, $section = null, $sectiontitle = null, $text = null, $summary = null)	{		// Get the token.		$token = $this->getToken($title, 'edit');		// Build the request path.		$path = '?action=edit';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'section' => $section,			'sectiontitle' => $section,			'text' => $text,			'summary' => $summary		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to delete a page.	 *	 * @param   string  $title      Title of the page you want to delete.	 * @param   string  $reason     Reason for the deletion.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlis.	 * @param   string  $oldimage   The name of the old image to delete.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deletePageByName($title, $reason = null, $watchlist = null, $oldimage = null)	{		// Get the token.		$token = $this->getToken($title, 'delete');		// Build the request path.		$path = '?action=delete';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'reason' => $reason,			'watchlist' => $watchlist,			'oldimage' => $oldimage		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to delete a page.	 *	 * @param   string  $pageid     Page ID of the page you want to delete.	 * @param   string  $reason     Reason for the deletion.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlis.	 * @param   string  $oldimage   The name of the old image to delete.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deletePageByID($pageid,  $reason = null, $watchlist = null, $oldimage = null)	{		// Get the token.		$token = $this->getToken($pageid, 'delete');		// Build the request path.		$path = '?action=delete';		// Build the request data.		$data = array(			'pageid' => $pageid,			'token' => $token,			'reason' => $reason,			'watchlist' => $watchlist,			'oldimage' => $oldimage		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to restore certain revisions of a deleted page.	 *	 * @param   string  $title      Title of the page you want to restore.	 * @param   string  $reason     Reason for restoring (optional).	 * @param   string  $timestamp  Timestamps of the revisions to restore.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function undeletePage($title, $reason = null, $timestamp = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'undelete');		// Build the request path.		$path = '?action=undelete';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'reason' => $reason,			'timestamp' => $timestamp,			'watchlist' => $watchlist,		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to move a page.	 *	 * @param   string   $from            Title of the page you want to move.	 * @param   string   $to              Title you want to rename the page to.	 * @param   string   $reason          Reason for the move (optional).	 * @param   string   $movetalk        Move the talk page, if it exists.	 * @param   string   $movesubpages    Move subpages, if applicable.	 * @param   boolean  $noredirect      Don't create a redirect.	 * @param   string   $watchlist       Unconditionally add or remove the page from your watchlist.	 * @param   boolean  $ignorewarnings  Ignore any warnings.     *     * @return  object     *     * @since   12.3     */	public function movePageByName($from, $to, $reason = null, $movetalk = null, $movesubpages = null, $noredirect = null,		$watchlist =null, $ignorewarnings = null)	{		// Get the token.		$token = $this->getToken($from, 'move');		// Build the request path.		$path = '?action=move';		// Build the request data.		$data = array(			'from' => $from,			'to' => $reason,			'token' => $token,			'reason' => $reason,			'movetalk' => $movetalk,			'movesubpages' => $movesubpages,			'noredirect' => $noredirect,			'watchlist' => $watchlist,			'ignorewarnings' => $ignorewarnings		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to move a page.	 *	 * @param   int      $fromid          Page ID of the page you want to move.	 * @param   string   $to              Title you want to rename the page to.	 * @param   string   $reason          Reason for the move (optional).	 * @param   string   $movetalk        Move the talk page, if it exists.	 * @param   string   $movesubpages    Move subpages, if applicable.	 * @param   boolean  $noredirect      Don't create a redirect.	 * @param   string   $watchlist       Unconditionally add or remove the page from your watchlist.	 * @param   boolean  $ignorewarnings  Ignore any warnings.	 *	 * @return  object	 *	 * @since   12.3	 */	public function movePageByID($fromid, $to, $reason = null, $movetalk = null, $movesubpages = null, $noredirect = null,		$watchlist =null, $ignorewarnings = null)	{		// Get the token.		$token = $this->getToken($fromid, 'move');		// Build the request path.		$path = '?action=move';		// Build the request data.		$data = array(			'fromid' => $fromid,			'to' => $reason,			'token' => $token,			'reason' => $reason,			'movetalk' => $movetalk,			'movesubpages' => $movesubpages,			'noredirect' => $noredirect,			'watchlist' => $watchlist,			'ignorewarnings' => $ignorewarnings		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to undo the last edit to the page.	 *	 * @param   string  $title      Title of the page you want to rollback.	 * @param   string  $user       Name of the user whose edits are to be rolled back.	 * @param   string  $summary    Custom edit summary. If not set, default summary will be used.	 * @param   string  $markbot    Mark the reverted edits and the revert as bot edits.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function rollback($title, $user, $summary = null, $markbot = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'rollback');		// Build the request path.		$path = '?action=rollback';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'user' => $user,			'expiry' => $summary,			'markbot' => $markbot,			'watchlist' => $watchlist		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to change the protection level of a page.	 *	 * @param   string  $title        Title of the page you want to (un)protect.	 * @param   string  $protections  Pipe-separated list of protection levels.	 * @param   string  $expiry       Expiry timestamps.	 * @param   string  $reason       Reason for (un)protecting (optional).	 * @param   string  $cascade      Enable cascading protection.	 * @param   string  $watchlist    Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function changeProtection($title, $protections, $expiry = null, $reason = null, $cascade = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'unblock');		// Build the request path.		$path = '?action=protect';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'protections' => $protections,			'expiry' => $expiry,			'reason' => $reason,			'cascade' => $cascade,			'watchlist' => $watchlist		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to get basic page information.     *     * @param   array    $titles      Page titles to retrieve info.     * @param   array    $inprop      Which additional properties to get.     * @param   array    $intoken     Request a token to perform a data-modifying action on a page     * @param   boolean  $incontinue  When more results are available, use this to continue.     *     * @return  object     *     * @since   12.3     */	public function getPageInfo(array $titles, array $inprop = null, array $intoken = null, $incontinue = null)	{		// Build the request		$path = '?action=query&prop=info';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($inprop))		{			$path .= '&inprop=' . $this->buildParameter($inprop);		}		if (isset($intoken))		{			$path .= '&intoken=' . $this->buildParameter($intoken);		}		if ($incontinue)		{			$path .= '&incontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get various properties defined in the page content.     *     * @param   array    $titles      Page titles to retrieve properties.     * @param   boolean  $ppcontinue  When more results are available, use this to continue.     * @param   string   $ppprop      Page prop to look on the page for.     *     * @return  object     *     * @since   12.3     */	public function getPageProperties(array $titles, $ppcontinue = null, $ppprop = null)	{		// Build the request		$path = '?action=query&prop=pageprops';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if ($ppcontinue)		{			$path .= '&ppcontinue=';		}		if (isset($ppprop))		{			$path .= '&ppprop=' . $ppprop;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get a list of revisions.     *	 * @param   array    $titles   Page titles to retrieve revisions.	 * @param   array    $rvprop   Which properties to get for each revision.	 * @param   boolean  $rvparse  Parse revision content.	 * @param   int      $rvlimit  Limit how many revisions will be returned.	 *     * @return  object     *     * @since   12.3     */	public function getRevisions(array $titles, array $rvprop = null, $rvparse = null, $rvlimit = null)	{		// Build the request		$path = '?action=query&prop=revisions';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($rvprop))		{			$path .= '&rvprop=' . $this->buildParameter($rvprop);		}		if ($rvparse)		{			$path .= '&rvparse=';		}		if (isset($rvlimit))		{			$path .= '&rvlimit=' . $rvlimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all page templates from the given page.     *     * @param   array    $titles       Page titles to retrieve templates.     * @param   array    $tlnamespace  Show templates in this namespace(s) only.     * @param   integer  $tllimit      How many templates to return.     * @param   boolean  $tlcontinue   When more results are available, use this to continue.     * @param   string   $tltemplates  Only list these templates.     * @param   string   $tldir        The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getPageTemplates(array $titles, array $tlnamespace = null, $tllimit = null, $tlcontinue = null, $tltemplates = null, $tldir = null)	{		// Build the request.		$path = '?action=query&prop=templates';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($tlnamespace))		{			$path .= '&tlnamespace=' . $this->buildParameter($tlnamespace);		}		if (isset($tllimit))		{			$path .= '&tllimit=' . $tllimit;		}		if ($tlcontinue)		{			$path .= '&tlcontinue=';		}		if (isset($tltemplates))		{			$path .= '&tltemplates=' . $tltemplates;		}		if (isset($tldir))		{			$path .= '&tldir=' . $tldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all pages that link to the given page.     *     * @param   string   $bltitle           Title to search.     * @param   integer  $blpageid          Pageid to search.     * @param   boolean  $blcontinue        When more results are available, use this to continue.     * @param   array    $blnamespace       The namespace to enumerate.     * @param   string   $blfilterredirect  How to filter for redirects..     * @param   integer  $bllimit           How many total pages to return.     * @param   boolean  $blredirect        If linking page is a redirect, find all pages that link to that redirect as well.     *     * @return  object     *     * @since   12.3     */	public function getBackLinks($bltitle, $blpageid = null, $blcontinue = null, array $blnamespace = null, $blfilterredirect = null,		$bllimit = null, $blredirect = null)	{		// Build the request.		$path = '?action=query&list=backlinks';		if (isset($bltitle))		{			$path .= '&bltitle=' . $bltitle;		}		if (isset($blpageid))		{			$path .= '&blpageid=' . $blpageid;		}		if ($blcontinue)		{			$path .= '&blcontinue=';		}		if (isset($blnamespace))		{			$path .= '&blnamespace=' . $this->buildParameter($blnamespace);		}		if (isset($blfilterredirect))		{			$path .= '&blfilterredirect=' . $blfilterredirect;		}		if (isset($bllimit))		{			$path .= '&bllimit=' . $bllimit;		}		if ($blredirect)		{			$path .= '&blredirect=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all pages that link to the given interwiki link.     *     * @param   string   $iwbltitle     Interwiki link to search for. Must be used with iwblprefix.     * @param   string   $iwblprefix    Prefix for the interwiki.     * @param   boolean  $iwblcontinue  When more results are available, use this to continue.     * @param   integer  $iwbllimit     How many total pages to return.     * @param   array    $iwblprop      Which properties to get.     *     * @return  object     *     * @since   12.3     */	public function getIWBackLinks($iwbltitle, $iwblprefix = null, $iwblcontinue = null, $iwbllimit = null, array $iwblprop = null)	{		// Build the request		$path = '?action=query&list=iwbacklinks';		if (isset($iwbltitle))		{			$path .= '&iwbltitle=' . $iwbltitle;		}		if (isset($iwblprefix))		{			$path .= '&iwblprefix=' . $iwblprefix;		}		if ($iwblcontinue)		{			$path .= '&iwblcontinue=';		}		if (isset($iwbllimit))		{			$path .= '&bllimit=' . $iwbllimit;		}		if (isset($iwblprop))		{			$path .= '&iwblprop=' . $this->buildParameter($iwblprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**	 * Method to get access token.	 *	 * @param   string  $user     The User to get token.	 * @param   string  $intoken  The type of token.	 *	 * @return  object	 *	 * @since   12.1	 */	public function getToken($user, $intoken)	{		// Build the request path.		$path = '?action=query&prop=info&intoken=' . $intoken . '&titles=User:' . $user;		// Send the request.		$response = $this->client->post($this->fetchUrl($path), null);		return (string) $this->validateResponse($response)->query->pages->page[$intoken . 'token'];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a weblink. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblink extends JViewLegacy{	protected $state;	protected $item;	protected $form;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		// Since we don't track these assets at the item level, use the category id.		$canDo		= WeblinksHelper::getActions($this->item->catid, 0);		JToolbarHelper::title(JText::_('COM_WEBLINKS_MANAGER_WEBLINK'), 'weblinks.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit')||(count($user->getAuthorisedCategories('com_weblinks', 'core.create')))))		{			JToolbarHelper::apply('weblink.apply');			JToolbarHelper::save('weblink.save');		}		if (!$checkedOut && (count($user->getAuthorisedCategories('com_weblinks', 'core.create')))){			JToolbarHelper::save2new('weblink.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && (count($user->getAuthorisedCategories('com_weblinks', 'core.create')) > 0))		{			JToolbarHelper::save2copy('weblink.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('weblink.cancel');		}		else		{			JToolbarHelper::cancel('weblink.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_WEBLINKS_LINKS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages Component Messages Model * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesModelMessages extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'message_id', 'a.id',				'subject', 'a.subject',				'state', 'a.state',				'user_id_from', 'a.user_id_from',				'user_id_to', 'a.user_id_to',				'date_time', 'a.date_time',				'priority', 'a.priority',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		// List state information.		parent::populateState('a.date_time', 'desc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.state');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.*, ' .					'u.name AS user_from'			)		);		$query->from('#__messages AS a');		// Join over the users for message owner.		$query->join('INNER', '#__users AS u ON u.id = a.user_id_from')			->where('a.user_id_to = ' . (int) $user->get('id'));		// Filter by published state.		$state = $this->getState('filter.state');		if (is_numeric($state))		{			$query->where('a.state = ' . (int) $state);		}		elseif ($state === '')		{			$query->where('(a.state IN (0, 1))');		}		// Filter by search in subject or message.		$search = $this->getState('filter.search');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%', false);			$query->where('a.subject LIKE ' . $search . ' OR a.message LIKE ' . $search);		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.date_time')) . ' ' . $db->escape($this->getState('list.direction', 'DESC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.languagefilter * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('MenusHelper', JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Joomla! Language Filter Plugin * * @package     Joomla.Plugin * @subpackage  System.languagefilter * @since       1.6 */class PlgSystemLanguageFilter extends JPlugin{	protected static $mode_sef;	protected static $tag;	protected static $sefs;	protected static $lang_codes;	protected static $default_lang;	protected static $default_sef;	protected static $cookie;	private static $_user_lang_code;	public function __construct(&$subject, $config)	{		parent::__construct($subject, $config);		// Ensure that constructor is called one time		self::$cookie = SID == '';		if (!self::$default_lang)		{			$app = JFactory::getApplication();			$router = $app->getRouter();			if ($app->isSite())			{				// setup language data				self::$mode_sef 	= ($router->getMode() == JROUTER_MODE_SEF) ? true : false;				self::$sefs 		= JLanguageHelper::getLanguages('sef');				self::$lang_codes 	= JLanguageHelper::getLanguages('lang_code');				self::$default_lang = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');				self::$default_sef 	= self::$lang_codes[self::$default_lang]->sef;				$user = JFactory::getUser();				$levels = $user->getAuthorisedViewLevels();				foreach (self::$sefs as $sef => &$language)				{					if (isset($language->access) && $language->access && !in_array($language->access, $levels))					{						unset(self::$sefs[$sef]);					}				}				$app->setLanguageFilter(true);				jimport('joomla.environment.uri');				$uri = JURI::getInstance();				if (self::$mode_sef)				{					// Get the route path from the request.					$path = JString::substr($uri->toString(), JString::strlen($uri->base()));					// Apache mod_rewrite is Off					$path = JFactory::getConfig()->get('sef_rewrite') ? $path : JString::substr($path, 10);					// Trim any spaces or slashes from the ends of the path and explode into segments.					$path  = JString::trim($path, '/ ');					$parts = explode('/', $path);					// The language segment is always at the beginning of the route path if it exists.					$sef = $uri->getVar('lang');					if (!empty($parts) && empty($sef))					{						$sef = reset($parts);					}				}				else				{					$sef = $uri->getVar('lang');				}				if (isset(self::$sefs[$sef]))				{					$lang_code = self::$sefs[$sef]->lang_code;					// Create a cookie					$conf = JFactory::getConfig();					$cookie_domain 	= $conf->get('config.cookie_domain', '');					$cookie_path 	= $conf->get('config.cookie_path', '/');					setcookie(JApplication::getHash('language'), $lang_code, $this->getLangCookieTime(), $cookie_path, $cookie_domain);					$app->input->cookie->set(JApplication::getHash('language'), $lang_code);					// set the request var					$app->input->set('language', $lang_code);				}			}			parent::__construct($subject, $config);			// 	Detect browser feature			if ($app->isSite())			{				$app->setDetectBrowser($this->params->get('detect_browser', '1') == '1');			}		}	}	public function onAfterInitialise()	{		$app = JFactory::getApplication();		$app->item_associations = $this->params->get('item_associations', 0);		if ($app->isSite())		{			self::$tag = JFactory::getLanguage()->getTag();			$router = $app->getRouter();			// attach build rules for language SEF			$router->attachBuildRule(array($this, 'buildRule'));			// attach parse rules for language SEF			$router->attachParseRule(array($this, 'parseRule'));			// Adding custom site name			$languages = JLanguageHelper::getLanguages('lang_code');			if (isset($languages[self::$tag]) && $languages[self::$tag]->sitename)			{				JFactory::getConfig()->set('sitename', $languages[self::$tag]->sitename);			}		}	}	public function buildRule(&$router, &$uri)	{		$sef = $uri->getVar('lang');		if (empty($sef))		{			$sef = self::$lang_codes[self::$tag]->sef;		}		elseif (!isset(self::$sefs[$sef]))		{			$sef = self::$default_sef;		}		$Itemid = $uri->getVar('Itemid');		if (!is_null($Itemid))		{			if ($item = JFactory::getApplication()->getMenu()->getItem($Itemid))			{				if ($item->home && $uri->getVar('option') != 'com_search')				{					$link = $item->link;					$parts = JString::parse_url($link);					if (isset ($parts['query']) && strpos($parts['query'], '&amp;'))					{						$parts['query'] = str_replace('&amp;', '&', $parts['query']);					}					parse_str($parts['query'], $vars);					// test if the url contains same vars as in menu link					$test = true;					foreach ($uri->getQuery(true) as $key => $value)					{						if (!in_array($key, array('format', 'Itemid', 'lang')) && !(isset($vars[$key]) && $vars[$key] == $value))						{							$test = false;							break;						}					}					if ($test)					{						foreach ($vars as $key => $value)						{							$uri->delVar($key);						}						$uri->delVar('Itemid');					}				}			}			else			{				$uri->delVar('Itemid');			}		}		if (self::$mode_sef)		{			$uri->delVar('lang');			if (				$this->params->get('remove_default_prefix', 0) == 0				|| $sef != self::$default_sef				|| $sef != self::$lang_codes[self::$tag]->sef				|| $this->params->get('detect_browser', 1) && JLanguageHelper::detectLanguage() != self::$tag && !self::$cookie			)			{				$uri->setPath($uri->getPath().'/'.$sef.'/');			}			else			{				$uri->setPath($uri->getPath());			}		}		else		{			$uri->setVar('lang', $sef);		}	}	public function parseRule(&$router, &$uri)	{		$app = JFactory::getApplication();		$array = array();		$lang_code = $app->input->cookie->getString(JApplication::getHash('language'));		// No cookie - let's try to detect browser language or use site default		if (!$lang_code)		{			if ($this->params->get('detect_browser', 1))			{				$lang_code = JLanguageHelper::detectLanguage();			}			else			{				$lang_code = self::$default_lang;			}		}		if (self::$mode_sef)		{			$path = $uri->getPath();			$parts = explode('/', $path);			$sef = $parts[0];			// Redirect only if not in post			if (!empty($lang_code) && ($app->input->getMethod() != "POST" || count($app->input->post) == 0))			{				if ($this->params->get('remove_default_prefix', 0) == 0)				{					// redirect if sef does not exists					if (!isset(self::$sefs[$sef]))					{						// Use the current language sef or the default one						$sef = isset(self::$lang_codes[$lang_code]) ? self::$lang_codes[$lang_code]->sef : self::$default_sef;						$uri->setPath($sef . '/' . $path);						if ($app->getCfg('sef_rewrite'))						{							$app->redirect($uri->base().$uri->toString(array('path', 'query', 'fragment')));						}						else						{							$path = $uri->toString(array('path', 'query', 'fragment'));							$app->redirect($uri->base().'index.php'.($path ? ('/' . $path) : ''));						}					}				}				else				{					// redirect if sef does not exists and language is not the default one					if (!isset(self::$sefs[$sef]) && $lang_code != self::$default_lang)					{						$sef = isset(self::$lang_codes[$lang_code]) ? self::$lang_codes[$lang_code]->sef : self::$default_sef;						$uri->setPath($sef . '/' . $path);						if ($app->getCfg('sef_rewrite'))						{							$app->redirect($uri->base().$uri->toString(array('path', 'query', 'fragment')));						}						else						{							$path = $uri->toString(array('path', 'query', 'fragment'));							$app->redirect($uri->base().'index.php'.($path ? ('/' . $path) : ''));						}					}					// redirect if sef is the default one					elseif (isset(self::$sefs[$sef]) &&						self::$default_lang == self::$sefs[$sef]->lang_code &&						(!$this->params->get('detect_browser', 1) || JLanguageHelper::detectLanguage() == self::$tag || self::$cookie)					)					{						array_shift($parts);						$uri->setPath(implode('/', $parts));						if ($app->getCfg('sef_rewrite'))						{							$app->redirect($uri->base().$uri->toString(array('path', 'query', 'fragment')));						}						else						{							$path = $uri->toString(array('path', 'query', 'fragment'));							$app->redirect($uri->base().'index.php'.($path ? ('/' . $path) : ''));						}					}				}			}			$lang_code = isset(self::$sefs[$sef]) ? self::$sefs[$sef]->lang_code : '';			if ($lang_code && JLanguage::exists($lang_code))			{				array_shift($parts);				$uri->setPath(implode('/', $parts));			}		}		else		{			$sef = $uri->getVar('lang');			if (!isset(self::$sefs[$sef]))			{				$sef = isset(self::$lang_codes[$lang_code]) ? self::$lang_codes[$lang_code]->sef : self::$default_sef;				$uri->setVar('lang', $sef);				if ($app->input->getMethod() != "POST" || count($app->input->post) == 0)				{					$app->redirect(JURI::base(true).'/index.php?'.$uri->getQuery());				}			}		}		$array = array('lang' => $sef);		return $array;	}	/**	 * before store user method	 *	 * Method is called before user data is stored in the database	 *	 * @param   array  $user	Holds the old user data.	 * @param   boolean		$isnew	True if a new user is stored.	 * @param   array  $new	Holds the new user data.	 *	 * @return  void	 * @since   1.6	 */	public function onUserBeforeSave($user, $isnew, $new)	{		if ($this->params->get('automatic_change', '1') == '1' && key_exists('params', $user))		{			$registry = new JRegistry;			$registry->loadString($user['params']);			self::$_user_lang_code = $registry->get('language');			if (empty(self::$_user_lang_code))			{				self::$_user_lang_code = self::$default_lang;			}		}	}	/**	 * after store user method	 *	 * Method is called after user data is stored in the database	 *	 * @param   array  $user		Holds the new user data.	 * @param   boolean		$isnew		True if a new user is stored.	 * @param   boolean		$success	True if user was succesfully stored in the database.	 * @param   string  $msg		Message.	 *	 * @return  void	 * @since   1.6	 */	public function onUserAfterSave($user, $isnew, $success, $msg)	{		if ($this->params->get('automatic_change', '1') == '1' && key_exists('params', $user) && $success)		{			$registry = new JRegistry;			$registry->loadString($user['params']);			$lang_code = $registry->get('language');			if (empty($lang_code))			{				$lang_code = self::$default_lang;			}			$app = JFactory::getApplication();			if ($lang_code == self::$_user_lang_code || !isset(self::$lang_codes[$lang_code]))			{				if ($app->isSite())				{					$app->setUserState('com_users.edit.profile.redirect', null);				}			}			else			{				if ($app->isSite())				{					$app->setUserState('com_users.edit.profile.redirect', 'index.php?Itemid='.$app->getMenu()->getDefault($lang_code)->id.'&lang='.$lang_codes[$lang_code]->sef);					self::$tag = $lang_code;					// Create a cookie					$conf = JFactory::getConfig();					$cookie_domain 	= $conf->get('config.cookie_domain', '');					$cookie_path 	= $conf->get('config.cookie_path', '/');					setcookie(JApplication::getHash('language'), $lang_code, $this->getLangCookieTime(), $cookie_path, $cookie_domain);				}			}		}	}	/**	 * This method should handle any login logic and report back to the subject	 *	 * @param   array  $user		Holds the user data	 * @param   array  $options	Array holding options (remember, autoregister, group)	 *	 * @return  boolean  True on success	 * @since   1.5	 */	public function onUserLogin($user, $options = array())	{		$app  = JFactory::getApplication();		$menu = $app->getMenu();		if ($app->isSite() && $this->params->get('automatic_change', 1))		{			// Load associations			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$active = $menu->getActive();				if ($active)				{					$associations = MenusHelper::getAssociations($active->id);				}			}			$lang_code = $user['language'];			if (empty($lang_code))			{				$lang_code = self::$default_lang;			}			if ($lang_code != self::$tag)			{				// Change language				self::$tag = $lang_code;				// Create a cookie				$conf = JFactory::getConfig();				$cookie_domain 	= $conf->get('config.cookie_domain', '');				$cookie_path 	= $conf->get('config.cookie_path', '/');				setcookie(JApplication::getHash('language'), $lang_code, $this->getLangCookieTime(), $cookie_path, $cookie_domain);				// Change the language code				JFactory::getLanguage()->setLanguage($lang_code);				// Change the redirect (language have changed)				if (isset($associations[$lang_code]) && $menu->getItem($associations[$lang_code]))				{					$itemid = $associations[$lang_code];					$app->setUserState('users.login.form.return', 'index.php?&Itemid='.$itemid);				}				else				{					$itemid = isset($homes[$lang_code]) ? $homes[$lang_code]->id : $homes['*']->id;					$app->setUserState('users.login.form.return', 'index.php?&Itemid='.$itemid);				}			}		}	}	/**	 * This method adds alternate meta tags for associated menu items	 *	 * @return  nothing	 * @since   1.7	 */	public function onAfterDispatch()	{		$app = JFactory::getApplication();		$doc = JFactory::getDocument();		$menu = $app->getMenu();		$server = JURI::getInstance()->toString(array('scheme', 'host', 'port'));		$option = $app->input->get('option');		$eName = JString::ucfirst(JString::str_ireplace('com_', '', $option));		if ($app->isSite() && $this->params->get('alternate_meta') && $doc->getType() == 'html')		{			// Get active menu item			$active = $menu->getActive();			// load menu associations			if ($active)			{				// Get menu item link				if ($app->getCfg('sef'))				{					$active_link = JRoute::_('index.php?Itemid='.$active->id, false);				}				else				{					$active_link = JRoute::_($active->link.'&Itemid='.$active->id, false);				}				if ($active_link == JUri::base(true).'/')				{					$active_link .= 'index.php';				}				// Get current link				$current_link = JURI::getInstance()->toString(array('path', 'query'));				if ($current_link == JUri::base(true).'/')				{					$current_link .= 'index.php';				}				// Check the exact menu item's URL				if ($active_link == $current_link)				{					$associations = MenusHelper::getAssociations($active->id);					unset($associations[$active->language]);				}			}			// load component associations			$cName = JString::ucfirst($eName.'HelperAssociation');			JLoader::register($cName, JPath::clean(JPATH_COMPONENT_SITE . '/helpers/association.php'));			if (class_exists($cName) && is_callable(array($cName, 'getAssociations')))			{				$cassociations = call_user_func(array($cName, 'getAssociations'));				$lang_code = $app->input->cookie->getString(JApplication::getHash('language'));				// No cookie - let's try to detect browser language or use site default				if (!$lang_code)				{					if ($this->params->get('detect_browser', 1)){						$lang_code = JLanguageHelper::detectLanguage();					} else {						$lang_code = self::$default_lang;					}				}				unset($cassociations[$lang_code]);			}			// handle the default associations			if ((!empty($associations) || !empty($cassociations)) && $this->params->get('item_associations'))			{				foreach (JLanguageHelper::getLanguages() as $language)				{					if (!JLanguage::exists($language->lang_code))					{						continue;					}					if (isset($cassociations[$language->lang_code]))					{						$link = JRoute::_($cassociations[$language->lang_code].'&lang='.$language->sef);						$doc->addHeadLink($server . $link, 'alternate', 'rel', array('hreflang' => $language->lang_code));					}					elseif (isset($associations[$language->lang_code]))					{						$item = $menu->getItem($associations[$language->lang_code]);						if ($item)						{							if ($app->getCfg('sef'))							{								$link = JRoute::_('index.php?Itemid='.$item->id.'&lang='.$language->sef);							}							else							{								$link = JRoute::_($item->link.'&Itemid='.$item->id.'&lang='.$language->sef);							}							$doc->addHeadLink($server . $link, 'alternate', 'rel', array('hreflang' => $language->lang_code));						}					}				}			}			// link to the home page of each language			elseif ($active && $active->home)			{				foreach (JLanguageHelper::getLanguages() as $language)				{					if (!JLanguage::exists($language->lang_code))					{						continue;					}					$item = $menu->getDefault($language->lang_code);					if ($item && $item->language != $active->language && $item->language != '*')					{						if ($app->getCfg('sef'))						{							$link = JRoute::_('index.php?Itemid='.$item->id.'&lang='.$language->sef);						}						else						{							$link = JRoute::_($item->link.'&Itemid='.$item->id.'&lang='.$language->sef);						}						$doc->addHeadLink($server . $link, 'alternate', 'rel', array('hreflang' => $language->lang_code));					}				}			}		}	}	/**	 * Getting the Language Cookie settings	 *	 * @return  string  The cookie time.	 *	 * @since   3.0.4	 */	private function getLangCookieTime()	{		if ($this->params->get('lang_cookie', 1) == 1)		{			$lang_cookie = time() + 365 * 86400;		}		else		{			$lang_cookie = 0;		}		return $lang_cookie;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><div class="registration<?php echo $this->pageclass_sfx?>"><?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1><?php echo $this->escape($this->params->get('page_heading')); ?></h1>	</div><?php endif; ?>	<form id="member-registration" action="<?php echo JRoute::_('index.php?option=com_users&task=registration.register'); ?>" method="post" class="form-validate form-horizontal" enctype="multipart/form-data"><?php foreach ($this->form->getFieldsets() as $fieldset): // Iterate through the form fieldsets and display each one.?>	<?php $fields = $this->form->getFieldset($fieldset->name);?>	<?php if (count($fields)):?>		<fieldset>		<?php if (isset($fieldset->label)):// If the fieldset has a label set, display it as the legend.		?>			<legend><?php echo JText::_($fieldset->label);?></legend>		<?php endif;?>		<?php foreach ($fields as $field) :// Iterate through the fields in the set and display them.?>			<?php if ($field->hidden):// If the field is hidden, just display the input.?>				<?php echo $field->input;?>			<?php else:?>				<div class="control-group">					<div class="control-label">					<?php echo $field->label; ?>					<?php if (!$field->required && $field->type != 'Spacer') : ?>						<span class="optional"><?php echo JText::_('COM_USERS_OPTIONAL');?></span>					<?php endif; ?>					</div>					<div class="controls">						<?php echo $field->input;?>					</div>				</div>			<?php endif;?>		<?php endforeach;?>		</fieldset>	<?php endif;?><?php endforeach;?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><?php echo JText::_('JREGISTER');?></button>			<a class="btn" href="<?php echo JRoute::_('');?>" title="<?php echo JText::_('JCANCEL');?>"><?php echo JText::_('JCANCEL');?></a>			<input type="hidden" name="option" value="com_users" />			<input type="hidden" name="task" value="registration.register" />			<?php echo JHtml::_('form.token');?>		</div>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;$blockPosition = $displayData['params']->get('info_block_position', 0);?>	<dl class="article-info  muted">		<?php if ($displayData['position'] == 'above' && ($blockPosition == 0 || $blockPosition == 2)				|| $displayData['position'] == 'below' && ($blockPosition == 1)				) : ?>			<dt class="article-info-term">				<?php // TODO: implement info_block_show_title param to hide article info title ?>				<?php if ($displayData['params']->get('info_block_show_title', 1)) : ?>					<?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?>				<?php endif; ?>			</dt>			<?php if ($displayData['params']->get('show_author') && !empty($displayData['item']->author )) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.author', $displayData); ?>			<?php endif; ?>			<?php if ($displayData['params']->get('show_parent_category') && !empty($displayData['item']->parent_slug)) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.parent_category', $displayData); ?>			<?php endif; ?>			<?php if ($displayData['params']->get('show_category')) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.category', $displayData); ?>			<?php endif; ?>			<?php if ($displayData['params']->get('show_publish_date')) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.publish_date', $displayData); ?>			<?php endif; ?>		<?php endif; ?>		<?php if ($displayData['position'] == 'above' && ($blockPosition == 0)				|| $displayData['position'] == 'below' && ($blockPosition == 1 || $blockPosition == 2)				) : ?>			<?php if ($displayData['params']->get('show_create_date')) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.create_date', $displayData); ?>			<?php endif; ?>			<?php if ($displayData['params']->get('show_modify_date')) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.modify_date', $displayData); ?>			<?php endif; ?>			<?php if ($displayData['params']->get('show_hits')) : ?>				<?php echo JLayoutHelper::render('joomla.content.info_block.hits', $displayData); ?>			<?php endif; ?>		<?php endif; ?>	</dl>
<?php/** * @package     Joomla.Platform * @subpackage  Plugin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Plugin helper class * * @package     Joomla.Platform * @subpackage  Plugin * @since       11.1 */abstract class JPluginHelper{	/**	 * A persistent cache of the loaded plugins.	 *	 * @var    array	 * @since  11.3	 */	protected static $plugins = null;	/**	 * Get the path to a layout from a Plugin	 *	 * @param   string  $type    Plugin type	 * @param   string  $name    Plugin name	 * @param   string  $layout  Layout name	 *	 * @return  string  Layout path	 *	 * @since   12.2	 */	public static function getLayoutPath($type, $name, $layout = 'default')	{		$template = JFactory::getApplication()->getTemplate();		$defaultLayout = $layout;		if (strpos($layout, ':') !== false)		{			// Get the template and file name from the string			$temp = explode(':', $layout);			$template = ($temp[0] == '_') ? $template : $temp[0];			$layout = $temp[1];			$defaultLayout = ($temp[1]) ? $temp[1] : 'default';		}		// Build the template and base path for the layout		$tPath = JPATH_THEMES . '/' . $template . '/html/plg_' . $type . '_' . $name . '/' . $layout . '.php';		$bPath = JPATH_BASE . '/plugins/' . $type . '/' . $name . '/tmpl/' . $defaultLayout . '.php';		$dPath = JPATH_BASE . '/plugins/' . $type . '/' . $name . '/tmpl/default.php';		// If the template has a layout override use it		if (file_exists($tPath))		{			return $tPath;		}		elseif (file_exists($bPath))		{			return $bPath;		}		else		{			return $dPath;		}	}	/**	 * Get the plugin data of a specific type if no specific plugin is specified	 * otherwise only the specific plugin data is returned.	 *	 * @param   string  $type    The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string  $plugin  The plugin name.	 *	 * @return  mixed  An array of plugin data objects, or a plugin data object.	 *	 * @since   11.1	 */	public static function getPlugin($type, $plugin = null)	{		$result = array();		$plugins = self::_load();		// Find the correct plugin(s) to return.		if (!$plugin)		{			foreach ($plugins as $p)			{				// Is this the right plugin?				if ($p->type == $type)				{					$result[] = $p;				}			}		}		else		{			foreach ($plugins as $p)			{				// Is this plugin in the right group?				if ($p->type == $type && $p->name == $plugin)				{					$result = $p;					break;				}			}		}		return $result;	}	/**	 * Checks if a plugin is enabled.	 *	 * @param   string  $type    The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string  $plugin  The plugin name.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public static function isEnabled($type, $plugin = null)	{		$result = self::getPlugin($type, $plugin);		return (!empty($result));	}	/**	 * Loads all the plugin files for a particular type if no specific plugin is specified	 * otherwise only the specific plugin is loaded.	 *	 * @param   string            $type        The plugin type, relates to the sub-directory in the plugins directory.	 * @param   string            $plugin      The plugin name.	 * @param   boolean           $autocreate  Autocreate the plugin.	 * @param   JEventDispatcher  $dispatcher  Optionally allows the plugin to use a different dispatcher.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public static function importPlugin($type, $plugin = null, $autocreate = true, JEventDispatcher $dispatcher = null)	{		static $loaded = array();		// Check for the default args, if so we can optimise cheaply		$defaults = false;		if (is_null($plugin) && $autocreate == true && is_null($dispatcher))		{			$defaults = true;		}		if (!isset($loaded[$type]) || !$defaults)		{			$results = null;			// Load the plugins from the database.			$plugins = self::_load();			// Get the specified plugin(s).			for ($i = 0, $t = count($plugins); $i < $t; $i++)			{				if ($plugins[$i]->type == $type && ($plugin === null || $plugins[$i]->name == $plugin))				{					self::_import($plugins[$i], $autocreate, $dispatcher);					$results = true;				}			}			// Bail out early if we're not using default args			if (!$defaults)			{				return $results;			}			$loaded[$type] = $results;		}		return $loaded[$type];	}	/**	 * Loads the plugin file.	 *	 * @param   object            $plugin      The plugin.	 * @param   boolean           $autocreate  True to autocreate.	 * @param   JEventDispatcher  $dispatcher  Optionally allows the plugin to use a different dispatcher.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _import($plugin, $autocreate = true, JEventDispatcher $dispatcher = null)	{		static $paths = array();		$plugin->type = preg_replace('/[^A-Z0-9_\.-]/i', '', $plugin->type);		$plugin->name = preg_replace('/[^A-Z0-9_\.-]/i', '', $plugin->name);		$path = JPATH_PLUGINS . '/' . $plugin->type . '/' . $plugin->name . '/' . $plugin->name . '.php';		if (!isset($paths[$path]))		{			if (file_exists($path))			{				if (!isset($paths[$path]))				{					require_once $path;				}				$paths[$path] = true;				if ($autocreate)				{					// Makes sure we have an event dispatcher					if (!is_object($dispatcher))					{						$dispatcher = JEventDispatcher::getInstance();					}					$className = 'plg' . $plugin->type . $plugin->name;					if (class_exists($className))					{						// Load the plugin from the database.						if (!isset($plugin->params))						{							// Seems like this could just go bye bye completely							$plugin = self::getPlugin($plugin->type, $plugin->name);						}						// Instantiate and register the plugin.						new $className($dispatcher, (array) ($plugin));					}				}			}			else			{				$paths[$path] = false;			}		}	}	/**	 * Loads the published plugins.	 *	 * @return  array  An array of published plugins	 *	 * @since   11.1	 */	protected static function _load()	{		if (self::$plugins !== null)		{			return self::$plugins;		}		$user = JFactory::getUser();		$cache = JFactory::getCache('com_plugins', '');		$levels = implode(',', $user->getAuthorisedViewLevels());		if (!self::$plugins = $cache->get($levels))		{			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('folder AS type, element AS name, params')				->from('#__extensions')				->where('enabled >= 1')				->where('type =' . $db->quote('plugin'))				->where('state >= 0')				->where('access IN (' . $levels . ')')				->order('ordering');			self::$plugins = $db->setQuery($query)->loadObjectList();			$cache->store(self::$plugins, $levels);		}		return self::$plugins;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'templatestyleOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_TEMPLATES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('bootstrap.addSlide', 'templatestyleOptions', JText::_($label), 'collapse' . $i++);			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach;		echo JHtml::_('bootstrap.endSlide');	endforeach;echo JHtml::_('bootstrap.endAccordion');
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Overrides Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesModelOverrides extends JModelList{	/**	 * Constructor	 *	 * @param   	array	An optional associative array of configuration settings	 *	 * @return  void	 *	 * @since		2.5	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->filter_fields = array('key', 'text');	}	/**	 * Retrieves the overrides data	 *	 * @param   	boolean	True if all overrides shall be returned without considering pagination, defaults to false	 *	 * @return  array  	Array of objects containing the overrides of the override.ini file	 *	 * @since		2.5	 */	public function getOverrides($all = false)	{		// Get a storage key		$store = $this->getStoreId();		// Try to load the data from internal storage		if (!empty($this->cache[$store]))		{			return $this->cache[$store];		}		// Parse the override.ini file in oder to get the keys and strings		$filename = constant('JPATH_' . strtoupper($this->getState('filter.client'))) . '/language/overrides/' . $this->getState('filter.language') . '.override.ini';		$strings = LanguagesHelper::parseFile($filename);		// Consider the odering		if ($this->getState('list.ordering') == 'text')		{			if (strtoupper($this->getState('list.direction')) == 'DESC')			{				arsort($strings);			}			else			{				asort($strings);			}		}		else		{			if (strtoupper($this->getState('list.direction')) == 'DESC')			{				krsort($strings);			}			else			{				ksort($strings);			}		}		// Consider the pagination		if (!$all && $this->getState('list.limit') && $this->getTotal() > $this->getState('list.limit'))		{			$strings = array_slice($strings, $this->getStart(), $this->getState('list.limit'), true);		}		// Add the items to the internal cache		$this->cache[$store] = $strings;		return $this->cache[$store];	}	/**	 * Method to get the total number of overrides	 *	 * @return  int	The total number of overrides	 *	 * @since		2.5	 */	public function getTotal()	{		// Get a storage key		$store = $this->getStoreId('getTotal');		// Try to load the data from internal storage		if (!empty($this->cache[$store]))		{			return $this->cache[$store];		}		// Add the total to the internal cache		$this->cache[$store] = count($this->getOverrides(true));		return $this->cache[$store];	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   	string	An optional ordering field.	 * @param   	string	An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since		2.5	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		// Use default language of frontend for default filter		$default	= JComponentHelper::getParams('com_languages')->get('site').'0';		$old_language_client	= $app->getUserState('com_languages.overrides.filter.language_client', '');		$language_client			= $this->getUserStateFromRequest('com_languages.overrides.filter.language_client', 'filter_language_client', $default, 'cmd');		if ($old_language_client != $language_client)		{			$client		= substr($language_client, -1);			$language	= substr($language_client, 0, -1);		}		else		{			$client		= $app->getUserState('com_languages.overrides.filter.client', 0);			$language	= $app->getUserState('com_languages.overrides.filter.language', 'en-GB');		}		$this->setState('filter.language_client', $language.$client);		$this->setState('filter.client', $client ? 'administrator' : 'site');		$this->setState('filter.language', $language);		// Add filters to the session because they won't be stored there		// by 'getUserStateFromRequest' if they aren't in the current request		$app->setUserState('com_languages.overrides.filter.client', $client);		$app->setUserState('com_languages.overrides.filter.language', $language);		// List state information		parent::populateState('key', 'asc');	}	/**	 * Method to get all found languages of frontend and backend.	 *	 * The resulting array has entries of the following style:	 * <Language Tag>0|1 => <Language Name> - <Client Name>	 *	 * @return  array  Sorted associative array of languages	 *	 * @since		2.5	 */	public function getLanguages()	{		// Try to load the data from internal storage		if (!empty($this->cache['languages']))		{			return $this->cache['languages'];		}		// Get all languages of frontend and backend		$languages 				= array();		$site_languages 	= JLanguage::getKnownLanguages(JPATH_SITE);		$admin_languages	= JLanguage::getKnownLanguages(JPATH_ADMINISTRATOR);		// Create a single array of them		foreach ($site_languages as $tag => $language)		{			$languages[$tag.'0'] = JText::sprintf('COM_LANGUAGES_VIEW_OVERRIDES_LANGUAGES_BOX_ITEM', $language['name'], JText::_('JSITE'));		}		foreach ($admin_languages as $tag => $language)		{			$languages[$tag.'1'] = JText::sprintf('COM_LANGUAGES_VIEW_OVERRIDES_LANGUAGES_BOX_ITEM', $language['name'], JText::_('JADMINISTRATOR'));		}		// Sort it by language tag and by client after that		ksort($languages);		// Add the languages to the internal cache		$this->cache['languages'] = $languages;		return $this->cache['languages'];	}	/**	 * Method to delete one or more overrides	 *	 * @param   	array		Array of keys to delete	 *	 * @return  integer   	Number of successfully deleted overrides, boolean false if an error occured	 *	 * @since		2.5	 */	public function delete($cids)	{		// Check permissions first		if (!JFactory::getUser()->authorise('core.delete', 'com_languages'))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'));			return false;		}		jimport('joomla.filesystem.file');		require_once JPATH_COMPONENT.'/helpers/languages.php';		// Parse the override.ini file in oder to get the keys and strings		$filename = constant('JPATH_' . strtoupper($this->getState('filter.client'))) . '/language/overrides/' . $this->getState('filter.language') . '.override.ini';		$strings = LanguagesHelper::parseFile($filename);		// Unset strings that shall be deleted		foreach ($cids as $key)		{			if (isset($strings[$key]))			{				unset($strings[$key]);			}		}		foreach ($strings as $key => $string)		{			$strings[$key] = str_replace('"', '"_QQ_"', $string);		}		// Write override.ini file with the left strings		$registry = new JRegistry;		$registry->loadObject($strings);		$filename = constant('JPATH_' . strtoupper($this->getState('filter.client'))) . '/language/overrides/' . $this->getState('filter.language') . '.override.ini';		if (!JFile::write($filename, $registry->toString('INI')))		{			return false;		}		$this->cleanCache();		return count($cids);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_banners&view=clients'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_BANNERS_SEARCH_IN_TITLE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLIENT', 'name', $listDirn, $listOrder); ?>				</th>				<th class="width-30">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CONTACT', 'contact', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'state', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_ACTIVE', 'nbanners', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JText::_('COM_BANNERS_HEADING_METAKEYWORDS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_BANNERS_HEADING_PURCHASETYPE'); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'ordering');			$canCreate  = $user->authorise('core.create',     'com_banners');			$canEdit    = $user->authorise('core.edit',       'com_banners');			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_banners') && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'clients.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_banners&task=client.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>							<?php echo $this->escape($item->name); ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $item->contact;?>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'clients.', $canChange);?>				</td>				<td class="center">					<?php echo $item->nbanners; ?>				</td>				<td>					<?php echo $item->metakey; ?>				</td>				<td class="center">					<?php if ($item->purchase_type < 0):?>						<?php echo JText::sprintf('COM_BANNERS_DEFAULT', JText::_('COM_BANNERS_FIELD_VALUE_'.$this->state->params->get('purchase_type')));?>					<?php else:?>						<?php echo JText::_('COM_BANNERS_FIELD_VALUE_'.$item->purchase_type);?>					<?php endif;?>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to install additional languages for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallLanguages extends JControllerBase{	/**	 * Constructor.	 *	 * @since   3.1	 */	public function __construct()	{		parent::__construct();		// Overrides application config and set the configuration.php file so tokens and database works		JFactory::$config = null;		JFactory::getConfig(JPATH_SITE . '/configuration.php');		JFactory::$session = null;	}	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get array of selected languages		$lids = $this->input->get('cid', array(), 'array');		JArrayHelper::toInteger($lids, array());		// Get the languages model.		$model = new InstallationModelLanguages;		if (!$lids)		{			// No languages have been selected			$app->enqueueMessage(JText::_('INSTL_LANGUAGES_NO_LANGUAGE_SELECTED'));		}		else		{			// Install selected languages			$model->install($lids);		}		$r = new stdClass;		// Redirect to the page.		$r = new stdClass;		$r->view = 'defaultlanguage';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_LOCATION_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('locale') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$client			= $this->state->get('filter.client') == 'site' ? JText::_('JSITE') : JText::_('JADMINISTRATOR');$language		= $this->state->get('filter.language');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn		= $this->escape($this->state->get('list.direction')); ?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=overrides'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<div class="filter-search fltlft">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select fltrt">			<select name="filter_language_client" class="inputbox" onchange="this.form.submit()">				<?php echo JHtml::_('select.options', $this->languages, null, 'text', $this->state->get('filter.language_client')); ?>			</select>		</div>	</fieldset>	<div class="clr"></div>	<table class="adminlist">		<thead>			<tr>				<th width="1%">					<input type="checkbox" name="checkall-toggle" value="" onclick="Joomla.checkAll(this)" />				</th>				<th width="30%" class="left">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_KEY', 'key', $listDirn, $listOrder); ?>				</th>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_TEXT', 'text', $listDirn, $listOrder); ?>				</th>				<th class="nowrap">					<?php echo JText::_('COM_LANGUAGES_FIELD_LANG_TAG_LABEL'); ?>				</th>				<th>					<?php echo JText::_('JCLIENT'); ?>				</th>				<th class="right" width="20">					<?php echo JText::_('COM_LANGUAGES_HEADING_NUM'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="6">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php $canEdit = JFactory::getUser()->authorise('core.edit', 'com_languages');		$i = 0;		foreach ($this->items as $key => $text) : ?>			<tr class="row<?php echo $i % 2; ?>" id="overriderrow<?php echo $i; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $key); ?>				</td>				<td>					<?php if ($canEdit) : ?>						<a id="key[<?php	echo $this->escape($key); ?>]" href="<?php echo JRoute::_('index.php?option=com_languages&task=override.edit&id='.$key); ?>"><?php echo $this->escape($key); ?></a>					<?php else: ?>						<?php echo $this->escape($key); ?>					<?php endif; ?>				</td>				<td>					<span id="string[<?php	echo $this->escape($key); ?>]"><?php echo $this->escape($text); ?></span>				</td>				<td class="center">					<?php echo $language; ?>				</td>				<td class="center">					<?php echo $client; ?>				</td>				<td class="right">					<?php echo $this->pagination->getRowOffset($i); ?>				</td>			</tr>			<?php $i++;		endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class for categories * * @package     Joomla.Libraries * @subpackage  HTML * @since       1.5 */abstract class JHtmlCategory{	/**	 * Cached array of the category items.	 *	 * @var    array	 * @since  1.5	 */	protected static $items = array();	/**	 * Returns an array of categories for the given extension.	 *	 * @param   string  $extension  The extension option e.g. com_something.	 * @param   array   $config     An array of configuration options. By default, only	 *                              published and unpublished categories are returned.	 *	 * @return  array	 *	 * @since   1.5	 */	public static function options($extension, $config = array('filter.published' => array(0, 1)))	{		$hash = md5($extension . '.' . serialize($config));		if (!isset(self::$items[$hash]))		{			$config = (array) $config;			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id, a.title, a.level')				->from('#__categories AS a')				->where('a.parent_id > 0');			// Filter on extension.			$query->where('extension = ' . $db->quote($extension));			// Filter on the published state			if (isset($config['filter.published']))			{				if (is_numeric($config['filter.published']))				{					$query->where('a.published = ' . (int) $config['filter.published']);				}				elseif (is_array($config['filter.published']))				{					JArrayHelper::toInteger($config['filter.published']);					$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');				}			}			// Filter on the language			if (isset($config['filter.language']))			{				if (is_string($config['filter.language']))				{					$query->where('a.language = ' . $db->quote($config['filter.language']));				}				elseif (is_array($config['filter.language']))				{					foreach ($config['filter.language'] as &$language)					{						$language = $db->quote($language);					}					$query->where('a.language IN (' . implode(',', $config['filter.language']) . ')');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Assemble the list options.			self::$items[$hash] = array();			foreach ($items as &$item)			{				$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;				$item->title = str_repeat('- ', $repeat) . $item->title;				self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);			}		}		return self::$items[$hash];	}	/**	 * Returns an array of categories for the given extension.	 *	 * @param   string  $extension  The extension option.	 * @param   array   $config     An array of configuration options. By default, only published and unpublished categories are returned.	 *	 * @return  array   Categories for the extension	 *	 * @since   1.6	 */	public static function categories($extension, $config = array('filter.published' => array(0, 1)))	{		$hash = md5($extension . '.' . serialize($config));		if (!isset(self::$items[$hash]))		{			$config = (array) $config;			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id, a.title, a.level, a.parent_id')				->from('#__categories AS a')				->where('a.parent_id > 0');			// Filter on extension.			$query->where('extension = ' . $db->quote($extension));			// Filter on the published state			if (isset($config['filter.published']))			{				if (is_numeric($config['filter.published']))				{					$query->where('a.published = ' . (int) $config['filter.published']);				}				elseif (is_array($config['filter.published']))				{					JArrayHelper::toInteger($config['filter.published']);					$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Assemble the list options.			self::$items[$hash] = array();			foreach ($items as &$item)			{				$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;				$item->title = str_repeat('- ', $repeat) . $item->title;				self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);			}			// Special "Add to root" option:			self::$items[$hash][] = JHtml::_('select.option', '1', JText::_('JLIB_HTML_ADD_TO_ROOT'));		}		return self::$items[$hash];	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Router * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;jimport('joomla.application.router');/** * Class to create and parse routes for the site application * * @package     Joomla.Libraries * @subpackage  Router * @since       1.5 */class JRouterSite extends JRouter{	/**	 * Function to convert a route to an internal URI	 *	 * @param   JURI  $uri  The uri.	 *	 * @return  array	 */	public function parse($uri)	{		$vars = array();		// Get the application		$app = JApplication::getInstance('site');		if ($app->getCfg('force_ssl') == 2 && strtolower($uri->getScheme()) != 'https')		{			// Forward to https			$uri->setScheme('https');			$app->redirect((string) $uri);		}		// Get the path		// Decode URL to convert punycode to unicode so that strings match when routing.		$path = urldecode($uri->getPath());		// Remove the base URI path.		$path = substr_replace($path, '', 0, strlen(JURI::base(true)));		// Check to see if a request to a specific entry point has been made.		if (preg_match("#.*?\.php#u", $path, $matches))		{			// Get the current entry point path relative to the site path.			$scriptPath = realpath($_SERVER['SCRIPT_FILENAME'] ? $_SERVER['SCRIPT_FILENAME'] : str_replace('\\\\', '\\', $_SERVER['PATH_TRANSLATED']));			$relativeScriptPath = str_replace('\\', '/', str_replace(JPATH_SITE, '', $scriptPath));			// If a php file has been found in the request path, check to see if it is a valid file.			// Also verify that it represents the same file from the server variable for entry script.			if (file_exists(JPATH_SITE . $matches[0]) && ($matches[0] == $relativeScriptPath))			{				// Remove the entry point segments from the request path for proper routing.				$path = str_replace($matches[0], '', $path);			}		}		// Identify format		if ($this->_mode == JROUTER_MODE_SEF)		{			if ($app->getCfg('sef_suffix') && !(substr($path, -9) == 'index.php' || substr($path, -1) == '/'))			{				if ($suffix = pathinfo($path, PATHINFO_EXTENSION))				{					$vars['format'] = $suffix;				}			}		}		// Set the route		$uri->setPath(trim($path, '/'));		$vars += parent::parse($uri);		return $vars;	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 */	public function build($url)	{		$uri = parent::build($url);		// Get the path data		$route = $uri->getPath();		// Add the suffix to the uri		if ($this->_mode == JROUTER_MODE_SEF && $route)		{			$app = JApplication::getInstance('site');			if ($app->getCfg('sef_suffix') && !(substr($route, -9) == 'index.php' || substr($route, -1) == '/'))			{				if ($format = $uri->getVar('format', 'html'))				{					$route .= '.' . $format;					$uri->delVar('format');				}			}			if ($app->getCfg('sef_rewrite'))			{				// Transform the route				if ($route == 'index.php')				{					$route = '';				}				else				{					$route = str_replace('index.php/', '', $route);				}			}		}		// Add basepath to the uri		$uri->setPath(JURI::base(true) . '/' . $route);		return $uri;	}	/**	 * Function to convert a raw route to an internal URI	 *	 * @param   JURI  $uri  The raw route	 *	 * @return  array	 */	protected function _parseRawRoute($uri)	{		$vars = array();		$app  = JApplication::getInstance('site');		$menu = $app->getMenu(true);		// Handle an empty URL (special case)		if (!$uri->getVar('Itemid') && !$uri->getVar('option'))		{			$item = $menu->getDefault(JFactory::getLanguage()->getTag());			if (!is_object($item))			{				// No default item set				return $vars;			}			// Set the information in the request			$vars = $item->query;			// Get the itemid			$vars['Itemid'] = $item->id;			// Set the active menu item			$menu->setActive($vars['Itemid']);			return $vars;		}		// Get the variables from the uri		$this->setVars($uri->getQuery(true));		// Get the itemid, if it hasn't been set force it to null		$this->setVar('Itemid', $app->input->getInt('Itemid', null));		// Only an Itemid  OR if filter language plugin set? Get the full information from the itemid		if (count($this->getVars()) == 1 || ($app->getLanguageFilter() && count($this->getVars()) == 2 ))		{			$item = $menu->getItem($this->getVar('Itemid'));			if ($item !== null && is_array($item->query))			{				$vars = $vars + $item->query;			}		}		// Set the active menu item		$menu->setActive($this->getVar('Itemid'));		return $vars;	}	/**	 * Function to convert a sef route to an internal URI	 *	 * @param   JURI  $uri  The sef URI	 *	 * @return  string  Internal URI	 */	protected function _parseSefRoute($uri)	{		$vars  = array();		$app   = JApplication::getInstance('site');		$menu  = $app->getMenu(true);		$route = $uri->getPath();		// Remove the suffix		if ($this->_mode == JROUTER_MODE_SEF)		{			if ($app->getCfg('sef_suffix'))			{				if ($suffix = pathinfo($route, PATHINFO_EXTENSION))				{					$route = str_replace('.' . $suffix, '', $route);				}			}		}		// Get the variables from the uri		$vars = $uri->getQuery(true);		// Handle an empty URL (special case)		if (empty($route))		{			// If route is empty AND option is set in the query, assume it's non-sef url, and parse apropriately			if (isset($vars['option']) || isset($vars['Itemid']))			{				return $this->_parseRawRoute($uri);			}			$item = $menu->getDefault(JFactory::getLanguage()->getTag());			// If user not allowed to see default menu item then avoid notices			if (is_object($item))			{				// Set the information in the request				$vars = $item->query;				// Get the itemid				$vars['Itemid'] = $item->id;				// Set the active menu item				$menu->setActive($vars['Itemid']);			}			return $vars;		}		/*		 * Parse the application route		 */		$segments	= explode('/', $route);		if (count($segments) > 1 && $segments[0] == 'component')		{			$vars['option'] = 'com_' . $segments[1];			$vars['Itemid'] = null;			$route = implode('/', array_slice($segments, 2));		}		else		{			// Need to reverse the array (highest sublevels first)			$items = array_reverse($menu->getMenu());			$found 				= false;			$route_lowercase 	= JString::strtolower($route);			$lang_tag 			= JFactory::getLanguage()->getTag();			foreach ($items as $item)			{				// Sqlsrv change				if (isset($item->language))				{					$item->language = trim($item->language);				}				// Get the length of the route				$length = strlen($item->route);				if ($length > 0 && JString::strpos($route_lowercase . '/', $item->route . '/') === 0					&& $item->type != 'menulink' && (!$app->getLanguageFilter() || $item->language == '*'					|| $item->language == $lang_tag))				{					// We have exact item for this language					if ($item->language == $lang_tag)					{						$found = $item;						break;					}					// Or let's remember an item for all languages					elseif (!$found)					{						$found = $item;					}				}			}			if (!$found)			{				$found = $menu->getDefault($lang_tag);			}			else			{				$route = substr($route, strlen($found->route));				if ($route)				{					$route = substr($route, 1);				}			}			$vars['Itemid'] = $found->id;			$vars['option'] = $found->component;		}		// Set the active menu item		if (isset($vars['Itemid']))		{			$menu->setActive($vars['Itemid']);		}		// Set the variables		$this->setVars($vars);		/*		 * Parse the component route		 */		if (!empty($route) && isset($this->_vars['option']))		{			$segments = explode('/', $route);			if (empty($segments[0]))			{				array_shift($segments);			}			// Handle component	route			$component = preg_replace('/[^A-Z0-9_\.-]/i', '', $this->_vars['option']);			// Use the component routing handler if it exists			$path = JPATH_SITE . '/components/' . $component . '/router.php';			if (file_exists($path) && count($segments))			{				// Cheap fix on searches				if ($component != "com_search")				{					// Decode the route segments					$segments = $this->_decodeSegments($segments);				}				else				{					// Fix up search for URL					$total = count($segments);					for ($i = 0; $i < $total; $i++)					{						// Urldecode twice because it is encoded twice						$segments[$i] = urldecode(urldecode(stripcslashes($segments[$i])));					}				}				require_once $path;				$function = substr($component, 4) . 'ParseRoute';				$function = str_replace(array("-", "."), "", $function);				$vars = $function($segments);				$this->setVars($vars);			}		}		else		{			// Set active menu item			if ($item = $menu->getActive())			{				$vars = $item->query;			}		}		return $vars;	}	/**	 * Function to build a raw route	 *	 * @param   JURI  $uri  The internal URL	 *	 * @return  string  Raw Route	 */	protected function _buildRawRoute($uri)	{	}	/**	 * Function to build a sef route	 *	 * @param   JURI  $uri  The uri	 *	 * @return  void	 */	protected function _buildSefRoute($uri)	{		// Get the route		$route = $uri->getPath();		// Get the query data		$query = $uri->getQuery(true);		if (!isset($query['option']))		{			return;		}		$app  = JApplication::getInstance('site');		$menu = $app->getMenu();		/*		 * Build the component route		 */		$component = preg_replace('/[^A-Z0-9_\.-]/i', '', $query['option']);		$tmp       = '';		$itemID    = !empty($query['Itemid']) ? $query['Itemid'] : null;		// Use the component routing handler if it exists		$path = JPATH_SITE . '/components/' . $component . '/router.php';		// Use the custom routing handler if it exists		if (file_exists($path) && !empty($query))		{			require_once $path;			$function = substr($component, 4) . 'BuildRoute';			$function = str_replace(array("-", "."), "", $function);			$parts    = $function($query);			// Encode the route segments			if ($component != 'com_search')			{				// Cheep fix on searches				$parts = $this->_encodeSegments($parts);			}			else			{				// Fix up search for URL				$total = count($parts);				for ($i = 0; $i < $total; $i++)				{					// Urlencode twice because it is decoded once after redirect					$parts[$i] = urlencode(urlencode(stripcslashes($parts[$i])));				}			}			$result = implode('/', $parts);			$tmp    = ($result != "") ? $result : '';		}		/*		 * Build the application route		 */		$built = false;		if (!empty($query['Itemid']))		{			$item = $menu->getItem($query['Itemid']);			if (is_object($item) && $query['option'] == $item->component)			{				if (!$item->home || $item->language != '*')				{					$tmp = !empty($tmp) ? $item->route . '/' . $tmp : $item->route;				}				$built = true;			}		}		if (empty($query['Itemid']) && !empty($itemID))		{			$query['Itemid'] = $itemID;		}		if (!$built)		{			$tmp = 'component/' . substr($query['option'], 4) . '/' . $tmp;		}		if ($tmp)		{			$route .= '/' . $tmp;		}		elseif ($route == 'index.php')		{			$route = '';		}		// Unset unneeded query information		if (isset($item) && $query['option'] == $item->component)		{			unset($query['Itemid']);		}		unset($query['option']);		// Set query again in the URI		$uri->setQuery($query);		$uri->setPath($route);	}	/**	 * Process the parsed router variables based on custom defined rules	 *	 * @param   JURI  $uri  The URI to parse	 *	 * @return  array  The array of processed URI variables	 */	protected function _processParseRules($uri)	{		// Process the attached parse rules		$vars = parent::_processParseRules($uri);		// Process the pagination support		if ($this->_mode == JROUTER_MODE_SEF)		{			if ($start = $uri->getVar('start'))			{				$uri->delVar('start');				$vars['limitstart'] = $start;			}		}		return $vars;	}	/**	 * Process the build uri query data based on custom defined rules	 *	 * @param   JURI  $uri  The URI	 *	 * @return  void	 */	protected function _processBuildRules($uri)	{		// Make sure any menu vars are used if no others are specified		if (($this->_mode != JROUTER_MODE_SEF) && $uri->getVar('Itemid') && count($uri->getQuery(true)) == 2)		{			$app  = JApplication::getInstance('site');			$menu = $app->getMenu();			// Get the active menu item			$itemid = $uri->getVar('Itemid');			$item = $menu->getItem($itemid);			if ($item)			{				$uri->setQuery($item->query);			}			$uri->setVar('Itemid', $itemid);		}		// Process the attached build rules		parent::_processBuildRules($uri);		// Get the path data		$route = $uri->getPath();		if ($this->_mode == JROUTER_MODE_SEF && $route)		{			$app = JApplication::getInstance('site');			if ($limitstart = $uri->getVar('limitstart'))			{				$uri->setVar('start', (int) $limitstart);				$uri->delVar('limitstart');			}		}		$uri->setPath($route);	}	/**	 * Create a uri based on a full or partial url string	 *	 * @param   string  $url  The URI	 *	 * @return  JURI	 */	protected function _createURI($url)	{		// Create the URI		$uri = parent::_createURI($url);		// Set URI defaults		$app  = JApplication::getInstance('site');		$menu = $app->getMenu();		// Get the itemid form the URI		$itemid = $uri->getVar('Itemid');		if (is_null($itemid))		{			if ($option = $uri->getVar('option'))			{				$item  = $menu->getItem($this->getVar('Itemid'));				if (isset($item) && $item->component == $option)				{					$uri->setVar('Itemid', $item->id);				}			}			else			{				if ($option = $this->getVar('option'))				{					$uri->setVar('option', $option);				}				if ($itemid = $this->getVar('Itemid'))				{					$uri->setVar('Itemid', $itemid);				}			}		}		else		{			if (!$uri->getVar('option'))			{				if ($item = $menu->getItem($itemid))				{					$uri->setVar('option', $item->component);				}			}		}		return $uri;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cpanel * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?><div class="row-fluid">	<div class="span2">		<div class="sidebar-nav">			<ul class="nav nav-list">				<li class="nav-header"><?php echo JText::_('COM_CPANEL_HEADER_SUBMENU'); ?></li>				<li class="active"><a href="<?php echo $this->baseurl; ?>"><?php echo JText::_('COM_CPANEL_LINK_DASHBOARD'); ?></a></li>				<li class="nav-header"><?php echo JText::_('COM_CPANEL_HEADER_SYSTEM'); ?></li>			<?php if ($user->authorise('core.admin')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_config"><?php echo JText::_('COM_CPANEL_LINK_GLOBAL_CONFIG'); ?></a></li>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_admin&view=sysinfo"><?php echo JText::_('COM_CPANEL_LINK_SYSINFO'); ?></a></li>			<?php endif;?>			<?php if ($user->authorise('core.manage', 'com_cache')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_cache"><?php echo JText::_('COM_CPANEL_LINK_CLEAR_CACHE'); ?></a></li>			<?php endif;?>			<?php if ($user->authorise('core.admin', 'com_checkin')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_checkin"><?php echo JText::_('COM_CPANEL_LINK_CHECKIN'); ?></a></li>			<?php endif;?>			<?php if ($user->authorise('core.manage', 'com_installer')):?>				<li><a href="<?php echo $this->baseurl; ?>/index.php?option=com_installer"><?php echo JText::_('COM_CPANEL_LINK_EXTENSIONS'); ?></a></li>			<?php endif;?>			</ul>		</div>	</div>	<div class="span6">		<?php		foreach ($this->modules as $module)		{			$output = JModuleHelper::renderModule($module, array('style' => 'well'));			$params = new JRegistry;			$params->loadString($module->params);			echo $output;		}		?>	</div>	<div class="span4">		<?php		// Display the submenu position modules		$this->iconmodules = JModuleHelper::getModules('icon');		foreach ($this->iconmodules as $iconmodule)		{			$output = JModuleHelper::renderModule($iconmodule, array('style' => 'well'));			$params = new JRegistry;			$params->loadString($iconmodule->params);			echo $output;		}		?>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Install Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerModelInstall extends JModelLegacy{	/**	 * @var object JTable object	 */	protected $_table = null;	/**	 * @var object JTable object	 */	protected $_url = null;	/**	 * Model context string.	 *	 * @var		string	 */	protected $_context = 'com_installer.install';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication('administrator');		$this->setState('message', $app->getUserState('com_installer.message'));		$this->setState('extension_message', $app->getUserState('com_installer.extension_message'));		$app->setUserState('com_installer.message', '');		$app->setUserState('com_installer.extension_message', '');		// Recall the 'Install from Directory' path.		$path = $app->getUserStateFromRequest($this->_context . '.install_directory', 'install_directory', $app->getCfg('tmp_path'));		$this->setState('install.directory', $path);		parent::populateState();	}	/**	 * Install an extension from either folder, url or upload.	 *	 * @return  boolean result of install	 *	 * @since   1.5	 */	public function install()	{		$this->setState('action', 'install');		// Set FTP credentials, if given.		JClientHelper::setCredentialsFromRequest('ftp');		$app = JFactory::getApplication();		switch ($app->input->getWord('installtype'))		{			case 'folder':				// Remember the 'Install from Directory' path.				$app->getUserStateFromRequest($this->_context . '.install_directory', 'install_directory');				$package = $this->_getPackageFromFolder();				break;			case 'upload':				$package = $this->_getPackageFromUpload();				break;			case 'url':				$package = $this->_getPackageFromUrl();				break;			default:				$app->setUserState('com_installer.message', JText::_('COM_INSTALLER_NO_INSTALL_TYPE_FOUND'));				return false;				break;		}		// Was the package unpacked?		if (!$package)		{			$app->setUserState('com_installer.message', JText::_('COM_INSTALLER_UNABLE_TO_FIND_INSTALL_PACKAGE'));			return false;		}		// Get an installer instance		$installer = JInstaller::getInstance();		// Install the package		if (!$installer->install($package['dir']))		{			// There was an error installing the package			$msg = JText::sprintf('COM_INSTALLER_INSTALL_ERROR', JText::_('COM_INSTALLER_TYPE_TYPE_' . strtoupper($package['type'])));			$result = false;		}		else		{			// Package installed sucessfully			$msg = JText::sprintf('COM_INSTALLER_INSTALL_SUCCESS', JText::_('COM_INSTALLER_TYPE_TYPE_' . strtoupper($package['type'])));			$result = true;		}		// Set some model state values		$app	= JFactory::getApplication();		$app->enqueueMessage($msg);		$this->setState('name', $installer->get('name'));		$this->setState('result', $result);		$app->setUserState('com_installer.message', $installer->message);		$app->setUserState('com_installer.extension_message', $installer->get('extension_message'));		$app->setUserState('com_installer.redirect_url', $installer->get('redirect_url'));		// Cleanup the install files		if (!is_file($package['packagefile']))		{			$config = JFactory::getConfig();			$package['packagefile'] = $config->get('tmp_path') . '/' . $package['packagefile'];		}		JInstallerHelper::cleanupInstall($package['packagefile'], $package['extractdir']);		return $result;	}	/**	 * Works out an installation package from a HTTP upload	 *	 * @return package definition or false on failure	 */	protected function _getPackageFromUpload()	{		// Get the uploaded file information		$userfile = JRequest::getVar('install_package', null, 'files', 'array');		// Make sure that file uploads are enabled in php		if (!(bool) ini_get('file_uploads'))		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_WARNINSTALLFILE'));			return false;		}		// Make sure that zlib is loaded so that the package can be unpacked		if (!extension_loaded('zlib'))		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_WARNINSTALLZLIB'));			return false;		}		// If there is no uploaded file, we have a problem...		if (!is_array($userfile))		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_NO_FILE_SELECTED'));			return false;		}		// Check if there was a problem uploading the file.		if ($userfile['error'] || $userfile['size'] < 1)		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_WARNINSTALLUPLOADERROR'));			return false;		}		// Build the appropriate paths		$config		= JFactory::getConfig();		$tmp_dest	= $config->get('tmp_path') . '/' . $userfile['name'];		$tmp_src	= $userfile['tmp_name'];		// Move uploaded file		jimport('joomla.filesystem.file');		$uploaded = JFile::upload($tmp_src, $tmp_dest);		// Unpack the downloaded package file		$package = JInstallerHelper::unpack($tmp_dest);		return $package;	}	/**	 * Install an extension from a directory	 *	 * @return  array  Package details or false on failure	 *	 * @since   1.5	 */	protected function _getPackageFromFolder()	{		$input = JFactory::getApplication()->input;		// Get the path to the package to install		$p_dir = $input->getString('install_directory');		$p_dir = JPath::clean($p_dir);		// Did you give us a valid directory?		if (!is_dir($p_dir))		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_ENTER_A_PACKAGE_DIRECTORY'));			return false;		}		// Detect the package type		$type = JInstallerHelper::detectType($p_dir);		// Did you give us a valid package?		if (!$type)		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_PATH_DOES_NOT_HAVE_A_VALID_PACKAGE'));			return false;		}		$package['packagefile'] = null;		$package['extractdir'] = null;		$package['dir'] = $p_dir;		$package['type'] = $type;		return $package;	}	/**	 * Install an extension from a URL	 *	 * @return  Package details or false on failure	 *	 * @since   1.5	 */	protected function _getPackageFromUrl()	{		$input = JFactory::getApplication()->input;		// Get the URL of the package to install		$url = $input->getString('install_url');		// Did you give us a URL?		if (!$url)		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_ENTER_A_URL'));			return false;		}		// Download the package at the URL given		$p_file = JInstallerHelper::downloadPackage($url);		// Was the package downloaded?		if (!$p_file)		{			JError::raiseWarning('', JText::_('COM_INSTALLER_MSG_INSTALL_INVALID_URL'));			return false;		}		$config   = JFactory::getConfig();		$tmp_dest = $config->get('tmp_path');		// Unpack the downloaded package file		$package = JInstallerHelper::unpack($tmp_dest . '/' . $p_file);		return $package;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Checkin class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/checkin/ * @since       13.1 */class JFacebookCheckin extends JFacebookObject{	/**	 * Method to get a checkin. Requires authentication and user_checkins or friends_checkins permission.	 *	 * @param   string  $checkin  The checkin id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getCheckin($checkin)	{		return $this->get($checkin);	}	/**	 * Method to get a checkin's comments. Requires authentication and user_checkins or friends_checkins permission.	 *	 * @param   string   $checkin  The checkin id.	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($checkin, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($checkin, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a comment to the checkin. Requires authentication and publish_stream and user_checkins or friends_checkins permission.	 *	 * @param   string  $checkin  The checkin id.	 * @param   string  $message  The checkin's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($checkin, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($checkin, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get a checkin's likes. Requires authentication and user_checkins or friends_checkins permission.	 *	 * @param   string   $checkin  The checkin id.	 * @param   integer  $limit    The number of objects per page.	 * @param   integer  $offset   The object's number on the page.	 * @param   string   $until    A unix timestamp or any date accepted by strtotime.	 * @param   string   $since    A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($checkin, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($checkin, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a checkin. Requires authentication and publish_stream and user_checkins or friends_checkins permission.	 *	 * @param   string  $checkin  The checkin id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createLike($checkin)	{		return $this->createConnection($checkin, 'likes');	}	/**	 * Method to unlike a checkin. Requires authentication and publish_stream permission.	 *	 * @param   string  $checkin  The checkin id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function deleteLike($checkin)	{		return $this->deleteConnection($checkin, 'likes');	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Category table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableCategory extends JTableNested{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__categories', 'id', $db);		$this->access = (int) JFactory::getConfig()->get('access');		$this->tagsHelper = new JHelperTags();	}	/**	 * Method to compute the default name of the asset.	 * The default name is in the form table_name.id	 * where id is the value of the primary key of the table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetName()	{		$k = $this->_tbl_key;		return $this->extension . '.category.' . (int) $this->$k;	}	/**	 * Method to return the title to use for the asset table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetTitle()	{		return $this->title;	}	/**	 * Get the parent asset id for the record	 *	 * @param   JTable   $table  A JTable object for the asset parent.	 * @param   integer  $id     The id for the asset	 *	 * @return  integer  The id of the asset's parent	 *	 * @since   11.1	 */	protected function _getAssetParentId($table = null, $id = null)	{		$assetId = null;		// This is a category under a category.		if ($this->parent_id > 1)		{			// Build the query to get the asset id for the parent category.			$query = $this->_db->getQuery(true)				->select($this->_db->quoteName('asset_id'))				->from($this->_db->quoteName('#__categories'))				->where($this->_db->quoteName('id') . ' = ' . $this->parent_id);			// Get the asset id from the database.			$this->_db->setQuery($query);			if ($result = $this->_db->loadResult())			{				$assetId = (int) $result;			}		}		// This is a category that needs to parent with the extension.		elseif ($assetId === null)		{			// Build the query to get the asset id for the parent category.			$query = $this->_db->getQuery(true)				->select($this->_db->quoteName('id'))				->from($this->_db->quoteName('#__assets'))				->where($this->_db->quoteName('name') . ' = ' . $this->_db->quote($this->extension));			// Get the asset id from the database.			$this->_db->setQuery($query);			if ($result = $this->_db->loadResult())			{				$assetId = (int) $result;			}		}		// Return the asset id.		if ($assetId)		{			return $assetId;		}		else		{			return parent::_getAssetParentId($table, $id);		}	}	/**	 * Override check function	 *	 * @return  boolean	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// Check for a title.		if (trim($this->title) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MUSTCONTAIN_A_TITLE_CATEGORY'));			return false;		}		$this->alias = trim($this->alias);		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		return true;	}	/**	 * Overloaded bind function.	 *	 * @param   array   $array   named array	 * @param   string  $ignore  An optional array or space separated list of properties	 *                           to ignore while binding.	 *	 * @return  mixed   Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		// Bind the rules.		if (isset($array['rules']) && is_array($array['rules']))		{			$rules = new JAccessRules($array['rules']);			$this->setRules($rules);		}		return parent::bind($array, $ignore);	}	/**	 * Override parent delete method to process tags	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null, $children = true)	{		$result = parent::delete($pk);		$this->tagsHelper->typeAlias = $this->extension . '.category';		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Overridden JTable::store to set created/modified and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if ($this->id)		{			// Existing category			$this->modified_time = $date->toSql();			$this->modified_user_id = $user->get('id');		}		else		{			// New category			$this->created_time = $date->toSql();			$this->created_user_id = $user->get('id');		}		// Verify that the alias is unique		$table = JTable::getInstance('Category', 'JTable', array('dbo' => $this->getDbo()));		if ($table->load(array('alias' => $this->alias, 'parent_id' => $this->parent_id, 'extension' => $this->extension))			&& ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_CATEGORY_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->typeAlias = $this->extension . '.category';		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Editors.tinymce * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * TinyMCE Editor Plugin * * @package     Joomla.Plugin * @subpackage  Editors.tinymce * @since       1.5 */class PlgEditorTinymce extends JPlugin{	/**	 * Base path for editor files	 */	protected $_basePath = 'media/editors/tinymce/jscripts/tiny_mce';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Initialises the Editor.	 *	 * @return  string  JavaScript Initialization string	 *	 * @since 1.5	 */	public function onInit()	{		$language = JFactory::getLanguage();		$mode	= (int) $this->params->get('mode', 1);		$theme	= array('simple', 'advanced', 'advanced');		$skin	= $this->params->get('skin', '0');		switch ($skin)		{			case '3':				$skin = 'skin : "o2k7", skin_variant : "black",';				break;			case '2':				$skin = 'skin : "o2k7", skin_variant : "silver",';				break;			case '1':				$skin = 'skin : "o2k7",';				break;			case '0':			default:				$skin = 'skin : "default",';		}		$entity_encoding	= $this->params->def('entity_encoding', 'raw');		$langMode			= $this->params->def('lang_mode', 0);		$langPrefix			= $this->params->def('lang_code', 'en');		if ($langMode)		{			$langPrefix = substr($language->getTag(), 0, strpos($language->getTag(), '-'));		}		$text_direction = 'ltr';		if ($language->isRTL())		{			$text_direction = 'rtl';		}		$use_content_css	= $this->params->def('content_css', 1);		$content_css_custom	= $this->params->def('content_css_custom', '');		/*		 * Lets get the default template for the site application		 */		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('template')			->from('#__template_styles')			->where('client_id=0 AND home=' . $db->quote('1'));		$db->setQuery($query);		$template = $db->loadResult();		$content_css = '';		$templates_path = JPATH_SITE . '/templates';		// loading of css file for 'styles' dropdown		if ( $content_css_custom )		{			// If URL, just pass it to $content_css			if (strpos($content_css_custom, 'http') !== false)			{				$content_css = 'content_css : "'. $content_css_custom .'",';			}			// If it is not a URL, assume it is a file name in the current template folder			else			{				$content_css = 'content_css : "'. JURI::root() .'templates/'. $template . '/css/'. $content_css_custom .'",';				// Issue warning notice if the file is not found (but pass name to $content_css anyway to avoid TinyMCE error				if (!file_exists($templates_path . '/' . $template . '/css/' . $content_css_custom))				{					$msg = sprintf(JText::_('PLG_TINY_ERR_CUSTOMCSSFILENOTPRESENT'), $content_css_custom);					JError::raiseNotice('SOME_ERROR_CODE', $msg);				}			}		}		else		{			// process when use_content_css is Yes and no custom file given			if ($use_content_css)			{				// first check templates folder for default template				// if no editor.css file in templates folder, check system template folder				if (!file_exists($templates_path . '/' . $template . '/css/editor.css'))				{					$template = 'system';					// if no editor.css file in system folder, show alert					if (!file_exists($templates_path . '/system/css/editor.css'))					{						JError::raiseNotice('SOME_ERROR_CODE', JText::_('PLG_TINY_ERR_EDITORCSSFILENOTPRESENT'));					}					else					{						$content_css = 'content_css : "' . JURI::root() .'templates/system/css/editor.css",';					}				}				else				{					$content_css = 'content_css : "' . JURI::root() .'templates/'. $template . '/css/editor.css",';				}			}		}		$relative_urls		= $this->params->def('relative_urls', '1');		if ($relative_urls)		{			// relative			$relative_urls = "true";		}		else		{			// absolute			$relative_urls = "false";		}		$newlines			= $this->params->def('newlines', 0);		if ($newlines)		{			// br			$forcenewline = "force_br_newlines : true, force_p_newlines : false, forced_root_block : '',";		}		else		{			// p			$forcenewline = "force_br_newlines : false, force_p_newlines : true, forced_root_block : 'p',";		}		$invalid_elements	= $this->params->def('invalid_elements', 'script,applet,iframe');		$extended_elements	= $this->params->def('extended_elements', '');		// theme_advanced_* settings		$toolbar			= $this->params->def('toolbar', 'top');		$toolbar_align		= $this->params->def('toolbar_align', 'left');		$html_height		= $this->params->def('html_height', '550');		$html_width			= $this->params->def('html_width', '750');		$resizing			= $this->params->def('resizing', 'true');		$resize_horizontal	= $this->params->def('resize_horizontal', 'false');		$element_path = '';		if ($this->params->get('element_path', 1))		{			$element_path = 'theme_advanced_statusbar_location : "bottom", theme_advanced_path : true';		}		else		{			$element_path = 'theme_advanced_statusbar_location : "none", theme_advanced_path : false';		}		$buttons1_add_before = $buttons1_add = array();		$buttons2_add_before = $buttons2_add = array();		$buttons3_add_before = $buttons3_add = array();		$buttons4 = array();		$plugins  = array();		if ($extended_elements != "")		{			$elements	= explode(',', $extended_elements);		}		// Initial values for buttons		array_push($buttons4, 'cut', 'copy', 'paste');		// array_push($buttons4,'|');		// Plugins		// fonts		$fonts = $this->params->def('fonts', 1);		if ($fonts)		{			$buttons1_add[]	= 'fontselect,fontsizeselect';		}		// paste		$paste = $this->params->def('paste', 1);		if ($paste)		{			$plugins[]	= 'paste';			$buttons4[]	= 'pastetext';			$buttons4[]	= 'pasteword';			$buttons4[]	= 'selectall,|';		}		// search & replace		$searchreplace = $this->params->def('searchreplace', 1);		if ($searchreplace)		{			$plugins[]	= 'searchreplace';			$buttons2_add_before[]	= 'search,replace,|';		}		// insert date and/or time plugin		$insertdate			= $this->params->def('insertdate', 1);		$format_date		= $this->params->def('format_date', '%Y-%m-%d');		$inserttime			= $this->params->def('inserttime', 1);		$format_time		= $this->params->def('format_time', '%H:%M:%S');		if ($insertdate or $inserttime)		{			$plugins[]	= 'insertdatetime';			if ($insertdate)			{				$buttons2_add[]	= 'insertdate';			}			if ($inserttime)			{				$buttons2_add[]	= 'inserttime';			}		}		// colors		$colors = $this->params->def('colors', 1);		if ($colors)		{			$buttons2_add[]	= 'forecolor,backcolor';		}		// table		$table = $this->params->def('table', 1);		if ($table)		{			$plugins[]	= 'table';			$buttons3_add_before[]	= 'tablecontrols';		}		// emotions		$smilies = $this->params->def('smilies', 1);		if ($smilies)		{			$plugins[]	= 'emotions';			$buttons3_add[]	= 'emotions';		}		//media plugin		$media = $this->params->def('media', 1);		if ($media)		{			$plugins[] = 'media';			$buttons3_add[] = 'media';		}		// horizontal line		$hr = $this->params->def('hr', 1);		if ($hr)		{			$plugins[]	= 'advhr';			$elements[] = 'hr[id|title|alt|class|width|size|noshade|style]';			$buttons3_add[]	= 'advhr';		}		else		{			$elements[] = 'hr[id|class|title|alt]';		}		// rtl/ltr buttons		$directionality	= $this->params->def('directionality', 1);		if ($directionality)		{			$plugins[] = 'directionality';			$buttons3_add[] = 'ltr,rtl';		}		// fullscreen		$fullscreen	= $this->params->def('fullscreen', 1);		if ($fullscreen)		{			$plugins[]	= 'fullscreen';			$buttons2_add[]	= 'fullscreen';		}		// layer		$layer = $this->params->def('layer', 1);		if ($layer)		{			$plugins[]	= 'layer';			$buttons4[]	= 'insertlayer';			$buttons4[]	= 'moveforward';			$buttons4[]	= 'movebackward';			$buttons4[]	= 'absolute';		}		// style		$style = $this->params->def('style', 1);		if ($style)		{			$plugins[]	= 'style';			$buttons4[]	= 'styleprops';		}		// XHTMLxtras		$xhtmlxtras	= $this->params->def('xhtmlxtras', 1);		if ($xhtmlxtras)		{			$plugins[]	= 'xhtmlxtras';			$buttons4[]	= 'cite,abbr,acronym,ins,del,attribs';		}		// visualchars		$visualchars = $this->params->def('visualchars', 1);		if ($visualchars)		{			$plugins[]	= 'visualchars';			$buttons4[]	= 'visualchars';		}		// visualblocks		$visualblocks = $this->params->def('visualblocks', 1);		if ($visualblocks)		{			$plugins[]	= 'visualblocks';			$buttons4[]	= 'visualblocks';		}		// non-breaking		$nonbreaking = $this->params->def('nonbreaking', 1);		if ($nonbreaking)		{			$plugins[]	= 'nonbreaking';			$buttons4[]	= 'nonbreaking';		}		// blockquote		$blockquote	= $this->params->def('blockquote', 1);		if ($blockquote)		{			$buttons4[] = 'blockquote';		}		// wordcount		$wordcount	= $this->params->def('wordcount', 1);		if ($wordcount)		{			$plugins[] = 'wordcount';		}		// template		$template = $this->params->def('template', 1);		if ($template)		{			$plugins[]	= 'template';			$buttons4[]	= 'template';		}		// advimage		$advimage = $this->params->def('advimage', 1);		if ($advimage)		{			$plugins[]	= 'advimage';			$elements[]	= 'img[class|src|alt|title|hspace|vspace|width|height|align|onmouseover|onmouseout|name|style]';		}		// advlink		$advlink	= $this->params->def('advlink', 1);		if ($advlink)		{			$plugins[]	= 'advlink';			$elements[]	= 'a[id|class|name|href|hreflang|target|title|onclick|rel|style]';		}		//advlist		$advlist	= $this->params->def('advlist', 1);		if ($advlist)		{			$plugins[]	= 'advlist';		}		// autosave		$autosave = $this->params->def('autosave', 1);		if ($autosave)		{			$plugins[]	= 'autosave';		}		// context menu		$contextmenu = $this->params->def('contextmenu', 1);		if ($contextmenu)		{			$plugins[]	= 'contextmenu';		}		// inline popups		$inlinepopups			= $this->params->def('inlinepopups', 1);		if ($inlinepopups)		{			$plugins[]	= 'inlinepopups';			$dialog_type = 'dialog_type : "modal",';		}		else		{			$dialog_type = "";		}		$custom_plugin = $this->params->def('custom_plugin', '');		if ($custom_plugin != "")		{			$plugins[] = $custom_plugin;		}		$custom_button = $this->params->def('custom_button', '');		if ($custom_button != "")		{			$buttons4[] = $custom_button;		}		// Prepare config variables		$buttons1_add_before = implode(',', $buttons1_add_before);		$buttons2_add_before = implode(',', $buttons2_add_before);		$buttons3_add_before = implode(',', $buttons3_add_before);		$buttons1_add = implode(',', $buttons1_add);		$buttons2_add = implode(',', $buttons2_add);		$buttons3_add = implode(',', $buttons3_add);		$buttons4 = implode(',', $buttons4);		$plugins = implode(',', $plugins);		$elements = implode(',', $elements);		switch ($mode)		{			case 0: /* Simple mode*/				$load = "\t<script type=\"text/javascript\" src=\"".						JURI::root().$this->_basePath.						"/tiny_mce.js\"></script>\n";				$return = $load .				"\t<script type=\"text/javascript\">				tinyMCE.init({					// General					directionality: \"$text_direction\",					editor_selector : \"mce_editable\",					language : \"". $langPrefix . "\",					mode : \"specific_textareas\",					$skin					theme : \"$theme[$mode]\",					// Cleanup/Output					inline_styles : true,					gecko_spellcheck : true,					entity_encoding : \"$entity_encoding\",					$forcenewline					// URL					relative_urls : $relative_urls,					remove_script_host : false,					// Layout					$content_css					document_base_url : \"". JURI::root() ."\"				});				</script>";				break;			case 1: /* Advanced mode*/				$load = "\t<script type=\"text/javascript\" src=\"".						JURI::root().$this->_basePath.						"/tiny_mce.js\"></script>\n";				$return = $load .				"\t<script type=\"text/javascript\">				tinyMCE.init({					// General					directionality: \"$text_direction\",					editor_selector : \"mce_editable\",					language : \"". $langPrefix . "\",					mode : \"specific_textareas\",					$skin					theme : \"$theme[$mode]\",					// Cleanup/Output					inline_styles : true,					gecko_spellcheck : true,					entity_encoding : \"$entity_encoding\",					extended_valid_elements : \"$elements\",					$forcenewline					invalid_elements : \"$invalid_elements\",					// URL					relative_urls : $relative_urls,					remove_script_host : false,					document_base_url : \"". JURI::root() ."\",					// Layout					$content_css					// Advanced theme					theme_advanced_toolbar_location : \"$toolbar\",					theme_advanced_toolbar_align : \"$toolbar_align\",					theme_advanced_source_editor_height : \"$html_height\",					theme_advanced_source_editor_width : \"$html_width\",					theme_advanced_resizing : $resizing,					theme_advanced_resize_horizontal : $resize_horizontal,					$element_path				});				</script>";				break;			case 2: /* Extended mode*/				$load = "\t<script type=\"text/javascript\" src=\"".						JURI::root().$this->_basePath.						"/tiny_mce.js\"></script>\n";				$return = $load .				"\t<script type=\"text/javascript\">				tinyMCE.init({					// General					$dialog_type					directionality: \"$text_direction\",					editor_selector : \"mce_editable\",					language : \"". $langPrefix . "\",					mode : \"specific_textareas\",					plugins : \"$plugins\",					$skin					theme : \"$theme[$mode]\",					// Cleanup/Output					inline_styles : true,					gecko_spellcheck : true,					entity_encoding : \"$entity_encoding\",					extended_valid_elements : \"$elements\",					$forcenewline					invalid_elements : \"$invalid_elements\",					// URL					relative_urls : $relative_urls,					remove_script_host : false,					document_base_url : \"". JURI::root() ."\",					//Templates					template_external_list_url :  \"". JURI::root() ."media/editors/tinymce/templates/template_list.js\",					// Layout					$content_css					// Advanced theme					theme_advanced_toolbar_location : \"$toolbar\",					theme_advanced_toolbar_align : \"$toolbar_align\",					theme_advanced_source_editor_height : \"$html_height\",					theme_advanced_source_editor_width : \"$html_width\",					theme_advanced_resizing : $resizing,					theme_advanced_resize_horizontal : $resize_horizontal,					$element_path,					theme_advanced_buttons1_add_before : \"$buttons1_add_before\",					theme_advanced_buttons2_add_before : \"$buttons2_add_before\",					theme_advanced_buttons3_add_before : \"$buttons3_add_before\",					theme_advanced_buttons1_add : \"$buttons1_add\",					theme_advanced_buttons2_add : \"$buttons2_add\",					theme_advanced_buttons3_add : \"$buttons3_add\",					theme_advanced_buttons4 : \"$buttons4\",					plugin_insertdate_dateFormat : \"$format_date\",					plugin_insertdate_timeFormat : \"$format_time\",					fullscreen_settings : {						theme_advanced_path_location : \"top\"					}				});				</script>";				break;		}		return $return;	}	/**	 * TinyMCE WYSIWYG Editor - get the editor content	 *	 * @param  string  The name of the editor	 *	 * @return  string	 */	public function onGetContent($editor)	{		return 'tinyMCE.get(\''.$editor.'\').getContent();';	}	/**	 * TinyMCE WYSIWYG Editor - set the editor content	 *	 * @param   string  The name of the editor	 *	 * @return  string	 */	public function onSetContent($editor, $html)	{		return 'tinyMCE.get(\''.$editor.'\').setContent('.$html.');';	}	/**	 * TinyMCE WYSIWYG Editor - copy editor content to form field	 *	 * @param   string  The name of the editor	 *	 * @return  string	 */	public function onSave($editor)	{		return 'if (tinyMCE.get("'.$editor.'").isHidden()) {tinyMCE.get("'.$editor.'").show()}; tinyMCE.get("'.$editor.'").save();';	}	/**	 *	 * @return  boolean	 */	public function onGetInsertMethod($name)	{		$doc = JFactory::getDocument();		$js = "			function isBrowserIE()			{				return navigator.appName==\"Microsoft Internet Explorer\";			}			function jInsertEditorText( text, editor )			{				if (isBrowserIE())				{					if (window.parent.tinyMCE)					{						window.parent.tinyMCE.selectedInstance.selection.moveToBookmark(window.parent.global_ie_bookmark);					}				}				tinyMCE.execInstanceCommand(editor, 'mceInsertContent',false,text);			}			var global_ie_bookmark = false;			function IeCursorFix()			{				if (isBrowserIE())				{					tinyMCE.execCommand('mceInsertContent', false, '');					global_ie_bookmark = tinyMCE.activeEditor.selection.getBookmark(false);				}				return true;			}";		$doc->addScriptDeclaration($js);		return true;	}	/**	 * Display the editor area.	 *	 * @param   string   The name of the editor area.	 * @param   string   The content of the field.	 * @param   string   The width of the editor area.	 * @param   string   The height of the editor area.	 * @param   int      The number of columns for the editor area.	 * @param   int      The number of rows for the editor area.	 * @param   boolean  True and the editor buttons will be displayed.	 * @param   string   An optional ID for the textarea. If not supplied the name is used.	 *	 * @return  string	 */	public function onDisplay($name, $content, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null)	{		if (empty($id))		{			$id = $name;		}		// Only add "px" to width and height if they are not given as a percentage		if (is_numeric($width))		{			$width .= 'px';		}		if (is_numeric($height))		{			$height .= 'px';		}		$editor  = '<textarea name="' . $name . '" id="' . $id .'" cols="' . $col .'" rows="' . $row . '" style="width: ' . $width . '; height:' . $height . ';" class="mce_editable">' . $content . "</textarea>\n" .		$this->_displayButtons($id, $buttons, $asset, $author) .		$this->_toogleButton($id);		return $editor;	}	/**	 *	 * @return  string	 */	private function _displayButtons($name, $buttons, $asset, $author)	{		// Load modal popup behavior		JHtml::_('behavior.modal', 'a.modal-button');		$args['name'] = $name;		$args['event'] = 'onGetInsertMethod';		$return = '';		$results[] = $this->update($args);		foreach ($results as $result)		{			if (is_string($result) && trim($result))			{				$return .= $result;			}		}		if (is_array($buttons) || (is_bool($buttons) && $buttons))		{			$results = $this->_subject->getButtons($name, $buttons, $asset, $author);			/*			 * This will allow plugins to attach buttons or change the behavior on the fly using AJAX			 */			$return .= "\n<div id=\"editor-xtd-buttons\" class=\"btn-toolbar pull-left\">\n";			$return .= "\n<div class=\"btn-toolbar\">\n";			foreach ($results as $button)			{				/*				 * Results should be an object				 */				if ( $button->get('name') )				{					$modal		= ($button->get('modal')) ? ' class="modal-button btn"' : null;					$href		= ($button->get('link')) ? ' class="btn" href="'.JURI::base().$button->get('link').'"' : null;					$onclick	= ($button->get('onclick')) ? ' onclick="'.$button->get('onclick').'"' : 'onclick="IeCursorFix(); return false;"';					$title      = ($button->get('title')) ? $button->get('title') : $button->get('text');					$return .= '<a' . $modal . ' title="' . $title . '"' . $href . $onclick . ' rel="' . $button->get('options')						. '"><i class="icon-' . $button->get('name'). '"></i> ' . $button->get('text') . "</a>\n";				}			}			$return .= "</div>\n";			$return .= "</div>\n";		}		return $return;	}	/**	 *	 * @return  string	 */	private function _toogleButton($name)	{		$return  = '';		$return .= "\n<div class=\"toggle-editor btn-toolbar pull-right\">\n";		$return .= "<div class=\"btn-group\"><a class=\"btn\" href=\"#\" onclick=\"tinyMCE.execCommand('mceToggleEditor', false, '" . $name . "');return false;\" title=\"".JText::_('PLG_TINY_BUTTON_TOGGLE_EDITOR').'"><i class="icon-eye"></i> '.JText::_('PLG_TINY_BUTTON_TOGGLE_EDITOR')."</a></div>";		$return .= "</div>\n";		$return .= "<div class=\"clearfix\"></div>\n";		return $return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of contact records. * * @package     Joomla.Administrator * @subpackage  com_contact */class ContactModelContacts extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'user_id', 'a.user_id',				'published', 'a.published',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'ul.name', 'linked_user',			);			$app = JFactory::getApplication();			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$config['filter_fields'][] = 'association';			}		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		// Adjust the context to support modal layouts.		if ($layout = $app->input->get('layout'))		{			$this->context .= '.' . $layout;		}		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$access = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$published = $this->getUserStateFromRequest($this->context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id');		$this->setState('filter.category_id', $categoryId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// force a language		$forcedLanguage = $app->input->get('forcedLanguage');		if (!empty($forcedLanguage))		{			$this->setState('filter.language', $forcedLanguage);			$this->setState('filter.forcedLanguage', $forcedLanguage);		}		$tag = $this->getUserStateFromRequest($this->context . '.filter.tag', 'filter_tag', '');		$this->setState('filter.tag', $tag);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.name, a.alias, a.checked_out, a.checked_out_time, a.catid, a.user_id' .					', a.published, a.access, a.created, a.created_by, a.ordering, a.featured, a.language' .					', a.publish_up, a.publish_down'			)		);		$query->from('#__contact_details AS a');		// Join over the users for the linked user.		$query->select('ul.name AS linked_user')			->join('LEFT', '#__users AS ul ON ul.id=a.user_id');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the associations.		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$query->select('COUNT(asso2.id)>1 as association')				->join('LEFT', '#__associations AS asso ON asso.id = a.id AND asso.context=' . $db->quote('com_contact.item'))				->join('LEFT', '#__associations AS asso2 ON asso2.key = asso.key')				->group('a.id');		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published = 0 OR a.published = 1)');		}		// Filter by a single or group of categories.		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$query->where('a.catid = ' . (int) $categoryId);		}		elseif (is_array($categoryId))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			$query->where('a.catid IN (' . $categoryId . ')');		}		// Filter by search in name.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'author:') === 0)			{				$search = $db->quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(uc.name LIKE ' . $search . ' OR uc.username LIKE ' . $search . ')');			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.name LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Filter by a single tag.		$tagId = $this->getState('filter.tag');		if (is_numeric($tagId))		{			$query->where($db->quoteName('tagmap.tag_id') . ' = ' . (int) $tagId)				->join(					'LEFT', $db->quoteName('#__contentitem_tag_map', 'tagmap')					. ' ON ' . $db->quoteName('tagmap.content_item_id') . ' = ' . $db->quoteName('a.id')					. ' AND ' . $db->quoteName('tagmap.type_alias') . ' = ' . $db->quote('com_contact.contact')				);		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering', 'a.name');		$orderDirn = $this->state->get('list.direction', 'asc');		if ($orderCol == 'a.ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');/** * Folder Media Controller * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaControllerFolder extends JControllerLegacy{	/**	 * Deletes paths from the current path	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function delete()	{		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$user	= JFactory::getUser();		// Get some data from the request		$tmpl   = $this->input->get('tmpl');		$paths  = $this->input->get('rm', array(), 'array');		$folder = $this->input->get('folder', '', 'path');		$redirect = 'index.php?option=com_media&folder=' . $folder;		if ($tmpl == 'component')		{			// We are inside the iframe			$redirect .= '&view=mediaList&tmpl=component';		}		$this->setRedirect($redirect);		// Just return if there's nothing to do		if (empty($paths))		{			return true;		}		if (!$user->authorise('core.delete', 'com_media'))		{			// User is not authorised to delete			JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'));			return false;		}		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');		$ret = true;		JPluginHelper::importPlugin('content');		$dispatcher	= JEventDispatcher::getInstance();		if (count($paths))		{			foreach ($paths as $path)			{				if ($path !== JFile::makeSafe($path))				{					$dirname = htmlspecialchars($path, ENT_COMPAT, 'UTF-8');					JError::raiseWarning(100, JText::sprintf('COM_MEDIA_ERROR_UNABLE_TO_DELETE_FOLDER_WARNDIRNAME', substr($dirname, strlen(COM_MEDIA_BASE))));					continue;				}				$fullPath = JPath::clean(implode(DIRECTORY_SEPARATOR, array(COM_MEDIA_BASE, $folder, $path)));				$object_file = new JObject(array('filepath' => $fullPath));				if (is_file($object_file->filepath))				{					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger('onContentBeforeDelete', array('com_media.file', &$object_file));					if (in_array(false, $result, true))					{						// There are some errors in the plugins						JError::raiseWarning(100, JText::plural('COM_MEDIA_ERROR_BEFORE_DELETE', count($errors = $object_file->getErrors()), implode('<br />', $errors)));						continue;					}					$ret &= JFile::delete($object_file->filepath);					// Trigger the onContentAfterDelete event.					$dispatcher->trigger('onContentAfterDelete', array('com_media.file', &$object_file));					$this->setMessage(JText::sprintf('COM_MEDIA_DELETE_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));				}				elseif (is_dir($object_file->filepath))				{					$contents = JFolder::files($object_file->filepath, '.', true, false, array('.svn', 'CVS', '.DS_Store', '__MACOSX', 'index.html'));					if (empty($contents))					{						// Trigger the onContentBeforeDelete event.						$result = $dispatcher->trigger('onContentBeforeDelete', array('com_media.folder', &$object_file));						if (in_array(false, $result, true))						{							// There are some errors in the plugins							JError::raiseWarning(100, JText::plural('COM_MEDIA_ERROR_BEFORE_DELETE', count($errors = $object_file->getErrors()), implode('<br />', $errors)));							continue;						}						$ret &= !JFolder::delete($object_file->filepath);						// Trigger the onContentAfterDelete event.						$dispatcher->trigger('onContentAfterDelete', array('com_media.folder', &$object_file));						$this->setMessage(JText::sprintf('COM_MEDIA_DELETE_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));					}					else					{						//This makes no sense...						JError::raiseWarning(100, JText::sprintf('COM_MEDIA_ERROR_UNABLE_TO_DELETE_FOLDER_NOT_EMPTY', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));					}				}			}		}		return $ret;	}	/**	 * Create a folder	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function create()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user  = JFactory::getUser();		$folder      = $this->input->get('foldername', '');		$folderCheck = (string) $this->input->get('foldername', null, 'raw');		$parent      = $this->input->get('folderbase', '', 'path');		$this->setRedirect('index.php?option=com_media&folder=' . $parent . '&tmpl=' . $this->input->get('tmpl', 'index'));		if (strlen($folder) > 0)		{			if (!$user->authorise('core.create', 'com_media'))			{				// User is not authorised to delete				JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_CREATE_NOT_PERMITTED'));				return false;			}			// Set FTP credentials, if given			JClientHelper::setCredentialsFromRequest('ftp');			$this->input->set('folder', $parent);			if (($folderCheck !== null) && ($folder !== $folderCheck))			{				$this->setMessage(JText::_('COM_MEDIA_ERROR_UNABLE_TO_CREATE_FOLDER_WARNDIRNAME'));				return false;			}			$path = JPath::clean(COM_MEDIA_BASE . '/' . $parent . '/' . $folder);			if (!is_dir($path) && !is_file($path))			{				// Trigger the onContentBeforeSave event.				$object_file = new JObject(array('filepath' => $path));				JPluginHelper::importPlugin('content');				$dispatcher	= JEventDispatcher::getInstance();				$result = $dispatcher->trigger('onContentBeforeSave', array('com_media.folder', &$object_file));				if (in_array(false, $result, true))				{					// There are some errors in the plugins					JError::raiseWarning(100, JText::plural('COM_MEDIA_ERROR_BEFORE_SAVE', count($errors = $object_file->getErrors()), implode('<br />', $errors)));					return false;				}				JFolder::create($object_file->filepath);				$data = "<html>\n<body bgcolor=\"#FFFFFF\">\n</body>\n</html>";				JFile::write($object_file->filepath . "/index.html", $data);				// Trigger the onContentAfterSave event.				$dispatcher->trigger('onContentAfterSave', array('com_media.folder', &$object_file, true));				$this->setMessage(JText::sprintf('COM_MEDIA_CREATE_COMPLETE', substr($object_file->filepath, strlen(COM_MEDIA_BASE))));			}			$this->input->set('folder', ($parent) ? $parent.'/'.$folder : $folder);		}		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  UCM * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * UCM Class for handling content types * * @package     Joomla.Libraries * @subpackage  UCM * @since       3.1 */class JUcmType implements JUcm{	/**	 * The UCM Type	 *	 * @var    JUcmType	 * @since  3.1	 */	public $type;	/**	* The Database object	*	* @var    JDatabaseDriver	* @since  3.1	*/	protected $db;	/**	* The alias for the content type	*	* @var	  string	* @since  3.1	*/	protected $alias;	/**	 * @param  string            $alias        The alias for the item	 * @param  JDatabaseDriver   $database     The database object	 * @param  JApplicationBase  $application  The application object	 */	public function __construct($alias = null, JDatabaseDriver $database = null, JApplicationBase $application = null)	{		$this->db = $database ? $database : JFactory::getDbo();		$app      = $application ? $application : JFactory::getApplication();		// Make the best guess we can in the absence of information.		$this->alias = $alias ? $alias : $app->input->get('option') . '.' . $app->input->get('view');		$this->type  = $this->getType();	}	/**	* Get the Content Type	*	* @param   integer  $pk  The primary key of the alias type	*	* @return  object  The UCM Type data	*	* @since   3.1	*/	public function getType($pk = null)	{		if (!$pk)		{			$pk = $this->getTypeId();		}		$query	= $this->db->getQuery(true);		$query->select('ct.*');		$query->from($this->db->quoteName('#__content_types', 'ct'));		$query->where($this->db->quoteName('ct.type_id') . ' = ' . (int) $pk);		$this->db->setQuery($query);		$type = $this->db->loadObject();		return $type;	}	/**	 * Retrieves the UCM type ID	 *	 * @param   string  $alias  The string of the type alias	 *	 * @return  integer  The ID of the requested type	 *	 * @since   3.1	 */	public function getTypeId($alias = null)	{		if (!$alias)		{			$alias = $this->alias;		}		$query = $this->db->getQuery(true);		$query->select('ct.type_id');		$query->from($this->db->quoteName('#__content_types', 'ct'));		$query->where($this->db->quoteName('ct.type_alias') . ' = ' . $this->db->q($alias));		$this->db->setQuery($query);		$id = $this->db->loadResult();		return $id;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5 */abstract class InstallerHtmlManage{	/**	 * Returns a published state on a grid	 *	 * @param   integer       $value			The state value.	 * @param   integer       $i				The row index	 * @param   boolean       $enabled			An optional setting for access control on the action.	 * @param   string        $checkbox			An optional prefix for checkboxes.	 *	 * @return  string        The Html code	 *	 * @see JHtmlJGrid::state	 *	 * @since   2.5	 */	public static function state($value, $i, $enabled = true, $checkbox = 'cb')	{		$states	= array(			2	=> array(				'',				'COM_INSTALLER_EXTENSION_PROTECTED',				'',				'COM_INSTALLER_EXTENSION_PROTECTED',				false,				'protected',				'protected'			),			1	=> array(				'unpublish',				'COM_INSTALLER_EXTENSION_ENABLED',				'COM_INSTALLER_EXTENSION_DISABLE',				'COM_INSTALLER_EXTENSION_ENABLED',				false,				'publish',				'publish'			),			0	=> array(				'publish',				'COM_INSTALLER_EXTENSION_DISABLED',				'COM_INSTALLER_EXTENSION_ENABLE',				'COM_INSTALLER_EXTENSION_DISABLED',				false,				'unpublish',				'unpublish'			),		);		return JHtml::_('jgrid.state', $states, $value, $i, 'manage.', $enabled, true, $checkbox);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update's Update View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.4 */class JoomlaupdateViewUpdate extends JViewLegacy{	/**	 * Renders the view	 *	 * @param   string  $tpl  Template name	 *	 * @return void	 */	public function display($tpl=null)	{		$password = JFactory::getApplication()->getUserState('com_joomlaupdate.password', null);		$filesize = JFactory::getApplication()->getUserState('com_joomlaupdate.filesize', null);		$ajaxUrl = JURI::base().'components/com_joomlaupdate/restore.php';		$returnUrl = 'index.php?option=com_joomlaupdate&task=update.finalise';		// Set the toolbar information		JToolbarHelper::title(JText::_('COM_JOOMLAUPDATE_OVERVIEW'), 'install');		JToolBarHelper::divider();		JToolBarHelper::help('JHELP_COMPONENTS_JOOMLA_UPDATE');		// Add toolbar buttons		if (JFactory::getUser()->authorise('core.admin', 'com_joomlaupdate'))		{			JToolbarHelper::preferences('com_joomlaupdate');		}		// Load mooTools		JHtml::_('behavior.framework', true);		$updateScript = <<<ENDSCRIPTvar joomlaupdate_password = '$password';var joomlaupdate_totalsize = '$filesize';var joomlaupdate_ajax_url = '$ajaxUrl';var joomlaupdate_return_url = '$returnUrl';ENDSCRIPT;		// Load our Javascript		$document = JFactory::getDocument();		$document->addScript('../media/com_joomlaupdate/json2.js');		$document->addScript('../media/com_joomlaupdate/encryption.js');		$document->addScript('../media/com_joomlaupdate/update.js');		JHtml::_('script', 'system/progressbar.js', true, true);		JHtml::_('stylesheet', 'media/mediamanager.css', array(), true);		$document->addScriptDeclaration($updateScript);		// Render the view		parent::display($tpl);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Form Field to display a list of the layouts for a component view from * the extension or template overrides. * * @package     Joomla.Legacy * @subpackage  Form * @since       11.1 */class JFormFieldComponentlayout extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'ComponentLayout';	/**	 * Method to get the field input for a component layout field.	 *	 * @return  string   The field input.	 *	 * @since   11.1	 */	protected function getInput()	{		// Get the client id.		$clientId = $this->element['client_id'];		if (is_null($clientId) && $this->form instanceof JForm)		{			$clientId = $this->form->getValue('client_id');		}		$clientId = (int) $clientId;		$client = JApplicationHelper::getClientInfo($clientId);		// Get the extension.		$extn = (string) $this->element['extension'];		if (empty($extn) && ($this->form instanceof JForm))		{			$extn = $this->form->getValue('extension');		}		$extn = preg_replace('#\W#', '', $extn);		// Get the template.		$template = (string) $this->element['template'];		$template = preg_replace('#\W#', '', $template);		// Get the style.		if ($this->form instanceof JForm)		{			$template_style_id = $this->form->getValue('template_style_id');		}		$template_style_id = preg_replace('#\W#', '', $template_style_id);		// Get the view.		$view = (string) $this->element['view'];		$view = preg_replace('#\W#', '', $view);		// If a template, extension and view are present build the options.		if ($extn && $view && $client)		{			// Load language file			$lang = JFactory::getLanguage();			$lang->load($extn . '.sys', JPATH_ADMINISTRATOR, null, false, false)				|| $lang->load($extn . '.sys', JPATH_ADMINISTRATOR . '/components/' . $extn, null, false, false)				|| $lang->load($extn . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				|| $lang->load($extn . '.sys', JPATH_ADMINISTRATOR . '/components/' . $extn, $lang->getDefault(), false, false);			// Get the database object and a new query object.			$db = JFactory::getDbo();			$query = $db->getQuery(true);			// Build the query.			$query->select('e.element, e.name')				->from('#__extensions as e')				->where('e.client_id = ' . (int) $clientId)				->where('e.type = ' . $db->quote('template'))				->where('e.enabled = 1');			if ($template)			{				$query->where('e.element = ' . $db->quote($template));			}			if ($template_style_id)			{				$query->join('LEFT', '#__template_styles as s on s.template=e.element')					->where('s.id=' . (int) $template_style_id);			}			// Set the query and load the templates.			$db->setQuery($query);			$templates = $db->loadObjectList('element');			// Build the search paths for component layouts.			$component_path = JPath::clean($client->path . '/components/' . $extn . '/views/' . $view . '/tmpl');			// Prepare array of component layouts			$component_layouts = array();			// Prepare the grouped list			$groups = array();			// Add a Use Global option if useglobal="true" in XML file			if ($this->element['useglobal'] == 'true')			{				$groups[JText::_('JOPTION_FROM_STANDARD')]['items'][] = JHtml::_('select.option', '', JText::_('JGLOBAL_USE_GLOBAL'));			}			// Add the layout options from the component path.			if (is_dir($component_path) && ($component_layouts = JFolder::files($component_path, '^[^_]*\.xml$', false, true)))			{				// Create the group for the component				$groups['_'] = array();				$groups['_']['id'] = $this->id . '__';				$groups['_']['text'] = JText::sprintf('JOPTION_FROM_COMPONENT');				$groups['_']['items'] = array();				foreach ($component_layouts as $i => $file)				{					// Attempt to load the XML file.					if (!$xml = simplexml_load_file($file))					{						unset($component_layouts[$i]);						continue;					}					// Get the help data from the XML file if present.					if (!$menu = $xml->xpath('layout[1]'))					{						unset($component_layouts[$i]);						continue;					}					$menu = $menu[0];					// Add an option to the component group					$value = basename($file, '.xml');					$component_layouts[$i] = $value;					$text = isset($menu['option']) ? JText::_($menu['option']) : (isset($menu['title']) ? JText::_($menu['title']) : $value);					$groups['_']['items'][] = JHtml::_('select.option', '_:' . $value, $text);				}			}			// Loop on all templates			if ($templates)			{				foreach ($templates as $template)				{					// Load language file					$lang->load('tpl_' . $template->element . '.sys', $client->path, null, false, false)						|| $lang->load('tpl_' . $template->element . '.sys', $client->path . '/templates/' . $template->element, null, false, false)						|| $lang->load('tpl_' . $template->element . '.sys', $client->path, $lang->getDefault(), false, false)						|| $lang->load(						'tpl_' . $template->element . '.sys', $client->path . '/templates/' . $template->element, $lang->getDefault(), false, false					);					$template_path = JPath::clean($client->path . '/templates/' . $template->element . '/html/' . $extn . '/' . $view);					// Add the layout options from the template path.					if (is_dir($template_path) && ($files = JFolder::files($template_path, '^[^_]*\.php$', false, true)))					{						// Files with corresponding XML files are alternate menu items, not alternate layout files						// so we need to exclude these files from the list.						$xml_files = JFolder::files($template_path, '^[^_]*\.xml$', false, true);						for ($j = 0, $count = count($xml_files); $j < $count; $j++)						{							$xml_files[$j] = basename($xml_files[$j], '.xml');						}						foreach ($files as $i => $file)						{							// Remove layout files that exist in the component folder or that have XML files							if ((in_array(basename($file, '.php'), $component_layouts))								|| (in_array(basename($file, '.php'), $xml_files)))							{								unset($files[$i]);							}						}						if (count($files))						{							// Create the group for the template							$groups[$template->name] = array();							$groups[$template->name]['id'] = $this->id . '_' . $template->element;							$groups[$template->name]['text'] = JText::sprintf('JOPTION_FROM_TEMPLATE', $template->name);							$groups[$template->name]['items'] = array();							foreach ($files as $file)							{								// Add an option to the template group								$value = basename($file, '.php');								$text = $lang									->hasKey($key = strtoupper('TPL_' . $template->name . '_' . $extn . '_' . $view . '_LAYOUT_' . $value))									? JText::_($key) : $value;								$groups[$template->name]['items'][] = JHtml::_('select.option', $template->element . ':' . $value, $text);							}						}					}				}			}			// Compute attributes for the grouped list			$attr = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';			// Prepare HTML code			$html = array();			// Compute the current selected values			$selected = array($this->value);			// Add a grouped list			$html[] = JHtml::_(				'select.groupedlist', $groups, $this->name,				array('id' => $this->id, 'group.id' => 'id', 'list.attr' => $attr, 'list.select' => $selected)			);			return implode($html);		}		else		{			return '';		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Function to build a Users URL route. * * @return  array  The array of query string values for which to build a route. * @return  array  The URL route with segments represented as an array. * @since    1.5 */function UsersBuildRoute(&$query){	// Declare static variables.	static $items;	static $default;	static $registration;	static $profile;	static $login;	static $remind;	static $resend;	static $reset;	$segments = array();	// Get the relevant menu items if not loaded.	if (empty($items))	{		// Get all relevant menu items.		$app = JFactory::getApplication();		$menu = $app->getMenu();		$items = $menu->getItems('component', 'com_users');		// Build an array of serialized query strings to menu item id mappings.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			// Check to see if we have found the resend menu item.			if (empty($resend) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'resend'))			{				$resend = $items[$i]->id;			}			// Check to see if we have found the reset menu item.			if (empty($reset) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'reset'))			{				$reset = $items[$i]->id;			}			// Check to see if we have found the remind menu item.			if (empty($remind) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'remind'))			{				$remind = $items[$i]->id;			}			// Check to see if we have found the login menu item.			if (empty($login) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'login'))			{				$login = $items[$i]->id;			}			// Check to see if we have found the registration menu item.			if (empty($registration) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'registration'))			{				$registration = $items[$i]->id;			}			// Check to see if we have found the profile menu item.			if (empty($profile) && !empty($items[$i]->query['view']) && ($items[$i]->query['view'] == 'profile'))			{				$profile = $items[$i]->id;			}		}		// Set the default menu item to use for com_users if possible.		if ($profile)		{			$default = $profile;		}		elseif ($registration)		{			$default = $registration;		}		elseif ($login)		{			$default = $login;		}	}	if (!empty($query['view']))	{		switch ($query['view'])		{			case 'reset':				if ($query['Itemid'] = $reset)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				break;			case 'resend':				if ($query['Itemid'] = $resend)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				break;			case 'remind':				if ($query['Itemid'] = $remind)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				break;			case 'login':				if ($query['Itemid'] = $login)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				break;			case 'registration':				if ($query['Itemid'] = $registration)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				break;			default:			case 'profile':				if (!empty($query['view']))				{					$segments[] = $query['view'];				}				unset ($query['view']);				if ($query['Itemid'] = $profile)				{					unset ($query['view']);				}				else				{					$query['Itemid'] = $default;				}				// Only append the user id if not "me".				$user = JFactory::getUser();				if (!empty($query['user_id']) && ($query['user_id'] != $user->id))				{					$segments[] = $query['user_id'];				}				unset ($query['user_id']);				break;		}	}	return $segments;}/** * Function to parse a Users URL route. * * @return  array  The URL route with segments represented as an array. * @return  array  The array of variables to set in the request. * @since    1.5 */function UsersParseRoute($segments){	$vars = array();	// Only run routine if there are segments to parse.	if (count($segments) < 1)	{		return;	}	// Get the package from the route segments.	$userId = array_pop($segments);	if (!is_numeric($userId))	{		$vars['view'] = 'profile';		return $vars;	}	if (is_numeric($userId))	{		// Get the package id from the packages table by alias.		$db = JFactory::getDbo();		$db->setQuery(			'SELECT ' . $db->quoteName('id') .				' FROM ' . $db->quoteName('#__users') .				' WHERE ' . $db->quoteName('id') . ' = ' . (int) $userId		);		$userId = $db->loadResult();	}	// Set the package id if present.	if ($userId)	{		// Set the package id.		$vars['user_id'] = (int) $userId;		// Set the view to package if not already set.		if (empty($vars['view']))		{			$vars['view'] = 'profile';		}	}	else	{		JError::raiseError(404, JText::_('JGLOBAL_RESOURCE_NOT_FOUND'));	}	return $vars;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Joomla! update controller for the Update view * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateControllerUpdate extends JControllerLegacy{	/**	 * Performs the download of the update package	 *	 * @return  void	 *	 * @since   2.5.4	 */	public function download()	{		$this->_applyCredentials();		$model = $this->getModel('Default');		$file = $model->download();		$message = null;		$messageType = null;		if ($file)		{			JFactory::getApplication()->setUserState('com_joomlaupdate.file', $file);			$url = 'index.php?option=com_joomlaupdate&task=update.install';		}		else		{			JFactory::getApplication()->setUserState('com_joomlaupdate.file', null);			$url = 'index.php?option=com_joomlaupdate';			$message = JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_DOWNLOADFAILED');		}		$this->setRedirect($url, $message, $messageType);	}	/**	 * Start the installation of the new Joomla! version	 *	 * @return  void	 *	 * @since   2.5.4	 */	public function install()	{		$this->_applyCredentials();		$model = $this->getModel('Default');		$file = JFactory::getApplication()->getUserState('com_joomlaupdate.file', null);		$model->createRestorationFile($file);		$this->display();	}	/**	 * Finalise the upgrade by running the necessary scripts	 *	 * @return  void	 *	 * @since   2.5.4	 */	public function finalise()	{		$this->_applyCredentials();		$model = $this->getModel('Default');		$model->finaliseUpgrade();		$url = 'index.php?option=com_joomlaupdate&task=update.cleanup';		$this->setRedirect($url);	}	/**	 * Clean up after ourselves	 *	 * @return  void	 *	 * @since   2.5.4	 */	public function cleanup()	{		$this->_applyCredentials();		$model = $this->getModel('Default');		$model->cleanUp();		$url = 'index.php?option=com_joomlaupdate&layout=complete';		$this->setRedirect($url);	}	/**	 * Purges updates.	 *	 * @return  void	 *	 * @since	3.0	 */	public function purge()	{		// Purge updates		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Default');		$model->purge();		$url = 'index.php?option=com_joomlaupdate';		$this->setRedirect($url, $model->_message);	}	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JoomlaupdateControllerUpdate  This object to support chaining.	 *	 * @since	2.5.4	 */	public function display($cachable = false, $urlparams = array())	{		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'update');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			// Get the model for the view.			$model = $this->getModel('Default');			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			$view->display();		}		return $this;	}	/**	 * Applies FTP credentials to Joomla! itself, when required	 *	 * @return  void	 *	 * @since	2.5.4	 */	protected function _applyCredentials()	{		if (!JClientHelper::hasCredentials('ftp'))		{			$user = JFactory::getApplication()->getUserStateFromRequest('com_joomlaupdate.ftp_user', 'ftp_user', null, 'raw');			$pass = JFactory::getApplication()->getUserStateFromRequest('com_joomlaupdate.ftp_pass', 'ftp_pass', null, 'raw');			if ($user != '' && $pass != '')			{				// Add credentials to the session				if (JClientHelper::setCredentials('ftp', $user, $pass))				{					$return = false;				}				else				{					$return = JError::raiseWarning('SOME_ERROR_CODE', JText::_('JLIB_CLIENT_ERROR_HELPER_SETCREDENTIALSFROMREQUEST_FAILED'));				}			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform PDO Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/pdo * @since       12.1 */abstract class JDatabaseDriverPdo extends JDatabaseDriver{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'pdo';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = "'";	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 * @since  12.1	 */	protected $nullDate = '0000-00-00 00:00:00';	/**	 * @var    resource  The prepared statement.	 * @since  12.1	 */	protected $prepared;	/**	 * Contains the current query execution status	 *	 * @var array	 * @since 12.1	 */	protected $executed = false;	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['driver'] = (isset($options['driver'])) ? $options['driver'] : 'odbc';		$options['dsn'] = (isset($options['dsn'])) ? $options['dsn'] : '';		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['user'] = (isset($options['user'])) ? $options['user'] : '';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['driverOptions'] = (isset($options['driverOptions'])) ? $options['driverOptions'] : array();		// Finalize initialisation		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		// Initialize the connection string variable:		$connectionString = '';		$replace = array();		$with = array();		// Find the correct PDO DSN Format to use:		switch ($this->options['driver'])		{			case 'cubrid':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 33000;				$format = 'cubrid:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'dblib':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1433;				$format = 'dblib:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'firebird':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 3050;				$format = 'firebird:dbname=#DBNAME#';				$replace = array('#DBNAME#');				$with = array($this->options['database']);				break;			case 'ibm':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 56789;				if (!empty($this->options['dsn']))				{					$format = 'ibm:DSN=#DSN#';					$replace = array('#DSN#');					$with = array($this->options['dsn']);				}				else				{					$format = 'ibm:hostname=#HOST#;port=#PORT#;database=#DBNAME#';					$replace = array('#HOST#', '#PORT#', '#DBNAME#');					$with = array($this->options['host'], $this->options['port'], $this->options['database']);				}				break;			case 'informix':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1526;				$this->options['protocol'] = (isset($this->options['protocol'])) ? $this->options['protocol'] : 'onsoctcp';				if (!empty($this->options['dsn']))				{					$format = 'informix:DSN=#DSN#';					$replace = array('#DSN#');					$with = array($this->options['dsn']);				}				else				{					$format = 'informix:host=#HOST#;service=#PORT#;database=#DBNAME#;server=#SERVER#;protocol=#PROTOCOL#';					$replace = array('#HOST#', '#PORT#', '#DBNAME#', '#SERVER#', '#PROTOCOL#');					$with = array($this->options['host'], $this->options['port'], $this->options['database'], $this->options['server'], $this->options['protocol']);				}				break;			case 'mssql':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1433;				$format = 'mssql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'mysql':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 3306;				$format = 'mysql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'oci':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1521;				$this->options['charset'] = (isset($this->options['charset'])) ? $this->options['charset'] : 'AL32UTF8';				if (!empty($this->options['dsn']))				{					$format = 'oci:dbname=#DSN#';					$replace = array('#DSN#');					$with = array($this->options['dsn']);				}				else				{					$format = 'oci:dbname=//#HOST#:#PORT#/#DBNAME#';					$replace = array('#HOST#', '#PORT#', '#DBNAME#');					$with = array($this->options['host'], $this->options['port'], $this->options['database']);				}				$format .= ';charset=' . $this->options['charset'];				break;			case 'odbc':				$format = 'odbc:DSN=#DSN#;UID:#USER#;PWD=#PASSWORD#';				$replace = array('#DSN#', '#USER#', '#PASSWORD#');				$with = array($this->options['dsn'], $this->options['user'], $this->options['password']);				break;			case 'pgsql':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 5432;				$format = 'pgsql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'sqlite':				if (isset($this->options['version']) && $this->options['version'] == 2)				{					$format = 'sqlite2:#DBNAME#';				}				else				{					$format = 'sqlite:#DBNAME#';				}				$replace = array('#DBNAME#');				$with = array($this->options['database']);				break;			case 'sybase':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1433;				$format = 'mssql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;		}		// Create the connection string:		$connectionString = str_replace($replace, $with, $format);		// Make sure the PDO extension for PHP is installed and enabled.		if (!self::isSupported())		{			throw new RuntimeException('PDO Extension is not available.', 1);		}		try		{			$this->connection = new PDO(				$connectionString,				$this->options['user'],				$this->options['password'],				$this->options['driverOptions']			);		}		catch (PDOException $e)		{			throw new RuntimeException('Could not connect to PDO: ' . $e->getMessage(), 2, $e);		}	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * Oracle escaping reference:	 * http://www.orafaq.com/wiki/SQL_FAQ#How_does_one_escape_special_characters_when_writing_SQL_queries.3F	 *	 * SQLite escaping notes:	 * http://www.sqlite.org/faq.html#q14	 *	 * Method body is as implemented by the Zend Framework	 *	 * Note: Using query objects with bound variables is	 * preferable to the below.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Unused optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		if (is_int($text) || is_float($text))		{			return $text;		}		$text = str_replace("'", "''", $text);		return addcslashes($text, "\000\n\r\\\032");	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 * @throws  Exception	 */	public function execute()	{		$this->connect();		if (!is_object($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			// @TODO			$query .= ' LIMIT ' . $this->offset . ', ' . $this->limit;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query.		$this->executed = false;		if ($this->prepared instanceof PDOStatement)		{			// Bind the variables:			if ($this->sql instanceof JDatabaseQueryPreparable)			{				$bounded =& $this->sql->getBounded();				foreach ($bounded as $key => $obj)				{					$this->prepared->bindParam($key, $obj->value, $obj->dataType, $obj->length, $obj->driverOptions);				}			}			$this->executed = $this->prepared->execute();		}		// If an error occurred handle it.		if (!$this->executed)		{			// Get the error number and message before we execute any more queries.			$errorNum = (int) $this->connection->errorCode();			$errorMsg = (string) 'SQL: ' . implode(", ", $this->connection->errorInfo());			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					// Get the error number and message.					$this->errorNum = (int) $this->connection->errorCode();					$this->errorMsg = (string) 'SQL: ' . implode(", ", $this->connection->errorInfo());					// Throw the normal query exception.					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				// Get the error number and message from before we tried to reconnect.				$this->errorNum = $errorNum;				$this->errorMsg = $errorMsg;				// Throw the normal query exception.				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->prepared;	}	/**	 * Retrieve a PDO database connection attribute	 * http://www.php.net/manual/en/pdo.getattribute.php	 *	 * Usage: $db->getOption(PDO::ATTR_CASE);	 *	 * @param   mixed  $key  One of the PDO::ATTR_* Constants	 *	 * @return mixed	 *	 * @since  12.1	 */	public function getOption($key)	{		$this->connect();		return $this->connection->getAttribute($key);	}	/**	 * Get a query to run and verify the database is operational.	 *	 * @return  string  The query to check the health of the DB.	 *	 * @since   12.2	 */	public function getConnectedQuery()	{		return 'SELECT 1';	}	/**	 * Sets an attribute on the PDO database handle.	 * http://www.php.net/manual/en/pdo.setattribute.php	 *	 * Usage: $db->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);	 *	 * @param   integer  $key    One of the PDO::ATTR_* Constants	 * @param   mixed    $value  One of the associated PDO Constants	 *                           related to the particular attribute	 *                           key.	 *	 * @return boolean	 *	 * @since  12.1	 */	public function setOption($key, $value)	{		$this->connect();		return $this->connection->setAttribute($key, $value);	}	/**	 * Test to see if the PDO extension is available.	 * Override as needed to check for specific PDO Drivers.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return defined('PDO::ATTR_DRIVER_NAME');	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		// Flag to prevent recursion into this function.		static $checkingConnected = false;		if ($checkingConnected)		{			// Reset this flag and throw an exception.			$checkingConnected = true;			die('Recursion trying to check if connected.');		}		// Backup the query state.		$query = $this->sql;		$limit = $this->limit;		$offset = $this->offset;		$prepared = $this->prepared;		try		{			// Set the checking connection flag.			$checkingConnected = true;			// Run a simple query to check the connection.			$this->setQuery($this->getConnectedQuery());			$status = (bool) $this->loadResult();		}		// If we catch an exception here, we must not be connected.		catch (Exception $e)		{			$status = false;		}		// Restore the query state.		$this->sql = $query;		$this->limit = $limit;		$this->offset = $offset;		$this->prepared = $prepared;		$checkingConnected = false;		return $status;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 * Only applicable for DELETE, INSERT, or UPDATE statements.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->rowCount();		}		else		{			return 0;		}	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		$this->connect();		if ($cursor instanceof PDOStatement)		{			return $cursor->rowCount();		}		elseif ($this->prepared instanceof PDOStatement)		{			return $this->prepared->rowCount();		}		else		{			return 0;		}	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		// Error suppress this to prevent PDO warning us that the driver doesn't support this operation.		return @$this->connection->lastInsertId();	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		return true;	}	/**	 * Sets the SQL statement string for later execution.	 *	 * @param   mixed    $query          The SQL statement to set either as a JDatabaseQuery object or a string.	 * @param   integer  $offset         The affected row offset to set.	 * @param   integer  $limit          The maximum affected rows to set.	 * @param   array    $driverOptions  The optional PDO driver options	 *	 * @return  JDatabaseDriver  This object to support method chaining.	 *	 * @since   12.1	 */	public function setQuery($query, $offset = null, $limit = null, $driverOptions = array())	{		$this->connect();		$this->freeResult();		if (is_string($query))		{			// Allows taking advantage of bound variables in a direct query:			$query = $this->getQuery(true)->setQuery($query);		}		if ($query instanceof JDatabaseQueryLimitable && !is_null($offset) && !is_null($limit))		{			$query->setLimit($limit, $offset);		}		$query = $this->replacePrefix((string) $query);		$this->prepared = $this->connection->prepare($query, $driverOptions);		// Store reference to the JDatabaseQuery instance:		parent::setQuery($query, $offset, $limit);		return $this;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		return false;	}	/**	 * Method to commit a transaction.	 *	 * @return  bool	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		return $this->connection->commit();	}	/**	 * Method to roll back a transaction.	 *	 * @return  bool	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionRollback()	{		$this->connect();		return $this->connection->rollBack();	}	/**	 * Method to initialize a transaction.	 *	 * @return  bool	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		return $this->connection->beginTransaction();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		if (!empty($cursor) && $cursor instanceof PDOStatement)		{			return $cursor->fetch(PDO::FETCH_NUM);		}		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->fetch(PDO::FETCH_NUM);		}	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		if (!empty($cursor) && $cursor instanceof PDOStatement)		{			return $cursor->fetch(PDO::FETCH_ASSOC);		}		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->fetch(PDO::FETCH_ASSOC);		}	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   Unused, only necessary so method signature will be the same as parent.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		if (!empty($cursor) && $cursor instanceof PDOStatement)		{			return $cursor->fetchObject($class);		}		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->fetchObject($class);		}	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		$this->executed = false;		if ($cursor instanceof PDOStatement)		{			$cursor->closeCursor();			$cursor = null;		}		if ($this->prepared instanceof PDOStatement)		{			$this->prepared->closeCursor();			$this->prepared = null;		}	}	/**	 * Method to get the next row in the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The result of the query as an array, false if there are no more rows.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadNextObject($class = 'stdClass')	{		$this->connect();		// Execute the query and get the result set cursor.		if (!$this->executed)		{			if (!($this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchObject(null, $class))		{			return $row;		}		// Free up system resources and return.		$this->freeResult();		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadNextAssoc()	{		$this->connect();		// Execute the query and get the result set cursor.		if (!$this->executed)		{			if (!($this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchAssoc())		{			return $row;		}		// Free up system resources and return.		$this->freeResult();		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadNextRow()	{		$this->connect();		// Execute the query and get the result set cursor.		if (!$this->executed)		{			if (!($this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchArray())		{			return $row;		}		// Free up system resources and return.		$this->freeResult();		return false;	}	/**	 * PDO does not support serialize	 *	 * @return  array	 *	 * @since   12.3	 */	public function __sleep()	{		$serializedProperties = array();		$reflect = new ReflectionClass($this);		// Get properties of the current class		$properties = $reflect->getProperties();		foreach ($properties as $key => $property)		{			// Do not serialize properties that are PDO			if ($property->isStatic() == false && !($this->{$property->name} instanceof PDO))			{				array_push($serializedProperties, $property->name);			}		}		return $serializedProperties;	}	/**	 * Wake up after serialization	 *	 * @return  array	 *	 * @since   12.3	 */	public function __wakeup()	{		// Get connection back		$this->__construct($this->options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');JFormHelper::loadFieldClass('list');/** * Supports an HTML select list of files * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldFileList extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'FileList';	/**	 * Method to get the list of files for the field options.	 * Specify the target directory with a directory attribute	 * Attributes allow an exclude mask and stripping of extensions from file name.	 * Default attribute may optionally be set to null (no file) or -1 (use a default).	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Initialize some field attributes.		$filter = (string) $this->element['filter'];		$exclude = (string) $this->element['exclude'];		$stripExt = (string) $this->element['stripext'];		$hideNone = (string) $this->element['hide_none'];		$hideDefault = (string) $this->element['hide_default'];		// Get the path in which to search for file options.		$path = (string) $this->element['directory'];		if (!is_dir($path))		{			$path = JPATH_ROOT . '/' . $path;		}		// Prepend some default options based on field attributes.		if (!$hideNone)		{			$options[] = JHtml::_('select.option', '-1', JText::alt('JOPTION_DO_NOT_USE', preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)));		}		if (!$hideDefault)		{			$options[] = JHtml::_('select.option', '', JText::alt('JOPTION_USE_DEFAULT', preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)));		}		// Get a list of files in the search path with the given filter.		$files = JFolder::files($path, $filter);		// Build the options list from the list of files.		if (is_array($files))		{			foreach ($files as $file)			{				// Check to see if the file is in the exclude mask.				if ($exclude)				{					if (preg_match(chr(1) . $exclude . chr(1), $file))					{						continue;					}				}				// If the extension is to be stripped, do it.				if ($stripExt)				{					$file = JFile::stripExt($file);				}				$options[] = JHtml::_('select.option', $file, $file);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Strings JSON Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesControllerStrings extends JControllerAdmin{	/**	 * Constructor	 *	 * @param   	array	An optional associative array of configuration settings	 *	 * @return  void	 *	 * @since		2.5	 */	public function __construct($config = array())	{		parent::__construct($config);		require_once JPATH_COMPONENT . '/helpers/jsonresponse.php';	}	/**	 * Method for refreshing the cache in the database with the known language strings	 *	 * @return  void	 *	 * @since		2.5	 */	public function refresh()	{		echo new JJsonResponse($this->getModel('strings')->refresh());	}	/**	 * Method for searching language strings	 *	 * @return  void	 *	 * @since		2.5	 */	public function search()	{		echo new JJsonResponse($this->getModel('strings')->search());	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Extended Utility class for batch processing widgets. * * @package     Joomla.Libraries * @subpackage  HTML * @since       1.7 */abstract class JHtmlBatch{	/**	 * Display a batch widget for the access level selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   1.7	 */	public static function access()	{		// Create the batch selector to change an access level on a selection list.		$lines = array(			'<label id="batch-access-lbl" for="batch-access" class="hasTip" title="' . JText::_('JLIB_HTML_BATCH_ACCESS_LABEL') . '::'			. JText::_('JLIB_HTML_BATCH_ACCESS_LABEL_DESC') . '">', JText::_('JLIB_HTML_BATCH_ACCESS_LABEL'), '</label>',			JHtml::_(				'access.assetgrouplist',				'batch[assetgroup_id]', '',				'class="inputbox"',				array(					'title' => JText::_('JLIB_HTML_BATCH_NOCHANGE'),					'id' => 'batch-access')			)		);		return implode("\n", $lines);	}	/**	 * Displays a batch widget for moving or copying items.	 *	 * @param   string  $extension  The extension that owns the category.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   1.7	 */	public static function item($extension)	{		// Create the copy/move options.		$options = array(JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),			JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));		// Create the batch selector to change select the category by which to move or copy.		$lines = array('<label id="batch-choose-action-lbl" for="batch-choose-action">', JText::_('JLIB_HTML_BATCH_MENU_LABEL'), '</label>',			'<div id="batch-choose-action" class="control-group">', '<select name="batch[category_id]" class="inputbox" id="batch-category-id">',			'<option value="">' . JText::_('JSELECT') . '</option>',			JHtml::_('select.options', JHtml::_('category.options', $extension)), '</select>',			'</div>', '<div id="batch-move-copy" class="control-group radio">',			JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'), '</div><hr />');		return implode("\n", $lines);	}	/**	 * Display a batch widget for the language selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function language()	{		// Create the batch selector to change the language on a selection list.		$lines = array(			'<label id="batch-language-lbl" for="batch-language-id" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_LANGUAGE_LABEL'),			'</label>',			'<select name="batch[language_id]" class="inputbox" id="batch-language-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_LANGUAGE_NOCHANGE') . '</option>',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text'),			'</select>',		);		return implode("\n", $lines);	}	/**	 * Display a batch widget for the user selector.	 *	 * @param   boolean  $noUser  Choose to display a "no user" option	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   2.5	 */	public static function user($noUser = true)	{		$optionNo = '';		if ($noUser)		{			$optionNo = '<option value="0">' . JText::_('JLIB_HTML_BATCH_USER_NOUSER') . '</option>';		}		// Create the batch selector to select a user on a selection list.		$lines = array(			'<label id="batch-user-lbl" for="batch-user" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_USER_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_USER_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_USER_LABEL'),			'</label>',			'<select name="batch[user_id]" class="inputbox" id="batch-user-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_USER_NOCHANGE') . '</option>',			$optionNo,			JHtml::_('select.options', JHtml::_('user.userlist'), 'value', 'text'),			'</select>'		);		return implode("\n", $lines);	}	/**	 * Display a batch widget for the tag selector.	 *	 * @return  string  The necessary HTML for the widget.	 *	 * @since   3.1	 */	public static function tag()	{		// Create the batch selector to tag items on a selection list.		$lines = array(			'<label id="batch-tag-lbl" for="batch-tag-id" class="hasTip"'			. ' title="' . JText::_('JLIB_HTML_BATCH_TAG_LABEL') . '::' . JText::_('JLIB_HTML_BATCH_TAG_LABEL_DESC') . '">',			JText::_('JLIB_HTML_BATCH_TAG_LABEL'),			'</label>',			'<select name="batch[tag]" class="inputbox" id="batch-tag-id">',			'<option value="">' . JText::_('JLIB_HTML_BATCH_TAG_NOCHANGE') . '</option>',			JHtml::_('select.options', JHtml::_('tag.tags', array('filter.published' => array(1))), 'value', 'text'),			'</select>'		);		return implode("\n", $lines);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();JHtml::_('bootstrap.tooltip');?>		<tr>			<td class="imgTotal">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe">					<i class="icon-folder-2"></i></a>			</td>			<td class="description">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->_tmp_folder->path_relative; ?>" target="folderframe"><?php echo $this->_tmp_folder->name; ?></a>			</td>			<td>&#160;			</td>			<td>&#160;			</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>				<a class="delete-item" target="_top" href="index.php?option=com_media&amp;task=folder.delete&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>&amp;<?php echo JSession::getFormToken(); ?>=1&amp;rm[]=<?php echo $this->_tmp_folder->name; ?>" rel="<?php echo $this->_tmp_folder->name; ?>' :: <?php echo $this->_tmp_folder->files + $this->_tmp_folder->folders; ?>"><i class="icon-remove hasTooltip" title="<?php echo JText::_('JACTION_DELETE');?>"></i></a>				<input type="checkbox" name="rm[]" value="<?php echo $this->_tmp_folder->name; ?>" />			</td>		<?php endif;?>		</tr>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// No direct access.defined('_JEXEC') or die;JLoader::import('joomla.filesystem.file');// Check modules$showRightColumn	= ($this->countModules('position-3') or $this->countModules('position-6') or $this->countModules('position-8'));$showbottom			= ($this->countModules('position-9') or $this->countModules('position-10') or $this->countModules('position-11'));$showleft			= ($this->countModules('position-4') or $this->countModules('position-7') or $this->countModules('position-5'));if ($showRightColumn == 0 and $showleft == 0){	$showno = 0;}JHtml::_('behavior.framework', true);// Get params$color				= $this->params->get('templatecolor');$logo				= $this->params->get('logo');$navposition		= $this->params->get('navposition');$headerImage		= $this->params->get('headerImage');$app				= JFactory::getApplication();$doc				= JFactory::getDocument();$templateparams		= $app->getTemplate(true)->params;$config = JFactory::getConfig();$bootstrap = explode(',', $templateparams->get('bootstrap'));$jinput = JFactory::getApplication()->input;$option = $jinput->get('option', '', 'cmd');if (in_array($option, $bootstrap)){	// Load optional rtl Bootstrap css and Bootstrap bugfixes	JHtml::_('bootstrap.loadCss', true, $this->direction);}$doc->addStyleSheet(JURI::base() . 'templates/system/css/system.css');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/position.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/layout.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/print.css', $type = 'text/css', $media = 'print');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/general.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet(JURI::base() . 'templates/' . $this->template . '/css/' . htmlspecialchars($color) . '.css', $type = 'text/css', $media = 'screen,projection');if ($this->direction == 'rtl'){	$doc->addStyleSheet($this->baseurl . '/templates/' . $this->template . '/css/template_rtl.css');	if (file_exists(JPATH_SITE . '/templates/' . $this->template . '/css/' . $color . '_rtl.css'))	{		$doc->addStyleSheet($this->baseurl . '/templates/' . $this->template . '/css/' . htmlspecialchars($color) . '_rtl.css');	}}JHtml::_('bootstrap.framework');$doc->addScript($this->baseurl . '/templates/' . $this->template . '/javascript/md_stylechanger.js', 'text/javascript');$doc->addScript($this->baseurl . '/templates/' . $this->template . '/javascript/hide.js', 'text/javascript');$doc->addScript($this->baseurl . '/templates/' . $this->template . '/javascript/respond.src.js', 'text/javascript');?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>" >	<head>		<?php require __DIR__ . '/jsstrings.php';?>		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=3.0, user-scalable=yes"/>		<meta name="HandheldFriendly" content="true" />		<meta name="apple-mobile-web-app-capable" content="YES" />		<jdoc:include type="head" />		<!--[if IE 7]>		<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/ie7only.css" rel="stylesheet" type="text/css" />		<![endif]-->	</head>	<body id="shadow">		<?php if ($color == 'image'):?>			<style type="text/css">				.logoheader {					background:url('<?php echo $this->baseurl . '/' . htmlspecialchars($headerImage); ?>') no-repeat right;				}				body {					background: <?php echo $templateparams->get('backgroundcolor'); ?>;				}			</style>		<?php endif; ?>		<div id="all">			<div id="back">				<header id="header">					<div class="logoheader">						<h1 id="logo">						<?php if ($logo) : ?>							<img src="<?php echo $this->baseurl ?>/<?php echo htmlspecialchars($logo); ?>"  alt="<?php echo htmlspecialchars($templateparams->get('sitetitle'));?>" />						<?php endif;?>						<?php if (!$logo AND $templateparams->get('sitetitle')) : ?>							<?php echo htmlspecialchars($templateparams->get('sitetitle'));?>						<?php elseif (!$logo AND $config->get('sitename')) : ?>							<?php echo htmlspecialchars($config->get('sitename'));?>						<?php endif; ?>						<span class="header1">						<?php echo htmlspecialchars($templateparams->get('sitedescription'));?>						</span></h1>					</div><!-- end logoheader -->					<ul class="skiplinks">						<li><a href="#main" class="u2"><?php echo JText::_('TPL_BEEZ3_SKIP_TO_CONTENT'); ?></a></li>						<li><a href="#nav" class="u2"><?php echo JText::_('TPL_BEEZ3_JUMP_TO_NAV'); ?></a></li>						<?php if ($showRightColumn) : ?>							<li><a href="#right" class="u2"><?php echo JText::_('TPL_BEEZ3_JUMP_TO_INFO'); ?></a></li>						<?php endif; ?>					</ul>					<h2 class="unseen"><?php echo JText::_('TPL_BEEZ3_NAV_VIEW_SEARCH'); ?></h2>					<h3 class="unseen"><?php echo JText::_('TPL_BEEZ3_NAVIGATION'); ?></h3>					<jdoc:include type="modules" name="position-1" />					<div id="line">						<div id="fontsize"></div>						<h3 class="unseen"><?php echo JText::_('TPL_BEEZ3_SEARCH'); ?></h3>						<jdoc:include type="modules" name="position-0" />					</div> <!-- end line -->				</header><!-- end header -->				<div id="<?php echo $showRightColumn ? 'contentarea2' : 'contentarea'; ?>">					<div id="breadcrumbs">						<jdoc:include type="modules" name="position-2" />					</div>					<?php if ($navposition == 'left' and $showleft) : ?>						<nav class="left1 <?php if ($showRightColumn == null){ echo 'leftbigger';} ?>" id="nav">							<jdoc:include type="modules" name="position-7" style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-4" style="beezHide" headerLevel="3" state="0 " />							<jdoc:include type="modules" name="position-5" style="beezTabs" headerLevel="2"  id="3" />						</nav><!-- end navi -->					<?php endif; ?>					<div id="<?php echo $showRightColumn ? 'wrapper' : 'wrapper2'; ?>" <?php if (isset($showno)){echo 'class="shownocolumns"';}?>>						<div id="main">							<?php if ($this->countModules('position-12')) : ?>								<div id="top">									<jdoc:include type="modules" name="position-12" />								</div>							<?php endif; ?>							<jdoc:include type="message" />							<jdoc:include type="component" />						</div><!-- end main -->					</div><!-- end wrapper -->					<?php if ($showRightColumn) : ?>						<div id="close">							<a href="#" onclick="auf('right')">							<span id="bild">								<?php echo JText::_('TPL_BEEZ3_TEXTRIGHTCLOSE'); ?>							</span>							</a>						</div>						<aside id="right">							<h2 class="unseen"><?php echo JText::_('TPL_BEEZ3_ADDITIONAL_INFORMATION'); ?></h2>							<jdoc:include type="modules" name="position-6" style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-8" style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-3" style="beezDivision" headerLevel="3" />						</aside><!-- end right -->					<?php endif; ?>					<?php if ($navposition == 'center' and $showleft) : ?>						<nav class="left <?php if ($showRightColumn == null) { echo 'leftbigger'; } ?>" id="nav" >							<jdoc:include type="modules" name="position-7"  style="beezDivision" headerLevel="3" />							<jdoc:include type="modules" name="position-4" style="beezHide" headerLevel="3" state="0 " />							<jdoc:include type="modules" name="position-5" style="beezTabs" headerLevel="2"  id="3" />						</nav><!-- end navi -->					<?php endif; ?>					<div class="wrap"></div>				</div> <!-- end contentarea -->			</div><!-- back -->		</div><!-- all -->		<div id="footer-outer">			<?php if ($showbottom) : ?>				<div id="footer-inner" >					<div id="bottom">						<div class="box box1"> <jdoc:include type="modules" name="position-9" style="beezDivision" headerlevel="3" /></div>						<div class="box box2"> <jdoc:include type="modules" name="position-10" style="beezDivision" headerlevel="3" /></div>						<div class="box box3"> <jdoc:include type="modules" name="position-11" style="beezDivision" headerlevel="3" /></div>					</div>				</div>			<?php endif; ?>			<div id="footer-sub">				<footer id="footer">					<jdoc:include type="modules" name="position-14" />				</footer><!-- end footer -->			</div>		</div>		<jdoc:include type="modules" name="debug" />	</body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports a modal newsfeeds picker. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class JFormFieldModal_Newsfeeds extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Modal_Newsfeeds';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		// Load the javascript		JHtml::_('behavior.framework');		JHtml::_('behavior.modal', 'input.modal');		// Build the script.		$script = array();		$script[] = '	function jSelectChart_'.$this->id.'(id, name, object) {';		$script[] = '		document.id("'.$this->id.'_id").value = id;';		$script[] = '		document.id("'.$this->id.'_name").value = name;';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Build the script.		$script = array();		$script[] = '	window.addEvent("domready", function() {';		$script[] = '		var div = new Element("div").setStyle("display", "none").inject(document.id("menu-types"), "before");';		$script[] = '		document.id("menu-types").inject(div, "bottom");';		$script[] = '	});';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Get the title of the linked chart		$db = JFactory::getDbo();		$db->setQuery(			'SELECT name' .			' FROM #__newsfeeds' .			' WHERE id = '.(int) $this->value		);		try		{			$title = $db->loadResult();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage);		}		if (empty($title))		{			$title = JText::_('COM_NEWSFEEDS_SELECT_A_FEED');		}		$link = 'index.php?option=com_newsfeeds&amp;view=newsfeeds&amp;layout=modal&amp;tmpl=component&amp;function=jSelectChart_'.$this->id;		if (isset($this->element['language']))		{			$link .= '&amp;forcedLanguage='.$this->element['language'];		}		JHtml::_('behavior.modal', 'a.modal');		$html = "\n".'<div class="input-append"><input type="text" class="input-medium" id="'.$this->id.'_name" value="'.htmlspecialchars($title, ENT_QUOTES, 'UTF-8').'" disabled="disabled" />';		$html .= '<a class="modal btn" title="'.JText::_('COM_NEWSFEEDS_CHANGE_FEED_BUTTON').'"  href="'.$link.'" rel="{handler: \'iframe\', size: {x: 800, y: 450}}"><i class="icon-feed" title="'.JText::_('COM_NEWSFEEDS_CHANGE_FEED_BUTTON').'"></i> '.JText::_('JSELECT').'</a></div>'."\n";		// The active newsfeed id field.		if (0 == (int) $this->value)		{			$value = '';		}		else		{			$value = (int) $this->value;		}		// class='required' for client side validation		$class = '';		if ($this->required)		{			$class = ' class="required modal-value"';		}		$html .= '<input type="hidden" id="'.$this->id.'_id"'.$class.' name="'.$this->name.'" value="'.$value.'" />';		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Menus component helper. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusHelper{	/**	 * Defines the valid request variables for the reverse lookup.	 */	protected static $_filter = array('option', 'view', 'layout');	/**	 * Configure the Linkbar.	 *	 * @param   string    The name of the active view.	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_MENUS_SUBMENU_MENUS'),			'index.php?option=com_menus&view=menus',			$vName == 'menus'		);		JHtmlSidebar::addEntry(			JText::_('COM_MENUS_SUBMENU_ITEMS'),			'index.php?option=com_menus&view=items',			$vName == 'items'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The menu ID.	 *	 * @return  JObject	 * @since   1.6	 */	public static function getActions($parentId = 0)	{		$user = JFactory::getUser();		$result = new JObject;		if (empty($parentId))		{			$assetName = 'com_menus';		}		else		{			$assetName = 'com_menus.item.' . (int) $parentId;		}		$actions = JAccess::getActions('com_menus');		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Gets a standard form of a link for lookups.	 *	 * @param   mixed    A link string or array of request variables.	 *	 * @return  mixed  A link in standard option-view-layout form, or false if the supplied response is invalid.	 */	public static function getLinkKey($request)	{		if (empty($request))		{			return false;		}		// Check if the link is in the form of index.php?...		if (is_string($request))		{			$args = array();			if (strpos($request, 'index.php') === 0)			{				parse_str(parse_url(htmlspecialchars_decode($request), PHP_URL_QUERY), $args);			}			else			{				parse_str($request, $args);			}			$request = $args;		}		// Only take the option, view and layout parts.		foreach ($request as $name => $value)		{			if ((!in_array($name, self::$_filter)) && (!($name == 'task' && !array_key_exists('view', $request))))			{				// Remove the variables we want to ignore.				unset($request[$name]);			}		}		ksort($request);		return 'index.php?' . http_build_query($request, '', '&');	}	/**	 * Get the menu list for create a menu module	 *	 * @return    array    The menu array list	 * @since        1.6	 */	public static function getMenuTypes()	{		$db = JFactory::getDbo();		$db->setQuery('SELECT a.menutype FROM #__menu_types AS a');		return $db->loadColumn();	}	/**	 * Get a list of menu links for one or all menus.	 *	 * @param   string    An option menu to filter the list on, otherwise all menu links are returned as a grouped array.	 * @param   integer   An optional parent ID to pivot results around.	 * @param   integer   An optional mode. If parent ID is set and mode=2, the parent and children are excluded from the list.	 * @param   array     An optional array of states	 */	public static function getMenuLinks($menuType = null, $parentId = 0, $mode = 0, $published = array(), $languages = array())	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level, a.menutype, a.type, a.template_style_id, a.checked_out')			->from('#__menu AS a')			->join('LEFT', $db->quoteName('#__menu') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Filter by the type		if ($menuType)		{			$query->where('(a.menutype = ' . $db->quote($menuType) . ' OR a.parent_id = 0)');		}		if ($parentId)		{			if ($mode == 2)			{				// Prevent the parent and children from showing.				$query->join('LEFT', '#__menu AS p ON p.id = ' . (int) $parentId)					->where('(a.lft <= p.lft OR a.rgt >= p.rgt)');			}		}		if (!empty($languages))		{			if (is_array($languages))			{				$languages = '(' . implode(',', array_map(array($db, 'quote'), $languages)) . ')';			}			$query->where('a.language IN ' . $languages);		}		if (!empty($published))		{			if (is_array($published))			{				$published = '(' . implode(',', $published) . ')';			}			$query->where('a.published IN ' . $published);		}		$query->where('a.published != -2')			->group('a.id, a.title, a.level, a.menutype, a.type, a.template_style_id, a.checked_out, a.lft')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$links = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return false;		}		if (empty($menuType))		{			// If the menutype is empty, group the items by menutype.			$query->clear()				->select('*')				->from('#__menu_types')				->where('menutype <> ' . $db->quote(''))				->order('title, menutype');			$db->setQuery($query);			try			{				$menuTypes = $db->loadObjectList();			}			catch (RuntimeException $e)			{				JError::raiseWarning(500, $e->getMessage());				return false;			}			// Create a reverse lookup and aggregate the links.			$rlu = array();			foreach ($menuTypes as &$type)			{				$rlu[$type->menutype] = & $type;				$type->links = array();			}			// Loop through the list of menu links.			foreach ($links as &$link)			{				if (isset($rlu[$link->menutype]))				{					$rlu[$link->menutype]->links[] = & $link;					// Cleanup garbage.					unset($link->menutype);				}			}			return $menuTypes;		}		else		{			return $links;		}	}	static public function getAssociations($pk)	{		$associations = array();		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->from('#__menu as m')			->join('INNER', '#__associations as a ON a.id=m.id AND a.context=' . $db->quote('com_menus.item'))			->join('INNER', '#__associations as a2 ON a.key=a2.key')			->join('INNER', '#__menu as m2 ON a2.id=m2.id')			->where('m.id=' . (int) $pk)			->select('m2.language, m2.id');		$db->setQuery($query);		try		{			$menuitems = $db->loadObjectList('language');		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());			return false;		}		foreach ($menuitems as $tag => $item)		{			$associations[$tag] = $item->id;		}		return $associations;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Helper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for standard content style extensions. * * @package     Joomla.Libraries * @subpackage  Helper * @since       3.1 */class JHelperContent{	/**	 * Configure the Linkbar. Must be implemented by each extension.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   3.1	 */	public static function addSubmenu($vName)	{	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  $categoryId  The category ID.	 * @param   integer  $id          The item ID.	 * @param   string   $assetName   The asset name	 *	 * @return  JObject	 *	 * @since   3.1	 */	public static function getActions($categoryId = 0, $id = 0, $assetName = '')	{		// Reverted a change for version 2.5.6		$user	= JFactory::getUser();		$result	= new JObject;		$actions = array(			'core.admin', 'core.manage', 'core.create', 'core.edit', 'core.edit.own', 'core.edit.state', 'core.delete'		);		foreach ($actions as $action)		{			$result->set($action, $user->authorise($action, $assetName));		}		return $result;	}	/**	 * Gets the current language	 *	 * @param   boolean  $detectBrowser  Flag indicating whether to use the browser language as a fallback.	 *	 * @return  string  The language string	 *	 * @since   3.1	 */	public static function getCurrentLanguage($detectBrowser = true)	{		$app = JFactory::getApplication();		$langCode = $app->input->cookie->getString(JApplication::getHash('language'));		// No cookie - let's try to detect browser language or use site default		if (!$langCode)		{			if ($detectBrowser)			{				$langCode = JLanguageHelper::detectLanguage();			}			else			{				$langCode = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');			}		}		return $langCode;	}	/**	* Gets the associated language ID	*	* @param   string  $langCode  The language code to look up	*	* @return  integer  The language ID	*	* @since   3.1	*/	public static function getLanguageId($langCode)	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('lang_id')			->from('#__languages')			->where($db->quoteName('lang_code') . ' = ' . $db->quote($langCode));		$db->setQuery($query);		$id = $db->loadResult();		return $id;	}	/**	 * Gets a row of data from a table	 *	 * @param   JTable  $table  JTable instance for a row.	 *	 * @return  array  Associative array of all columns and values for a row in a table.	 *	 * @since   3.1	 */	public function getRowData($table)	{		$fields = $table->getFields();		$data = array();		foreach ($fields as &$field)		{			$columnName = $field->Field;			$value = $table->$columnName;			$data[$columnName] = $value;		}		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');// Load the base adapter.require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Renders a list of directories. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class JFormFieldDirectories extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  2.5	 */	protected $type = 'Directories';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   2.5	 */	public function getOptions()	{		$values = array();		$options = array();		$exclude = array(			JPATH_ADMINISTRATOR,			JPATH_INSTALLATION,			JPATH_LIBRARIES,			JPATH_PLUGINS,			JPATH_SITE . '/cache',			JPATH_SITE . '/components',			JPATH_SITE . '/includes',			JPATH_SITE . '/language',			JPATH_SITE . '/modules',			JPATH_THEMES,			JFactory::getApplication()->getCfg('log_path'),			JFactory::getApplication()->getCfg('tmp_path')		);		// Get the base directories.		jimport('joomla.filesystem.folder');		$dirs = JFolder::folders(JPATH_SITE, '.', false, true);		// Iterate through the base directories and find the subdirectories.		foreach ($dirs as $dir)		{			// Check if the directory should be excluded.			if (in_array($dir, $exclude))			{				continue;			}			// Get the child directories.			$return = JFolder::folders($dir, '.', true, true);			// Merge the directories.			if (is_array($return))			{				$values[] = $dir;				$values = array_merge($values, $return);			}		}		// Convert the values to options.		for ($i = 0, $c = count($values); $i < $c; $i++)		{			$options[] = JHtml::_('select.option', str_replace(JPATH_SITE . '/', '', $values[$i]), str_replace(JPATH_SITE . '/', '', $values[$i]));		}		// Add a null option.		array_unshift($options, JHtml::_('select.option', '', '- ' . JText::_('JNONE') . ' -'));		// Handle default values of value1|value2|value3		if (is_string($value) && strpos($value, '|') && preg_match('#(?<!\\\)\|#', $value))		{			// Explode the value if it is serialized as an array of value1|value2|value3			$value = preg_split('/(?<!\\\)\|/', $value);			$value = str_replace('\|', '|', $value);			$value = str_replace('\n', "\n", $value);		}		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Controller * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  If true, the view output will be cached	 * @param   array    An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController  This object to support chaining.	 *	 * @since   3.1	 */	public function display($cachable = true, $urlparams = false)	{		$user		= JFactory::getUser();		// Set the default view name and format from the Request.		$id = $this->input->getObject('id');		$id = (array) $id;		$vName = $this->input->get('view', 'tags');		$this->input->set('view', $vName);		if ($user->get('id') ||($this->input->getMethod() == 'POST' && $vName = 'tags'))		{			$cachable = false;		}		$safeurlparams = array(			'id'				=> 'ARRAY',			'type'				=> 'ARRAY',			'limit'				=> 'UINT',			'limitstart'		=> 'UINT',			'filter_order'		=> 'CMD',			'filter_order_Dir'	=> 'CMD',			'lang'				=> 'CMD'		);		return parent::display($cachable, $safeurlparams);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Tags component all tags view * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsViewTags extends JViewLegacy{	public function display($tpl = null)	{		$app      = JFactory::getApplication();		$document = JFactory::getDocument();		$document->link = JRoute::_('index.php?option=com_tags&view=tags');		$app->input->set('limit', $app->getCfg('feed_limit'));		$params = $app->getParams();		$siteEmail = $app->getCfg('mailfrom');		$fromName  = $app->getCfg('fromname');		$feedEmail = $app->getCfg('feed_email', 'author');		$document->editor = $fromName;		if ($feedEmail != "none")		{			$document->editorEmail = $siteEmail;		}		// Get some data from the model		$items    = $this->get('Items');		$tag = $this->get('Item');		foreach ($items as $item)		{			// Strip HTML from feed item title			$title = $this->escape($item->title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// URL link to tagged item			// Change to new routing once it is merged			$link = JRoute::_($item->link);			// Strip HTML from feed item description text			$description = $item->description;			$author			= $item->created_by_alias ? $item->created_by_alias : $item->author;			$date = ($item->displayDate ? date('r', strtotime($item->displayDate)) : '');			// Load individual item creator class			$feeditem = new JFeedItem;			$feeditem->title       = $title;			$feeditem->link        = '/index.php?option=com_tags&view=tag&id=' . (int) $item->id;			$feeditem->description = $description;			$feeditem->date        = $date;			$feeditem->category    = 'All Tags';			$feeditem->author      = $author;			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$item->authorEmail = $row->author_email;			}			// Loads item info into RSS array			$document->addItem($feeditem);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Index controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerIndex extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   2.5	 */	public function getModel($name = 'Index', $prefix = 'FinderModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to purge all indexed links from the database.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function purge()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Remove the script time limit.		@set_time_limit(0);		$model = $this->getModel('Index', 'FinderModel');		// Attempt to purge the index.		$return = $model->purge();		if (!$return)		{			$message = JText::_('COM_FINDER_INDEX_PURGE_FAILED', $model->getError());			$this->setRedirect('index.php?option=com_finder&view=index', $message);			return false;		}		else		{			$message = JText::_('COM_FINDER_INDEX_PURGE_SUCCESS');			$this->setRedirect('index.php?option=com_finder&view=index', $message);			return true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :			if (!isset($this->items[$this->parent->id][$id + 1]))			{				$class = ' class="last"';			}			?>			<div <?php echo $class; ?> >			<?php $class = ''; ?>				<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($item->id));?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_items_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_NEWSFEEDS_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">					<?php echo JHtml::_('content.prepare', $item->description, '', 'com_newsfeeds.categories'); ?>							<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">					<?php					$this->items[$item->id] = $item->getChildren();					$this->parent = $item;					$this->maxLevelcat--;					echo $this->loadTemplate('items');					$this->parent = $item->getParent();					$this->maxLevelcat++;					?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Load tooltips behaviorJHtml::_('behavior.formvalidation');JHtml::_('behavior.tooltip');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'application.cancel' || document.formvalidator.isValid(document.id('application-form')))		{			Joomla.submitform(task, document.getElementById('application-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_config');?>" id="application-form" method="post" name="adminForm" class="form-validate">	<div class="row-fluid">		<!-- Begin Sidebar -->		<div id="sidebar" class="span2">			<div class="sidebar-nav">				<?php echo $this->loadTemplate('navigation'); ?>				<?php					// Display the submenu position modules					$this->submenumodules = JModuleHelper::getModules('submenu');					foreach ($this->submenumodules as $submenumodule)					{						$output = JModuleHelper::renderModule($submenumodule);						$params = new JRegistry;						$params->loadString($submenumodule->params);						echo $output;					}				?>			</div>		</div>		<!-- End Sidebar -->		<!-- Begin Content -->		<div class="span10">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'page-site')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-site', JText::_('JSITE', true)); ?>					<div class="row-fluid">						<div class="span6">							<?php echo $this->loadTemplate('site'); ?>							<?php echo $this->loadTemplate('metadata'); ?>						</div>						<div class="span6">							<?php echo $this->loadTemplate('seo'); ?>							<?php echo $this->loadTemplate('cookie'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-system', JText::_('COM_CONFIG_SYSTEM', true)); ?>					<div class="row-fluid">						<div class="span6">							<?php echo $this->loadTemplate('system'); ?>							<?php echo $this->loadTemplate('debug'); ?>						</div>						<div class="span6">							<?php echo $this->loadTemplate('cache'); ?>							<?php echo $this->loadTemplate('session'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-server', JText::_('COM_CONFIG_SERVER', true)); ?>					<div class="row-fluid">						<div class="span6">							<?php echo $this->loadTemplate('server'); ?>							<?php echo $this->loadTemplate('locale'); ?>							<?php echo $this->loadTemplate('ftp'); ?>						</div>						<div class="span6">							<?php echo $this->loadTemplate('database'); ?>							<?php echo $this->loadTemplate('mail'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-permissions', JText::_('COM_CONFIG_PERMISSIONS', true)); ?>					<div class="row-fluid">						<?php echo $this->loadTemplate('permissions'); ?>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-filters', JText::_('COM_CONFIG_TEXT_FILTERS', true)); ?>					<div class="row-fluid">						<?php echo $this->loadTemplate('filters'); ?>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php if ($this->ftp) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'page-ftp', JText::_('COM_CONFIG_FTP_SETTINGS', true)); ?>						<?php echo $this->loadTemplate('ftplogin'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTabSet'); ?>				<input type="hidden" name="task" value="" />				<?php echo JHtml::_('form.token'); ?>			</div>		<!-- End Content -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerBanners extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_BANNERS_BANNERS';	/**	 * Constructor.	 *	 * @param   array An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('sticky_unpublish',	'sticky_publish');	}	/**	 * Proxy for getModel.	 * @since   1.6	 */	public function getModel($name = 'Banner', $prefix = 'BannersModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * @since   1.6	 */	public function sticky_publish()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('sticky_publish' => 1, 'sticky_unpublish' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_BANNERS_NO_BANNERS_SELECTED'));		}		else		{			// Get the model.			$model	= $this->getModel();			// Change the state of the records.			if (!$model->stick($ids, $value))			{				JError::raiseWarning(500, $model->getError());			} else {				if ($value == 1)				{					$ntext = 'COM_BANNERS_N_BANNERS_STUCK';				} else {					$ntext = 'COM_BANNERS_N_BANNERS_UNSTUCK';				}				$this->setMessage(JText::plural($ntext, count($ids)));			}		}		$this->setRedirect('index.php?option=com_banners&view=banners');	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_login * * @package     Joomla.Site * @subpackage  mod_login * @since       1.5 */class ModLoginHelper{	public static function getReturnURL($params, $type)	{		$app	= JFactory::getApplication();		$router = $app->getRouter();		$url = null;		if ($itemid = $params->get($type))		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select($db->quoteName('link'))				->from($db->quoteName('#__menu'))				->where($db->quoteName('published') . '=1')				->where($db->quoteName('id') . '=' . $db->quote($itemid));			$db->setQuery($query);			if ($link = $db->loadResult())			{				if ($router->getMode() == JROUTER_MODE_SEF)				{					$url = 'index.php?Itemid='.$itemid;				}				else {					$url = $link.'&Itemid='.$itemid;				}			}		}		if (!$url)		{			// Stay on the same page			$uri = clone JURI::getInstance();			$vars = $router->parse($uri);			unset($vars['lang']);			if ($router->getMode() == JROUTER_MODE_SEF)			{				if (isset($vars['Itemid']))				{					$itemid = $vars['Itemid'];					$menu = $app->getMenu();					$item = $menu->getItem($itemid);					unset($vars['Itemid']);					if (isset($item) && $vars == $item->query)					{						$url = 'index.php?Itemid='.$itemid;					}					else {						$url = 'index.php?'.JURI::buildQuery($vars).'&Itemid='.$itemid;					}				}				else				{					$url = 'index.php?'.JURI::buildQuery($vars);				}			}			else			{				$url = 'index.php?'.JURI::buildQuery($vars);			}		}		return base64_encode($url);	}	public static function getType()	{		$user = JFactory::getUser();		return (!$user->get('guest')) ? 'logout' : 'login';	}}
<?php/** * @package     Joomla.Legacy * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class working with content language select lists * * @package     Joomla.Legacy * @subpackage  HTML * @since       11.1 */abstract class JHtmlContentLanguage{	/**	 * Cached array of the content language items.	 *	 * @var    array	 * @since  11.1	 */	protected static $items = null;	/**	 * Get a list of the available content language items.	 *	 * @param   boolean  $all        True to include All (*)	 * @param   boolean  $translate  True to translate All	 *	 * @return  string	 *	 * @since   11.1	 *	 * @see     JFormFieldContentLanguage	 */	public static function existing($all = false, $translate = false)	{		if (empty(self::$items))		{			// Get the database object and a new query object.			$db		= JFactory::getDbo();			$query	= $db->getQuery(true);			// Build the query.			$query->select('a.lang_code AS value, a.title AS text, a.title_native')				->from('#__languages AS a')				->where('a.published >= 0')				->order('a.title');			// Set the query and load the options.			$db->setQuery($query);			self::$items = $db->loadObjectList();			if ($all)			{				array_unshift(self::$items, new JObject(array('value' => '*', 'text' => $translate ? JText::alt('JALL', 'language') : 'JALL_LANGUAGE')));			}		}		return self::$items;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugin model. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugin extends JModelAdmin{	/**	 * @var		string	The help screen key for the module.	 * @since   1.6	 */	protected $helpKey = 'JHELP_EXTENSIONS_PLUGIN_MANAGER_EDIT';	/**	 * @var		string	The help screen base URL for the module.	 * @since   1.6	 */	protected $helpURL;	protected $_cache;	/**	 * @var		string	The event to trigger after saving the data.	 * @since   1.6	 */	protected $event_after_save = 'onExtensionAfterSave';	/**	 * @var		string	The event to trigger after before the data.	 * @since   1.6	 */	protected $event_before_save = 'onExtensionBeforeSave';	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// The folder and element vars are passed when saving the form.		if (empty($data))		{			$item		= $this->getItem();			$folder		= $item->folder;			$element	= $item->element;		}		else		{			$folder		= JArrayHelper::getValue($data, 'folder', '', 'cmd');			$element	= JArrayHelper::getValue($data, 'element', '', 'cmd');		}		// These variables are used to add data from the plugin XML files.		$this->setState('item.folder',	$folder);		$this->setState('item.element',	$element);		// Get the form.		$form = $this->loadForm('com_plugins.plugin', 'plugin', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('enabled', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('enabled', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_plugins.edit.plugin.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_plugins.plugin', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState('plugin.id');		if (!isset($this->_cache[$pk]))		{			$false	= false;			// Get a row instance.			$table = $this->getTable();			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $table->getError())			{				$this->setError($table->getError());				return $false;			}			// Convert to the JObject before adding other data.			$properties = $table->getProperties(1);			$this->_cache[$pk] = JArrayHelper::toObject($properties, 'JObject');			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($table->params);			$this->_cache[$pk]->params = $registry->toArray();			// Get the plugin XML.			$path = JPath::clean(JPATH_PLUGINS.'/'.$table->folder.'/'.$table->element.'/'.$table->element.'.xml');			if (file_exists($path))			{				$this->_cache[$pk]->xml = simplexml_load_file($path);			} else {				$this->_cache[$pk]->xml = null;			}		}		return $this->_cache[$pk];	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	*/	public function getTable($type = 'Extension', $prefix = 'JTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		// Execute the parent method.		parent::populateState();		$app = JFactory::getApplication('administrator');		// Load the User state.		$pk = $app->input->getInt('extension_id');		$this->setState('plugin.id', $pk);	}	/**	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @return  mixed  True if successful.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		jimport('joomla.filesystem.path');		$folder		= $this->getState('item.folder');		$element	= $this->getState('item.element');		$lang		= JFactory::getLanguage();		$client		= JApplicationHelper::getClientInfo(0);		// Load the core and/or local language sys file(s) for the ordering field.		$db = JFactory::getDbo();		$query = 'SELECT element' .				' FROM #__extensions' .				' WHERE (type =' .$db->quote('plugin'). 'AND folder='. $db->quote($folder) . ')';		$db->setQuery($query);		$elements = $db->loadColumn();		foreach ($elements as $elementa)		{				$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_ADMINISTRATOR, null, false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_PLUGINS.'/'.$folder.'/'.$elementa, null, false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)			||	$lang->load('plg_'.$folder.'_'.$elementa.'.sys', JPATH_PLUGINS.'/'.$folder.'/'.$elementa, $lang->getDefault(), false, false);		}		if (empty($folder) || empty($element))		{			$app = JFactory::getApplication();			$app->redirect(JRoute::_('index.php?option=com_plugins&view=plugins', false));		}		$formFile = JPath::clean(JPATH_PLUGINS . '/' . $folder . '/' . $element . '/' . $element . '.xml');		if (!file_exists($formFile))		{			throw new Exception(JText::sprintf('COM_PLUGINS_ERROR_FILE_NOT_FOUND', $element . '.xml'));		}		// Load the core and/or local language file(s).			$lang->load('plg_'.$folder.'_'.$element, JPATH_ADMINISTRATOR, null, false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_PLUGINS.'/'.$folder.'/'.$element, null, false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)		||	$lang->load('plg_'.$folder.'_'.$element, JPATH_PLUGINS.'/'.$folder.'/'.$element, $lang->getDefault(), false, false);		if (file_exists($formFile))		{			// Get the plugin form.			if (!$form->loadFile($formFile, false, '//config'))			{				throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));			}		}		// Attempt to load the xml file.		if (!$xml = simplexml_load_file($formFile))		{			throw new Exception(JText::_('JERROR_LOADFILE_FAILED'));		}		// Get the help data from the XML file if present.		$help = $xml->xpath('/extension/help');		if (!empty($help))		{			$helpKey = trim((string) $help[0]['key']);			$helpURL = trim((string) $help[0]['url']);			$this->helpKey = $helpKey ? $helpKey : $this->helpKey;			$this->helpURL = $helpURL ? $helpURL : $this->helpURL;		}		// Trigger the default form events.		parent::preprocessForm($form, $data, $group);	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object	A record object.	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'type = '. $this->_db->quote($table->type);		$condition[] = 'folder = '. $this->_db->quote($table->folder);		return $condition;	}	/**	 * Override method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		// Load the extension plugin group.		JPluginHelper::importPlugin('extension');		// Setup type		$data['type'] = 'plugin';		return parent::save($data);	}	/**	 * Get the necessary data to load an item help screen.	 *	 * @return  object  An object with key, url, and local properties for loading the item help screen.	 * @since   1.6	 */	public function getHelp()	{		return (object) array('key' => $this->helpKey, 'url' => $this->helpURL);	}	/**	 * Custom clean cache method, plugins are cached in 2 places for different clients	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('com_plugins');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a one line text field. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.text.html#input.text * @since       11.1 */class JFormFieldNote extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $type = 'Note';	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   11.1	 */	protected function getLabel()	{		if (empty($this->element['label']) && empty($this->element['description']))		{			return '';		}		$title = $this->element['label'] ? (string) $this->element['label'] : ($this->element['title'] ? (string) $this->element['title'] : '');		$heading = $this->element['heading'] ? (string) $this->element['heading'] : 'h4';		$description = (string) $this->element['description'];		$class = $this->element['class'] ? ' class="' . trim((string) $this->element['class']) . '"' : '';		$close = (string) $this->element['close'];		$html = array();		if ($close)		{			$close = $close == 'true' ? 'alert' : $close;			$html[] = '<button type="button" class="close" data-dismiss="' . $close . '">&times;</button>';		}		$html[] = !empty($title) ? '<' . $heading . '>' . JText::_($title) . '</' . $heading . '>' : '';		$html[] = !empty($description) ? JText::_($description) : '';		return '</div><div ' . $class . '>' . implode('', $html);	}	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		return '';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$lang = JFactory::getLanguage();JText::script('COM_FINDER_MAPS_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'map.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_MAPS_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=maps');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_MAPS')); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_MAPS')); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_branch"><?php echo JText::sprintf('COM_FINDER_FILTER_BY', JText::_('COM_FINDER_MAPS')); ?></label>			<select name="filter_branch" class="inputbox" id="filter_branch">				<?php echo JHtml::_('select.options', JHtml::_('finder.mapslist'), 'value', 'text', $this->state->get('filter.branch'));?>			</select>			<label class="selectlabel" for="filter_state"><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'); ?></label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?>			</button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php if (count($this->items) == 0) : ?>			<tr class="row0">				<td class="center" colspan="5">					<?php echo JText::_('COM_FINDER_MAPS_NO_CONTENT'); ?>				</td>			</tr>		<?php endif; ?>		<?php if ($this->state->get('filter.branch') != 1) : ?>			<tr class="row1">				<td colspan="5" class="center">					<a href="#" onclick="document.id('filter_branch').value='1';document.adminForm.submit();">						<?php echo JText::_('COM_FINDER_MAPS_RETURN_TO_BRANCHES'); ?></a>				</td>			</tr>		<?php endif; ?>		<?php $canChange	= JFactory::getUser()->authorise('core.manage',	'com_finder'); ?>		<?php foreach ($this->items as $i => $item) :?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php					$key = FinderHelperLanguage::branchSingular($item->title);					$title = $lang->hasKey($key) ? JText::_($key) : $item->title;					?>					<?php if ($this->state->get('filter.branch') == 1 && $item->num_children) : ?>						<a href="#" onclick="document.id('filter_branch').value='<?php echo (int) $item->id;?>';document.adminForm.submit();" title="<?php echo JText::_('COM_FINDER_MAPS_BRANCH_LINK'); ?>">							<?php echo $this->escape($title); ?></a>					<?php else: ?>						<?php echo $this->escape($title); ?>					<?php endif; ?>					<?php if ($item->num_children > 0) : ?>						<small>(<?php echo $item->num_children; ?>)</small>					<?php elseif ($item->num_nodes > 0) : ?>						<small>(<?php echo $item->num_nodes; ?>)</small>					<?php endif; ?>									</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'maps.', $canChange, 'cb'); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('dropdown.init');JHtml::_('formbehavior.chosen', 'select');$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_content.article');$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$saveOrder	= $listOrder == 'fp.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_content&view=featured'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?></label>				<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC'); ?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="1%" style="min-width:55px" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'fp.ordering', $listDirn, $listOrder); ?>						<?php if ($canOrder && $saveOrder) :?>							<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'featured.saveorder'); ?>						<?php endif; ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'a.created_by', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="8">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php $count = count($this->items); ?>			<?php foreach ($this->items as $i => $item) :				$item->max_ordering = 0;				$ordering	= ($listOrder == 'fp.ordering');				$assetId	= 'com_content.article.'.$item->id;				$canCreate	= $user->authorise('core.create',     'com_content.category.'.$item->catid);				$canEdit	= $user->authorise('core.edit',       'com_content.article.'.$item->id);				$canCheckin	= $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canChange	= $user->authorise('core.edit.state', 'com_content.article.'.$item->id) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid; ?>">					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">							<?php echo JHtml::_('jgrid.published', $item->state, $i, 'articles.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'articles.', $canCheckin); ?>							<?php endif; ?>							<?php if ($item->language == '*') : ?>								<?php $language = JText::alt('JALL', 'language'); ?>							<?php else : ?>								<?php $language = $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_content&task=article.edit&return=featured&id=' . $item->id);?>" title="<?php echo JText::_('JACTION_EDIT'); ?>">									<?php echo $this->escape($item->title); ?></a>							<?php else : ?>								<span title="<?php echo JText::sprintf('JFIELD_ALIAS_LABEL', $this->escape($item->alias)); ?>"><?php echo $this->escape($item->title); ?></span>							<?php endif; ?>							<div class="small">								<?php echo JText::_('JCATEGORY') . ": " . $this->escape($item->category_title); ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'article.', 'index.php?option=com_content&return=featured');								JHtml::_('dropdown.divider');								if ($item->state) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'articles.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'articles.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'articles.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'articles.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'articles.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'articles.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'articles.');								endif;								// Render dropdown list								echo JHtml::_('dropdown.render');							?>						</div>					</td>					<td class="order">						<?php if ($canChange) : ?>							<div class="input-prepend">							<?php if ($saveOrder) :?>								<?php if ($listDirn == 'asc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'featured.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php elseif ($listDirn == 'desc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'featured.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php endif; ?>							<?php endif; ?>							<?php $disabled = $saveOrder ? '' : 'disabled="disabled"'; ?>						 	<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="width-20 text-area-order" />						 </div>						<?php else : ?>							<?php echo $item->ordering; ?>						<?php endif; ?>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="small hidden-phone">						<?php if ($item->created_by_alias) : ?>							<?php echo $this->escape($item->author_name); ?>							<p class="smallsub"> <?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->created_by_alias)); ?></p>						<?php else : ?>							<?php echo $this->escape($item->author_name); ?>						<?php endif; ?>					</td>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="nowrap small hidden-phone">						<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="featured" value="1" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$langs  = ModLoginHelper::getLanguageList();$return = ModLoginHelper::getReturnURI();require JModuleHelper::getLayoutPath('mod_login', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of weblink records. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class WeblinksModelWeblinks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'state', 'a.state',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'hits', 'a.hits',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'url', 'a.url',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$published = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $published);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		$tag = $this->getUserStateFromRequest($this->context . '.filter.tag', 'filter_tag', '');		$this->setState('filter.tag', $tag);		// Load the parameters.		$params = JComponentHelper::getParams('com_weblinks');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.checked_out, a.checked_out_time, a.catid,' .					'a.hits,' .					'a.state, a.access, a.ordering,' .					'a.language, a.publish_up, a.publish_down'			)		);		$query->from($db->quoteName('#__weblinks') . ' AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.state');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state IN (0, 1))');		}		// Filter by category.		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$query->where('a.catid = ' . (int) $categoryId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		$tagId = $this->getState('filter.tag');		// Filter by a single tag.		if (is_numeric($tagId))		{			$query->where($db->quoteName('tagmap.tag_id') . ' = ' . (int) $tagId)				->join(					'LEFT', $db->quoteName('#__contentitem_tag_map', 'tagmap')					. ' ON ' . $db->quoteName('tagmap.content_item_id') . ' = ' . $db->quoteName('a.id')					. ' AND ' . $db->quoteName('tagmap.type_alias') . ' = ' . $db->quote('com_weblinks.weblink')				);		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering');		$orderDirn = $this->state->get('list.direction');		if ($orderCol == 'a.ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Weblink Model * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksModelCategory extends JModelList{	/**	 * Category items data	 *	 * @var array	 */	protected $_item = null;	protected $_articles = null;	protected $_siblings = null;	protected $_children = null;	protected $_parent = null;	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'hits', 'a.hits',				'ordering', 'a.ordering',			);		}		parent::__construct($config);	}	/**	 * The category that applies.	 *	 * @access    protected	 * @var        object	 */	protected $_category = null;	/**	 * The list of other weblink categories.	 *	 * @access    protected	 * @var        array	 */	protected $_categories = null;	/**	 * Method to get a list of items.	 *	 * @return  mixed  An array of objects on success, false on failure.	 */	public function getItems()	{		// Invoke the parent getItems method to get the main list		$items = parent::getItems();		// Convert the params field into an object, saving original in _params		foreach ($items as $item)		{			if (!isset($this->_params))			{				$params = new JRegistry;				$params->loadString($item->params);				$item->params = $params;			}			// Get the tags			$item->tags = new JHelperTags;			$item->tags->getItemTags('com_weblinks.category', $item->id);		}		return $items;	}	/**	 * Method to build an SQL query to load the list data.	 *	 * @return  string    An SQL query	 * @since   1.6	 */	protected function getListQuery()	{		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields from the categories.		$query->select($this->getState('list.select', 'a.*'))			->from($db->quoteName('#__weblinks') . ' AS a')			->where('a.access IN (' . $groups . ')');		// Filter by category.		if ($categoryId = $this->getState('category.id'))		{			$query->where('a.catid = ' . (int) $categoryId)				->join('LEFT', '#__categories AS c ON c.id = a.catid')				->where('c.access IN (' . $groups . ')');			//Filter by published category			$cpublished = $this->getState('filter.c.published');			if (is_numeric($cpublished))			{				$query->where('c.published = ' . (int) $cpublished);			}		}		// Join over the users for the author and modified_by names.		$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author")			->select("ua.email AS author_email")			->join('LEFT', '#__users AS ua ON ua.id = a.created_by')			->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');		// Filter by state		$state = $this->getState('filter.state');		if (is_numeric($state))		{			$query->where('a.state = ' . (int) $state);		}		// do not show trashed links on the front-end		$query->where('a.state != -2');		// Filter by start and end dates.		$nullDate = $db->quote($db->getNullDate());		$date = JFactory::getDate();		$nowDate = $db->quote($date->toSql());		if ($this->getState('filter.publish_date'))		{			$query->where('(a.publish_up = ' . $nullDate . ' OR a.publish_up <= ' . $nowDate . ')')				->where('(a.publish_down = ' . $nullDate . ' OR a.publish_down >= ' . $nowDate . ')');		}		// Filter by language		if ($this->getState('filter.language'))		{			$query->where('a.language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		// Filter by search in title		$search = $this->getState('list.filter');		if (!empty($search))		{			$search = $db->quote('%' . $db->escape($search, true) . '%');			$query->where('(a.title LIKE ' . $search . ')');		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.ordering')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_weblinks');		// List state information		$limit = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');		$this->setState('list.limit', $limit);		$limitstart = $app->input->get('limitstart', 0, 'uint');		$this->setState('list.start', $limitstart);		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		$orderCol = $app->input->get('filter_order', 'ordering');		if (!in_array($orderCol, $this->filter_fields))		{			$orderCol = 'ordering';		}		$this->setState('list.ordering', $orderCol);		$listOrder = $app->input->get('filter_order_Dir', 'ASC');		if (!in_array(strtoupper($listOrder), array('ASC', 'DESC', '')))		{			$listOrder = 'ASC';		}		$this->setState('list.direction', $listOrder);		$id = $app->input->get('id', 0, 'int');		$this->setState('category.id', $id);		$user = JFactory::getUser();		if ((!$user->authorise('core.edit.state', 'com_weblinks')) && (!$user->authorise('core.edit', 'com_weblinks')))		{			// limit to published for people who can't edit or edit.state.			$this->setState('filter.state', 1);			// Filter by start and end dates.			$this->setState('filter.publish_date', true);		}		$this->setState('filter.language', $app->getLanguageFilter());		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get category data for the current category	 *	 * @param   integer  An optional ID	 *	 * @return  object	 * @since   1.5	 */	public function getCategory()	{		if (!is_object($this->_item))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_num_links_cat', 1) || $params->get('show_empty_categories', 0);			$categories = JCategories::getInstance('Weblinks', $options);			$this->_item = $categories->get($this->getState('category.id', 'root'));			if (is_object($this->_item))			{				$this->_children = $this->_item->getChildren();				$this->_parent = false;				if ($this->_item->getParent())				{					$this->_parent = $this->_item->getParent();				}				$this->_rightsibling = $this->_item->getSibling();				$this->_leftsibling = $this->_item->getSibling(false);			}			else			{				$this->_children = false;				$this->_parent = false;			}		}		return $this->_item;	}	/**	 * Get the parent category	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	public function getParent()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_parent;	}	/**	 * Get the sibling (adjacent) categories.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getLeftSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_leftsibling;	}	function &getRightSibling()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_rightsibling;	}	/**	 * Get the child categories.	 *	 * @param   integer  An optional category id. If not supplied, the model state 'category.id' will be used.	 *	 * @return  mixed  An array of categories or false if an error occurs.	 */	function &getChildren()	{		if (!is_object($this->_item))		{			$this->getCategory();		}		return $this->_children;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * Plugin installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterPlugin extends JAdapterInstance{	/**	 * Install function routing	 *	 * @var    string	 * @since  3.1	 * */	protected $route = 'install';	/**	 * The installation manifest XML object	 *	 * @var	 * @since  3.1	 * */	protected $manifest = null;	/**	 * A path to the PHP file that the scriptfile declaration in	 * the manifest refers to.	 *	 * @var	 * @since  3.1	 * */	protected $manifest_script = null;	/**	 * Name of the extension	 *	 * @var	 * @since  3.1	 * */	protected $name = null;	/**	 *	 *	 * @var	 * @since  3.1	 * */	protected $scriptElement = null;	/**	 * @var	 * @since  3.1	 */	protected $oldFiles = null;	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path where to find language files.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path = null)	{		$source = $this->parent->getPath('source');		if (!$source)		{			$this->parent->setPath('source', JPATH_PLUGINS . '/' . $this->parent->extension->folder . '/' . $this->parent->extension->element);		}		$this->manifest = $this->parent->getManifest();		$element = $this->manifest->files;		if ($element)		{			$group = strtolower((string) $this->manifest->attributes()->group);			$name = '';			if (count($element->children()))			{				foreach ($element->children() as $file)				{					if ((string) $file->attributes()->plugin)					{						$name = strtolower((string) $file->attributes()->plugin);						break;					}				}			}			if ($name)			{				$extension = "plg_${group}_${name}";				$lang = JFactory::getLanguage();				$source = $path ? $path : JPATH_PLUGINS . "/$group/$name";				$folder = (string) $element->attributes()->folder;				if ($folder && file_exists("$path/$folder"))				{					$source = "$path/$folder";				}				$lang->load($extension . '.sys', $source, null, false, false)					|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)					|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)					|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false);			}		}	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get a database connector object		$db = $this->parent->getDbo();		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		$xml = $this->manifest;		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension name		$name = (string) $xml->name;		$name = JFilterInput::getInstance()->clean($name, 'string');		$this->set('name', $name);		// Get the plugin description		$description = (string) $xml->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		/*		 * Backward Compatibility		 * @todo Deprecate in future version		 */		$type = (string) $xml->attributes()->type;		// Set the installation path		if (count($xml->files->children()))		{			foreach ($xml->files->children() as $file)			{				if ((string) $file->attributes()->$type)				{					$element = (string) $file->attributes()->$type;					break;				}			}		}		$group = (string) $xml->attributes()->group;		if (!empty($element) && !empty($group))		{			$this->parent->setPath('extension_root', JPATH_PLUGINS . '/' . $group . '/' . $element);		}		else		{			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_NO_FILE', JText::_('JLIB_INSTALLER_' . $this->route)));			return false;		}		// Check if we should enable overwrite settings		// Check to see if a plugin by the same name is already installed.		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('folder') . ' = ' . $db->quote($group))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent				->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true)));			return false;		}		$id = $db->loadResult();		// If it's on the fs...		if (file_exists($this->parent->getPath('extension_root')) && (!$this->parent->isOverwrite() || $this->parent->isUpgrade()))		{			$updateElement = $xml->update;			// Upgrade manually set or update function available or update tag detected			if ($this->parent->isUpgrade() || ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'update'))				|| $updateElement)			{				// Force this one				$this->parent->setOverwrite(true);				$this->parent->setUpgrade(true);				if ($id)				{					// If there is a matching extension mark this as an update; semantics really					$this->route = 'update';				}			}			elseif (!$this->parent->isOverwrite())			{				// Overwrite is set				// We didn't have overwrite set, find an update function or find an update tag so lets call it safe				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_PLG_INSTALL_DIRECTORY', JText::_('JLIB_INSTALLER_' . $this->route),						$this->parent->getPath('extension_root')					)				);				return false;			}		}		/*		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, let's load it; we'll copy it later (don't have destination yet).		if ((string) $xml->scriptfile)		{			$manifestScript = (string) $xml->scriptfile;			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// If a dash is present in the group name, remove it			$groupClass = str_replace('-', '', $group);			// Set the class name			$classname = 'plg' . $groupClass . $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PLG_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// If the plugin directory does not exist, lets create it		$created = false;		if (!file_exists($this->parent->getPath('extension_root')))		{			if (!$created = JFolder::create($this->parent->getPath('extension_root')))			{				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_PLG_INSTALL_CREATE_DIRECTORY', JText::_('JLIB_INSTALLER_' . $this->route),						$this->parent->getPath('extension_root')					)				);				return false;			}		}		// If we're updating at this point when there is always going to be an extension_root find the old XML files		if ($this->route == 'update')		{			// Hunt for the original XML file			$old_manifest = null;			// Create a new installer because findManifest sets stuff; side effects!			$tmpInstaller = new JInstaller;			// Look in the extension root			$tmpInstaller->setPath('source', $this->parent->getPath('extension_root'));			if ($tmpInstaller->findManifest())			{				$old_manifest = $tmpInstaller->getManifest();				$this->oldFiles = $old_manifest->files;			}		}		/*		 * If we created the plugin directory and will want to remove it if we		 * have to roll back the installation, let's add it to the installation		 * step stack		 */		if ($created)		{			$this->parent->pushStep(array('type' => 'folder', 'path' => $this->parent->getPath('extension_root')));		}		// Copy all necessary files		if ($this->parent->parseFiles($xml->files, -1, $this->oldFiles) === false)		{			// Install failed, roll back changes			$this->parent->abort();			return false;		}		// Parse optional tags -- media and language files for plugins go in admin app		$this->parent->parseMedia($xml->media, 1);		$this->parent->parseLanguages($xml->languages, 1);		// If there is a manifest script, lets copy it.		if ($this->get('manifest_script'))		{			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_root') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']))			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent						->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_MANIFEST', JText::_('JLIB_INSTALLER_' . $this->route)));					return false;				}			}		}		/*		 * ---------------------------------------------------------------------------------------------		 * Database Processing Section		 * ---------------------------------------------------------------------------------------------		 */		$row = JTable::getInstance('extension');		// Was there a plugin with the same name already installed?		if ($id)		{			if (!$this->parent->isOverwrite())			{				// Install failed, roll back changes				$this->parent					->abort(					JText::sprintf(						'JLIB_INSTALLER_ABORT_PLG_INSTALL_ALLREADY_EXISTS', JText::_('JLIB_INSTALLER_' . $this->route),						$this->get('name')					)				);				return false;			}			$row->load($id);			$row->name = $this->get('name');			$row->manifest_cache = $this->parent->generateManifestCache();			// Update the manifest cache and name			$row->store();		}		else		{			// Store in the extensions table (1.6)			$row->name = $this->get('name');			$row->type = 'plugin';			$row->ordering = 0;			$row->element = $element;			$row->folder = $group;			$row->enabled = 0;			$row->protected = 0;			$row->access = 1;			$row->client_id = 0;			$row->params = $this->parent->getParams();			// Custom data			$row->custom_data = '';			// System data			$row->system_data = '';			$row->manifest_cache = $this->parent->generateManifestCache();			// Editor plugins are published by default			if ($group == 'editors')			{				$row->enabled = 1;			}			if (!$row->store())			{				// Install failed, roll back changes				$this->parent					->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}			// Since we have created a plugin item, we add it to the installation step stack			// so that if we have to rollback the changes we can undo it.			$this->parent->pushStep(array('type' => 'extension', 'id' => $row->extension_id));			$id = $row->extension_id;		}		// Let's run the queries for the plugin		if (strtolower($this->route) == 'install')		{			$result = $this->parent->parseSQLFiles($this->manifest->install->sql);			if ($result === false)			{				// Install failed, rollback changes				$this->parent					->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_SQL_ERROR', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}			// Set the schema version to be the latest update version			if ($this->manifest->update)			{				$this->parent->setSchemaVersion($this->manifest->update->schemas, $row->extension_id);			}		}		elseif (strtolower($this->route) == 'update')		{			if ($this->manifest->update)			{				$result = $this->parent->parseSchemaUpdates($this->manifest->update->schemas, $row->extension_id);				if ($result === false)				{					// Install failed, rollback changes					$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_UPDATE_SQL_ERROR', $db->stderr(true)));					return false;				}			}		}		// Run the custom method based on the route		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, $this->route))		{			if ($this->parent->manifestClass->{$this->route}($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PLG_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Lastly, we will copy the manifest file to its appropriate place.		if (!$this->parent->copyManifest(-1))		{			// Install failed, rollback changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_INSTALL_COPY_SETUP', JText::_('JLIB_INSTALLER_' . $this->route)));			return false;		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight($this->route, $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $id;	}	/**	 * Custom update method	 *	 * @return   boolean  True on success	 *	 * @since    3.1	 */	public function update()	{		// Set the overwrite setting		$this->parent->setOverwrite(true);		$this->parent->setUpgrade(true);		// Set the route for the install		$this->route = 'update';		// Go to install which handles updates properly		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   integer  $id  The id of the plugin to uninstall	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$this->route = 'uninstall';		$row = null;		$retval = true;		$db = $this->parent->getDbo();		// First order of business will be to load the plugin object table from the database.		// This should give us the necessary information to proceed.		$row = JTable::getInstance('extension');		if (!$row->load((int) $id))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PLG_UNINSTALL_ERRORUNKOWNEXTENSION'), JLog::WARNING, 'jerror');			return false;		}		// Is the plugin we are trying to uninstall a core one?		// Because that is not a good idea...		if ($row->protected)		{			JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_PLG_UNINSTALL_WARNCOREPLUGIN', $row->name), JLog::WARNING, 'jerror');			return false;		}		// Get the plugin folder so we can properly build the plugin path		if (trim($row->folder) == '')		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PLG_UNINSTALL_FOLDER_FIELD_EMPTY'), JLog::WARNING, 'jerror');			return false;		}		// Set the plugin root path		$this->parent->setPath('extension_root', JPATH_PLUGINS . '/' . $row->folder . '/' . $row->element);		$this->parent->setPath('source', $this->parent->getPath('extension_root'));		$this->parent->findManifest();		$this->manifest = $this->parent->getManifest();		// Attempt to load the language file; might have uninstall strings		$this->parent->setPath('source', JPATH_PLUGINS . '/' . $row->folder . '/' . $row->element);		$this->loadLanguage(JPATH_PLUGINS . '/' . $row->folder . '/' . $row->element);		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, let's load it; we'll copy it later (don't have dest yet)		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// If a dash is present in the folder, remove it			$folderClass = str_replace('-', '', $row->folder);			// Set the class name			$classname = 'plg' . $folderClass . $row->element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Preflight failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PLG_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create the $msg object and append messages from preflight		$msg = ob_get_contents();		ob_end_clean();		// Let's run the queries for the plugin		$utfresult = $this->parent->parseSQLFiles($this->manifest->uninstall->sql);		if ($utfresult === false)		{			// Install failed, rollback changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_PLG_UNINSTALL_SQL_ERROR', $db->stderr(true)));			return false;		}		// Run the custom uninstall method if possible		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))		{			$this->parent->manifestClass->uninstall($this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		// Remove the plugin files		$this->parent->removeFiles($this->manifest->files, -1);		// Remove all media and languages as well		$this->parent->removeFiles($this->manifest->media);		$this->parent->removeFiles($this->manifest->languages, 1);		// Remove the schema version		$query = $db->getQuery(true)			->delete('#__schemas')			->where('extension_id = ' . $row->extension_id);		$db->setQuery($query);		$db->execute();		// Now we will no longer need the plugin object, so let's delete it		$row->delete($row->extension_id);		unset($row);		// Remove the plugin's folder		JFolder::delete($this->parent->getPath('extension_root'));		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $retval;	}	/**	 * Custom discover method	 *	 * @return  array  JExtension) list of extensions available	 *	 * @since   3.1	 */	public function discover()	{		$results = array();		$folder_list = JFolder::folders(JPATH_SITE . '/plugins');		foreach ($folder_list as $folder)		{			$file_list = JFolder::files(JPATH_SITE . '/plugins/' . $folder, '\.xml$');			foreach ($file_list as $file)			{				$manifest_details = JInstaller::parseXMLInstallFile(JPATH_SITE . '/plugins/' . $folder . '/' . $file);				$file = JFile::stripExt($file);				// Ignore example plugins				if ($file == 'example')				{					continue;				}				$extension = JTable::getInstance('extension');				$extension->set('type', 'plugin');				$extension->set('client_id', 0);				$extension->set('element', $file);				$extension->set('folder', $folder);				$extension->set('name', $file);				$extension->set('state', -1);				$extension->set('manifest_cache', json_encode($manifest_details));				$extension->set('params', '{}');				$results[] = $extension;			}			$folder_list = JFolder::folders(JPATH_SITE . '/plugins/' . $folder);			foreach ($folder_list as $plugin_folder)			{				$file_list = JFolder::files(JPATH_SITE . '/plugins/' . $folder . '/' . $plugin_folder, '\.xml$');				foreach ($file_list as $file)				{					$manifest_details = JInstaller::parseXMLInstallFile(						JPATH_SITE . '/plugins/' . $folder . '/' . $plugin_folder . '/' . $file					);					$file = JFile::stripExt($file);					if ($file == 'example')					{						continue;					}					// Ignore example plugins					$extension = JTable::getInstance('extension');					$extension->set('type', 'plugin');					$extension->set('client_id', 0);					$extension->set('element', $file);					$extension->set('folder', $folder);					$extension->set('name', $file);					$extension->set('state', -1);					$extension->set('manifest_cache', json_encode($manifest_details));					$extension->set('params', '{}');					$results[] = $extension;				}			}		}		return $results;	}	/**	 * Custom discover_install method.	 *	 * @return  mixed	 *	 * @since   3.1	 */	public function discover_install()	{		/*		 * Plugins use the extensions table as their primary store		 * Similar to modules and templates, rather easy		 * If it's not in the extensions table we just add it		 */		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		if (is_dir($client->path . '/plugins/' . $this->parent->extension->folder . '/' . $this->parent->extension->element))		{			$manifestPath = $client->path . '/plugins/' . $this->parent->extension->folder . '/' . $this->parent->extension->element . '/'				. $this->parent->extension->element . '.xml';		}		else		{			$manifestPath = $client->path . '/plugins/' . $this->parent->extension->folder . '/' . $this->parent->extension->element . '.xml';		}		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$description = (string) $this->parent->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($manifestPath);		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->state = 0;		$this->parent->extension->name = $manifest_details['name'];		$this->parent->extension->enabled = ('editors' == $this->parent->extension->folder) ? 1 : 0;		$this->parent->extension->params = $this->parent->getParams();		if ($this->parent->extension->store())		{			return $this->parent->extension->get('extension_id');		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PLG_DISCOVER_STORE_DETAILS'), JLog::WARNING, 'jerror');			return false;		}	}	/**	 * Refreshes the extension table cache.	 *	 * @return  boolean  Result of operation, true if updated, false on failure.	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		/*		 * Plugins use the extensions table as their primary store		 * Similar to modules and templates, rather easy		 * If it's not in the extensions table we just add it		 */		$client = JApplicationHelper::getClientInfo($this->parent->extension->client_id);		$manifestPath = $client->path . '/plugins/' . $this->parent->extension->folder . '/' . $this->parent->extension->element . '/'			. $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		if ($this->parent->extension->store())		{			return true;		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PLG_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterPlugin instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerPlugin extends JInstallerAdapterPlugin{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelTracks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'name', 'b.name',				'cl.name', 'client_name',				'cat.title', 'category_title',				'track_type', 'a.track_type',				'count', 'a.count',				'track_date', 'a.track_date',			);		}		parent::__construct($config);	}	/**	 * @since   1.6	 */	protected $basename;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$type = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type');		$this->setState('filter.type', $type);		$begin = $this->getUserStateFromRequest($this->context . '.filter.begin', 'filter_begin', '', 'string');		$this->setState('filter.begin', $begin);		$end = $this->getUserStateFromRequest($this->context . '.filter.end', 'filter_end', '', 'string');		$this->setState('filter.end', $end);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('b.name', 'asc');	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			'a.track_date as track_date,'				. 'a.track_type as track_type,'				. $db->quoteName('a.count') . ' as ' . $db->quoteName('count')		);		$query->from($db->quoteName('#__banner_tracks') . ' AS a');		// Join with the banners		$query->join('LEFT', $db->quoteName('#__banners') . ' as b ON b.id=a.banner_id')			->select('b.name as name');		// Join with the client		$query->join('LEFT', $db->quoteName('#__banner_clients') . ' as cl ON cl.id=b.cid')			->select('cl.name as client_name');		// Join with the category		$query->join('LEFT', $db->quoteName('#__categories') . ' as cat ON cat.id=b.catid')			->select('cat.title as category_title');		// Filter by type		$type = $this->getState('filter.type');		if (!empty($type))		{			$query->where('a.track_type = ' . (int) $type);		}		// Filter by client		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('b.cid = ' . (int) $clientId);		}		// Filter by category		$catedoryId = $this->getState('filter.category_id');		if (is_numeric($catedoryId))		{			$query->where('b.catid = ' . (int) $catedoryId);		}		// Filter by begin date		$begin = $this->getState('filter.begin');		if (!empty($begin))		{			$query->where('a.track_date >= ' . $db->quote($begin));		}		// Filter by end date		$end = $this->getState('filter.end');		if (!empty($end))		{			$query->where('a.track_date <= ' . $db->quote($end));		}		// Add the list ordering clause.		$orderCol = $this->getState('list.ordering', 'name');		$query->order($db->escape($orderCol) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to delete rows.	 *	 * @param   array  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 */	public function delete()	{		$user = JFactory::getUser();		$categoryId = $this->getState('category_id');		// Access checks.		if ($categoryId)		{			$allow = $user->authorise('core.delete', 'com_banners.category.' . (int) $categoryId);		}		else		{			$allow = $user->authorise('core.delete', 'com_banners');		}		if ($allow)		{			// Delete tracks from this banner			$db = $this->getDbo();			$query = $db->getQuery(true)				->delete($db->quoteName('#__banner_tracks'));			// Filter by type			$type = $this->getState('filter.type');			if (!empty($type))			{				$query->where('track_type = ' . (int) $type);			}			// Filter by begin date			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$query->where('track_date >= ' . $db->quote($begin));			}			// Filter by end date			$end = $this->getState('filter.end');			if (!empty($end))			{				$query->where('track_date <= ' . $db->quote($end));			}			$where = '1';			// Filter by client			$clientId = $this->getState('filter.client_id');			if (!empty($clientId))			{				$where .= ' AND cid = ' . (int) $clientId;			}			// Filter by category			if (!empty($categoryId))			{				$where .= ' AND catid = ' . (int) $categoryId;			}			$query->where('banner_id IN (SELECT id FROM ' . $db->quoteName('#__banners') . ' WHERE ' . $where . ')');			$db->setQuery($query);			$this->setError((string) $query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));		}		return true;	}	/**	 * Get file name	 *	 * @return  string    The file name	 * @since   1.6	 */	public function getBaseName()	{		if (!isset($this->basename))		{			$app = JFactory::getApplication();			$basename = $this->getState('basename');			$basename = str_replace('__SITE__', $app->getCfg('sitename'), $basename);			$categoryId = $this->getState('filter.category_id');			if (is_numeric($categoryId))			{				if ($categoryId > 0)				{					$basename = str_replace('__CATID__', $categoryId, $basename);				}				else				{					$basename = str_replace('__CATID__', '', $basename);				}				$categoryName = $this->getCategoryName();				$basename = str_replace('__CATNAME__', $categoryName, $basename);			}			else			{				$basename = str_replace('__CATID__', '', $basename);				$basename = str_replace('__CATNAME__', '', $basename);			}			$clientId = $this->getState('filter.client_id');			if (is_numeric($clientId))			{				if ($clientId > 0)				{					$basename = str_replace('__CLIENTID__', $clientId, $basename);				}				else				{					$basename = str_replace('__CLIENTID__', '', $basename);				}				$clientName = $this->getClientName();				$basename = str_replace('__CLIENTNAME__', $clientName, $basename);			}			else			{				$basename = str_replace('__CLIENTID__', '', $basename);				$basename = str_replace('__CLIENTNAME__', '', $basename);			}			$type = $this->getState('filter.type');			if ($type > 0)			{				$basename = str_replace('__TYPE__', $type, $basename);				$typeName = JText::_('COM_BANNERS_TYPE' . $type);				$basename = str_replace('__TYPENAME__', $typeName, $basename);			}			else			{				$basename = str_replace('__TYPE__', '', $basename);				$basename = str_replace('__TYPENAME__', '', $basename);			}			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$basename = str_replace('__BEGIN__', $begin, $basename);			}			else			{				$basename = str_replace('__BEGIN__', '', $basename);			}			$end = $this->getState('filter.end');			if (!empty($end))			{				$basename = str_replace('__END__', $end, $basename);			}			else			{				$basename = str_replace('__END__', '', $basename);			}			$this->basename = $basename;		}		return $this->basename;	}	/**	 * Get the category name.	 *	 * @return  string    The category name	 * @since   1.6	 */	protected function getCategoryName()	{		$categoryId = $this->getState('filter.category_id');		if ($categoryId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('title')				->from($db->quoteName('#__categories'))				->where($db->quoteName('id') . '=' . $db->quote($categoryId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCATEGORYNAME');		}		return $name;	}	/**	 * Get the category name	 *	 * @return  string    The category name.	 * @since   1.6	 */	protected function getClientName()	{		$clientId = $this->getState('filter.client_id');		if ($clientId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('name')				->from($db->quoteName('#__banner_clients'))				->where($db->quoteName('id') . '=' . $db->quote($clientId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCLIENTNAME');		}		return $name;	}	/**	 * Get the file type.	 *	 * @return  string    The file type	 * @since   1.6	 */	public function getFileType()	{		return $this->getState('compressed') ? 'zip' : 'csv';	}	/**	 * Get the mime type.	 *	 * @return  string    The mime type.	 * @since   1.6	 */	public function getMimeType()	{		return $this->getState('compressed') ? 'application/zip' : 'text/csv';	}	/**	 * Get the content	 *	 * @return  string    The content.	 * @since   1.6	 */	public function getContent()	{		if (!isset($this->content))		{			$this->content = '';			$this->content .=				'"' . str_replace('"', '""', JText::_('COM_BANNERS_HEADING_NAME')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_CLIENT')) . '","' .					str_replace('"', '""', JText::_('JCATEGORY')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_TYPE')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_COUNT')) . '","' .					str_replace('"', '""', JText::_('JDATE')) . '"' . "\n";			foreach ($this->getItems() as $item)			{				$this->content .=					'"' . str_replace('"', '""', $item->name) . '","' .						str_replace('"', '""', $item->client_name) . '","' .						str_replace('"', '""', $item->category_title) . '","' .						str_replace('"', '""', ($item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION') : JText::_('COM_BANNERS_CLICK'))) . '","' .						str_replace('"', '""', $item->count) . '","' .						str_replace('"', '""', $item->track_date) . '"' . "\n";			}			if ($this->getState('compressed'))			{				$app = JFactory::getApplication('administrator');				$files = array();				$files['track'] = array();				$files['track']['name'] = $this->getBasename() . '.csv';				$files['track']['data'] = $this->content;				$files['track']['time'] = time();				$ziproot = $app->getCfg('tmp_path') . '/' . uniqid('banners_tracks_') . '.zip';				// run the packager				jimport('joomla.filesystem.folder');				jimport('joomla.filesystem.file');				$delete = JFolder::files($app->getCfg('tmp_path') . '/', uniqid('banners_tracks_'), false, true);				if (!empty($delete))				{					if (!JFile::delete($delete))					{						// JFile::delete throws an error						$this->setError(JText::_('COM_BANNERS_ERR_ZIP_DELETE_FAILURE'));						return false;					}				}				if (!$packager = JArchive::getAdapter('zip'))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_ADAPTER_FAILURE'));					return false;				}				elseif (!$packager->create($ziproot, $files))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_CREATE_FAILURE'));					return false;				}				$this->content = file_get_contents($ziproot);			}		}		return $this->content;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;// Checking if loaded via index.php or component.php$tmpl = $input->getCmd('tmpl', '');$document = JFactory::getDocument();?><script type="text/javascript">	setmenutype = function(type)	{		<?php if ($tmpl) : ?>			window.parent.Joomla.submitbutton('item.setType', type);			window.parent.SqueezeBox.close();		<?php else : ?>			window.location="index.php?option=com_menus&view=item&task=item.setType&layout=edit&type="+('item.setType', type);		<?php endif; ?>	}</script><?php echo JHtml::_('bootstrap.startAccordion', 'collapseTypes', array('active' => 'slide1')); ?>	<?php		$i = 0;		foreach ($this->types as $name => $list) : ?>		<?php echo JHtml::_('bootstrap.addSlide', 'collapseTypes', JText::_($name), 'collapse' . $i++); ?>			<ul class="nav nav-tabs nav-stacked">				<?php foreach ($list as $item) : ?>					<li>						<a class="choose_type" href="#" title="<?php echo JText::_($item->description); ?>"							onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => $item->title, 'request' => $item->request))); ?>')">							<?php echo JText::_($item->title);?> <small class="muted"><?php echo JText::_($item->description); ?></small>						</a>					</li>				<?php endforeach; ?>			</ul>		<?php echo JHtml::_('bootstrap.endSlide'); ?>	<?php endforeach; ?>	<?php echo JHtml::_('bootstrap.addSlide', 'collapseTypes', JText::_('COM_MENUS_TYPE_SYSTEM'), 'collapse-system'); ?>		<ul class="nav nav-tabs nav-stacked">			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'url'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_EXTERNAL_URL_DESC'); ?></small>				</a>			</li>			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_ALIAS_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'alias'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_ALIAS'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_ALIAS_DESC'); ?></small>				</a>			</li>			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_SEPARATOR_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'separator'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_SEPARATOR'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_SEPARATOR_DESC'); ?></small>				</a>			</li>			<li><a class="choose_type" href="#" title="<?php echo JText::_('COM_MENUS_TYPE_HEADING_DESC'); ?>"					onclick="javascript:setmenutype('<?php echo base64_encode(json_encode(array('id' => $this->recordId, 'title' => 'heading'))); ?>')">					<?php echo JText::_('COM_MENUS_TYPE_HEADING'); ?> <small class="muted"><?php echo JText::_('COM_MENUS_TYPE_HEADING_DESC'); ?></small>			</li>		</ul>	<?php echo JHtml::_('bootstrap.endSlide'); ?><?php echo JHtml::_('bootstrap.endAccordion'); ?>
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Group class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/group/ * @since       13.1 */class JFacebookGroup extends JFacebookObject{	/**	 * Method to read a group. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string  $group  The group id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getGroup($group)	{		return $this->get($group);	}	/**	 * Method to get the group's wall. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string   $group   The group id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getFeed($group, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($group, 'feed', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the group's members. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string   $group   The group id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getMembers($group, $limit = 0, $offset = 0)	{		return $this->getConnection($group, 'members', '', $limit, $offset);	}	/**	 * Method to get the group's docs. Requires authentication and user_groups or friends_groups permission for non-public groups.	 *	 * @param   string   $group   The group id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getDocs($group, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($group, 'docs', '', $limit, $offset, $until, $since);	}	/**	 * Method to get the groups's picture. Requires authentication and user_groups or friends_groups permission.	 *	 * @param   string  $group  The group id.	 * @param   string  $type   To request a different photo use square | small | normal | large.	 *	 * @return  string   The URL to the group's picture.	 *	 * @since   13.1	 */	public function getPicture($group, $type = null)	{		if ($type)		{			$type = '?type=' . $type;		}		return $this->getConnection($group, 'picture', $type);	}	/**	 * Method to post a link on group's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $group    The group id.	 * @param   string  $link     Link URL.	 * @param   strin   $message  Link message.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createLink($group, $link, $message = null)	{		// Set POST request parameters.		$data = array();		$data['link'] = $link;		if ($message)		{			$data['message'] = $message;		}		return $this->createConnection($group, 'feed', $data);	}	/**	 * Method to delete a link. Requires authentication.	 *	 * @param   mixed  $link  The Link ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLink($link)	{		return $this->deleteConnection($link);	}	/**	 * Method to post on group's wall. Message or link parameter is required. Requires authentication and publish_stream permission.	 *	 * @param   string  $group        The group id.	 * @param   string  $message      Post message.	 * @param   string  $link         Post URL.	 * @param   string  $picture      Post thumbnail image (can only be used if link is specified)	 * @param   string  $name         Post name (can only be used if link is specified).	 * @param   string  $caption      Post caption (can only be used if link is specified).	 * @param   string  $description  Post description (can only be used if link is specified).	 * @param   array   $actions      Post actions array of objects containing name and link.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createPost($group, $message = null, $link = null, $picture = null, $name = null, $caption = null,		$description = null, $actions = null)	{		// Set POST request parameters.		if ($message)		{			$data['message'] = $message;		}		if ($link)		{			$data['link'] = $link;		}		if ($name)		{			$data['name'] = $name;		}		if ($caption)		{			$data['caption'] = $caption;		}		if ($description)		{			$data['description'] = $description;		}		if ($actions)		{			$data['actions'] = $actions;		}		if ($picture)		{			$data['picture'] = $picture;		}		return $this->createConnection($group, 'feed', $data);	}	/**	 * Method to delete a post. Note: you can only delete the post if it was created by the current user. Requires authentication.	 *	 * @param   string  $post  The Post ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deletePost($post)	{		return $this->deleteConnection($post);	}	/**	 * Method to post a status message on behalf of the user on the group's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $group    The group id.	 * @param   string  $message  Status message content.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createStatus($group, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($group, 'feed', $data);	}	/**	 * Method to delete a status. Note: you can only delete the status if it was created by the current user. Requires authentication.	 *	 * @param   string  $status  The Status ID.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteStatus($status)	{		return $this->deleteConnection($status);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=debuguser&user_id=' . (int) $this->state->get('filter.user_id'));?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn tip" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button type="button" class="btn tip" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_RESET'); ?>"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th class="nowrap left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_NAME', 'a.name', $listDirn, $listOrder); ?>					</th>					<?php foreach ($this->actions as $key => $action) : ?>					<th width="5%" class="nowrap center">						<span class="hasTip" title="<?php echo htmlspecialchars(JText::_($key) . '::' . JText::_($action[1]), ENT_COMPAT, 'UTF-8'); ?>"><?php echo JText::_($key); ?></span>					</th>					<?php endforeach; ?>					<th width="5%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LFT', 'a.lft', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>				<tr class="row1">					<td colspan="15">						<div>							<?php echo JText::_('COM_USERS_DEBUG_LEGEND'); ?>							<span class="btn disabled btn-micro btn-warning"><i class="icon-white icon-ban-circle"></i></span> <?php echo JText::_('COM_USERS_DEBUG_IMPLICIT_DENY');?>							<span class="btn disabled btn-micro btn-success"><i class="icon-white icon-ok"></i></span> <?php echo JText::_('COM_USERS_DEBUG_EXPLICIT_ALLOW');?>							<span class="btn disabled btn-micro btn-danger"><i class="icon-white icon-remove"></i></span> <?php echo JText::_('COM_USERS_DEBUG_EXPLICIT_DENY');?>						</div>					</td>				</tr>				<?php foreach ($this->items as $i => $item) : ?>					<tr class="row0">						<td>							<?php echo $this->escape($item->title); ?>						</td>						<td class="nowrap">							<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>							<?php echo $this->escape($item->name); ?>						</td>						<?php foreach ($this->actions as $action) : ?>							<?php							$name  = $action[0];							$check = $item->checks[$name];							if ($check === true) :								$class  = 'icon-ok';								$button = 'btn-success';							elseif ($check === false) :								$class  = 'icon-remove';								$button = 'btn-danger';							elseif ($check === null) :								$class  = 'icon-ban-circle';								$button = 'btn-warning';							else :								$class  = '';								$button = '';							endif;							?>						<td class="center">							<span class="btn disabled btn-micro <?php echo $button; ?>">								<i class="icon-white <?php echo $class; ?>"></i>							</span>						</td>						<?php endforeach; ?>						<td class="center">							<?php echo (int) $item->lft; ?>							- <?php echo (int) $item->rgt; ?>						</td>						<td class="center">							<?php echo (int) $item->id; ?>						</td>					</tr>					<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of clients. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewClients extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		BannersHelper::addSubmenu('clients');		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/banners.php';		$canDo	= BannersHelper::getActions();		JToolbarHelper::title(JText::_('COM_BANNERS_MANAGER_CLIENTS'), 'banners-clients.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('client.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('client.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('clients.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('clients.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('clients.archive');			JToolbarHelper::checkin('clients.checkin');		}		if ($this->state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'clients.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('clients.trash');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_banners');		}		JToolbarHelper::help('JHELP_COMPONENTS_BANNERS_CLIENTS');		JHtmlSidebar::setAction('index.php?option=com_banners&view=clients');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.status' => JText::_('JSTATUS'),			'a.name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'contact' => JText::_('COM_BANNERS_HEADING_CONTACT'),			'client_name' => JText::_('COM_BANNERS_HEADING_CLIENT'),			'nbanners' => JText::_('COM_BANNERS_HEADING_ACTIVE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();if ($app->isSite()){	JSession::checkToken('get') or die(JText::_('JINVALID_TOKEN'));}require_once JPATH_ROOT . '/components/com_content/helpers/route.php';JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = $app->input->getCmd('function', 'jSelectArticle');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_content&view=articles&layout=modal&tmpl=component&function='.$function.'&'.JSession::getFormToken().'=1');?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search">				<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>			</label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<label class="selectlabel" for="filter_category_id"><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>			<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />			<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<?php endif; ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="title language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->title)); ?>', '<?php echo $this->escape($item->catid); ?>', null, '<?php echo $this->escape(ContentHelperRoute::getArticleRoute($item->id, $item->catid)); ?>');">						<?php echo $this->escape($item->title); ?></a>				</th>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table><?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('text');/** * Form Field class for the Joomla Platform. * Supports a URL text field * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.url.html#input.url * @see         JFormRuleUrl for validation of full urls * @since       11.1 */class JFormFieldUrl extends JFormFieldText{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Url';}
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API Changesets class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmapChangesets extends JOpenstreetmapObject{	/**	 * Method to create a changeset	 * 	 * @param   array  $changesets  array which contains changeset data	 * 	 * @return  array  The xml response	 * 	 * @since   13.1	 */	public function createChangeset($changesets=array())	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key'],				'oauth_token_secret' => $token['secret']		);		// Set the API base		$base = 'changeset/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$xml = '<?xml version="1.0" encoding="UTF-8"?>			<osm version="0.6" generator="JOpenstreetmap">';		if (!empty($changesets))		{			// Create Changeset element for every changeset			foreach ($changesets as $tags)			{				$xml .= '<changeset>';				$tag_list = '';				if (!empty($tags))				{					// Create a list of tags for each changeset					foreach ($tags as $key => $value)					{						$xml .= '<tag k="' . $key . '" v="' . $value . '"/>';					}				}				$xml .= '</changeset>';			}		}		$xml .= '</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to read a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  array    The xml response about a changeset	 *  	 * @since   13.1	 */	public function readChangeset($id)	{		// Set the API base		$base = 'changeset/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->changeset;	}	/**	 * Method to update a changeset	 * 	 * @param   int    $id    identifier of the changeset	 * @param   array  $tags  array of tags to update	 * 	 * @return  array    The xml response of updated changeset	 * 	 * @since   13.1 	 */	public function updateChangeset($id, $tags=array() )	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of tags to update changeset		$tag_list = '';		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<changeset>'				. $tag_list .				'</changeset>  				</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->changeset;	}	/**	 * Method to close a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  No value returns	 * 	 * @since   13.1	 */	public function closeChangeset($id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/close';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['format'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $header);	}	/**	 * Method to download a changeset	 * 	 * @param   int  $id  identifier of the changeset	 * 	 * @return  array	The xml response of requested changeset	 * 	 * @since   13.1	 */	public function downloadChangeset($id)	{		// Set the API base		$base = 'changeset/' . $id . '/download';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->create;	}	/**	 * Method to expand the bounding box of a changeset	 * 	 * @param   int    $id     identifier of the changeset	 * @param   array  $nodes  list of lat lon about nodes	 * 	 * @return  array    The xml response of changed changeset	 * 	 * @since   13.1	 */	public function expandBBoxChangeset($id, $nodes)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/expand_bbox';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of tags to update changeset		$node_list = '';		if (!empty($nodes))		{			foreach ($nodes as $node)			{				$node_list .= '<node lat="' . $node[0] . '" lon="' . $node[1] . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<changeset>'				. $node_list .				'</changeset>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->changeset;	}	/**	 * Method to Query on changesets	 *  	 * @param   string  $param  parameters for query	 * 	 * @return  array    The xml response	 * 	 * @since   13.1	 */	public function queryChangeset($param)	{		// Set the API base		$base = 'changesets/' . $param;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->osm;	}	/**	 * Method to upload a diff to a changeset	 * 	 * @param   string  $xml  diff data to upload	 * @param   int     $id   identifier of the changeset	 * 	 * @return  array    The xml response of result	 * 	 * @since   13.1	 */	public function diffUploadChangeset($xml, $id)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'changeset/' . $id . '/upload';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'POST', $parameters, $xml, $header);		$xml_string = simplexml_load_string($response->body);		return $xml_string->diffResult;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// Create shortcuts to some parameters.$params  = $this->item->params;$images  = json_decode($this->item->images);$urls    = json_decode($this->item->urls);$canEdit = $params->get('access-edit');$user    = JFactory::getUser();$info    = $params->get('info_block_position', 0);JHtml::_('behavior.caption');?><div class="item-page<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading') && $params->get('show_title')) : ?>	<div class="page-header">		<h1> <?php echo $this->escape($this->params->get('page_heading')); ?> </h1>	</div>	<?php endif;if (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && $this->item->paginationrelative){	echo $this->item->pagination;}?>	<?php if ($params->get('show_title') || $params->get('show_author')) : ?>	<div class="page-header">		<h2>			<?php if ($this->item->state == 0) : ?>				<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>			<?php endif; ?>			<?php if ($params->get('show_title')) : ?>				<?php if ($params->get('link_titles') && !empty($this->item->readmore_link)) : ?>					<a href="<?php echo $this->item->readmore_link; ?>"> <?php echo $this->escape($this->item->title); ?></a>				<?php else : ?>					<?php echo $this->escape($this->item->title); ?>				<?php endif; ?>			<?php endif; ?>		</h2>	</div>	<?php endif; ?>	<?php if (!$this->print) : ?>		<?php if ($canEdit || $params->get('show_print_icon') || $params->get('show_email_icon')) : ?>		<div class="btn-group pull-right">			<a class="btn dropdown-toggle" data-toggle="dropdown" href="#"> <span class="icon-cog"></span> <span class="caret"></span> </a>			<?php // Note the actions class is deprecated. Use dropdown-menu instead. ?>			<ul class="dropdown-menu actions">				<?php if ($params->get('show_print_icon')) : ?>				<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $this->item, $params); ?> </li>				<?php endif; ?>				<?php if ($params->get('show_email_icon')) : ?>				<li class="email-icon"> <?php echo JHtml::_('icon.email', $this->item, $params); ?> </li>				<?php endif; ?>				<?php if ($canEdit) : ?>				<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $this->item, $params); ?> </li>				<?php endif; ?>			</ul>		</div>		<?php endif; ?>		<?php else : ?>		<div class="pull-right">		<?php echo JHtml::_('icon.print_screen', $this->item, $params); ?>		</div>	<?php endif; ?><?php $useDefList = ($params->get('show_modify_date') || $params->get('show_publish_date') || $params->get('show_create_date')	|| $params->get('show_hits') || $params->get('show_category') || $params->get('show_parent_category') || $params->get('show_author')); ?>	<?php if ($useDefList && ($info == 0 || $info == 2)) : ?>		<div class="article-info muted">			<dl class="article-info">			<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>			<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>				<dd class="createdby">					<?php $author = $this->item->created_by_alias ? $this->item->created_by_alias : $this->item->author; ?>					<?php if (!empty($this->item->contactid) && $params->get('link_author') == true) : ?>						<?php						$needle = 'index.php?option=com_contact&view=contact&id=' . $this->item->contactid;						$menu = JFactory::getApplication()->getMenu();						$item = $menu->getItems('link', $needle, true);						$cntlink = !empty($item) ? $needle . '&Itemid=' . $item->id : $needle;						?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', JHtml::_('link', JRoute::_($cntlink), $author)); ?>					<?php else: ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>				<dd class="parent-category-name">					<?php $title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_parent_category') && !empty($this->item->parent_slug)) : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_category')) : ?>				<dd class="category-name">					<?php $title = $this->escape($this->item->category_title);					$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)) . '">' . $title . '</a>';?>					<?php if ($params->get('link_category') && $this->item->catslug) : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_publish_date')) : ?>				<dd class="published">					<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($info == 0) : ?>				<?php if ($params->get('show_modify_date')) : ?>					<dd class="modified">						<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_create_date')) : ?>					<dd class="create">						<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_hits')) : ?>					<dd class="hits">						<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>					</dd>				<?php endif; ?>			<?php endif; ?>			</dl>		</div>	<?php endif; ?>	<?php if ($params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?>	<?php if (!$params->get('show_intro')) : echo $this->item->event->afterDisplayTitle; endif; ?>	<?php echo $this->item->event->beforeDisplayContent; ?>	<?php if (isset($urls) && ((!empty($urls->urls_position) && ($urls->urls_position == '0')) || ($params->get('urls_position') == '0' && empty($urls->urls_position)))		|| (empty($urls->urls_position) && (!$params->get('urls_position')))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($params->get('access-view')):?>	<?php if (isset($images->image_fulltext) && !empty($images->image_fulltext)) : ?>	<?php $imgfloat = (empty($images->float_fulltext)) ? $params->get('float_fulltext') : $images->float_fulltext; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_fulltext_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_fulltext_caption) . '"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_fulltext); ?>" alt="<?php echo htmlspecialchars($images->image_fulltext_alt); ?>"/> </div>	<?php endif; ?>	<?php	if (!empty($this->item->pagination) && $this->item->pagination && !$this->item->paginationposition && !$this->item->paginationrelative):		echo $this->item->pagination;	endif;	?>	<?php if (isset ($this->item->toc)) :		echo $this->item->toc;	endif; ?>	<?php echo $this->item->text; ?>	<?php if ($useDefList && ($info == 1 || $info == 2)) : ?>		<div class="article-info muted">			<dl class="article-info">			<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>			<?php if ($info == 1) : ?>				<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>					<dd class="createdby">						<?php $author = $this->item->created_by_alias ? $this->item->created_by_alias : $this->item->author; ?>						<?php if (!empty($this->item->contactid) && $params->get('link_author') == true) : ?>						<?php						$needle = 'index.php?option=com_contact&view=contact&id=' . $this->item->contactid;						$menu = JFactory::getApplication()->getMenu();						$item = $menu->getItems('link', $needle, true);						$cntlink = !empty($item) ? $needle . '&Itemid=' . $item->id : $needle;						?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', JHtml::_('link', JRoute::_($cntlink), $author)); ?>						<?php else: ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>					<dd class="parent-category-name">						<?php	$title = $this->escape($this->item->parent_title);						$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)) . '">' . $title . '</a>';?>						<?php if ($params->get('link_parent_category') && $this->item->parent_slug) : ?>							<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>						<?php else : ?>							<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_category')) : ?>					<dd class="category-name">						<?php 	$title = $this->escape($this->item->category_title);						$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)) . '">' . $title . '</a>';?>						<?php if ($params->get('link_category') && $this->item->catslug) : ?>							<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>						<?php else : ?>							<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>						<?php endif; ?>					</dd>				<?php endif; ?>				<?php if ($params->get('show_publish_date')) : ?>					<dd class="published">						<span class="icon-calendar"></span>						<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>					</dd>				<?php endif; ?>			<?php endif; ?>			<?php if ($params->get('show_create_date')) : ?>				<dd class="create">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_modify_date')) : ?>				<dd class="modified">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_hits')) : ?>				<dd class="hits">					<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>				</dd>			<?php endif; ?>			</dl>		</div>	<?php endif; ?>	<?phpif (!empty($this->item->pagination) && $this->item->pagination && $this->item->paginationposition && !$this->item->paginationrelative):	echo $this->item->pagination;?>	<?php endif; ?>	<?php if (isset($urls) && ((!empty($urls->urls_position) && ($urls->urls_position == '1')) || ($params->get('urls_position') == '1'))) : ?>	<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php // Optional teaser intro text for guests ?>	<?php elseif ($params->get('show_noauth') == true && $user->get('guest')) : ?>	<?php echo $this->item->introtext; ?>	<?php //Optional link to let them register to see the whole article. ?>	<?php if ($params->get('show_readmore') && $this->item->fulltext != null) :		$link1 = JRoute::_('index.php?option=com_users&view=login');		$link = new JURI($link1);?>	<p class="readmore">		<a href="<?php echo $link; ?>">		<?php $attribs = json_decode($this->item->attribs); ?>		<?php		if ($attribs->alternative_readmore == null) :			echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');		elseif ($readmore = $this->item->alternative_readmore) :			echo $readmore;			if ($params->get('show_readmore_title', 0) != 0) :				echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));			endif;		elseif ($params->get('show_readmore_title', 0) == 0) :			echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');		else :			echo JText::_('COM_CONTENT_READ_MORE');			echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));		endif; ?>		</a>	</p>	<?php endif; ?>	<?php endif; ?>	<?phpif (!empty($this->item->pagination) && $this->item->pagination && $this->item->paginationposition && $this->item->paginationrelative) :	echo $this->item->pagination;?>	<?php endif; ?>	<?php echo $this->item->event->afterDisplayContent; ?> </div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filter table class for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderTableFilter extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  &$db  JDatabaseDriver connector object.	 *	 * @since   2.5	 */	public function __construct(&$db)	{		parent::__construct('#__finder_filters', 'filter_id', $db);	}	/**	 * Method to bind an associative array or object to the JTable instance.  This	 * method only binds properties that are publicly accessible and optionally	 * takes an array of properties to ignore when binding.	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 *                          to ignore while binding. [optional]	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @since   2.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Method to perform sanity checks on the JTable instance properties to ensure	 * they are safe to store in the database.  Child classes should override this	 * method to make sure the data they are storing in the database is safe and	 * as expected before storage.	 *	 * @return  boolean  True if the instance is sane and able to be stored in the database.	 *	 * @since   2.5	 */	public function check()	{		if (trim($this->alias) == '')		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		// Check the end date is not earlier than start up.		if ($this->d2 > $this->_db->getNullDate() && $this->d2 < $this->d1)		{			// Swap the dates.			$temp = $this->d1;			$this->d1 = $this->d2;			$this->d2 = $temp;		}		return true;	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table. The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An array of primary key values to update.  If not	 *                            set the instance property value is used. [optional]	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published] [optional]	 * @param   integer  $userId  The user id of the user performing the operation. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k . '=' . implode(' OR ' . $k . '=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) $userId . ')';		}		// Update the publishing state for rows with the given primary keys.		$query = $this->_db->getQuery(true)			->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('state') . ' = ' . (int) $state)			->where($where);		$this->_db->setQuery($query . $checkin);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if ($this->filter_id)		{			// Existing item			$this->modified = $date->toSql();			$this->modified_by = $user->get('id');		}		else		{			// New item. A filter's created field can be set by the user,			// so we don't touch it if it is set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		if (is_array($this->data))		{			$this->map_count = count($this->data);			$this->data = implode(',', $this->data);		}		else		{			$this->map_count = 0;			$this->data = implode(',', array());		}		// Verify that the alias is unique		$table = JTable::getInstance('Filter', 'FinderTable');		if ($table->load(array('alias' => $this->alias)) && ($table->filter_id != $this->filter_id || $this->filter_id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_ARTICLE_UNIQUE_ALIAS'));			return false;		}		return parent::store($updateNulls);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla View * * Class holding methods for displaying presentation data. * * @package     Joomla.Legacy * @subpackage  View * @since       12.2 */class JViewLegacy extends JObject{	/**	 * The name of the view	 *	 * @var    array	 */	protected $_name = null;	/**	 * Registered models	 *	 * @var    array	 */	protected $_models = array();	/**	 * The base path of the view	 *	 * @var    string	 */	protected $_basePath = null;	/**	 * The default model	 *	 * @var	string	 */	protected $_defaultModel = null;	/**	 * Layout name	 *	 * @var    string	 */	protected $_layout = 'default';	/**	 * Layout extension	 *	 * @var    string	 */	protected $_layoutExt = 'php';	/**	 * Layout template	 *	 * @var    string	 */	protected $_layoutTemplate = '_';	/**	 * The set of search directories for resources (templates)	 *	 * @var array	 */	protected $_path = array('template' => array(), 'helper' => array());	/**	 * The name of the default template source file.	 *	 * @var string	 */	protected $_template = null;	/**	 * The output of the template script.	 *	 * @var string	 */	protected $_output = null;	/**	 * Callback for escaping.	 *	 * @var string	 * @deprecated 13.3	 */	protected $_escape = 'htmlspecialchars';	/**	 * Charset to use in escaping mechanisms; defaults to urf8 (UTF-8)	 *	 * @var string	 */	protected $_charset = 'UTF-8';	/**	 * Constructor	 *	 * @param   array  $config  A named configuration array for object construction.<br/>	 *                          name: the name (optional) of the view (defaults to the view class name suffix).<br/>	 *                          charset: the character set to use for display<br/>	 *                          escape: the name (optional) of the function to use for escaping strings<br/>	 *                          base_path: the parent path (optional) of the views directory (defaults to the component folder)<br/>	 *                          template_plath: the path (optional) of the layout directory (defaults to base_path + /views/ + view name<br/>	 *                          helper_path: the path (optional) of the helper files (defaults to base_path + /helpers/)<br/>	 *                          layout: the layout (optional) to use to display the view<br/>	 *	 * @since   12.2	 */	public function __construct($config = array())	{		// Set the view name		if (empty($this->_name))		{			if (array_key_exists('name', $config))			{				$this->_name = $config['name'];			}			else			{				$this->_name = $this->getName();			}		}		// Set the charset (used by the variable escaping functions)		if (array_key_exists('charset', $config))		{			JLog::add('Setting a custom charset for escaping is deprecated. Override JViewLegacy::escape() instead.', JLog::WARNING, 'deprecated');			$this->_charset = $config['charset'];		}		// User-defined escaping callback		if (array_key_exists('escape', $config))		{			$this->setEscape($config['escape']);		}		// Set a base path for use by the view		if (array_key_exists('base_path', $config))		{			$this->_basePath = $config['base_path'];		}		else		{			$this->_basePath = JPATH_COMPONENT;		}		// Set the default template search path		if (array_key_exists('template_path', $config))		{			// User-defined dirs			$this->_setPath('template', $config['template_path']);		}		else		{			$this->_setPath('template', $this->_basePath . '/views/' . $this->getName() . '/tmpl');		}		// Set the default helper search path		if (array_key_exists('helper_path', $config))		{			// User-defined dirs			$this->_setPath('helper', $config['helper_path']);		}		else		{			$this->_setPath('helper', $this->_basePath . '/helpers');		}		// Set the layout		if (array_key_exists('layout', $config))		{			$this->setLayout($config['layout']);		}		else		{			$this->setLayout('default');		}		$this->baseurl = JURI::base(true);	}	/**	 * Execute and display a template script.	 *	 * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.	 *	 * @return  mixed  A string if successful, otherwise a Error object.	 *	 * @see     fetch()	 * @since   12.2	 */	public function display($tpl = null)	{		$result = $this->loadTemplate($tpl);		if ($result instanceof Exception)		{			return $result;		}		echo $result;	}	/**	 * Assigns variables to the view script via differing strategies.	 *	 * This method is overloaded; you can assign all the properties of	 * an object, an associative array, or a single value by name.	 *	 * You are not allowed to set variables that begin with an underscore;	 * these are either private properties for JView or private variables	 * within the template script itself.	 *	 * <code>	 * $view = new JView;	 *	 * // Assign directly	 * $view->var1 = 'something';	 * $view->var2 = 'else';	 *	 * // Assign by name and value	 * $view->assign('var1', 'something');	 * $view->assign('var2', 'else');	 *	 * // Assign by assoc-array	 * $ary = array('var1' => 'something', 'var2' => 'else');	 * $view->assign($obj);	 *	 * // Assign by object	 * $obj = new stdClass;	 * $obj->var1 = 'something';	 * $obj->var2 = 'else';	 * $view->assign($obj);	 *	 * </code>	 *	 * @return  boolean  True on success, false on failure.	 *	 * @deprecated  13.3 Use native PHP syntax.	 */	public function assign()	{		JLog::add(__METHOD__ . ' is deprecated. Use native PHP syntax.', JLog::WARNING, 'deprecated');		// Get the arguments; there may be 1 or 2.		$arg0 = @func_get_arg(0);		$arg1 = @func_get_arg(1);		// Assign by object		if (is_object($arg0))		{			// Assign public properties			foreach (get_object_vars($arg0) as $key => $val)			{				if (substr($key, 0, 1) != '_')				{					$this->$key = $val;				}			}			return true;		}		// Assign by associative array		if (is_array($arg0))		{			foreach ($arg0 as $key => $val)			{				if (substr($key, 0, 1) != '_')				{					$this->$key = $val;				}			}			return true;		}		// Assign by string name and mixed value.		// We use array_key_exists() instead of isset() because isset()		// fails if the value is set to null.		if (is_string($arg0) && substr($arg0, 0, 1) != '_' && func_num_args() > 1)		{			$this->$arg0 = $arg1;			return true;		}		// $arg0 was not object, array, or string.		return false;	}	/**	 * Assign variable for the view (by reference).	 *	 * You are not allowed to set variables that begin with an underscore;	 * these are either private properties for JView or private variables	 * within the template script itself.	 *	 * <code>	 * $view = new JView;	 *	 * // Assign by name and value	 * $view->assignRef('var1', $ref);	 *	 * // Assign directly	 * $view->ref = &$var1;	 * </code>	 *	 * @param   string  $key   The name for the reference in the view.	 * @param   mixed   &$val  The referenced variable.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   12.2	 * @deprecated  13.3  Use native PHP syntax.	 */	public function assignRef($key, &$val)	{		JLog::add(__METHOD__ . ' is deprecated. Use native PHP syntax.', JLog::WARNING, 'deprecated');		if (is_string($key) && substr($key, 0, 1) != '_')		{			$this->$key = &$val;			return true;		}		return false;	}	/**	 * Escapes a value for output in a view script.	 *	 * If escaping mechanism is either htmlspecialchars or htmlentities, uses	 * {@link $_encoding} setting.	 *	 * @param   mixed  $var  The output to escape.	 *	 * @return  mixed  The escaped value.	 *	 * @since   12.2	 */	public function escape($var)	{		if (in_array($this->_escape, array('htmlspecialchars', 'htmlentities')))		{			return call_user_func($this->_escape, $var, ENT_COMPAT, $this->_charset);		}		return call_user_func($this->_escape, $var);	}	/**	 * Method to get data from a registered model or a property of the view	 *	 * @param   string  $property  The name of the method to call on the model or the property to get	 * @param   string  $default   The name of the model to reference or the default value [optional]	 *	 * @return  mixed  The return value of the method	 *	 * @since   12.2	 */	public function get($property, $default = null)	{		// If $model is null we use the default model		if (is_null($default))		{			$model = $this->_defaultModel;		}		else		{			$model = strtolower($default);		}		// First check to make sure the model requested exists		if (isset($this->_models[$model]))		{			// Model exists, let's build the method name			$method = 'get' . ucfirst($property);			// Does the method exist?			if (method_exists($this->_models[$model], $method))			{				// The method exists, let's call it and return what we get				$result = $this->_models[$model]->$method();				return $result;			}		}		// Degrade to JObject::get		$result = parent::get($property, $default);		return $result;	}	/**	 * Method to get the model object	 *	 * @param   string  $name  The name of the model (optional)	 *	 * @return  mixed  JModelLegacy object	 *	 * @since   12.2	 */	public function getModel($name = null)	{		if ($name === null)		{			$name = $this->_defaultModel;		}		return $this->_models[strtolower($name)];	}	/**	 * Get the layout.	 *	 * @return  string  The layout name	 */	public function getLayout()	{		return $this->_layout;	}	/**	 * Get the layout template.	 *	 * @return  string  The layout template name	 */	public function getLayoutTemplate()	{		return $this->_layoutTemplate;	}	/**	 * Method to get the view name	 *	 * The model name by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the model	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->_name))		{			$classname = get_class($this);			$viewpos = strpos($classname, 'View');			if ($viewpos === false)			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_VIEW_GET_NAME'), 500);			}			$this->_name = strtolower(substr($classname, $viewpos + 4));		}		return $this->_name;	}	/**	 * Method to add a model to the view.  We support a multiple model single	 * view system by which models are referenced by classname.  A caveat to the	 * classname referencing is that any classname prepended by JModel will be	 * referenced by the name without JModel, eg. JModelCategory is just	 * Category.	 *	 * @param   JModelLegacy  $model    The model to add to the view.	 * @param   boolean       $default  Is this the default model?	 *	 * @return  object   The added model.	 *	 * @since   12.2	 */	public function setModel($model, $default = false)	{		$name = strtolower($model->getName());		$this->_models[$name] = $model;		if ($default)		{			$this->_defaultModel = $name;		}		return $model;	}	/**	 * Sets the layout name to use	 *	 * @param   string  $layout  The layout name or a string in format <template>:<layout file>	 *	 * @return  string  Previous value.	 *	 * @since   12.2	 */	public function setLayout($layout)	{		$previous = $this->_layout;		if (strpos($layout, ':') === false)		{			$this->_layout = $layout;		}		else		{			// Convert parameter to array based on :			$temp = explode(':', $layout);			$this->_layout = $temp[1];			// Set layout template			$this->_layoutTemplate = $temp[0];		}		return $previous;	}	/**	 * Allows a different extension for the layout files to be used	 *	 * @param   string  $value  The extension.	 *	 * @return  string   Previous value	 *	 * @since   12.2	 */	public function setLayoutExt($value)	{		$previous = $this->_layoutExt;		if ($value = preg_replace('#[^A-Za-z0-9]#', '', trim($value)))		{			$this->_layoutExt = $value;		}		return $previous;	}	/**	 * Sets the _escape() callback.	 *	 * @param   mixed  $spec  The callback for _escape() to use.	 *	 * @return  void	 *	 * @since   12.2	 * @deprecated  13.3  Override JViewLegacy::escape() instead.	 */	public function setEscape($spec)	{		JLog::add(__METHOD__ . ' is deprecated. Override JViewLegacy::escape() instead.', JLog::WARNING, 'deprecated');		$this->_escape = $spec;	}	/**	 * Adds to the stack of view script paths in LIFO order.	 *	 * @param   mixed  $path  A directory path or an array of paths.	 *	 * @return  void	 *	 * @since   12.2	 */	public function addTemplatePath($path)	{		$this->_addPath('template', $path);	}	/**	 * Adds to the stack of helper script paths in LIFO order.	 *	 * @param   mixed  $path  A directory path or an array of paths.	 *	 * @return  void	 *	 * @since   12.2	 */	public function addHelperPath($path)	{		$this->_addPath('helper', $path);	}	/**	 * Load a template file -- first look in the templates folder for an override	 *	 * @param   string  $tpl  The name of the template source file; automatically searches the template paths and compiles as needed.	 *	 * @return  string  The output of the the template script.	 *	 * @since   12.2	 * @throws  Exception	 */	public function loadTemplate($tpl = null)	{		// Clear prior output		$this->_output = null;		$template = JFactory::getApplication()->getTemplate();		$layout = $this->getLayout();		$layoutTemplate = $this->getLayoutTemplate();		// Create the template file name based on the layout		$file = isset($tpl) ? $layout . '_' . $tpl : $layout;		// Clean the file name		$file = preg_replace('/[^A-Z0-9_\.-]/i', '', $file);		$tpl = isset($tpl) ? preg_replace('/[^A-Z0-9_\.-]/i', '', $tpl) : $tpl;		// Load the language file for the template		$lang = JFactory::getLanguage();		$lang->load('tpl_' . $template, JPATH_BASE, null, false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", null, false, false)			|| $lang->load('tpl_' . $template, JPATH_BASE, $lang->getDefault(), false, false)			|| $lang->load('tpl_' . $template, JPATH_THEMES . "/$template", $lang->getDefault(), false, false);		// Change the template folder if alternative layout is in different template		if (isset($layoutTemplate) && $layoutTemplate != '_' && $layoutTemplate != $template)		{			$this->_path['template'] = str_replace($template, $layoutTemplate, $this->_path['template']);		}		// Load the template script		jimport('joomla.filesystem.path');		$filetofind = $this->_createFileName('template', array('name' => $file));		$this->_template = JPath::find($this->_path['template'], $filetofind);		// If alternate layout can't be found, fall back to default layout		if ($this->_template == false)		{			$filetofind = $this->_createFileName('', array('name' => 'default' . (isset($tpl) ? '_' . $tpl : $tpl)));			$this->_template = JPath::find($this->_path['template'], $filetofind);		}		if ($this->_template != false)		{			// Unset so as not to introduce into template scope			unset($tpl);			unset($file);			// Never allow a 'this' property			if (isset($this->this))			{				unset($this->this);			}			// Start capturing output into a buffer			ob_start();			// Include the requested template filename in the local scope			// (this will execute the view logic).			include $this->_template;			// Done with the requested template; get the buffer and			// clear it.			$this->_output = ob_get_contents();			ob_end_clean();			return $this->_output;		}		else		{			throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_LAYOUTFILE_NOT_FOUND', $file), 500);		}	}	/**	 * Load a helper file	 *	 * @param   string  $hlp  The name of the helper source file automatically searches the helper paths and compiles as needed.	 *	 * @return  void	 *	 * @since   12.2	 */	public function loadHelper($hlp = null)	{		// Clean the file name		$file = preg_replace('/[^A-Z0-9_\.-]/i', '', $hlp);		// Load the template script		jimport('joomla.filesystem.path');		$helper = JPath::find($this->_path['helper'], $this->_createFileName('helper', array('name' => $file)));		if ($helper != false)		{			// Include the requested template filename in the local scope			include_once $helper;		}	}	/**	 * Sets an entire array of search paths for templates or resources.	 *	 * @param   string  $type  The type of path to set, typically 'template'.	 * @param   mixed   $path  The new search path, or an array of search paths.  If null or false, resets to the current directory only.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function _setPath($type, $path)	{		$component = JApplicationHelper::getComponentName();		$app = JFactory::getApplication();		// Clear out the prior search dirs		$this->_path[$type] = array();		// Actually add the user-specified directories		$this->_addPath($type, $path);		// Always add the fallback directories as last resort		switch (strtolower($type))		{			case 'template':				// Set the alternative template search dir				if (isset($app))				{					$component = preg_replace('/[^A-Z0-9_\.-]/i', '', $component);					$fallback = JPATH_THEMES . '/' . $app->getTemplate() . '/html/' . $component . '/' . $this->getName();					$this->_addPath('template', $fallback);				}				break;		}	}	/**	 * Adds to the search path for templates and resources.	 *	 * @param   string  $type  The type of path to add.	 * @param   mixed   $path  The directory or stream, or an array of either, to search.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function _addPath($type, $path)	{		// Just force to array		settype($path, 'array');		// Loop through the path directories		foreach ($path as $dir)		{			// No surrounding spaces allowed!			$dir = trim($dir);			// Add trailing separators as needed			if (substr($dir, -1) != DIRECTORY_SEPARATOR)			{				// Directory				$dir .= DIRECTORY_SEPARATOR;			}			// Add to the top of the search dirs			array_unshift($this->_path[$type], $dir);		}	}	/**	 * Create the filename for a resource	 *	 * @param   string  $type   The resource type to create the filename for	 * @param   array   $parts  An associative array of filename information	 *	 * @return  string  The filename	 *	 * @since   12.2	 */	protected function _createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'template':				$filename = strtolower($parts['name']) . '.' . $this->_layoutExt;				break;			default:				$filename = strtolower($parts['name']) . '.php';				break;		}		return $filename;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.updater.updateadapter');/** * Extension class for updater * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 * */class JUpdaterExtension extends JUpdateAdapter{	/**	 * Start element parser callback.	 *	 * @param   object  $parser  The parser object.	 * @param   string  $name    The name of the element.	 * @param   array   $attrs   The attributes of the element.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _startElement($parser, $name, $attrs = array())	{		array_push($this->stack, $name);		$tag = $this->_getStackLocation();		// Reset the data		if (isset($this->$tag))		{			$this->$tag->_data = "";		}		switch ($name)		{			case 'UPDATE':				$this->current_update = JTable::getInstance('update');				$this->current_update->update_site_id = $this->updateSiteId;				$this->current_update->detailsurl = $this->_url;				$this->current_update->folder = "";				$this->current_update->client_id = 1;				break;			// Don't do anything			case 'UPDATES':				break;			default:				if (in_array($name, $this->updatecols))				{					$name = strtolower($name);					$this->current_update->$name = '';				}				if ($name == 'TARGETPLATFORM')				{					$this->current_update->targetplatform = $attrs;				}				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $name    The name of the element.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _endElement($parser, $name)	{		array_pop($this->stack);		// @todo remove code: echo 'Closing: '. $name .'<br />';		switch ($name)		{			case 'UPDATE':				$ver = new JVersion;				// Lower case and remove the exclamation mark				$product = strtolower(JFilterInput::getInstance()->clean($ver->PRODUCT, 'cmd'));				// Check that the product matches and that the version matches (optionally a regexp)				// Check for optional min_dev_level and max_dev_level attributes to further specify targetplatform (e.g., 3.0.1)				if ($product == $this->current_update->targetplatform['NAME']					&& preg_match('/' . $this->currentUpdate->targetplatform->version . '/', $ver->RELEASE)					&& ((!isset($this->currentUpdate->targetplatform->min_dev_level)) || $ver->DEV_LEVEL >= $this->currentUpdate->targetplatform->min_dev_level)					&& ((!isset($this->currentUpdate->targetplatform->max_dev_level)) || $ver->DEV_LEVEL <= $this->currentUpdate->targetplatform->max_dev_level))				{					// Target platform isn't a valid field in the update table so unset it to prevent J! from trying to store it					unset($this->current_update->targetplatform);					if (isset($this->latest))					{						if (version_compare($this->current_update->version, $this->latest->version, '>') == 1)						{							$this->latest = $this->current_update;						}					}					else					{						$this->latest = $this->current_update;					}				}				break;			case 'UPDATES':				// :D				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $data    The data.	 *	 * @return  void	 *	 * @note    This is public because its called externally.	 * @since   11.1	 */	protected function _characterData($parser, $data)	{		$tag = $this->_getLastTag();		/**		 * @todo remove code		 * if(!isset($this->$tag->_data)) $this->$tag->_data = '';		 * $this->$tag->_data .= $data;		 */		if (in_array($tag, $this->updatecols))		{			$tag = strtolower($tag);			$this->current_update->$tag .= $data;		}	}	/**	 * Finds an update.	 *	 * @param   array  $options  Update options.	 *	 * @return  array  Array containing the array of update sites and array of updates	 *	 * @since   11.1	 */	public function findUpdate($options)	{		$url = $options['location'];		$this->_url = &$url;		$this->updateSiteId = $options['update_site_id'];		if (substr($url, -4) != '.xml')		{			if (substr($url, -1) != '/')			{				$url .= '/';			}			$url .= 'extension.xml';		}		$db = $this->parent->getDBO();		$http = JHttpFactory::getHttp();		$response = $http->get($url);		if (!empty($response->code) && 200 != $response->code)		{			$query = $db->getQuery(true)				->update('#__update_sites')				->set('enabled = 0')				->where('update_site_id = ' . $this->updateSiteId);			$db->setQuery($query);			$db->execute();			JLog::add("Error opening url: " . $url, JLog::WARNING, 'updater');			$app = JFactory::getApplication();			$app->enqueueMessage(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_OPEN_URL', $url), 'warning');			return false;		}		$this->xmlParser = xml_parser_create('');		xml_set_object($this->xmlParser, $this);		xml_set_element_handler($this->xmlParser, '_startElement', '_endElement');		xml_set_character_data_handler($this->xmlParser, '_characterData');		if (!xml_parse($this->xmlParser, $response->body))		{			JLog::add("Error parsing url: " . $url, JLog::WARNING, 'updater');			$app = JFactory::getApplication();			$app->enqueueMessage(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_PARSE_URL', $url), 'warning');			return false;		}		xml_parser_free($this->xmlParser);		if (isset($this->latest))		{			if (isset($this->latest->client) && strlen($this->latest->client))			{				if (is_numeric($this->latest->client))				{					$byName = false;					// <client> has to be 'administrator' or 'site', numeric values are depreceated. See http://docs.joomla.org/Design_of_JUpdate					JLog::add(						'Using numeric values for <client> in the updater xml is deprecated. Use \'administrator\' or \'site\' instead.',						JLog::WARNING, 'deprecated'					);				}				else				{					$byName = true;				}				$this->latest->client_id = JApplicationHelper::getClientInfo($this->latest->client, $byName)->id;				unset($this->latest->client);			}			$updates = array($this->latest);		}		else		{			$updates = array();		}		return array('update_sites' => array(), 'updates' => $updates);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the default application languages for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSetdefaultlanguage extends JControllerBase{	/**	 * Constructor.	 *	 * @since   3.1	 */	public function __construct()	{		parent::__construct();		// Overrides application config and set the configuration.php file so tokens and database works		JFactory::$config = null;		JFactory::getConfig(JPATH_SITE . '/configuration.php');		JFactory::$session = null;	}	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the languages model.		$model = new InstallationModelLanguages;		// Check for request forgeries in the administrator language		$admin_lang = $this->input->getString('administratorlang', false);		// Check that the string is an ISO Language Code avoiding any injection.		if (!preg_match('/^[a-z]{2}(\-[A-Z]{2})?$/', $admin_lang))		{			$admin_lang = 'en-GB';		}		// Attempt to set the default administrator language		if (!$model->setDefault($admin_lang, 'administrator'))		{			// Create a error response message.			$app->enqueueMessage(JText::_('INSTL_DEFAULTLANGUAGE_ADMIN_COULDNT_SET_DEFAULT'), 'error');		}		else		{			// Create a response body.			$app->enqueueMessage(JText::sprintf('INSTL_DEFAULTLANGUAGE_ADMIN_SET_DEFAULT', $admin_lang));		}		// Check for request forgeries in the site language		$frontend_lang = $this->input->getString('frontendlang', false);		// Check that the string is an ISO Language Code avoiding any injection.		if (!preg_match('/^[a-z]{2}(\-[A-Z]{2})?$/', $frontend_lang))		{			$frontend_lang = 'en-GB';		}		// Attempt to set the default site language		if (!$model->setDefault($frontend_lang, 'site'))		{			// Create a error response message.			$app->enqueueMessage(JText::_('INSTL_DEFAULTLANGUAGE_FRONTEND_COULDNT_SET_DEFAULT'), 'error');		}		else		{			// Create a response body.			$app->enqueueMessage(JText::sprintf('INSTL_DEFAULTLANGUAGE_FRONTEND_SET_DEFAULT', $frontend_lang));		}		$r = new stdClass;		// Redirect to the final page.		$r->view = 'remove';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a user view level. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewLevel extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user   = JFactory::getUser();		$isNew	= ($this->item->id == 0);		$canDo  = UsersHelper::getActions();		JToolbarHelper::title(JText::_($isNew ? 'COM_USERS_VIEW_NEW_LEVEL_TITLE' : 'COM_USERS_VIEW_EDIT_LEVEL_TITLE'), 'levels-add');		if ($canDo->get('core.edit')||$canDo->get('core.create'))		{			JToolbarHelper::apply('level.apply');			JToolbarHelper::save('level.save');		}		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('level.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create')){				JToolbarHelper::save2copy('level.save2copy');			}		if (empty($this->item->id)){				JToolbarHelper::cancel('level.cancel');		}		else		{				JToolbarHelper::cancel('level.cancel', 'JTOOLBAR_CLOSE');		}			JToolbarHelper::divider();			JToolbarHelper::help('JHELP_USERS_ACCESS_LEVELS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('formbehavior.chosen', 'select');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectPosition');$lang      = JFactory::getLanguage();$ordering  = $this->escape($this->state->get('list.ordering'));$direction = $this->escape($this->state->get('list.direction'));$clientId  = $this->state->get('filter.client_id');$state     = $this->state->get('filter.state');$template  = $this->state->get('filter.template');$type      = $this->state->get('filter.type');?><form action="<?php echo JRoute::_('index.php?option=com_modules&view=positions&layout=modal&tmpl=component&function='.$function.'&client_id=' .$clientId);?>" method="post" name="adminForm" id="adminForm">	<fieldset class="filter clearfix">		<div class="left">			<label for="filter_search">				<?php echo JText::_('JSearch_Filter_Label'); ?>			</label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_MODULES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="right">			<select name="filter_state" class="inputbox" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.templateStates'), 'value', 'text', $state, true);?>			</select>			<select name="filter_type" class="inputbox" onchange="this.form.submit()">				<option value=""><?php echo JText::_('COM_MODULES_OPTION_SELECT_TYPE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.types'), 'value', 'text', $type, true);?>			</select>			<select name="filter_template" class="inputbox" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_TEMPLATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('modules.templates', $clientId), 'value', 'text', $template, true);?>			</select>		</div>	</fieldset>	<table class="adminlist">		<thead>			<tr>				<th class="title" width="20%">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'value', $direction, $ordering); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_MODULES_HEADING_TEMPLATES', 'templates', $direction, $ordering); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php $i = 1; foreach ($this->items as $value => $templates) : ?>			<tr class="row<?php echo $i = 1 - $i;?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $function;?>('<?php echo $value; ?>');"><?php echo $this->escape($value); ?></a>				</td>				<td>					<?php if (!empty($templates)):?>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $function;?>('<?php echo $value; ?>');">						<ul>						<?php foreach ($templates as $template => $label):?>							<li><?php echo $lang->hasKey($label) ? JText::sprintf('COM_MODULES_MODULE_TEMPLATE_POSITION', JText::_($template), JText::_($label)) : JText::_($template);?></li>						<?php endforeach;?>						</ul>					</a>					<?php endif;?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $ordering; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $direction; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Script file of Joomla CMS * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6.4 */class JoomlaInstallerScript{	/**	 * Method to update Joomla!	 *	 * @param   JInstallerFile    $installer    The class calling this method	 *	 * @return void	 */	public function update($installer)	{		$this->deleteUnexistingFiles();		$this->updateManifestCaches();		$this->updateDatabase();	}	protected function updateDatabase()	{		$db = JFactory::getDbo();		if (substr($db->name, 0, 5) == 'mysql')		{			$query = 'SHOW ENGINES';			$db->setQuery($query);			$results = $db->loadObjectList();			if ($db->getErrorNum())			{				echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';				return;			}			foreach ($results as $result)			{				if ($result->Support == 'DEFAULT')				{					$query = 'ALTER TABLE #__update_sites_extensions ENGINE = ' . $result->Engine;					$db->setQuery($query);					$db->execute();					if ($db->getErrorNum())					{						echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';						return;					}					break;				}			}		}	}	protected function updateManifestCaches()	{		$extensions = array();		// Components		//`type`, `element`, `folder`, `client_id`		$extensions[] = array('component', 'com_mailto', '', 0);		$extensions[] = array('component', 'com_wrapper', '', 0);		$extensions[] = array('component', 'com_admin', '', 1);		$extensions[] = array('component', 'com_banners', '', 1);		$extensions[] = array('component', 'com_cache', '', 1);		$extensions[] = array('component', 'com_categories', '', 1);		$extensions[] = array('component', 'com_checkin', '', 1);		$extensions[] = array('component', 'com_contact', '', 1);		$extensions[] = array('component', 'com_cpanel', '', 1);		$extensions[] = array('component', 'com_installer', '', 1);		$extensions[] = array('component', 'com_languages', '', 1);		$extensions[] = array('component', 'com_login', '', 1);		$extensions[] = array('component', 'com_media', '', 1);		$extensions[] = array('component', 'com_menus', '', 1);		$extensions[] = array('component', 'com_messages', '', 1);		$extensions[] = array('component', 'com_modules', '', 1);		$extensions[] = array('component', 'com_newsfeeds', '', 1);		$extensions[] = array('component', 'com_plugins', '', 1);		$extensions[] = array('component', 'com_search', '', 1);		$extensions[] = array('component', 'com_templates', '', 1);		$extensions[] = array('component', 'com_weblinks', '', 1);		$extensions[] = array('component', 'com_content', '', 1);		$extensions[] = array('component', 'com_config', '', 1);		$extensions[] = array('component', 'com_redirect', '', 1);		$extensions[] = array('component', 'com_users', '', 1);		$extensions[] = array('component', 'com_tags', '', 1);		// Libraries		$extensions[] = array('library', 'phpmailer', '', 0);		$extensions[] = array('library', 'simplepie', '', 0);		$extensions[] = array('library', 'phputf8', '', 0);		$extensions[] = array('library', 'joomla', '', 0);		// Modules site		// Site		$extensions[] = array('module', 'mod_articles_archive', '', 0);		$extensions[] = array('module', 'mod_articles_latest', '', 0);		$extensions[] = array('module', 'mod_articles_popular', '', 0);		$extensions[] = array('module', 'mod_banners', '', 0);		$extensions[] = array('module', 'mod_breadcrumbs', '', 0);		$extensions[] = array('module', 'mod_custom', '', 0);		$extensions[] = array('module', 'mod_feed', '', 0);		$extensions[] = array('module', 'mod_footer', '', 0);		$extensions[] = array('module', 'mod_login', '', 0);		$extensions[] = array('module', 'mod_menu', '', 0);		$extensions[] = array('module', 'mod_articles_news', '', 0);		$extensions[] = array('module', 'mod_random_image', '', 0);		$extensions[] = array('module', 'mod_related_items', '', 0);		$extensions[] = array('module', 'mod_search', '', 0);		$extensions[] = array('module', 'mod_stats', '', 0);		$extensions[] = array('module', 'mod_syndicate', '', 0);		$extensions[] = array('module', 'mod_users_latest', '', 0);		$extensions[] = array('module', 'mod_weblinks', '', 0);		$extensions[] = array('module', 'mod_whosonline', '', 0);		$extensions[] = array('module', 'mod_wrapper', '', 0);		$extensions[] = array('module', 'mod_articles_category', '', 0);		$extensions[] = array('module', 'mod_articles_categories', '', 0);		$extensions[] = array('module', 'mod_languages', '', 0);		$extensions[] = array('module', 'mod_tags_popular', '', 0);		$extensions[] = array('module', 'mod_tags_similar', '', 0);		// Administrator		$extensions[] = array('module', 'mod_custom', '', 1);		$extensions[] = array('module', 'mod_feed', '', 1);		$extensions[] = array('module', 'mod_latest', '', 1);		$extensions[] = array('module', 'mod_logged', '', 1);		$extensions[] = array('module', 'mod_login', '', 1);		$extensions[] = array('module', 'mod_menu', '', 1);		$extensions[] = array('module', 'mod_popular', '', 1);		$extensions[] = array('module', 'mod_quickicon', '', 1);		$extensions[] = array('module', 'mod_stats_admin', '', 1);		$extensions[] = array('module', 'mod_status', '', 1);		$extensions[] = array('module', 'mod_submenu', '', 1);		$extensions[] = array('module', 'mod_title', '', 1);		$extensions[] = array('module', 'mod_toolbar', '', 1);		$extensions[] = array('module', 'mod_multilangstatus', '', 1);		// Plug-ins		$extensions[] = array('plugin', 'gmail', 'authentication', 0);		$extensions[] = array('plugin', 'joomla', 'authentication', 0);		$extensions[] = array('plugin', 'ldap', 'authentication', 0);		$extensions[] = array('plugin', 'emailcloak', 'content', 0);		$extensions[] = array('plugin', 'loadmodule', 'content', 0);		$extensions[] = array('plugin', 'pagebreak', 'content', 0);		$extensions[] = array('plugin', 'pagenavigation', 'content', 0);		$extensions[] = array('plugin', 'vote', 'content', 0);		$extensions[] = array('plugin', 'codemirror', 'editors', 0);		$extensions[] = array('plugin', 'none', 'editors', 0);		$extensions[] = array('plugin', 'tinymce', 'editors', 0);		$extensions[] = array('plugin', 'article', 'editors-xtd', 0);		$extensions[] = array('plugin', 'image', 'editors-xtd', 0);		$extensions[] = array('plugin', 'pagebreak', 'editors-xtd', 0);		$extensions[] = array('plugin', 'readmore', 'editors-xtd', 0);		$extensions[] = array('plugin', 'categories', 'search', 0);		$extensions[] = array('plugin', 'contacts', 'search', 0);		$extensions[] = array('plugin', 'content', 'search', 0);		$extensions[] = array('plugin', 'newsfeeds', 'search', 0);		$extensions[] = array('plugin', 'weblinks', 'search', 0);		$extensions[] = array('plugin', 'languagefilter', 'system', 0);		$extensions[] = array('plugin', 'p3p', 'system', 0);		$extensions[] = array('plugin', 'cache', 'system', 0);		$extensions[] = array('plugin', 'debug', 'system', 0);		$extensions[] = array('plugin', 'log', 'system', 0);		$extensions[] = array('plugin', 'redirect', 'system', 0);		$extensions[] = array('plugin', 'remember', 'system', 0);		$extensions[] = array('plugin', 'sef', 'system', 0);		$extensions[] = array('plugin', 'logout', 'system', 0);		$extensions[] = array('plugin', 'contactcreator', 'user', 0);		$extensions[] = array('plugin', 'joomla', 'user', 0);		$extensions[] = array('plugin', 'profile', 'user', 0);		$extensions[] = array('plugin', 'joomla', 'extension', 0);		$extensions[] = array('plugin', 'joomla', 'content', 0);		$extensions[] = array('plugin', 'languagecode', 'system', 0);		$extensions[] = array('plugin', 'joomlaupdate', 'quickicon', 0);		$extensions[] = array('plugin', 'extensionupdate', 'quickicon', 0);		$extensions[] = array('plugin', 'recaptcha', 'captcha', 0);		$extensions[] = array('plugin', 'categories', 'finder', 0);		$extensions[] = array('plugin', 'contacts', 'finder', 0);		$extensions[] = array('plugin', 'content', 'finder', 0);		$extensions[] = array('plugin', 'newsfeeds', 'finder', 0);		$extensions[] = array('plugin', 'weblinks', 'finder', 0);		$extensions[] = array('plugin', 'tags', 'finder', 0);		// Templates		$extensions[] = array('template', 'beez3', '', 0);		$extensions[] = array('template', 'hathor', '', 1);		$extensions[] = array('template', 'protostar', '', 0);		$extensions[] = array('template', 'isis', '', 1);		// Languages		$extensions[] = array('language', 'en-GB', '', 0);		$extensions[] = array('language', 'en-GB', '', 1);		// Files		$extensions[] = array('file', 'joomla', '', 0);		// Packages		// None in core at this time		// Attempt to refresh manifest caches		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('*')			->from('#__extensions');		foreach ($extensions as $extension)		{			$query->where('type=' . $db->quote($extension[0]) . ' AND element=' . $db->quote($extension[1]) . ' AND folder=' . $db->quote($extension[2]) . ' AND client_id=' . $extension[3], 'OR');		}		$db->setQuery($query);		$extensions = $db->loadObjectList();		$installer = new JInstaller;		// Check for a database error.		if ($db->getErrorNum())		{			echo JText::sprintf('JLIB_DATABASE_ERROR_FUNCTION_FAILED', $db->getErrorNum(), $db->getErrorMsg()) . '<br />';			return;		}		foreach ($extensions as $extension)		{			if (!$installer->refreshManifestCache($extension->extension_id))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_MANIFEST', $extension->type, $extension->element, $extension->name, $extension->client_id) . '<br />';			}		}	}	public function deleteUnexistingFiles()	{		$files = array(			'/libraries/cms/cmsloader.php',			'/libraries/joomla/form/fields/templatestyle.php',			'/libraries/joomla/form/fields/user.php',			'/libraries/joomla/form/fields/menu.php',			'/libraries/joomla/form/fields/helpsite.php',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/2.5.2-2012-03-05.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/2.5.3-2012-03-13.sql',			'/administrator/components/com_admin/sql/updates/sqlsrv/index.html',			'/administrator/components/com_users/controllers/config.php',			'/administrator/language/en-GB/en-GB.plg_system_finder.ini',			'/administrator/language/en-GB/en-GB.plg_system_finder.sys.ini',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advhr/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advimage/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advlink/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/advlist/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autolink/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autoresize/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/autosave/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/bbcode/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/contextmenu/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/directionality/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/emotions/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/fullpage/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/fullscreen/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/iespell/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/inlinepopups/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/insertdatetime/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/layer/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/lists/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/media/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/nonbreaking/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/noneditable/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/pagebreak/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/paste/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/preview/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/print/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/save/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/searchreplace/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/spellchecker/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/style/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/tabfocus/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/table/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/template/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/visualchars/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/wordcount/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/plugins/xhtmlxtras/editor_plugin_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/themes/advanced/editor_template_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/themes/simple/editor_template_src.js',			'/media/editors/tinymce/jscripts/tiny_mce/tiny_mce_src.js',			'/media/com_finder/images/calendar.png',			'/media/com_finder/images/mime/index.html',			'/media/com_finder/images/mime/pdf.png',			'/components/com_media/controller.php',			'/components/com_media/helpers/index.html',			'/components/com_media/helpers/media.php',			// Joomla 3.0			'/administrator/components/com_admin/sql/updates/mysql/1.7.0-2011-06-06-2.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0-2011-06-06.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.0.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-2.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-3.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15-4.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-15.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-17.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.1-2011-09-20.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-10-15.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-10-19.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.3-2011-11-10.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-11-19.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-11-23.sql',			'/administrator/components/com_admin/sql/updates/mysql/1.7.4-2011-12-12.sql',			'/administrator/components/com_admin/views/sysinfo/tmpl/default_navigation.php',			'/administrator/components/com_categories/config.xml',			'/administrator/components/com_categories/helpers/categoriesadministrator.php',			'/administrator/components/com_contact/elements/contact.php',			'/administrator/components/com_contact/elements/index.html',			'/administrator/components/com_content/elements/article.php',			'/administrator/components/com_content/elements/author.php',			'/administrator/components/com_content/elements/index.html',			'/administrator/components/com_installer/models/fields/client.php',			'/administrator/components/com_installer/models/fields/group.php',			'/administrator/components/com_installer/models/fields/index.html',			'/administrator/components/com_installer/models/fields/search.php',			'/administrator/components/com_installer/models/fields/type.php',			'/administrator/components/com_installer/models/forms/index.html',			'/administrator/components/com_installer/models/forms/manage.xml',			'/administrator/components/com_installer/views/install/tmpl/default_form.php',			'/administrator/components/com_installer/views/manage/tmpl/default_filter.php',			'/administrator/components/com_languages/views/installed/tmpl/default_ftp.php',			'/administrator/components/com_languages/views/installed/tmpl/default_navigation.php',			'/administrator/components/com_modules/models/fields/index.html',			'/administrator/components/com_modules/models/fields/moduleorder.php',			'/administrator/components/com_modules/models/fields/moduleposition.php',			'/administrator/components/com_newsfeeds/elements/index.html',			'/administrator/components/com_newsfeeds/elements/newsfeed.php',			'/administrator/components/com_templates/views/prevuuw/index.html',			'/administrator/components/com_templates/views/prevuuw/tmpl/default.php',			'/administrator/components/com_templates/views/prevuuw/tmpl/index.html',			'/administrator/components/com_templates/views/prevuuw/view.html.php',			'/administrator/includes/menu.php',			'/administrator/includes/router.php',			'/administrator/manifests/packages/pkg_joomla.xml',			'/administrator/modules/mod_submenu/helper.php',			'/administrator/templates/hathor/css/ie6.css',			'/administrator/templates/hathor/html/mod_submenu/index.html',			'/administrator/templates/hathor/html/mod_submenu/default.php',			'/components/com_media/controller.php',			'/components/com_media/helpers/index.html',			'/components/com_media/helpers/media.php',			'/includes/menu.php',			'/includes/pathway.php',			'/includes/router.php',			'/language/en-GB/en-GB.pkg_joomla.sys.ini',			'/libraries/cms/controller/index.html',			'/libraries/cms/controller/legacy.php',			'/libraries/cms/model/index.html',			'/libraries/cms/model/legacy.php',			'/libraries/cms/schema/changeitemmysql.php',			'/libraries/cms/schema/changeitemsqlazure.php',			'/libraries/cms/schema/changeitemsqlsrv.php',			'/libraries/cms/view/index.html',			'/libraries/cms/view/legacy.php',			'/libraries/joomla/application/application.php',			'/libraries/joomla/application/categories.php',			'/libraries/joomla/application/cli/daemon.php',			'/libraries/joomla/application/cli/index.html',			'/libraries/joomla/application/component/controller.php',			'/libraries/joomla/application/component/controlleradmin.php',			'/libraries/joomla/application/component/controllerform.php',			'/libraries/joomla/application/component/helper.php',			'/libraries/joomla/application/component/index.html',			'/libraries/joomla/application/component/model.php',			'/libraries/joomla/application/component/modeladmin.php',			'/libraries/joomla/application/component/modelform.php',			'/libraries/joomla/application/component/modelitem.php',			'/libraries/joomla/application/component/modellist.php',			'/libraries/joomla/application/component/view.php',			'/libraries/joomla/application/helper.php',			'/libraries/joomla/application/input.php',			'/libraries/joomla/application/input/cli.php',			'/libraries/joomla/application/input/cookie.php',			'/libraries/joomla/application/input/files.php',			'/libraries/joomla/application/input/index.html',			'/libraries/joomla/application/menu.php',			'/libraries/joomla/application/module/helper.php',			'/libraries/joomla/application/module/index.html',			'/libraries/joomla/application/pathway.php',			'/libraries/joomla/application/web/webclient.php',			'/libraries/joomla/base/node.php',			'/libraries/joomla/base/object.php',			'/libraries/joomla/base/observable.php',			'/libraries/joomla/base/observer.php',			'/libraries/joomla/base/tree.php',			'/libraries/joomla/cache/storage/eaccelerator.php',			'/libraries/joomla/cache/storage/helpers/helper.php',			'/libraries/joomla/cache/storage/helpers/index.html',			'/libraries/joomla/database/database/index.html',			'/libraries/joomla/database/database/mysql.php',			'/libraries/joomla/database/database/mysqlexporter.php',			'/libraries/joomla/database/database/mysqli.php',			'/libraries/joomla/database/database/mysqliexporter.php',			'/libraries/joomla/database/database/mysqliimporter.php',			'/libraries/joomla/database/database/mysqlimporter.php',			'/libraries/joomla/database/database/mysqliquery.php',			'/libraries/joomla/database/database/mysqlquery.php',			'/libraries/joomla/database/database/sqlazure.php',			'/libraries/joomla/database/database/sqlazurequery.php',			'/libraries/joomla/database/database/sqlsrv.php',			'/libraries/joomla/database/database/sqlsrvquery.php',			'/libraries/joomla/database/exception.php',			'/libraries/joomla/database/table.php',			'/libraries/joomla/database/table/asset.php',			'/libraries/joomla/database/table/category.php',			'/libraries/joomla/database/table/content.php',			'/libraries/joomla/database/table/extension.php',			'/libraries/joomla/database/table/index.html',			'/libraries/joomla/database/table/language.php',			'/libraries/joomla/database/table/menu.php',			'/libraries/joomla/database/table/menutype.php',			'/libraries/joomla/database/table/module.php',			'/libraries/joomla/database/table/session.php',			'/libraries/joomla/database/table/update.php',			'/libraries/joomla/database/table/user.php',			'/libraries/joomla/database/table/usergroup.php',			'/libraries/joomla/database/table/viewlevel.php',			'/libraries/joomla/database/tablenested.php',			'/libraries/joomla/environment/request.php',			'/libraries/joomla/environment/uri.php',			'/libraries/joomla/error/error.php',			'/libraries/joomla/error/exception.php',			'/libraries/joomla/error/index.html',			'/libraries/joomla/error/log.php',			'/libraries/joomla/error/profiler.php',			'/libraries/joomla/filesystem/archive.php',			'/libraries/joomla/filesystem/archive/bzip2.php',			'/libraries/joomla/filesystem/archive/gzip.php',			'/libraries/joomla/filesystem/archive/index.html',			'/libraries/joomla/filesystem/archive/tar.php',			'/libraries/joomla/filesystem/archive/zip.php',			'/libraries/joomla/form/fields/category.php',			'/libraries/joomla/form/fields/componentlayout.php',			'/libraries/joomla/form/fields/contentlanguage.php',			'/libraries/joomla/form/fields/editor.php',			'/libraries/joomla/form/fields/editors.php',			'/libraries/joomla/form/fields/media.php',			'/libraries/joomla/form/fields/menuitem.php',			'/libraries/joomla/form/fields/modulelayout.php',			'/libraries/joomla/html/editor.php',			'/libraries/joomla/html/html/access.php',			'/libraries/joomla/html/html/batch.php',			'/libraries/joomla/html/html/behavior.php',			'/libraries/joomla/html/html/category.php',			'/libraries/joomla/html/html/content.php',			'/libraries/joomla/html/html/contentlanguage.php',			'/libraries/joomla/html/html/date.php',			'/libraries/joomla/html/html/email.php',			'/libraries/joomla/html/html/form.php',			'/libraries/joomla/html/html/grid.php',			'/libraries/joomla/html/html/image.php',			'/libraries/joomla/html/html/index.html',			'/libraries/joomla/html/html/jgrid.php',			'/libraries/joomla/html/html/list.php',			'/libraries/joomla/html/html/menu.php',			'/libraries/joomla/html/html/number.php',			'/libraries/joomla/html/html/rules.php',			'/libraries/joomla/html/html/select.php',			'/libraries/joomla/html/html/sliders.php',			'/libraries/joomla/html/html/string.php',			'/libraries/joomla/html/html/tabs.php',			'/libraries/joomla/html/html/tel.php',			'/libraries/joomla/html/html/user.php',			'/libraries/joomla/html/pagination.php',			'/libraries/joomla/html/pane.php',			'/libraries/joomla/html/parameter.php',			'/libraries/joomla/html/parameter/element.php',			'/libraries/joomla/html/parameter/element/calendar.php',			'/libraries/joomla/html/parameter/element/category.php',			'/libraries/joomla/html/parameter/element/componentlayouts.php',			'/libraries/joomla/html/parameter/element/contentlanguages.php',			'/libraries/joomla/html/parameter/element/editors.php',			'/libraries/joomla/html/parameter/element/filelist.php',			'/libraries/joomla/html/parameter/element/folderlist.php',			'/libraries/joomla/html/parameter/element/helpsites.php',			'/libraries/joomla/html/parameter/element/hidden.php',			'/libraries/joomla/html/parameter/element/imagelist.php',			'/libraries/joomla/html/parameter/element/index.html',			'/libraries/joomla/html/parameter/element/languages.php',			'/libraries/joomla/html/parameter/element/list.php',			'/libraries/joomla/html/parameter/element/menu.php',			'/libraries/joomla/html/parameter/element/menuitem.php',			'/libraries/joomla/html/parameter/element/modulelayouts.php',			'/libraries/joomla/html/parameter/element/password.php',			'/libraries/joomla/html/parameter/element/radio.php',			'/libraries/joomla/html/parameter/element/spacer.php',			'/libraries/joomla/html/parameter/element/sql.php',			'/libraries/joomla/html/parameter/element/templatestyle.php',			'/libraries/joomla/html/parameter/element/text.php',			'/libraries/joomla/html/parameter/element/textarea.php',			'/libraries/joomla/html/parameter/element/timezones.php',			'/libraries/joomla/html/parameter/element/usergroup.php',			'/libraries/joomla/html/parameter/index.html',			'/libraries/joomla/html/toolbar.php',			'/libraries/joomla/html/toolbar/button.php',			'/libraries/joomla/html/toolbar/button/confirm.php',			'/libraries/joomla/html/toolbar/button/custom.php',			'/libraries/joomla/html/toolbar/button/help.php',			'/libraries/joomla/html/toolbar/button/index.html',			'/libraries/joomla/html/toolbar/button/link.php',			'/libraries/joomla/html/toolbar/button/popup.php',			'/libraries/joomla/html/toolbar/button/separator.php',			'/libraries/joomla/html/toolbar/button/standard.php',			'/libraries/joomla/html/toolbar/index.html',			'/libraries/joomla/image/filters/brightness.php',			'/libraries/joomla/image/filters/contrast.php',			'/libraries/joomla/image/filters/edgedetect.php',			'/libraries/joomla/image/filters/emboss.php',			'/libraries/joomla/image/filters/grayscale.php',			'/libraries/joomla/image/filters/index.html',			'/libraries/joomla/image/filters/negate.php',			'/libraries/joomla/image/filters/sketchy.php',			'/libraries/joomla/image/filters/smooth.php',			'/libraries/joomla/language/help.php',			'/libraries/joomla/language/latin_transliterate.php',			'/libraries/joomla/log/logexception.php',			'/libraries/joomla/log/loggers/database.php',			'/libraries/joomla/log/loggers/echo.php',			'/libraries/joomla/log/loggers/formattedtext.php',			'/libraries/joomla/log/loggers/index.html',			'/libraries/joomla/log/loggers/messagequeue.php',			'/libraries/joomla/log/loggers/syslog.php',			'/libraries/joomla/log/loggers/w3c.php',			'/libraries/joomla/methods.php',			'/libraries/joomla/session/storage/eaccelerator.php',			'/libraries/joomla/string/stringnormalize.php',			'/libraries/joomla/utilities/date.php',			'/libraries/joomla/utilities/simplecrypt.php',			'/libraries/joomla/utilities/simplexml.php',			'/libraries/joomla/utilities/string.php',			'/libraries/joomla/utilities/xmlelement.php',			'/media/plg_quickicon_extensionupdate/extensionupdatecheck.js',			'/media/plg_quickicon_joomlaupdate/jupdatecheck.js',			// Joomla! 3.1			'/libraries/joomla/form/rules/boolean.php',			'/libraries/joomla/form/rules/color.php',			'/libraries/joomla/form/rules/email.php',			'/libraries/joomla/form/rules/equals.php',			'/libraries/joomla/form/rules/index.html',			'/libraries/joomla/form/rules/options.php',			'/libraries/joomla/form/rules/rules.php',			'/libraries/joomla/form/rules/tel.php',			'/libraries/joomla/form/rules/url.php',			'/libraries/joomla/form/rules/username.php',			'/libraries/joomla/installer/adapters/component.php',			'/libraries/joomla/installer/adapters/file.php',			'/libraries/joomla/installer/adapters/index.html',			'/libraries/joomla/installer/adapters/language.php',			'/libraries/joomla/installer/adapters/library.php',			'/libraries/joomla/installer/adapters/module.php',			'/libraries/joomla/installer/adapters/package.php',			'/libraries/joomla/installer/adapters/plugin.php',			'/libraries/joomla/installer/adapters/template.php',			'/libraries/joomla/installer/extension.php',			'/libraries/joomla/installer/helper.php',			'/libraries/joomla/installer/index.html',			'/libraries/joomla/installer/librarymanifest.php',			'/libraries/joomla/installer/packagemanifest.php',			'/media/system/css/mooRainbow.css',			'/media/system/js/mooRainbow-uncompressed.js',			'/media/system/js/mooRainbow.js',			'/media/system/js/swf-uncompressed.js',			'/media/system/js/swf.js',			'/media/system/js/uploader-uncompressed.js',			'/media/system/js/uploader.js',			'/media/system/swf/index.html',			'/media/system/swf/uploader.swf',		);		// TODO There is an issue while deleting folders using the ftp mode		$folders = array(			'/administrator/components/com_admin/sql/updates/sqlsrv',			'/media/com_finder/images/mime',			'/media/com_finder/images',			'/components/com_media/helpers',			// Joomla 3.0			'/administrator/components/com_contact/elements',			'/administrator/components/com_content/elements',			'/administrator/components/com_installer/models/fields',			'/administrator/components/com_installer/models/forms',			'/administrator/components/com_modules/models/fields',			'/administrator/components/com_newsfeeds/elements',			'/administrator/components/com_templates/views/prevuuw/tmpl',			'/administrator/components/com_templates/views/prevuuw',			'/libraries/cms/controller',			'/libraries/cms/model',			'/libraries/cms/view',			'/libraries/joomla/application/cli',			'/libraries/joomla/application/component',			'/libraries/joomla/application/input',			'/libraries/joomla/application/module',			'/libraries/joomla/cache/storage/helpers',			'/libraries/joomla/database/table',			'/libraries/joomla/database/database',			'/libraries/joomla/error',			'/libraries/joomla/filesystem/archive',			'/libraries/joomla/html/html',			'/libraries/joomla/html/toolbar',			'/libraries/joomla/html/toolbar/button',			'/libraries/joomla/html/parameter',			'/libraries/joomla/html/parameter/element',			'/libraries/joomla/image/filters',			'/libraries/joomla/log/loggers',			// Joomla! 3.1			'/libraries/joomla/form/rules',			'/libraries/joomla/installer/adapters',			'/libraries/joomla/installer',			'/media/system/swf/',		);		jimport('joomla.filesystem.file');		foreach ($files as $file)		{			if (JFile::exists(JPATH_ROOT . $file) && !JFile::delete(JPATH_ROOT . $file))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_FILE_FOLDER', $file) . '<br />';			}		}		jimport('joomla.filesystem.folder');		foreach ($folders as $folder)		{			if (JFolder::exists(JPATH_ROOT . $folder) && !JFolder::delete(JPATH_ROOT . $folder))			{				echo JText::sprintf('FILES_JOOMLA_ERROR_FILE_FOLDER', $folder) . '<br />';			}		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');?><div class="profile <?php echo $this->pageclass_sfx?>"><?php if (JFactory::getUser()->id == $this->data->id) : ?><ul class="btn-toolbar pull-right">	<li class="btn-group">		<a class="btn" href="<?php echo JRoute::_('index.php?option=com_users&task=profile.edit&user_id='.(int) $this->data->id);?>">			<span class="icon-user"></span> <?php echo JText::_('COM_USERS_EDIT_PROFILE'); ?></a>	</li></ul><?php endif; ?><?php if ($this->params->get('show_page_heading')) : ?><div class="page-header">	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1></div><?php endif; ?><?php echo $this->loadTemplate('core'); ?><?php echo $this->loadTemplate('params'); ?><?php echo $this->loadTemplate('custom'); ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');$user = JFactory::getUser();$canDo = TemplatesHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'style.cancel' || document.formvalidator.isValid(document.id('style-form')))		{			Joomla.submitform(task, document.getElementById('style-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_templates&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="style-form" class="form-validate form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('JDETAILS', true)); ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('template'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('template'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('client_id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('client_id'); ?>						<input type="text" size="35" value="<?php echo $this->item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>	" class="readonly" readonly="readonly" />					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('home'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('home'); ?>					</div>				</div>				<?php if ($this->item->id) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('id'); ?>						</div>						<div class="controls">							<span class="disabled"><?php echo $this->item->id; ?></span>						</div>					</div>				<?php endif; ?>				<?php if ($this->item->xml) : ?>					<?php if ($text = trim($this->item->xml->description)) : ?>						<div class="control-group">							<label class="control-label">								<?php echo JText::_('COM_TEMPLATES_TEMPLATE_DESCRIPTION'); ?>							</label>							<div class="controls">								<span class="disabled"><?php echo JText::_($text); ?></span>							</div>						</div>					<?php endif; ?>				<?php else : ?>					<div class="alert alert-error"><?php echo JText::_('COM_TEMPLATES_ERR_XML'); ?></div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'options', JText::_('JOPTIONS', true)); ?>				<?php //get the menu parameters that are automatically set but may be modified.					echo $this->loadTemplate('options'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php if ($user->authorise('core.edit', 'com_menu') && $this->item->client_id == 0):?>				<?php if ($canDo->get('core.edit.state')) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'assignment', JText::_('COM_TEMPLATES_MENUS_ASSIGNMENT', true)); ?>						<?php echo $this->loadTemplate('assignment'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>			<?php endif;?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');jimport('joomla.filesystem.path');/** * Installer helper class * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */abstract class JInstallerHelper{	/**	 * Downloads a package	 *	 * @param   string  $url     URL of file to download	 * @param   string  $target  Download target filename [optional]	 *	 * @return  mixed  Path to downloaded package or boolean false on failure	 *	 * @since   3.1	 */	public static function downloadPackage($url, $target = false)	{		$config = JFactory::getConfig();		// Capture PHP errors		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		// Set user agent		$version = new JVersion;		ini_set('user_agent', $version->getUserAgent('Installer'));		$http = JHttpFactory::getHttp();		$response = $http->get($url);		if (302 == $response->code && isset($response->headers['Location']))		{			return self::downloadPackage($response->headers['Location']);		}		elseif (200 != $response->code)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_DOWNLOAD_SERVER_CONNECT'), JLog::WARNING, 'jerror');			return false;		}		if (isset($response->headers['Content-Disposition']))		{			$contentfilename = explode("\"", $response->headers['Content-Disposition']);			$target = $contentfilename[1];		}		// Set the target path if not given		if (!$target)		{			$target = $config->get('tmp_path') . '/' . self::getFilenameFromURL($url);		}		else		{			$target = $config->get('tmp_path') . '/' . basename($target);		}		// Write buffer to file		JFile::write($target, $response->body);		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Bump the max execution time because not using built in php zip libs are slow		@set_time_limit(ini_get('max_execution_time'));		// Return the name of the downloaded package		return basename($target);	}	/**	 * Unpacks a file and verifies it as a Joomla element package	 * Supports .gz .tar .tar.gz and .zip	 *	 * @param   string  $p_filename  The uploaded package filename or install directory	 *	 * @return  mixed  Array on success or boolean false on failure	 *	 * @since   3.1	 */	public static function unpack($p_filename)	{		// Path to the archive		$archivename = $p_filename;		// Temporary folder to extract the archive into		$tmpdir = uniqid('install_');		// Clean the paths to use for archive extraction		$extractdir = JPath::clean(dirname($p_filename) . '/' . $tmpdir);		$archivename = JPath::clean($archivename);		// Do the unpacking of the archive		try		{			JArchive::extract($archivename, $extractdir);		}		catch (Exception $e)		{			return false;		}		/*		 * Let's set the extraction directory and package file in the result array so we can		 * cleanup everything properly later on.		 */		$retval['extractdir'] = $extractdir;		$retval['packagefile'] = $archivename;		/*		 * Try to find the correct install directory.  In case the package is inside a		 * subdirectory detect this and set the install directory to the correct path.		 *		 * List all the items in the installation directory.  If there is only one, and		 * it is a folder, then we will set that folder to be the installation folder.		 */		$dirList = array_merge(JFolder::files($extractdir, ''), JFolder::folders($extractdir, ''));		if (count($dirList) == 1)		{			if (JFolder::exists($extractdir . '/' . $dirList[0]))			{				$extractdir = JPath::clean($extractdir . '/' . $dirList[0]);			}		}		/*		 * We have found the install directory so lets set it and then move on		 * to detecting the extension type.		 */		$retval['dir'] = $extractdir;		/*		 * Get the extension type and return the directory/type array on success or		 * false on fail.		 */		$retval['type'] = self::detectType($extractdir);		if ($retval['type'])		{			return $retval;		}		else		{			return false;		}	}	/**	 * Method to detect the extension type from a package directory	 *	 * @param   string  $p_dir  Path to package directory	 *	 * @return  mixed  Extension type string or boolean false on fail	 *	 * @since   3.1	 */	public static function detectType($p_dir)	{		// Search the install dir for an XML file		$files = JFolder::files($p_dir, '\.xml$', 1, true);		if (!count($files))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_NOTFINDXMLSETUPFILE'), JLog::WARNING, 'jerror');			return false;		}		foreach ($files as $file)		{			$xml = simplexml_load_file($file);			if (!$xml)			{				continue;			}			if ($xml->getName() != 'extension')			{				unset($xml);				continue;			}			$type = (string) $xml->attributes()->type;			// Free up memory			unset($xml);			return $type;		}		JLog::add(JText::_('JLIB_INSTALLER_ERROR_NOTFINDJOOMLAXMLSETUPFILE'), JLog::WARNING, 'jerror');		// Free up memory.		unset($xml);		return false;	}	/**	 * Gets a file name out of a url	 *	 * @param   string  $url  URL to get name from	 *	 * @return  mixed   String filename or boolean false if failed	 *	 * @since   3.1	 */	public static function getFilenameFromURL($url)	{		if (is_string($url))		{			$parts = explode('/', $url);			return $parts[count($parts) - 1];		}		return false;	}	/**	 * Clean up temporary uploaded package and unpacked extension	 *	 * @param   string  $package    Path to the uploaded package file	 * @param   string  $resultdir  Path to the unpacked extension	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public static function cleanupInstall($package, $resultdir)	{		$config = JFactory::getConfig();		// Does the unpacked extension directory exist?		if (is_dir($resultdir))		{			JFolder::delete($resultdir);		}		// Is the package file a valid file?		if (is_file($package))		{			JFile::delete($package);		}		elseif (is_file(JPath::clean($config->get('tmp_path') . '/' . $package)))		{			// It might also be just a base filename			JFile::delete(JPath::clean($config->get('tmp_path') . '/' . $package));		}	}	/**	 * Splits contents of a sql file into array of discreet queries.	 * Queries need to be delimited with end of statement marker ';'	 *	 * @param   string  $query  The SQL statement.	 *	 * @return  array  Array of queries	 *	 * @since   3.1	 * @deprecated  13.3  Use JDatabaseDriver::splitSql() directly	 * @codeCoverageIgnore	 */	public static function splitSql($query)	{		JLog::add('JInstallerHelper::splitSql() is deprecated. Use JDatabaseDriver::splitSql() instead.', JLog::WARNING, 'deprecated');		$db = JFactory::getDbo();		return $db->splitSql($query);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Checkin Controller * * @package     Joomla.Administrator * @subpackage  com_checkin * @since       1.6 */class CheckinController extends JControllerLegacy{	public function display($cachable = false, $urlparams = false)	{		// Load the submenu.		$this->addSubmenu($this->input->getWord('option', 'com_checkin'));		parent::display();		return $this;	}	public function checkin()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$ids = $this->input->get('cid', array(), 'array');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('JLIB_HTML_PLEASE_MAKE_A_SELECTION_FROM_THE_LIST'));		}		else		{			// Get the model.			$model = $this->getModel();			// Checked in the items.			$this->setMessage(JText::plural('COM_CHECKIN_N_ITEMS_CHECKED_IN', $model->checkin($ids)));		}		$this->setRedirect('index.php?option=com_checkin');	}	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	protected function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_CHECKIN'),			'index.php?option=com_checkin',			$vName == 'com_checkin'		);		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_CLEAR_CACHE'),			'index.php?option=com_cache',			$vName == 'cache'		);		JHtmlSidebar::addEntry(			JText::_('JGLOBAL_SUBMENU_PURGE_EXPIRED_CACHE'),			'index.php?option=com_cache&view=purge',			$vName == 'purge'		);	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewLanguagesHtml $this */// Get version of Joomla! to compare it with the version of the language package$version = new JVersion;?><script type="text/javascript">	function installLanguages()	{		document.id(install_languages_desc).hide();		document.id(wait_installing).show();		document.id(wait_installing_spinner).show();		Install.submitform();	}</script><?php echo JHtml::_('installation.stepbarlanguages'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a				class="btn"				href="#"				onclick="return Install.goToPage('remove');"				rel="prev"				title="<?php echo JText::_('JPREVIOUS'); ?>">				<i class="icon-arrow-left"></i>				<?php echo JText::_('JPREVIOUS'); ?>			</a>			<a				class="btn btn-primary"				href="#"				onclick="installLanguages()"				rel="next"				title="<?php echo JText::_('JNEXT'); ?>">				<i class="icon-arrow-right icon-white"></i>				<?php echo JText::_('JNEXT'); ?>			</a>		</div>	</div>	<h3><?php echo JText::_('INSTL_LANGUAGES'); ?></h3>	<hr class="hr-condensed" />	<?php if (!$this->items) : ?>		<p><?php echo JText::_('INSTL_LANGUAGES_WARNING_NO_INTERNET') ?></p>		<p>			<a href="#"			class="btn btn-primary"			onclick="return Install.goToPage('remove');">			<i class="icon-arrow-left icon-white"></i>			<?php echo JText::_('INSTL_LANGUAGES_WARNING_BACK_BUTTON'); ?>			</a>		</p>		<p><?php echo JText::_('INSTL_LANGUAGES_WARNING_NO_INTERNET2') ?></p>	<?php else : ?>		<p id="install_languages_desc"><?php echo JText::_('INSTL_LANGUAGES_DESC'); ?></p>		<p id="wait_installing" style="display: none;">			<?php echo JText::_('INSTL_LANGUAGES_MESSAGE_PLEASE_WAIT') ?><br />			<div id="wait_installing_spinner" class="spinner spinner-img" style="display: none;"></div>		</p>	<table class="table table-striped table-condensed">			<thead>					<tr>						<th>							<?php echo JText::_('INSTL_LANGUAGES_COLUMN_HEADER_LANGUAGE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_LANGUAGES_COLUMN_HEADER_VERSION'); ?>						</th>					</tr>			</thead>			<tbody>				<?php foreach ($this->items as $i => $language) : ?>					<tr>						<td>							<label class="checkbox">								<input									type="checkbox"									id="cb<?php echo $i; ?>"									name="cid[]"									value="<?php echo $language->update_id; ?>"									/> <?php echo $language->name; ?>									<?php // Display a Note if language pack version is not equal to Joomla version ?>									<?php if (substr($language->version, 0, 3) != $version->RELEASE											|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>										<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>									<?php endif; ?>							</label>						</td>						<td>							<span class="badge"><?php echo $language->version; ?></span>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="InstallLanguages" />		<?php echo JHtml::_('form.token'); ?>	<?php endif; ?></form>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class for tags * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.1 */abstract class JHtmlTag{	/**	 * Cached array of the tag items.	 *	 * @var    array	 * @since  3.1	 */	protected static $items = array();	/**	 * Returns an array of tags.	 *	 * @param   array  $config  An array of configuration options. By default, only	 *                          published and unpublished categories are returned.	 *	 * @return  array	 *	 * @since   3.1	 */	public static function options($config = array('filter.published' => array(0, 1)))	{		$hash = md5(serialize($config));		if (!isset(self::$items[$hash]))		{			$config = (array) $config;			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id, a.title, a.level')				->from('#__tags AS a')				->where('a.parent_id > 0');			// Filter on the published state			if (isset($config['filter.published']))			{				if (is_numeric($config['filter.published']))				{					$query->where('a.published = ' . (int) $config['filter.published']);				}				elseif (is_array($config['filter.published']))				{					JArrayHelper::toInteger($config['filter.published']);					$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');				}			}			// Filter on the language			if (isset($config['filter.language']))			{				if (is_string($config['filter.language']))				{					$query->where('a.language = ' . $db->quote($config['filter.language']));				}				elseif (is_array($config['filter.language']))				{					foreach ($config['filter.language'] as &$language)					{						$language = $db->quote($language);					}					$query->where('a.language IN (' . implode(',', $config['filter.language']) . ')');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Assemble the list options.			self::$items[$hash] = array();			foreach ($items as &$item)			{				$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;				$item->title = str_repeat('- ', $repeat) . $item->title;				self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);			}		}		return self::$items[$hash];	}	/**	 * Returns an array of tags.	 *	 * @param   array  $config  An array of configuration options. By default, only published and unpublished tags are returned.	 *	 * @return  array  Tag data	 *	 * @since   3.1	 */	public static function tags($config = array('filter.published' => array(0, 1)))	{		$hash = md5(serialize($config));		$config = (array) $config;		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id, a.title, a.level, a.parent_id')			->from('#__tags AS a')			->where('a.parent_id > 0');		// Filter on the published state		if (isset($config['filter.published']))		{			if (is_numeric($config['filter.published']))			{				$query->where('a.published = ' . (int) $config['filter.published']);			}			elseif (is_array($config['filter.published']))			{				JArrayHelper::toInteger($config['filter.published']);				$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');			}		}		$query->order('a.lft');		$db->setQuery($query);		$items = $db->loadObjectList();		// Assemble the list options.		self::$items[$hash] = array();		foreach ($items as &$item)		{			$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;			$item->title = str_repeat('- ', $repeat) . $item->title;			self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);		}		return self::$items[$hash];	}	/**	 * This is just a proxy for the formbehavior.ajaxchosen method	 *	 * @param   string   $selector     DOM id of the tag field	 * @param   boolean  $allowCustom  Flag to allow custom values	 *	 * @return  void	 *	 * @since   3.1	 */	public static function ajaxfield($selector='#jform_tags', $allowCustom = true)	{		// Tags field ajax		$chosenAjaxSettings = new JRegistry(			array(				'selector'    => $selector,				'type'        => 'GET',				'url'         => JURI::root() . 'index.php?option=com_tags&task=tags.searchAjax',				'dataType'    => 'json',				'jsonTermKey' => 'like'			)		);		JHtml::_('formbehavior.ajaxchosen', $chosenAjaxSettings);		// Allow custom values ?		if ($allowCustom)		{			JFactory::getDocument()->addScriptDeclaration("				(function($){					$(document).ready(function () {						var customTagPrefix = '#new#';						// Method to add tags pressing enter						$('" . $selector . "_chzn input').keydown(function(event) {							// Tag is greater than 3 chars and enter pressed							if (this.value.length >= 3 && (event.which === 13 || event.which === 188)) {								// Search an highlighted result								var highlighted = $('" . $selector . "_chzn').find('li.active-result.highlighted').first();								// Add the highlighted option								if (event.which === 13 && highlighted.text() !== '')								{									// Extra check. If we have added a custom tag with this text remove it									var customOptionValue = customTagPrefix + highlighted.text();									$('" . $selector . " option').filter(function () { return $(this).val() == customOptionValue; }).remove();									// Select the highlighted result									var tagOption = $('" . $selector . " option').filter(function () { return $(this).html() == highlighted.text(); });									tagOption.attr('selected', 'selected');								}								// Add the custom tag option								else								{									var customTag = this.value;									// Extra check. Search if the custom tag already exists (typed faster than AJAX ready)									var tagOption = $('" . $selector . " option').filter(function () { return $(this).html() == customTag; });									if (tagOption.text() !== '')									{										tagOption.attr('selected', 'selected');									}									else									{										var option = $('<option>');										option.text(this.value).val(customTagPrefix + this.value);										option.attr('selected','selected');										// Append the option an repopulate the chosen field										$('" . $selector . "').append(option);									}								}								this.value = '';								$('" . $selector . "').trigger('liszt:updated');								event.preventDefault();							}						});					});				})(jQuery);				"			);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract Format for JRegistry * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */abstract class JRegistryFormat{	/**	 * @var    array  JRegistryFormat instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Returns a reference to a Format object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $type  The format to load	 *	 * @return  JRegistryFormat  Registry format handler	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public static function getInstance($type)	{		// Sanitize format type.		$type = strtolower(preg_replace('/[^A-Z0-9_]/i', '', $type));		// Only instantiate the object if it doesn't already exist.		if (!isset(self::$instances[$type]))		{			// Only load the file the class does not exist.			$class = 'JRegistryFormat' . $type;			if (!class_exists($class))			{				$path = __DIR__ . '/format/' . $type . '.php';				if (is_file($path))				{					include_once $path;				}				else				{					throw new InvalidArgumentException('Unable to load format class.', 500);				}			}			self::$instances[$type] = new $class;		}		return self::$instances[$type];	}	/**	 * Converts an object into a formatted string.	 *	 * @param   object  $object   Data Source Object.	 * @param   array   $options  An array of options for the formatter.	 *	 * @return  string  Formatted string.	 *	 * @since   11.1	 */	abstract public function objectToString($object, $options = null);	/**	 * Converts a formatted string into an object.	 *	 * @param   string  $data     Formatted string	 * @param   array   $options  An array of options for the formatter.	 *	 * @return  object  Data Object	 *	 * @since   11.1	 */	abstract public function stringToObject($data, array $options = array());}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_cache'); ?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<table class="table table-striped">  		<thead>  			<tr>  				<th class="title" width="10">  					<?php echo JText::_('COM_CACHE_NUM'); ?>  				</th>  				<th width="20">  					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />  				</th>  				<th class="title nowrap">  					<?php echo JHtml::_('grid.sort',  'COM_CACHE_GROUP', 'group', $listDirn, $listOrder); ?>  				</th>  				<th width="5%" class="center nowrap">  					<?php echo JHtml::_('grid.sort',  'COM_CACHE_NUMBER_OF_FILES', 'count', $listDirn, $listOrder); ?>  				</th>  				<th width="10%" class="center">  					<?php echo JHtml::_('grid.sort',  'COM_CACHE_SIZE', 'size', $listDirn, $listOrder); ?>  				</th>  			</tr>  		</thead>  		<tfoot>  			<tr>  				<td colspan="6">  				<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  		<tbody>  			<?php  			$i = 0;  			foreach ($this->data as $folder => $item) : ?>  				<tr class="row<?php echo $i % 2; ?>">  					<td>  						<?php echo $this->pagination->getRowOffset($i); ?>  					</td>  					<td>  						<input type="checkbox" id="cb<?php echo $i;?>" name="cid[]" value="<?php echo $item->group; ?>" onclick="Joomla.isChecked(this.checked);" />  					</td>  					<td>  						<strong><?php echo $item->group; ?></strong>  					</td>  					<td class="center">  						<?php echo $item->count; ?>  					</td>  					<td class="center">  						<?php echo JHtml::_('number.bytes', $item->size*1024); ?>  					</td>  				</tr>  			<?php $i++; endforeach; ?>  		</tbody>  	</table>    	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="client" value="<?php echo $this->client->id;?>" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_category * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$com_path = JPATH_SITE.'/components/com_content/';require_once $com_path.'router.php';require_once $com_path.'helpers/route.php';JModelLegacy::addIncludePath($com_path . '/models', 'ContentModel');/** * Helper for mod_articles_category * * @package     Joomla.Site * @subpackage  mod_articles_category */abstract class ModArticlesCategoryHelper{	public static function getList(&$params)	{		// Get an instance of the generic articles model		$articles = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set application parameters in model		$app = JFactory::getApplication();		$appParams = $app->getParams();		$articles->setState('params', $appParams);		// Set the filters based on the module params		$articles->setState('list.start', 0);		$articles->setState('list.limit', (int) $params->get('count', 0));		$articles->setState('filter.published', 1);		// Access filter		$access = !JComponentHelper::getParams('com_content')->get('show_noauth');		$authorised = JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id'));		$articles->setState('filter.access', $access);		// Prep for Normal or Dynamic Modes		$mode = $params->get('mode', 'normal');		switch ($mode)		{			case 'dynamic':				$option = $app->input->get('option');				$view = $app->input->get('view');				if ($option === 'com_content')				{					switch($view)					{						case 'category':							$catids = array($app->input->getInt('id'));							break;						case 'categories':							$catids = array($app->input->getInt('id'));							break;						case 'article':							if ($params->get('show_on_article_page', 1))							{								$article_id = $app->input->getInt('id');								$catid = $app->input->getInt('catid');								if (!$catid)								{									// Get an instance of the generic article model									$article = JModelLegacy::getInstance('Article', 'ContentModel', array('ignore_request' => true));									$article->setState('params', $appParams);									$article->setState('filter.published', 1);									$article->setState('article.id', (int) $article_id);									$item = $article->getItem();									$catids = array($item->catid);								}								else								{									$catids = array($catid);								}							}							else {								// Return right away if show_on_article_page option is off								return;							}							break;						case 'featured':						default:							// Return right away if not on the category or article views							return;					}				}				else {					// Return right away if not on a com_content page					return;				}				break;			case 'normal':			default:				$catids = $params->get('catid');				$articles->setState('filter.category_id.include', (bool) $params->get('category_filtering_type', 1));				break;		}		// Category filter		if ($catids)		{			if ($params->get('show_child_category_articles', 0) && (int) $params->get('levels', 0) > 0)			{				// Get an instance of the generic categories model				$categories = JModelLegacy::getInstance('Categories', 'ContentModel', array('ignore_request' => true));				$categories->setState('params', $appParams);				$levels = $params->get('levels', 1) ? $params->get('levels', 1) : 9999;				$categories->setState('filter.get_children', $levels);				$categories->setState('filter.published', 1);				$categories->setState('filter.access', $access);				$additional_catids = array();				foreach ($catids as $catid)				{					$categories->setState('filter.parentId', $catid);					$recursive = true;					$items = $categories->getItems($recursive);					if ($items)					{						foreach ($items as $category)						{							$condition = (($category->level - $categories->getParent()->level) <= $levels);							if ($condition)							{								$additional_catids[] = $category->id;							}						}					}				}				$catids = array_unique(array_merge($catids, $additional_catids));			}			$articles->setState('filter.category_id', $catids);		}		// Ordering		$articles->setState('list.ordering', $params->get('article_ordering', 'a.ordering'));		$articles->setState('list.direction', $params->get('article_ordering_direction', 'ASC'));		// New Parameters		$articles->setState('filter.featured', $params->get('show_front', 'show'));		$articles->setState('filter.author_id', $params->get('created_by', ""));		$articles->setState('filter.author_id.include', $params->get('author_filtering_type', 1));		$articles->setState('filter.author_alias', $params->get('created_by_alias', ""));		$articles->setState('filter.author_alias.include', $params->get('author_alias_filtering_type', 1));		$excluded_articles = $params->get('excluded_articles', '');		if ($excluded_articles)		{			$excluded_articles = explode("\r\n", $excluded_articles);			$articles->setState('filter.article_id', $excluded_articles);			$articles->setState('filter.article_id.include', false); // Exclude		}		$date_filtering = $params->get('date_filtering', 'off');		if ($date_filtering !== 'off')		{			$articles->setState('filter.date_filtering', $date_filtering);			$articles->setState('filter.date_field', $params->get('date_field', 'a.created'));			$articles->setState('filter.start_date_range', $params->get('start_date_range', '1000-01-01 00:00:00'));			$articles->setState('filter.end_date_range', $params->get('end_date_range', '9999-12-31 23:59:59'));			$articles->setState('filter.relative_date', $params->get('relative_date', 30));		}		// Filter by language		$articles->setState('filter.language', $app->getLanguageFilter());		$items = $articles->getItems();		// Display options		$show_date = $params->get('show_date', 0);		$show_date_field = $params->get('show_date_field', 'created');		$show_date_format = $params->get('show_date_format', 'Y-m-d H:i:s');		$show_category = $params->get('show_category', 0);		$show_hits = $params->get('show_hits', 0);		$show_author = $params->get('show_author', 0);		$show_introtext = $params->get('show_introtext', 0);		$introtext_limit = $params->get('introtext_limit', 100);		// Find current Article ID if on an article page		$option = $app->input->get('option');		$view = $app->input->get('view');		if ($option === 'com_content' && $view === 'article')		{			$active_article_id = $app->input->getInt('id');		}		else		{			$active_article_id = 0;		}		// Prepare data for display using display options		foreach ($items as &$item)		{			$item->slug = $item->id.':'.$item->alias;			$item->catslug = $item->catid ? $item->catid .':'.$item->category_alias : $item->catid;			if ($access || in_array($item->access, $authorised))			{				// We know that user has the privilege to view the article				$item->link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug));			}			else			{				$app  = JFactory::getApplication();				$menu = $app->getMenu();				$menuitems = $menu->getItems('link', 'index.php?option=com_users&view=login');				if (isset($menuitems[0]))				{					$Itemid = $menuitems[0]->id;				}				elseif ($app->input->getInt('Itemid') > 0)				{					// Use Itemid from requesting page only if there is no existing menu					$Itemid = $app->input->getInt('Itemid');				}				$item->link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$Itemid);			}			// Used for styling the active article			$item->active = $item->id == $active_article_id ? 'active' : '';			$item->displayDate = '';			if ($show_date)			{				$item->displayDate = JHTML::_('date', $item->$show_date_field, $show_date_format);			}			if ($item->catid)			{				$item->displayCategoryLink = JRoute::_(ContentHelperRoute::getCategoryRoute($item->catid));				$item->displayCategoryTitle = $show_category ? '<a href="'.$item->displayCategoryLink.'">'.$item->category_title.'</a>' : '';			}			else {				$item->displayCategoryTitle = $show_category ? $item->category_title : '';			}			$item->displayHits = $show_hits ? $item->hits : '';			$item->displayAuthorName = $show_author ? $item->author : '';			if ($show_introtext)			{				$item->introtext = JHtml::_('content.prepare', $item->introtext, '', 'mod_articles_category.content');				$item->introtext = self::_cleanIntrotext($item->introtext);			}			$item->displayIntrotext = $show_introtext ? self::truncate($item->introtext, $introtext_limit) : '';			$item->displayReadmore = $item->alternative_readmore;		}		return $items;	}	public static function _cleanIntrotext($introtext)	{		$introtext = str_replace('<p>', ' ', $introtext);		$introtext = str_replace('</p>', ' ', $introtext);		$introtext = strip_tags($introtext, '<a><em><strong>');		$introtext = trim($introtext);		return $introtext;	}	/**	* Method to truncate introtext	*	* The goal is to get the proper length plain text string with as much of	* the html intact as possible with all tags properly closed.	*	* @param string   $html       The content of the introtext to be truncated	* @param integer  $maxLength  The maximum number of charactes to render	*	* @return  string  The truncated string	*/	public static function truncate($html, $maxLength = 0)	{		$baseLength = strlen($html);		$diffLength = 0;		// First get the plain text string. This is the rendered text we want to end up with.		$ptString = JHtml::_('string.truncate', $html, $maxLength, $noSplit = true, $allowHtml = false);		for ($maxLength; $maxLength < $baseLength;)		{			// Now get the string if we allow html.			$htmlString = JHtml::_('string.truncate', $html, $maxLength, $noSplit = true, $allowHtml = true);			// Now get the plain text from the html string.			$htmlStringToPtString = JHtml::_('string.truncate', $htmlString, $maxLength, $noSplit = true, $allowHtml = false);			// If the new plain text string matches the original plain text string we are done.			if ($ptString == $htmlStringToPtString)			{				return $htmlString;			}			// Get the number of html tag characters in the first $maxlength characters			$diffLength = strlen($ptString) - strlen($htmlStringToPtString);			// Set new $maxlength that adjusts for the html tags			$maxLength += $diffLength;			if ($baseLength <= $maxLength || $diffLength <= 0)			{				return $htmlString;			}		}		return $html;	}	public static function groupBy($list, $fieldName, $article_grouping_direction, $fieldNameToKeep = null)	{		$grouped = array();		if (!is_array($list))		{			if ($list == '')			{				return $grouped;			}			$list = array($list);		}		foreach ($list as $key => $item)		{			if (!isset($grouped[$item->$fieldName]))			{				$grouped[$item->$fieldName] = array();			}			if (is_null($fieldNameToKeep))			{				$grouped[$item->$fieldName][$key] = $item;			}			else {				$grouped[$item->$fieldName][$key] = $item->$fieldNameToKeep;			}			unset($list[$key]);		}		$article_grouping_direction($grouped);		return $grouped;	}	public static function groupByDate($list, $type = 'year', $article_grouping_direction, $month_year_format = 'F Y')	{		$grouped = array();		if (!is_array($list))		{			if ($list == '')			{				return $grouped;			}			$list = array($list);		}		foreach ($list as $key => $item)		{			switch($type)			{				case 'month_year':					$month_year = JString::substr($item->created, 0, 7);					if (!isset($grouped[$month_year]))					{						$grouped[$month_year] = array();					}					$grouped[$month_year][$key] = $item;					break;				case 'year':				default:					$year = JString::substr($item->created, 0, 4);					if (!isset($grouped[$year]))					{						$grouped[$year] = array();					}					$grouped[$year][$key] = $item;					break;			}			unset($list[$key]);		}		$article_grouping_direction($grouped);		if ($type === 'month_year')		{			foreach ($grouped as $group => $items)			{				$date = new JDate($group);				$formatted_group = $date->format($month_year_format);				$grouped[$formatted_group] = $items;				unset($grouped[$group]);			}		}		return $grouped;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * APC cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://php.net/manual/en/book.apc.php * @since       11.1 */class JCacheStorageApc extends JCacheStorage{	/**	 * Get cached data from APC by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed    Boolean     False on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_fetch($cache_id);	}	/**	 * Get all cached data	 *	 * @return  array  data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		$data = array();		foreach ($keys as $key)		{			$name = $key['info'];			$namearr = explode('-', $name);			if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')			{				$group = $namearr[2];				if (!isset($data[$group]))				{					$item = new JCacheStorageHelper($group);				}				else				{					$item = $data[$group];				}				$item->updateSize($key['mem_size'] / 1024);				$data[$group] = $item;			}		}		return $data;	}	/**	 * Store the data to APC by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_store($cache_id, $data, $this->_lifetime);	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		return apc_delete($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['info'], $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				apc_delete($key['info']);			}		}		return true;	}	/**	 * Force garbage collect expired cache data as items are removed only on fetch!	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		$allinfo = apc_cache_info('user');		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['info'], $secret . '-cache-'))			{				apc_fetch($key['info']);			}		}	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return extension_loaded('apc');	}	/**	 * Lock cached item - override parent as this is more efficient	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  object   Properties are lock and locklooped	 *	 * @since   11.1	 */	public function lock($id, $group, $locktime)	{		$returning = new stdClass;		$returning->locklooped = false;		$looptime = $locktime * 10;		$cache_id = $this->_getCacheId($id, $group) . '_lock';		$data_lock = apc_add($cache_id, 1, $locktime);		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = apc_add($cache_id, 1, $locktime);				$lock_counter++;			}		}		$returning->locked = $data_lock;		return $returning;	}	/**	 * Unlock cached item - override parent for cacheid compatibility with lock	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		$unlock = false;		$cache_id = $this->_getCacheId($id, $group) . '_lock';		$unlock = apc_delete($cache_id);		return $unlock;	}}
<?php/** * Akeeba Restore * A JSON-powered JPA, JPS and ZIP archive extraction library *  * @copyright 2010-2012 Nicholas K. Dionysopoulos / AkeebaBackup.com * @license GNU GPL v2 or - at your option - any later version * @package akeebabackup * @subpackage kickstart */define('_AKEEBA_RESTORATION', 1);defined('DS') or define('DS', DIRECTORY_SEPARATOR);// Unarchiver run statesdefine('AK_STATE_NOFILE',	0); // File header not read yetdefine('AK_STATE_HEADER',	1); // File header read; ready to process datadefine('AK_STATE_DATA',		2); // Processing file datadefine('AK_STATE_DATAREAD',	3); // Finished processing file data; ready to post-processdefine('AK_STATE_POSTPROC',	4); // Post-processingdefine('AK_STATE_DONE',		5); // Done with post-processing/* Windows system detection */if(!defined('_AKEEBA_IS_WINDOWS')){	if (function_exists('php_uname'))		define('_AKEEBA_IS_WINDOWS', stristr(php_uname(), 'windows'));	else		define('_AKEEBA_IS_WINDOWS', DIRECTORY_SEPARATOR == '\\');}// Make sure the locale is correct for basename() to workif(function_exists('setlocale')){	@setlocale(LC_ALL, 'en_US.UTF8');}// fnmatch not available on non-POSIX systems// Thanks to soywiz@php.net for this usefull alternative function [http://gr2.php.net/fnmatch]if (!function_exists('fnmatch')) {	function fnmatch($pattern, $string) {		return @preg_match(			'/^' . strtr(addcslashes($pattern, '/\\.+^$(){}=!<>|'),		array('*' => '.*', '?' => '.?')) . '$/i', $string		);	}}// Unicode-safe binary data length functionif(function_exists('mb_strlen')) {	function akstringlen($string) { return mb_strlen($string,'8bit'); }} else {	function akstringlen($string) { return strlen($string); }}/** * Gets a query parameter from GET or POST data * @param $key * @param $default */function getQueryParam( $key, $default = null ){	$value = null;	if(array_key_exists($key, $_REQUEST)) {		$value = $_REQUEST[$key];	} elseif(array_key_exists($key, $_POST)) {		$value = $_POST[$key];	} elseif(array_key_exists($key, $_GET)) {		$value = $_GET[$key];	} else {		return $default;	}	if(get_magic_quotes_gpc() && !is_null($value)) $value=stripslashes($value);	return $value;}/** * Akeeba Backup's JSON compatibility layer * * On systems where json_encode and json_decode are not available, Akeeba * Backup will attempt to use PEAR's Services_JSON library to emulate them. * A copy of this library is included in this file and will be used if and * only if it isn't already loaded, e.g. due to PEAR's auto-loading, or a * 3PD extension loading it for its own purposes. *//** * Converts to and from JSON format. * * JSON (JavaScript Object Notation) is a lightweight data-interchange * format. It is easy for humans to read and write. It is easy for machines * to parse and generate. It is based on a subset of the JavaScript * Programming Language, Standard ECMA-262 3rd Edition - December 1999. * This feature can also be found in  Python. JSON is a text format that is * completely language independent but uses conventions that are familiar * to programmers of the C-family of languages, including C, C++, C#, Java, * JavaScript, Perl, TCL, and many others. These properties make JSON an * ideal data-interchange language. * * This package provides a simple encoder and decoder for JSON notation. It * is intended for use with client-side Javascript applications that make * use of HTTPRequest to perform server communication functions - data can * be encoded into JSON notation for use in a client-side javascript, or * decoded from incoming Javascript requests. JSON format is native to * Javascript, and can be directly eval()'ed with no further parsing * overhead * * All strings should be in ASCII or UTF-8 format! * * LICENSE: Redistribution and use in source and binary forms, with or * without modification, are permitted provided that the following * conditions are met: Redistributions of source code must retain the * above copyright notice, this list of conditions and the following * disclaimer. Redistributions in binary form must reproduce the above * copyright notice, this list of conditions and the following disclaimer * in the documentation and/or other materials provided with the * distribution. * * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN * NO EVENT SHALL CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH * DAMAGE. * * @category * @package     Services_JSON * @author      Michal Migurski <mike-json@teczno.com> * @author      Matt Knapp <mdknapp[at]gmail[dot]com> * @author      Brett Stimmerman <brettstimmerman[at]gmail[dot]com> * @copyright   2005 Michal Migurski * @version     CVS: $Id: restore.php 612 2011-05-19 08:26:26Z nikosdion $ * @license     http://www.opensource.org/licenses/bsd-license.php * @link        http://pear.php.net/pepr/pepr-proposal-show.php?id=198 */if(!defined('JSON_FORCE_OBJECT')){	define('JSON_FORCE_OBJECT', 1);}if(!defined('SERVICES_JSON_SLICE')){	/**	 * Marker constant for Services_JSON::decode(), used to flag stack state	 */	define('SERVICES_JSON_SLICE',   1);	/**	 * Marker constant for Services_JSON::decode(), used to flag stack state	 */	define('SERVICES_JSON_IN_STR',  2);	/**	 * Marker constant for Services_JSON::decode(), used to flag stack state	 */	define('SERVICES_JSON_IN_ARR',  3);	/**	 * Marker constant for Services_JSON::decode(), used to flag stack state	 */	define('SERVICES_JSON_IN_OBJ',  4);	/**	 * Marker constant for Services_JSON::decode(), used to flag stack state	 */	define('SERVICES_JSON_IN_CMT', 5);	/**	 * Behavior switch for Services_JSON::decode()	 */	define('SERVICES_JSON_LOOSE_TYPE', 16);	/**	 * Behavior switch for Services_JSON::decode()	 */	define('SERVICES_JSON_SUPPRESS_ERRORS', 32);}/** * Converts to and from JSON format. * * Brief example of use: * * <code> * // create a new instance of Services_JSON * $json = new Services_JSON(); * * // convert a complexe value to JSON notation, and send it to the browser * $value = array('foo', 'bar', array(1, 2, 'baz'), array(3, array(4))); * $output = $json->encode($value); * * print($output); * // prints: ["foo","bar",[1,2,"baz"],[3,[4]]] * * // accept incoming POST data, assumed to be in JSON notation * $input = file_get_contents('php://input', 1000000); * $value = $json->decode($input); * </code> */if(!class_exists('Akeeba_Services_JSON')){	class Akeeba_Services_JSON	{	   /**	    * constructs a new JSON instance	    *	    * @param    int     $use    object behavior flags; combine with boolean-OR	    *	    *                           possible values:	    *                           - SERVICES_JSON_LOOSE_TYPE:  loose typing.	    *                                   "{...}" syntax creates associative arrays	    *                                   instead of objects in decode().	    *                           - SERVICES_JSON_SUPPRESS_ERRORS:  error suppression.	    *                                   Values which can't be encoded (e.g. resources)	    *                                   appear as NULL instead of throwing errors.	    *                                   By default, a deeply-nested resource will	    *                                   bubble up with an error, so all return values	    *                                   from encode() should be checked with isError()	    */	    function Akeeba_Services_JSON($use = 0)	    {	        $this->use = $use;	    }	   /**	    * convert a string from one UTF-16 char to one UTF-8 char	    *	    * Normally should be handled by mb_convert_encoding, but	    * provides a slower PHP-only method for installations	    * that lack the multibye string extension.	    *	    * @param    string  $utf16  UTF-16 character	    * @return   string  UTF-8 character	    * @access   private	    */	    function utf162utf8($utf16)	    {	        // oh please oh please oh please oh please oh please	        if(function_exists('mb_convert_encoding')) {	            return mb_convert_encoding($utf16, 'UTF-8', 'UTF-16');	        }	        $bytes = (ord($utf16{0}) << 8) | ord($utf16{1});	        switch(true) {	            case ((0x7F & $bytes) == $bytes):	                // this case should never be reached, because we are in ASCII range	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return chr(0x7F & $bytes);	            case (0x07FF & $bytes) == $bytes:	                // return a 2-byte UTF-8 character	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return chr(0xC0 | (($bytes >> 6) & 0x1F))	                     . chr(0x80 | ($bytes & 0x3F));	            case (0xFFFF & $bytes) == $bytes:	                // return a 3-byte UTF-8 character	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return chr(0xE0 | (($bytes >> 12) & 0x0F))	                     . chr(0x80 | (($bytes >> 6) & 0x3F))	                     . chr(0x80 | ($bytes & 0x3F));	        }	        // ignoring UTF-32 for now, sorry	        return '';	    }	   /**	    * convert a string from one UTF-8 char to one UTF-16 char	    *	    * Normally should be handled by mb_convert_encoding, but	    * provides a slower PHP-only method for installations	    * that lack the multibye string extension.	    *	    * @param    string  $utf8   UTF-8 character	    * @return   string  UTF-16 character	    * @access   private	    */	    function utf82utf16($utf8)	    {	        // oh please oh please oh please oh please oh please	        if(function_exists('mb_convert_encoding')) {	            return mb_convert_encoding($utf8, 'UTF-16', 'UTF-8');	        }	        switch(strlen($utf8)) {	            case 1:	                // this case should never be reached, because we are in ASCII range	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return $utf8;	            case 2:	                // return a UTF-16 character from a 2-byte UTF-8 char	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return chr(0x07 & (ord($utf8{0}) >> 2))	                     . chr((0xC0 & (ord($utf8{0}) << 6))	                         | (0x3F & ord($utf8{1})));	            case 3:	                // return a UTF-16 character from a 3-byte UTF-8 char	                // see: http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                return chr((0xF0 & (ord($utf8{0}) << 4))	                         | (0x0F & (ord($utf8{1}) >> 2)))	                     . chr((0xC0 & (ord($utf8{1}) << 6))	                         | (0x7F & ord($utf8{2})));	        }	        // ignoring UTF-32 for now, sorry	        return '';	    }	   /**	    * encodes an arbitrary variable into JSON format	    *	    * @param    mixed   $var    any number, boolean, string, array, or object to be encoded.	    *                           see argument 1 to Services_JSON() above for array-parsing behavior.	    *                           if var is a strng, note that encode() always expects it	    *                           to be in ASCII or UTF-8 format!	    *	    * @return   mixed   JSON string representation of input var or an error if a problem occurs	    * @access   public	    */	    function encode($var)	    {	        switch (gettype($var)) {	            case 'boolean':	                return $var ? 'true' : 'false';	            case 'NULL':	                return 'null';	            case 'integer':	                return (int) $var;	            case 'double':	            case 'float':	                return (float) $var;	            case 'string':	                // STRINGS ARE EXPECTED TO BE IN ASCII OR UTF-8 FORMAT	                $ascii = '';	                $strlen_var = strlen($var);	               /*	                * Iterate over every character in the string,	                * escaping with a slash or encoding to UTF-8 where necessary	                */	                for ($c = 0; $c < $strlen_var; ++$c) {	                    $ord_var_c = ord($var{$c});	                    switch (true) {	                        case $ord_var_c == 0x08:	                            $ascii .= '\b';	                            break;	                        case $ord_var_c == 0x09:	                            $ascii .= '\t';	                            break;	                        case $ord_var_c == 0x0A:	                            $ascii .= '\n';	                            break;	                        case $ord_var_c == 0x0C:	                            $ascii .= '\f';	                            break;	                        case $ord_var_c == 0x0D:	                            $ascii .= '\r';	                            break;	                        case $ord_var_c == 0x22:	                        case $ord_var_c == 0x2F:	                        case $ord_var_c == 0x5C:	                            // double quote, slash, slosh	                            $ascii .= '\\'.$var{$c};	                            break;	                        case (($ord_var_c >= 0x20) && ($ord_var_c <= 0x7F)):	                            // characters U-00000000 - U-0000007F (same as ASCII)	                            $ascii .= $var{$c};	                            break;	                        case (($ord_var_c & 0xE0) == 0xC0):	                            // characters U-00000080 - U-000007FF, mask 110XXXXX	                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                            $char = pack('C*', $ord_var_c, ord($var{$c + 1}));	                            $c += 1;	                            $utf16 = $this->utf82utf16($char);	                            $ascii .= sprintf('\u%04s', bin2hex($utf16));	                            break;	                        case (($ord_var_c & 0xF0) == 0xE0):	                            // characters U-00000800 - U-0000FFFF, mask 1110XXXX	                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                            $char = pack('C*', $ord_var_c,	                                         ord($var{$c + 1}),	                                         ord($var{$c + 2}));	                            $c += 2;	                            $utf16 = $this->utf82utf16($char);	                            $ascii .= sprintf('\u%04s', bin2hex($utf16));	                            break;	                        case (($ord_var_c & 0xF8) == 0xF0):	                            // characters U-00010000 - U-001FFFFF, mask 11110XXX	                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                            $char = pack('C*', $ord_var_c,	                                         ord($var{$c + 1}),	                                         ord($var{$c + 2}),	                                         ord($var{$c + 3}));	                            $c += 3;	                            $utf16 = $this->utf82utf16($char);	                            $ascii .= sprintf('\u%04s', bin2hex($utf16));	                            break;	                        case (($ord_var_c & 0xFC) == 0xF8):	                            // characters U-00200000 - U-03FFFFFF, mask 111110XX	                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                            $char = pack('C*', $ord_var_c,	                                         ord($var{$c + 1}),	                                         ord($var{$c + 2}),	                                         ord($var{$c + 3}),	                                         ord($var{$c + 4}));	                            $c += 4;	                            $utf16 = $this->utf82utf16($char);	                            $ascii .= sprintf('\u%04s', bin2hex($utf16));	                            break;	                        case (($ord_var_c & 0xFE) == 0xFC):	                            // characters U-04000000 - U-7FFFFFFF, mask 1111110X	                            // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                            $char = pack('C*', $ord_var_c,	                                         ord($var{$c + 1}),	                                         ord($var{$c + 2}),	                                         ord($var{$c + 3}),	                                         ord($var{$c + 4}),	                                         ord($var{$c + 5}));	                            $c += 5;	                            $utf16 = $this->utf82utf16($char);	                            $ascii .= sprintf('\u%04s', bin2hex($utf16));	                            break;	                    }	                }	                return '"'.$ascii.'"';	            case 'array':	               /*	                * As per JSON spec if any array key is not an integer	                * we must treat the the whole array as an object. We	                * also try to catch a sparsely populated associative	                * array with numeric keys here because some JS engines	                * will create an array with empty indexes up to	                * max_index which can cause memory issues and because	                * the keys, which may be relevant, will be remapped	                * otherwise.	                *	                * As per the ECMA and JSON specification an object may	                * have any string as a property. Unfortunately due to	                * a hole in the ECMA specification if the key is a	                * ECMA reserved word or starts with a digit the	                * parameter is only accessible using ECMAScript's	                * bracket notation.	                */	                // treat as a JSON object	                if (is_array($var) && count($var) && (array_keys($var) !== range(0, sizeof($var) - 1))) {	                    $properties = array_map(array($this, 'name_value'),	                                            array_keys($var),	                                            array_values($var));	                    foreach($properties as $property) {	                        if(Akeeba_Services_JSON::isError($property)) {	                            return $property;	                        }	                    }	                    return '{' . join(',', $properties) . '}';	                }	                // treat it like a regular array	                $elements = array_map(array($this, 'encode'), $var);	                foreach($elements as $element) {	                    if(Akeeba_Services_JSON::isError($element)) {	                        return $element;	                    }	                }	                return '[' . join(',', $elements) . ']';	            case 'object':	                $vars = get_object_vars($var);	                $properties = array_map(array($this, 'name_value'),	                                        array_keys($vars),	                                        array_values($vars));	                foreach($properties as $property) {	                    if(Akeeba_Services_JSON::isError($property)) {	                        return $property;	                    }	                }	                return '{' . join(',', $properties) . '}';	            default:	                return ($this->use & SERVICES_JSON_SUPPRESS_ERRORS)	                    ? 'null'	                    : new Akeeba_Services_JSON_Error(gettype($var)." can not be encoded as JSON string");	        }	    }	   /**	    * array-walking function for use in generating JSON-formatted name-value pairs	    *	    * @param    string  $name   name of key to use	    * @param    mixed   $value  reference to an array element to be encoded	    *	    * @return   string  JSON-formatted name-value pair, like '"name":value'	    * @access   private	    */	    function name_value($name, $value)	    {	        $encoded_value = $this->encode($value);	        if(Akeeba_Services_JSON::isError($encoded_value)) {	            return $encoded_value;	        }	        return $this->encode(strval($name)) . ':' . $encoded_value;	    }	   /**	    * reduce a string by removing leading and trailing comments and whitespace	    *	    * @param    $str    string      string value to strip of comments and whitespace	    *	    * @return   string  string value stripped of comments and whitespace	    * @access   private	    */	    function reduce_string($str)	    {	        $str = preg_replace(array(	                // eliminate single line comments in '// ...' form	                '#^\s*//(.+)$#m',	                // eliminate multi-line comments in '/* ... */' form, at start of string	                '#^\s*/\*(.+)\*/#Us',	                // eliminate multi-line comments in '/* ... */' form, at end of string	                '#/\*(.+)\*/\s*$#Us'	            ), '', $str);	        // eliminate extraneous space	        return trim($str);	    }	   /**	    * decodes a JSON string into appropriate variable	    *	    * @param    string  $str    JSON-formatted string	    *	    * @return   mixed   number, boolean, string, array, or object	    *                   corresponding to given JSON input string.	    *                   See argument 1 to Akeeba_Services_JSON() above for object-output behavior.	    *                   Note that decode() always returns strings	    *                   in ASCII or UTF-8 format!	    * @access   public	    */	    function decode($str)	    {	        $str = $this->reduce_string($str);	        switch (strtolower($str)) {	            case 'true':	                return true;	            case 'false':	                return false;	            case 'null':	                return null;	            default:	                $m = array();	                if (is_numeric($str)) {	                    // Lookie-loo, it's a number	                    // This would work on its own, but I'm trying to be	                    // good about returning integers where appropriate:	                    // return (float)$str;	                    // Return float or int, as appropriate	                    return ((float)$str == (integer)$str)	                        ? (integer)$str	                        : (float)$str;	                } elseif (preg_match('/^("|\').*(\1)$/s', $str, $m) && $m[1] == $m[2]) {	                    // STRINGS RETURNED IN UTF-8 FORMAT	                    $delim = substr($str, 0, 1);	                    $chrs = substr($str, 1, -1);	                    $utf8 = '';	                    $strlen_chrs = strlen($chrs);	                    for ($c = 0; $c < $strlen_chrs; ++$c) {	                        $substr_chrs_c_2 = substr($chrs, $c, 2);	                        $ord_chrs_c = ord($chrs{$c});	                        switch (true) {	                            case $substr_chrs_c_2 == '\b':	                                $utf8 .= chr(0x08);	                                ++$c;	                                break;	                            case $substr_chrs_c_2 == '\t':	                                $utf8 .= chr(0x09);	                                ++$c;	                                break;	                            case $substr_chrs_c_2 == '\n':	                                $utf8 .= chr(0x0A);	                                ++$c;	                                break;	                            case $substr_chrs_c_2 == '\f':	                                $utf8 .= chr(0x0C);	                                ++$c;	                                break;	                            case $substr_chrs_c_2 == '\r':	                                $utf8 .= chr(0x0D);	                                ++$c;	                                break;	                            case $substr_chrs_c_2 == '\\"':	                            case $substr_chrs_c_2 == '\\\'':	                            case $substr_chrs_c_2 == '\\\\':	                            case $substr_chrs_c_2 == '\\/':	                                if (($delim == '"' && $substr_chrs_c_2 != '\\\'') ||	                                   ($delim == "'" && $substr_chrs_c_2 != '\\"')) {	                                    $utf8 .= $chrs{++$c};	                                }	                                break;	                            case preg_match('/\\\u[0-9A-F]{4}/i', substr($chrs, $c, 6)):	                                // single, escaped unicode character	                                $utf16 = chr(hexdec(substr($chrs, ($c + 2), 2)))	                                       . chr(hexdec(substr($chrs, ($c + 4), 2)));	                                $utf8 .= $this->utf162utf8($utf16);	                                $c += 5;	                                break;	                            case ($ord_chrs_c >= 0x20) && ($ord_chrs_c <= 0x7F):	                                $utf8 .= $chrs{$c};	                                break;	                            case ($ord_chrs_c & 0xE0) == 0xC0:	                                // characters U-00000080 - U-000007FF, mask 110XXXXX	                                //see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                                $utf8 .= substr($chrs, $c, 2);	                                ++$c;	                                break;	                            case ($ord_chrs_c & 0xF0) == 0xE0:	                                // characters U-00000800 - U-0000FFFF, mask 1110XXXX	                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                                $utf8 .= substr($chrs, $c, 3);	                                $c += 2;	                                break;	                            case ($ord_chrs_c & 0xF8) == 0xF0:	                                // characters U-00010000 - U-001FFFFF, mask 11110XXX	                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                                $utf8 .= substr($chrs, $c, 4);	                                $c += 3;	                                break;	                            case ($ord_chrs_c & 0xFC) == 0xF8:	                                // characters U-00200000 - U-03FFFFFF, mask 111110XX	                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                                $utf8 .= substr($chrs, $c, 5);	                                $c += 4;	                                break;	                            case ($ord_chrs_c & 0xFE) == 0xFC:	                                // characters U-04000000 - U-7FFFFFFF, mask 1111110X	                                // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8	                                $utf8 .= substr($chrs, $c, 6);	                                $c += 5;	                                break;	                        }	                    }	                    return $utf8;	                } elseif (preg_match('/^\[.*\]$/s', $str) || preg_match('/^\{.*\}$/s', $str)) {	                    // array, or object notation	                    if ($str{0} == '[') {	                        $stk = array(SERVICES_JSON_IN_ARR);	                        $arr = array();	                    } else {	                        if ($this->use & SERVICES_JSON_LOOSE_TYPE) {	                            $stk = array(SERVICES_JSON_IN_OBJ);	                            $obj = array();	                        } else {	                            $stk = array(SERVICES_JSON_IN_OBJ);	                            $obj = new stdClass();	                        }	                    }	                    array_push($stk, array('what'  => SERVICES_JSON_SLICE,	                                           'where' => 0,	                                           'delim' => false));	                    $chrs = substr($str, 1, -1);	                    $chrs = $this->reduce_string($chrs);	                    if ($chrs == '') {	                        if (reset($stk) == SERVICES_JSON_IN_ARR) {	                            return $arr;	                        } else {	                            return $obj;	                        }	                    }	                    //print("\nparsing {$chrs}\n");	                    $strlen_chrs = strlen($chrs);	                    for ($c = 0; $c <= $strlen_chrs; ++$c) {	                        $top = end($stk);	                        $substr_chrs_c_2 = substr($chrs, $c, 2);	                        if (($c == $strlen_chrs) || (($chrs{$c} == ',') && ($top['what'] == SERVICES_JSON_SLICE))) {	                            // found a comma that is not inside a string, array, etc.,	                            // OR we've reached the end of the character list	                            $slice = substr($chrs, $top['where'], ($c - $top['where']));	                            array_push($stk, array('what' => SERVICES_JSON_SLICE, 'where' => ($c + 1), 'delim' => false));	                            //print("Found split at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");	                            if (reset($stk) == SERVICES_JSON_IN_ARR) {	                                // we are in an array, so just push an element onto the stack	                                array_push($arr, $this->decode($slice));	                            } elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {	                                // we are in an object, so figure	                                // out the property name and set an	                                // element in an associative array,	                                // for now	                                $parts = array();	                                if (preg_match('/^\s*(["\'].*[^\\\]["\'])\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {	                                    // "name":value pair	                                    $key = $this->decode($parts[1]);	                                    $val = $this->decode($parts[2]);	                                    if ($this->use & SERVICES_JSON_LOOSE_TYPE) {	                                        $obj[$key] = $val;	                                    } else {	                                        $obj->$key = $val;	                                    }	                                } elseif (preg_match('/^\s*(\w+)\s*:\s*(\S.*),?$/Uis', $slice, $parts)) {	                                    // name:value pair, where name is unquoted	                                    $key = $parts[1];	                                    $val = $this->decode($parts[2]);	                                    if ($this->use & SERVICES_JSON_LOOSE_TYPE) {	                                        $obj[$key] = $val;	                                    } else {	                                        $obj->$key = $val;	                                    }	                                }	                            }	                        } elseif ((($chrs{$c} == '"') || ($chrs{$c} == "'")) && ($top['what'] != SERVICES_JSON_IN_STR)) {	                            // found a quote, and we are not inside a string	                            array_push($stk, array('what' => SERVICES_JSON_IN_STR, 'where' => $c, 'delim' => $chrs{$c}));	                            //print("Found start of string at {$c}\n");	                        } elseif (($chrs{$c} == $top['delim']) &&	                                 ($top['what'] == SERVICES_JSON_IN_STR) &&	                                 ((strlen(substr($chrs, 0, $c)) - strlen(rtrim(substr($chrs, 0, $c), '\\'))) % 2 != 1)) {	                            // found a quote, we're in a string, and it's not escaped	                            // we know that it's not escaped becase there is _not_ an	                            // odd number of backslashes at the end of the string so far	                            array_pop($stk);	                            //print("Found end of string at {$c}: ".substr($chrs, $top['where'], (1 + 1 + $c - $top['where']))."\n");	                        } elseif (($chrs{$c} == '[') &&	                                 in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {	                            // found a left-bracket, and we are in an array, object, or slice	                            array_push($stk, array('what' => SERVICES_JSON_IN_ARR, 'where' => $c, 'delim' => false));	                            //print("Found start of array at {$c}\n");	                        } elseif (($chrs{$c} == ']') && ($top['what'] == SERVICES_JSON_IN_ARR)) {	                            // found a right-bracket, and we're in an array	                            array_pop($stk);	                            //print("Found end of array at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");	                        } elseif (($chrs{$c} == '{') &&	                                 in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {	                            // found a left-brace, and we are in an array, object, or slice	                            array_push($stk, array('what' => SERVICES_JSON_IN_OBJ, 'where' => $c, 'delim' => false));	                            //print("Found start of object at {$c}\n");	                        } elseif (($chrs{$c} == '}') && ($top['what'] == SERVICES_JSON_IN_OBJ)) {	                            // found a right-brace, and we're in an object	                            array_pop($stk);	                            //print("Found end of object at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");	                        } elseif (($substr_chrs_c_2 == '/*') &&	                                 in_array($top['what'], array(SERVICES_JSON_SLICE, SERVICES_JSON_IN_ARR, SERVICES_JSON_IN_OBJ))) {	                            // found a comment start, and we are in an array, object, or slice	                            array_push($stk, array('what' => SERVICES_JSON_IN_CMT, 'where' => $c, 'delim' => false));	                            $c++;	                            //print("Found start of comment at {$c}\n");	                        } elseif (($substr_chrs_c_2 == '*/') && ($top['what'] == SERVICES_JSON_IN_CMT)) {	                            // found a comment end, and we're in one now	                            array_pop($stk);	                            $c++;	                            for ($i = $top['where']; $i <= $c; ++$i)	                                $chrs = substr_replace($chrs, ' ', $i, 1);	                            //print("Found end of comment at {$c}: ".substr($chrs, $top['where'], (1 + $c - $top['where']))."\n");	                        }	                    }	                    if (reset($stk) == SERVICES_JSON_IN_ARR) {	                        return $arr;	                    } elseif (reset($stk) == SERVICES_JSON_IN_OBJ) {	                        return $obj;	                    }	                }	        }	    }	    function isError($data, $code = null)	    {	        if (class_exists('pear')) {	            return PEAR::isError($data, $code);	        } elseif (is_object($data) && (get_class($data) == 'services_json_error' ||	                                 is_subclass_of($data, 'services_json_error'))) {	            return true;	        }	        return false;	    }	}    class Akeeba_Services_JSON_Error    {        function Akeeba_Services_JSON_Error($message = 'unknown error', $code = null,                                     $mode = null, $options = null, $userinfo = null)        {        }    }}if(!function_exists('json_encode')){	function json_encode($value, $options = 0) {		$flags = SERVICES_JSON_LOOSE_TYPE;		if( $options & JSON_FORCE_OBJECT ) $flags = 0;		$encoder = new Akeeba_Services_JSON($flags);		return $encoder->encode($value);	}}if(!function_exists('json_decode')){	function json_decode($value, $assoc = false)	{		$flags = 0;		if($assoc) $flags = SERVICES_JSON_LOOSE_TYPE;		$decoder = new Akeeba_Services_JSON($flags);		return $decoder->decode($value);	}}/** * The base class of Akeeba Engine objects. Allows for error and warnings logging * and propagation. Largely based on the Joomla! 1.5 JObject class. */abstract class AKAbstractObject{	/** @var	array	An array of errors */	private $_errors = array();	/** @var	array	The queue size of the $_errors array. Set to 0 for infinite size. */	protected $_errors_queue_size = 0;	/** @var	array	An array of warnings */	private $_warnings = array();	/** @var	array	The queue size of the $_warnings array. Set to 0 for infinite size. */	protected $_warnings_queue_size = 0;	/**	 * Public constructor, makes sure we are instanciated only by the factory class	 */	public function __construct()	{		/*		// Assisted Singleton pattern		if(function_exists('debug_backtrace'))		{			$caller=debug_backtrace();			if(				($caller[1]['class'] != 'AKFactory') &&				($caller[2]['class'] != 'AKFactory') &&				($caller[3]['class'] != 'AKFactory') &&				($caller[4]['class'] != 'AKFactory')			) {				var_dump(debug_backtrace());				trigger_error("You can't create direct descendants of ".__CLASS__, E_USER_ERROR);			}		}		*/	}	/**	 * Get the most recent error message	 * @param	integer	$i Optional error index	 * @return	string	Error message	 */	public function getError($i = null)	{		return $this->getItemFromArray($this->_errors, $i);	}	/**	 * Return all errors, if any	 * @return	array	Array of error messages	 */	public function getErrors()	{		return $this->_errors;	}	/**	 * Add an error message	 * @param	string $error Error message	 */	public function setError($error)	{		if($this->_errors_queue_size > 0)		{			if(count($this->_errors) >= $this->_errors_queue_size)			{				array_shift($this->_errors);			}		}		array_push($this->_errors, $error);	}	/**	 * Resets all error messages	 */	public function resetErrors()	{		$this->_errors = array();	}	/**	 * Get the most recent warning message	 * @param	integer	$i Optional warning index	 * @return	string	Error message	 */	public function getWarning($i = null)	{		return $this->getItemFromArray($this->_warnings, $i);	}	/**	 * Return all warnings, if any	 * @return	array	Array of error messages	 */	public function getWarnings()	{		return $this->_warnings;	}	/**	 * Add an error message	 * @param	string $error Error message	 */	public function setWarning($warning)	{		if($this->_warnings_queue_size > 0)		{			if(count($this->_warnings) >= $this->_warnings_queue_size)			{				array_shift($this->_warnings);			}		}		array_push($this->_warnings, $warning);	}	/**	 * Resets all warning messages	 */	public function resetWarnings()	{		$this->_warnings = array();	}	/**	 * Propagates errors and warnings to a foreign object. The foreign object SHOULD	 * implement the setError() and/or setWarning() methods but DOESN'T HAVE TO be of	 * AKAbstractObject type. For example, this can even be used to propagate to a	 * JObject instance in Joomla!. Propagated items will be removed from ourself.	 * @param object $object The object to propagate errors and warnings to.	 */	public function propagateToObject(&$object)	{		// Skip non-objects		if(!is_object($object)) return;		if( method_exists($object,'setError') )		{			if(!empty($this->_errors))			{				foreach($this->_errors as $error)				{					$object->setError($error);				}				$this->_errors = array();			}		}		if( method_exists($object,'setWarning') )		{			if(!empty($this->_warnings))			{				foreach($this->_warnings as $warning)				{					$object->setWarning($warning);				}				$this->_warnings = array();			}		}	}	/**	 * Propagates errors and warnings from a foreign object. Each propagated list is	 * then cleared on the foreign object, as long as it implements resetErrors() and/or	 * resetWarnings() methods.	 * @param object $object The object to propagate errors and warnings from	 */	public function propagateFromObject(&$object)	{		if( method_exists($object,'getErrors') )		{			$errors = $object->getErrors();			if(!empty($errors))			{				foreach($errors as $error)				{					$this->setError($error);				}			}			if(method_exists($object,'resetErrors'))			{				$object->resetErrors();			}		}		if( method_exists($object,'getWarnings') )		{			$warnings = $object->getWarnings();			if(!empty($warnings))			{				foreach($warnings as $warning)				{					$this->setWarning($warning);				}			}			if(method_exists($object,'resetWarnings'))			{				$object->resetWarnings();			}		}	}	/**	 * Sets the size of the error queue (acts like a LIFO buffer)	 * @param int $newSize The new queue size. Set to 0 for infinite length.	 */	protected function setErrorsQueueSize($newSize = 0)	{		$this->_errors_queue_size = (int)$newSize;	}	/**	 * Sets the size of the warnings queue (acts like a LIFO buffer)	 * @param int $newSize The new queue size. Set to 0 for infinite length.	 */	protected function setWarningsQueueSize($newSize = 0)	{		$this->_warnings_queue_size = (int)$newSize;	}	/**	 * Returns the last item of a LIFO string message queue, or a specific item	 * if so specified.	 * @param array $array An array of strings, holding messages	 * @param int $i Optional message index	 * @return mixed The message string, or false if the key doesn't exist	 */	private function getItemFromArray($array, $i = null)	{		// Find the item		if ( $i === null) {			// Default, return the last item			$item = end($array);		}		else		if ( ! array_key_exists($i, $array) ) {			// If $i has been specified but does not exist, return false			return false;		}		else		{			$item	= $array[$i];		}		return $item;	}}/** * File post processor engines base class */abstract class AKAbstractPostproc extends AKAbstractObject{	/** @var string The current (real) file path we'll have to process */	protected $filename = null;	/** @var int The requested permissions */	protected $perms = 0755;	/** @var string The temporary file path we gave to the unarchiver engine */	protected $tempFilename = null;	/** @var int The UNIX timestamp of the file's desired modification date */	public $timestamp = 0;	/**	 * Processes the current file, e.g. moves it from temp to final location by FTP	 */	abstract public function process();	/**	 * The unarchiver tells us the path to the filename it wants to extract and we give it	 * a different path instead.	 * @param string $filename The path to the real file	 * @param int $perms The permissions we need the file to have	 * @return string The path to the temporary file	 */	abstract public function processFilename($filename, $perms = 0755);	/**	 * Recursively creates a directory if it doesn't exist	 * @param string $dirName The directory to create	 * @param int $perms The permissions to give to that directory	 */	abstract public function createDirRecursive( $dirName, $perms );	abstract public function chmod( $file, $perms );	abstract public function unlink( $file );	abstract public function rmdir( $directory );	abstract public function rename( $from, $to );}/** * The base class of unarchiver classes */abstract class AKAbstractUnarchiver extends AKAbstractPart{	/** @var string Archive filename */	protected $filename = null;	/** @var array List of the names of all archive parts */	public $archiveList = array();	/** @var int The total size of all archive parts */	public $totalSize = array();	/** @var integer Current archive part number */	protected $currentPartNumber = -1;	/** @var integer The offset inside the current part */	protected $currentPartOffset = 0;	/** @var bool Should I restore permissions? */	protected $flagRestorePermissions = false;	/** @var AKAbstractPostproc Post processing class */	protected $postProcEngine = null;	/** @var string Absolute path to prepend to extracted files */	protected $addPath = '';	/** @var array Which files to rename */	public $renameFiles = array();	/** @var array Which directories to rename */	public $renameDirs = array();	/** @var array Which files to skip */	public $skipFiles = array();	/** @var integer Chunk size for processing */	protected $chunkSize = 524288;	/** @var resource File pointer to the current archive part file */	protected $fp = null;	/** @var int Run state when processing the current archive file */	protected $runState = null;	/** @var stdClass File header data, as read by the readFileHeader() method */	protected $fileHeader = null;	/** @var int How much of the uncompressed data we've read so far */	protected $dataReadLength = 0;	/**	 * Public constructor	 */	public function __construct()	{		parent::__construct();	}	/**	 * Wakeup function, called whenever the class is unserialized	 */	public function __wakeup()	{		if($this->currentPartNumber >= 0)		{			$this->fp = @fopen($this->archiveList[$this->currentPartNumber], 'rb');			if( (is_resource($this->fp)) && ($this->currentPartOffset > 0) )			{				@fseek($this->fp, $this->currentPartOffset);			}		}	}	/**	 * Sleep function, called whenever the class is serialized	 */	public function shutdown()	{		if(is_resource($this->fp))		{			$this->currentPartOffset = @ftell($this->fp);			@fclose($this->fp);		}	}	/**	 * Implements the abstract _prepare() method	 */	final protected function _prepare()	{		parent::__construct();		if( count($this->_parametersArray) > 0 )		{			foreach($this->_parametersArray as $key => $value)			{				switch($key)				{					case 'filename': // Archive's absolute filename						$this->filename = $value;						break;					case 'restore_permissions': // Should I restore permissions?						$this->flagRestorePermissions = $value;						break;					case 'post_proc': // Should I use FTP?						$this->postProcEngine = AKFactory::getpostProc($value);						break;					case 'add_path': // Path to prepend						$this->addPath = $value;						$this->addPath = str_replace('\\','/',$this->addPath);						$this->addPath = rtrim($this->addPath,'/');						if(!empty($this->addPath)) $this->addPath .= '/';						break;					case 'rename_files': // Which files to rename (hash array)						$this->renameFiles = $value;						break;										case 'rename_dirs': // Which files to rename (hash array)						$this->renameDirs = $value;						break;					case 'skip_files': // Which files to skip (indexed array)						$this->skipFiles = $value;						break;				}			}		}		$this->scanArchives();		$this->readArchiveHeader();		$errMessage = $this->getError();		if(!empty($errMessage))		{			$this->setState('error', $errMessage);		}		else		{			$this->runState = AK_STATE_NOFILE;			$this->setState('prepared');		}	}	protected function _run()	{		if($this->getState() == 'postrun') return;		$this->setState('running');		$timer = AKFactory::getTimer();		$status = true;		while( $status && ($timer->getTimeLeft() > 0) )		{			switch( $this->runState )			{				case AK_STATE_NOFILE:					$status = $this->readFileHeader();					if($status)					{						// Send start of file notification						$message = new stdClass;						$message->type = 'startfile';						$message->content = new stdClass;						if( array_key_exists('realfile', get_object_vars($this->fileHeader)) ) {							$message->content->realfile = $this->fileHeader->realFile;						} else {							$message->content->realfile = $this->fileHeader->file;						}						$message->content->file = $this->fileHeader->file;						if( array_key_exists('compressed', get_object_vars($this->fileHeader)) ) {							$message->content->compressed = $this->fileHeader->compressed;						} else {							$message->content->compressed = 0;						}						$message->content->uncompressed = $this->fileHeader->uncompressed;						$this->notify($message);					}					break;				case AK_STATE_HEADER:				case AK_STATE_DATA:					$status = $this->processFileData();					break;				case AK_STATE_DATAREAD:				case AK_STATE_POSTPROC:					$this->postProcEngine->timestamp = $this->fileHeader->timestamp;					$status = $this->postProcEngine->process();					$this->propagateFromObject( $this->postProcEngine );					$this->runState = AK_STATE_DONE;					break;				case AK_STATE_DONE:				default:					if($status)					{						// Send end of file notification						$message = new stdClass;						$message->type = 'endfile';						$message->content = new stdClass;						if( array_key_exists('realfile', get_object_vars($this->fileHeader)) ) {							$message->content->realfile = $this->fileHeader->realFile;						} else {							$message->content->realfile = $this->fileHeader->file;						}						$message->content->file = $this->fileHeader->file;						if( array_key_exists('compressed', get_object_vars($this->fileHeader)) ) {							$message->content->compressed = $this->fileHeader->compressed;						} else {							$message->content->compressed = 0;						}						$message->content->uncompressed = $this->fileHeader->uncompressed;						$this->notify($message);					}					$this->runState = AK_STATE_NOFILE;					continue;			}		}		$error = $this->getError();		if( !$status && ($this->runState == AK_STATE_NOFILE) && empty( $error ) )		{			// We just finished			$this->setState('postrun');		}		elseif( !empty($error) )		{			$this->setState( 'error', $error );		}	}	protected function _finalize()	{		// Nothing to do		$this->setState('finished');	}	/**	 * Returns the base extension of the file, e.g. '.jpa'	 * @return string	 */	private function getBaseExtension()	{		static $baseextension;		if(empty($baseextension))		{			$basename = basename($this->filename);			$lastdot = strrpos($basename,'.');			$baseextension = substr($basename, $lastdot);		}		return $baseextension;	}	/**	 * Scans for archive parts	 */	private function scanArchives()	{		$privateArchiveList = array();		// Get the components of the archive filename		$dirname = dirname($this->filename);		$base_extension = $this->getBaseExtension();		$basename = basename($this->filename, $base_extension);		$this->totalSize = 0;		// Scan for multiple parts until we don't find any more of them		$count = 0;		$found = true;		$this->archiveList = array();		while($found)		{			++$count;			$extension = substr($base_extension, 0, 2).sprintf('%02d', $count);			$filename = $dirname.DIRECTORY_SEPARATOR.$basename.$extension;			$found = file_exists($filename);			if($found)			{				// Add yet another part, with a numeric-appended filename				$this->archiveList[] = $filename;				$filesize = @filesize($filename);				$this->totalSize += $filesize;				$privateArchiveList[] = array($filename, $filesize);			}			else			{				// Add the last part, with the regular extension				$this->archiveList[] = $this->filename;				$filename = $this->filename;				$filesize = @filesize($filename);				$this->totalSize += $filesize;				$privateArchiveList[] = array($filename, $filesize);			}		}		$this->currentPartNumber = -1;		$this->currentPartOffset = 0;		$this->runState = AK_STATE_NOFILE;		// Send start of file notification		$message = new stdClass;		$message->type = 'totalsize';		$message->content = new stdClass;		$message->content->totalsize = $this->totalSize;		$message->content->filelist = $privateArchiveList;		$this->notify($message);	}	/**	 * Opens the next part file for reading	 */	protected function nextFile()	{		++$this->currentPartNumber;		if( $this->currentPartNumber > (count($this->archiveList) - 1) )		{			$this->setState('postrun');			return false;		}		else		{			if( is_resource($this->fp) ) @fclose($this->fp);			$this->fp = @fopen( $this->archiveList[$this->currentPartNumber], 'rb' );			fseek($this->fp, 0);			$this->currentPartOffset = 0;			return true;		}	}	/**	 * Returns true if we have reached the end of file	 * @param $local bool True to return EOF of the local file, false (default) to return if we have reached the end of the archive set	 * @return bool True if we have reached End Of File	 */	protected function isEOF($local = false)	{		$eof = @feof($this->fp);		if(!$eof)		{			// Border case: right at the part's end (eeeek!!!). For the life of me, I don't understand why			// feof() doesn't report true. It expects the fp to be positioned *beyond* the EOF to report			// true. Incredible! :(			$position = @ftell($this->fp);			$filesize = @filesize( $this->archiveList[$this->currentPartNumber] );			if( $position >= $filesize  ) $eof = true;		}		if($local)		{			return $eof;		}		else		{			return $eof && ($this->currentPartNumber >= (count($this->archiveList)-1) );		}	}	/**	 * Tries to make a directory user-writable so that we can write a file to it	 * @param $path string A path to a file	 */	protected function setCorrectPermissions($path)	{		static $rootDir = null;				if(is_null($rootDir)) {			$rootDir = rtrim(AKFactory::get('kickstart.setup.destdir',''),'/\\');		}				$directory = rtrim(dirname($path),'/\\');		if($directory != $rootDir) {			// Is this an unwritable directory?			if(!is_writeable($directory)) {				$this->postProcEngine->chmod( $directory, 0755 );			}		}		$this->postProcEngine->chmod( $path, 0644 );	}	/**	 * Concrete classes are supposed to use this method in order to read the archive's header and	 * prepare themselves to the point of being ready to extract the first file.	 */	protected abstract function readArchiveHeader();	/**	 * Concrete classes must use this method to read the file header	 * @return bool True if reading the file was successful, false if an error occured or we reached end of archive	 */	protected abstract function readFileHeader();	/**	 * Concrete classes must use this method to process file data. It must set $runState to AK_STATE_DATAREAD when	 * it's finished processing the file data.	 * @return bool True if processing the file data was successful, false if an error occured	 */	protected abstract function processFileData();	/**	 * Reads data from the archive and notifies the observer with the 'reading' message	 * @param $fp	 * @param $length	 */	protected function fread($fp, $length = null)	{		if(is_numeric($length))		{			if($length > 0) {				$data = fread($fp, $length);			} else {				$data = fread($fp);			}		}		else		{			$data = fread($fp);		}		if($data === false) $data = '';		// Send start of file notification		$message = new stdClass;		$message->type = 'reading';		$message->content = new stdClass;		$message->content->length = strlen($data);		$this->notify($message);		return $data;	}}/** * The superclass of all Akeeba Kickstart parts. The "parts" are intelligent stateful * classes which perform a single procedure and have preparation, running and * finalization phases. The transition between phases is handled automatically by * this superclass' tick() final public method, which should be the ONLY public API * exposed to the rest of the Akeeba Engine. */abstract class AKAbstractPart extends AKAbstractObject{	/**	 * Indicates whether this part has finished its initialisation cycle	 * @var boolean	 */	protected $isPrepared = false;	/**	 * Indicates whether this part has more work to do (it's in running state)	 * @var boolean	 */	protected $isRunning = false;	/**	 * Indicates whether this part has finished its finalization cycle	 * @var boolean	 */	protected $isFinished = false;	/**	 * Indicates whether this part has finished its run cycle	 * @var boolean	 */	protected $hasRan = false;	/**	 * The name of the engine part (a.k.a. Domain), used in return table	 * generation.	 * @var string	 */	protected $active_domain = "";	/**	 * The step this engine part is in. Used verbatim in return table and	 * should be set by the code in the _run() method.	 * @var string	 */	protected $active_step = "";	/**	 * A more detailed description of the step this engine part is in. Used	 * verbatim in return table and should be set by the code in the _run()	 * method.	 * @var string	 */	protected $active_substep = "";	/**	 * Any configuration variables, in the form of an array.	 * @var array	 */	protected $_parametersArray = array();	/** @var string The database root key */	protected $databaseRoot = array();	/** @var int Last reported warnings's position in array */	private $warnings_pointer = -1;	/** @var array An array of observers */	protected $observers = array();	/**	 * Runs the preparation for this part. Should set _isPrepared	 * to true	 */	abstract protected function _prepare();	/**	 * Runs the finalisation process for this part. Should set	 * _isFinished to true.	 */	abstract protected function _finalize();	/**	 * Runs the main functionality loop for this part. Upon calling,	 * should set the _isRunning to true. When it finished, should set	 * the _hasRan to true. If an error is encountered, setError should	 * be used.	 */	abstract protected function _run();	/**	 * Sets the BREAKFLAG, which instructs this engine part that the current step must break immediately,	 * in fear of timing out.	 */	protected function setBreakFlag()	{		AKFactory::set('volatile.breakflag', true);	}	/**	 * Sets the engine part's internal state, in an easy to use manner	 *	 * @param	string	$state			One of init, prepared, running, postrun, finished, error	 * @param	string	$errorMessage	The reported error message, should the state be set to error	 */	protected function setState($state = 'init', $errorMessage='Invalid setState argument')	{		switch($state)		{			case 'init':				$this->isPrepared = false;				$this->isRunning  = false;				$this->isFinished = false;				$this->hasRun     = false;				break;			case 'prepared':				$this->isPrepared = true;				$this->isRunning  = false;				$this->isFinished = false;				$this->hasRun     = false;				break;			case 'running':				$this->isPrepared = true;				$this->isRunning  = true;				$this->isFinished = false;				$this->hasRun     = false;				break;			case 'postrun':				$this->isPrepared = true;				$this->isRunning  = false;				$this->isFinished = false;				$this->hasRun     = true;				break;			case 'finished':				$this->isPrepared = true;				$this->isRunning  = false;				$this->isFinished = true;				$this->hasRun     = false;				break;			case 'error':			default:				$this->setError($errorMessage);				break;		}	}	/**	 * The public interface to an engine part. This method takes care for	 * calling the correct method in order to perform the initialisation -	 * run - finalisation cycle of operation and return a proper reponse array.	 * @return	array	A Reponse Array	 */	final public function tick()	{		// Call the right action method, depending on engine part state		switch( $this->getState() )		{			case "init":				$this->_prepare();				break;			case "prepared":				$this->_run();				break;			case "running":				$this->_run();				break;			case "postrun":				$this->_finalize();				break;		}		// Send a Return Table back to the caller		$out = $this->_makeReturnTable();		return $out;	}	/**	 * Returns a copy of the class's status array	 * @return array	 */	public function getStatusArray()	{		return $this->_makeReturnTable();	}	/**	 * Sends any kind of setup information to the engine part. Using this,	 * we avoid passing parameters to the constructor of the class. These	 * parameters should be passed as an indexed array and should be taken	 * into account during the preparation process only. This function will	 * set the error flag if it's called after the engine part is prepared.	 *	 * @param array $parametersArray The parameters to be passed to the	 * engine part.	 */	final public function setup( $parametersArray )	{		if( $this->isPrepared )		{			$this->setState('error', "Can't modify configuration after the preparation of " . $this->active_domain);		}		else		{			$this->_parametersArray = $parametersArray;			if(array_key_exists('root', $parametersArray))			{				$this->databaseRoot = $parametersArray['root'];			}		}	}	/**	 * Returns the state of this engine part.	 *	 * @return string The state of this engine part. It can be one of	 * error, init, prepared, running, postrun, finished.	 */	final public function getState()	{		if( $this->getError() )		{			return "error";		}		if( !($this->isPrepared) )		{			return "init";		}		if( !($this->isFinished) && !($this->isRunning) && !( $this->hasRun ) && ($this->isPrepared) )		{			return "prepared";		}		if ( !($this->isFinished) && $this->isRunning && !( $this->hasRun ) )		{			return "running";		}		if ( !($this->isFinished) && !($this->isRunning) && $this->hasRun )		{			return "postrun";		}		if ( $this->isFinished )		{			return "finished";		}	}	/**	 * Constructs a Response Array based on the engine part's state.	 * @return array The Response Array for the current state	 */	final protected function _makeReturnTable()	{		// Get a list of warnings		$warnings = $this->getWarnings();		// Report only new warnings if there is no warnings queue size		if( $this->_warnings_queue_size == 0 )		{			if( ($this->warnings_pointer > 0) && ($this->warnings_pointer < (count($warnings)) ) )			{				$warnings = array_slice($warnings, $this->warnings_pointer + 1);				$this->warnings_pointer += count($warnings);			}			else			{				$this->warnings_pointer = count($warnings);			}		}		$out =  array(			'HasRun'	=> (!($this->isFinished)),			'Domain'	=> $this->active_domain,			'Step'		=> $this->active_step,			'Substep'	=> $this->active_substep,			'Error'		=> $this->getError(),			'Warnings'	=> $warnings		);		return $out;	}	final protected function setDomain($new_domain)	{		$this->active_domain = $new_domain;	}	final public function getDomain()	{		return $this->active_domain;	}	final protected function setStep($new_step)	{		$this->active_step = $new_step;	}	final public function getStep()	{		return $this->active_step;	}	final protected function setSubstep($new_substep)	{		$this->active_substep = $new_substep;	}	final public function getSubstep()	{		return $this->active_substep;	}	/**	 * Attaches an observer object	 * @param AKAbstractPartObserver $obs	 */	function attach(AKAbstractPartObserver $obs) {        $this->observers["$obs"] = $obs;    }	/**	 * Dettaches an observer object	 * @param AKAbstractPartObserver $obs	 */    function detach(AKAbstractPartObserver $obs) {        delete($this->observers["$obs"]);    }    /**     * Notifies observers each time something interesting happened to the part     * @param mixed $message The event object     */	protected function notify($message) {        foreach ($this->observers as $obs) {            $obs->update($this, $message);        }    }}/** * Descendants of this class can be used in the unarchiver's observer methods (attach, detach and notify) * @author Nicholas * */abstract class AKAbstractPartObserver{	abstract public function update($object, $message);}/** * Direct file writer */class AKPostprocDirect extends AKAbstractPostproc{	public function process()	{		$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);		if($restorePerms)		{			@chmod($this->filename, $this->perms);		}		else		{			if(@is_file($this->filename))			{				@chmod($this->filename, 0644);			}			else			{				@chmod($this->filename, 0755);			}		}		if($this->timestamp > 0)		{			@touch($this->filename, $this->timestamp);		}		return true;	}	public function processFilename($filename, $perms = 0755)	{		$this->perms = $perms;		$this->filename = $filename;		return $filename;	}	public function createDirRecursive( $dirName, $perms )	{		if( AKFactory::get('kickstart.setup.dryrun','0') ) return true;		if (@mkdir($dirName, 0755, true)) {			@chmod($dirName, 0755);			return true;		}		$root = AKFactory::get('kickstart.setup.destdir');		$root = rtrim(str_replace('\\','/',$root),'/');		$dir = rtrim(str_replace('\\','/',$dirName),'/');		if(strpos($dir, $root) === 0) {			$dir = ltrim(substr($dir, strlen($root)), '/');			$root .= '/';		} else {			$root = '';		}				if(empty($dir)) return true;		$dirArray = explode('/', $dir);		$path = '';		foreach( $dirArray as $dir )		{			$path .= $dir . '/';			$ret = is_dir($root.$path) ? true : @mkdir($root.$path);			if( !$ret ) {				// Is this a file instead of a directory?				if(is_file($root.$path) )				{					@unlink($root.$path);					$ret = @mkdir($root.$path);				}				if( !$ret ) {					$this->setError( AKText::sprintf('COULDNT_CREATE_DIR',$path) );					return false;				}			}			// Try to set new directory permissions to 0755			@chmod($root.$path, $perms);		}		return true;	}	public function chmod( $file, $perms )	{		if( AKFactory::get('kickstart.setup.dryrun','0') ) return true;		return @chmod( $file, $perms );	}	public function unlink( $file )	{		return @unlink( $file );	}	public function rmdir( $directory )	{		return @rmdir( $directory );	}	public function rename( $from, $to )	{		return @rename($from, $to);	}}/** * FTP file writer */class AKPostprocFTP extends AKAbstractPostproc{	/** @var bool Should I use FTP over implicit SSL? */	public $useSSL = false;	/** @var bool use Passive mode? */	public $passive = true;	/** @var string FTP host name */	public $host = '';	/** @var int FTP port */	public $port = 21;	/** @var string FTP user name */	public $user = '';	/** @var string FTP password */	public $pass = '';	/** @var string FTP initial directory */	public $dir = '';	/** @var resource The FTP handle */	private $handle = null;	/** @var string The temporary directory where the data will be stored */	private $tempDir = '';	public function __construct()	{		parent::__construct();		$this->useSSL = AKFactory::get('kickstart.ftp.ssl', false);		$this->passive = AKFactory::get('kickstart.ftp.passive', true);		$this->host = AKFactory::get('kickstart.ftp.host', '');		$this->port = AKFactory::get('kickstart.ftp.port', 21);		if(trim($this->port) == '') $this->port = 21;		$this->user = AKFactory::get('kickstart.ftp.user', '');		$this->pass = AKFactory::get('kickstart.ftp.pass', '');		$this->dir = AKFactory::get('kickstart.ftp.dir', '');		$this->tempDir = AKFactory::get('kickstart.ftp.tempdir', '');		$connected = $this->connect();		if($connected)		{			if(!empty($this->tempDir))			{				$tempDir = rtrim($this->tempDir, '/\\').'/';				$writable = $this->isDirWritable($tempDir);			}			else			{				$tempDir = '';				$writable = false;			}			if(!$writable) {				// Default temporary directory is the current root				$tempDir = function_exists('getcwd') ? getcwd() : dirname(__FILE__);				if(empty($tempDir))				{					// Oh, we have no directory reported!					$tempDir = '.';				}				$absoluteDirToHere = $tempDir;				$tempDir = rtrim(str_replace('\\','/',$tempDir),'/');				if(!empty($tempDir)) $tempDir .= '/';				$this->tempDir = $tempDir;				// Is this directory writable?				$writable = $this->isDirWritable($tempDir);			}			if(!$writable)			{				// Nope. Let's try creating a temporary directory in the site's root.				$tempDir = $absoluteDirToHere.'/kicktemp';				$this->createDirRecursive($tempDir, 0777);				// Try making it writable...				$this->fixPermissions($tempDir);				$writable = $this->isDirWritable($tempDir);			}			// Was the new directory writable?			if(!$writable)			{				// Let's see if the user has specified one				$userdir = AKFactory::get('kickstart.ftp.tempdir', '');				if(!empty($userdir))				{					// Is it an absolute or a relative directory?					$absolute = false;					$absolute = $absolute || ( substr($userdir,0,1) == '/' );					$absolute = $absolute || ( substr($userdir,1,1) == ':' );					$absolute = $absolute || ( substr($userdir,2,1) == ':' );					if(!$absolute)					{						// Make absolute						$tempDir = $absoluteDirToHere.$userdir;					}					else					{						// it's already absolute						$tempDir = $userdir;					}					// Does the directory exist?					if( is_dir($tempDir) )					{						// Yeah. Is it writable?						$writable = $this->isDirWritable($tempDir);					}				}			}			$this->tempDir = $tempDir;			if(!$writable)			{				// No writable directory found!!!				$this->setError(AKText::_('FTP_TEMPDIR_NOT_WRITABLE'));			}			else			{				AKFactory::set('kickstart.ftp.tempdir', $tempDir);				$this->tempDir = $tempDir;			}		}	}	function __wakeup()	{		$this->connect();	}	public function connect()	{		// Connect to server, using SSL if so required		if($this->useSSL) {			$this->handle = @ftp_ssl_connect($this->host, $this->port);		} else {			$this->handle = @ftp_connect($this->host, $this->port);		}		if($this->handle === false)		{			$this->setError(AKText::_('WRONG_FTP_HOST'));			return false;		}		// Login		if(! @ftp_login($this->handle, $this->user, $this->pass))		{			$this->setError(AKText::_('WRONG_FTP_USER'));			@ftp_close($this->handle);			return false;		}		// Change to initial directory		if(! @ftp_chdir($this->handle, $this->dir))		{			$this->setError(AKText::_('WRONG_FTP_PATH1'));			@ftp_close($this->handle);			return false;		}		// Enable passive mode if the user requested it		if( $this->passive )		{			@ftp_pasv($this->handle, true);		}		else		{			@ftp_pasv($this->handle, false);		}		return true;	}	public function process()	{		if( is_null($this->tempFilename) )		{			// If an empty filename is passed, it means that we shouldn't do any post processing, i.e.			// the entity was a directory or symlink			return true;		}		$remotePath = dirname($this->filename);		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			$removePath = ltrim($removePath, "/");			$remotePath = ltrim($remotePath, "/");			$left = substr($remotePath, 0, strlen($removePath));			if($left == $removePath)			{				$remotePath = substr($remotePath, strlen($removePath));			}		}		$absoluteFSPath = dirname($this->filename);		$relativeFTPPath = trim($remotePath, '/');		$absoluteFTPPath = '/'.trim( $this->dir, '/' ).'/'.trim($remotePath, '/');		$onlyFilename = basename($this->filename);		$remoteName = $absoluteFTPPath.'/'.$onlyFilename;		$ret = @ftp_chdir($this->handle, $absoluteFTPPath);		if($ret === false)		{			$ret = $this->createDirRecursive( $absoluteFSPath, 0755);			if($ret === false) {				$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));				return false;			}			$ret = @ftp_chdir($this->handle, $absoluteFTPPath);			if($ret === false) {				$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));				return false;			}		}		$ret = @ftp_put($this->handle, $remoteName, $this->tempFilename, FTP_BINARY);		if($ret === false)		{			// If we couldn't create the file, attempt to fix the permissions in the PHP level and retry!			$this->fixPermissions($this->filename);			$this->unlink($this->filename);			$fp = @fopen($this->tempFilename);			if($fp !== false)			{				$ret = @ftp_fput($this->handle, $remoteName, $fp, FTP_BINARY);				@fclose($fp);			}			else			{				$ret = false;			}		}		@unlink($this->tempFilename);		if($ret === false)		{			$this->setError(AKText::sprintf('FTP_COULDNT_UPLOAD', $this->filename));			return false;		}		$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);		if($restorePerms)		{			@ftp_chmod($this->_handle, $perms, $remoteName);		}		else		{			@ftp_chmod($this->_handle, 0644, $remoteName);		}		return true;	}	public function processFilename($filename, $perms = 0755)	{		// Catch some error conditions...		if($this->getError())		{			return false;		}		// If a null filename is passed, it means that we shouldn't do any post processing, i.e.		// the entity was a directory or symlink		if(is_null($filename))		{			$this->filename = null;			$this->tempFilename = null;			return null;		}		// Strip absolute filesystem path to website's root		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			$left = substr($filename, 0, strlen($removePath));			if($left == $removePath)			{				$filename = substr($filename, strlen($removePath));			}		}		// Trim slash on the left		$filename = ltrim($filename, '/');		$this->filename = $filename;		$this->tempFilename = tempnam($this->tempDir, 'kickstart-');		$this->perms = $perms;		if( empty($this->tempFilename) )		{			// Oops! Let's try something different			$this->tempFilename = $this->tempDir.'/kickstart-'.time().'.dat';		}		return $this->tempFilename;	}	private function isDirWritable($dir)	{		$fp = @fopen($dir.'/kickstart.dat', 'wb');		if($fp === false)		{			return false;		}		else		{			@fclose($fp);			unlink($dir.'/kickstart.dat');			return true;		}	}	public function createDirRecursive( $dirName, $perms )	{		// Strip absolute filesystem path to website's root		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			// UNIXize the paths			$removePath = str_replace('\\','/',$removePath);			$dirName = str_replace('\\','/',$dirName);			// Make sure they both end in a slash			$removePath = rtrim($removePath,'/\\').'/';			$dirName = rtrim($dirName,'/\\').'/';			// Process the path removal			$left = substr($dirName, 0, strlen($removePath));			if($left == $removePath)			{				$dirName = substr($dirName, strlen($removePath));			}		}		if(empty($dirName)) $dirName = ''; // 'cause the substr() above may return FALSE.				$check = '/'.trim($this->dir,'/').'/'.trim($dirName, '/');		if($this->is_dir($check)) return true;		$alldirs = explode('/', $dirName);		$previousDir = '/'.trim($this->dir);		foreach($alldirs as $curdir)		{			$check = $previousDir.'/'.$curdir;			if(!$this->is_dir($check))			{				// Proactively try to delete a file by the same name				@ftp_delete($this->handle, $check);				if(@ftp_mkdir($this->handle, $check) === false)				{					// If we couldn't create the directory, attempt to fix the permissions in the PHP level and retry!					$this->fixPermissions($removePath.$check);					if(@ftp_mkdir($this->handle, $check) === false)					{						// Can we fall back to pure PHP mode, sire?						if(!@mkdir($check))						{							$this->setError(AKText::sprintf('FTP_CANT_CREATE_DIR',$dir));							return false;						}						else						{							// Since the directory was built by PHP, change its permissions							@chmod($check, "0777");							return true;						}					}				}				@ftp_chmod($this->handle, $perms, $check);			}			$previousDir = $check;		}		return true;	}	public function close()	{		@ftp_close($this->handle);	}	/*	 * Tries to fix directory/file permissions in the PHP level, so that	 * the FTP operation doesn't fail.	 * @param $path string The full path to a directory or file	 */	private function fixPermissions( $path )	{		// Turn off error reporting		if(!defined('KSDEBUG')) {			$oldErrorReporting = @error_reporting(E_NONE);		}		// Get UNIX style paths		$relPath = str_replace('\\','/',$path);		$basePath = rtrim(str_replace('\\','/',dirname(__FILE__)),'/');		$basePath = rtrim($basePath,'/');		if(!empty($basePath)) $basePath .= '/';		// Remove the leading relative root		if( substr($relPath,0,strlen($basePath)) == $basePath )			$relPath = substr($relPath,strlen($basePath));		$dirArray = explode('/', $relPath);		$pathBuilt = rtrim($basePath,'/');		foreach( $dirArray as $dir )		{			if(empty($dir)) continue;			$oldPath = $pathBuilt;			$pathBuilt .= '/'.$dir;			if(is_dir($oldPath.$dir))			{				@chmod($oldPath.$dir, 0777);			}			else			{				if(@chmod($oldPath.$dir, 0777) === false)				{					@unlink($oldPath.$dir);				}			}		}		// Restore error reporting		if(!defined('KSDEBUG')) {			@error_reporting($oldErrorReporting);		}	}	public function chmod( $file, $perms )	{		return @ftp_chmod($this->handle, $perms, $path);	}	private function is_dir( $dir )	{		return @ftp_chdir( $this->handle, $dir );	}	public function unlink( $file )	{		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			$left = substr($file, 0, strlen($removePath));			if($left == $removePath)			{				$file = substr($file, strlen($removePath));			}		}		$check = '/'.trim($this->dir,'/').'/'.trim($file, '/');		return @ftp_delete( $this->handle, $check );	}	public function rmdir( $directory )	{		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			$left = substr($directory, 0, strlen($removePath));			if($left == $removePath)			{				$directory = substr($directory, strlen($removePath));			}		}		$check = '/'.trim($this->dir,'/').'/'.trim($directory, '/');		return @ftp_rmdir( $this->handle, $check );	}	public function rename( $from, $to )	{		$originalFrom = $from;		$originalTo = $to;		$removePath = AKFactory::get('kickstart.setup.destdir','');		if(!empty($removePath))		{			$left = substr($from, 0, strlen($removePath));			if($left == $removePath)			{				$from = substr($from, strlen($removePath));			}		}		$from = '/'.trim($this->dir,'/').'/'.trim($from, '/');		if(!empty($removePath))		{			$left = substr($to, 0, strlen($removePath));			if($left == $removePath)			{				$to = substr($to, strlen($removePath));			}		}		$to = '/'.trim($this->dir,'/').'/'.trim($to, '/');		$result = @ftp_rename( $this->handle, $from, $to );		if($result !== true)		{			return @rename($from, $to);		}		else		{			return true;		}	}}/** * JPA archive extraction class */class AKUnarchiverJPA extends AKAbstractUnarchiver{	private $archiveHeaderData = array();	protected function readArchiveHeader()	{		// Initialize header data array		$this->archiveHeaderData = new stdClass();		// Open the first part		$this->nextFile();		// Fail for unreadable files		if( $this->fp === false ) return false;		// Read the signature		$sig = fread( $this->fp, 3 );		if ($sig != 'JPA')		{			// Not a JPA file			$this->setError( AKText::_('ERR_NOT_A_JPA_FILE') );			return false;		}		// Read and parse header length		$header_length_array = unpack( 'v', fread( $this->fp, 2 ) );		$header_length = $header_length_array[1];		// Read and parse the known portion of header data (14 bytes)		$bin_data = fread($this->fp, 14);		$header_data = unpack('Cmajor/Cminor/Vcount/Vuncsize/Vcsize', $bin_data);		// Load any remaining header data (forward compatibility)		$rest_length = $header_length - 19;		if( $rest_length > 0 )			$junk = fread($this->fp, $rest_length);		else			$junk = '';		// Temporary array with all the data we read		$temp = array(			'signature' => 			$sig,			'length' => 			$header_length,			'major' => 				$header_data['major'],			'minor' => 				$header_data['minor'],			'filecount' => 			$header_data['count'],			'uncompressedsize' => 	$header_data['uncsize'],			'compressedsize' => 	$header_data['csize'],			'unknowndata' => 		$junk		);		// Array-to-object conversion		foreach($temp as $key => $value)		{			$this->archiveHeaderData->{$key} = $value;		}		$this->currentPartOffset = @ftell($this->fp);		$this->dataReadLength = 0;		return true;	}	/**	 * Concrete classes must use this method to read the file header	 * @return bool True if reading the file was successful, false if an error occured or we reached end of archive	 */	protected function readFileHeader()	{		// If the current part is over, proceed to the next part please		if( $this->isEOF(true) ) {			$this->nextFile();		}		// Get and decode Entity Description Block		$signature = fread($this->fp, 3);		$this->fileHeader = new stdClass();		$this->fileHeader->timestamp = 0;		// Check signature		if( $signature != 'JPF' )		{			if($this->isEOF(true))			{				// This file is finished; make sure it's the last one				$this->nextFile();				if(!$this->isEOF(false))				{					$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));					return false;				}				// We're just finished				return false;			}			else			{				// This is not a file block! The archive is corrupt.				$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));				return false;			}		}		// This a JPA Entity Block. Process the header.		$isBannedFile = false;		// Read length of EDB and of the Entity Path Data		$length_array = unpack('vblocksize/vpathsize', fread($this->fp, 4));		// Read the path data		if($length_array['pathsize'] > 0) {			$file = fread( $this->fp, $length_array['pathsize'] );		} else {			$file = '';		}		// Handle file renaming		$isRenamed = false;		if(is_array($this->renameFiles) && (count($this->renameFiles) > 0) )		{			if(array_key_exists($file, $this->renameFiles))			{				$file = $this->renameFiles[$file];				$isRenamed = true;			}		}				// Handle directory renaming		$isDirRenamed = false;		if(is_array($this->renameDirs) && (count($this->renameDirs) > 0)) {			if(array_key_exists(dirname($file), $this->renameDirs)) {				$file = rtrim($this->renameDirs[dirname($file)],'/').'/'.basename($file);				$isRenamed = true;				$isDirRenamed = true;			}		}		// Read and parse the known data portion		$bin_data = fread( $this->fp, 14 );		$header_data = unpack('Ctype/Ccompression/Vcompsize/Vuncompsize/Vperms', $bin_data);		// Read any unknown data		$restBytes = $length_array['blocksize'] - (21 + $length_array['pathsize']);		if( $restBytes > 0 )		{			// Start reading the extra fields			while($restBytes >= 4)			{				$extra_header_data = fread($this->fp, 4);				$extra_header = unpack('vsignature/vlength', $extra_header_data);				$restBytes -= 4;				$extra_header['length'] -= 4;				switch($extra_header['signature'])				{					case 256:						// File modified timestamp						if($extra_header['length'] > 0)						{							$bindata = fread($this->fp, $extra_header['length']);							$restBytes -= $extra_header['length'];							$timestamps = unpack('Vmodified', substr($bindata,0,4));							$filectime = $timestamps['modified'];							$this->fileHeader->timestamp = $filectime;						}						break;					default:						// Unknown field						if($extra_header['length']>0) {							$junk = fread($this->fp, $extra_header['length']);							$restBytes -= $extra_header['length'];						}						break;				}			}			if($restBytes > 0) $junk = fread($this->fp, $restBytes);		}		$compressionType = $header_data['compression'];		// Populate the return array		$this->fileHeader->file = $file;		$this->fileHeader->compressed = $header_data['compsize'];		$this->fileHeader->uncompressed = $header_data['uncompsize'];		switch($header_data['type'])		{			case 0:				$this->fileHeader->type = 'dir';				break;			case 1:				$this->fileHeader->type = 'file';				break;			case 2:				$this->fileHeader->type = 'link';				break;		}		switch( $compressionType )		{			case 0:				$this->fileHeader->compression = 'none';				break;			case 1:				$this->fileHeader->compression = 'gzip';				break;			case 2:				$this->fileHeader->compression = 'bzip2';				break;		}		$this->fileHeader->permissions = $header_data['perms'];		// Find hard-coded banned files		if( (basename($this->fileHeader->file) == ".") || (basename($this->fileHeader->file) == "..") )		{			$isBannedFile = true;		}		// Also try to find banned files passed in class configuration		if((count($this->skipFiles) > 0) && (!$isRenamed) )		{			if(in_array($this->fileHeader->file, $this->skipFiles))			{				$isBannedFile = true;			}		}		// If we have a banned file, let's skip it		if($isBannedFile)		{			// Advance the file pointer, skipping exactly the size of the compressed data			$seekleft = $this->fileHeader->compressed;			while($seekleft > 0)			{				// Ensure that we can seek past archive part boundaries				$curSize = @filesize($this->archiveList[$this->currentPartNumber]);				$curPos = @ftell($this->fp);				$canSeek = $curSize - $curPos;				if($canSeek > $seekleft) $canSeek = $seekleft;				@fseek( $this->fp, $canSeek, SEEK_CUR );				$seekleft -= $canSeek;				if($seekleft) $this->nextFile();			}			$this->currentPartOffset = @ftell($this->fp);			$this->runState = AK_STATE_DONE;			return true;		}		// Last chance to prepend a path to the filename		if(!empty($this->addPath) && !$isDirRenamed)		{			$this->fileHeader->file = $this->addPath.$this->fileHeader->file;		}		// Get the translated path name		$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);		if($this->fileHeader->type == 'file')		{			// Regular file; ask the postproc engine to process its filename			if($restorePerms)			{				$this->fileHeader->realFile = $this->postProcEngine->processFilename( $this->fileHeader->file, $this->fileHeader->permissions );			}			else			{				$this->fileHeader->realFile = $this->postProcEngine->processFilename( $this->fileHeader->file );			}		}		elseif($this->fileHeader->type == 'dir')		{			$dir = $this->fileHeader->file;			// Directory; just create it			if($restorePerms)			{				$this->postProcEngine->createDirRecursive( $this->fileHeader->file, $this->fileHeader->permissions );			}			else			{				$this->postProcEngine->createDirRecursive( $this->fileHeader->file, 0755 );			}			$this->postProcEngine->processFilename(null);		}		else		{			// Symlink; do not post-process			$this->postProcEngine->processFilename(null);		}		$this->createDirectory();		// Header is read		$this->runState = AK_STATE_HEADER;		$this->dataReadLength = 0;		return true;	}	/**	 * Concrete classes must use this method to process file data. It must set $runState to AK_STATE_DATAREAD when	 * it's finished processing the file data.	 * @return bool True if processing the file data was successful, false if an error occured	 */	protected function processFileData()	{		switch( $this->fileHeader->type )		{			case 'dir':				return $this->processTypeDir();				break;			case 'link':				return $this->processTypeLink();				break;			case 'file':				switch($this->fileHeader->compression)				{					case 'none':						return $this->processTypeFileUncompressed();						break;					case 'gzip':					case 'bzip2':						return $this->processTypeFileCompressedSimple();						break;				}				break;		}	}	private function processTypeFileUncompressed()	{		// Uncompressed files are being processed in small chunks, to avoid timeouts		if( ($this->dataReadLength == 0) && !AKFactory::get('kickstart.setup.dryrun','0') )		{			// Before processing file data, ensure permissions are adequate			$this->setCorrectPermissions( $this->fileHeader->file );		}		// Open the output file		if( !AKFactory::get('kickstart.setup.dryrun','0') )		{			$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);			if ($this->dataReadLength == 0) {				$outfp = @fopen( $this->fileHeader->realFile, 'wb' );			} else {				$outfp = @fopen( $this->fileHeader->realFile, 'ab' );			}			// Can we write to the file?			if( ($outfp === false) && (!$ignore) ) {				// An error occured				$this->setError( AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile) );				return false;			}		}		// Does the file have any data, at all?		if( $this->fileHeader->compressed == 0 )		{			// No file data!			if( !AKFactory::get('kickstart.setup.dryrun','0') && is_resource($outfp) ) @fclose($outfp);			$this->runState = AK_STATE_DATAREAD;			return true;		}		// Reference to the global timer		$timer = AKFactory::getTimer();		$toReadBytes = 0;		$leftBytes = $this->fileHeader->compressed - $this->dataReadLength;		// Loop while there's data to read and enough time to do it		while( ($leftBytes > 0) && ($timer->getTimeLeft() > 0) )		{			$toReadBytes = ($leftBytes > $this->chunkSize) ? $this->chunkSize : $leftBytes;			$data = $this->fread( $this->fp, $toReadBytes );			$reallyReadBytes = akstringlen($data);			$leftBytes -= $reallyReadBytes;			$this->dataReadLength += $reallyReadBytes;			if($reallyReadBytes < $toReadBytes)			{				// We read less than requested! Why? Did we hit local EOF?				if( $this->isEOF(true) && !$this->isEOF(false) )				{					// Yeap. Let's go to the next file					$this->nextFile();				}				else				{					// Nope. The archive is corrupt					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}			}			if( !AKFactory::get('kickstart.setup.dryrun','0') )				if(is_resource($outfp)) @fwrite( $outfp, $data );		}		// Close the file pointer		if( !AKFactory::get('kickstart.setup.dryrun','0') )			if(is_resource($outfp)) @fclose($outfp);		// Was this a pre-timeout bail out?		if( $leftBytes > 0 )		{			$this->runState = AK_STATE_DATA;		}		else		{			// Oh! We just finished!			$this->runState = AK_STATE_DATAREAD;			$this->dataReadLength = 0;		}		return true;	}	private function processTypeFileCompressedSimple()	{		if( !AKFactory::get('kickstart.setup.dryrun','0') )		{			// Before processing file data, ensure permissions are adequate			$this->setCorrectPermissions( $this->fileHeader->file );			// Open the output file			$outfp = @fopen( $this->fileHeader->realFile, 'wb' );			// Can we write to the file?			$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);			if( ($outfp === false) && (!$ignore) ) {				// An error occured				$this->setError( AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile) );				return false;			}		}		// Does the file have any data, at all?		if( $this->fileHeader->compressed == 0 )		{			// No file data!			if( !AKFactory::get('kickstart.setup.dryrun','0') )				if(is_resource($outfp)) @fclose($outfp);			$this->runState = AK_STATE_DATAREAD;			return true;		}		// Simple compressed files are processed as a whole; we can't do chunk processing		$zipData = $this->fread( $this->fp, $this->fileHeader->compressed );		while( akstringlen($zipData) < $this->fileHeader->compressed )		{			// End of local file before reading all data, but have more archive parts?			if($this->isEOF(true) && !$this->isEOF(false))			{				// Yeap. Read from the next file				$this->nextFile();				$bytes_left = $this->fileHeader->compressed - akstringlen($zipData);				$zipData .= $this->fread( $this->fp, $bytes_left );			}			else			{				$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );				return false;			}		}		if($this->fileHeader->compression == 'gzip')		{			$unzipData = gzinflate( $zipData );		}		elseif($this->fileHeader->compression == 'bzip2')		{			$unzipData = bzdecompress( $zipData );		}		unset($zipData);		// Write to the file.		if( !AKFactory::get('kickstart.setup.dryrun','0') && is_resource($outfp) )		{			@fwrite( $outfp, $unzipData, $this->fileHeader->uncompressed );			@fclose( $outfp );		}		unset($unzipData);		$this->runState = AK_STATE_DATAREAD;		return true;	}	/**	 * Process the file data of a link entry	 * @return bool	 */	private function processTypeLink()	{		$readBytes = 0;		$toReadBytes = 0;		$leftBytes = $this->fileHeader->compressed;		$data = '';		while( $leftBytes > 0)		{			$toReadBytes = ($leftBytes > $this->chunkSize) ? $this->chunkSize : $leftBytes;			$mydata = $this->fread( $this->fp, $toReadBytes );			$reallyReadBytes = akstringlen($mydata);			$data .= $mydata;			$leftBytes -= $reallyReadBytes;			if($reallyReadBytes < $toReadBytes)			{				// We read less than requested! Why? Did we hit local EOF?				if( $this->isEOF(true) && !$this->isEOF(false) )				{					// Yeap. Let's go to the next file					$this->nextFile();				}				else				{					// Nope. The archive is corrupt					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}			}		}		// Try to remove an existing file or directory by the same name		if(file_exists($this->fileHeader->realFile)) { @unlink($this->fileHeader->realFile); @rmdir($this->fileHeader->realFile); }		// Remove any trailing slash		if(substr($this->fileHeader->realFile, -1) == '/') $this->fileHeader->realFile = substr($this->fileHeader->realFile, 0, -1);		// Create the symlink - only possible within PHP context. There's no support built in the FTP protocol, so no postproc use is possible here :(		if( !AKFactory::get('kickstart.setup.dryrun','0') )			@symlink($data, $this->fileHeader->realFile);		$this->runState = AK_STATE_DATAREAD;		return true; // No matter if the link was created!	}	/**	 * Process the file data of a directory entry	 * @return bool	 */	private function processTypeDir()	{		// Directory entries in the JPA do not have file data, therefore we're done processing the entry		$this->runState = AK_STATE_DATAREAD;		return true;	}	/**	 * Creates the directory this file points to	 */	protected function createDirectory()	{		if( AKFactory::get('kickstart.setup.dryrun','0') ) return true;		// Do we need to create a directory?		if(empty($this->fileHeader->realFile)) $this->fileHeader->realFile = $this->fileHeader->file;		$lastSlash = strrpos($this->fileHeader->realFile, '/');		$dirName = substr( $this->fileHeader->realFile, 0, $lastSlash);		$perms = $this->flagRestorePermissions ? $retArray['permissions'] : 0755;		$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);		if( ($this->postProcEngine->createDirRecursive($dirName, $perms) == false) && (!$ignore) ) {			$this->setError( AKText::sprintf('COULDNT_CREATE_DIR', $dirName) );			return false;		}		else		{			return true;		}	}}/** * ZIP archive extraction class * * Since the file data portion of ZIP and JPA are similarly structured (it's empty for dirs, * linked node name for symlinks, dumped binary data for no compressions and dumped gzipped * binary data for gzip compression) we just have to subclass AKUnarchiverJPA and change the * header reading bits. Reusable code ;) */class AKUnarchiverZIP extends AKUnarchiverJPA{	var $expectDataDescriptor = false;	protected function readArchiveHeader()	{		// Initialize header data array		$this->archiveHeaderData = new stdClass();		// Open the first part		$this->nextFile();		// Fail for unreadable files		if( $this->fp === false ) return false;		// Read a possible multipart signature		$sigBinary = fread( $this->fp, 4 );		$headerData = unpack('Vsig', $sigBinary);		// Roll back if it's not a multipart archive		if( $headerData['sig'] == 0x04034b50 ) fseek($this->fp, -4, SEEK_CUR);		$multiPartSigs = array(			0x08074b50,		// Multi-part ZIP			0x30304b50,		// Multi-part ZIP (alternate)			0x04034b50		// Single file		);		if( !in_array($headerData['sig'], $multiPartSigs) )		{			$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));			return false;		}		$this->currentPartOffset = @ftell($this->fp);		$this->dataReadLength = 0;		return true;	}	/**	 * Concrete classes must use this method to read the file header	 * @return bool True if reading the file was successful, false if an error occured or we reached end of archive	 */	protected function readFileHeader()	{		// If the current part is over, proceed to the next part please		if( $this->isEOF(true) ) {			$this->nextFile();		}		if($this->expectDataDescriptor)		{			// The last file had bit 3 of the general purpose bit flag set. This means that we have a			// 12 byte data descriptor we need to skip. To make things worse, there might also be a 4			// byte optional data descriptor header (0x08074b50).			$junk = @fread($this->fp, 4);			$junk = unpack('Vsig', $junk);			if($junk['sig'] == 0x08074b50) {				// Yes, there was a signature				$junk = @fread($this->fp, 12);				if(defined('KSDEBUG')) {					debugMsg('Data descriptor (w/ header) skipped at '.(ftell($this->fp)-12));				}			} else {				// No, there was no signature, just read another 8 bytes				$junk = @fread($this->fp, 8);				if(defined('KSDEBUG')) {					debugMsg('Data descriptor (w/out header) skipped at '.(ftell($this->fp)-8));				}			}			// And check for EOF, too			if( $this->isEOF(true) ) {				if(defined('KSDEBUG')) {					debugMsg('EOF before reading header');				}								$this->nextFile();			}		}		// Get and decode Local File Header		$headerBinary = fread($this->fp, 30);		$headerData = unpack('Vsig/C2ver/vbitflag/vcompmethod/vlastmodtime/vlastmoddate/Vcrc/Vcompsize/Vuncomp/vfnamelen/veflen', $headerBinary);		// Check signature		if(!( $headerData['sig'] == 0x04034b50 ))		{			if(defined('KSDEBUG')) {				debugMsg('Not a file signature at '.(ftell($this->fp)-4));			}						// The signature is not the one used for files. Is this a central directory record (i.e. we're done)?			if($headerData['sig'] == 0x02014b50)			{				if(defined('KSDEBUG')) {					debugMsg('EOCD signature at '.(ftell($this->fp)-4));				}				// End of ZIP file detected. We'll just skip to the end of file...				while( $this->nextFile() ) {};				@fseek($this->fp, 0, SEEK_END); // Go to EOF				return false;			}			else			{				if(defined('KSDEBUG')) {					debugMsg( 'Invalid signature ' . dechex($headerData['sig']) . ' at '.ftell($this->fp) );				}				$this->setError(AKText::_('ERR_CORRUPT_ARCHIVE'));				return false;			}		}		// If bit 3 of the bitflag is set, expectDataDescriptor is true		$this->expectDataDescriptor = ($headerData['bitflag'] & 4) == 4;		$this->fileHeader = new stdClass();		$this->fileHeader->timestamp = 0;		// Read the last modified data and time		$lastmodtime = $headerData['lastmodtime'];		$lastmoddate = $headerData['lastmoddate'];				if($lastmoddate && $lastmodtime)		{			// ----- Extract time			$v_hour = ($lastmodtime & 0xF800) >> 11;			$v_minute = ($lastmodtime & 0x07E0) >> 5;			$v_seconde = ($lastmodtime & 0x001F)*2;						// ----- Extract date			$v_year = (($lastmoddate & 0xFE00) >> 9) + 1980;			$v_month = ($lastmoddate & 0x01E0) >> 5;			$v_day = $lastmoddate & 0x001F;						// ----- Get UNIX date format			$this->fileHeader->timestamp = @mktime($v_hour, $v_minute, $v_seconde, $v_month, $v_day, $v_year);		}				$isBannedFile = false;		$this->fileHeader->compressed	= $headerData['compsize'];		$this->fileHeader->uncompressed	= $headerData['uncomp'];		$nameFieldLength				= $headerData['fnamelen'];		$extraFieldLength				= $headerData['eflen'];		// Read filename field		$this->fileHeader->file			= fread( $this->fp, $nameFieldLength );		// Handle file renaming		$isRenamed = false;		if(is_array($this->renameFiles) && (count($this->renameFiles) > 0) )		{			if(array_key_exists($this->fileHeader->file, $this->renameFiles))			{				$this->fileHeader->file = $this->renameFiles[$this->fileHeader->file];				$isRenamed = true;			}		}				// Handle directory renaming		$isDirRenamed = false;		if(is_array($this->renameDirs) && (count($this->renameDirs) > 0)) {			if(array_key_exists(dirname($file), $this->renameDirs)) {				$file = rtrim($this->renameDirs[dirname($file)],'/').'/'.basename($file);				$isRenamed = true;				$isDirRenamed = true;			}		}		// Read extra field if present		if($extraFieldLength > 0) {			$extrafield = fread( $this->fp, $extraFieldLength );		}				if(defined('KSDEBUG')) {			debugMsg( '*'.ftell($this->fp).' IS START OF '.$this->fileHeader->file. ' ('.$this->fileHeader->compressed.' bytes)' );		}				// Decide filetype -- Check for directories		$this->fileHeader->type = 'file';		if( strrpos($this->fileHeader->file, '/') == strlen($this->fileHeader->file) - 1 ) $this->fileHeader->type = 'dir';		// Decide filetype -- Check for symbolic links		if( ($headerData['ver1'] == 10) && ($headerData['ver2'] == 3) )$this->fileHeader->type = 'link';		switch( $headerData['compmethod'] )		{			case 0:				$this->fileHeader->compression = 'none';				break;			case 8:				$this->fileHeader->compression = 'gzip';				break;		}		// Find hard-coded banned files		if( (basename($this->fileHeader->file) == ".") || (basename($this->fileHeader->file) == "..") )		{			$isBannedFile = true;		}		// Also try to find banned files passed in class configuration		if((count($this->skipFiles) > 0) && (!$isRenamed))		{			if(in_array($this->fileHeader->file, $this->skipFiles))			{				$isBannedFile = true;			}		}		// If we have a banned file, let's skip it		if($isBannedFile)		{			// Advance the file pointer, skipping exactly the size of the compressed data			$seekleft = $this->fileHeader->compressed;			while($seekleft > 0)			{				// Ensure that we can seek past archive part boundaries				$curSize = @filesize($this->archiveList[$this->currentPartNumber]);				$curPos = @ftell($this->fp);				$canSeek = $curSize - $curPos;				if($canSeek > $seekleft) $canSeek = $seekleft;				@fseek( $this->fp, $canSeek, SEEK_CUR );				$seekleft -= $canSeek;				if($seekleft) $this->nextFile();			}			$this->currentPartOffset = @ftell($this->fp);			$this->runState = AK_STATE_DONE;			return true;		}		// Last chance to prepend a path to the filename		if(!empty($this->addPath) && !$isDirRenamed)		{			$this->fileHeader->file = $this->addPath.$this->fileHeader->file;		}		// Get the translated path name		if($this->fileHeader->type == 'file')		{			$this->fileHeader->realFile = $this->postProcEngine->processFilename( $this->fileHeader->file );		}		elseif($this->fileHeader->type == 'dir')		{			$this->fileHeader->timestamp = 0;			$dir = $this->fileHeader->file;			$this->postProcEngine->createDirRecursive( $this->fileHeader->file, 0755 );			$this->postProcEngine->processFilename(null);		}		else		{			// Symlink; do not post-process			$this->fileHeader->timestamp = 0;			$this->postProcEngine->processFilename(null);		}		$this->createDirectory();		// Header is read		$this->runState = AK_STATE_HEADER;		return true;	}}/** * Timer class */class AKCoreTimer extends AKAbstractObject{	/** @var int Maximum execution time allowance per step */	private $max_exec_time = null;	/** @var int Timestamp of execution start */	private $start_time = null;	/**	 * Public constructor, creates the timer object and calculates the execution time limits	 * @return AECoreTimer	 */	public function __construct()	{		parent::__construct();		// Initialize start time		$this->start_time = $this->microtime_float();		// Get configured max time per step and bias		$config_max_exec_time	= AKFactory::get('kickstart.tuning.max_exec_time', 14);		$bias					= AKFactory::get('kickstart.tuning.run_time_bias', 75)/100;		// Get PHP's maximum execution time (our upper limit)		if(@function_exists('ini_get'))		{			$php_max_exec_time = @ini_get("maximum_execution_time");			if ( (!is_numeric($php_max_exec_time)) || ($php_max_exec_time == 0) ) {				// If we have no time limit, set a hard limit of about 10 seconds				// (safe for Apache and IIS timeouts, verbose enough for users)				$php_max_exec_time = 14;			}		}		else		{			// If ini_get is not available, use a rough default			$php_max_exec_time = 14;		}		// Apply an arbitrary correction to counter CMS load time		$php_max_exec_time--;		// Apply bias		$php_max_exec_time = $php_max_exec_time * $bias;		$config_max_exec_time = $config_max_exec_time * $bias;		// Use the most appropriate time limit value		if( $config_max_exec_time > $php_max_exec_time )		{			$this->max_exec_time = $php_max_exec_time;		}		else		{			$this->max_exec_time = $config_max_exec_time;		}	}	/**	 * Wake-up function to reset internal timer when we get unserialized	 */	public function __wakeup()	{		// Re-initialize start time on wake-up		$this->start_time = $this->microtime_float();	}	/**	 * Gets the number of seconds left, before we hit the "must break" threshold	 * @return float	 */	public function getTimeLeft()	{		return $this->max_exec_time - $this->getRunningTime();	}	/**	 * Gets the time elapsed since object creation/unserialization, effectively how	 * long Akeeba Engine has been processing data	 * @return float	 */	public function getRunningTime()	{		return $this->microtime_float() - $this->start_time;	}	/**	 * Returns the current timestampt in decimal seconds	 */	private function microtime_float()	{		list($usec, $sec) = explode(" ", microtime());		return ((float)$usec + (float)$sec);	}	/**	 * Enforce the minimum execution time	 */	public function enforce_min_exec_time()	{		// Try to get a sane value for PHP's maximum_execution_time INI parameter		if(@function_exists('ini_get'))		{			$php_max_exec = @ini_get("maximum_execution_time");		}		else		{			$php_max_exec = 10;		}		if ( ($php_max_exec == "") || ($php_max_exec == 0) ) {			$php_max_exec = 10;		}		// Decrease $php_max_exec time by 500 msec we need (approx.) to tear down		// the application, as well as another 500msec added for rounding		// error purposes. Also make sure this is never gonna be less than 0.		$php_max_exec = max($php_max_exec * 1000 - 1000, 0);		// Get the "minimum execution time per step" Akeeba Backup configuration variable		$minexectime = AKFactory::get('kickstart.tuning.min_exec_time',0);		if(!is_numeric($minexectime)) $minexectime = 0;		// Make sure we are not over PHP's time limit!		if($minexectime > $php_max_exec) $minexectime = $php_max_exec;		// Get current running time		$elapsed_time = $this->getRunningTime() * 1000;			// Only run a sleep delay if we haven't reached the minexectime execution time		if( ($minexectime > $elapsed_time) && ($elapsed_time > 0) )		{			$sleep_msec = $minexectime - $elapsed_time;			if(function_exists('usleep'))			{				usleep(1000 * $sleep_msec);			}			elseif(function_exists('time_nanosleep'))			{				$sleep_sec = floor($sleep_msec / 1000);				$sleep_nsec = 1000000 * ($sleep_msec - ($sleep_sec * 1000));				time_nanosleep($sleep_sec, $sleep_nsec);			}			elseif(function_exists('time_sleep_until'))			{				$until_timestamp = time() + $sleep_msec / 1000;				time_sleep_until($until_timestamp);			}			elseif(function_exists('sleep'))			{				$sleep_sec = ceil($sleep_msec/1000);				sleep( $sleep_sec );			}		}		elseif( $elapsed_time > 0 )		{			// No sleep required, even if user configured us to be able to do so.		}	}	/**	 * Reset the timer. It should only be used in CLI mode!	 */	public function resetTime()	{		$this->start_time = $this->microtime_float();	}}/** * JPS archive extraction class */class AKUnarchiverJPS extends AKUnarchiverJPA{	private $archiveHeaderData = array();	private $password = '';	public function __construct()	{		parent::__construct();		$this->password = AKFactory::get('kickstart.jps.password','');	}	protected function readArchiveHeader()	{		// Initialize header data array		$this->archiveHeaderData = new stdClass();		// Open the first part		$this->nextFile();		// Fail for unreadable files		if( $this->fp === false ) return false;		// Read the signature		$sig = fread( $this->fp, 3 );		if ($sig != 'JPS')		{			// Not a JPA file			$this->setError( AKText::_('ERR_NOT_A_JPS_FILE') );			return false;		}		// Read and parse the known portion of header data (5 bytes)		$bin_data = fread($this->fp, 5);		$header_data = unpack('Cmajor/Cminor/cspanned/vextra', $bin_data);		// Load any remaining header data (forward compatibility)		$rest_length = $header_data['extra'];		if( $rest_length > 0 )			$junk = fread($this->fp, $rest_length);		else			$junk = '';		// Temporary array with all the data we read		$temp = array(			'signature' => 			$sig,			'major' => 				$header_data['major'],			'minor' => 				$header_data['minor'],			'spanned' => 			$header_data['spanned']		);		// Array-to-object conversion		foreach($temp as $key => $value)		{			$this->archiveHeaderData->{$key} = $value;		}		$this->currentPartOffset = @ftell($this->fp);		$this->dataReadLength = 0;		return true;	}	/**	 * Concrete classes must use this method to read the file header	 * @return bool True if reading the file was successful, false if an error occured or we reached end of archive	 */	protected function readFileHeader()	{		// If the current part is over, proceed to the next part please		if( $this->isEOF(true) ) {			$this->nextFile();		}		// Get and decode Entity Description Block		$signature = fread($this->fp, 3);		// Check for end-of-archive siganture		if($signature == 'JPE')		{			$this->setState('postrun');			return true;		}		$this->fileHeader = new stdClass();		$this->fileHeader->timestamp = 0;		// Check signature		if( $signature != 'JPF' )		{			if($this->isEOF(true))			{				// This file is finished; make sure it's the last one				$this->nextFile();				if(!$this->isEOF(false))				{					$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));					return false;				}				// We're just finished				return false;			}			else			{				fseek($this->fp, -6, SEEK_CUR);				$signature = fread($this->fp, 3);				if($signature == 'JPE')				{					return false;				}				$this->setError(AKText::sprintf('INVALID_FILE_HEADER', $this->currentPartNumber, $this->currentPartOffset));				return false;			}		}		// This a JPA Entity Block. Process the header.		$isBannedFile = false;		// Read and decrypt the header		$edbhData = fread($this->fp, 4);		$edbh = unpack('vencsize/vdecsize', $edbhData);		$bin_data = fread($this->fp, $edbh['encsize']);		// Decrypt and truncate		$bin_data = AKEncryptionAES::AESDecryptCBC($bin_data, $this->password, 128);		$bin_data = substr($bin_data,0,$edbh['decsize']);		// Read length of EDB and of the Entity Path Data		$length_array = unpack('vpathsize', substr($bin_data,0,2) );		// Read the path data		$file = substr($bin_data,2,$length_array['pathsize']);		// Handle file renaming		$isRenamed = false;		if(is_array($this->renameFiles) && (count($this->renameFiles) > 0) )		{			if(array_key_exists($file, $this->renameFiles))			{				$file = $this->renameFiles[$file];				$isRenamed = true;			}		}				// Handle directory renaming		$isDirRenamed = false;		if(is_array($this->renameDirs) && (count($this->renameDirs) > 0)) {			if(array_key_exists(dirname($file), $this->renameDirs)) {				$file = rtrim($this->renameDirs[dirname($file)],'/').'/'.basename($file);				$isRenamed = true;				$isDirRenamed = true;			}		}		// Read and parse the known data portion		$bin_data = substr($bin_data, 2 + $length_array['pathsize']);		$header_data = unpack('Ctype/Ccompression/Vuncompsize/Vperms/Vfilectime', $bin_data);		$this->fileHeader->timestamp = $header_data['filectime'];		$compressionType = $header_data['compression'];		// Populate the return array		$this->fileHeader->file = $file;		$this->fileHeader->uncompressed = $header_data['uncompsize'];		switch($header_data['type'])		{			case 0:				$this->fileHeader->type = 'dir';				break;			case 1:				$this->fileHeader->type = 'file';				break;			case 2:				$this->fileHeader->type = 'link';				break;		}		switch( $compressionType )		{			case 0:				$this->fileHeader->compression = 'none';				break;			case 1:				$this->fileHeader->compression = 'gzip';				break;			case 2:				$this->fileHeader->compression = 'bzip2';				break;		}		$this->fileHeader->permissions = $header_data['perms'];		// Find hard-coded banned files		if( (basename($this->fileHeader->file) == ".") || (basename($this->fileHeader->file) == "..") )		{			$isBannedFile = true;		}		// Also try to find banned files passed in class configuration		if((count($this->skipFiles) > 0) && (!$isRenamed) )		{			if(in_array($this->fileHeader->file, $this->skipFiles))			{				$isBannedFile = true;			}		}		// If we have a banned file, let's skip it		if($isBannedFile)		{			$done = false;			while(!$done)			{				// Read the Data Chunk Block header				$binMiniHead = fread($this->fp, 8);				if( in_array( substr($binMiniHead,0,3), array('JPF','JPE') ) )				{					// Not a Data Chunk Block header, I am done skipping the file					@fseek($this->fp,-8,SEEK_CUR); // Roll back the file pointer					$done = true; // Mark as done					continue; // Exit loop				}				else				{					// Skip forward by the amount of compressed data					$miniHead = unpack('Vencsize/Vdecsize');					@fseek($this->fp, $miniHead['encsize'], SEEK_CUR);				}			}			$this->currentPartOffset = @ftell($this->fp);			$this->runState = AK_STATE_DONE;			return true;		}		// Last chance to prepend a path to the filename		if(!empty($this->addPath) && !$isDirRenamed)		{			$this->fileHeader->file = $this->addPath.$this->fileHeader->file;		}		// Get the translated path name		$restorePerms = AKFactory::get('kickstart.setup.restoreperms', false);		if($this->fileHeader->type == 'file')		{			// Regular file; ask the postproc engine to process its filename			if($restorePerms)			{				$this->fileHeader->realFile = $this->postProcEngine->processFilename( $this->fileHeader->file, $this->fileHeader->permissions );			}			else			{				$this->fileHeader->realFile = $this->postProcEngine->processFilename( $this->fileHeader->file );			}		}		elseif($this->fileHeader->type == 'dir')		{			$dir = $this->fileHeader->file;			$this->fileHeader->realFile = $dir;			// Directory; just create it			if($restorePerms)			{				$this->postProcEngine->createDirRecursive( $this->fileHeader->file, $this->fileHeader->permissions );			}			else			{				$this->postProcEngine->createDirRecursive( $this->fileHeader->file, 0755 );			}			$this->postProcEngine->processFilename(null);		}		else		{			// Symlink; do not post-process			$this->postProcEngine->processFilename(null);		}		$this->createDirectory();		// Header is read		$this->runState = AK_STATE_HEADER;		$this->dataReadLength = 0;		return true;	}	/**	 * Concrete classes must use this method to process file data. It must set $runState to AK_STATE_DATAREAD when	 * it's finished processing the file data.	 * @return bool True if processing the file data was successful, false if an error occured	 */	protected function processFileData()	{		switch( $this->fileHeader->type )		{			case 'dir':				return $this->processTypeDir();				break;			case 'link':				return $this->processTypeLink();				break;			case 'file':				switch($this->fileHeader->compression)				{					case 'none':						return $this->processTypeFileUncompressed();						break;					case 'gzip':					case 'bzip2':						return $this->processTypeFileCompressedSimple();						break;				}				break;		}	}	private function processTypeFileUncompressed()	{		// Uncompressed files are being processed in small chunks, to avoid timeouts		if( ($this->dataReadLength == 0) && !AKFactory::get('kickstart.setup.dryrun','0') )		{			// Before processing file data, ensure permissions are adequate			$this->setCorrectPermissions( $this->fileHeader->file );		}		// Open the output file		if( !AKFactory::get('kickstart.setup.dryrun','0') )		{			$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);			if ($this->dataReadLength == 0) {				$outfp = @fopen( $this->fileHeader->realFile, 'wb' );			} else {				$outfp = @fopen( $this->fileHeader->realFile, 'ab' );			}			// Can we write to the file?			if( ($outfp === false) && (!$ignore) ) {				// An error occured				$this->setError( AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile) );				return false;			}		}		// Does the file have any data, at all?		if( $this->fileHeader->uncompressed == 0 )		{			// No file data!			if( !AKFactory::get('kickstart.setup.dryrun','0') && is_resource($outfp) ) @fclose($outfp);			$this->runState = AK_STATE_DATAREAD;			return true;		}		else		{			$this->setError('An uncompressed file was detected; this is not supported by this archive extraction utility');			return false;		}		return true;	}	private function processTypeFileCompressedSimple()	{		$timer = AKFactory::getTimer();		// Files are being processed in small chunks, to avoid timeouts		if( ($this->dataReadLength == 0) && !AKFactory::get('kickstart.setup.dryrun','0') )		{			// Before processing file data, ensure permissions are adequate			$this->setCorrectPermissions( $this->fileHeader->file );		}		// Open the output file		if( !AKFactory::get('kickstart.setup.dryrun','0') )		{			// Open the output file			$outfp = @fopen( $this->fileHeader->realFile, 'wb' );			// Can we write to the file?			$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);			if( ($outfp === false) && (!$ignore) ) {				// An error occured				$this->setError( AKText::sprintf('COULDNT_WRITE_FILE', $this->fileHeader->realFile) );				return false;			}		}		// Does the file have any data, at all?		if( $this->fileHeader->uncompressed == 0 )		{			// No file data!			if( !AKFactory::get('kickstart.setup.dryrun','0') )				if(is_resource($outfp)) @fclose($outfp);			$this->runState = AK_STATE_DATAREAD;			return true;		}		$leftBytes = $this->fileHeader->uncompressed - $this->dataReadLength;		// Loop while there's data to write and enough time to do it		while( ($leftBytes > 0) && ($timer->getTimeLeft() > 0) )		{			// Read the mini header			$binMiniHeader = fread($this->fp, 8);			$reallyReadBytes = akstringlen($binMiniHeader);			if($reallyReadBytes < 8)			{				// We read less than requested! Why? Did we hit local EOF?				if( $this->isEOF(true) && !$this->isEOF(false) )				{					// Yeap. Let's go to the next file					$this->nextFile();					// Retry reading the header					$binMiniHeader = fread($this->fp, 8);					$reallyReadBytes = akstringlen($binMiniHeader);					// Still not enough data? If so, the archive is corrupt or missing parts.					if($reallyReadBytes < 8) {						$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );						return false;					}				}				else				{					// Nope. The archive is corrupt					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}			}			// Read the encrypted data			$miniHeader = unpack('Vencsize/Vdecsize', $binMiniHeader);			$toReadBytes = $miniHeader['encsize'];			$data = $this->fread( $this->fp, $toReadBytes );			$reallyReadBytes = akstringlen($data);			if($reallyReadBytes < $toReadBytes)			{				// We read less than requested! Why? Did we hit local EOF?				if( $this->isEOF(true) && !$this->isEOF(false) )				{					// Yeap. Let's go to the next file					$this->nextFile();					// Read the rest of the data					$toReadBytes -= $reallyReadBytes;					$restData = $this->fread( $this->fp, $toReadBytes );					$reallyReadBytes = akstringlen($restData);					if($reallyReadBytes < $toReadBytes) {						$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );						return false;					}					if(akstringlen($data) == 0) {						$data = $restData;					} else {						$data .= $restData;					}				}				else				{					// Nope. The archive is corrupt					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}			}			// Decrypt the data			$data = AKEncryptionAES::AESDecryptCBC($data, $this->password, 128);			// Is the length of the decrypted data less than expected?			$data_length = akstringlen($data);			if($data_length < $miniHeader['decsize']) {				$this->setError(AKText::_('ERR_INVALID_JPS_PASSWORD'));				return false;			}			// Trim the data			$data = substr($data,0,$miniHeader['decsize']);			// Decompress			$data = gzinflate($data);			$unc_len = akstringlen($data);			// Write the decrypted data			if( !AKFactory::get('kickstart.setup.dryrun','0') )				if(is_resource($outfp)) @fwrite( $outfp, $data, akstringlen($data) );			// Update the read length			$this->dataReadLength += $unc_len;			$leftBytes = $this->fileHeader->uncompressed - $this->dataReadLength;		}		// Close the file pointer		if( !AKFactory::get('kickstart.setup.dryrun','0') )			if(is_resource($outfp)) @fclose($outfp);		// Was this a pre-timeout bail out?		if( $leftBytes > 0 )		{			$this->runState = AK_STATE_DATA;		}		else		{			// Oh! We just finished!			$this->runState = AK_STATE_DATAREAD;			$this->dataReadLength = 0;		}	}	/**	 * Process the file data of a link entry	 * @return bool	 */	private function processTypeLink()	{		// Does the file have any data, at all?		if( $this->fileHeader->uncompressed == 0 )		{			// No file data!			$this->runState = AK_STATE_DATAREAD;			return true;		}		// Read the mini header		$binMiniHeader = fread($this->fp, 8);		$reallyReadBytes = akstringlen($binMiniHeader);		if($reallyReadBytes < 8)		{			// We read less than requested! Why? Did we hit local EOF?			if( $this->isEOF(true) && !$this->isEOF(false) )			{				// Yeap. Let's go to the next file				$this->nextFile();				// Retry reading the header				$binMiniHeader = fread($this->fp, 8);				$reallyReadBytes = akstringlen($binMiniHeader);				// Still not enough data? If so, the archive is corrupt or missing parts.				if($reallyReadBytes < 8) {					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}			}			else			{				// Nope. The archive is corrupt				$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );				return false;			}		}		// Read the encrypted data		$miniHeader = unpack('Vencsize/Vdecsize', $binMiniHeader);		$toReadBytes = $miniHeader['encsize'];		$data = $this->fread( $this->fp, $toReadBytes );		$reallyReadBytes = akstringlen($data);		if($reallyReadBytes < $toReadBytes)		{			// We read less than requested! Why? Did we hit local EOF?			if( $this->isEOF(true) && !$this->isEOF(false) )			{				// Yeap. Let's go to the next file				$this->nextFile();				// Read the rest of the data				$toReadBytes -= $reallyReadBytes;				$restData = $this->fread( $this->fp, $toReadBytes );				$reallyReadBytes = akstringlen($data);				if($reallyReadBytes < $toReadBytes) {					$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );					return false;				}				$data .= $restData;			}			else			{				// Nope. The archive is corrupt				$this->setError( AKText::_('ERR_CORRUPT_ARCHIVE') );				return false;			}		}		// Decrypt the data		$data = AKEncryptionAES::AESDecryptCBC($data, $this->password, 128);		// Is the length of the decrypted data less than expected?		$data_length = akstringlen($data);		if($data_length < $miniHeader['decsize']) {			$this->setError(AKText::_('ERR_INVALID_JPS_PASSWORD'));			return false;		}		// Trim the data		$data = substr($data,0,$miniHeader['decsize']);		// Try to remove an existing file or directory by the same name		if(file_exists($this->fileHeader->realFile)) { @unlink($this->fileHeader->realFile); @rmdir($this->fileHeader->realFile); }		// Remove any trailing slash		if(substr($this->fileHeader->realFile, -1) == '/') $this->fileHeader->realFile = substr($this->fileHeader->realFile, 0, -1);		// Create the symlink - only possible within PHP context. There's no support built in the FTP protocol, so no postproc use is possible here :(		if( !AKFactory::get('kickstart.setup.dryrun','0') )			@symlink($data, $this->fileHeader->realFile);		$this->runState = AK_STATE_DATAREAD;		return true; // No matter if the link was created!	}	/**	 * Process the file data of a directory entry	 * @return bool	 */	private function processTypeDir()	{		// Directory entries in the JPA do not have file data, therefore we're done processing the entry		$this->runState = AK_STATE_DATAREAD;		return true;	}	/**	 * Creates the directory this file points to	 */	protected function createDirectory()	{		if( AKFactory::get('kickstart.setup.dryrun','0') ) return true;		// Do we need to create a directory?		$lastSlash = strrpos($this->fileHeader->realFile, '/');		$dirName = substr( $this->fileHeader->realFile, 0, $lastSlash);		$perms = $this->flagRestorePermissions ? $retArray['permissions'] : 0755;		$ignore = AKFactory::get('kickstart.setup.ignoreerrors', false);		if( ($this->postProcEngine->createDirRecursive($dirName, $perms) == false) && (!$ignore) ) {			$this->setError( AKText::sprintf('COULDNT_CREATE_DIR', $dirName) );			return false;		}		else		{			return true;		}	}}/** * A filesystem scanner which uses opendir() */class AKUtilsLister extends AKAbstractObject{	public function &getFiles($folder, $pattern = '*')	{		// Initialize variables		$arr = array();		$false = false;		if(!is_dir($folder)) return $false;		$handle = @opendir($folder);		// If directory is not accessible, just return FALSE		if ($handle === FALSE) {			$this->setWarning( 'Unreadable directory '.$folder);			return $false;		}		while (($file = @readdir($handle)) !== false)		{			if( !fnmatch($pattern, $file) ) continue;			if (($file != '.') && ($file != '..'))			{				$ds = ($folder == '') || ($folder == '/') || (@substr($folder, -1) == '/') || (@substr($folder, -1) == DIRECTORY_SEPARATOR) ? '' : DIRECTORY_SEPARATOR;				$dir = $folder . $ds . $file;				$isDir = is_dir($dir);				if (!$isDir) {					$arr[] = $dir;				}			}		}		@closedir($handle);		return $arr;	}	public function &getFolders($folder, $pattern = '*')	{		// Initialize variables		$arr = array();		$false = false;		if(!is_dir($folder)) return $false;		$handle = @opendir($folder);		// If directory is not accessible, just return FALSE		if ($handle === FALSE) {			$this->setWarning( 'Unreadable directory '.$folder);			return $false;		}		while (($file = @readdir($handle)) !== false)		{			if( !fnmatch($pattern, $file) ) continue;			if (($file != '.') && ($file != '..'))			{				$ds = ($folder == '') || ($folder == '/') || (@substr($folder, -1) == '/') || (@substr($folder, -1) == DIRECTORY_SEPARATOR) ? '' : DIRECTORY_SEPARATOR;				$dir = $folder . $ds . $file;				$isDir = is_dir($dir);				if ($isDir) {					$arr[] = $dir;				}			}		}		@closedir($handle);		return $arr;	}}/** * A simple INI-based i18n engine */class AKText extends AKAbstractObject{	/**	 * The default (en_GB) translation used when no other translation is available	 * @var array	 */	private $default_translation = array(		'AUTOMODEON' => 'Auto-mode enabled',		'ERR_NOT_A_JPA_FILE' => 'The file is not a JPA archive',		'ERR_CORRUPT_ARCHIVE' => 'The archive file is corrupt, truncated or archive parts are missing',		'ERR_INVALID_LOGIN' => 'Invalid login',		'COULDNT_CREATE_DIR' => 'Could not create %s folder',		'COULDNT_WRITE_FILE' => 'Could not open %s for writing.',		'WRONG_FTP_HOST' => 'Wrong FTP host or port',		'WRONG_FTP_USER' => 'Wrong FTP username or password',		'WRONG_FTP_PATH1' => 'Wrong FTP initial directory - the directory doesn\'t exist',		'FTP_CANT_CREATE_DIR' => 'Could not create directory %s',		'FTP_TEMPDIR_NOT_WRITABLE' => 'Could not find or create a writable temporary directory',		'FTP_COULDNT_UPLOAD' => 'Could not upload %s',		'THINGS_HEADER' => 'Things you should know about Akeeba Kickstart',		'THINGS_01' => 'Kickstart is not an installer. It is an archive extraction tool. The actual installer was put inside the archive file at backup time.',		'THINGS_02' => 'Kickstart is not the only way to extract the backup archive. You can use Akeeba eXtract Wizard and upload the extracted files using FTP instead.',		'THINGS_03' => 'Kickstart is bound by your server\'s configuration. As such, it may not work at all.',		'THINGS_04' => 'You should download and upload your archive files using FTP in Binary transfer mode. Any other method could lead to a corrupt backup archive and restoration failure.',		'THINGS_05' => 'Post-restoration site load errors are usually caused by .htaccess or php.ini directives. You should understand that blank pages, 404 and 500 errors can usually be worked around by editing the aforementioned files. It is not our job to mess with your configuration files, because this could be dangerous for your site.',		'THINGS_06' => 'Kickstart overwrites files without a warning. If you are not sure that you are OK with that do not continue.',		'THINGS_07' => 'Trying to restore to the temporary URL of a cPanel host (e.g. http://1.2.3.4/~username) will lead to restoration failure and your site will appear to be not working. This is normal and it\'s just how your server and CMS software work.',		'THINGS_08' => 'You are supposed to read the documentation before using this software. Most issues can be avoided, or easily worked around, by understanding how this software works.',		'THINGS_09' => 'This text does not imply that there is a problem detected. It is standard text displayed every time you launch Kickstart.',		'CLOSE_LIGHTBOX' => 'Click here or press ESC to close this message',		'SELECT_ARCHIVE' => 'Select a backup archive',		'ARCHIVE_FILE' => 'Archive file:',		'SELECT_EXTRACTION' => 'Select an extraction method',		'WRITE_TO_FILES' => 'Write to files:',		'WRITE_DIRECTLY' => 'Directly',		'WRITE_FTP' => 'Use FTP',		'FTP_HOST' => 'FTP host name:',		'FTP_PORT' => 'FTP port:',		'FTP_FTPS' => 'Use FTP over SSL (FTPS)',		'FTP_PASSIVE' => 'Use FTP Passive Mode',		'FTP_USER' => 'FTP user name:',		'FTP_PASS' => 'FTP password:',		'FTP_DIR' => 'FTP directory:',		'FTP_TEMPDIR' => 'Temporary directory:',		'FTP_CONNECTION_OK' => 'FTP Connection Established',		'FTP_CONNECTION_FAILURE' => 'The FTP Connection Failed',		'FTP_TEMPDIR_WRITABLE' => 'The temporary directory is writable.',		'FTP_TEMPDIR_UNWRITABLE' => 'The temporary directory is not writable. Please check the permissions.',		'BTN_CHECK' => 'Check',		'BTN_RESET' => 'Reset',		'BTN_TESTFTPCON' => 'Test FTP connection',		'BTN_GOTOSTART' => 'Start over',		'FINE_TUNE' => 'Fine tune',		'MIN_EXEC_TIME' => 'Minimum execution time:',		'MAX_EXEC_TIME' => 'Maximum execution time:',		'SECONDS_PER_STEP' => 'seconds per step',		'EXTRACT_FILES' => 'Extract files',		'BTN_START' => 'Start',		'EXTRACTING' => 'Extracting',		'DO_NOT_CLOSE_EXTRACT' => 'Do not close this window while the extraction is in progress',		'RESTACLEANUP' => 'Restoration and Clean Up',		'BTN_RUNINSTALLER' => 'Run the Installer',		'BTN_CLEANUP' => 'Clean Up',		'BTN_SITEFE' => 'Visit your site\'s front-end',		'BTN_SITEBE' => 'Visit your site\'s back-end',		'WARNINGS' => 'Extraction Warnings',		'ERROR_OCCURED' => 'An error occured',		'STEALTH_MODE' => 'Stealth mode',		'STEALTH_URL' => 'HTML file to show to web visitors',		'ERR_NOT_A_JPS_FILE' => 'The file is not a JPA archive',		'ERR_INVALID_JPS_PASSWORD' => 'The password you gave is wrong or the archive is corrupt',		'JPS_PASSWORD' => 'Archive Password (for JPS files)',		'INVALID_FILE_HEADER' => 'Invalid header in archive file, part %s, offset %s',		'NEEDSOMEHELPKS' => 'Want some help to use this tool? Read this first:',		'QUICKSTART' => 'Quick Start Guide',		'CANTGETITTOWORK' => 'Can\'t get it to work? Click me!',		'NOARCHIVESCLICKHERE' => 'No archives detected. Click here for troubleshooting instructions.',		'POSTRESTORATIONTROUBLESHOOTING' => 'Something not working after the restoration? Click here for troubleshooting instructions.',		'UPDATE_HEADER' => 'An updated version of Akeeba Kickstart (<span id="update-version">unknown</span>) is available!',		'UPDATE_NOTICE' => 'You are advised to always use the latest version of Akeeba Kickstart available. Older versions may be subject to bugs and will not be supported.',		'UPDATE_DLNOW' => 'Download now',		'UPDATE_MOREINFO' => 'More information'	);	/**	 * The array holding the translation keys	 * @var array	 */	private $strings;	/**	 * The currently detected language (ISO code)	 * @var string	 */	private $language;	/*	 * Initializes the translation engine	 * @return AKText	 */	public function __construct()	{		// Start with the default translation		$this->strings = $this->default_translation;		// Try loading the translation file in English, if it exists		$this->loadTranslation('en-GB');		// Try loading the translation file in the browser's preferred language, if it exists		$this->getBrowserLanguage();		if(!is_null($this->language))		{			$this->loadTranslation();		}	}	/**	 * Singleton pattern for Language	 * @return Language The global Language instance	 */	public static function &getInstance()	{		static $instance;		if(!is_object($instance))		{			$instance = new AKText();		}		return $instance;	}	public static function _($string)	{		$text = self::getInstance();		$key = strtoupper($string);		$key = substr($key, 0, 1) == '_' ? substr($key, 1) : $key;		if (isset ($text->strings[$key]))		{			$string = $text->strings[$key];		}		else		{			if (defined($string))			{				$string = constant($string);			}		}		return $string;	}	public static function sprintf($key)	{		$text = self::getInstance();		$args = func_get_args();		if (count($args) > 0) {			$args[0] = $text->_($args[0]);			return @call_user_func_array('sprintf', $args);		}		return '';	}	public function dumpLanguage()	{		$out = '';		foreach($this->strings as $key => $value)		{			$out .= "$key=$value\n";		}		return $out;	}	public function asJavascript()	{		$out = '';		foreach($this->strings as $key => $value)		{			$key = addcslashes($key, '\\\'"');			$value = addcslashes($value, '\\\'"');			if(!empty($out)) $out .= ",\n";			$out .= "'$key':\t'$value'";		}		return $out;	}	public function resetTranslation()	{		$this->strings = $this->default_translation;	}	public function getBrowserLanguage()	{		// Detection code from Full Operating system language detection, by Harald Hope		// Retrieved from http://techpatterns.com/downloads/php_language_detection.php		$user_languages = array();		//check to see if language is set		if ( isset( $_SERVER["HTTP_ACCEPT_LANGUAGE"] ) )		{			$languages = strtolower( $_SERVER["HTTP_ACCEPT_LANGUAGE"] );			// $languages = ' fr-ch;q=0.3, da, en-us;q=0.8, en;q=0.5, fr;q=0.3';			// need to remove spaces from strings to avoid error			$languages = str_replace( ' ', '', $languages );			$languages = explode( ",", $languages );			foreach ( $languages as $language_list )			{				// pull out the language, place languages into array of full and primary				// string structure:				$temp_array = array();				// slice out the part before ; on first step, the part before - on second, place into array				$temp_array[0] = substr( $language_list, 0, strcspn( $language_list, ';' ) );//full language				$temp_array[1] = substr( $language_list, 0, 2 );// cut out primary language				if( (strlen($temp_array[0]) == 5) && ( (substr($temp_array[0],2,1) == '-') || (substr($temp_array[0],2,1) == '_') ) )				{					$langLocation = strtoupper(substr($temp_array[0],3,2));					$temp_array[0] = $temp_array[1].'-'.$langLocation;				}				//place this array into main $user_languages language array				$user_languages[] = $temp_array;			}		}		else// if no languages found		{			$user_languages[0] = array( '','' ); //return blank array.		}		$this->language = null;		$basename=basename(__FILE__, '.php') . '.ini';				// Try to match main language part of the filename, irrespective of the location, e.g. de_DE will do if de_CH doesn't exist.		$fs = new AKUtilsLister();		$iniFiles = $fs->getFiles( dirname(__FILE__), '*.'.$basename );		if(empty($iniFiles) && ($basename != 'kickstart.ini')) {			$basename = 'kickstart.ini';			$iniFiles = $fs->getFiles( dirname(__FILE__), '*.'.$basename );		}		if (is_array($iniFiles)) {			foreach($user_languages as $languageStruct)			{				if(is_null($this->language))				{					// Get files matching the main lang part					$iniFiles = $fs->getFiles( dirname(__FILE__), $languageStruct[1].'-??.'.$basename );					if (count($iniFiles) > 0) {						$filename = $iniFiles[0];						$filename = substr($filename, strlen(dirname(__FILE__))+1);						$this->language = substr($filename, 0, 5);					} else {						$this->language = null;					}				}			}		}				if(is_null($this->language)) {			// Try to find a full language match			foreach($user_languages as $languageStruct)			{				if (@file_exists($languageStruct[0].'.'.$basename) && is_null($this->language)) {					$this->language = $languageStruct[0];				} else {				}			}		} else {			// Do we have an exact match?			foreach($user_languages as $languageStruct)			{				if(substr($this->language,0,strlen($languageStruct[1])) == $languageStruct[1]) {					if(file_exists($languageStruct[0].'.'.$basename)) {						$this->language = $languageStruct[0];					}				}			}		}				// Now, scan for full language based on the partial match			}	private function loadTranslation( $lang = null )	{		$dirname = function_exists('getcwd') ? getcwd() : dirname(__FILE__);		$basename=basename(__FILE__, '.php') . '.ini';		if( empty($lang) ) $lang = $this->language;		$translationFilename = $dirname.DIRECTORY_SEPARATOR.$lang.'.'.$basename;		if(!@file_exists($translationFilename) && ($basename != 'kickstart.ini')) {			$basename = 'kickstart.ini';			$translationFilename = $dirname.DIRECTORY_SEPARATOR.$lang.'.'.$basename;		}		if(!@file_exists($translationFilename)) return;		$temp = self::parse_ini_file($translationFilename, false);		if(!is_array($this->strings)) $this->strings = array();		if(empty($temp)) {			$this->strings = array_merge($this->default_translation, $this->strings);		} else {			$this->strings = array_merge($this->strings, $temp);		}	}	/**	 * A PHP based INI file parser.	 *	 * Thanks to asohn ~at~ aircanopy ~dot~ net for posting this handy function on	 * the parse_ini_file page on http://gr.php.net/parse_ini_file	 *	 * @param string $file Filename to process	 * @param bool $process_sections True to also process INI sections	 * @return array An associative array of sections, keys and values	 * @access private	 */	public static function parse_ini_file($file, $process_sections = false, $raw_data = false)	{		$process_sections = ($process_sections !== true) ? false : true;		if(!$raw_data)		{			$ini = @file($file);		}		else		{			$ini = $file;		}		if (count($ini) == 0) {return array();}		$sections = array();		$values = array();		$result = array();		$globals = array();		$i = 0;		if(!empty($ini)) foreach ($ini as $line) {			$line = trim($line);			$line = str_replace("\t", " ", $line);			// Comments			if (!preg_match('/^[a-zA-Z0-9[]/', $line)) {continue;}			// Sections			if ($line{0} == '[') {				$tmp = explode(']', $line);				$sections[] = trim(substr($tmp[0], 1));				$i++;				continue;			}			// Key-value pair			list($key, $value) = explode('=', $line, 2);			$key = trim($key);			$value = trim($value);			if (strstr($value, ";")) {				$tmp = explode(';', $value);				if (count($tmp) == 2) {					if ((($value{0} != '"') && ($value{0} != "'")) ||					preg_match('/^".*"\s*;/', $value) || preg_match('/^".*;[^"]*$/', $value) ||					preg_match("/^'.*'\s*;/", $value) || preg_match("/^'.*;[^']*$/", $value) ){						$value = $tmp[0];					}				} else {					if ($value{0} == '"') {						$value = preg_replace('/^"(.*)".*/', '$1', $value);					} elseif ($value{0} == "'") {						$value = preg_replace("/^'(.*)'.*/", '$1', $value);					} else {						$value = $tmp[0];					}				}			}			$value = trim($value);			$value = trim($value, "'\"");			if ($i == 0) {				if (substr($line, -1, 2) == '[]') {					$globals[$key][] = $value;				} else {					$globals[$key] = $value;				}			} else {				if (substr($line, -1, 2) == '[]') {					$values[$i-1][$key][] = $value;				} else {					$values[$i-1][$key] = $value;				}			}		}		for($j = 0; $j < $i; $j++) {			if ($process_sections === true) {				$result[$sections[$j]] = $values[$j];			} else {				$result[] = $values[$j];			}		}		return $result + $globals;	}}/** * The Akeeba Kickstart Factory class * This class is reponssible for instanciating all Akeeba Kicsktart classes */class AKFactory {	/** @var array A list of instanciated objects */	private $objectlist = array();	/** @var array Simple hash data storage */	private $varlist = array();	/** Private constructor makes sure we can't directly instanciate the class */	private function __construct() {}	/**	 * Gets a single, internally used instance of the Factory	 * @param string $serialized_data [optional] Serialized data to spawn the instance from	 * @return AKFactory A reference to the unique Factory object instance	 */	protected static function &getInstance( $serialized_data = null ) {		static $myInstance;		if(!is_object($myInstance) || !is_null($serialized_data))			if(!is_null($serialized_data))			{				$myInstance = unserialize($serialized_data);			}			else			{				$myInstance = new self();			}		return $myInstance;	}	/**	 * Internal function which instanciates a class named $class_name.	 * The autoloader	 * @param object $class_name	 * @return	 */	protected static function &getClassInstance($class_name) {		$self = self::getInstance();		if(!isset($self->objectlist[$class_name]))		{			$self->objectlist[$class_name] = new $class_name;		}		return $self->objectlist[$class_name];	}	// ========================================================================	// Public factory interface	// ========================================================================	/**	 * Gets a serialized snapshot of the Factory for safekeeping (hibernate)	 * @return string The serialized snapshot of the Factory	 */	public static function serialize() {		$engine = self::getUnarchiver();		$engine->shutdown();		$serialized = serialize(self::getInstance());		if(function_exists('base64_encode') && function_exists('base64_decode'))		{			$serialized = base64_encode($serialized);		}		return $serialized;	}	/**	 * Regenerates the full Factory state from a serialized snapshot (resume)	 * @param string $serialized_data The serialized snapshot to resume from	 */	public static function unserialize($serialized_data) {		if(function_exists('base64_encode') && function_exists('base64_decode'))		{			$serialized_data = base64_decode($serialized_data);		}		self::getInstance($serialized_data);	}	/**	 * Reset the internal factory state, freeing all previously created objects	 */	public static function nuke()	{		$self = self::getInstance();		foreach($self->objectlist as $key => $object)		{			$self->objectlist[$key] = null;		}		$self->objectlist = array();	}	// ========================================================================	// Public hash data storage interface	// ========================================================================	public static function set($key, $value)	{		$self = self::getInstance();		$self->varlist[$key] = $value;	}	public static function get($key, $default = null)	{		$self = self::getInstance();		if( array_key_exists($key, $self->varlist) )		{			return $self->varlist[$key];		}		else		{			return $default;		}	}	// ========================================================================	// Akeeba Kickstart classes	// ========================================================================	/**	 * Gets the post processing engine	 * @param string $proc_engine	 */	public static function &getPostProc($proc_engine = null)	{		static $class_name;		if( empty($class_name) )		{			if(empty($proc_engine))			{				$proc_engine = self::get('kickstart.procengine','direct');			}			$class_name = 'AKPostproc'.ucfirst($proc_engine);		}		return self::getClassInstance($class_name);	}	/**	 * Gets the unarchiver engine	 */	public static function &getUnarchiver( $configOverride = null )	{		static $class_name;		if(!empty($configOverride))		{			if($configOverride['reset']) {				$class_name = null;			}		}		if( empty($class_name) )		{			$filetype = self::get('kickstart.setup.filetype', null);			if(empty($filetype))			{				$filename = self::get('kickstart.setup.sourcefile', null);				$basename = basename($filename);				$baseextension = strtoupper(substr($basename,-3));				switch($baseextension)				{					case 'JPA':						$filetype = 'JPA';						break;					case 'JPS':						$filetype = 'JPS';						break;					case 'ZIP':						$filetype = 'ZIP';						break;					default:						die('Invalid archive type or extension in file '.$filename);						break;				}			}			$class_name = 'AKUnarchiver'.ucfirst($filetype);		}		$destdir = self::get('kickstart.setup.destdir', null);		if(empty($destdir))		{			$destdir = function_exists('getcwd') ? getcwd() : dirname(__FILE__);		}		$object = self::getClassInstance($class_name);		if( $object->getState() == 'init')		{			// Initialize the object			$config = array(				'filename'				=> self::get('kickstart.setup.sourcefile', ''),				'restore_permissions'	=> self::get('kickstart.setup.restoreperms', 0),				'post_proc'				=> self::get('kickstart.procengine', 'direct'),				'add_path'				=> $destdir,				'rename_files'			=> array( '.htaccess' => 'htaccess.bak', 'php.ini' => 'php.ini.bak' ),				'skip_files'			=> array( basename(__FILE__), 'kickstart.php', 'abiautomation.ini', 'htaccess.bak', 'php.ini.bak' )			);			if(!defined('KICKSTART'))			{				// In restore.php mode we have to exclude some more files				$config['skip_files'][] = 'administrator/components/com_akeeba/restore.php';				$config['skip_files'][] = 'administrator/components/com_akeeba/restoration.php';			}			if(!empty($configOverride))			{				foreach($configOverride as $key => $value)				{					$config[$key] = $value;				}			}			$object->setup($config);		}		return $object;	}	/**	 * Get the a reference to the Akeeba Engine's timer	 * @return AKCoreTimer	 */	public static function &getTimer()	{		return self::getClassInstance('AKCoreTimer');	}}/** * AES implementation in PHP (c) Chris Veness 2005-2011 * (http://www.movable-type.co.uk/scripts/aes-php.html) * I offer these formul & scripts for free use and adaptation as my contribution to the  * open-source info-sphere from which I have received so much. You are welcome to re-use these  * scripts [under a simple attribution license or a GPL licence, without any warranty express or implied]  * provided solely that you retain my copyright notice and a link to this page. * licence. No warranty of any form is offered. * * Modified for Akeeba Backup by Nicholas K. Dionysopoulos */class AKEncryptionAES{	// Sbox is pre-computed multiplicative inverse in GF(2^8) used in SubBytes and KeyExpansion [5.1.1]	protected static $Sbox =			 array(0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,	               0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,	               0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,	               0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,	               0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,	               0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,	               0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,	               0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,	               0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,	               0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,	               0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,	               0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,	               0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,	               0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,	               0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,	               0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16);	// Rcon is Round Constant used for the Key Expansion [1st col is 2^(r-1) in GF(2^8)] [5.2]	protected static $Rcon = array(				   array(0x00, 0x00, 0x00, 0x00),	               array(0x01, 0x00, 0x00, 0x00),	               array(0x02, 0x00, 0x00, 0x00),	               array(0x04, 0x00, 0x00, 0x00),	               array(0x08, 0x00, 0x00, 0x00),	               array(0x10, 0x00, 0x00, 0x00),	               array(0x20, 0x00, 0x00, 0x00),	               array(0x40, 0x00, 0x00, 0x00),	               array(0x80, 0x00, 0x00, 0x00),	               array(0x1b, 0x00, 0x00, 0x00),	               array(0x36, 0x00, 0x00, 0x00) );	protected static $passwords = array();	/**	 * AES Cipher function: encrypt 'input' with Rijndael algorithm	 *	 * @param input message as byte-array (16 bytes)	 * @param w     key schedule as 2D byte-array (Nr+1 x Nb bytes) -	 *              generated from the cipher key by KeyExpansion()	 * @return      ciphertext as byte-array (16 bytes)	 */	protected static function Cipher($input, $w) {    // main Cipher function [5.1]	  $Nb = 4;                 // block size (in words): no of columns in state (fixed at 4 for AES)	  $Nr = count($w)/$Nb - 1; // no of rounds: 10/12/14 for 128/192/256-bit keys	  $state = array();  // initialise 4xNb byte-array 'state' with input [3.4]	  for ($i=0; $i<4*$Nb; $i++) $state[$i%4][floor($i/4)] = $input[$i];	  $state = self::AddRoundKey($state, $w, 0, $Nb);	  for ($round=1; $round<$Nr; $round++) {  // apply Nr rounds	    $state = self::SubBytes($state, $Nb);	    $state = self::ShiftRows($state, $Nb);	    $state = self::MixColumns($state, $Nb);	    $state = self::AddRoundKey($state, $w, $round, $Nb);	  }	  $state = self::SubBytes($state, $Nb);	  $state = self::ShiftRows($state, $Nb);	  $state = self::AddRoundKey($state, $w, $Nr, $Nb);	  $output = array(4*$Nb);  // convert state to 1-d array before returning [3.4]	  for ($i=0; $i<4*$Nb; $i++) $output[$i] = $state[$i%4][floor($i/4)];	  return $output;	}	protected static function AddRoundKey($state, $w, $rnd, $Nb) {  // xor Round Key into state S [5.1.4]	  for ($r=0; $r<4; $r++) {	    for ($c=0; $c<$Nb; $c++) $state[$r][$c] ^= $w[$rnd*4+$c][$r];	  }	  return $state;	}	protected static function SubBytes($s, $Nb) {    // apply SBox to state S [5.1.1]	  for ($r=0; $r<4; $r++) {	    for ($c=0; $c<$Nb; $c++) $s[$r][$c] = self::$Sbox[$s[$r][$c]];	  }	  return $s;	}	protected static function ShiftRows($s, $Nb) {    // shift row r of state S left by r bytes [5.1.2]	  $t = array(4);	  for ($r=1; $r<4; $r++) {	    for ($c=0; $c<4; $c++) $t[$c] = $s[$r][($c+$r)%$Nb];  // shift into temp copy	    for ($c=0; $c<4; $c++) $s[$r][$c] = $t[$c];         // and copy back	  }          // note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES):	  return $s;  // see fp.gladman.plus.com/cryptography_technology/rijndael/aes.spec.311.pdf	}	protected static function MixColumns($s, $Nb) {   // combine bytes of each col of state S [5.1.3]	  for ($c=0; $c<4; $c++) {	    $a = array(4);  // 'a' is a copy of the current column from 's'	    $b = array(4);  // 'b' is a{02} in GF(2^8)	    for ($i=0; $i<4; $i++) {	      $a[$i] = $s[$i][$c];	      $b[$i] = $s[$i][$c]&0x80 ? $s[$i][$c]<<1 ^ 0x011b : $s[$i][$c]<<1;	    }	    // a[n] ^ b[n] is a{03} in GF(2^8)	    $s[0][$c] = $b[0] ^ $a[1] ^ $b[1] ^ $a[2] ^ $a[3]; // 2*a0 + 3*a1 + a2 + a3	    $s[1][$c] = $a[0] ^ $b[1] ^ $a[2] ^ $b[2] ^ $a[3]; // a0 * 2*a1 + 3*a2 + a3	    $s[2][$c] = $a[0] ^ $a[1] ^ $b[2] ^ $a[3] ^ $b[3]; // a0 + a1 + 2*a2 + 3*a3	    $s[3][$c] = $a[0] ^ $b[0] ^ $a[1] ^ $a[2] ^ $b[3]; // 3*a0 + a1 + a2 + 2*a3	  }	  return $s;	}	/**	 * Key expansion for Rijndael Cipher(): performs key expansion on cipher key	 * to generate a key schedule	 *	 * @param key cipher key byte-array (16 bytes)	 * @return    key schedule as 2D byte-array (Nr+1 x Nb bytes)	 */	protected static function KeyExpansion($key) {  // generate Key Schedule from Cipher Key [5.2]	  $Nb = 4;              // block size (in words): no of columns in state (fixed at 4 for AES)	  $Nk = count($key)/4;  // key length (in words): 4/6/8 for 128/192/256-bit keys	  $Nr = $Nk + 6;        // no of rounds: 10/12/14 for 128/192/256-bit keys	  $w = array();	  $temp = array();	  for ($i=0; $i<$Nk; $i++) {	    $r = array($key[4*$i], $key[4*$i+1], $key[4*$i+2], $key[4*$i+3]);	    $w[$i] = $r;	  }	  for ($i=$Nk; $i<($Nb*($Nr+1)); $i++) {	    $w[$i] = array();	    for ($t=0; $t<4; $t++) $temp[$t] = $w[$i-1][$t];	    if ($i % $Nk == 0) {	      $temp = self::SubWord(self::RotWord($temp));	      for ($t=0; $t<4; $t++) $temp[$t] ^= self::$Rcon[$i/$Nk][$t];	    } else if ($Nk > 6 && $i%$Nk == 4) {	      $temp = self::SubWord($temp);	    }	    for ($t=0; $t<4; $t++) $w[$i][$t] = $w[$i-$Nk][$t] ^ $temp[$t];	  }	  return $w;	}	protected static function SubWord($w) {    // apply SBox to 4-byte word w	  for ($i=0; $i<4; $i++) $w[$i] = self::$Sbox[$w[$i]];	  return $w;	}	protected static function RotWord($w) {    // rotate 4-byte word w left by one byte	  $tmp = $w[0];	  for ($i=0; $i<3; $i++) $w[$i] = $w[$i+1];	  $w[3] = $tmp;	  return $w;	}	/*	 * Unsigned right shift function, since PHP has neither >>> operator nor unsigned ints	 *	 * @param a  number to be shifted (32-bit integer)	 * @param b  number of bits to shift a to the right (0..31)	 * @return   a right-shifted and zero-filled by b bits	 */	protected static function urs($a, $b) {	  $a &= 0xffffffff; $b &= 0x1f;  // (bounds check)	  if ($a&0x80000000 && $b>0) {   // if left-most bit set	    $a = ($a>>1) & 0x7fffffff;   //   right-shift one bit & clear left-most bit	    $a = $a >> ($b-1);           //   remaining right-shifts	  } else {                       // otherwise	    $a = ($a>>$b);               //   use normal right-shift	  }	  return $a;	}	/**	 * Encrypt a text using AES encryption in Counter mode of operation	 *  - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf	 *	 * Unicode multi-byte character safe	 *	 * @param plaintext source text to be encrypted	 * @param password  the password to use to generate a key	 * @param nBits     number of bits to be used in the key (128, 192, or 256)	 * @return          encrypted text	 */	public static function AESEncryptCtr($plaintext, $password, $nBits) {	  $blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES	  if (!($nBits==128 || $nBits==192 || $nBits==256)) return '';  // standard allows 128/192/256 bit keys	  // note PHP (5) gives us plaintext and password in UTF8 encoding!	  // use AES itself to encrypt password to get cipher key (using plain password as source for	  // key expansion) - gives us well encrypted key	  $nBytes = $nBits/8;  // no bytes in key	  $pwBytes = array();	  for ($i=0; $i<$nBytes; $i++) $pwBytes[$i] = ord(substr($password,$i,1)) & 0xff;	  $key = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));	  $key = array_merge($key, array_slice($key, 0, $nBytes-16));  // expand key to 16/24/32 bytes long	  // initialise counter block (NIST SP800-38A B.2): millisecond time-stamp for nonce in	  // 1st 8 bytes, block counter in 2nd 8 bytes	  $counterBlock = array();	  $nonce = floor(microtime(true)*1000);   // timestamp: milliseconds since 1-Jan-1970	  $nonceSec = floor($nonce/1000);	  $nonceMs = $nonce%1000;	  // encode nonce with seconds in 1st 4 bytes, and (repeated) ms part filling 2nd 4 bytes	  for ($i=0; $i<4; $i++) $counterBlock[$i] = self::urs($nonceSec, $i*8) & 0xff;	  for ($i=0; $i<4; $i++) $counterBlock[$i+4] = $nonceMs & 0xff;	  // and convert it to a string to go on the front of the ciphertext	  $ctrTxt = '';	  for ($i=0; $i<8; $i++) $ctrTxt .= chr($counterBlock[$i]);	  // generate key schedule - an expansion of the key into distinct Key Rounds for each round	  $keySchedule = self::KeyExpansion($key);	  $blockCount = ceil(strlen($plaintext)/$blockSize);	  $ciphertxt = array();  // ciphertext as array of strings	  for ($b=0; $b<$blockCount; $b++) {	    // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)	    // done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)	    for ($c=0; $c<4; $c++) $counterBlock[15-$c] = self::urs($b, $c*8) & 0xff;	    for ($c=0; $c<4; $c++) $counterBlock[15-$c-4] = self::urs($b/0x100000000, $c*8);	    $cipherCntr = self::Cipher($counterBlock, $keySchedule);  // -- encrypt counter block --	    // block size is reduced on final block	    $blockLength = $b<$blockCount-1 ? $blockSize : (strlen($plaintext)-1)%$blockSize+1;	    $cipherByte = array();	    for ($i=0; $i<$blockLength; $i++) {  // -- xor plaintext with ciphered counter byte-by-byte --	      $cipherByte[$i] = $cipherCntr[$i] ^ ord(substr($plaintext, $b*$blockSize+$i, 1));	      $cipherByte[$i] = chr($cipherByte[$i]);	    }	    $ciphertxt[$b] = implode('', $cipherByte);  // escape troublesome characters in ciphertext	  }	  // implode is more efficient than repeated string concatenation	  $ciphertext = $ctrTxt . implode('', $ciphertxt);	  $ciphertext = base64_encode($ciphertext);	  return $ciphertext;	}	/**	 * Decrypt a text encrypted by AES in counter mode of operation	 *	 * @param ciphertext source text to be decrypted	 * @param password   the password to use to generate a key	 * @param nBits      number of bits to be used in the key (128, 192, or 256)	 * @return           decrypted text	 */	public static function AESDecryptCtr($ciphertext, $password, $nBits) {	  $blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES	  if (!($nBits==128 || $nBits==192 || $nBits==256)) return '';  // standard allows 128/192/256 bit keys	  $ciphertext = base64_decode($ciphertext);	  // use AES to encrypt password (mirroring encrypt routine)	  $nBytes = $nBits/8;  // no bytes in key	  $pwBytes = array();	  for ($i=0; $i<$nBytes; $i++) $pwBytes[$i] = ord(substr($password,$i,1)) & 0xff;	  $key = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));	  $key = array_merge($key, array_slice($key, 0, $nBytes-16));  // expand key to 16/24/32 bytes long	  // recover nonce from 1st element of ciphertext	  $counterBlock = array();	  $ctrTxt = substr($ciphertext, 0, 8);	  for ($i=0; $i<8; $i++) $counterBlock[$i] = ord(substr($ctrTxt,$i,1));	  // generate key schedule	  $keySchedule = self::KeyExpansion($key);	  // separate ciphertext into blocks (skipping past initial 8 bytes)	  $nBlocks = ceil((strlen($ciphertext)-8) / $blockSize);	  $ct = array();	  for ($b=0; $b<$nBlocks; $b++) $ct[$b] = substr($ciphertext, 8+$b*$blockSize, 16);	  $ciphertext = $ct;  // ciphertext is now array of block-length strings	  // plaintext will get generated block-by-block into array of block-length strings	  $plaintxt = array();	  for ($b=0; $b<$nBlocks; $b++) {	    // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)	    for ($c=0; $c<4; $c++) $counterBlock[15-$c] = self::urs($b, $c*8) & 0xff;	    for ($c=0; $c<4; $c++) $counterBlock[15-$c-4] = self::urs(($b+1)/0x100000000-1, $c*8) & 0xff;	    $cipherCntr = self::Cipher($counterBlock, $keySchedule);  // encrypt counter block	    $plaintxtByte = array();	    for ($i=0; $i<strlen($ciphertext[$b]); $i++) {	      // -- xor plaintext with ciphered counter byte-by-byte --	      $plaintxtByte[$i] = $cipherCntr[$i] ^ ord(substr($ciphertext[$b],$i,1));	      $plaintxtByte[$i] = chr($plaintxtByte[$i]);	    }	    $plaintxt[$b] = implode('', $plaintxtByte);	  }	  // join array of blocks into single plaintext string	  $plaintext = implode('',$plaintxt);	  return $plaintext;	}	/**	 * AES decryption in CBC mode. This is the standard mode (the CTR methods	 * actually use Rijndael-128 in CTR mode, which - technically - isn't AES).	 *	 * Supports AES-128, AES-192 and AES-256. It supposes that the last 4 bytes	 * contained a little-endian unsigned long integer representing the unpadded	 * data length.	 *	 * @since 3.0.1	 * @author Nicholas K. Dionysopoulos	 *	 * @param string $ciphertext The data to encrypt	 * @param string $password Encryption password	 * @param int $nBits Encryption key size. Can be 128, 192 or 256	 * @return string The plaintext	 */	public static function AESDecryptCBC($ciphertext, $password, $nBits = 128)	{		if (!($nBits==128 || $nBits==192 || $nBits==256)) return false;  // standard allows 128/192/256 bit keys		if(!function_exists('mcrypt_module_open')) return false;		// Try to fetch cached key/iv or create them if they do not exist		$lookupKey = $password.'-'.$nBits;		if(array_key_exists($lookupKey, self::$passwords))		{			$key	= self::$passwords[$lookupKey]['key'];			$iv		= self::$passwords[$lookupKey]['iv'];		}		else		{			// use AES itself to encrypt password to get cipher key (using plain password as source for			// key expansion) - gives us well encrypted key			$nBytes = $nBits/8;  // no bytes in key			$pwBytes = array();			for ($i=0; $i<$nBytes; $i++) $pwBytes[$i] = ord(substr($password,$i,1)) & 0xff;			$key = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));			$key = array_merge($key, array_slice($key, 0, $nBytes-16));  // expand key to 16/24/32 bytes long			$newKey = '';			foreach($key as $int) { $newKey .= chr($int); }			$key = $newKey;			// Create an Initialization Vector (IV) based on the password, using the same technique as for the key			$nBytes = 16;  // AES uses a 128 -bit (16 byte) block size, hence the IV size is always 16 bytes			$pwBytes = array();			for ($i=0; $i<$nBytes; $i++) $pwBytes[$i] = ord(substr($password,$i,1)) & 0xff;			$iv = self::Cipher($pwBytes, self::KeyExpansion($pwBytes));			$newIV = '';			foreach($iv as $int) { $newIV .= chr($int); }			$iv = $newIV;			self::$passwords[$lookupKey]['key'] = $key;			self::$passwords[$lookupKey]['iv'] = $iv;		}		// Read the data size		$data_size = unpack('V', substr($ciphertext,-4) );		// Decrypt		$td = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_CBC, '');		mcrypt_generic_init($td, $key, $iv);		$plaintext = mdecrypt_generic($td, substr($ciphertext,0,-4));		mcrypt_generic_deinit($td);		// Trim padding, if necessary		if(strlen($plaintext) > $data_size)		{			$plaintext = substr($plaintext, 0, $data_size);		}		return $plaintext;	}}/** * The Master Setup will read the configuration parameters from restoration.php, abiautomation.ini, or * the JSON-encoded "configuration" input variable and return the status. * @return bool True if the master configuration was applied to the Factory object */function masterSetup(){	// ------------------------------------------------------------	// 1. Import basic setup parameters	// ------------------------------------------------------------	$ini_data = null;	// In restore.php mode, require restoration.php or fail	if(!defined('KICKSTART'))	{		// This is the standalone mode, used by Akeeba Backup Professional. It looks for a restoration.php		// file to perform its magic. If the file is not there, we will abort.		$setupFile = 'restoration.php';		if( !file_exists($setupFile) )		{			// Uh oh... Somebody tried to pooh on our back yard. Lock the gates! Don't let the traitor inside!			AKFactory::set('kickstart.enabled', false);			return false;		}		// Load restoration.php. It creates a global variable named $restoration_setup		require_once $setupFile;		$ini_data = $restoration_setup;		if(empty($ini_data))		{			// No parameters fetched. Darn, how am I supposed to work like that?!			AKFactory::set('kickstart.enabled', false);			return false;		}		AKFactory::set('kickstart.enabled', true);	}	else	{		// Maybe we have $restoration_setup defined in the head of kickstart.php		global $restoration_setup;		if(!empty($restoration_setup) && !is_array($restoration_setup)) {			$ini_data = AKText::parse_ini_file($restoration_setup, false, true);		} elseif(is_array($restoration_setup)) {			$ini_data = $restoration_setup;		}	}	// Import any data from $restoration_setup	if(!empty($ini_data))	{		foreach($ini_data as $key => $value)		{			AKFactory::set($key, $value);		}		AKFactory::set('kickstart.enabled', true);	}	// Reinitialize $ini_data	$ini_data = null;	// ------------------------------------------------------------	// 2. Explode JSON parameters into $_REQUEST scope	// ------------------------------------------------------------	// Detect a JSON string in the request variable and store it.	$json = getQueryParam('json', null);	// Remove everything from the request array	if(!empty($_REQUEST))	{		foreach($_REQUEST as $key => $value)		{			unset($_REQUEST[$key]);		}	}	// Decrypt a possibly encrypted JSON string	if(!empty($json))	{		$password = AKFactory::get('kickstart.security.password', null);		if(!empty($password))		{			$json = AKEncryptionAES::AESDecryptCtr($json, $password, 128);		}		// Get the raw data		$raw = json_decode( $json, true );		// Pass all JSON data to the request array		if(!empty($raw))		{			foreach($raw as $key => $value)			{				$_REQUEST[$key] = $value;			}		}	}	// ------------------------------------------------------------	// 3. Try the "factory" variable	// ------------------------------------------------------------	// A "factory" variable will override all other settings.	$serialized = getQueryParam('factory', null);	if( !is_null($serialized) )	{		// Get the serialized factory		AKFactory::unserialize($serialized);		AKFactory::set('kickstart.enabled', true);		return true;	}	// ------------------------------------------------------------	// 4. Try abiautomation.ini and the configuration variable for Kickstart	// ------------------------------------------------------------	if(defined('KICKSTART'))	{		// We are in Kickstart mode. abiautomation.ini has precedence.		$setupFile = 'abiautomation.ini';		if( file_exists($setupFile) )		{			// abiautomation.ini was found			$ini_data = AKText::parse_ini_file('restoration.ini', false);		}		else		{			// abiautomation.ini was not found. Let's try input parameters.			$configuration = getQueryParam('configuration');			if( !is_null($configuration) )			{				// Let's decode the configuration from JSON to array				$ini_data = json_decode($configuration, true);			}			else			{				// Neither exists. Enable Kickstart's interface anyway.				$ini_data = array('kickstart.enabled'=>true);			}		}		// Import any INI data we might have from other sources		if(!empty($ini_data))		{			foreach($ini_data as $key => $value)			{				AKFactory::set($key, $value);			}			AKFactory::set('kickstart.enabled', true);			return true;		}	}}// Mini-controller for restore.phpif(!defined('KICKSTART')){	// The observer class, used to report number of files and bytes processed	class RestorationObserver extends AKAbstractPartObserver	{		public $compressedTotal = 0;		public $uncompressedTotal = 0;		public $filesProcessed = 0;		public function update($object, $message)		{			if(!is_object($message)) return;			if( !array_key_exists('type', get_object_vars($message)) ) return;			if( $message->type == 'startfile' )			{				$this->filesProcessed++;				$this->compressedTotal += $message->content->compressed;				$this->uncompressedTotal += $message->content->uncompressed;			}		}		public function __toString()		{			return __CLASS__;		}	}	// Import configuration	masterSetup();	$retArray = array(		'status'	=> true,		'message'	=> null	);	$enabled = AKFactory::get('kickstart.enabled', false);	if($enabled)	{		$task = getQueryParam('task');		switch($task)		{			case 'ping':				// ping task - realy does nothing!				$timer = AKFactory::getTimer();				$timer->enforce_min_exec_time();				break;			case 'startRestore':				AKFactory::nuke(); // Reset the factory				// Let the control flow to the next step (the rest of the code is common!!)			case 'stepRestore':				$engine = AKFactory::getUnarchiver(); // Get the engine				$observer = new RestorationObserver(); // Create a new observer				$engine->attach($observer); // Attach the observer				$engine->tick();				$ret = $engine->getStatusArray();				if( $ret['Error'] != '' )				{					$retArray['status'] = false;					$retArray['done'] = true;					$retArray['message'] = $ret['Error'];				}				elseif( !$ret['HasRun'] )				{					$retArray['files'] = $observer->filesProcessed;					$retArray['bytesIn'] = $observer->compressedTotal;					$retArray['bytesOut'] = $observer->uncompressedTotal;					$retArray['status'] = true;					$retArray['done'] = true;				}				else				{					$retArray['files'] = $observer->filesProcessed;					$retArray['bytesIn'] = $observer->compressedTotal;					$retArray['bytesOut'] = $observer->uncompressedTotal;					$retArray['status'] = true;					$retArray['done'] = false;					$retArray['factory'] = AKFactory::serialize();				}				break;			case 'finalizeRestore':				$root = AKFactory::get('kickstart.setup.destdir');				// Remove the installation directory				recursive_remove_directory( $root.'/installation' );				$postproc = AKFactory::getPostProc();				// Rename htaccess.bak to .htaccess				if(file_exists($root.'/htaccess.bak'))				{					if( file_exists($root.'/.htaccess')  )					{						$postproc->unlink($root.'/.htaccess');					}					$postproc->rename( $root.'/htaccess.bak', $root.'/.htaccess' );				}				// Remove restoration.php				$basepath = dirname(__FILE__);				$basepath = rtrim( str_replace('\\','/',$basepath), '/' );				if(!empty($basepath)) $basepath .= '/';				$postproc->unlink( $basepath.'restoration.php' );				break;			default:				// Invalid task!				$enabled = false;				break;		}	}	// Maybe we weren't authorized or the task was invalid?	if(!$enabled)	{		// Maybe the user failed to enter any information		$retArray['status'] = false;		$retArray['message'] = AKText::_('ERR_INVALID_LOGIN');	}	// JSON encode the message	$json = json_encode($retArray);	// Do I have to encrypt?	$password = AKFactory::get('kickstart.security.password', null);	if(!empty($password))	{		$json = AKEncryptionAES::AESEncryptCtr($json, $password, 128);	}	// Return the message	echo "###$json###";}// ------------ lixlpixel recursive PHP functions -------------// recursive_remove_directory( directory to delete, empty )// expects path to directory and optional TRUE / FALSE to empty// of course PHP has to have the rights to delete the directory// you specify and all files and folders inside the directory// ------------------------------------------------------------function recursive_remove_directory($directory){	// if the path has a slash at the end we remove it here	if(substr($directory,-1) == '/')	{		$directory = substr($directory,0,-1);	}	// if the path is not valid or is not a directory ...	if(!file_exists($directory) || !is_dir($directory))	{		// ... we return false and exit the function		return FALSE;	// ... if the path is not readable	}elseif(!is_readable($directory))	{		// ... we return false and exit the function		return FALSE;	// ... else if the path is readable	}else{		// we open the directory		$handle = opendir($directory);		$postproc = AKFactory::getPostProc();		// and scan through the items inside		while (FALSE !== ($item = readdir($handle)))		{			// if the filepointer is not the current directory			// or the parent directory			if($item != '.' && $item != '..')			{				// we build the new path to delete				$path = $directory.'/'.$item;				// if the new path is a directory				if(is_dir($path))				{					// we call this function with the new path					recursive_remove_directory($path);				// if the new path is a file				}else{					// we remove the file					$postproc->unlink($path);				}			}		}		// close the directory		closedir($handle);		// try to delete the now empty directory		if(!$postproc->rmdir($directory))		{			// return false if not possible			return FALSE;		}		// return success		return TRUE;	}}?>
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_no($module, &$params, &$attribs){	if ($module->content)	{		echo $module->content;	}}function modChrome_well($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"well " . htmlspecialchars($params->get('moduleclass_sfx')) . "\">";		if ($module->showtitle)		{			echo "<h3 class=\"page-header\">" . $module->title . "</h3>";		}		echo $module->content;		echo "</div>";	}}?>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Namespace interface. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */interface JFeedParserNamespace{	/**	 * Method to handle an element for the feed given that a certain namespace is present.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeed(JFeed $feed, SimpleXMLElement $el);	/**	 * Method to handle the feed entry element for the feed given that a certain namespace is present.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeedEntry(JFeedEntry $entry, SimpleXMLElement $el);}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed factory class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedFactory{	/**	 * @var    array  The list of registered parser classes for feeds.	 * @since  12.3	 */	protected $parsers = array('rss' => 'JFeedParserRss', 'feed' => 'JFeedParserAtom');	/**	 * Method to load a URI into the feed reader for parsing.	 *	 * @param   string  $uri  The URI of the feed to load.	 *	 * @return  JFeedReader	 *	 * @since   12.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function getFeed($uri)	{		// Create the XMLReader object.		$reader = new XMLReader;		// Open the URI within the stream reader.		if (!$reader->open($uri, null, LIBXML_NOERROR | LIBXML_ERR_NONE | LIBXML_NOWARNING))		{			throw new RuntimeException('Unable to open the feed.');		}		try		{			// Skip ahead to the root node.			do			{				$reader->read();			}			while ($reader->nodeType !== XMLReader::ELEMENT);		}		catch (Exception $e)		{			throw new RuntimeException('Error reading feed.');		}		// Setup the appopriate feed parser for the feed.		$parser = $this->_fetchFeedParser($reader->name, $reader);		return $parser->parse();	}	/**	 * Method to register a JFeedParser class for a given root tag name.	 *	 * @param   string   $tagName    The root tag name for which to register the parser class.	 * @param   string   $className  The JFeedParser class name to register for a root tag name.	 * @param   boolean  $overwrite  True to overwrite the parser class if one is already registered.	 *	 * @return  JFeedFactory	 *	 * @since   12.3	 * @throws  InvalidArgumentException	 */	public function registerParser($tagName, $className, $overwrite = false)	{		// Verify that the class exists.		if (!class_exists($className))		{			throw new InvalidArgumentException('The feed parser class ' . $className . ' does not exist.');		}		// Validate that the tag name is valid.		if (!preg_match('/\A(?!XML)[a-z][\w0-9-]*/i', $tagName))		{			throw new InvalidArgumentException('The tag name ' . $tagName . ' is not valid.');		}		// Register the given parser class for the tag name if nothing registered or the overwrite flag set.		if (empty($this->parsers[$tagName]) || (bool) $overwrite)		{			$this->parsers[(string) $tagName] = (string) $className;		}		return $this;	}	/**	 * Method to return a new JFeedParser object based on the registered parsers and a given type.	 *	 * @param   string     $type    The name of parser to return.	 * @param   XMLReader  $reader  The XMLReader instance for the feed.	 *	 * @return  JFeedParser	 *	 * @since   12.3	 * @throws  LogicException	 */	private function _fetchFeedParser($type, XMLReader $reader)	{		// Look for a registered parser for the feed type.		if (empty($this->parsers[$type]))		{			throw new LogicException('No registered feed parser for type ' . $type . '.');		}		return new $this->parsers[$type]($reader);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user      = JFactory::getUser();$userId    = $user->get('id');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$canOrder  = $user->authorise('core.edit.state', 'com_banners.category');$saveOrder = $listOrder == 'ordering';?><form action="<?php echo JRoute::_('index.php?option=com_banners&view=banners'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('Banners_Search_in_title'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_state">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true);?>			</select>			<label class="selectlabel" for="filter_client_id">				<?php echo JText::_('COM_BANNERS_SELECT_CLIENT'); ?>			</label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value=""><?php echo JText::_('COM_BANNERS_SELECT_CLIENT');?></option>				<?php echo JHtml::_('select.options', BannersHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_banners'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_NAME', 'name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'state', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_STICKY', 'sticky', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLIENT', 'client_name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) : ?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'banners.saveorder'); ?>					<?php endif;?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_IMPRESSIONS', 'impmade', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-10">					<?php echo JHtml::_('grid.sort', 'COM_BANNERS_HEADING_CLICKS', 'clicks', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JText::_('COM_BANNERS_HEADING_METAKEYWORDS'); ?>				</th>				<th class="width-10">					<?php echo JText::_('COM_BANNERS_HEADING_PURCHASETYPE'); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$ordering   = ($listOrder == 'ordering');			$item->cat_link = JRoute::_('index.php?option=com_categories&extension=com_banners&task=edit&type=other&cid[]=' . $item->catid);			$canCreate  = $user->authorise('core.create',     'com_banners.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_banners.category.' . $item->catid);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_banners.category.' . $item->catid) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'banners.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_banners&task=banner.edit&id='.(int) $item->id); ?>">							<?php echo $this->escape($item->name); ?></a>					<?php else : ?>							<?php echo $this->escape($item->name); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'banners.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo JHtml::_('banner.pinned', $item->sticky, $i, $canChange);?>				</td>				<td class="center">					<?php echo $item->client_name;?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) : ?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->catid == $item->catid), 'banners.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->catid == $item->catid), 'banners.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, (@$this->items[$i - 1]->catid == $item->catid), 'banners.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, (@$this->items[$i + 1]->catid == $item->catid), 'banners.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering;?>" <?php echo $disabled; ?> class="text-area-order" title="<?php echo $item->name; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo JText::sprintf('COM_BANNERS_IMPRESSIONS', $item->impmade, $item->imptotal ? $item->imptotal : JText::_('COM_BANNERS_UNLIMITED'));?>				</td>				<td class="center">					<?php echo $item->clicks;?> -					<?php echo sprintf('%.2f%%', $item->impmade ? 100 * $item->clicks / $item->impmade : 0);?>				</td>				<td>					<?php echo $item->metakey; ?>				</td>				<td class="center">					<?php if ($item->purchase_type < 0):?>						<?php echo JText::sprintf('COM_BANNERS_DEFAULT', ($item->client_purchase_type > 0) ? JText::_('COM_BANNERS_FIELD_VALUE_'.$item->client_purchase_type) : JText::_('COM_BANNERS_FIELD_VALUE_'.$this->state->params->get('purchase_type')));?>					<?php else:?>						<?php echo JText::_('COM_BANNERS_FIELD_VALUE_'.$item->purchase_type);?>					<?php endif;?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div class="clr"> </div>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			JError::raiseError(404, JText::_('COM_CONTENT_ERROR_CATEGORY_NOT_FOUND'));			return false;		}		if ($parent == false)		{			JError::raiseError(404, JText::_('COM_CONTENT_ERROR_PARENT_CATEGORY_NOT_FOUND'));			return false;		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items  = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Message configuration model. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesModelConfig extends JModelForm{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app	= JFactory::getApplication('administrator');		$user	= JFactory::getUser();		$this->setState('user.id', $user->get('id'));		// Load the parameters.		$params	= JComponentHelper::getParams('com_messages');		$this->setState('params', $params);	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function &getItem()	{		$item = new JObject;		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('cfg_name, cfg_value')			->from('#__messages_cfg')			->where('user_id = '.(int) $this->getState('user.id'));		$db->setQuery($query);		try		{			$rows = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		foreach ($rows as $row)		{			$item->set($row->cfg_name, $row->cfg_value);		}		$this->preprocessData('com_messages.config', $item);		return $item;	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_messages.config', 'config', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 */	public function save($data)	{		$db = $this->getDbo();		if ($userId = (int) $this->getState('user.id'))		{			$db->setQuery(				'DELETE FROM #__messages_cfg'.				' WHERE user_id = '. $userId			);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}			$tuples = array();			foreach ($data as $k => $v)			{				$tuples[] = '(' . $userId.', ' . $db->quote($k) . ', ' . $db->quote($v) . ')';			}			if ($tuples)			{				$db->setQuery(					'INSERT INTO #__messages_cfg'.					' (user_id, cfg_name, cfg_value)'.					' VALUES '.implode(',', $tuples)				);				try				{				$db->execute();				}				catch (RuntimeException $e)				{					$this->setError($e->getMessage());					return false;				}			}			return true;		}		else		{			$this->setError('COM_MESSAGES_ERR_INVALID_USER');			return false;		}	}}
<?php/** * @package    Joomla.Site * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Application class * * Provide many supporting API functions * * @package     Joomla.Site * @subpackage  Application * @since       1.5 */final class JSite extends JApplication{	/**	 * Currently active template	 * @var object	 */	private $template = null;	/**	 * Option to filter by language	 */	private $_language_filter = false;	/**	 * Option to detect language by the browser	 */	private $_detect_browser = false;	/**	 * Class constructor	 *	 * @param   array An optional associative array of configuration settings.	 *                Recognized key values include 'clientId' (this list is not meant to be comprehensive).	 */	public function __construct($config = array())	{		$config['clientId'] = 0;		parent::__construct($config);	}	/**	 * Initialise the application.	 *	 * @param   array	 */	public function initialise($options = array())	{		$config = JFactory::getConfig();		$user = JFactory::getUser();		// If the user is a guest we populate it with the guest user group.		if ($user->guest)		{			$guestUsergroup = JComponentHelper::getParams('com_users')->get('guest_usergroup', 1);			$user->groups = array($guestUsergroup);		}		// if a language was specified it has priority		// otherwise use user or default language settings		JPluginHelper::importPlugin('system', 'languagefilter');		if (empty($options['language']))		{			$lang = $this->input->getString('language', null);			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if ($this->_language_filter && empty($options['language']))		{			// Detect cookie language			$lang = $this->input->getString(self::getHash('language'), null, 'cookie');			// Make sure that the user's language exists			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if (empty($options['language']))		{			// Detect user language			$lang = $user->getParam('language');			// Make sure that the user's language exists			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if ($this->_detect_browser && empty($options['language']))		{			// Detect browser language			$lang = JLanguageHelper::detectLanguage();			// Make sure that the user's language exists			if ($lang && JLanguage::exists($lang))			{				$options['language'] = $lang;			}		}		if (empty($options['language']))		{			// Detect default language			$params = JComponentHelper::getParams('com_languages');			$client = JApplicationHelper::getClientInfo($this->getClientId());			$options['language'] = $params->get($client->name, $config->get('language', 'en-GB'));		}		// One last check to make sure we have something		if (!JLanguage::exists($options['language']))		{			$lang = $config->get('language', 'en-GB');			if (JLanguage::exists($lang))			{				$options['language'] = $lang;			}			else			{				$options['language'] = 'en-GB'; // as a last ditch fail to english			}		}		// Execute the parent initialise method.		parent::initialise($options);		// Load Library language		$lang = JFactory::getLanguage();		// Try the lib_joomla file in the current language (without allowing the loading of the file in the default language)		$lang->load('lib_joomla', JPATH_SITE, null, false, false)			|| $lang->load('lib_joomla', JPATH_ADMINISTRATOR, null, false, false)			// Fallback to the lib_joomla file in the default language			|| $lang->load('lib_joomla', JPATH_SITE, null, true)			|| $lang->load('lib_joomla', JPATH_ADMINISTRATOR, null, true);	}	/**	 * Route the application.	 *	 */	public function route()	{		parent::route();		$Itemid = $this->input->getInt('Itemid');		$this->authorise($Itemid);	}	/**	 * Dispatch the application	 *	 * @param   string	 */	public function dispatch($component = null)	{		// Get the component if not set.		if (!$component)		{			$component = $this->input->get('option');		}		$document = JFactory::getDocument();		$user = JFactory::getUser();		$router = $this->getRouter();		$params = $this->getParams();		switch ($document->getType())		{			case 'html':				// Get language				$lang_code = JFactory::getLanguage()->getTag();				$languages = JLanguageHelper::getLanguages('lang_code');				// Set metadata				if (isset($languages[$lang_code]) && $languages[$lang_code]->metakey)				{					$document->setMetaData('keywords', $languages[$lang_code]->metakey);				}				else				{					$document->setMetaData('keywords', $this->getCfg('MetaKeys'));				}				$document->setMetaData('rights', $this->getCfg('MetaRights'));				if ($router->getMode() == JROUTER_MODE_SEF)				{					$document->setBase(htmlspecialchars(JURI::current()));				}				break;			case 'feed':				$document->setBase(htmlspecialchars(JURI::current()));				break;		}		$document->setTitle($params->get('page_title'));		$document->setDescription($params->get('page_description'));		// Add version number or not based on global configuration		if ($this->getCfg('MetaVersion', 0))		{			$document->setGenerator('Joomla! - Open Source Content Management  - Version ' . JVERSION);		}		else		{			$document->setGenerator('Joomla! - Open Source Content Management');		}		$contents = JComponentHelper::renderComponent($component);		$document->setBuffer($contents, 'component');		// Trigger the onAfterDispatch event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterDispatch');	}	/**	 * Display the application.	 */	public function render()	{		$document = JFactory::getDocument();		$user = JFactory::getUser();		// get the format to render		$format = $document->getType();		switch ($format)		{			case 'feed':				$params = array();				break;			case 'html':			default:				$template = $this->getTemplate(true);				$file = $this->input->get('tmpl', 'index');				if (!$this->getCfg('offline') && ($file == 'offline'))				{					$file = 'index';				}				if ($this->getCfg('offline') && !$user->authorise('core.login.offline'))				{					$uri = JURI::getInstance();					$return = (string) $uri;					$this->setUserState('users.login.form.data', array('return' => $return));					$file = 'offline';					JResponse::setHeader('Status', '503 Service Temporarily Unavailable', 'true');				}				if (!is_dir(JPATH_THEMES . '/' . $template->template) && !$this->getCfg('offline'))				{					$file = 'component';				}				$params = array(					'template' => $template->template,					'file' => $file . '.php',					'directory' => JPATH_THEMES,					'params' => $template->params				);				break;		}		// Parse the document.		$document = JFactory::getDocument();		$document->parse($params);		// Trigger the onBeforeRender event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onBeforeRender');		$caching = false;		if ($this->getCfg('caching') && $this->getCfg('caching', 2) == 2 && !$user->get('id'))		{			$caching = true;		}		// Render the document.		JResponse::setBody($document->render($caching, $params));		// Trigger the onAfterRender event.		$this->triggerEvent('onAfterRender');	}	/**	 * Login authentication function	 *	 * @param   array  Array('username' => string, 'password' => string)	 * @param   array  Array('remember' => boolean)	 *	 * @see JApplication::login	 */	public function login($credentials, $options = array())	{		// Set the application login entry point		if (!array_key_exists('entry_url', $options))		{			$options['entry_url'] = JURI::base() . 'index.php?option=com_users&task=user.login';		}		// Set the access control action to check.		$options['action'] = 'core.login.site';		return parent::login($credentials, $options);	}	/**	 * Check if the user can access the application	 */	public function authorise($itemid)	{		$menus = $this->getMenu();		$user = JFactory::getUser();		if (!$menus->authorise($itemid))		{			if ($user->get('id') == 0)			{				// Redirect to login				$uri = JURI::getInstance();				$return = (string) $uri;				$this->setUserState('users.login.form.data', array('return' => $return));				$url = 'index.php?option=com_users&view=login';				$url = JRoute::_($url, false);				$this->redirect($url, JText::_('JGLOBAL_YOU_MUST_LOGIN_FIRST'));			}			else			{				JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			}		}	}	/**	 * Get the appliaction parameters	 *	 * @param   string    The component option	 * @return  object  The parameters object	 * @since   1.5	 */	public function getParams($option = null)	{		static $params = array();		$hash = '__default';		if (!empty($option))		{			$hash = $option;		}		if (!isset($params[$hash]))		{			// Get component parameters			if (!$option)			{				$option = $this->input->get('option');			}			// Get new instance of component global parameters			$params[$hash] = clone JComponentHelper::getParams($option);			// Get menu parameters			$menus = $this->getMenu();			$menu = $menus->getActive();			// Get language			$lang_code = JFactory::getLanguage()->getTag();			$languages = JLanguageHelper::getLanguages('lang_code');			$title = $this->getCfg('sitename');			if (isset($languages[$lang_code]) && $languages[$lang_code]->metadesc)			{				$description = $languages[$lang_code]->metadesc;			}			else			{				$description = $this->getCfg('MetaDesc');			}			$rights = $this->getCfg('MetaRights');			$robots = $this->getCfg('robots');			// Lets cascade the parameters if we have menu item parameters			if (is_object($menu))			{				$temp = new JRegistry;				$temp->loadString($menu->params);				$params[$hash]->merge($temp);				$title = $menu->title;			}			else			{				// get com_menu global settings				$temp = clone JComponentHelper::getParams('com_menus');				$params[$hash]->merge($temp);				// if supplied, use page title				$title = $temp->get('page_title', $title);			}			$params[$hash]->def('page_title', $title);			$params[$hash]->def('page_description', $description);			$params[$hash]->def('page_rights', $rights);			$params[$hash]->def('robots', $robots);		}		return $params[$hash];	}	/**	 * Get the application parameters	 *	 * @param   string    The component option	 *	 * @return  object  The parameters object	 * @since   1.5	 */	public function getPageParameters($option = null)	{		return $this->getParams($option);	}	/**	 * Get the template	 *	 * @return  string The template name	 * @since 1.0	 */	public function getTemplate($params = false)	{		if (is_object($this->template))		{			if (!file_exists(JPATH_THEMES . '/' . $this->template->template . '/index.php'))			{				throw new InvalidArgumentException(JText::sprintf('JERROR_COULD_NOT_FIND_TEMPLATE', $this->template->template));			}			if ($params)			{				return $this->template;			}			return $this->template->template;		}		// Get the id of the active menu item		$menu = $this->getMenu();		$item = $menu->getActive();		if (!$item)		{			$item = $menu->getItem($this->input->getInt('Itemid'));		}		$id = 0;		if (is_object($item))		{ // valid item retrieved			$id = $item->template_style_id;		}		$condition = '';		$tid = $this->input->get('templateStyle', 0, 'uint');		if (is_numeric($tid) && (int) $tid > 0)		{			$id = (int) $tid;		}		$cache = JFactory::getCache('com_templates', '');		if ($this->_language_filter)		{			$tag = JFactory::getLanguage()->getTag();		}		else		{			$tag = '';		}		if (!$templates = $cache->get('templates0' . $tag))		{			// Load styles			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('id, home, template, s.params')				->from('#__template_styles as s')				->where('s.client_id = 0')				->where('e.enabled = 1')				->join('LEFT', '#__extensions as e ON e.element=s.template AND e.type=' . $db->quote('template') . ' AND e.client_id=s.client_id');			$db->setQuery($query);			$templates = $db->loadObjectList('id');			foreach ($templates as &$template)			{				$registry = new JRegistry;				$registry->loadString($template->params);				$template->params = $registry;				// Create home element				//sqlsrv change				if ($template->home == 1 && !isset($templates[0]) || $this->_language_filter && $template->home == $tag)				{					$templates[0] = clone $template;				}			}			$cache->store($templates, 'templates0' . $tag);		}		if (isset($templates[$id]))		{			$template = $templates[$id];		}		else		{			$template = $templates[0];		}		// Allows for overriding the active template from the request		$template->template = $this->input->get('template', $template->template);		$template->template = JFilterInput::getInstance()->clean($template->template, 'cmd'); // need to filter the default value as well		// Fallback template		if (!file_exists(JPATH_THEMES . '/' . $template->template . '/index.php'))		{			$this->enqueueMessage(JText::_('JERROR_ALERTNOTEMPLATE'), 'error');			// try to find data for 'beez3' template			$original_tmpl = $template->template;			foreach ($templates as $tmpl)			{				if ($tmpl->template == 'beez3')				{					$template = $tmpl;					break;				}			}			// check, the data were found and if template really exists			if (!file_exists(JPATH_THEMES . '/' . $template->template . '/index.php'))			{				throw new InvalidArgumentException(JText::sprintf('JERROR_COULD_NOT_FIND_TEMPLATE', $original_tmpl));			}		}		$this->template = $template;		if ($params)		{			return $template;		}		return $template->template;	}	/**	 * Overrides the default template that would be used	 *	 * @param string       The template name	 * @param mixed        The template style parameters	 */	public function setTemplate($template, $styleParams = null)	{		if (is_dir(JPATH_THEMES . '/' . $template))		{			$this->template = new stdClass;			$this->template->template = $template;			if ($styleParams instanceof JRegistry)			{				$this->template->params = $styleParams;			}			else			{				$this->template->params = new JRegistry($styleParams);			}		}	}	/**	 * Return a reference to the JPathway object.	 *	 * @param   string    $name        The name of the application/client.	 * @param   array     $options     An optional associative array of configuration settings.	 *	 * @return  object  JMenu.	 * @since   1.5	 */	public function getMenu($name = null, $options = array())	{		$options = array();		$menu = parent::getMenu('site', $options);		return $menu;	}	/**	 * Return a reference to the JPathway object.	 *	 * @param   string    $name        The name of the application.	 * @param   array     $options     An optional associative array of configuration settings.	 *	 * @return  object JPathway.	 * @since   1.5	 */	public function getPathway($name = null, $options = array())	{		$options = array();		$pathway = parent::getPathway('site', $options);		return $pathway;	}	/**	 * Return a reference to the JRouter object.	 *	 * @param   string    $name        The name of the application.	 * @param   array     $options     An optional associative array of configuration settings.	 *	 * @return  JRouter	 * @since   1.5	 */	static public function getRouter($name = null, array $options = array())	{		$config = JFactory::getConfig();		$options['mode'] = $config->get('sef');		$router = parent::getRouter('site', $options);		return $router;	}	/**	 * Return the current state of the language filter.	 *	 * @return  boolean	 * @since   1.6	 */	public function getLanguageFilter()	{		return $this->_language_filter;	}	/**	 * Set the current state of the language filter.	 *	 * @return  boolean  The old state	 * @since   1.6	 */	public function setLanguageFilter($state = false)	{		$old = $this->_language_filter;		$this->_language_filter = $state;		return $old;	}	/**	 * Return the current state of the detect browser option.	 *	 * @return  boolean	 * @since   1.6	 */	public function getDetectBrowser()	{		return $this->_detect_browser;	}	/**	 * Set the current state of the detect browser option.	 *	 * @return  boolean  The old state	 * @since   1.6	 */	public function setDetectBrowser($state = false)	{		$old = $this->_detect_browser;		$this->_detect_browser = $state;		return $old;	}	/**	 * Redirect to another URL.	 *	 * Optionally enqueues a message in the system message queue (which will be displayed	 * the next time a page is loaded) using the enqueueMessage method. If the headers have	 * not been sent the redirect will be accomplished using a "301 Moved Permanently"	 * code in the header pointing to the new location. If the headers have already been	 * sent this will be accomplished using a JavaScript statement.	 *	 * @param   string     The URL to redirect to. Can only be http/https URL	 * @param   string     An optional message to display on redirect.	 * @param   string     An optional message type.	 * @param   boolean    True if the page is 301 Permanently Moved, otherwise 303 See Other is assumed.	 * @param   boolean    True if the enqueued messages are passed to the redirection, false else.	 * @return  none; calls exit().	 * @since   1.5	 * @see     JApplication::enqueueMessage()	 */	public function redirect($url, $msg = '', $msgType = 'message', $moved = false, $persistMsg = true)	{		if (!$persistMsg)		{			$this->_messageQueue = array();		}		parent::redirect($url, $msg, $msgType, $moved);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with directory * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */abstract class JHtmlDirectory{	/**	 * Method to generate a (un)writable message for directory	 *	 * @param   boolean	$writable is the directory writable?	 *	 * @return  string	html code	 */	public static function writable($writable)	{		if ($writable)		{			return '<span class="badge badge-success">'. JText::_('COM_ADMIN_WRITABLE') .'</span>';		}		else		{			return '<span class="badge badge-important">'. JText::_('COM_ADMIN_UNWRITABLE') .'</span>';		}	}	/**	 * Method to generate a message for a directory	 *	 * @param   string	$dir the directory	 * @param   boolean	$message the message	 * @param   boolean	$visible is the $dir visible?	 *	 * @return  string	html code	 */	public static function message($dir, $message, $visible=true)	{		if ($visible)		{			$output = $dir;		}		else		{			$output = '';		}		if (empty($message))		{			return $output;		}		else		{			return $output.' <strong>'.JText::_($message).'</strong>';		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Menu List Controller * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusControllerMenus extends JControllerLegacy{	/**	 * Display the view	 *	 * @param   boolean            If true, the view output will be cached	 * @param   array              An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController        This object to support chaining.	 * @since   1.6	 */	public function display($cachable = false, $urlparams = false)	{	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Menu', $prefix = 'MenusModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Removes an item	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get items to remove from the request.		$cid = $this->input->get('cid', array(), 'array');		if (!is_array($cid) || count($cid) < 1)		{			JError::raiseWarning(500, JText::_('COM_MENUS_NO_MENUS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Make sure the item ids are integers			jimport('joomla.utilities.arrayhelper');			JArrayHelper::toInteger($cid);			// Remove the items.			if (!$model->delete($cid))			{				$this->setMessage($model->getError());			}			else			{				$this->setMessage(JText::plural('COM_MENUS_N_MENUS_DELETED', count($cid)));			}		}		$this->setRedirect('index.php?option=com_menus&view=menus');	}	/**	 * Rebuild the menu tree.	 *	 * @return  bool    False on failure or error, true on success.	 */	public function rebuild()	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$this->setRedirect('index.php?option=com_menus&view=menus');		$model = $this->getModel('Item');		if ($model->rebuild())		{			// Reorder succeeded.			$this->setMessage(JText::_('JTOOLBAR_REBUILD_SUCCESS'));			return true;		}		else		{			// Rebuild failed.			$this->setMessage(JText::sprintf('JTOOLBAR_REBUILD_FAILED', $model->getMessage()));			return false;		}	}	/**	 * Temporary method. This should go into the 1.5 to 1.6 upgrade routines.	 */	public function resync()	{		$db = JFactory::getDbo();		$parts = null;		try		{			// Load a lookup table of all the component id's.			$components = $db->setQuery(				'SELECT element, extension_id' .					' FROM #__extensions' .					' WHERE type = ' . $db->quote('component')			)->loadAssocList('element', 'extension_id');		}		catch (RuntimeException $e)		{			return JError::raiseWarning(500, $e->getMessage());		}		try		{			// Load all the component menu links			$query = $db->getQuery(true)				->select($db->quoteName('id'))				->select($db->quoteName('link'))				->select($db->quoteName('component_id'))				->from('#__menu')				->where($db->quoteName('type') . ' = ' . $db->quote('component.item'));			$db->setQuery($query);			$items = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return JError::raiseWarning(500, $e->getMessage());		}		foreach ($items as $item)		{			// Parse the link.			parse_str(parse_url($item->link, PHP_URL_QUERY), $parts);			// Tease out the option.			if (isset($parts['option']))			{				$option = $parts['option'];				// Lookup the component ID				if (isset($components[$option]))				{					$componentId = $components[$option];				}				else				{					// Mismatch. Needs human intervention.					$componentId = -1;				}				// Check for mis-matched component id's in the menu link.				if ($item->component_id != $componentId)				{					// Update the menu table.					$log = "Link $item->id refers to $item->component_id, converting to $componentId ($item->link)";					echo "<br/>$log";					try					{						$db->setQuery(							'UPDATE #__menu' .								' SET component_id = ' . $componentId .								' WHERE id = ' . $item->id						)->execute();					}					catch (RuntimeException $e)					{						return JError::raiseWarning(500, $e->getMessage());					}					//echo "<br>".$db->getQuery();				}			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt *//* add accessibility, labels on input forms */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_content.article');$saveOrder	= $listOrder == 'fp.ordering';$n			= count($this->items);?><form action="<?php echo JRoute::_('index.php?option=com_content&view=featured'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true); ?>			</select>			<label class="selectlabel" for="filter_category_id"><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id')); ?>			</select>			<label class="selectlabel" for="filter_level"><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></label>			<select name="filter_level" class="inputbox" id="filter_level">				<option value=""><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></option>				<?php echo JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level')); ?>			</select>			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access')); ?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language')); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'fp.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'featured.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th class="title created-by-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th class="hits-col">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php		foreach ($this->items as $i => $item) :			$item->max_ordering = 0; //??			$ordering   = ($listOrder == 'fp.ordering');			$assetId    = 'com_content.article.' . $item->id;			$canCreate  = $user->authorise('core.create',     'com_content.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_content.article.' . $item->id);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_content.article.' . $item->id) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'featured.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_content&task=article.edit&return=featured&id='.$item->id);?>">						<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias)); ?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'articles.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) : ?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'featured.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'featured.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering; ?>" <?php echo $disabled; ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php if ($item->created_by_alias) : ?>						<?php echo $this->escape($item->author_name); ?>						<p class="smallsub"> <?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->created_by_alias)); ?></p>					<?php else : ?>						<?php echo $this->escape($item->author_name); ?>					<?php endif; ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->hits; ?>				</td>				<td class="center">					<?php if ($item->language == '*') : ?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else : ?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table><?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Filter * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JFilterInput is a class for filtering input from any data source * * Forked from the php input filter library by: Daniel Morris <dan@rootcube.com> * Original Contributors: Gianpaolo Racca, Ghislain Picard, Marco Wandschneider, Chris Tobin and Andrew Eddie. * * @package     Joomla.Platform * @subpackage  Filter * @since       11.1 */class JFilterInput{	/**	 * @var    array  A container for JFilterInput instances.	 * @since  11.3	 */	protected static $instances = array();	/**	 * @var    array  An array of permitted tags.	 * @since  11.1	 */	public $tagsArray;	/**	 * @var    array  An array of permitted tag attributes.	 * @since  11.1	 */	public $attrArray;	/**	 * @var    integer  Method for tags: WhiteList method = 0 (default), BlackList method = 1	 * @since  11.1	 */	public $tagsMethod;	/**	 * @var    integer  Method for attributes: WhiteList method = 0 (default), BlackList method = 1	 * @since  11.1	 */	public $attrMethod;	/**	 * @var    integer  Only auto clean essentials = 0, Allow clean blacklisted tags/attr = 1	 * @since  11.1	 */	public $xssAuto;	/**	 * @var    array  A list of the default blacklisted tags.	 * @since  11.1	 */	public $tagBlacklist = array(		'applet',		'body',		'bgsound',		'base',		'basefont',		'embed',		'frame',		'frameset',		'head',		'html',		'id',		'iframe',		'ilayer',		'layer',		'link',		'meta',		'name',		'object',		'script',		'style',		'title',		'xml'	);	/**	 * @var    array     A list of the default blacklisted tag attributes.  All event handlers implicit.	 * @since   11.1	 */	public $attrBlacklist = array(		'action',		'background',		'codebase',		'dynsrc',		'lowsrc'	);	/**	 * Constructor for inputFilter class. Only first parameter is required.	 *	 * @param   array    $tagsArray   List of user-defined tags	 * @param   array    $attrArray   List of user-defined attributes	 * @param   integer  $tagsMethod  WhiteList method = 0, BlackList method = 1	 * @param   integer  $attrMethod  WhiteList method = 0, BlackList method = 1	 * @param   integer  $xssAuto     Only auto clean essentials = 0, Allow clean blacklisted tags/attr = 1	 *	 * @since   11.1	 */	public function __construct($tagsArray = array(), $attrArray = array(), $tagsMethod = 0, $attrMethod = 0, $xssAuto = 1)	{		// Make sure user defined arrays are in lowercase		$tagsArray = array_map('strtolower', (array) $tagsArray);		$attrArray = array_map('strtolower', (array) $attrArray);		// Assign member variables		$this->tagsArray = $tagsArray;		$this->attrArray = $attrArray;		$this->tagsMethod = $tagsMethod;		$this->attrMethod = $attrMethod;		$this->xssAuto = $xssAuto;	}	/**	 * Returns an input filter object, only creating it if it doesn't already exist.	 *	 * @param   array    $tagsArray   List of user-defined tags	 * @param   array    $attrArray   List of user-defined attributes	 * @param   integer  $tagsMethod  WhiteList method = 0, BlackList method = 1	 * @param   integer  $attrMethod  WhiteList method = 0, BlackList method = 1	 * @param   integer  $xssAuto     Only auto clean essentials = 0, Allow clean blacklisted tags/attr = 1	 *	 * @return  JFilterInput  The JFilterInput object.	 *	 * @since   11.1	 */	public static function &getInstance($tagsArray = array(), $attrArray = array(), $tagsMethod = 0, $attrMethod = 0, $xssAuto = 1)	{		$sig = md5(serialize(array($tagsArray, $attrArray, $tagsMethod, $attrMethod, $xssAuto)));		if (empty(self::$instances[$sig]))		{			self::$instances[$sig] = new JFilterInput($tagsArray, $attrArray, $tagsMethod, $attrMethod, $xssAuto);		}		return self::$instances[$sig];	}	/**	 * Method to be called by another php script. Processes for XSS and	 * specified bad code.	 *	 * @param   mixed   $source  Input string/array-of-string to be 'cleaned'	 * @param   string  $type    Return type for the variable (INT, UINT, FLOAT, BOOLEAN, WORD, ALNUM, CMD, BASE64, STRING, ARRAY, PATH, NONE)	 *	 * @return  mixed  'Cleaned' version of input parameter	 *	 * @since   11.1	 */	public function clean($source, $type = 'string')	{		// Handle the type constraint		switch (strtoupper($type))		{			case 'INT':			case 'INTEGER':				// Only use the first integer value				preg_match('/-?[0-9]+/', (string) $source, $matches);				$result = @ (int) $matches[0];				break;			case 'UINT':				// Only use the first integer value				preg_match('/-?[0-9]+/', (string) $source, $matches);				$result = @ abs((int) $matches[0]);				break;			case 'FLOAT':			case 'DOUBLE':				// Only use the first floating point value				preg_match('/-?[0-9]+(\.[0-9]+)?/', (string) $source, $matches);				$result = @ (float) $matches[0];				break;			case 'BOOL':			case 'BOOLEAN':				$result = (bool) $source;				break;			case 'WORD':				$result = (string) preg_replace('/[^A-Z_]/i', '', $source);				break;			case 'ALNUM':				$result = (string) preg_replace('/[^A-Z0-9]/i', '', $source);				break;			case 'CMD':				$result = (string) preg_replace('/[^A-Z0-9_\.-]/i', '', $source);				$result = ltrim($result, '.');				break;			case 'BASE64':				$result = (string) preg_replace('/[^A-Z0-9\/+=]/i', '', $source);				break;			case 'STRING':				$result = (string) $this->_remove($this->_decode((string) $source));				break;			case 'HTML':				$result = (string) $this->_remove((string) $source);				break;			case 'ARRAY':				$result = (array) $source;				break;			case 'PATH':				$pattern = '/^[A-Za-z0-9_-]+[A-Za-z0-9_\.-]*([\\\\\/][A-Za-z0-9_-]+[A-Za-z0-9_\.-]*)*$/';				preg_match($pattern, (string) $source, $matches);				$result = @ (string) $matches[0];				break;			case 'USERNAME':				$result = (string) preg_replace('/[\x00-\x1F\x7F<>"\'%&]/', '', $source);				break;			case 'RAW':				$result = $source;				break;			default:				// Are we dealing with an array?				if (is_array($source))				{					foreach ($source as $key => $value)					{						// Filter element for XSS and other 'bad' code etc.						if (is_string($value))						{							$source[$key] = $this->_remove($this->_decode($value));						}					}					$result = $source;				}				else				{					// Or a string?					if (is_string($source) && !empty($source))					{						// Filter source for XSS and other 'bad' code etc.						$result = $this->_remove($this->_decode($source));					}					else					{						// Not an array or string.. return the passed parameter						$result = $source;					}				}				break;		}		return $result;	}	/**	 * Function to determine if contents of an attribute are safe	 *	 * @param   array  $attrSubSet  A 2 element array for attribute's name, value	 *	 * @return  boolean  True if bad code is detected	 *	 * @since   11.1	 */	public static function checkAttribute($attrSubSet)	{		$attrSubSet[0] = strtolower($attrSubSet[0]);		$attrSubSet[1] = strtolower($attrSubSet[1]);		return (((strpos($attrSubSet[1], 'expression') !== false) && ($attrSubSet[0]) == 'style') || (strpos($attrSubSet[1], 'javascript:') !== false) ||			(strpos($attrSubSet[1], 'behaviour:') !== false) || (strpos($attrSubSet[1], 'vbscript:') !== false) ||			(strpos($attrSubSet[1], 'mocha:') !== false) || (strpos($attrSubSet[1], 'livescript:') !== false));	}	/**	 * Internal method to iteratively remove all unwanted tags and attributes	 *	 * @param   string  $source  Input string to be 'cleaned'	 *	 * @return  string  'Cleaned' version of input parameter	 *	 * @since   11.1	 */	protected function _remove($source)	{		$loopCounter = 0;		// Iteration provides nested tag protection		while ($source != $this->_cleanTags($source))		{			$source = $this->_cleanTags($source);			$loopCounter++;		}		return $source;	}	/**	 * Internal method to strip a string of certain tags	 *	 * @param   string  $source  Input string to be 'cleaned'	 *	 * @return  string  'Cleaned' version of input parameter	 *	 * @since   11.1	 */	protected function _cleanTags($source)	{		// First, pre-process this for illegal characters inside attribute values		$source = $this->_escapeAttributeValues($source);		// In the beginning we don't really have a tag, so everything is postTag		$preTag = null;		$postTag = $source;		$currentSpace = false;		// Setting to null to deal with undefined variables		$attr = '';		// Is there a tag? If so it will certainly start with a '<'.		$tagOpen_start = strpos($source, '<');		while ($tagOpen_start !== false)		{			// Get some information about the tag we are processing			$preTag .= substr($postTag, 0, $tagOpen_start);			$postTag = substr($postTag, $tagOpen_start);			$fromTagOpen = substr($postTag, 1);			$tagOpen_end = strpos($fromTagOpen, '>');			// Check for mal-formed tag where we have a second '<' before the first '>'			$nextOpenTag = (strlen($postTag) > $tagOpen_start) ? strpos($postTag, '<', $tagOpen_start + 1) : false;			if (($nextOpenTag !== false) && ($nextOpenTag < $tagOpen_end))			{				// At this point we have a mal-formed tag -- remove the offending open				$postTag = substr($postTag, 0, $tagOpen_start) . substr($postTag, $tagOpen_start + 1);				$tagOpen_start = strpos($postTag, '<');				continue;			}			// Let's catch any non-terminated tags and skip over them			if ($tagOpen_end === false)			{				$postTag = substr($postTag, $tagOpen_start + 1);				$tagOpen_start = strpos($postTag, '<');				continue;			}			// Do we have a nested tag?			$tagOpen_nested = strpos($fromTagOpen, '<');			if (($tagOpen_nested !== false) && ($tagOpen_nested < $tagOpen_end))			{				$preTag .= substr($postTag, 0, ($tagOpen_nested + 1));				$postTag = substr($postTag, ($tagOpen_nested + 1));				$tagOpen_start = strpos($postTag, '<');				continue;			}			// Let's get some information about our tag and setup attribute pairs			$tagOpen_nested = (strpos($fromTagOpen, '<') + $tagOpen_start + 1);			$currentTag = substr($fromTagOpen, 0, $tagOpen_end);			$tagLength = strlen($currentTag);			$tagLeft = $currentTag;			$attrSet = array();			$currentSpace = strpos($tagLeft, ' ');			// Are we an open tag or a close tag?			if (substr($currentTag, 0, 1) == '/')			{				// Close Tag				$isCloseTag = true;				list ($tagName) = explode(' ', $currentTag);				$tagName = substr($tagName, 1);			}			else			{				// Open Tag				$isCloseTag = false;				list ($tagName) = explode(' ', $currentTag);			}			/*			 * Exclude all "non-regular" tagnames			 * OR no tagname			 * OR remove if xssauto is on and tag is blacklisted			 */			if ((!preg_match("/^[a-z][a-z0-9]*$/i", $tagName)) || (!$tagName) || ((in_array(strtolower($tagName), $this->tagBlacklist)) && ($this->xssAuto)))			{				$postTag = substr($postTag, ($tagLength + 2));				$tagOpen_start = strpos($postTag, '<');				// Strip tag				continue;			}			/*			 * Time to grab any attributes from the tag... need this section in			 * case attributes have spaces in the values.			 */			while ($currentSpace !== false)			{				$attr = '';				$fromSpace = substr($tagLeft, ($currentSpace + 1));				$nextEqual = strpos($fromSpace, '=');				$nextSpace = strpos($fromSpace, ' ');				$openQuotes = strpos($fromSpace, '"');				$closeQuotes = strpos(substr($fromSpace, ($openQuotes + 1)), '"') + $openQuotes + 1;				$startAtt = '';				$startAttPosition = 0;				// Find position of equal and open quotes ignoring				if (preg_match('#\s*=\s*\"#', $fromSpace, $matches, PREG_OFFSET_CAPTURE))				{					$startAtt = $matches[0][0];					$startAttPosition = $matches[0][1];					$closeQuotes = strpos(substr($fromSpace, ($startAttPosition + strlen($startAtt))), '"') + $startAttPosition + strlen($startAtt);					$nextEqual = $startAttPosition + strpos($startAtt, '=');					$openQuotes = $startAttPosition + strpos($startAtt, '"');					$nextSpace = strpos(substr($fromSpace, $closeQuotes), ' ') + $closeQuotes;				}				// Do we have an attribute to process? [check for equal sign]				if ($fromSpace != '/' && (($nextEqual && $nextSpace && $nextSpace < $nextEqual) || !$nextEqual))				{					if (!$nextEqual)					{						$attribEnd = strpos($fromSpace, '/') - 1;					}					else					{						$attribEnd = $nextSpace - 1;					}					// If there is an ending, use this, if not, do not worry.					if ($attribEnd > 0)					{						$fromSpace = substr($fromSpace, $attribEnd + 1);					}				}				if (strpos($fromSpace, '=') !== false)				{					// If the attribute value is wrapped in quotes we need to grab the substring from					// the closing quote, otherwise grab until the next space.					if (($openQuotes !== false) && (strpos(substr($fromSpace, ($openQuotes + 1)), '"') !== false))					{						$attr = substr($fromSpace, 0, ($closeQuotes + 1));					}					else					{						$attr = substr($fromSpace, 0, $nextSpace);					}				}				// No more equal signs so add any extra text in the tag into the attribute array [eg. checked]				else				{					if ($fromSpace != '/')					{						$attr = substr($fromSpace, 0, $nextSpace);					}				}				// Last Attribute Pair				if (!$attr && $fromSpace != '/')				{					$attr = $fromSpace;				}				// Add attribute pair to the attribute array				$attrSet[] = $attr;				// Move search point and continue iteration				$tagLeft = substr($fromSpace, strlen($attr));				$currentSpace = strpos($tagLeft, ' ');			}			// Is our tag in the user input array?			$tagFound = in_array(strtolower($tagName), $this->tagsArray);			// If the tag is allowed let's append it to the output string.			if ((!$tagFound && $this->tagsMethod) || ($tagFound && !$this->tagsMethod))			{				// Reconstruct tag with allowed attributes				if (!$isCloseTag)				{					// Open or single tag					$attrSet = $this->_cleanAttributes($attrSet);					$preTag .= '<' . $tagName;					for ($i = 0, $count = count($attrSet); $i < $count; $i++)					{						$preTag .= ' ' . $attrSet[$i];					}					// Reformat single tags to XHTML					if (strpos($fromTagOpen, '</' . $tagName))					{						$preTag .= '>';					}					else					{						$preTag .= ' />';					}				}				// Closing tag				else				{					$preTag .= '</' . $tagName . '>';				}			}			// Find next tag's start and continue iteration			$postTag = substr($postTag, ($tagLength + 2));			$tagOpen_start = strpos($postTag, '<');		}		// Append any code after the end of tags and return		if ($postTag != '<')		{			$preTag .= $postTag;		}		return $preTag;	}	/**	 * Internal method to strip a tag of certain attributes	 *	 * @param   array  $attrSet  Array of attribute pairs to filter	 *	 * @return  array  Filtered array of attribute pairs	 *	 * @since   11.1	 */	protected function _cleanAttributes($attrSet)	{		$newSet = array();		$count = count($attrSet);		// Iterate through attribute pairs		for ($i = 0; $i < $count; $i++)		{			// Skip blank spaces			if (!$attrSet[$i])			{				continue;			}			// Split into name/value pairs			$attrSubSet = explode('=', trim($attrSet[$i]), 2);			// Take the last attribute in case there is an attribute with no value			$attrSubSet[0] = array_pop(explode(' ', trim($attrSubSet[0])));			// Remove all "non-regular" attribute names			// AND blacklisted attributes			if ((!preg_match('/[a-z]*$/i', $attrSubSet[0]))				|| (($this->xssAuto) && ((in_array(strtolower($attrSubSet[0]), $this->attrBlacklist))				|| (substr($attrSubSet[0], 0, 2) == 'on'))))			{				continue;			}			// XSS attribute value filtering			if (isset($attrSubSet[1]))			{				// Trim leading and trailing spaces				$attrSubSet[1] = trim($attrSubSet[1]);				// Strips unicode, hex, etc				$attrSubSet[1] = str_replace('&#', '', $attrSubSet[1]);				// Strip normal newline within attr value				$attrSubSet[1] = preg_replace('/[\n\r]/', '', $attrSubSet[1]);				// Strip double quotes				$attrSubSet[1] = str_replace('"', '', $attrSubSet[1]);				// Convert single quotes from either side to doubles (Single quotes shouldn't be used to pad attr values)				if ((substr($attrSubSet[1], 0, 1) == "'") && (substr($attrSubSet[1], (strlen($attrSubSet[1]) - 1), 1) == "'"))				{					$attrSubSet[1] = substr($attrSubSet[1], 1, (strlen($attrSubSet[1]) - 2));				}				// Strip slashes				$attrSubSet[1] = stripslashes($attrSubSet[1]);			}			else			{				continue;			}			// Autostrip script tags			if (self::checkAttribute($attrSubSet))			{				continue;			}			// Is our attribute in the user input array?			$attrFound = in_array(strtolower($attrSubSet[0]), $this->attrArray);			// If the tag is allowed lets keep it			if ((!$attrFound && $this->attrMethod) || ($attrFound && !$this->attrMethod))			{				// Does the attribute have a value?				if (empty($attrSubSet[1]) === false)				{					$newSet[] = $attrSubSet[0] . '="' . $attrSubSet[1] . '"';				}				elseif ($attrSubSet[1] === "0")				{					// Special Case					// Is the value 0?					$newSet[] = $attrSubSet[0] . '="0"';				}				else				{					// Leave empty attributes alone					$newSet[] = $attrSubSet[0] . '=""';				}			}		}		return $newSet;	}	/**	 * Try to convert to plaintext	 *	 * @param   string  $source  The source string.	 *	 * @return  string  Plaintext string	 *	 * @since   11.1	 */	protected function _decode($source)	{		static $ttr;		if (!is_array($ttr))		{			// Entity decode			$trans_tbl = get_html_translation_table(HTML_ENTITIES);			foreach ($trans_tbl as $k => $v)			{				$ttr[$v] = utf8_encode($k);			}		}		$source = strtr($source, $ttr);		// Convert decimal		$source = preg_replace('/&#(\d+);/me', "utf8_encode(chr(\\1))", $source); // decimal notation		// Convert hex		$source = preg_replace('/&#x([a-f0-9]+);/mei', "utf8_encode(chr(0x\\1))", $source); // hex notation		return $source;	}	/**	 * Escape < > and " inside attribute values	 *	 * @param   string  $source  The source string.	 *	 * @return  string  Filtered string	 *	 * @since    11.1	 */	protected function _escapeAttributeValues($source)	{		$alreadyFiltered = '';		$remainder = $source;		$badChars = array('<', '"', '>');		$escapedChars = array('&lt;', '&quot;', '&gt;');		// Process each portion based on presence of =" and "<space>, "/>, or ">		// See if there are any more attributes to process		while (preg_match('#<[^>]*?=\s*?(\"|\')#s', $remainder, $matches, PREG_OFFSET_CAPTURE))		{			// Get the portion before the attribute value			$quotePosition = $matches[0][1];			$nextBefore = $quotePosition + strlen($matches[0][0]);			// Figure out if we have a single or double quote and look for the matching closing quote			// Closing quote should be "/>, ">, "<space>, or " at the end of the string			$quote = substr($matches[0][0], -1);			$pregMatch = ($quote == '"') ? '#(\"\s*/\s*>|\"\s*>|\"\s+|\"$)#' : "#(\'\s*/\s*>|\'\s*>|\'\s+|\'$)#";			// Get the portion after attribute value			if (preg_match($pregMatch, substr($remainder, $nextBefore), $matches, PREG_OFFSET_CAPTURE))			{				// We have a closing quote				$nextAfter = $nextBefore + $matches[0][1];			}			else			{				// No closing quote				$nextAfter = strlen($remainder);			}			// Get the actual attribute value			$attributeValue = substr($remainder, $nextBefore, $nextAfter - $nextBefore);			// Escape bad chars			$attributeValue = str_replace($badChars, $escapedChars, $attributeValue);			$attributeValue = $this->_stripCSSExpressions($attributeValue);			$alreadyFiltered .= substr($remainder, 0, $nextBefore) . $attributeValue . $quote;			$remainder = substr($remainder, $nextAfter + 1);		}		// At this point, we just have to return the $alreadyFiltered and the $remainder		return $alreadyFiltered . $remainder;	}	/**	 * Remove CSS Expressions in the form of <property>:expression(...)	 *	 * @param   string  $source  The source string.	 *	 * @return  string  Filtered string	 *	 * @since   11.1	 */	protected function _stripCSSExpressions($source)	{		// Strip any comments out (in the form of /*...*/)		$test = preg_replace('#\/\*.*\*\/#U', '', $source);		// Test for :expression		if (!stripos($test, ':expression'))		{			// Not found, so we are done			$return = $source;		}		else		{			// At this point, we have stripped out the comments and have found :expression			// Test stripped string for :expression followed by a '('			if (preg_match_all('#:expression\s*\(#', $test, $matches))			{				// If found, remove :expression				$test = str_ireplace(':expression', '', $test);				$return = $test;			}		}		return $return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.combobox');$hasContent = empty($this->item->module) || $this->item->module == 'custom' || $this->item->module == 'mod_custom';$script = "Joomla.submitbutton = function(task)	{			if (task == 'module.cancel' || document.formvalidator.isValid(document.id('module-form'))) {";if ($hasContent){	$script .= $this->form->getField('content')->save();}$script .= "	Joomla.submitform(task, document.getElementById('module-form'));				if (self != top)				{					window.top.setTimeout('window.parent.SqueezeBox.close()', 1000);				}			}	}";JFactory::getDocument()->addScriptDeclaration($script);?><div class="module-edit"><form action="<?php echo JRoute::_('index.php?option=com_modules&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="module-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('JDETAILS'); ?></legend>			<ul class="adminformlist">			<li><?php echo $this->form->getLabel('title'); ?>			<?php echo $this->form->getInput('title'); ?></li>			<li><?php echo $this->form->getLabel('showtitle'); ?>			<?php echo $this->form->getInput('showtitle'); ?></li>			<li><?php echo $this->form->getLabel('position'); ?>			<?php echo $this->form->getInput('custom_position'); ?>			<label id="jform_custom_position-lbl" for="jform_custom_position" class="element-invisible"><?php echo JText::_('TPL_HATHOR_COM_MODULES_CUSTOM_POSITION_LABEL');?></label>			<?php echo $this->form->getInput('position'); ?></li>			<?php if ((string) $this->item->xml->name != 'Login Form') : ?>			<li><?php echo $this->form->getLabel('published'); ?>			<?php echo $this->form->getInput('published'); ?></li>			<?php endif; ?>			<li><?php echo $this->form->getLabel('access'); ?>			<?php echo $this->form->getInput('access'); ?></li>			<li><?php echo $this->form->getLabel('ordering'); ?>			<?php echo $this->form->getInput('ordering'); ?></li>			<?php if ((string) $this->item->xml->name != 'Login Form') : ?>			<li><?php echo $this->form->getLabel('publish_up'); ?>			<?php echo $this->form->getInput('publish_up'); ?></li>			<li><?php echo $this->form->getLabel('publish_down'); ?>			<?php echo $this->form->getInput('publish_down'); ?></li>			<?php endif; ?>			<li><?php echo $this->form->getLabel('language'); ?>			<?php echo $this->form->getInput('language'); ?></li>			<li><?php echo $this->form->getLabel('note'); ?>			<?php echo $this->form->getInput('note'); ?></li>			<?php if ($this->item->id) : ?>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>			<?php endif; ?>			<li><?php echo $this->form->getLabel('module'); ?>			<?php echo $this->form->getInput('module'); ?>			<span class="faux-input"><?php if ($this->item->xml) echo ($text = (string) $this->item->xml->name) ? JText::_($text) : $this->item->module;else echo JText::_(COM_MODULES_ERR_XML);?></span></li>			<li><?php echo $this->form->getLabel('client_id'); ?>			<input type="text" size="35" id="jform_client_id" value="<?php echo $this->item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>	" class="readonly" readonly="readonly" />			<?php echo $this->form->getInput('client_id'); ?></li>			</ul>			<div class="clr"></div>			<?php if ($this->item->xml) : ?>				<?php if ($text = trim($this->item->xml->description)) : ?>					<span class="faux-label">						<?php echo JText::_('COM_MODULES_MODULE_DESCRIPTION'); ?>					</span>					<div class="clr"></div>					<div class="readonly mod-desc extdescript">						<?php echo JText::_($text); ?>					</div>				<?php endif; ?>			<?php else : ?>				<?php echo JText::_('COM_MODULES_ERR_XML'); ?>			<?php endif; ?>			<div class="clr"></div>		</fieldset>	</div>	<div class="col options-section">	<?php echo JHtml::_('sliders.start', 'module-sliders'); ?>		<?php echo $this->loadTemplate('options'); ?>	<?php echo JHtml::_('sliders.end'); ?>	</div>	<?php if ($hasContent) : ?>		<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('COM_MODULES_CUSTOM_OUTPUT'); ?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('content'); ?>			<div class="clr"></div>				<?php echo $this->form->getInput('content'); ?></li>			</ul>		</fieldset>		</div>	<?php endif; ?>	<?php if ($this->item->client_id == 0) :?>	<div class="col main-section">		<?php echo $this->loadTemplate('assignment'); ?>	</div>	<?php endif; ?>	<div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$app		= JFactory::getApplication();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$canOrder	= $user->authorise('core.edit.state',	'com_menus');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><?php //Set up the filter bar. ?><form action="<?php echo JRoute::_('index.php?option=com_menus&view=items');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_MENUS_ITEMS_SEARCH_FILTER'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="menutype">				<?php echo JText::_('TPL_HATHOR_COM_MENUS_MENU'); ?>			</label>			<select name="menutype" class="inputbox" id="menutype">				<?php echo JHtml::_('select.options', JHtml::_('menu.menus'), 'value', 'text', $this->state->get('filter.menutype'));?>			</select>			<label class="selectlabel" for="filter_level">				<?php echo JText::_('COM_MENUS_OPTION_SELECT_LEVEL'); ?>			</label>			<select name="filter_level" class="inputbox" id="filter_level">				<option value=""><?php echo JText::_('COM_MENUS_OPTION_SELECT_LEVEL');?></option>				<?php echo JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'));?>			</select>            <label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions', array('archived' => false)), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>            <label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language">				<?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?>			</label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div><?php //Set up the grid heading. ?>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.lft', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'items.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th width="10%">					<?php echo JText::_('JGRID_HEADING_MENU_ITEM_TYPE'); ?>				</th>				<th class="home-col">					<?php echo JHtml::_('grid.sort', 'COM_MENUS_HEADING_HOME', 'a.home', $listDirn, $listOrder); ?>				</th>				<?php				if ($assoc):				?>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'COM_MENUS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>				</th>				<?php endif;?>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php		$originalOrders = array();		foreach ($this->items as $i => $item) :			$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);			$canCreate  = $user->authorise('core.create',     'com_menus');			$canEdit    = $user->authorise('core.edit',       'com_menus');			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_menus') && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level - 1) ?>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'items.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_menus&task=item.edit&id='.(int) $item->id);?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub" title="<?php echo $this->escape($item->path);?>">						<?php echo str_repeat('<span class="gtr">|&mdash;</span>', $item->level - 1) ?>						<?php if ($item->type != 'url') : ?>							<?php if (empty($item->note)) : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							<?php else : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>							<?php endif; ?>						<?php elseif ($item->type == 'url' && $item->note) : ?>							<?php echo JText::sprintf('JGLOBAL_LIST_NOTE', $this->escape($item->note));?>						<?php endif; ?></p>				</td>				<td class="center">					<?php echo JHtml::_('MenusHtml.Menus.state', $item->published, $i, $canChange, 'cb'); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) : ?>							<span><?php echo $this->pagination->orderUpIcon($i, isset($this->ordering[$item->parent_id][$orderkey - 1]), 'items.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>							<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, isset($this->ordering[$item->parent_id][$orderkey + 1]), 'items.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $orderkey + 1;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->title; ?> order" />						<?php $originalOrders[] = $orderkey + 1; ?>					<?php else : ?>						<?php echo $orderkey + 1;?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="nowrap">					<span title="<?php echo isset($item->item_type_desc) ? htmlspecialchars($this->escape($item->item_type_desc), ENT_COMPAT, 'UTF-8') : ''; ?>">						<?php echo $this->escape($item->item_type); ?></span>				</td>				<td class="center">					<?php if ($item->type == 'component') : ?>						<?php if ($item->language == '*' || $item->home == '0'):?>							<?php echo JHtml::_('jgrid.isdefault', $item->home, $i, 'items.', ($item->language != '*' || !$item->home) && $canChange);?>						<?php elseif ($canChange):?>							<a href="<?php echo JRoute::_('index.php?option=com_menus&task=items.unsetDefault&cid[]='.$item->id.'&'.JSession::getFormToken().'=1');?>">								<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => JText::sprintf('COM_MENUS_GRID_UNSET_LANGUAGE', $item->language_title)), true);?>							</a>						<?php else:?>							<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => $item->language_title), true);?>						<?php endif;?>					<?php endif; ?>				</td>				<?php				if ($assoc):				?>				<td class="center">					<?php if ($item->association):?>						<?php echo JHtml::_('MenusHtml.Menus.association', $item->id);?>					<?php endif;?>				</td>				<?php endif;?>				<td class="center">					<?php if ($item->language == ''):?>						<?php echo JText::_('JDEFAULT'); ?>					<?php elseif ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt);?>">						<?php echo (int) $item->id; ?></span>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<div class="clr"> </div>	<?php //Load the batch processing form.is user is allowed ?>	<?php if ($user->authorise('core.create', 'com_menus') || $user->authorise('core.edit', 'com_menus')) : ?>		<?php echo $this->loadTemplate('batch'); ?>	<?php endif;?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Plugin * @subpackage  Search.weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_weblinks/helpers/route.php';/** * Weblinks Search plugin * * @package     Joomla.Plugin * @subpackage  Search.weblinks * @since       1.6 */class PlgSearchWeblinks extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * @return array An array of search areas	 */	public function onContentSearchAreas()	{		static $areas = array(			'weblinks' => 'PLG_SEARCH_WEBLINKS_WEBLINKS'		);		return $areas;	}	/**	 * Weblink Search method	 *	 * The sql must return the following fields that are used in a common display	 * routine: href, title, section, created, text, browsernav	 * @param string Target search string	 * @param string mathcing option, exact|any|all	 * @param string ordering option, newest|oldest|popular|alpha|category	 * @param mixed  An array if the search it to be restricted to areas, null if search all	 */	public function onContentSearch($text, $phrase = '', $ordering = '', $areas = null)	{		$db = JFactory::getDbo();		$app = JFactory::getApplication();		$user = JFactory::getUser();		$groups = implode(',', $user->getAuthorisedViewLevels());		$searchText = $text;		if (is_array($areas))		{			if (!array_intersect($areas, array_keys($this->onContentSearchAreas())))			{				return array();			}		}		$sContent = $this->params->get('search_content', 1);		$sArchived = $this->params->get('search_archived', 1);		$limit = $this->params->def('search_limit', 50);		$state = array();		if ($sContent)		{			$state[] = 1;		}		if ($sArchived)		{			$state[] = 2;		}		$text = trim($text);		if ($text == '')		{			return array();		}		$section = JText::_('PLG_SEARCH_WEBLINKS');		$wheres = array();		switch ($phrase)		{			case 'exact':				$text = $db->quote('%' . $db->escape($text, true) . '%', false);				$wheres2 = array();				$wheres2[] = 'a.url LIKE ' . $text;				$wheres2[] = 'a.description LIKE ' . $text;				$wheres2[] = 'a.title LIKE ' . $text;				$where = '(' . implode(') OR (', $wheres2) . ')';				break;			case 'all':			case 'any':			default:				$words = explode(' ', $text);				$wheres = array();				foreach ($words as $word)				{					$word = $db->quote('%' . $db->escape($word, true) . '%', false);					$wheres2 = array();					$wheres2[] = 'a.url LIKE ' . $word;					$wheres2[] = 'a.description LIKE ' . $word;					$wheres2[] = 'a.title LIKE ' . $word;					$wheres[] = implode(' OR ', $wheres2);				}				$where = '(' . implode(($phrase == 'all' ? ') AND (' : ') OR ('), $wheres) . ')';				break;		}		switch ($ordering)		{			case 'oldest':				$order = 'a.created ASC';				break;			case 'popular':				$order = 'a.hits DESC';				break;			case 'alpha':				$order = 'a.title ASC';				break;			case 'category':				$order = 'c.title ASC, a.title ASC';				break;			case 'newest':			default:				$order = 'a.created DESC';		}		$return = array();		if (!empty($state))		{			$query = $db->getQuery(true);			//sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('c.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('c.id');			$case_when1 .= $query->concatenate(array($c_id, 'c.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select(				'a.title AS title, a.description AS text, a.created AS created, a.url, '					. $case_when . ',' . $case_when1 . ', '					. $query->concatenate(array($db->quote($section), "c.title"), " / ") . ' AS section, \'1\' AS browsernav'			);			$query->from('#__weblinks AS a')				->join('INNER', '#__categories AS c ON c.id = a.catid')				->where('(' . $where . ') AND a.state in (' . implode(',', $state) . ') AND  c.published=1 AND  c.access IN (' . $groups . ')')				->order($order);			// Filter by language			if ($app->isSite() && JLanguageMultilang::isEnabled())			{				$tag = JFactory::getLanguage()->getTag();				$query->where('a.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')')					->where('c.language in (' . $db->quote($tag) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query, 0, $limit);			$rows = $db->loadObjectList();			$return = array();			if ($rows)			{				foreach ($rows as $key => $row)				{					$rows[$key]->href = WeblinksHelperRoute::getWeblinkRoute($row->slug, $row->catslug);				}				foreach ($rows as $key => $weblink)				{					if (searchHelper::checkNoHTML($weblink, $searchText, array('url', 'text', 'title')))					{						$return[] = $weblink;					}				}			}		}		return $return;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Contact Component Controller * * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName = $this->input->get('view', 'categories');		$this->input->set('view', $vName);		$user = JFactory::getUser();		$safeurlparams = array('catid' => 'INT', 'id' => 'INT', 'cid' => 'ARRAY', 'year' => 'INT', 'month' => 'INT', 'limit' => 'UINT', 'limitstart' => 'UINT',			'showall' => 'INT', 'return' => 'BASE64', 'filter' => 'STRING', 'filter_order' => 'CMD', 'filter_order_Dir' => 'CMD', 'filter-search' => 'STRING', 'print' => 'BOOLEAN', 'lang' => 'CMD');		parent::display($cachable, $safeurlparams);		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// JLayout for standard handling of the details sidebar in administrator edit screens.$title = $displayData->get('form')->getValue('title');$published = $displayData->get('form')->getValue('published');?><div class="span2"><h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<?php if (empty($title)) : ?>					<div class="control-group">						<div class="controls">							<?php echo $displayData->get('form')->getValue('name'); ?>						</div>					</div>				<?php else : ?>				<div class="control-group">					<div class="controls">						<?php echo $displayData->get('form')->getValue('title'); ?>					</div>				</div>				<?php endif; ?>				<?php if ($published) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $displayData->get('form')->getLabel('published'); ?>						</div>						<div class="controls">							<?php echo $displayData->get('form')->getInput('published'); ?>						</div>					</div>				<?php else : ?>					<div class="control-group">						<div class="control-label">							<?php echo $displayData->get('form')->getLabel('state'); ?>						</div>						<div class="controls">							<?php echo $displayData->get('form')->getInput('state'); ?>						</div>					</div>				<?php endif; ?>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('featured'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('featured'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $displayData->get('form')->getLabel('language'); ?>					</div>					<div class="controls">						<?php echo $displayData->get('form')->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<?php foreach ($displayData->get('form')->getFieldset('jmetadata') as $field) : ?>						<?php if ($field->name == 'jform[metadata][tags][]') :?>						<div class="control-group">							<div class="control-label"><?php echo $field->label; ?></div>							<div class="controls"><?php echo $field->input; ?></div>						</div>						<?php endif; ?>					<?php endforeach; ?>				</div>			</fieldset>		</div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Template styles list controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerStyles extends JControllerAdmin{	/**	 * Method to clone and existing template style.	 */	public function duplicate()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			JArrayHelper::toInteger($pks);			$model = $this->getModel();			$model->duplicate($pks);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_DUPLICATED'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}	/**	 * Proxy for getModel.	 *	 * @since   1.6	 */	public function getModel($name = 'Style', $prefix = 'TemplatesModel', $config = array())	{		$model = parent::getModel($name, $prefix, array('ignore_request' => true));		return $model;	}	/**	 * Method to set the home template for a client.	 *	 * @since   1.6	 */	public function setDefault()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			JArrayHelper::toInteger($pks);			// Pop off the first element.			$id = array_shift($pks);			$model = $this->getModel();			$model->setHome($id);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_HOME_SET'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}	/**	 * Method to unset the default template for a client and for a language	 *	 * @since   1.6	 */	public function unsetDefault()	{		// Check for request forgeries		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->get->get('cid', array(), 'array');		JArrayHelper::toInteger($pks);		try		{			if (empty($pks))			{				throw new Exception(JText::_('COM_TEMPLATES_NO_TEMPLATE_SELECTED'));			}			// Pop off the first element.			$id = array_shift($pks);			$model = $this->getModel();			$model->unsetHome($id);			$this->setMessage(JText::_('COM_TEMPLATES_SUCCESS_HOME_UNSET'));		}		catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_templates&view=styles');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentViewFeatured extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		ContentHelper::addSubmenu('featured');		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		$this->authors    = $this->get('Authors');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= ContentHelper::getActions($this->state->get('filter.category_id'));		JToolbarHelper::title(JText::_('COM_CONTENT_FEATURED_TITLE'), 'featured.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('article.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('article.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('articles.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('articles.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::custom('featured.delete', 'remove.png', 'remove_f2.png', 'JTOOLBAR_REMOVE', true);			JToolbarHelper::archiveList('articles.archive');			JToolbarHelper::checkin('articles.checkin');		}		if ($state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'articles.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('articles.trash');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_content');		}		JToolbarHelper::help('JHELP_CONTENT_FEATURED_ARTICLES');		JHtmlSidebar::setAction('index.php?option=com_content&view=featured');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_AUTHOR'),			'filter_author_id',			JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'fp.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'access_level' => JText::_('JGRID_HEADING_ACCESS'),			'a.created_by' => JText::_('JAUTHOR'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.created' => JText::_('JDATE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_articles_archive * * @package     Joomla.Site * @subpackage  mod_articles_archive * @since       1.5 */class ModArchiveHelper{	/*	 * @since  1.5	 */	public static function getList(&$params)	{		//get database		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$query->select($query->month($db->quoteName('created')) . ' AS created_month')			->select('created, id, title')			->select($query->year($db->quoteName('created')) . ' AS created_year')			->from('#__content')			->where('state = 2 AND checked_out = 0')			->group('created_year, created_month, id, title, created');		// Filter by language		if (JFactory::getApplication()->getLanguageFilter())		{			$query->where('language in (' . $db->quote(JFactory::getLanguage()->getTag()) . ',' . $db->quote('*') . ')');		}		$db->setQuery($query, 0, (int) $params->get('count'));		$rows = (array) $db->loadObjectList();		$app = JFactory::getApplication();		$menu = $app->getMenu();		$item = $menu->getItems('link', 'index.php?option=com_content&view=archive', true);		$itemid = (isset($item) && !empty($item->id)) ? '&Itemid=' . $item->id : '';		$i = 0;		$lists = array();		foreach ($rows as $row)		{			$date = JFactory::getDate($row->created);			$created_month = $date->format('n');			$created_year = $date->format('Y');			$created_year_cal = JHTML::_('date', $row->created, 'Y');			$month_name_cal = JHTML::_('date', $row->created, 'F');			$lists[$i] = new stdClass;			$lists[$i]->link = JRoute::_('index.php?option=com_content&view=archive&year=' . $created_year . '&month=' . $created_month . $itemid);			$lists[$i]->text = JText::sprintf('MOD_ARTICLES_ARCHIVE_DATE', $month_name_cal, $created_year_cal);			$i++;		}		return $lists;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Frontpage View class * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewFeatured extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	protected $pagination = null;	protected $lead_items = array();	protected $intro_items = array();	protected $link_items = array();	protected $columns = 1;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$user = JFactory::getUser();		$app = JFactory::getApplication();		$state 		= $this->get('State');		$items 		= $this->get('Items');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		$params = &$state->params;		// PREPARE THE DATA		// Get the metrics for the structural page layout.		$numLeading = $params->def('num_leading_articles', 1);		$numIntro = $params->def('num_intro_articles', 4);		$numLinks = $params->def('num_links', 4);		// Compute the article slugs and prepare introtext (runs content plugins).		foreach ($items as $i => & $item)		{			$item->slug = $item->alias ? ($item->id . ':' . $item->alias) : $item->id;			$item->catslug = ($item->category_alias) ? ($item->catid . ':' . $item->category_alias) : $item->catid;			$item->parent_slug = ($item->parent_alias) ? ($item->parent_id . ':' . $item->parent_alias) : $item->parent_id;			// No link for ROOT category			if ($item->parent_alias == 'root')			{				$item->parent_slug = null;			}			$item->event = new stdClass;			$dispatcher = JEventDispatcher::getInstance();			// Old plugins: Ensure that text property is available			if (!isset($item->text))			{				$item->text = $item->introtext;			}			JPluginHelper::importPlugin('content');			$results = $dispatcher->trigger('onContentPrepare', array ('com_content.featured', &$item, &$this->params, 0));			// Old plugins: Use processed text as introtext			$item->introtext = $item->text;			$results = $dispatcher->trigger('onContentAfterTitle', array('com_content.featured', &$item, &$item->params, 0));			$item->event->afterDisplayTitle = trim(implode("\n", $results));			$results = $dispatcher->trigger('onContentBeforeDisplay', array('com_content.featured', &$item, &$item->params, 0));			$item->event->beforeDisplayContent = trim(implode("\n", $results));			$results = $dispatcher->trigger('onContentAfterDisplay', array('com_content.featured', &$item, &$item->params, 0));			$item->event->afterDisplayContent = trim(implode("\n", $results));		}		// Preprocess the breakdown of leading, intro and linked articles.		// This makes it much easier for the designer to just interogate the arrays.		$max = count($items);		// The first group is the leading articles.		$limit = $numLeading;		for ($i = 0; $i < $limit && $i < $max; $i++)		{			$this->lead_items[$i] = &$items[$i];		}		// The second group is the intro articles.		$limit = $numLeading + $numIntro;		// Order articles across, then down (or single column mode)		for ($i = $numLeading; $i < $limit && $i < $max; $i++)		{			$this->intro_items[$i] = &$items[$i];		}		$this->columns = max(1, $params->def('num_columns', 1));		$order = $params->def('multi_column_order', 1);		if ($order == 0 && $this->columns > 1)		{			// call order down helper			$this->intro_items = ContentHelperQuery::orderDownColumns($this->intro_items, $this->columns);		}		// The remainder are the links.		for ($i = $numLeading + $numIntro; $i < $max; $i++)		{			$this->link_items[$i] = &$items[$i];		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->params     = &$params;		$this->items      = &$items;		$this->pagination = &$pagination;		$this->user       = &$user;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		// Add feed links		if ($this->params->get('show_feed_link', 1))		{			$link = '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link . '&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link . '&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Date * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDate is a class that stores a date and provides logic to manipulate * and render that date in a variety of formats. * * @property-read  string   $daysinmonth   t - Number of days in the given month. * @property-read  string   $dayofweek     N - ISO-8601 numeric representation of the day of the week. * @property-read  string   $dayofyear     z - The day of the year (starting from 0). * @property-read  boolean  $isleapyear    L - Whether it's a leap year. * @property-read  string   $day           d - Day of the month, 2 digits with leading zeros. * @property-read  string   $hour          H - 24-hour format of an hour with leading zeros. * @property-read  string   $minute        i - Minutes with leading zeros. * @property-read  string   $second        s - Seconds with leading zeros. * @property-read  string   $month         m - Numeric representation of a month, with leading zeros. * @property-read  string   $ordinal       S - English ordinal suffix for the day of the month, 2 characters. * @property-read  string   $week          W - Numeric representation of the day of the week. * @property-read  string   $year          Y - A full numeric representation of a year, 4 digits. * * @package     Joomla.Platform * @subpackage  Date * @since       11.1 */class JDate extends DateTime{	const DAY_ABBR = "\x021\x03";	const DAY_NAME = "\x022\x03";	const MONTH_ABBR = "\x023\x03";	const MONTH_NAME = "\x024\x03";	/**	 * The format string to be applied when using the __toString() magic method.	 *	 * @var    string	 * @since  11.1	 */	public static $format = 'Y-m-d H:i:s';	/**	 * Placeholder for a DateTimeZone object with GMT as the time zone.	 *	 * @var    object	 * @since  11.1	 */	protected static $gmt;	/**	 * Placeholder for a DateTimeZone object with the default server	 * time zone as the time zone.	 *	 * @var    object	 * @since  11.1	 */	protected static $stz;	/**	 * The DateTimeZone object for usage in rending dates as strings.	 *	 * @var    DateTimeZone	 * @since  12.1	 */	protected $tz;	/**	 * Constructor.	 *	 * @param   string  $date  String in a format accepted by strtotime(), defaults to "now".	 * @param   mixed   $tz    Time zone to be used for the date. Might be a string or a DateTimeZone object.	 *	 * @since   11.1	 */	public function __construct($date = 'now', $tz = null)	{		// Create the base GMT and server time zone objects.		if (empty(self::$gmt) || empty(self::$stz))		{			self::$gmt = new DateTimeZone('GMT');			self::$stz = new DateTimeZone(@date_default_timezone_get());		}		// If the time zone object is not set, attempt to build it.		if (!($tz instanceof DateTimeZone))		{			if ($tz === null)			{				$tz = self::$gmt;			}			elseif (is_string($tz))			{				$tz = new DateTimeZone($tz);			}		}		// If the date is numeric assume a unix timestamp and convert it.		date_default_timezone_set('UTC');		$date = is_numeric($date) ? date('c', $date) : $date;		// Call the DateTime constructor.		parent::__construct($date, $tz);		// Reset the timezone for 3rd party libraries/extension that does not use JDate		date_default_timezone_set(self::$stz->getName());		// Set the timezone object for access later.		$this->tz = $tz;	}	/**	 * Magic method to access properties of the date given by class to the format method.	 *	 * @param   string  $name  The name of the property.	 *	 * @return  mixed   A value if the property name is valid, null otherwise.	 *	 * @since   11.1	 */	public function __get($name)	{		$value = null;		switch ($name)		{			case 'daysinmonth':				$value = $this->format('t', true);				break;			case 'dayofweek':				$value = $this->format('N', true);				break;			case 'dayofyear':				$value = $this->format('z', true);				break;			case 'isleapyear':				$value = (boolean) $this->format('L', true);				break;			case 'day':				$value = $this->format('d', true);				break;			case 'hour':				$value = $this->format('H', true);				break;			case 'minute':				$value = $this->format('i', true);				break;			case 'second':				$value = $this->format('s', true);				break;			case 'month':				$value = $this->format('m', true);				break;			case 'ordinal':				$value = $this->format('S', true);				break;			case 'week':				$value = $this->format('W', true);				break;			case 'year':				$value = $this->format('Y', true);				break;			default:				$trace = debug_backtrace();				trigger_error(					'Undefined property via __get(): ' . $name . ' in ' . $trace[0]['file'] . ' on line ' . $trace[0]['line'],					E_USER_NOTICE				);		}		return $value;	}	/**	 * Magic method to render the date object in the format specified in the public	 * static member JDate::$format.	 *	 * @return  string  The date as a formatted string.	 *	 * @since   11.1	 */	public function __toString()	{		return (string) parent::format(self::$format);	}	/**	 * Proxy for new JDate().	 *	 * @param   string  $date  String in a format accepted by strtotime(), defaults to "now".	 * @param   mixed   $tz    Time zone to be used for the date.	 *	 * @return  JDate	 *	 * @since   11.3	 */	public static function getInstance($date = 'now', $tz = null)	{		return new JDate($date, $tz);	}	/**	 * Translates day of week number to a string.	 *	 * @param   integer  $day   The numeric day of the week.	 * @param   boolean  $abbr  Return the abbreviated day string?	 *	 * @return  string  The day of the week.	 *	 * @since   11.1	 */	public function dayToString($day, $abbr = false)	{		switch ($day)		{			case 0:				return $abbr ? JText::_('SUN') : JText::_('SUNDAY');			case 1:				return $abbr ? JText::_('MON') : JText::_('MONDAY');			case 2:				return $abbr ? JText::_('TUE') : JText::_('TUESDAY');			case 3:				return $abbr ? JText::_('WED') : JText::_('WEDNESDAY');			case 4:				return $abbr ? JText::_('THU') : JText::_('THURSDAY');			case 5:				return $abbr ? JText::_('FRI') : JText::_('FRIDAY');			case 6:				return $abbr ? JText::_('SAT') : JText::_('SATURDAY');		}	}	/**	 * Gets the date as a formatted string in a local calendar.	 *	 * @param   string   $format     The date format specification string (see {@link PHP_MANUAL#date})	 * @param   boolean  $local      True to return the date string in the local time zone, false to return it in GMT.	 * @param   boolean  $translate  True to translate localised strings	 *	 * @return  string   The date string in the specified format format.	 *	 * @since   11.1	 */	public function calendar($format, $local = false, $translate = true)	{		return $this->format($format, $local, $translate);	}	/**	 * Gets the date as a formatted string.	 *	 * @param   string   $format     The date format specification string (see {@link PHP_MANUAL#date})	 * @param   boolean  $local      True to return the date string in the local time zone, false to return it in GMT.	 * @param   boolean  $translate  True to translate localised strings	 *	 * @return  string   The date string in the specified format format.	 *	 * @since   11.1	 */	public function format($format, $local = false, $translate = true)	{		if ($translate)		{			// Do string replacements for date format options that can be translated.			$format = preg_replace('/(^|[^\\\])D/', "\\1" . self::DAY_ABBR, $format);			$format = preg_replace('/(^|[^\\\])l/', "\\1" . self::DAY_NAME, $format);			$format = preg_replace('/(^|[^\\\])M/', "\\1" . self::MONTH_ABBR, $format);			$format = preg_replace('/(^|[^\\\])F/', "\\1" . self::MONTH_NAME, $format);		}		// If the returned time should not be local use GMT.		if ($local == false)		{			parent::setTimezone(self::$gmt);		}		// Format the date.		$return = parent::format($format);		if ($translate)		{			// Manually modify the month and day strings in the formatted time.			if (strpos($return, self::DAY_ABBR) !== false)			{				$return = str_replace(self::DAY_ABBR, $this->dayToString(parent::format('w'), true), $return);			}			if (strpos($return, self::DAY_NAME) !== false)			{				$return = str_replace(self::DAY_NAME, $this->dayToString(parent::format('w')), $return);			}			if (strpos($return, self::MONTH_ABBR) !== false)			{				$return = str_replace(self::MONTH_ABBR, $this->monthToString(parent::format('n'), true), $return);			}			if (strpos($return, self::MONTH_NAME) !== false)			{				$return = str_replace(self::MONTH_NAME, $this->monthToString(parent::format('n')), $return);			}		}		if ($local == false)		{			parent::setTimezone($this->tz);		}		return $return;	}	/**	 * Get the time offset from GMT in hours or seconds.	 *	 * @param   boolean  $hours  True to return the value in hours.	 *	 * @return  float  The time offset from GMT either in hours or in seconds.	 *	 * @since   11.1	 */	public function getOffsetFromGMT($hours = false)	{		return (float) $hours ? ($this->tz->getOffset($this) / 3600) : $this->tz->getOffset($this);	}	/**	 * Translates month number to a string.	 *	 * @param   integer  $month  The numeric month of the year.	 * @param   boolean  $abbr   If true, return the abbreviated month string	 *	 * @return  string  The month of the year.	 *	 * @since   11.1	 */	public function monthToString($month, $abbr = false)	{		switch ($month)		{			case 1:				return $abbr ? JText::_('JANUARY_SHORT') : JText::_('JANUARY');			case 2:				return $abbr ? JText::_('FEBRUARY_SHORT') : JText::_('FEBRUARY');			case 3:				return $abbr ? JText::_('MARCH_SHORT') : JText::_('MARCH');			case 4:				return $abbr ? JText::_('APRIL_SHORT') : JText::_('APRIL');			case 5:				return $abbr ? JText::_('MAY_SHORT') : JText::_('MAY');			case 6:				return $abbr ? JText::_('JUNE_SHORT') : JText::_('JUNE');			case 7:				return $abbr ? JText::_('JULY_SHORT') : JText::_('JULY');			case 8:				return $abbr ? JText::_('AUGUST_SHORT') : JText::_('AUGUST');			case 9:				return $abbr ? JText::_('SEPTEMBER_SHORT') : JText::_('SEPTEMBER');			case 10:				return $abbr ? JText::_('OCTOBER_SHORT') : JText::_('OCTOBER');			case 11:				return $abbr ? JText::_('NOVEMBER_SHORT') : JText::_('NOVEMBER');			case 12:				return $abbr ? JText::_('DECEMBER_SHORT') : JText::_('DECEMBER');		}	}	/**	 * Method to wrap the setTimezone() function and set the internal time zone object.	 *	 * @param   DateTimeZone  $tz  The new DateTimeZone object.	 *	 * @return  JDate	 *	 * @since   11.1	 */	public function setTimezone($tz)	{		$this->tz = $tz;		return parent::setTimezone($tz);	}	/**	 * Gets the date as an ISO 8601 string.  IETF RFC 3339 defines the ISO 8601 format	 * and it can be found at the IETF Web site.	 *	 * @param   boolean  $local  True to return the date string in the local time zone, false to return it in GMT.	 *	 * @return  string  The date string in ISO 8601 format.	 *	 * @link    http://www.ietf.org/rfc/rfc3339.txt	 * @since   11.1	 */	public function toISO8601($local = false)	{		return $this->format(DateTime::RFC3339, $local, false);	}	/**	 * Gets the date as an SQL datetime string.	 *	 * @param   boolean          $local  True to return the date string in the local time zone, false to return it in GMT.	 * @param   JDatabaseDriver  $db     The database driver or null to use JFactory::getDbo()	 *	 * @return  string     The date string in SQL datetime format.	 *	 * @link http://dev.mysql.com/doc/refman/5.0/en/datetime.html	 * @since   11.4	 */	public function toSql($local = false, JDatabaseDriver $db = null)	{		if ($db === null)		{			$db = JFactory::getDbo();		}		return $this->format($db->getDateFormat(), $local, false);	}	/**	 * Gets the date as an RFC 822 string.  IETF RFC 2822 supercedes RFC 822 and its definition	 * can be found at the IETF Web site.	 *	 * @param   boolean  $local  True to return the date string in the local time zone, false to return it in GMT.	 *	 * @return  string   The date string in RFC 822 format.	 *	 * @link    http://www.ietf.org/rfc/rfc2822.txt	 * @since   11.1	 */	public function toRFC822($local = false)	{		return $this->format(DateTime::RFC2822, $local, false);	}	/**	 * Gets the date as UNIX time stamp.	 *	 * @return  integer  The date as a UNIX timestamp.	 *	 * @since   11.1	 */	public function toUnix()	{		return (int) parent::format('U');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Base this model on the backend version.require_once JPATH_ADMINISTRATOR.'/components/com_content/models/article.php';/** * Content Component Article Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelForm extends ContentModelArticle{	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication();		// Load state from the request.		$pk = $app->input->getInt('a_id');		$this->setState('article.id', $pk);		$this->setState('article.catid', $app->input->getInt('catid'));		$return = $app->input->get('return', null, 'base64');		$this->setState('return_page', base64_decode($return));		// Load the parameters.		$params	= $app->getParams();		$this->setState('params', $params);		$this->setState('layout', $app->input->get('layout'));	}	/**	 * Method to get article data.	 *	 * @param   integer	The id of the article.	 *	 * @return  mixed  Content item data object on success, false on failure.	 */	public function getItem($itemId = null)	{		$itemId = (int) (!empty($itemId)) ? $itemId : $this->getState('article.id');		// Get a row instance.		$table = $this->getTable();		// Attempt to load the row.		$return = $table->load($itemId);		// Check for a table object error.		if ($return === false && $table->getError())		{			$this->setError($table->getError());			return false;		}		$properties = $table->getProperties(1);		$value = JArrayHelper::toObject($properties, 'JObject');		// Convert attrib field to Registry.		$value->params = new JRegistry;		$value->params->loadString($value->attribs);		// Compute selected asset permissions.		$user	= JFactory::getUser();		$userId	= $user->get('id');		$asset	= 'com_content.article.'. $value->id;		// Check general edit permission first.		if ($user->authorise('core.edit', $asset))		{			$value->params->set('access-edit', true);		}		// Now check if edit.own is available.		elseif (!empty($userId) && $user->authorise('core.edit.own', $asset))		{			// Check for a valid user and that they are the owner.			if ($userId == $value->created_by)			{				$value->params->set('access-edit', true);			}		}		// Check edit state permission.		if ($itemId)		{			// Existing item			$value->params->set('access-change', $user->authorise('core.edit.state', $asset));		}		else		{			// New item.			$catId = (int) $this->getState('article.catid');			if ($catId)			{				$value->params->set('access-change', $user->authorise('core.edit.state', 'com_content.category.'.$catId));				$value->catid = $catId;			}			else			{				$value->params->set('access-change', $user->authorise('core.edit.state', 'com_content'));			}		}		$value->articletext = $value->introtext;		if (!empty($value->fulltext))		{			$value->articletext .= '<hr id="system-readmore" />'.$value->fulltext;		}		// Convert the metadata field to an array.		$registry = new JRegistry;		$registry->loadString($value->metadata);		$value->metadata = $registry->toArray();		if ($itemId)		{			$value->tags = new JHelperTags;			$value->tags->getTagIds($value->id, 'com_content.article');			$value->metadata['tags'] = $value->tags;		}		return $value;	}	/**	 * Get the return URL.	 *	 * @return  string	The return URL.	 * @since   1.6	 */	public function getReturnPage()	{		return base64_encode($this->getState('return_page'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Note: this view is intended only to be opened in a popup * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.5 */class ConfigControllerComponent extends JControllerLegacy{	/**	 * Class Constructor	 *	 * @param   array  $config		An optional associative array of configuration settings.	 * @return  void	 * @since   1.5	 */	public function __construct($config = array())	{		parent::__construct($config);		// Map the apply task to the save method.		$this->registerTask('apply', 'save');	}	/**	 * Cancel operation	 *	 * @return  void	 *	 * @since   3.0	 */	function cancel()	{		// Clean the session data.		$app = JFactory::getApplication();		$app->setUserState('com_config.config.global.data', null);		$return = $this->input->post->get('return', null, 'base64');		$redirect = 'index.php';		if (!empty($return))		{			$redirect = base64_decode($return);		}		$this->setRedirect($redirect);	}	/**	 * Save the configuration	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set FTP credentials, if given.		JClientHelper::setCredentialsFromRequest('ftp');		$app    = JFactory::getApplication();		$model  = $this->getModel('Component');		$form   = $model->getForm();		$data   = $this->input->get('jform', array(), 'array');		$id     = $this->input->getInt('id');		$option = $this->input->get('component');		// Check if the user is authorized to do this.		if (!JFactory::getUser()->authorise('core.admin', $option))		{			JFactory::getApplication()->redirect('index.php', JText::_('JERROR_ALERTNOAUTHOR'));			return;		}		$returnUri = $this->input->post->get('return', null, 'base64');		if (!empty($returnUri))		{			$redirect = '&return=' . urlencode($returnUri);		}		// Validate the posted data.		$return = $model->validate($form, $data);		// Check for validation errors.		if ($return === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_config.config.global.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_config&view=component&component=' . $option . $redirect, false));			return false;		}		// Attempt to save the configuration.		$data	= array(					'params'	=> $return,					'id'		=> $id,					'option'	=> $option					);		$return = $model->save($data);		// Check the return value.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('com_config.config.global.data', $data);			// Save failed, go back to the screen and display a notice.			$message = JText::sprintf('JERROR_SAVE_FAILED', $model->getError());			$this->setRedirect('index.php?option=com_config&view=component&component='  . $option . $redirect, $message, 'error');			return false;		}		// Set the redirect based on the task.		switch ($this->getTask())		{			case 'apply':				$message = JText::_('COM_CONFIG_SAVE_SUCCESS');				$this->setRedirect('index.php?option=com_config&view=component&component=' . $option . $redirect, $message);				break;			case 'save':			default:				$redirect = 'index.php';				if (!empty($returnUri))				{					$redirect = base64_decode($returnUri);				}				$this->setRedirect($redirect);				break;		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Supports a generic list of options. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldList extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'List';	/**	 * Method to get the field input markup for a generic list.	 * Use the multiple attribute to enable multiselect.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		// To avoid user's confusion, readonly="true" should imply disabled="true".		if ((string) $this->element['readonly'] == 'true' || (string) $this->element['disabled'] == 'true')		{			$attr .= ' disabled="disabled"';		}		$attr .= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$attr .= $this->multiple ? ' multiple="multiple"' : '';		$attr .= $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		// Get the field options.		$options = (array) $this->getOptions();		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('select.genericlist', $options, '', trim($attr), 'value', 'text', $this->value, $this->id);			$html[] = '<input type="hidden" name="' . $this->name . '" value="' . $this->value . '"/>';		}		// Create a regular list.		else		{			$html[] = JHtml::_('select.genericlist', $options, $this->name, trim($attr), 'value', 'text', $this->value, $this->id);		}		return implode($html);	}	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		foreach ($this->element->children() as $option)		{			// Only add <option /> elements.			if ($option->getName() != 'option')			{				continue;			}			// Create a new option object based on the <option /> element.			$tmp = JHtml::_(				'select.option', (string) $option['value'],				JText::alt(trim((string) $option), preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)), 'value', 'text',				((string) $option['disabled'] == 'true')			);			// Set some option attributes.			$tmp->class = (string) $option['class'];			// Set some JavaScript option attributes.			$tmp->onclick = (string) $option['onclick'];			// Add the option object to the result set.			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Content.pagenavigation * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Pagenavigation plugin class. * * @package     Joomla.Plugin * @subpackage  Content.pagenavigation * @since       1.5 */class PlgContentPagenavigation extends JPlugin{	/**	 * @since   1.6	 */	public function onContentBeforeDisplay($context, &$row, &$params, $page = 0)	{		$app = JFactory::getApplication();		$view = $app->input->get('view');		$print = $app->input->getBool('print');		if ($print)		{			return false;		}		if ($params->get('show_item_navigation') && ($context == 'com_content.article') && ($view == 'article'))		{			$db = JFactory::getDbo();			$user = JFactory::getUser();			$lang = JFactory::getLanguage();			$nullDate = $db->getNullDate();			$date = JFactory::getDate();			$now = $date->toSql();			$uid = $row->id;			$option = 'com_content';			$canPublish = $user->authorise('core.edit.state', $option . '.article.' . $row->id);			// The following is needed as different menu items types utilise a different param to control ordering.			// For Blogs the `orderby_sec` param is the order controlling param.			// For Table and List views it is the `orderby` param.			$params_list = $params->toArray();			if (array_key_exists('orderby_sec', $params_list))			{				$order_method = $params->get('orderby_sec', '');			}			else			{				$order_method = $params->get('orderby', '');			}			// Additional check for invalid sort ordering.			if ($order_method == 'front')			{				$order_method = '';			}			// Determine sort order.			switch ($order_method)			{				case 'date' :					$orderby = 'a.created';					break;				case 'rdate' :					$orderby = 'a.created DESC';					break;				case 'alpha' :					$orderby = 'a.title';					break;				case 'ralpha' :					$orderby = 'a.title DESC';					break;				case 'hits' :					$orderby = 'a.hits';					break;				case 'rhits' :					$orderby = 'a.hits DESC';					break;				case 'order' :					$orderby = 'a.ordering';					break;				case 'author' :					$orderby = 'a.created_by_alias, u.name';					break;				case 'rauthor' :					$orderby = 'a.created_by_alias DESC, u.name DESC';					break;				case 'front' :					$orderby = 'f.ordering';					break;				default :					$orderby = 'a.ordering';					break;			}			$xwhere = ' AND (a.state = 1 OR a.state = -1)' .				' AND (publish_up = ' . $db->quote($nullDate) . ' OR publish_up <= ' . $db->quote($now) . ')' .				' AND (publish_down = ' . $db->quote($nullDate) . ' OR publish_down >= ' . $db->quote($now) . ')';			// Array of articles in same category correctly ordered.			$query = $db->getQuery(true);			// Sqlsrv changes			$case_when = ' CASE WHEN ';			$case_when .= $query->charLength('a.alias', '!=', '0');			$case_when .= ' THEN ';			$a_id = $query->castAsChar('a.id');			$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');			$case_when .= ' ELSE ';			$case_when .= $a_id . ' END as slug';			$case_when1 = ' CASE WHEN ';			$case_when1 .= $query->charLength('cc.alias', '!=', '0');			$case_when1 .= ' THEN ';			$c_id = $query->castAsChar('cc.id');			$case_when1 .= $query->concatenate(array($c_id, 'cc.alias'), ':');			$case_when1 .= ' ELSE ';			$case_when1 .= $c_id . ' END as catslug';			$query->select('a.id,' . $case_when . ',' . $case_when1)				->from('#__content AS a')				->join('LEFT', '#__categories AS cc ON cc.id = a.catid')				->where(					'a.catid = ' . (int) $row->catid . ' AND a.state = ' . (int) $row->state						. ($canPublish ? '' : ' AND a.access = ' . (int) $row->access) . $xwhere				);			$query->order($orderby);			if ($app->isSite() && $app->getLanguageFilter())			{				$query->where('a.language in (' . $db->quote($lang->getTag()) . ',' . $db->quote('*') . ')');			}			$db->setQuery($query);			$list = $db->loadObjectList('id');			// This check needed if incorrect Itemid is given resulting in an incorrect result.			if (!is_array($list))			{				$list = array();			}			reset($list);			// Location of current content item in array list.			$location = array_search($uid, array_keys($list));			$rows = array_values($list);			$row->prev = null;			$row->next = null;			if ($location - 1 >= 0)			{				// The previous content item cannot be in the array position -1.				$row->prev = $rows[$location - 1];			}			if (($location + 1) < count($rows))			{				// The next content item cannot be in an array position greater than the number of array postions.				$row->next = $rows[$location + 1];			}			$pnSpace = "";			if (JText::_('JGLOBAL_LT') || JText::_('JGLOBAL_GT'))			{				$pnSpace = " ";			}			if ($row->prev)			{				$row->prev = JRoute::_(ContentHelperRoute::getArticleRoute($row->prev->slug, $row->prev->catslug));			}			else			{				$row->prev = '';			}			if ($row->next)			{				$row->next = JRoute::_(ContentHelperRoute::getArticleRoute($row->next->slug, $row->next->catslug));			}			else			{				$row->next = '';			}			// Output.			if ($row->prev || $row->next)			{				// Get the path for the layout file				$path = JPluginHelper::getLayoutPath('content', 'pagenavigation');				// Render the pagenav				ob_start();				include $path;				$row->pagination = ob_get_clean();				$row->paginationposition = $this->params->get('position', 1);				// This will default to the 1.5 and 1.6-1.7 behavior.				$row->paginationrelative = $this->params->get('relative', 0);			}		}		return;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items  = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_WEBLINKS_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Editors-xtd.image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Editor Image buton * * @package     Joomla.Plugin * @subpackage  Editors-xtd.image * @since       1.5 */class PlgButtonImage extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Display the button	 *	 * @return array A two element array of (imageName, textToInsert)	 */	public function onDisplay($name, $asset, $author)	{		$app = JFactory::getApplication();		$user = JFactory::getUser();		$extension = $app->input->get('option');		if ($asset == '')		{			$asset = $extension;		}		if (	$user->authorise('core.edit', $asset)			||	$user->authorise('core.create', $asset)			||	(count($user->getAuthorisedCategories($asset, 'core.create')) > 0)			||	($user->authorise('core.edit.own', $asset) && $author == $user->id)			||	(count($user->getAuthorisedCategories($extension, 'core.edit')) > 0)			||	(count($user->getAuthorisedCategories($extension, 'core.edit.own')) > 0 && $author == $user->id)		)		{			$link = 'index.php?option=com_media&amp;view=images&amp;tmpl=component&amp;e_name=' . $name . '&amp;asset=' . $asset . '&amp;author=' . $author;			JHtml::_('behavior.modal');			$button = new JObject;			$button->modal = true;			$button->link = $link;			$button->text = JText::_('PLG_IMAGE_BUTTON_IMAGE');			$button->name = 'picture';			$button->options = "{handler: 'iframe', size: {x: 800, y: 500}}";			return $button;		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));JText::script('COM_USERS_GROUPS_CONFIRM_DELETE');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'groups.delete')		{			var f = document.adminForm;			var cb='';<?php foreach ($this->items as $i => $item):?><?php if ($item->user_count > 0):?>			cb = f['cb'+<?php echo $i;?>];			if (cb && cb.checked)			{				if (confirm(Joomla.JText._('COM_USERS_GROUPS_CONFIRM_DELETE')))				{					Joomla.submitform(task);				}				return;			}<?php endif;?><?php endforeach;?>		}		Joomla.submitform(task);	}</script><form action="<?php echo JRoute::_('index.php?option=com_users&view=groups');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_GROUPS_LABEL'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_GROUPS'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn tip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="left">						<?php echo JText::_('COM_USERS_HEADING_GROUP_TITLE'); ?>					</th>					<th width="20%">						<?php echo JText::_('COM_USERS_HEADING_USERS_IN_GROUP'); ?>					</th>					<th width="5%">						<?php echo JText::_('JGRID_HEADING_ID'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="4">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create', 'com_users');				$canEdit   = $user->authorise('core.edit',    'com_users');				// If this group is super admin and this user is not super admin, $canEdit is false				if (!$user->authorise('core.admin') && (JAccess::checkGroup($item->id, 'core.admin')))				{					$canEdit = false;				}				$canChange	= $user->authorise('core.edit.state',	'com_users');			?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php if ($canEdit) : ?>							<?php echo JHtml::_('grid.id', $i, $item->id); ?>						<?php endif; ?>					</td>					<td>						<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>						<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=group.edit&id='.$item->id);?>">							<?php echo $this->escape($item->title); ?></a>						<?php else : ?>							<?php echo $this->escape($item->title); ?>						<?php endif; ?>						<?php if (JDEBUG) : ?>							<div class="small"><a href="<?php echo JRoute::_('index.php?option=com_users&view=debuggroup&group_id='.(int) $item->id);?>">							<?php echo JText::_('COM_USERS_DEBUG_GROUP');?></a></div>						<?php endif; ?>					</td>					<td class="center">						<?php echo $item->user_count ? $item->user_count : ''; ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of article records. * * @package     Joomla.Administrator * @subpackage  com_content */class ContentModelArticles extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @since   1.6	 * @see     JController	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'catid', 'a.catid', 'category_title',				'state', 'a.state',				'access', 'a.access', 'access_level',				'created', 'a.created',				'created_by', 'a.created_by',				'created_by_alias', 'a.created_by_alias',				'ordering', 'a.ordering',				'featured', 'a.featured',				'language', 'a.language',				'hits', 'a.hits',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',			);			$app = JFactory::getApplication();			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$config['filter_fields'][] = 'association';			}		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		// Adjust the context to support modal layouts.		if ($layout = $app->input->get('layout'))		{			$this->context .= '.' . $layout;		}		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$access = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$authorId = $app->getUserStateFromRequest($this->context . '.filter.author_id', 'filter_author_id');		$this->setState('filter.author_id', $authorId);		$published = $this->getUserStateFromRequest($this->context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id');		$this->setState('filter.category_id', $categoryId);		$level = $this->getUserStateFromRequest($this->context . '.filter.level', 'filter_level', 0, 'int');		$this->setState('filter.level', $level);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// force a language		$forcedLanguage = $app->input->get('forcedLanguage');		if (!empty($forcedLanguage))		{			$this->setState('filter.language', $forcedLanguage);			$this->setState('filter.forcedLanguage', $forcedLanguage);		}		$tag = $this->getUserStateFromRequest($this->context . '.filter.tag', 'filter_tag', '');		$this->setState('filter.tag', $tag);		// List state information.		parent::populateState('a.title', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.author_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.checked_out, a.checked_out_time, a.catid' .					', a.state, a.access, a.created, a.created_by, a.created_by_alias, a.ordering, a.featured, a.language, a.hits' .					', a.publish_up, a.publish_down'			)		);		$query->from('#__content AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the users for the author.		$query->select('ua.name AS author_name')			->join('LEFT', '#__users AS ua ON ua.id = a.created_by');		// Join over the associations.		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$query->select('COUNT(asso2.id)>1 as association')				->join('LEFT', '#__associations AS asso ON asso.id = a.id AND asso.context=' . $db->quote('com_content.item'))				->join('LEFT', '#__associations AS asso2 ON asso2.key = asso.key')				->group('a.id');		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state = 0 OR a.state = 1)');		}		// Filter by a single or group of categories.		$baselevel = 1;		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$cat_tbl = JTable::getInstance('Category', 'JTable');			$cat_tbl->load($categoryId);			$rgt = $cat_tbl->rgt;			$lft = $cat_tbl->lft;			$baselevel = (int) $cat_tbl->level;			$query->where('c.lft >= ' . (int) $lft)				->where('c.rgt <= ' . (int) $rgt);		}		elseif (is_array($categoryId))		{			JArrayHelper::toInteger($categoryId);			$categoryId = implode(',', $categoryId);			$query->where('a.catid IN (' . $categoryId . ')');		}		// Filter on the level.		if ($level = $this->getState('filter.level'))		{			$query->where('c.level <= ' . ((int) $level + (int) $baselevel - 1));		}		// Filter by author		$authorId = $this->getState('filter.author_id');		if (is_numeric($authorId))		{			$type = $this->getState('filter.author_id.include', true) ? '= ' : '<>';			$query->where('a.created_by ' . $type . (int) $authorId);		}		// Filter by search in title.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'author:') === 0)			{				$search = $db->quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(ua.name LIKE ' . $search . ' OR ua.username LIKE ' . $search . ')');			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Filter by a single tag.		$tagId = $this->getState('filter.tag');		if (is_numeric($tagId))		{			$query->where($db->quoteName('tagmap.tag_id') . ' = ' . (int) $tagId)				->join(					'LEFT', $db->quoteName('#__contentitem_tag_map', 'tagmap')					. ' ON ' . $db->quoteName('tagmap.content_item_id') . ' = ' . $db->quoteName('a.id')					. ' AND ' . $db->quoteName('tagmap.type_alias') . ' = ' . $db->quote('com_content.article')				);		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering', 'a.title');		$orderDirn = $this->state->get('list.direction', 'asc');		if ($orderCol == 'a.ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		//sqlsrv change		if ($orderCol == 'language')		{			$orderCol = 'l.title';		}		if ($orderCol == 'access_level')		{			$orderCol = 'ag.title';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		// echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Build a list of authors	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	public function getAuthors()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Construct the query		$query->select('u.id AS value, u.name AS text')			->from('#__users AS u')			->join('INNER', '#__content AS c ON c.created_by = u.id')			->group('u.id, u.name')			->order('u.name');		// Setup the query		$db->setQuery($query);		// Return the result		return $db->loadObjectList();	}	/**	 * Method to get a list of articles.	 * Overridden to add a check for access levels.	 *	 * @return  mixed  An array of data items on success, false on failure.	 * @since   1.6.1	 */	public function getItems()	{		$items = parent::getItems();		$app = JFactory::getApplication();		if ($app->isSite())		{			$user = JFactory::getUser();			$groups = $user->getAuthorisedViewLevels();			for ($x = 0, $count = count($items); $x < $count; $x++)			{				//Check the access level. Remove articles the user shouldn't see				if (!in_array($items[$x]->access, $groups))				{					unset($items[$x]);				}			}		}		return $items;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_ADMINISTRATOR.'/components/com_users/models/user.php';/** * User model. * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminModelProfile extends UsersModelUser{	/**	 * Method to get the record form.	 *	 * @param   array    $data      An optional array of data for the form to interogate.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  JForm    A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_admin.profile', 'profile', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		if (!JComponentHelper::getParams('com_users')->get('change_login_name'))		{			$form->setFieldAttribute('username', 'required', 'false');			$form->setFieldAttribute('username', 'readonly', 'true');			$form->setFieldAttribute('username', 'description', 'COM_ADMIN_USER_FIELD_NOCHANGE_USERNAME_DESC');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.edit.user.data', array());		if (empty($data))		{			$data = $this->getItem();		}		// Load the users plugins.		JPluginHelper::importPlugin('user');		$this->preprocessData('com_admin.profile', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   1.6	 */	public function getItem($pk = null)	{		$user = JFactory::getUser();		return parent::getItem($user->get('id'));	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function save($data)	{		$user = JFactory::getUser();		unset($data['id']);		unset($data['groups']);		unset($data['sendEmail']);		unset($data['block']);		// Bind the data.		if (!$user->bind($data))		{			$this->setError($user->getError());			return false;		}		$user->groups = null;		// Store the data.		if (!$user->save())		{			$this->setError($user->getError());			return false;		}		$this->setState('user.id', $user->id);		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersViewTracks extends JViewLegacy{	/**	 * Display the view	 */	public function display($tpl = null)	{		$basename		= $this->get('BaseName');		$filetype		= $this->get('FileType');		$mimetype		= $this->get('MimeType');		$content		= $this->get('Content');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$document = JFactory::getDocument();		$document->setMimeEncoding($mimetype);		JResponse::setHeader('Content-disposition', 'attachment; filename="'.$basename.'.'.$filetype.'"; creation-date="'.JFactory::getDate()->toRFC822().'"', true);		echo $content;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Libraries * @subpackage  Form * @since       3.1 */class JFormFieldContenttype extends JFormFieldList{	/**	 * A flexible tag list that respects access controls	 *	 * @var    string	 * @since  3.1	 */	public $type = 'Contenttype';	/**	 * Method to get the field input for a list of content types.	 *	 * @return  string  The field input.	 *	 * @since   3.1	 */	protected function getInput()	{		if (!is_array($this->value))		{			if (is_object($this->value))			{				$this->value = $this->value->tags;			}			if (is_string($this->value))			{				$this->value = explode(',', $this->value);			}		}		$input = parent::getInput();		return $input;	}	/**	 * Method to get a list of content types	 *	 * @return  array  The field option objects.	 *	 * @since   3.1	 */	protected function getOptions()	{		$options = array();		$name = (string) $this->element['name'];		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('a.type_id AS value, a.type_title AS text')			->from('#__content_types AS a')			->order('a.type_title ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			return false;		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		foreach ($options as $option)		{			$option->text = mb_strtoupper(str_replace(' ', '_', $option->text), 'UTF-8');			$option->text = 'COM_TAGS_CONTENT_TYPE_' . $option->text;			$option->text = JText::_($option->text);		}		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Stream Interface * * The Joomla! stream interface is designed to handle files as streams * where as the legacy JFile static class treated files in a rather * atomic manner. * * @package     Joomla.Platform * @subpackage  FileSystem * * This class adheres to the stream wrapper operations: * * @see         http://php.net/manual/en/function.stream-get-wrappers.php * @see         http://php.net/manual/en/intro.stream.php PHP Stream Manual * @see         http://php.net/manual/en/wrappers.php Stream Wrappers * @see         http://php.net/manual/en/filters.php Stream Filters * @see         http://php.net/manual/en/transports.php Socket Transports (used by some options, particularly HTTP proxy) * @since       11.1 */class JStream extends JObject{	// Publicly settable vars (protected to let our parent read them)	/**	 * File Mode	 * @var    integer	 * @since  11.1	 * */	protected $filemode = 0644;	/**	 * Directory Mode	 * @var   integer	 * @since  11.1	 * */	protected $dirmode = 0755;	/**	 * Default Chunk Size	 * @var    integer	 * @since  11.1	 */	protected $chunksize = 8192;	/**	 * Filename	 * @var    string	 * @since  11.1	 */	protected $filename;	/**	 * Prefix of the connection for writing	 * @var    string	 * @since  11.1	 */	protected $writeprefix;	/**	 * Prefix of the connection for reading	 * @var    string	 * @since  11.1	 */	protected $readprefix;	/**	 *	 *Read Processing method	 * @var   string  gz, bz, f	 * If a scheme is detected, fopen will be defaulted	 * To use compression with a network stream use a filter	 * @since  11.1	 */	protected $processingmethod = 'f';	/**	 * Filters applied to the current stream	 * @var    array	 * @since  11.1	 */	protected $filters = array();	/**	 * File Handle	 * @var    array	 * @since  12.1	 */	protected $fh;	/**	 * File size	 * @var    integer	 * @since  12.1	 */	protected $filesize;	/**	 *Context to use when opening the connection	 * @var	 * @since  12.1	 */	protected $context = null;	/**	 * Context options; used to rebuild the context	 * @var	 * @since  12.1	 */	protected $contextOptions;	/**	 * The mode under which the file was opened	 * @var	 * @since  12.1	 */	protected $openmode;	/**	 * Constructor	 *	 * @param   string  $writeprefix  Prefix of the stream (optional). Unlike the JPATH_*, this has a final path separator!	 * @param   string  $readprefix   The read prefix (optional).	 * @param   array   $context      The context options (optional).	 *	 * @since   11.1	 */	public function __construct($writeprefix = '', $readprefix = '', $context = array())	{		$this->writeprefix = $writeprefix;		$this->readprefix = $readprefix;		$this->contextOptions = $context;		$this->_buildContext();	}	/**	 * Destructor	 *	 * @since   11.1	 */	public function __destruct()	{		// Attempt to close on destruction if there is a file handle		if ($this->fh)		{			@$this->close();		}	}	/**	 * Generic File Operations	 *	 * Open a stream with some lazy loading smarts	 *	 * @param   string    $filename              Filename	 * @param   string    $mode                  Mode string to use	 * @param   boolean   $use_include_path      Use the PHP include path	 * @param   resource  $context               Context to use when opening	 * @param   boolean   $use_prefix            Use a prefix to open the file	 * @param   boolean   $relative              Filename is a relative path (if false, strips JPATH_ROOT to make it relative)	 * @param   boolean   $detectprocessingmode  Detect the processing method for the file and use the appropriate function	 *                                           to handle output automatically	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function open($filename, $mode = 'r', $use_include_path = false, $context = null,		$use_prefix = false, $relative = false, $detectprocessingmode = false)	{		$filename = $this->_getFilename($filename, $mode, $use_prefix, $relative);		if (!$filename)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILENAME'));			return false;		}		$this->filename = $filename;		$this->openmode = $mode;		$url = parse_url($filename);		$retval = false;		if (isset($url['scheme']))		{			// If we're dealing with a Joomla! stream, load it			if (JFilesystemHelper::isJoomlaStream($url['scheme']))			{				require_once __DIR__ . '/streams/' . $url['scheme'] . '.php';			}			// We have a scheme! force the method to be f			$this->processingmethod = 'f';		}		elseif ($detectprocessingmode)		{			$ext = strtolower(JFile::getExt($this->filename));			switch ($ext)			{				case 'tgz':				case 'gz':				case 'gzip':					$this->processingmethod = 'gz';					break;				case 'tbz2':				case 'bz2':				case 'bzip2':					$this->processingmethod = 'bz';					break;				default:					$this->processingmethod = 'f';					break;			}		}		// Capture PHP errors		$php_errormsg = 'Error Unknown whilst opening a file';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		// Decide which context to use:		switch ($this->processingmethod)		{			// Gzip doesn't support contexts or streams			case 'gz':				$this->fh = gzopen($filename, $mode, $use_include_path);				break;			// Bzip2 is much like gzip except it doesn't use the include path			case 'bz':				$this->fh = bzopen($filename, $mode);				break;			// Fopen can handle streams			case 'f':			default:				// One supplied at open; overrides everything				if ($context)				{					$this->fh = fopen($filename, $mode, $use_include_path, $context);				}				// One provided at initialisation				elseif ($this->context)				{					$this->fh = fopen($filename, $mode, $use_include_path, $this->context);				}				// No context; all defaults				else				{					$this->fh = fopen($filename, $mode, $use_include_path);				}				break;		}		if (!$this->fh)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Attempt to close a file handle	 *	 * Will return false if it failed and true on success	 * If the file is not open the system will return true, this function destroys the file handle as well	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function close()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return true;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzclose($this->fh);				break;			case 'bz':				$res = bzclose($this->fh);				break;			case 'f':			default:				$res = fclose($this->fh);				break;		}		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			// Reset this			$this->fh = null;			$retval = true;		}		// If we wrote, chmod the file after it's closed		if ($this->openmode[0] == 'w')		{			$this->chmod();		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Work out if we're at the end of the file for a stream	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function eof()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzeof($this->fh);				break;			case 'bz':			case 'f':			default:				$res = feof($this->fh);				break;		}		if ($php_errormsg)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $res;	}	/**	 * Retrieve the file size of the path	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function filesize()	{		if (!$this->filename)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$res = @filesize($this->filename);		if (!$res)		{			$tmp_error = '';			if ($php_errormsg)			{				// Something went wrong.				// Store the error in case we need it.				$tmp_error = $php_errormsg;			}			$res = JFilesystemHelper::remotefsize($this->filename);			if (!$res)			{				if ($tmp_error)				{					// Use the php_errormsg from before					$this->setError($tmp_error);				}				else				{					// Error but nothing from php? How strange! Create our own					$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_SIZE'));				}			}			else			{				$this->filesize = $res;				$retval = $res;			}		}		else		{			$this->filesize = $res;			$retval = $res;		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Get a line from the stream source.	 *	 * @param   integer  $length  The number of bytes (optional) to read.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function gets($length = 0)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = $length ? gzgets($this->fh, $length) : gzgets($this->fh);				break;			case 'bz':			case 'f':			default:				$res = $length ? fgets($this->fh, $length) : fgets($this->fh);				break;		}		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			$retval = $res;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Read a file	 *	 * Handles user space streams appropriately otherwise any read will return 8192	 *	 * @param   integer  $length  Length of data to read	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.fread.php	 * @since   11.1	 */	public function read($length = 0)	{		if (!$this->filesize && !$length)		{			// Get the filesize			$this->filesize();			if (!$this->filesize)			{				// Set it to the biggest and then wait until eof				$length = -1;			}			else			{				$length = $this->filesize;			}		}		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = 'Error Unknown';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$remaining = $length;		do		{			// Do chunked reads where relevant			switch ($this->processingmethod)			{				case 'bz':					$res = ($remaining > 0) ? bzread($this->fh, $remaining) : bzread($this->fh, $this->chunksize);					break;				case 'gz':					$res = ($remaining > 0) ? gzread($this->fh, $remaining) : gzread($this->fh, $this->chunksize);					break;				case 'f':				default:					$res = ($remaining > 0) ? fread($this->fh, $remaining) : fread($this->fh, $this->chunksize);					break;			}			if (!$res)			{				$this->setError($php_errormsg);				// Jump from the loop				$remaining = 0;			}			else			{				if (!$retval)				{					$retval = '';				}				$retval .= $res;				if (!$this->eof())				{					$len = strlen($res);					$remaining -= $len;				}				else				{					// If it's the end of the file then we've nothing left to read; reset remaining and len					$remaining = 0;					$length = strlen($retval);				}			}		}		while ($remaining || !$length);		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Seek the file	 *	 * Note: the return value is different to that of fseek	 *	 * @param   integer  $offset  Offset to use when seeking.	 * @param   integer  $whence  Seek mode to use.	 *	 * @return  boolean  True on success, false on failure	 *	 * @see http://php.net/manual/en/function.fseek.php	 * @since   11.1	 */	public function seek($offset, $whence = SEEK_SET)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gzseek($this->fh, $offset, $whence);				break;			case 'bz':			case 'f':			default:				$res = fseek($this->fh, $offset, $whence);				break;		}		// Seek, interestingly, returns 0 on success or -1 on failure.		if ($res == -1)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Returns the current position of the file read/write pointer.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function tell()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		switch ($this->processingmethod)		{			case 'gz':				$res = gztell($this->fh);				break;			case 'bz':			case 'f':			default:				$res = ftell($this->fh);				break;		}		// May return 0 so check if it's really false		if ($res === false)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		// Return the result		return $res;	}	/**	 * File write	 *	 * Whilst this function accepts a reference, the underlying fwrite	 * will do a copy! This will roughly double the memory allocation for	 * any write you do. Specifying chunked will get around this by only	 * writing in specific chunk sizes. This defaults to 8192 which is a	 * sane number to use most of the time (change the default with	 * JStream::set('chunksize', newsize);)	 * Note: This doesn't support gzip/bzip2 writing like reading does	 *	 * @param   string   &$string  Reference to the string to write.	 * @param   integer  $length   Length of the string to write.	 * @param   integer  $chunk    Size of chunks to write in.	 *	 * @return  boolean	 *	 * @see     http://php.net/manual/en/function.fwrite.php	 * @since   11.1	 */	public function write(&$string, $length = 0, $chunk = 0)	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		// If the length isn't set, set it to the length of the string.		if (!$length)		{			$length = strlen($string);		}		// If the chunk isn't set, set it to the default.		if (!$chunk)		{			$chunk = $this->chunksize;		}		$retval = true;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$remaining = $length;		$start = 0;		do		{			// If the amount remaining is greater than the chunk size, then use the chunk			$amount = ($remaining > $chunk) ? $chunk : $remaining;			$res = fwrite($this->fh, substr($string, $start), $amount);			// Returns false on error or the number of bytes written			if ($res === false)			{				// Returned error				$this->setError($php_errormsg);				$retval = false;				$remaining = 0;			}			elseif ($res === 0)			{				// Wrote nothing?				$remaining = 0;				$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_NO_DATA_WRITTEN'));			}			else			{				// Wrote something				$start += $amount;				$remaining -= $res;			}		}		while ($remaining);		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Chmod wrapper	 *	 * @param   string  $filename  File name.	 * @param   mixed   $mode      Mode to use.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function chmod($filename = '', $mode = 0)	{		if (!$filename)		{			if (!isset($this->filename) || !$this->filename)			{				$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILENAME'));				return false;			}			$filename = $this->filename;		}		// If no mode is set use the default		if (!$mode)		{			$mode = $this->filemode;		}		$retval = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$sch = parse_url($filename, PHP_URL_SCHEME);		// Scheme specific options; ftp's chmod support is fun.		switch ($sch)		{			case 'ftp':			case 'ftps':				$res = JFilesystemHelper::ftpChmod($filename, $mode);				break;			default:				$res = chmod($filename, $mode);				break;		}		// Seek, interestingly, returns 0 on success or -1 on failure		if (!$res)		{			$this->setError($php_errormsg);		}		else		{			$retval = true;		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		// Return the result		return $retval;	}	/**	 * Get the stream metadata	 *	 * @return  array  header/metadata	 *	 * @see     http://php.net/manual/en/function.stream-get-meta-data.php	 * @since   11.1	 */	public function get_meta_data()	{		if (!$this->fh)		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_FILE_NOT_OPEN'));			return false;		}		return stream_get_meta_data($this->fh);	}	/**	 * Stream contexts	 * Builds the context from the array	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function _buildContext()	{		// According to the manual this always works!		if (count($this->contextOptions))		{			$this->context = @stream_context_create($this->contextOptions);		}		else		{			$this->context = null;		}	}	/**	 * Updates the context to the array	 *	 * Format is the same as the options for stream_context_create	 *	 * @param   array  $context  Options to create the context with	 *	 * @return  void	 *	 * @see       http://php.net/stream_context_create	 * @since   11.1	 */	public function setContextOptions($context)	{		$this->contextOptions = $context;		$this->_buildContext();	}	/**	 * Adds a particular options to the context	 *	 * @param   string  $wrapper  The wrapper to use	 * @param   string  $name     The option to set	 * @param   string  $value    The value of the option	 *	 * @return  void	 *	 * @see     http://php.net/stream_context_create Stream Context Creation	 * @see     http://php.net/manual/en/context.php Context Options for various streams	 * @since   11.1	 */	public function addContextEntry($wrapper, $name, $value)	{		$this->contextOptions[$wrapper][$name] = $value;		$this->_buildContext();	}	/**	 * Deletes a particular setting from a context	 *	 * @param   string  $wrapper  The wrapper to use	 * @param   string  $name     The option to unset	 *	 * @return  void	 *	 * @see     http://php.net/stream_context_create	 * @since   11.1	 */	public function deleteContextEntry($wrapper, $name)	{		// Check whether the wrapper is set		if (isset($this->contextOptions[$wrapper]))		{			// Check that entry is set for that wrapper			if (isset($this->contextOptions[$wrapper][$name]))			{				// Unset the item				unset($this->contextOptions[$wrapper][$name]);				// Check that there are still items there				if (!count($this->contextOptions[$wrapper]))				{					// Clean up an empty wrapper context option					unset($this->contextOptions[$wrapper]);				}			}		}		// Rebuild the context and apply it to the stream		$this->_buildContext();	}	/**	 * Applies the current context to the stream	 *	 * Use this to change the values of the context after you've opened a stream	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function applyContextToStream()	{		$retval = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = 'Unknown error setting context option';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$retval = @stream_context_set_option($this->fh, $this->contextOptions);			if (!$retval)			{				$this->setError($php_errormsg);			}			// Restore error tracking to what it was before			ini_set('track_errors', $track_errors);		}		return $retval;	}	/**	 * Stream filters	 * Append a filter to the chain	 *	 * @param   string   $filtername  The key name of the filter.	 * @param   integer  $read_write  Optional. Defaults to STREAM_FILTER_READ.	 * @param   array    $params      An array of params for the stream_filter_append call.	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.stream-filter-append.php	 * @since   11.1	 */	public function appendFilter($filtername, $read_write = STREAM_FILTER_READ, $params = array())	{		$res = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = '';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$res = @stream_filter_append($this->fh, $filtername, $read_write, $params);			if (!$res && $php_errormsg)			{				$this->setError($php_errormsg);			}			else			{				$this->filters[] = &$res;			}			// Restore error tracking to what it was before.			ini_set('track_errors', $track_errors);		}		return $res;	}	/**	 * Prepend a filter to the chain	 *	 * @param   string   $filtername  The key name of the filter.	 * @param   integer  $read_write  Optional. Defaults to STREAM_FILTER_READ.	 * @param   array    $params      An array of params for the stream_filter_prepend call.	 *	 * @return  mixed	 *	 * @see     http://php.net/manual/en/function.stream-filter-prepend.php	 * @since   11.1	 */	public function prependFilter($filtername, $read_write = STREAM_FILTER_READ, $params = array())	{		$res = false;		if ($this->fh)		{			// Capture PHP errors			$php_errormsg = '';			$track_errors = ini_get('track_errors');			ini_set('track_errors', true);			$res = @stream_filter_prepend($this->fh, $filtername, $read_write, $params);			if (!$res && $php_errormsg)			{				// Set the error msg				$this->setError($php_errormsg);			}			else			{				array_unshift($res, '');				$res[0] = &$this->filters;			}			// Restore error tracking to what it was before.			ini_set('track_errors', $track_errors);		}		return $res;	}	/**	 * Remove a filter, either by resource (handed out from the append or prepend function)	 * or via getting the filter list)	 *	 * @param   resource  &$resource  The resource.	 * @param   boolean   $byindex    The index of the filter.	 *	 * @return  boolean   Result of operation	 *	 * @since   11.1	 */	public function removeFilter(&$resource, $byindex = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		if ($byindex)		{			$res = stream_filter_remove($this->filters[$resource]);		}		else		{			$res = stream_filter_remove($resource);		}		if ($res && $php_errormsg)		{			$this->setError($php_errormsg);		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Copy a file from src to dest	 *	 * @param   string    $src         The file path to copy from.	 * @param   string    $dest        The file path to copy to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function copy($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$chmodDest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		// Since we're going to open the file directly we need to get the filename.		// We need to use the same prefix so force everything to write.		$src = $this->_getFilename($src, 'w', $use_prefix, $relative);		$dest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @copy($src, $dest, $context);		}		elseif ($this->context)		{			// Use the objects context			$res = @copy($src, $dest, $this->context);		}		else		{			// Don't use any context			$res = @copy($src, $dest);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg);		}		else		{			$this->chmod($chmodDest);		}		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Moves a file	 *	 * @param   string    $src         The file path to move from.	 * @param   string    $dest        The file path to move to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function move($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$src = $this->_getFilename($src, 'w', $use_prefix, $relative);		$dest = $this->_getFilename($dest, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @rename($src, $dest, $context);		}		elseif ($this->context)		{			// Use the object's context			$res = @rename($src, $dest, $this->context);		}		else		{			// Don't use any context			$res = @rename($src, $dest);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg());		}		$this->chmod($dest);		// Restore error tracking to what it was before		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Delete a file	 *	 * @param   string    $filename    The file path to delete.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function delete($filename, $context = null, $use_prefix = true, $relative = false)	{		$res = false;		// Capture PHP errors		$php_errormsg = '';		$track_errors = ini_get('track_errors');		ini_set('track_errors', true);		$filename = $this->_getFilename($filename, 'w', $use_prefix, $relative);		if ($context)		{			// Use the provided context			$res = @unlink($filename, $context);		}		elseif ($this->context)		{			// Use the object's context			$res = @unlink($filename, $this->context);		}		else		{			// Don't use any context			$res = @unlink($filename);		}		if (!$res && $php_errormsg)		{			$this->setError($php_errormsg());		}		// Restore error tracking to what it was before.		ini_set('track_errors', $track_errors);		return $res;	}	/**	 * Upload a file	 *	 * @param   string    $src         The file path to copy from (usually a temp folder).	 * @param   string    $dest        The file path to copy to.	 * @param   resource  $context     A valid context resource (optional) created with stream_context_create.	 * @param   boolean   $use_prefix  Controls the use of a prefix (optional).	 * @param   boolean   $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function upload($src, $dest, $context = null, $use_prefix = true, $relative = false)	{		if (is_uploaded_file($src))		{			// Make sure it's an uploaded file			return $this->copy($src, $dest, $context, $use_prefix, $relative);		}		else		{			$this->setError(JText::_('JLIB_FILESYSTEM_ERROR_STREAMS_NOT_UPLOADED_FILE'));			return false;		}	}	/**	 * Writes a chunk of data to a file.	 *	 * @param   string  $filename  The file name.	 * @param   string  &$buffer   The data to write to the file.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function writeFile($filename, &$buffer)	{		if ($this->open($filename, 'w'))		{			$result = $this->write($buffer);			$this->chmod();			$this->close();			return $result;		}		return false;	}	/**	 * Determine the appropriate 'filename' of a file	 *	 * @param   string   $filename    Original filename of the file	 * @param   string   $mode        Mode string to retrieve the filename	 * @param   boolean  $use_prefix  Controls the use of a prefix	 * @param   boolean  $relative    Determines if the filename given is relative. Relative paths do not have JPATH_ROOT stripped.	 *	 * @return  string	 *	 * @since   11.1	 */	public function _getFilename($filename, $mode, $use_prefix, $relative)	{		if ($use_prefix)		{			// Get rid of binary or t, should be at the end of the string			$tmode = trim($mode, 'btf123456789');			// Check if it's a write mode then add the appropriate prefix			// Get rid of JPATH_ROOT (legacy compat) along the way			if (in_array($tmode, JFilesystemHelper::getWriteModes()))			{				if (!$relative && $this->writeprefix)				{					$filename = str_replace(JPATH_ROOT, '', $filename);				}				$filename = $this->writeprefix . $filename;			}			else			{				if (!$relative && $this->readprefix)				{					$filename = str_replace(JPATH_ROOT, '', $filename);				}				$filename = $this->readprefix . $filename;			}		}		return $filename;	}	/**	 * Return the internal file handle	 *	 * @return  File handler	 *	 * @since   11.1	 */	public function getFileHandle()	{		return $this->fh;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="categories-list<?php echo $displayData->pageclass_sfx;?>"><?php if ($displayData->params->get('show_page_heading')) : ?><h1>	<?php echo $displayData->escape($displayData->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($displayData->params->get('show_base_description')) : ?>	<?php //If there is a description in the menu parameters use that; ?>		<?php if($displayData->params->get('categories_description')) : ?>			<div class="category-desc base-desc">			<?php echo JHtml::_('content.prepare', $displayData->params->get('categories_description'), '',  $displayData->extension . '.categories'); ?>			</div>		<?php else : ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($displayData->parent->description) : ?>				<div class="category-desc base-desc">					<?php echo JHtml::_('content.prepare', $displayData->parent->description, '', $displayData->parent->extension . '.categories'); ?>				</div>			<?php endif; ?>		<?php endif; ?>	<?php endif; ?>
<?php/** * @package     Joomla.Plugin * @subpackage  User.profile * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * An example custom profile plugin. * * @package     Joomla.Plugin * @subpackage  User.profile * @since       1.6 */class PlgUserProfile extends JPlugin{	/**	 * Date of birth.	 *	 * @var    string	 * @since  3.1	 */	private $_date = '';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Constructor	 *	 * @param   object  $subject  The object to observe	 * @param   array   $config   An array that holds the plugin configuration	 *	 * @since   1.5	 */	public function __construct(& $subject, $config)	{		parent::__construct($subject, $config);		JFormHelper::addFieldPath(__DIR__ . '/fields');	}	/**	 * @param   string     $context  The context for the data	 * @param   integer    $data     The user id	 *	 * @return  boolean	 *	 * @since   1.6	 */	public function onContentPrepareData($context, $data)	{		// Check we are manipulating a valid form.		if (!in_array($context, array('com_users.profile', 'com_users.user', 'com_users.registration', 'com_admin.profile')))		{			return true;		}		if (is_object($data))		{			$userId = isset($data->id) ? $data->id : 0;			if (!isset($data->profile) and $userId > 0)			{				// Load the profile data from the database.				$db = JFactory::getDbo();				$db->setQuery(					'SELECT profile_key, profile_value FROM #__user_profiles' .						' WHERE user_id = ' . (int) $userId . " AND profile_key LIKE 'profile.%'" .						' ORDER BY ordering'				);				try				{					$results = $db->loadRowList();				}				catch (RuntimeException $e)				{					$this->_subject->setError($e->getMessage());					return false;				}				// Merge the profile data.				$data->profile = array();				foreach ($results as $v)				{					$k = str_replace('profile.', '', $v[0]);					$data->profile[$k] = json_decode($v[1], true);					if ($data->profile[$k] === null)					{						$data->profile[$k] = $v[1];					}				}			}			if (!JHtml::isRegistered('users.url'))			{				JHtml::register('users.url', array(__CLASS__, 'url'));			}			if (!JHtml::isRegistered('users.calendar'))			{				JHtml::register('users.calendar', array(__CLASS__, 'calendar'));			}			if (!JHtml::isRegistered('users.tos'))			{				JHtml::register('users.tos', array(__CLASS__, 'tos'));			}		}		return true;	}	public static function url($value)	{		if (empty($value))		{			return JHtml::_('users.value', $value);		}		else		{			$value = htmlspecialchars($value);			if (substr($value, 0, 4) == "http")			{				return '<a href="' . $value . '">' . $value . '</a>';			}			else			{				return '<a href="http://' . $value . '">' . $value . '</a>';			}		}	}	public static function calendar($value)	{		if (empty($value))		{			return JHtml::_('users.value', $value);		}		else		{			return JHtml::_('date', $value, null, null);		}	}	public static function tos($value)	{		if ($value)		{			return JText::_('JYES');		}		else		{			return JText::_('JNO');		}	}	/**	 * @param   JForm    $form    The form to be altered.	 * @param   array    $data    The associated data for the form.	 *	 * @return  boolean	 * @since   1.6	 */	public function onContentPrepareForm($form, $data)	{		if (!($form instanceof JForm))		{			$this->_subject->setError('JERROR_NOT_A_FORM');			return false;		}		// Check we are manipulating a valid form.		$name = $form->getName();		if (!in_array($name, array('com_admin.profile', 'com_users.user', 'com_users.profile', 'com_users.registration')))		{			return true;		}		// Add the registration fields to the form.		JForm::addFormPath(__DIR__ . '/profiles');		$form->loadFile('profile', false);		$fields = array(			'address1',			'address2',			'city',			'region',			'country',			'postal_code',			'phone',			'website',			'favoritebook',			'aboutme',			'dob',			'tos',		);		//Change fields description when displayed in front-end		$app = JFactory::getApplication();		if ($app->isSite())		{			$form->setFieldAttribute('address1', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('address2', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('city', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('region', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('country', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('postal_code', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('phone', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('website', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('favoritebook', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('aboutme', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('dob', 'description', 'PLG_USER_PROFILE_FILL_FIELD_DESC_SITE', 'profile');			$form->setFieldAttribute('tos', 'description', 'PLG_USER_PROFILE_FIELD_TOS_DESC_SITE', 'profile');		}		$tosarticle = $this->params->get('register_tos_article');		$tosenabled = $this->params->get('register-require_tos', 0);		// We need to be in the registration form, field needs to be enabled and we need an article ID		if ($name != 'com_users.registration' || !$tosenabled || !$tosarticle)		{			// We only want the TOS in the registration form			$form->removeField('tos', 'profile');		}		else		{			// Push the TOS article ID into the TOS field.			$form->setFieldAttribute('tos', 'article', $tosarticle, 'profile');		}		foreach ($fields as $field)		{			// Case using the users manager in admin			if ($name == 'com_users.user')			{				// Remove the field if it is disabled in registration and profile				if ($this->params->get('register-require_' . $field, 1) == 0					&& $this->params->get('profile-require_' . $field, 1) == 0				)				{					$form->removeField($field, 'profile');				}			}			// Case registration			elseif ($name == 'com_users.registration')			{				// Toggle whether the field is required.				if ($this->params->get('register-require_' . $field, 1) > 0)				{					$form->setFieldAttribute($field, 'required', ($this->params->get('register-require_' . $field) == 2) ? 'required' : '', 'profile');				}				else				{					$form->removeField($field, 'profile');				}				if ($this->params->get('register-require_dob', 1) > 0)				{					$form->setFieldAttribute('spacer', 'type', 'spacer', 'profile');				}			}			// Case profile in site or admin			elseif ($name == 'com_users.profile' || $name == 'com_admin.profile')			{				// Toggle whether the field is required.				if ($this->params->get('profile-require_' . $field, 1) > 0)				{					$form->setFieldAttribute($field, 'required', ($this->params->get('profile-require_' . $field) == 2) ? 'required' : '', 'profile');				}				else				{					$form->removeField($field, 'profile');				}				if ($this->params->get('profile-require_dob', 1) > 0)				{					$form->setFieldAttribute('spacer', 'type', 'spacer', 'profile');				}			}		}		return true;	}	/**	 * Method is called before user data is stored in the database	 *	 * @param   array    $user   Holds the old user data.	 * @param   boolean  $isnew  True if a new user is stored.	 * @param   array    $data   Holds the new user data.	 *	 * @return    boolean	 *	 * @since   3.1	 * @throws    InvalidArgumentException on invalid date.	 */	public function onUserBeforeSave($user, $isnew, $data)	{		// Check that the date is valid.		if (!empty($data['profile']['dob']))		{			try			{				$date = new JDate($data['profile']['dob']);				$this->_date = $date->format('Y-m-d');			}			catch (Exception $e)			{				// Throw an exception if date is not valid.				throw new InvalidArgumentException(JText::_('PLG_USER_PROFILE_ERROR_INVALID_DOB'));			}		}		return true;	}	public function onUserAfterSave($data, $isNew, $result, $error)	{		$userId = JArrayHelper::getValue($data, 'id', 0, 'int');		if ($userId && $result && isset($data['profile']) && (count($data['profile'])))		{			try			{				// Sanitize the date				$data['profile']['dob'] = $this->_date;				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->delete($db->quoteName('#__user_profiles'))					->where($db->quoteName('userid') . ' = ' . (int) $userId)					->where($db->quoteName('profile_key') . ' LIKE ' . $db->quote('profile.%'));				$db->setQuery($query);				$db->execute();				$tuples = array();				$order = 1;				foreach ($data['profile'] as $k => $v)				{					$tuples[] = '(' . $userId . ', ' . $db->quote('profile.' . $k) . ', ' . $db->quote(json_encode($v)) . ', ' . $order++ . ')';				}				$db->setQuery('INSERT INTO #__user_profiles VALUES ' . implode(', ', $tuples));				$db->execute();			}			catch (RuntimeException $e)			{				$this->_subject->setError($e->getMessage());				return false;			}		}		return true;	}	/**	 * Remove all user profile information for the given user ID	 *	 * Method is called after user data is deleted from the database	 *	 * @param   array    $user     Holds the user data	 * @param   boolean  $success  True if user was succesfully stored in the database	 * @param   string   $msg      Message	 *	 * @return  boolean	 */	public function onUserAfterDelete($user, $success, $msg)	{		if (!$success)		{			return false;		}		$userId = JArrayHelper::getValue($user, 'id', 0, 'int');		if ($userId)		{			try			{				$db = JFactory::getDbo();				$db->setQuery(					'DELETE FROM #__user_profiles WHERE user_id = ' . $userId .						" AND profile_key LIKE 'profile.%'"				);				$db->execute();			}			catch (Exception $e)			{				$this->_subject->setError($e->getMessage());				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of plugins * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$pluginId = (int) $this->form->getValue('extension_id');		$folder	= $this->form->getValue('folder');		$db = JFactory::getDbo();		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text, type AS type, folder AS folder, extension_id AS extension_id' .				' FROM #__extensions' .				' WHERE (type =' .$db->quote('plugin'). 'AND folder='. $db->quote($folder) . ')'.				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $pluginId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $pluginId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;//Global definitions.//Joomla framework path definitions.$parts = explode(DIRECTORY_SEPARATOR, JPATH_BASE);array_pop($parts);//Defines.define('JPATH_ROOT',           implode(DIRECTORY_SEPARATOR, $parts));define('JPATH_SITE',          JPATH_ROOT);define('JPATH_CONFIGURATION', JPATH_ROOT);define('JPATH_ADMINISTRATOR', JPATH_ROOT . '/administrator');define('JPATH_LIBRARIES',     JPATH_ROOT . '/libraries');define('JPATH_PLUGINS',       JPATH_ROOT . '/plugins');define('JPATH_INSTALLATION',  JPATH_ROOT . '/installation');define('JPATH_THEMES',        JPATH_BASE . '/templates');define('JPATH_CACHE',         JPATH_ROOT . '/cache');define('JPATH_MANIFESTS',     JPATH_ADMINISTRATOR . '/manifests');
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$archived	= $this->state->get('filter.published') == 2 ? true : false;$trashed	= $this->state->get('filter.published') == -2 ? true : false;$canOrder	= $user->authorise('core.edit.state', 'com_newsfeeds.category');$saveOrder	= $listOrder == 'a.ordering';if ($saveOrder){	$saveOrderingUrl = 'index.php?option=com_newsfeeds&task=newsfeeds.saveOrderAjax&tmpl=component';	JHtml::_('sortablelist.sortable', 'articleList', 'adminForm', strtolower($listDirn), $saveOrderingUrl);}$sortFields = $this->getSortFields();$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.orderTable = function()	{		table = document.getElementById("sortTable");		direction = document.getElementById("directionTable");		order = table.options[table.selectedIndex].value;		if (order != '<?php echo $listOrder; ?>')		{			dirn = 'asc';		}		else		{			dirn = direction.options[direction.selectedIndex].value;		}		Joomla.tableOrdering(order, dirn, '');	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC');?></label>				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_NEWSFEEDS_SEARCH_IN_TITLE'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="directionTable" class="element-invisible"><?php echo JText::_('JFIELD_ORDERING_DESC');?></label>				<select name="directionTable" id="directionTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JFIELD_ORDERING_DESC');?></option>					<option value="asc" <?php if ($listDirn == 'asc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_ASCENDING');?></option>					<option value="desc" <?php if ($listDirn == 'desc') echo 'selected="selected"'; ?>><?php echo JText::_('JGLOBAL_ORDER_DESCENDING');?></option>				</select>			</div>			<div class="btn-group pull-right">				<label for="sortTable" class="element-invisible"><?php echo JText::_('JGLOBAL_SORT_BY');?></label>				<select name="sortTable" id="sortTable" class="input-medium" onchange="Joomla.orderTable()">					<option value=""><?php echo JText::_('JGLOBAL_SORT_BY');?></option>					<?php echo JHtml::_('select.options', $sortFields, 'value', 'text', $listOrder);?>				</select>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped" id="articleList">			<thead>				<tr>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', '<i class="icon-menu-2"></i>', 'a.ordering', $listDirn, $listOrder, null, 'asc', 'JGRID_HEADING_ORDERING'); ?>					</th>					<th width="1%" class="hidden-phone">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="5%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>					</th>					<th class="title">						<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_NUM_ARTICLES_HEADING', 'numarticles', $listDirn, $listOrder); ?>					</th>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_CACHE_TIME_HEADING', 'a.cache_time', $listDirn, $listOrder); ?>					</th>					<?php if ($assoc) : ?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'COM_NEWSFEEDS_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>					</th>					<?php endif;?>					<th width="5%" class="nowrap hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'a.language', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center hidden-phone">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="11">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->items as $i => $item) :				$ordering   = ($listOrder == 'a.ordering');				$canCreate  = $user->authorise('core.create',     'com_newsfeeds.category.' . $item->catid);				$canEdit    = $user->authorise('core.edit',       'com_newsfeeds.category.' . $item->catid);				$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id') || $item->checked_out == 0;				$canChange  = $user->authorise('core.edit.state', 'com_newsfeeds.category.' . $item->catid) && $canCheckin;				?>				<tr class="row<?php echo $i % 2; ?>" sortable-group-id="<?php echo $item->catid?>">					<td class="order nowrap center hidden-phone">						<?php if ($canChange) :							$disableClassName = '';							$disabledLabel	  = '';							if (!$saveOrder) :								$disabledLabel    = JText::_('JORDERINGDISABLED');								$disableClassName = 'inactive tip-top';							endif; ?>							<span class="sortable-handler hasTooltip <?php echo $disableClassName?>" title="<?php echo $disabledLabel?>">								<i class="icon-menu"></i>							</span>							<input type="text" style="display:none" name="order[]" size="5" value="<?php echo $item->ordering;?>" class="width-20 text-area-order" />						<?php else : ?>							<span class="sortable-handler inactive" >								<i class="icon-menu"></i>							</span>						<?php endif; ?>					</td>					<td class="center hidden-phone">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'newsfeeds.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>					</td>					<td class="nowrap has-context">						<div class="pull-left">							<?php if ($item->checked_out) : ?>								<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'newsfeeds.', $canCheckin); ?>							<?php endif; ?>							<?php if ($canEdit) : ?>								<a href="<?php echo JRoute::_('index.php?option=com_newsfeeds&task=newsfeed.edit&id='.(int) $item->id); ?>">									<?php echo $this->escape($item->name); ?></a>							<?php else : ?>									<?php echo $this->escape($item->name); ?>							<?php endif; ?>							<span class="small">								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							</span>							<div class="small">								<?php echo $this->escape($item->category_title); ?>							</div>						</div>						<div class="pull-left">							<?php								// Create dropdown items								JHtml::_('dropdown.edit', $item->id, 'newsfeed.');								JHtml::_('dropdown.divider');								if ($item->published) :									JHtml::_('dropdown.unpublish', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.publish', 'cb' . $i, 'newsfeeds.');								endif;								JHtml::_('dropdown.divider');								if ($archived) :									JHtml::_('dropdown.unarchive', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.archive', 'cb' . $i, 'newsfeeds.');								endif;								if ($item->checked_out) :									JHtml::_('dropdown.checkin', 'cb' . $i, 'newsfeeds.');								endif;								if ($trashed) :									JHtml::_('dropdown.untrash', 'cb' . $i, 'newsfeeds.');								else :									JHtml::_('dropdown.trash', 'cb' . $i, 'newsfeeds.');								endif;								// render dropdown list								echo JHtml::_('dropdown.render');								?>						</div>					</td>					<td class="small hidden-phone">						<?php echo $this->escape($item->access_level); ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->numarticles; ?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->cache_time; ?>					</td>					<?php if ($assoc) : ?>					<td class="hidden-phone">						<?php if ($item->association) : ?>							<?php echo JHtml::_('newsfeed.association', $item->id); ?>						<?php endif; ?>					</td>					<?php endif;?>					<td class="small hidden-phone">						<?php if ($item->language == '*'):?>							<?php echo JText::alt('JALL', 'language'); ?>						<?php else:?>							<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>						<?php endif;?>					</td>					<td class="center hidden-phone">						<?php echo (int) $item->id; ?>					</td>				</tr>				<?php endforeach; ?>			</tbody>		</table>		<?php //Load the batch processing form. ?>		<?php echo $this->loadTemplate('batch'); ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Text Filters form field. * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.6 */class JFormFieldFilters extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	public $type = 'Filters';	/**	 * Method to get the field input markup.	 *	 * TODO: Add access check.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		// Get the available user groups.		$groups = $this->getUserGroups();		// Build the form control.		$html = array();		// Open the table.		$html[] = '<table id="filter-config" class="table table-striped">';		// The table heading.		$html[] = '	<thead>';		$html[] = '	<tr>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action">'.JText::_('JGLOBAL_FILTER_GROUPS_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_TYPE_LABEL').'">'.JText::_('JGLOBAL_FILTER_TYPE_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'">'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '		<th>';		$html[] = '			<span class="acl-action" title="'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'">'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'</span>';		$html[] = '		</th>';		$html[] = '	</tr>';		$html[] = '	</thead>';		// The table body.		$html[] = '	<tbody>';		foreach ($groups as $group)		{			if (!isset($this->value[$group->value]))			{				$this->value[$group->value] = array('filter_type' => 'BL', 'filter_tags' => '', 'filter_attributes' => '');			}			$group_filter = $this->value[$group->value];			$html[] = '	<tr>';			$html[] = '		<th class="acl-groups left">';			$html[] = '			'.str_repeat('<span class="gi">|&mdash;</span>', $group->level).$group->text;			$html[] = '		</th>';			$html[] = '		<td>';			$html[] = '				<select name="'.$this->name.'['.$group->value.'][filter_type]" id="'.$this->id.$group->value.'_filter_type">';			$html[] = '					<option value="BL"'.($group_filter['filter_type'] == 'BL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_DEFAULT_BLACK_LIST').'</option>';			$html[] = '					<option value="CBL"'.($group_filter['filter_type'] == 'CBL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_CUSTOM_BLACK_LIST').'</option>';			$html[] = '					<option value="WL"'.($group_filter['filter_type'] == 'WL' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_WHITE_LIST').'</option>';			$html[] = '					<option value="NH"'.($group_filter['filter_type'] == 'NH' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_NO_HTML').'</option>';			$html[] = '					<option value="NONE"'.($group_filter['filter_type'] == 'NONE' ? ' selected="selected"' : '').'>'.JText::_('COM_CONFIG_FIELD_FILTERS_NO_FILTER').'</option>';			$html[] = '				</select>';			$html[] = '		</td>';			$html[] = '		<td>';			$html[] = '				<input name="'.$this->name.'['.$group->value.'][filter_tags]" id="'.$this->id.$group->value.'_filter_tags" title="'.JText::_('JGLOBAL_FILTER_TAGS_LABEL').'" value="'.$group_filter['filter_tags'].'"/>';			$html[] = '		</td>';			$html[] = '		<td>';			$html[] = '				<input name="'.$this->name.'['.$group->value.'][filter_attributes]" id="'.$this->id.$group->value.'_filter_attributes" title="'.JText::_('JGLOBAL_FILTER_ATTRIBUTES_LABEL').'" value="'.$group_filter['filter_attributes'].'"/>';			$html[] = '		</td>';			$html[] = '	</tr>';		}		$html[] = '	</tbody>';		// Close the table.		$html[] = '</table>';		// Add notes		$html[] = '<div class="alert">';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_TYPE_DESC') . '</p>';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_TAGS_DESC') . '</p>';		$html[] = '<p>' . JText::_('JGLOBAL_FILTER_ATTRIBUTES_DESC') . '</p>';		$html[] = '</div>';		return implode("\n", $html);	}	/**	 * A helper to get the list of user groups.	 *	 * @return  array	 * @since   1.6	 */	protected function getUserGroups()	{		// Get a database object.		$db = JFactory::getDbo();		// Get the user groups from the database.		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from('#__usergroups AS a')			->join('LEFT', '#__usergroups AS b on a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft')			->order('a.lft ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_weblinks')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Weblinks');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Database Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5 */class InstallerControllerDatabase extends JControllerLegacy{	/**	 * Tries to fix missing database updates	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		$model = $this->getModel('database');		$model->fix();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=database', false));	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Search feed view class for the Finder package. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderViewSearch extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  JError object on failure, void on success.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Get the application		$app = JFactory::getApplication();		// Adjust the list limit to the feed limit.		$app->input->set('limit', $app->getCfg('feed_limit'));		// Get view data.		$state = $this->get('State');		$params = $state->get('params');		$query = $this->get('Query');		$results = $this->get('Results');		// Push out the query data.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		$explained = JHtml::_('query.explained', $query);		// Set the document title.		$title = $params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		// Configure the document description.		if (!empty($explained))		{			$this->document->setDescription(html_entity_decode(strip_tags($explained), ENT_QUOTES, 'UTF-8'));		}		// Set the document link.		$this->document->link = JRoute::_($query->toURI());		// If we don't have any results, we are done.		if (empty($results))		{			return;		}		// Convert the results to feed entries.		foreach ($results as $result)		{			// Convert the result to a feed entry.			$item = new JFeedItem;			$item->title = $result->title;			$item->link = JRoute::_($result->route);			$item->description = $result->description;			$item->date = (int) $result->start_date ? JHtml::date($result->start_date, 'l d F Y') : $result->indexdate;			// Get the taxonomy data.			$taxonomy = $result->getTaxonomy();			// Add the category to the feed if available.			if (isset($taxonomy['Category']))			{				$node = array_pop($taxonomy['Category']);				$item->category = $node->title;			}			// loads item info into rss array			$this->document->addItem($item);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQuerySqlsrv extends JDatabaseQuery{	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $name_quotes = '`';	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $null_date = '1900-01-01 00:00:00';	/**	 * Magic function to convert the query to a string.	 *	 * @return  string	The completed query.	 *	 * @since   11.1	 */	public function __toString()	{		$query = '';		switch ($this->type)		{			case 'insert':				$query .= (string) $this->insert;				// Set method				if ($this->set)				{					$query .= (string) $this->set;				}				// Columns-Values method				elseif ($this->values)				{					if ($this->columns)					{						$query .= (string) $this->columns;					}					$elements = $this->insert->getElements();					$tableName = array_shift($elements);					$query .= 'VALUES ';					$query .= (string) $this->values;					if ($this->autoIncrementField)					{						$query = 'SET IDENTITY_INSERT ' . $tableName . ' ON;' . $query . 'SET IDENTITY_INSERT ' . $tableName . ' OFF;';					}					if ($this->where)					{						$query .= (string) $this->where;					}				}				break;			default:				$query = parent::__toString();				break;		}		return $query;	}	/**	 * Casts a value to a char.	 *	 * Ensure that the value is properly quoted before passing to the method.	 *	 * @param   string  $value  The value to cast as a char.	 *	 * @return  string  Returns the cast value.	 *	 * @since   11.1	 */	public function castAsChar($value)	{		return 'CAST(' . $value . ' as NVARCHAR(10))';	}	/**	 * Gets the function to determine the length of a character string.	 *	 * @param   string  $field      A value.	 * @param   string  $operator   Comparison operator between charLength integer value and $condition	 * @param   string  $condition  Integer value to compare charLength with.	 *	 * @return  string  The required char length call.	 *	 * @since 11.1	 */	public function charLength($field, $operator = null, $condition = null)	{		return 'DATALENGTH(' . $field . ')' . (isset($operator) && isset($condition) ? ' ' . $operator . ' ' . $condition : '');	}	/**	 * Concatenates an array of column names or values.	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.1	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			return '(' . implode('+' . $this->quote($separator) . '+', $values) . ')';		}		else		{			return '(' . implode('+', $values) . ')';		}	}	/**	 * Gets the current date and time.	 *	 * @return  string	 *	 * @since   11.1	 */	public function currentTimestamp()	{		return 'GETDATE()';	}	/**	 * Get the length of a string in bytes.	 *	 * @param   string  $value  The string to measure.	 *	 * @return  integer	 *	 * @since   11.1	 */	public function length($value)	{		return 'LEN(' . $value . ')';	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date to add to; type may be time or datetime.	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @note Not all drivers support all units.	 * @link http://msdn.microsoft.com/en-us/library/ms186819.aspx for more information	 */	public function dateAdd($date, $interval, $datePart)	{		return "DATEADD('" . $datePart . "', '" . $interval . "', '" . $date . "'" . ')';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules Component Module Model * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.5 */class ModulesModelModules extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'published', 'a.published',				'access', 'a.access', 'access_level',				'ordering', 'a.ordering',				'module', 'a.module',				'language', 'a.language', 'language_title',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'client_id', 'a.client_id',				'position', 'a.position',				'pages',				'name', 'e.name',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$position = $this->getUserStateFromRequest($this->context . '.filter.position', 'filter_position', '', 'string');		$this->setState('filter.position', $position);		$module = $this->getUserStateFromRequest($this->context . '.filter.module', 'filter_module', '', 'string');		$this->setState('filter.module', $module);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', 0, 'int', false);		$previousId = $app->getUserState($this->context . '.filter.client_id_previous', null);		if ($previousId != $clientId || $previousId === null)		{			$this->getUserStateFromRequest($this->context . '.filter.client_id_previous', 'filter_client_id_previous', 0, 'int', true);			$app->setUserState($this->context . '.filter.client_id_previous', $clientId);		}		$this->setState('filter.client_id', $clientId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_modules');		$this->setState('params', $params);		// List state information.		parent::populateState('position', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.position');		$id .= ':' . $this->getState('filter.module');		$id .= ':' . $this->getState('filter.client_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns an object list	 *	 * @param   string The query	 * @param   int    Offset	 * @param   int    The number of records	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$ordering = $this->getState('list.ordering', 'ordering');		if (in_array($ordering, array('pages', 'name')))		{			$this->_db->setQuery($query);			$result = $this->_db->loadObjectList();			$this->translate($result);			$lang = JFactory::getLanguage();			JArrayHelper::sortObjects($result, $ordering, $this->getState('list.direction') == 'desc' ? -1 : 1, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			if ($ordering == 'ordering')			{				$query->order('a.position ASC');				$ordering = 'a.ordering';			}			if ($ordering == 'language_title')			{				$ordering = 'l.title';			}			$query->order($this->_db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			if ($ordering == 'position')			{				$query->order('a.ordering ASC');			}			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array The array of objects	 * @return  array The array of translated objects	 */	protected function translate(&$items)	{		$lang = JFactory::getLanguage();		$client = $this->getState('filter.client_id') ? 'administrator' : 'site';		foreach ($items as $item)		{			$extension = $item->module;			$source = constant('JPATH_' . strtoupper($client)) . "/modules/$extension";			$lang->load("$extension.sys", constant('JPATH_' . strtoupper($client)), null, false, false)				|| $lang->load("$extension.sys", $source, null, false, false)				|| $lang->load("$extension.sys", constant('JPATH_' . strtoupper($client)), $lang->getDefault(), false, false)				|| $lang->load("$extension.sys", $source, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);			if (is_null($item->pages))			{				$item->pages = JText::_('JNONE');			}			elseif ($item->pages < 0)			{				$item->pages = JText::_('COM_MODULES_ASSIGNED_VARIES_EXCEPT');			}			elseif ($item->pages > 0)			{				$item->pages = JText::_('COM_MODULES_ASSIGNED_VARIES_ONLY');			}			else			{				$item->pages = JText::_('JALL');			}		}	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.note, a.position, a.module, a.language,' .					'a.checked_out, a.checked_out_time, a.published+2*(e.enabled-1) as published, a.access, a.ordering, a.publish_up, a.publish_down'			)		);		$query->from($db->quoteName('#__modules') . ' AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Join over the module menus		$query->select('MIN(mm.menuid) AS pages')			->join('LEFT', '#__modules_menu AS mm ON mm.moduleid = a.id');		// Join over the extensions		$query->select('e.name AS name')			->join('LEFT', '#__extensions AS e ON e.element = a.module')			->group(				'a.id, a.title, a.note, a.position, a.module, a.language,a.checked_out,' .					'a.checked_out_time, a.published, a.access, a.ordering,l.title, uc.name, ag.title, e.name,' .					'l.lang_code, uc.id, ag.id, mm.moduleid, e.element, a.publish_up, a.publish_down,e.enabled'			);		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$state = $this->getState('filter.state');		if (is_numeric($state))		{			$query->where('a.published = ' . (int) $state);		}		elseif ($state === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by position		$position = $this->getState('filter.position');		if ($position && $position != 'none')		{			$query->where('a.position = ' . $db->quote($position));		}		elseif ($position == 'none')		{			$query->where('a.position = ' . $db->quote(''));		}		// Filter by module		$module = $this->getState('filter.module');		if ($module)		{			$query->where('a.module = ' . $db->quote($module));		}		// Filter by client.		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('a.client_id = ' . (int) $clientId . ' AND e.client_id =' . (int) $clientId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(' . 'a.title LIKE ' . $search . ' OR a.note LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to initialise the database for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerDatabase extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$vars = $model->checkForm('database');		// Determine if the configuration file path is writable.		$path = JPATH_CONFIGURATION . '/configuration.php';		$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');		$r = new stdClass;		$r->view = $useftp ? 'ftp' : 'summary';		// Get the database model.		$db = new InstallationModelDatabase;		// Attempt to initialise the database.		$return = $db->createDatabase($vars);		// Check if the database was initialised		if (!$return)		{			$r->view = 'database';		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Multilang status helper. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.7.1 */abstract class MultilangstatusHelper{	public static function getHomes()	{		// Check for multiple Home pages		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('COUNT(*)')			->from($db->quoteName('#__menu'))			->where('home = 1')			->where('published = 1')			->where('client_id = 0');		$db->setQuery($query);		return $db->loadResult();	}	public static function getLangswitchers()	{		// Check if switcher is published		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('COUNT(*)')			->from($db->quoteName('#__modules'))			->where('module = ' . $db->quote('mod_languages'))			->where('published = 1')			->where('client_id = 0');		$db->setQuery($query);		return $db->loadResult();	}	public static function getContentlangs()	{		// Check for published Content Languages		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.lang_code AS lang_code')			->select('a.published AS published')			->from('#__languages AS a');		$db->setQuery($query);		return $db->loadObjectList();	}	public static function getSitelangs()	{		// check for published Site Languages		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.element AS element')			->from('#__extensions AS a')			->where('a.type = ' . $db->quote('language'))			->where('a.client_id = 0')			->where('a.enabled = 1');		$db->setQuery($query);		return $db->loadObjectList('element');	}	public static function getHomepages()	{		// Check for Home pages languages		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('language')			->from($db->quoteName('#__menu'))			->where('home = 1')			->where('published = 1')			->where('client_id = 0');		$db->setQuery($query);		return $db->loadObjectList('language');	}	public static function getStatus()	{		//check for combined status		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Select all fields from the languages table.		$query->select('a.*', 'l.home')			->select('a.published AS published')			->select('a.lang_code AS lang_code')			->from('#__languages AS a');		// Select the language home pages		$query->select('l.home AS home')			->select('l.language AS home_language')			->join('LEFT', '#__menu  AS l  ON  l.language = a.lang_code AND l.home=1 AND l.published=1 AND l.language <> \'*\'')			->select('e.enabled AS enabled')			->select('e.element AS element')			->join('LEFT', '#__extensions  AS e ON e.element = a.lang_code')			->where('e.client_id = 0')			->where('e.enabled = 1')			->where('e.state = 0');		$db->setQuery($query);		return $db->loadObjectList();	}	public static function getContacts()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('u.name, count(cd.language) as counted, MAX(cd.language=' . $db->quote('*') . ') as all_languages')			->from('#__users AS u')			->join('LEFT', '#__contact_details AS cd ON cd.user_id=u.id')			->join('LEFT', '#__languages as l on cd.language=l.lang_code')			->where('EXISTS (SELECT * from #__content as c where  c.created_by=u.id)')			->where('(l.published=1 or cd.language=' . $db->quote('*') . ')')			->where('cd.published=1')			->group('u.id')			->having('(counted !=' . count(JLanguageHelper::getLanguages()) . ' OR all_languages=1)')			->having('(counted !=1 OR all_languages=0)');		$db->setQuery($query);		return $db->loadObjectList();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Supports an custom SQL select list * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldSQL extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'SQL';	/**	 * Method to get the custom field options.	 * Use the query attribute to supply a query to generate the list.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Initialize some field attributes.		$key = $this->element['key_field'] ? (string) $this->element['key_field'] : 'value';		$value = $this->element['value_field'] ? (string) $this->element['value_field'] : (string) $this->element['name'];		$translate = $this->element['translate'] ? (string) $this->element['translate'] : false;		$query = (string) $this->element['query'];		// Get the database object.		$db = JFactory::getDbo();		// Set the query and get the result list.		$db->setQuery($query);		$items = $db->loadObjectlist();		// Build the field options.		if (!empty($items))		{			foreach ($items as $item)			{				if ($translate == true)				{					$options[] = JHtml::_('select.option', $item->$key, JText::_($item->$value));				}				else				{					$options[] = JHtml::_('select.option', $item->$key, $item->$value);				}			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$input     = JFactory::getApplication()->input;$field     = $input->getCmd('field');$function  = 'jSelectUser_'.$field;$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=users&layout=modal&tmpl=component&groups=' . $input->get('groups', '', 'BASE64') . '&excluded=' . $input->get('excluded', '', 'BASE64'));?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_NAME'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>			<button type="button" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('', '<?php echo JText::_('JLIB_FORM_SELECT_USER') ?>');"><?php echo JText::_('JOPTION_NO_USER')?></button>		</div>		<div class="filter-select">			<label for="filter_group_id">				<?php echo JText::_('COM_USERS_FILTER_USER_GROUP'); ?>			</label>			<?php echo JHtml::_('access.usergroup', 'filter_group_id', $this->state->get('filter.group_id')); ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width=25">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_USERNAME', 'a.username', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width=25">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_GROUPS', 'group_names', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php			$i = 0;			foreach ($this->items as $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $item->name; ?></a>				</td>				<td class="center">					<?php echo $item->username; ?>				</td>				<td class="title">					<?php echo nl2br($item->group_names); ?>				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Getting params from template$params = JFactory::getApplication()->getTemplate(true)->params;$app   = JFactory::getApplication();$doc   = JFactory::getDocument();$lang  = JFactory::getLanguage();$this->language = $doc->language;$this->direction = $doc->direction;$input = $app->input;$user  = JFactory::getUser();// Add JavaScript FrameworksJHtml::_('bootstrap.framework');$doc->addScript('templates/' .$this->template. '/js/template.js');// Detecting Active Variables$option   = $input->get('option', '');$view     = $input->get('view', '');$layout   = $input->get('layout', '');$task     = $input->get('task', '');$itemid   = $input->get('Itemid', '');$sitename = $app->getCfg('sitename');$cpanel = ($option === 'com_cpanel');$showSubmenu = false;$this->submenumodules = JModuleHelper::getModules('submenu');foreach ($this->submenumodules as $submenumodule){	$output = JModuleHelper::renderModule($submenumodule);	if (strlen($output))	{		$showSubmenu = true;		break;	}}// Logo fileif ($params->get('logoFile')){	$logo = JURI::root() . $params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<title><?php echo $this->title; ?> <?php echo $this->error->getMessage();?></title>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<meta http-equiv="content-type" content="text/html; charset=utf-8" />	<meta name="language" content="<?php echo $this->language; ?>" />	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/template.css" type="text/css" />	<?php	// If Right-to-Left	if ($this->direction == 'rtl')	{	?>		<link rel="stylesheet" href="<?php echo JURI::root() ?>/media/jui/css/bootstrap-rtl.css" type="text/css" />	<?php	}	// Load specific language related CSS	$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';	if (is_file($file))	{	?>		<link rel="stylesheet" href="<?php echo $file;?>" type="text/css" />	<?php	}	// Use of Google Font	if ($params->get('googleFont'))	{	?>		<link href='http://fonts.googleapis.com/css?family=<?php echo $params->get('googleFontName');?>' rel='stylesheet' type='text/css'>	<?php	}	?>	<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />	<?php	// Template color	if ($params->get('templateColor'))	{	?>	<style type="text/css">		.navbar-inner, .navbar-inverse .navbar-inner, .nav-list > .active > a, .nav-list > .active > a:hover, .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover, .navbar-inverse .nav li.dropdown.open > .dropdown-toggle, .navbar-inverse .nav li.dropdown.active > .dropdown-toggle, .navbar-inverse .nav li.dropdown.open.active > .dropdown-toggle		{			background: <?php echo $params->get('templateColor');?>;		}		.navbar-inner, .navbar-inverse .nav li.dropdown.open > .dropdown-toggle, .navbar-inverse .nav li.dropdown.active > .dropdown-toggle, .navbar-inverse .nav li.dropdown.open.active > .dropdown-toggle{			-moz-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			-webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);		}	</style>	<?php	}	?>	<?php	// Template header color	if ($params->get('headerColor'))	{	?>	<style type="text/css">		.header		{			background: <?php echo $params->get('headerColor');?>;		}	</style>	<?php	}	?>	<!--[if lt IE 9]>		<script src="../media/jui/js/html5.js"></script>	<![endif]--></head><body class="admin <?php echo $option . " view-" . $view . " layout-" . $layout . " task-" . $task . " ";?>" data-spy="scroll" data-target=".subhead" data-offset="87">	<!-- Top Navigation -->	<nav class="navbar navbar-inverse navbar-fixed-top">		<div class="navbar-inner">			<div class="container-fluid">				<?php if ($params->get('admin_menus') != '0') : ?>					<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">						<span class="icon-bar"></span>						<span class="icon-bar"></span>						<span class="icon-bar"></span>					</a>				<?php endif; ?>				<a class="brand" href="<?php echo JURI::root(); ?>" title="<?php echo JText::_('JGLOBAL_PREVIEW');?> <?php echo $sitename; ?>" target="_blank"><?php echo JHtml::_('string.truncate', $sitename, 14, false, false);?> <i class="icon-out-2 small"></i></a>				<?php if ($params->get('admin_menus') != '0') : ?>				<div class="nav-collapse">				<?php else : ?>				<div>				<?php endif; ?>					<?php					// Display menu modules					$this->menumodules = JModuleHelper::getModules('menu');					foreach ($this->menumodules as $menumodule)					{						$output = JModuleHelper::renderModule($menumodule, array('style' => 'none'));						$params = new JRegistry;						$params->loadString($menumodule->params);						echo $output;					}					?>					<ul class="<?php if ($this->direction == 'rtl') : ?>nav<?php else : ?>nav pull-right<?php endif; ?>">						<li class="dropdown"> <a class="dropdown-toggle" data-toggle="dropdown" href="#"><?php echo $user->username; ?> <b class="caret"></b></a>							<ul class="dropdown-menu">								<li class=""><a href="index.php?option=com_admin&task=profile.edit&id=<?php echo $user->id;?>"><?php echo JText::_('TPL_ISIS_EDIT_ACCOUNT');?></a></li>								<li class="divider"></li>								<li class=""><a href="<?php echo JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');?>"><?php echo JText::_('TPL_ISIS_LOGOUT');?></a></li>							</ul>						</li>					</ul>				</div>				<!--/.nav-collapse -->			</div>		</div>	</nav>	<!-- Header -->	<header class="header">		<div class="container-fluid">			<div class="row-fluid">				<div class="span2 container-logo">					<a class="logo" href="<?php echo $this->baseurl; ?>"><img src="<?php echo $logo;?>" alt="<?php echo $sitename; ?>" /></a>				</div>				<div class="span10">					<h1 class="page-title"><?php echo JText::_('ERROR'); ?></h1>				</div>			</div>		</div>	</header>	<div class="subhead-spacer" style="margin-bottom: 20px"></div>	<!-- container-fluid -->	<div class="container-fluid container-main">		<section id="content">			<!-- Begin Content -->			<div class="row-fluid">					<div class="span12">						<!-- Begin Content -->						<h1 class="page-header"><?php echo JText::_('JERROR_AN_ERROR_HAS_OCCURRED'); ?></h1>						<blockquote>							<span class="label label-inverse"><?php echo $this->error->getCode(); ?></span> <?php echo $this->error->getMessage();?>						</blockquote>						<p><a href="<?php echo $this->baseurl; ?>" class="btn"><i class="icon-dashboard"></i> <?php echo JText::_('JGLOBAL_TPL_CPANEL_LINK_TEXT'); ?></a></p>						<!-- End Content -->					</div>			</div>			<!-- End Content -->		</section>		<hr />	</div>	<!-- Begin Status Module -->	<div id="status" class="navbar navbar-fixed-bottom hidden-phone">		<div class="btn-toolbar">			<div class="btn-group pull-right">				<p>&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>			</div>			<?php			// Display status modules			$this->statusmodules = JModuleHelper::getModules('status');			foreach ($this->statusmodules as $statusmodule)			{				$output = JModuleHelper::renderModule($statusmodule, array('style' => 'no'));				$params = new JRegistry;				$params->loadString($statusmodule->params);				echo $output;			}			?>		</div>	</div>	<!-- End Status Module -->	<script>		(function($){			// fix sub nav on scroll			var $win = $(window)			  , $nav = $('.subhead')			  , navTop = $('.subhead').length && $('.subhead').offset().top - 40			  , isFixed = 0			processScroll()			// hack sad times - holdover until rewrite for 2.1			$nav.on('click', function ()			{				if (!isFixed) setTimeout(function () {  $win.scrollTop($win.scrollTop() - 47) }, 10)			})			$win.on('scroll', processScroll)			function processScroll()			{				var i, scrollTop = $win.scrollTop()				if (scrollTop >= navTop && !isFixed)				{					isFixed = 1					$nav.addClass('subhead-fixed')				} else if (scrollTop <= navTop && isFixed)				{					isFixed = 0					$nav.removeClass('subhead-fixed')				}			}		})(jQuery);	</script></body></html>
<?php/** * @package     Joomla.Libraries * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JMenu class * * @package     Joomla.Libraries * @subpackage  Menu * @since       1.5 */class JMenuSite extends JMenu{	/**	 * Loads the entire menu table into memory.	 *	 * @return  array	 */	public function load()	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('m.id, m.menutype, m.title, m.alias, m.note, m.path AS route, m.link, m.type, m.level, m.language')			->select($db->quoteName('m.browserNav') . ', m.access, m.params, m.home, m.img, m.template_style_id, m.component_id, m.parent_id')			->select('e.element as component')			->from('#__menu AS m')			->join('LEFT', '#__extensions AS e ON m.component_id = e.extension_id')			->where('m.published = 1')			->where('m.parent_id > 0')			->where('m.client_id = 0')			->order('m.lft');		// Set the query		$db->setQuery($query);		try		{			$this->_items = $db->loadObjectList('id');		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, JText::sprintf('JERROR_LOADING_MENUS', $e->getMessage()));			return false;		}		foreach ($this->_items as &$item)		{			// Get parent information.			$parent_tree = array();			if (isset($this->_items[$item->parent_id]))			{				$parent_tree  = $this->_items[$item->parent_id]->tree;			}			// Create tree.			$parent_tree[] = $item->id;			$item->tree = $parent_tree;			// Create the query array.			$url = str_replace('index.php?', '', $item->link);			$url = str_replace('&amp;', '&', $url);			parse_str($url, $item->query);		}	}	/**	 * Gets menu items by attribute	 *	 * @param   string   $attributes  The field name	 * @param   string   $values      The value of the field	 * @param   boolean  $firstonly   If true, only returns the first item found	 *	 * @return  array	 */	public function getItems($attributes, $values, $firstonly = false)	{		$attributes = (array) $attributes;		$values 	= (array) $values;		$app		= JApplication::getInstance('site');		if ($app->isSite())		{			// Filter by language if not set			if (($key = array_search('language', $attributes)) === false)			{				if (JLanguageMultilang::isEnabled())				{					$attributes[] 	= 'language';					$values[] 		= array(JFactory::getLanguage()->getTag(), '*');				}			}			elseif ($values[$key] === null)			{				unset($attributes[$key]);				unset($values[$key]);			}			// Filter by access level if not set			if (($key = array_search('access', $attributes)) === false)			{				$attributes[] = 'access';				$values[] = JFactory::getUser()->getAuthorisedViewLevels();			}			elseif ($values[$key] === null)			{				unset($attributes[$key]);				unset($values[$key]);			}		}		// Reset arrays or we get a notice if some values were unset		$attributes = array_values($attributes);		$values = array_values($values);		return parent::getItems($attributes, $values, $firstonly);	}	/**	 * Get menu item by id	 *	 * @param   string  $language  The language code.	 *	 * @return  object  The item object	 *	 * @since   1.5	 */	public function getDefault($language = '*')	{		if (array_key_exists($language, $this->_default) && JApplication::getInstance('site')->getLanguageFilter())		{			return $this->_items[$this->_default[$language]];		}		elseif (array_key_exists('*', $this->_default))		{			return $this->_items[$this->_default['*']];		}		else		{			return 0;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canDo		= SearchHelper::getActions();?><form action="<?php echo JRoute::_('index.php?option=com_search&view=searches'); ?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_SEARCH_SEARCH_IN_PHRASE'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<?php if ($this->enabled) : ?>			<span class="enabled"><?php echo JText::_('COM_SEARCH_LOGGING_ENABLED'); ?></span>			<?php else : ?>			<span class="disabled"><?php echo JText::_('COM_SEARCH_LOGGING_DISABLED'); ?></span>			<?php endif; ?>			<span class="adminlist-searchstatus">			<?php if ($this->state->get('filter.results')) : ?>				<a href="<?php echo JRoute::_('index.php?option=com_search&filter_results=0');?>">					<?php echo JText::_('COM_SEARCH_HIDE_SEARCH_RESULTS'); ?></a>			<?php else : ?>				<a href="<?php echo JRoute::_('index.php?option=com_search&filter_results=1');?>">					<?php echo JText::_('COM_SEARCH_SHOW_SEARCH_RESULTS'); ?></a>			<?php endif; ?>			</span>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="row-number-col">					<?php echo JText::_('JGRID_HEADING_ROW_NUMBER'); ?>				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_SEARCH_HEADING_PHRASE', 'a.search_term', $listDirn, $listOrder); ?>				</th>				<th class="hits-col">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th class="width-15">					<?php echo JText::_('COM_SEARCH_HEADING_RESULTS'); ?>				</th>				<th class="width-30">					&#160;				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">					<td class="right">						<?php echo $i + 1 + $this->pagination->limitstart; ?>					</td>					<td>						<?php echo $this->escape($item->search_term); ?>					</td>					<td class="center">						<?php echo (int) $item->hits; ?>					</td>					<td class="center">					<?php if ($this->state->get('filter.results')) : ?>						<?php echo (int) $item->returns; ?>					<?php else: ?>						<?php echo JText::_('COM_SEARCH_NO_RESULTS'); ?>					<?php endif; ?>					</td>					<td>						&#160;					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */abstract class JFeedParser{	/**	 * @var    string  The feed element name for the entry elements.	 * @since  12.3	 */	protected $entryElementName = 'entry';	/**	 * @var    array	 * @since  12.3	 */	protected $namespaces = array();	/**	 * @var    XMLReader	 * @since  12.3	 */	protected $stream;	/**	 * Constructor.	 *	 * @param   XMLReader  $stream  The XMLReader stream object for the feed.	 *	 * @since   12.3	 */	public function __construct(XMLReader $stream)	{		$this->stream  = $stream;	}	/**	 * Method to parse the feed into a JFeed object.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function parse()	{		$feed = new JFeed;		// Detect the feed version.		$this->initialise();		// Let's get this party started...		do		{			// Expand the element for processing.			$el = new SimpleXMLElement($this->stream->readOuterXml());			// Get the list of namespaces used within this element.			$ns = $el->getNamespaces(true);			// Get an array of available namespace objects for the element.			$namespaces = array();			foreach ($ns as $prefix => $uri)			{				// Ignore the empty namespace prefix.				if (empty($prefix))				{					continue;				}				// Get the necessary namespace objects for the element.				$namespace = $this->fetchNamespace($prefix);				if ($namespace)				{					$namespaces[] = $namespace;				}			}			// Process the element.			$this->processElement($feed, $el, $namespaces);			// Skip over this element's children since it has been processed.			$this->moveToClosingElement();		}		while ($this->moveToNextElement());		return $feed;	}	/**	 * Method to register a namespace handler object.	 *	 * @param   string                $prefix     The XML namespace prefix for which to register the namespace object.	 * @param   JFeedParserNamespace  $namespace  The namespace object to register.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function registerNamespace($prefix, JFeedParserNamespace $namespace)	{		$this->namespaces[$prefix] = $namespace;		return $this;	}	/**	 * Method to initialise the feed for parsing.  If child parsers need to detect versions or other	 * such things this is where you'll want to implement that logic.	 *	 * @return  void	 *	 * @since   12.3	 */	abstract protected function initialise();	/**	 * Method to parse a specific feed element.	 *	 * @param   JFeed             $feed        The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el          The current XML element object to handle.	 * @param   array             $namespaces  The array of relevant namespace objects to process for the element.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processElement(JFeed $feed, SimpleXMLElement $el, array $namespaces)	{		// Build the internal method name.		$method = 'handle' . ucfirst($el->getName());		// If we are dealing with an item then it is feed entry time.		if ($el->getName() == $this->entryElementName)		{			// Create a new feed entry for the item.			$entry = new JFeedEntry;			// First call the internal method.			$this->processFeedEntry($entry, $el);			foreach ($namespaces as $namespace)			{				if ($namespace instanceof JFeedParserNamespace)				{					$namespace->processElementForFeedEntry($entry, $el);				}			}			// Add the new entry to the feed.			$feed->addEntry($entry);		}		// Otherwise we treat it like any other element.		else		{			// First call the internal method.			if (is_callable(array($this, $method)))			{				$this->$method($feed, $el);			}			foreach ($namespaces as $namespace)			{				if ($namespace instanceof JFeedParserNamespace)				{					$namespace->processElementForFeed($feed, $el);				}			}		}	}	/**	 * Method to get a namespace object for a given namespace prefix.	 *	 * @param   string  $prefix  The XML prefix for which to fetch the namespace object.	 *	 * @return  mixed  JFeedParserNamespace or false if none exists.	 *	 * @since   12.3	 */	protected function fetchNamespace($prefix)	{		if (isset($this->namespaces[$prefix]))		{			return $this->namespaces[$prefix];		}		$className = get_class($this) . ucfirst($prefix);		if (class_exists($className))		{			$this->namespaces[$prefix] = new $className;			return $this->namespaces[$prefix];		}		return false;	}	/**	 * Method to move the stream parser to the next XML element node.	 *	 * @param   string  $name  The name of the element for which to move the stream forward until is found.	 *	 * @return  boolean  True if the stream parser is on an XML element node.	 *	 * @since   12.3	 */	protected function moveToNextElement($name = null)	{		// Only keep looking until the end of the stream.		while ($this->stream->read())		{			// As soon as we get to the next ELEMENT node we are done.			if ($this->stream->nodeType == XMLReader::ELEMENT)			{				// If we are looking for a specific name make sure we have it.				if (isset($name) && ($this->stream->name != $name))				{					continue;				}				return true;			}		}		return false;	}	/**	 * Method to move the stream parser to the closing XML node of the current element.	 *	 * @return  void	 *	 * @since   12.3	 * @throws  RuntimeException  If the closing tag cannot be found.	 */	protected function moveToClosingElement()	{		// If we are on a self-closing tag then there is nothing to do.		if ($this->stream->isEmptyElement)		{			return;		}		// Get the name and depth for the current node so that we can match the closing node.		$name  = $this->stream->name;		$depth = $this->stream->depth;		// Only keep looking until the end of the stream.		while ($this->stream->read())		{			// If we have an END_ELEMENT node with the same name and depth as the node we started with we have a bingo. :-)			if (($this->stream->name == $name) && ($this->stream->depth == $depth) && ($this->stream->nodeType == XMLReader::END_ELEMENT))			{				return;			}		}		throw new RuntimeException('Unable to find the closing XML node.');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Contacts component * * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $categories;	protected $pagination;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Check whether category access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Prepare the data.		// Compute the contact slug.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			$temp		= new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);			if ($item->params->get('show_email', 0) == 1)			{				$item->email_to = trim($item->email_to);				if (!empty($item->email_to) && JMailHelper::isEmailAddress($item->email_to))				{					$item->email_to = JHtml::_('email.cloak', $item->email_to);				}				else {					$item->email_to = '';				}			}		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		$children = array($category->id => $children);		$maxLevel = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $this->category->id) === false)))		{			if ($layout = $category->params->get('category_layout'))			{				$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$category->tags = new JHelperTags;		$category->tags->getItemTags('com_contact.category', $category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_contact' || $menu->query['view'] == 'contact' || $id != $this->category->id))		{			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_contact' || $menu->query['view'] == 'contact' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => ContactHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}		// Add alternative feed link		if ($this->params->get('show_feed_link', 1) == 1)		{			$link	= '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link.'&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link.'&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Profile model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelProfile extends JModelForm{	/**	 * @var		object	The user profile data.	 * @since   1.6	 */	protected $data;	/**	 * Method to check in a user.	 *	 * @param   integer		The id of the row to check out.	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function checkin($userId = null)	{		// Get the user id.		$userId = (!empty($userId)) ? $userId : (int) $this->getState('user.id');		if ($userId)		{			// Initialise the table with JUser.			$table = JTable::getInstance('User');			// Attempt to check the row in.			if (!$table->checkin($userId))			{				$this->setError($table->getError());				return false;			}		}		return true;	}	/**	 * Method to check out a user for editing.	 *	 * @param   integer		The id of the row to check out.	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function checkout($userId = null)	{		// Get the user id.		$userId = (!empty($userId)) ? $userId : (int) $this->getState('user.id');		if ($userId)		{			// Initialise the table with JUser.			$table = JTable::getInstance('User');			// Get the current user object.			$user = JFactory::getUser();			// Attempt to check the row out.			if (!$table->checkout($user->get('id'), $userId))			{				$this->setError($table->getError());				return false;			}		}		return true;	}	/**	 * Method to get the profile form data.	 *	 * The base form data is loaded and then an event is fired	 * for users plugins to extend the data.	 *	 * @return  mixed  	Data object on success, false on failure.	 * @since   1.6	 */	public function getData()	{		if ($this->data === null) {			$userId = $this->getState('user.id');			// Initialise the table with JUser.			$this->data	= new JUser($userId);			// Set the base user data.			$this->data->email1 = $this->data->get('email');			$this->data->email2 = $this->data->get('email');			// Override the base user data with any data in the session.			$temp = (array) JFactory::getApplication()->getUserState('com_users.edit.profile.data', array());			foreach ($temp as $k => $v)			{				$this->data->$k = $v;			}			// Unset the passwords.			unset($this->data->password1);			unset($this->data->password2);			$registry = new JRegistry($this->data->params);			$this->data->params = $registry->toArray();			// Get the dispatcher and load the users plugins.			$dispatcher	= JEventDispatcher::getInstance();			JPluginHelper::importPlugin('user');			// Trigger the data preparation event.			$results = $dispatcher->trigger('onContentPrepareData', array('com_users.profile', $this->data));			// Check for errors encountered while preparing the data.			if (count($results) && in_array(false, $results, true))			{				$this->setError($dispatcher->getError());				$this->data = false;			}		}		return $this->data;	}	/**	 * Method to get the profile form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.profile', 'profile', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		if (!JComponentHelper::getParams('com_users')->get('change_login_name'))		{			$form->setFieldAttribute('username', 'class', '');			$form->setFieldAttribute('username', 'filter', '');			$form->setFieldAttribute('username', 'description', 'COM_USERS_PROFILE_NOCHANGE_USERNAME_DESC');			$form->setFieldAttribute('username', 'validate', '');			$form->setFieldAttribute('username', 'message', '');			$form->setFieldAttribute('username', 'readonly', 'true');			$form->setFieldAttribute('username', 'required', 'false');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		$data = $this->getData();		$this->preprocessData('com_users.profile', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		if (JComponentHelper::getParams('com_users')->get('frontend_userparams'))		{			$form->loadFile('frontend', false);			if (JFactory::getUser()->authorise('core.login.admin'))			{				$form->loadFile('frontend_admin', false);			}		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$params	= JFactory::getApplication()->getParams('com_users');		// Get the user id.		$userId = JFactory::getApplication()->getUserState('com_users.edit.profile.id');		$userId = !empty($userId) ? $userId : (int) JFactory::getUser()->get('id');		// Set the user id.		$this->setState('user.id', $userId);		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 * @return  mixed  	The user id on success, false on failure.	 * @since   1.6	 */	public function save($data)	{		$userId = (!empty($data['id'])) ? $data['id'] : (int) $this->getState('user.id');		$user = new JUser($userId);		// Prepare the data for the user object.		$data['email']		= $data['email1'];		$data['password']	= $data['password1'];		// Unset the username if it should not be overwritten		if (!JComponentHelper::getParams('com_users')->get('change_login_name'))		{			unset($data['username']);		}		// Unset the block so it does not get overwritten		unset($data['block']);		// Unset the sendEmail so it does not get overwritten		unset($data['sendEmail']);		// Bind the data.		if (!$user->bind($data))		{			$this->setError(JText::sprintf('USERS PROFILE BIND FAILED', $user->getError()));			return false;		}		// Load the users plugin group.		JPluginHelper::importPlugin('user');		// Null the user groups so they don't get overwritten		$user->groups = null;		// Store the data.		if (!$user->save())		{			$this->setError($user->getError());			return false;		}		$user->tags = new JHelperTags;		$user->tags->getTagIds($user->id, 'com_users.user');		return $user->id;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Model class for handling lists of items. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */class JModelList extends JModelLegacy{	/**	 * Internal memory based cache array of data.	 *	 * @var    array	 * @since  12.2	 */	protected $cache = array();	/**	 * Context string for the model type.  This is used to handle uniqueness	 * when dealing with the getStoreId() method and caching data structures.	 *	 * @var    string	 * @since  12.2	 */	protected $context = null;	/**	 * Valid filter fields or ordering.	 *	 * @var    array	 * @since  12.2	 */	protected $filter_fields = array();	/**	 * An internal cache for the last query used.	 *	 * @var    JDatabaseQuery	 * @since  12.2	 */	protected $query = array();	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JModelLegacy	 * @since   12.2	 */	public function __construct($config = array())	{		parent::__construct($config);		// Add the ordering filtering fields white list.		if (isset($config['filter_fields']))		{			$this->filter_fields = $config['filter_fields'];		}		// Guess the context as Option.ModelName.		if (empty($this->context))		{			$this->context = strtolower($this->option . '.' . $this->getName());		}	}	/**	 * Method to cache the last query constructed.	 *	 * This method ensures that the query is constructed only once for a given state of the model.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object	 *	 * @since   12.2	 */	protected function _getListQuery()	{		// Capture the last store id used.		static $lastStoreId;		// Compute the current store id.		$currentStoreId = $this->getStoreId();		// If the last store id is different from the current, refresh the query.		if ($lastStoreId != $currentStoreId || empty($this->query))		{			$lastStoreId = $currentStoreId;			$this->query = $this->getListQuery();		}		return $this->query;	}	/**	 * Method to get an array of data items.	 *	 * @return  mixed  An array of data items on success, false on failure.	 *	 * @since   12.2	 */	public function getItems()	{		// Get a storage key.		$store = $this->getStoreId();		// Try to load the data from internal storage.		if (isset($this->cache[$store]))		{			return $this->cache[$store];		}		// Load the list items.		$query = $this->_getListQuery();		try		{			$items = $this->_getList($query, $this->getStart(), $this->getState('list.limit'));		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Add the items to the internal cache.		$this->cache[$store] = $items;		return $this->cache[$store];	}	/**	 * Method to get a JDatabaseQuery object for retrieving the data set from a database.	 *	 * @return  JDatabaseQuery   A JDatabaseQuery object to retrieve the data set.	 *	 * @since   12.2	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		return $query;	}	/**	 * Method to get a JPagination object for the data set.	 *	 * @return  JPagination  A JPagination object for the data set.	 *	 * @since   12.2	 */	public function getPagination()	{		// Get a storage key.		$store = $this->getStoreId('getPagination');		// Try to load the data from internal storage.		if (isset($this->cache[$store]))		{			return $this->cache[$store];		}		// Create the pagination object.		$limit = (int) $this->getState('list.limit') - (int) $this->getState('list.links');		$page = new JPagination($this->getTotal(), $this->getStart(), $limit);		// Add the object to the internal cache.		$this->cache[$store] = $page;		return $this->cache[$store];	}	/**	 * Method to get a store id based on the model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  An identifier string to generate the store id.	 *	 * @return  string  A store id.	 *	 * @since   12.2	 */	protected function getStoreId($id = '')	{		// Add the list state to the store id.		$id .= ':' . $this->getState('list.start');		$id .= ':' . $this->getState('list.limit');		$id .= ':' . $this->getState('list.ordering');		$id .= ':' . $this->getState('list.direction');		return md5($this->context . ':' . $id);	}	/**	 * Method to get the total number of items for the data set.	 *	 * @return  integer  The total number of items available in the data set.	 *	 * @since   12.2	 */	public function getTotal()	{		// Get a storage key.		$store = $this->getStoreId('getTotal');		// Try to load the data from internal storage.		if (isset($this->cache[$store]))		{			return $this->cache[$store];		}		// Load the total.		$query = $this->_getListQuery();		try		{			$total = (int) $this->_getListCount($query);		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// Add the total to the internal cache.		$this->cache[$store] = $total;		return $this->cache[$store];	}	/**	 * Method to get the starting number of items for the data set.	 *	 * @return  integer  The starting number of items available in the data set.	 *	 * @since   12.2	 */	public function getStart()	{		$store = $this->getStoreId('getstart');		// Try to load the data from internal storage.		if (isset($this->cache[$store]))		{			return $this->cache[$store];		}		$start = $this->getState('list.start');		$limit = $this->getState('list.limit');		$total = $this->getTotal();		if ($start > $total - $limit)		{			$start = max(0, (int) (ceil($total / $limit) - 1) * $limit);		}		// Add the total to the internal cache.		$this->cache[$store] = $start;		return $this->cache[$store];	}	/**	 * Method to auto-populate the model state.	 *	 * This method should only be called once per instantiation and is designed	 * to be called on the first call to the getState() method unless the model	 * configuration flag to ignore the request is set.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   12.2	 */	protected function populateState($ordering = null, $direction = null)	{		// If the context is set, assume that stateful lists are used.		if ($this->context)		{			$app = JFactory::getApplication();			$value = $app->getUserStateFromRequest('global.list.limit', 'limit', $app->getCfg('list_limit'), 'uint');			$limit = $value;			$this->setState('list.limit', $limit);			$value = $app->getUserStateFromRequest($this->context . '.limitstart', 'limitstart', 0);			$limitstart = ($limit != 0 ? (floor($value / $limit) * $limit) : 0);			$this->setState('list.start', $limitstart);			// Check if the ordering field is in the white list, otherwise use the incoming value.			$value = $app->getUserStateFromRequest($this->context . '.ordercol', 'filter_order', $ordering);			if (!in_array($value, $this->filter_fields))			{				$value = $ordering;				$app->setUserState($this->context . '.ordercol', $value);			}			$this->setState('list.ordering', $value);			// Check if the ordering direction is valid, otherwise use the incoming value.			$value = $app->getUserStateFromRequest($this->context . '.orderdirn', 'filter_order_Dir', $direction);			if (!in_array(strtoupper($value), array('ASC', 'DESC', '')))			{				$value = $direction;				$app->setUserState($this->context . '.orderdirn', $value);			}			$this->setState('list.direction', $value);		}		else		{			$this->setState('list.start', 0);			$this->state->set('list.limit', 0);		}	}	/**	 * Gets the value of a user state variable and sets it in the session	 *	 * This is the same as the method in JApplication except that this also can optionally	 * force you back to the first page when a filter has changed	 *	 * @param   string   $key        The key of the user state variable.	 * @param   string   $request    The name of the variable passed in a request.	 * @param   string   $default    The default value for the variable if not found. Optional.	 * @param   string   $type       Filter for the variable, for valid values see {@link JFilterInput::clean()}. Optional.	 * @param   boolean  $resetPage  If true, the limitstart in request is set to zero	 *	 * @return  The request user state.	 *	 * @since   12.2	 */	public function getUserStateFromRequest($key, $request, $default = null, $type = 'none', $resetPage = true)	{		$app = JFactory::getApplication();		$input     = $app->input;		$old_state = $app->getUserState($key);		$cur_state = (!is_null($old_state)) ? $old_state : $default;		$new_state = $input->get($request, null, $type);		if (($cur_state != $new_state) && ($resetPage))		{			$input->set('limitstart', 0);		}		// Save the new value only if it is set in this request.		if ($new_state !== null)		{			$app->setUserState($key, $new_state);		}		else		{			$new_state = $cur_state;		}		return $new_state;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_weblinks/helpers/route.php';require_once JPATH_SITE . '/components/com_weblinks/helpers/category.php';JModelLegacy::addIncludePath(JPATH_SITE . '/components/com_weblinks/models', 'WeblinksModel');/** * Helper for mod_weblinks * * @package     Joomla.Site * @subpackage  mod_weblinks */class ModWeblinksHelper{	public static function getList($params)	{		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Category', 'WeblinksModel', array('ignore_request' => true));		// Set application parameters in model		$app = JFactory::getApplication();		$appParams = $app->getParams();		$model->setState('params', $appParams);		// Set the filters based on the module params		$model->setState('list.start', 0);		$model->setState('list.limit', (int) $params->get('count', 5));		$model->setState('filter.state', 1);		$model->setState('filter.publish_date', true);		// Access filter		$access = !JComponentHelper::getParams('com_weblinks')->get('show_noauth');		$model->setState('filter.access', $access);		$ordering = $params->get('ordering', 'ordering');		$model->setState('list.ordering', $ordering == 'order' ? 'ordering' : $ordering);		$model->setState('list.direction', $params->get('direction', 'asc'));		$catid	= (int) $params->get('catid', 0);		$model->setState('category.id', $catid);		// Create query object		$db = JFactory::getDbo();		$query = $db->getQuery(true);		$case_when1 = ' CASE WHEN ';		$case_when1 .= $query->charLength('a.alias', '!=', '0');		$case_when1 .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when1 .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when1 .= ' ELSE ';		$case_when1 .= $a_id.' END as slug';		$case_when2 = ' CASE WHEN ';		$case_when2 .= $query->charLength('c.alias', '!=', '0');		$case_when2 .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when2 .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when2 .= ' ELSE ';		$case_when2 .= $c_id.' END as catslug';		$model->setState(			'list.select',			'a.*, c.published AS c_published,' . $case_when1 . ',' . $case_when2 . ',' . 'DATE_FORMAT(a.created, "%Y-%m-%d") AS created'		);		$model->setState('filter.c.published', 1);		// Filter by language		$model->setState('filter.language', $app->getLanguageFilter());		$items = $model->getItems();		if ($items)		{			foreach ($items as $item)			{				if ($item->params->get('count_clicks', $params->get('count_clicks')) == 1)				{					$item->link	= JRoute::_('index.php?option=com_weblinks&task=weblink.go&catid=' . $item->catslug . '&id=' . $item->slug);				}				else				{					$item->link = $item->url;				}			}			return $items;		}		else		{			return;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;// Note that this layout opens a div with the page class suffix. If you do not use the category children// layout you need to close this div either by overriding this file or in your main layout.$params  = $displayData->params;$extension = $displayData->get('category')->extension;$canEdit = $params->get('access-edit');$className = substr($extension, 4);// This will work for the core components but not necessarily for other components// that may have different pluralisation rules.if (substr($className, -1) == 's'){	$className = rtrim($className, 's');}$tagsData  = $displayData->get('category')->tags->itemTags;?><div>	<div class="<?php echo $className .'-category' . $displayData->pageclass_sfx;?>">		<?php if ($params->get('show_page_heading')) : ?>			<h1>				<?php echo $displayData->escape($params->get('page_heading')); ?>			</h1>		<?php endif; ?>		<?php if($params->get('show_category_title', 1)) : ?>			<h2>				<?php echo JHtml::_('content.prepare', $displayData->get('category')->title, '', $extension.'.category'); ?>			</h2>		<?php endif; ?>		<?php if ($displayData->get('show_tags', 1)) : ?>			<?php echo JLayoutHelper::render('joomla.content.tags', $tagsData); ?>		<?php endif; ?>		<?php if ($params->get('show_description', 1) || $params->def('show_description_image', 1)) : ?>			<div class="category-desc">				<?php if ($params->get('show_description_image') && $displayData->get('category')->getParams()->get('image')) : ?>					<img src="<?php echo $displayData->get('category')->getParams()->get('image'); ?>"/>				<?php endif; ?>				<?php if ($params->get('show_description') && $displayData->get('category')->description) : ?>					<?php echo JHtml::_('content.prepare', $displayData->get('category')->description, '', $extension .'.category'); ?>				<?php endif; ?>				<div class="clr"></div>			</div>		<?php endif; ?>		<?php echo $displayData->loadTemplate($displayData->subtemplatename); ?>		<?php if ($displayData->get('children') && $displayData->maxLevel != 0) : ?>			<div class="cat-children">				<h3>					<?php echo JTEXT::_('JGLOBAL_SUBCATEGORIES'); ?>				</h3>				<?php echo $displayData->loadTemplate('children'); ?>			</div>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a standard button with a confirm dialog * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonConfirm extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Confirm';	/**	 * Fetch the HTML for the button	 *	 * @param   string   $type      Unused string.	 * @param   string   $msg       Message to render	 * @param   string   $name      Name to be used as apart of the id	 * @param   string   $text      Button text	 * @param   string   $task      The task associated with the button	 * @param   boolean  $list      True to allow use of lists	 * @param   boolean  $hideMenu  True to hide the menu on click	 *	 * @return  string   HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Confirm', $msg = '', $name = '', $text = '', $task = '', $list = true, $hideMenu = false)	{		$text = JText::_($text);		$msg = JText::_($msg, true);		$class = $this->fetchIconClass($name);		$doTask = $this->_getCommand($msg, $name, $task, $list);		$html = "<button href=\"#\" onclick=\"$doTask\" class=\"btn btn-small\">\n";		$html .= "<span class=\"$class\">\n";		$html .= "</span>\n";		$html .= "$text\n";		$html .= "</button>\n";		return $html;	}	/**	 * Get the button CSS Id	 *	 * @param   string   $type      Button type	 * @param   string   $name      Name to be used as apart of the id	 * @param   string   $text      Button text	 * @param   string   $task      The task associated with the button	 * @param   boolean  $list      True to allow use of lists	 * @param   boolean  $hideMenu  True to hide the menu on click	 *	 * @return  string  Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type = 'Confirm', $name = '', $text = '', $task = '', $list = true, $hideMenu = false)	{		return $this->_parent->getName() . '-' . $name;	}	/**	 * Get the JavaScript command for the button	 *	 * @param   object   $msg   The message to display.	 * @param   string   $name  Not used.	 * @param   string   $task  The task used by the application	 * @param   boolean  $list  True is requires a list confirmation.	 *	 * @return  string  JavaScript command string	 *	 * @since   3.0	 */	protected function _getCommand($msg, $name, $task, $list)	{		JHtml::_('behavior.framework');		$message = JText::_('JLIB_HTML_PLEASE_MAKE_A_SELECTION_FROM_THE_LIST');		$message = addslashes($message);		if ($list)		{			$cmd = "if (document.adminForm.boxchecked.value==0){alert('$message');}else{if (confirm('$msg')){Joomla.submitbutton('$task');}}";		}		else		{			$cmd = "if (confirm('$msg')){Joomla.submitbutton('$task');}";		}		return $cmd;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.logout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Plugin class for logout redirect handling. * * @package     Joomla.Plugin * @subpackage  System.logout * @since       1-6 */class PlgSystemLogout extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Object Constructor.	 *	 * @access	public	 * @param   object	The object to observe -- event dispatcher.	 * @param   object	The configuration object for the plugin.	 * @return  void	 * @since   1.6	 */	public function __construct(&$subject, $config)	{		parent::__construct($subject, $config);		$input = JFactory::getApplication()->input;		$hash  = JApplication::getHash('PlgSystemLogout');		if (JFactory::getApplication()->isSite() && $input->cookie->getString($hash))		{			// Destroy the cookie			$conf = JFactory::getConfig();			$cookie_domain = $conf->get('config.cookie_domain', '');			$cookie_path   = $conf->get('config.cookie_path', '/');			setcookie($hash, false, time() - 86400, $cookie_path, $cookie_domain);			// Set the error handler for E_ALL to be the class handleError method.			JError::setErrorHandling(E_ALL, 'callback', array('PlgSystemLogout', 'handleError'));		}	}	/**	 * This method should handle any logout logic and report back to the subject	 *	 * @param   array  $user		Holds the user data.	 * @param   array  $options	Array holding options (client, ...).	 *	 * @return  boolean Always returns true	 * @since   1.6	 */	public function onUserLogout($user, $options = array())	{		if (JFactory::getApplication()->isSite())		{			// Create the cookie			$hash = JApplication::getHash('PlgSystemLogout');			$conf = JFactory::getConfig();			$cookie_domain 	= $conf->get('config.cookie_domain', '');			$cookie_path 	= $conf->get('config.cookie_path', '/');			setcookie($hash, true, time() + 86400, $cookie_path, $cookie_domain);		}		return true;	}	public static function handleError(&$error)	{		// Get the application object.		$app = JFactory::getApplication();		// Make sure the error is a 403 and we are in the frontend.		if ($error->getCode() == 403 and $app->isSite())		{			// Redirect to the home page			$app->redirect('index.php', JText::_('PLG_SYSTEM_LOGOUT_REDIRECT'), null, true, false);		}		else		{			// Render the error page.			JError::customErrorPage($error);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="form-login">	<fieldset class="loginform">		<label id="mod-login-username-lbl" for="mod-login-username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>		<input name="username" id="mod-login-username" type="text" class="inputbox" size="15" />		<label id="mod-login-password-lbl" for="mod-login-password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>		<input name="passwd" id="mod-login-password" type="password" class="inputbox" size="15" />		<label id="mod-login-language-lbl" for="lang"><?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?></label>		<?php echo $langs; ?>		<div class="clr"></div>		<div class="button-holder">			<div class="button1">				<div class="next">					<a href="#" onclick="document.getElementById('form-login').submit();">						<?php echo JText::_('MOD_LOGIN_LOGIN'); ?></a>				</div>			</div>		</div>		<div class="clr"></div>		<input type="submit" class="hidebtn" value="<?php echo JText::_('MOD_LOGIN_LOGIN'); ?>" />		<input type="hidden" name="option" value="com_login" />		<input type="hidden" name="task" value="login" />		<input type="hidden" name="return" value="<?php echo $return; ?>" />		<?php echo JHtml::_('form.token'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_users');$saveOrder	= $listOrder == 'a.ordering';?><form action="<?php echo JRoute::_('index.php?option=com_users&view=levels');?>" method="post" id="adminForm" name="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_ACCESS_LEVELS'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_TITLE_LEVELS'); ?>" />			</div>			<div class="filter-search btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_RESET'); ?>"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LEVEL_NAME', 'a.title', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="nowrap">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>						<?php if ($canOrder && $saveOrder) :?>							<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'levels.saveorder'); ?>						<?php endif; ?>					</th>					<th width="5%" class="nowrap center hidden-phone">						<?php echo JText::_('JGRID_HEADING_ID'); ?>					</th>					<th width="40%">						&#160;					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php $count = count($this->items); ?>			<?php foreach ($this->items as $i => $item) :				$ordering  = ($listOrder == 'a.ordering');				$canCreate = $user->authorise('core.create',     'com_users');				$canEdit   = $user->authorise('core.edit',       'com_users');				$canChange = $user->authorise('core.edit.state', 'com_users');				?>				<tr class="row<?php echo $i % 2; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</td>					<td>						<?php if ($canEdit) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_users&task=level.edit&id='.$item->id);?>">							<?php echo $this->escape($item->title); ?></a>						<?php else : ?>							<?php echo $this->escape($item->title); ?>						<?php endif; ?>					</td>					<td class="order">						<?php if ($canChange) : ?>							<div class="input-prepend">							<?php if ($saveOrder) :?>								<?php if ($listDirn == 'asc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'levels.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php elseif ($listDirn == 'desc') : ?>									<span class="add-on"><?php echo $this->pagination->orderUpIcon($i, true, 'levels.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>									<span class="add-on"><?php echo $this->pagination->orderDownIcon($i, $count, true, 'levels.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>								<?php endif; ?>							<?php endif; ?>							<?php $disabled = $saveOrder ? '' : 'disabled="disabled"'; ?>						 	<input type="text" name="order[]" size="5" value="<?php echo $item->ordering;?>" <?php echo $disabled ?> class="width-20 text-area-order" />						 </div>						<?php else : ?>							<?php echo $item->ordering; ?>						<?php endif; ?>					</td>					<td class="center">						<?php echo (int) $item->id; ?>					</td>					<td>						&#160;					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one SQL Server DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeitemSqlsrv extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand == 'ADD')			{				$result = 'SELECT * FROM INFORMATION_SCHEMA.Columns ' . $wordArray[2] . ' WHERE COLUMN_NAME = ' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand == 'CREATE INDEX')			{				$index = $this->fixQuote(substr($wordArray[5], 0, strpos($wordArray[5], '(')));				$result = 'SELECT * FROM SYS.INDEXES ' . $wordArray[2] . ' WHERE name = ' . $index;				$this->queryType = 'CREATE INDEX';				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif (strtoupper($wordArray[3]) == 'MODIFY')			{				$type = $this->fixQuote($wordArray[5]);				if (isset($wordArray[6]))				{					$type = $this->fixQuote($this->fixInteger($wordArray[5], $wordArray[6]));				}				$result = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS  WHERE table_name = ' . $this->fixQuote($wordArray[2]);				$this->queryType = 'ALTER COLUMN COLUMN_NAME =' . $this->fixQuote($wordArray[4]);				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]));			}			elseif (strtoupper($wordArray[3]) == 'CHANGE')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($this->fixInteger($wordArray[6], $wordArray[7]));				$result = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS  WHERE table_name = ' . $this->fixQuote($wordArray[2]);				$this->fixQuote($wordArray[4]);				$this->queryType = 'ALTER COLUMN COLUMN_NAME =' . $this->fixQuote($wordArray[4]);				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]));			}		}		if ($command == 'CREATE TABLE')		{			$table = $wordArray[5];			$result = 'SELECT * FROM sys.TABLES WHERE NAME = ' . $this->fixQuote($table);			$this->queryType = 'CREATE_TABLE';			$this->msgElements = array($this->fixQuote($table));		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with MySQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   2.5	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == 'integer' && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'int';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   2.5	 */	private function fixQuote($string)	{		$string = str_replace('`', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');$options = array(	JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),	JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));$published	= $this->state->get('filter.published');$extension	= $this->escape($this->state->get('filter.extension'));?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_CATEGORIES_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_CATEGORIES_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<?php if ($published >= 0) : ?>			<div class="control-group">				<label id="batch-choose-action-lbl" for="batch-category-id" class="control-label">					<?php echo JText::_('COM_CATEGORIES_BATCH_CATEGORY_LABEL'); ?>				</label>				<div id="batch-choose-action" class="combo controls">					<select name="batch[category_id]" class="inputbox" id="batch-category-id">						<option value=""><?php echo JText::_('JSELECT') ?></option>						<?php echo JHtml::_('select.options', JHtml::_('category.categories', $extension, array('filter.published' => $published)));?>					</select>				</div>			</div>			<div class="control-group radio">				<?php echo JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'); ?>			</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('category.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_tags component * * @param   array  An array of URL arguments * * @return  array  The URL arguments to use to assemble the subsequent URL. * * @since   3.1 */function TagsBuildRoute(&$query){	$segments = array();	// Get a menu item based on Itemid or currently active	$app		= JFactory::getApplication();	$menu		= $app->getMenu();	$params		= JComponentHelper::getParams('com_tags');	$advanced	= $params->get('sef_advanced_link', 0);	// We need a menu item.  Either the one specified in the query, or the current active one if none specified	if (empty($query['Itemid'])) {		$menuItem = $menu->getActive();	}	else {		$menuItem = $menu->getItem($query['Itemid']);	}	$mView = (empty($menuItem->query['view'])) ? null : $menuItem->query['view'];	$mId   = (empty($menuItem->query['id'])) ? null : $menuItem->query['id'];	if (is_array($mId))	{		JArrayHelper::toInteger($mId);	}	if (isset($query['view'])) {		$view = $query['view'];		if (empty($query['Itemid'])) {			$segments[] = $query['view'];		}		unset($query['view']);	}	// Are we dealing with a tag that is attached to a menu item?	if (isset($view) && ($mView == $view) and (isset($query['id'])) and ($mId == $query['id']))	{		unset($query['view']);		unset($query['id']);		return $segments;	}	if (isset($view) and $view == 'tag')	{		if ($mId != (int) $query['id'] || $mView != $view)		{			if ($view == 'tag') {				if ($advanced) {					list($tmp, $id) = explode(':', $query['id'], 2);				}				else {					$id = $query['id'];				}				$segments[] = $id;			}		}		unset($query['id']);	}	if (isset($query['layout'])) {		if (!empty($query['Itemid']) && isset($menuItem->query['layout'])) {			if ($query['layout'] == $menuItem->query['layout']) {				unset($query['layout']);			}		}		else {			if ($query['layout'] == 'default') {				unset($query['layout']);			}		}	};	return $segments;}/** * Parse the segments of a URL. * * @param   array  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. * * @since   3.1 */function TagsParseRoute($segments){	$vars = array();	//Get the active menu item.	$app	= JFactory::getApplication();	$menu	= $app->getMenu();	$item	= $menu->getActive();	$params = JComponentHelper::getParams('com_tags');	$advanced = $params->get('sef_advanced_link', 0);	// Count route segments	$count = count($segments);	// Standard routing for tags.	if (!isset($item))	{		$vars['view']	= $segments[0];		$vars['id']		= $segments[$count - 1];		return $vars;	}	// From the tags view, we can only jump to a tag.	$id = (isset($item->query['id']) && $item->query['id'] > 1) ? $item->query['id'] : 'root';	$found = 0;	foreach($segments as $segment)	{		if ($found == 0)		{			$id = $segment;		}			$vars['id'] = $id;			$vars['view'] = 'tag';			break;	}	$found = 0;	return $vars;}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Links class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiLinks extends JMediawikiObject{	/**     * Method to return all links from the given page(s).     *     * @param   array   $titles       Page titles to retrieve links.     * @param   array   $plnamespace  Namespaces to get links.     * @param   string  $pllimit      Number of links to return.     * @param   string  $plcontinue   Continue when more results are available.     * @param   array   $pltitles     List links to these titles.     * @param   string  $pldir        Direction of listing.     *     * @return  object     *     * @since   12.3     */	public function getLinks(array $titles, array $plnamespace = null, $pllimit = null, $plcontinue = null, array $pltitles = null, $pldir = null)	{		// Build the request.		$path = '?action=query&prop=links';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($plnamespace))		{			$path .= '&plnamespace=' . $this->buildParameter($plnamespace);		}		if (isset($pllimit))		{			$path .= '&pllimit=' . $pllimit;		}		if (isset($plcontinue))		{			$path .= '&plcontinue=' . $plcontinue;		}		if (isset($pltitles))		{			$path .= '&pltitles=' . $this->buildParameter($pltitles);		}		if (isset($pldir))		{			$path .= '&pldir=' . $pldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to return info about the link pages.     *     * @param   array  $titles  Page titles to retrieve links.     *     * @return  object     *     * @since   12.3     */	public function getLinksUsed(array $titles)	{		// Build the request.		$path = '?action=query&generator=links&prop=info';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to return all interwiki links from the given page(s).     *     * @param   array    $titles      Page titles to retrieve links.     * @param   boolean  $iwurl       Whether to get the full url.     * @param   integer  $iwlimit     Number of interwiki links to return.     * @param   boolean  $iwcontinue  When more results are available, use this to continue.     * @param   string   $iwprefix    Prefix for the interwiki.     * @param   string   $iwtitle     Interwiki link to search for.     * @param   string   $iwdir       The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getIWLinks(array $titles, $iwurl = false, $iwlimit = null, $iwcontinue = false, $iwprefix = null, $iwtitle = null, $iwdir = null)	{		// Build the request.		$path = '?action=query&prop=links';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if ($iwurl)		{			$path .= '&iwurl=';		}		if (isset($iwlimit))		{			$path .= '&iwlimit=' . $iwlimit;		}		if ($iwcontinue)		{			$path .= '&iwcontinue=';		}		if (isset($iwprefix))		{			$path .= '&iwprefix=' . $iwprefix;		}		if (isset($iwtitle))		{			$path .= '&iwtitle=' . $iwtitle;		}		if (isset($iwdir))		{			$path .= '&iwdir=' . $iwdir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to return all interlanguage links from the given page(s).     *     * @param   array    $titles      Page titles to retrieve links.     * @param   integer  $lllimit     Number of langauge links to return.     * @param   boolean  $llcontinue  When more results are available, use this to continue.     * @param   string   $llurl       Whether to get the full URL.     * @param   string   $lllang      Language code.     * @param   string   $lltitle     Link to search for.     * @param   string   $lldir       The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getLangLinks(array $titles, $lllimit = null, $llcontinue = false, $llurl = null, $lllang = null, $lltitle = null, $lldir = null)	{		// Build the request.		$path = '?action=query&prop=langlinks';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($lllimit))		{			$path .= '&lllimit=' . $lllimit;		}		if ($llcontinue)		{			$path .= '&llcontinue=';		}		if (isset($llurl))		{			$path .= '&llurl=' . $llurl;		}		if (isset($lllang))		{			$path .= '&lllang=' . $lllang;		}		if (isset($lltitle))		{			$path .= '&lltitle=' . $lltitle;		}		if (isset($lldir))		{			$path .= '&lldir=' . $lldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to return all external urls from the given page(s).     *     * @param   array    $titles      Page titles to retrieve links.     * @param   integer  $ellimit     Number of links to return.     * @param   string   $eloffset    When more results are available, use this to continue.     * @param   string   $elprotocol  Protocol of the url.     * @param   string   $elquery     Search string without protocol.     *     * @return  object     *     * @since   12.3     */	public function getExtLinks(array $titles, $ellimit = null, $eloffset = null, $elprotocol = null, $elquery = null)	{		// Build the request.		$path = '?action=query&prop=extlinks';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($ellimit))		{			$path .= '&ellimit=' . $ellimit;		}		if (isset($eloffset))		{			$path .= '&eloffset=' . $eloffset;		}		if (isset($elprotocol))		{			$path .= '&elprotocol=' . $elprotocol;		}		if (isset($elquery))		{			$path .= '&elquery=' . $elquery;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to enumerate all links that point to a given namespace.     *     * @param   boolean  $alcontinue   When more results are available, use this to continue.     * @param   string   $alfrom       Start listing at this title. The title need not exist.     * @param   string   $alto         The page title to stop enumerating at.     * @param   string   $alprefix     Search for all page titles that begin with this value.     * @param   string   $alunique     Only show unique links.     * @param   array    $alprop       What pieces of information to include.     * @param   string   $alnamespace  The namespace to enumerate.     * @param   integer  $allimit      Number of links to return.     *     * @return  object     *     * @since   12.3     */	public function enumerateLinks($alcontinue = false, $alfrom = null, $alto = null, $alprefix = null, $alunique = null, array $alprop = null,		$alnamespace = null, $allimit = null)	{		// Build the request.		$path = '?action=query&meta=siteinfo';		if ($alcontinue)		{			$path .= '&alcontinue=';		}		if (isset($alfrom))		{			$path .= '&alfrom=' . $alfrom;		}		if (isset($alto))		{			$path .= '&alto=' . $alto;		}		if (isset($alprefix))		{			$path .= '&alprefix=' . $alprefix;		}		if (isset($alunique))		{			$path .= '&alunique=' . $alunique;		}		if (isset($alprop))		{			$path .= '&alprop=' . $this->buildParameter($alprop);		}		if (isset($alnamespace))		{			$path .= '&alnamespace=' . $alnamespace;		}		if (isset($allimit))		{			$path .= '&allimit=' . $allimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Authentication.gmail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * GMail Authentication Plugin * * @package     Joomla.Plugin * @subpackage  Authentication.gmail * @since       1.5 */class PlgAuthenticationGMail extends JPlugin{	/**	 * This method should handle any authentication and report back to the subject	 *	 * @param   array   $credentials  Array holding the user credentials	 * @param   array   $options      Array of extra options	 * @param   object  $response     Authentication response object	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function onUserAuthenticate($credentials, $options, &$response)	{		$message = '';		$success = 0;		// check if we have curl or not		if (function_exists('curl_init'))		{			// check if we have a username and password			if (strlen($credentials['username']) && strlen($credentials['password']))			{				$blacklist = explode(',', $this->params->get('user_blacklist', ''));				// check if the username isn't blacklisted				if (!in_array($credentials['username'], $blacklist))				{					$suffix = $this->params->get('suffix', '');					$applysuffix = $this->params->get('applysuffix', 0);					// check if we want to do suffix stuff, typically for Google Apps for Your Domain					if ($suffix && $applysuffix)					{						if ($applysuffix == 1 && $offset === false)						{							// Apply suffix if missing							$credentials['username'] .= '@' . $suffix;						}						elseif ($applysuffix == 2)						{							// Always use suffix							if ($offset)							{								// if we already have an @, get rid of it and replace it								$credentials['username'] = substr($credentials['username'], 0, $offset);							}							$credentials['username'] .= '@' . $suffix;						}					}					$curl = curl_init('https://mail.google.com/mail/feed/atom');					curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);					curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, $this->params->get('verifypeer', 1));					//curl_setopt($curl, CURLOPT_HEADER, 1);					curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);					curl_setopt($curl, CURLOPT_USERPWD, $credentials['username'].':'.$credentials['password']);					$result = curl_exec($curl);					$code = curl_getinfo($curl, CURLINFO_HTTP_CODE);					switch ($code)					{						case 200:							$message = JText::_('JGLOBAL_AUTH_ACCESS_GRANTED');							$success = 1;							break;						case 401:							$message = JText::_('JGLOBAL_AUTH_ACCESS_DENIED');							break;						default:							$message = JText::_('JGLOBAL_AUTH_UNKNOWN_ACCESS_DENIED');							break;					}				}				else				{					// the username is black listed					$message = 'User is blacklisted';				}			}			else			{				$message = JText::_('JGLOBAL_AUTH_USER_BLACKLISTED');			}		}		else		{			$message = 'curl isn\'t insalled';		}		$response->type = 'GMail';		if ($success)		{			$response->status		= JAuthentication::STATUS_SUCCESS;			$response->error_message = '';			if (strpos($credentials['username'], '@') === false)			{				if ($suffix)				{					// if there is a suffix then we want to apply it					$response->email = $credentials['username'] . '@' . $suffix;				}				else				{					// if there isn't a suffix just use the default gmail one					$response->email = $credentials['username'] . '@gmail.com';				}			}			else			{				// the username looks like an email address (probably is) so use that				$response->email = $credentials['username'];			}			// reset the username to what we ended up using			$response->username = $credentials['username'];			$response->fullname = $credentials['username'];		}		else		{			$response->status        = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::sprintf('JGLOBAL_AUTH_FAILED', $message);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');?><form	action="<?php echo JRoute::_('index.php?option=com_banners&task=tracks.display&format=raw');?>"	method="post"	name="adminForm"	id="download-form"	class="form-validate">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_BANNERS_TRACKS_DOWNLOAD');?></legend>		<?php foreach ($this->form->getFieldset() as $field) : ?>			<?php if (!$field->hidden) : ?>				<?php echo $field->label; ?>			<?php endif; ?>			<?php echo $field->input; ?>		<?php endforeach; ?>		<div class="clr"></div>		<button type="button" onclick="this.form.submit();window.top.setTimeout('window.parent.SqueezeBox.close()', 700);"><?php echo JText::_('COM_BANNERS_TRACKS_EXPORT');?></button>		<button type="button" onclick="window.parent.SqueezeBox.close();"><?php echo JText::_('COM_BANNERS_CANCEL');?></button>	</fieldset></form>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Profile controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerProfile extends UsersController{	/**	 * Method to check out a user for editing and redirect to the edit form.	 *	 * @since   1.6	 */	public function edit()	{		$app			= JFactory::getApplication();		$user			= JFactory::getUser();		$loginUserId	= (int) $user->get('id');		// Get the previous user id (if any) and the current user id.		$previousId = (int) $app->getUserState('com_users.edit.profile.id');		$userId = $this->input->getInt('user_id', null, 'array');		// Check if the user is trying to edit another users profile.		if ($userId != $loginUserId)		{			JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));			return false;		}		// Set the user id for the user to edit in the session.		$app->setUserState('com_users.edit.profile.id', $userId);		// Get the model.		$model = $this->getModel('Profile', 'UsersModel');		// Check out the user.		if ($userId)		{			$model->checkout($userId);		}		// Check in the previous user.		if ($previousId)		{			$model->checkin($previousId);		}		// Redirect to the edit screen.		$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile&layout=edit', false));	}	/**	 * Method to save a user's profile data.	 *	 * @return  void	 * @since   1.6	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app	= JFactory::getApplication();		$model	= $this->getModel('Profile', 'UsersModel');		$user	= JFactory::getUser();		$userId	= (int) $user->get('id');		// Get the user data.		$data = $app->input->post->get('jform', array(), 'array');		// Force the ID to this user.		$data['id'] = $userId;		// Validate the posted data.		$form = $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		// Validate the posted data.		$data = $model->validate($form, $data);		// Check for errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_users.edit.profile.data', $data);			// Redirect back to the edit screen.			$userId = (int) $app->getUserState('com_users.edit.profile.id');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile&layout=edit&user_id='.$userId, false));			return false;		}		// Attempt to save the data.		$return	= $model->save($data);		// Check for errors.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('com_users.edit.profile.data', $data);			// Redirect back to the edit screen.			$userId = (int) $app->getUserState('com_users.edit.profile.id');			$this->setMessage(JText::sprintf('COM_USERS_PROFILE_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile&layout=edit&user_id='.$userId, false));			return false;		}		// Redirect the user and adjust session state based on the chosen task.		switch ($this->getTask())		{			case 'apply':				// Check out the profile.				$app->setUserState('com_users.edit.profile.id', $return);				$model->checkout($return);				// Redirect back to the edit screen.				$this->setMessage(JText::_('COM_USERS_PROFILE_SAVE_SUCCESS'));				$this->setRedirect(JRoute::_(($redirect = $app->getUserState('com_users.edit.profile.redirect')) ? $redirect : 'index.php?option=com_users&view=profile&layout=edit&hidemainmenu=1', false));				break;			default:				// Check in the profile.				$userId = (int) $app->getUserState('com_users.edit.profile.id');				if ($userId)				{					$model->checkin($userId);				}				// Clear the profile id from the session.				$app->setUserState('com_users.edit.profile.id', null);				// Redirect to the list screen.				$this->setMessage(JText::_('COM_USERS_PROFILE_SAVE_SUCCESS'));				$this->setRedirect(JRoute::_(($redirect = $app->getUserState('com_users.edit.profile.redirect')) ? $redirect : 'index.php?option=com_users&view=profile&user_id='.$return, false));				break;		}		// Flush the data from the session.		$app->setUserState('com_users.edit.profile.data', null);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		$task = $this->getTask();		$item = $model->getData();		$id = $item->get('id');		$tags = $validData['tags'];		if ($tags)		{			$item->tags = new JHelperTags;			$item->tags->getTagIds($item->id, 'com_users.user');			$item->metadata['tags'] = $item->tags;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of banner records. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelBanners extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'cid', 'a.cid', 'client_name',				'name', 'a.name',				'alias', 'a.alias',				'state', 'a.state',				'ordering', 'a.ordering',				'language', 'a.language',				'catid', 'a.catid', 'category_title',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'created', 'a.created',				'impmade', 'a.impmade',				'imptotal', 'a.imptotal',				'clicks', 'a.clicks',				'publish_up', 'a.publish_up',				'publish_down', 'a.publish_down',				'state', 'sticky', 'a.sticky',			);		}		parent::__construct($config);	}	/**	 * Method to get the maximum ordering value for each category.	 *	 * @since   1.6	 */	public function &getCategoryOrders()	{		if (!isset($this->cache['categoryorders']))		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('MAX(ordering) as ' . $db->quoteName('max') . ', catid')				->select('catid')				->from('#__banners')				->group('catid');			$db->setQuery($query);			$this->cache['categoryorders'] = $db->loadAssocList('catid', 0);		}		return $this->cache['categoryorders'];	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id AS id, a.name AS name, a.alias AS alias,' .					'a.checked_out AS checked_out,' .					'a.checked_out_time AS checked_out_time, a.catid AS catid,' .					'a.clicks AS clicks, a.metakey AS metakey, a.sticky AS sticky,' .					'a.impmade AS impmade, a.imptotal AS imptotal,' .					'a.state AS state, a.ordering AS ordering,' .					'a.purchase_type as purchase_type,' .					'a.language, a.publish_up, a.publish_down'			)		);		$query->from($db->quoteName('#__banners') . ' AS a');		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the categories.		$query->select('c.title AS category_title')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		// Join over the clients.		$query->select('cl.name AS client_name,cl.purchase_type as client_purchase_type')			->join('LEFT', '#__banner_clients AS cl ON cl.id = a.cid');		// Filter by published state		$published = $this->getState('filter.state');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state IN (0, 1))');		}		// Filter by category.		$categoryId = $this->getState('filter.category_id');		if (is_numeric($categoryId))		{			$query->where('a.catid = ' . (int) $categoryId);		}		// Filter by client.		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('a.cid = ' . (int) $clientId);		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.name LIKE ' . $search . ' OR a.alias LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering', 'ordering');		$orderDirn = $this->state->get('list.direction', 'ASC');		if ($orderCol == 'ordering' || $orderCol == 'category_title')		{			$orderCol = 'c.title ' . $orderDirn . ', a.ordering';		}		if ($orderCol == 'client_name')		{			$orderCol = 'cl.name';		}		$query->order($db->escape($orderCol . ' ' . $orderDirn));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.category_id');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 * @return  JTable    A database object	 * @since   1.6	 */	public function getTable($type = 'Banner', $prefix = 'BannersTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');// Create shortcut to parameters.$params = $this->state->get('params');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'weblink.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit<?php echo $this->pageclass_sfx; ?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_weblinks&view=form&w_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-vertical">		<div class="btn-toolbar">			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('weblink.save')">					<i class="icon-ok"></i> <?php echo JText::_('JSAVE') ?>				</button>			</div>			<div class="btn-group">				<button type="button" class="btn" onclick="Joomla.submitbutton('weblink.cancel')">					<i class="icon-cancel"></i> <?php echo JText::_('JCANCEL') ?>				</button>			</div>		</div>		<hr class="hr-condensed" />		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('title'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('title'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('alias'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('alias'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('catid'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('catid'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('url'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('url'); ?>			</div>		</div>		<?php if ($this->user->authorise('core.edit.state', 'com_weblinks.weblink')) : ?>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>		<?php endif; ?>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('language'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('language'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('description'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('description'); ?>			</div>		</div>		<input type="hidden" name="return" value="<?php echo $this->return_page;?>" />		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;define('FINDER_PATH_INDEXER', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer');JLoader::register('FinderIndexerHelper', FINDER_PATH_INDEXER . '/helper.php');/** * Suggestions model class for the Finder package. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderModelSuggestions extends JModelList{	/**	 * Context string for the model type.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'com_finder.suggestions';	/**	 * Method to get an array of data items.	 *	 * @return  array  An array of data items.	 *	 * @since   2.5	 */	public function getItems()	{		// Get the items.		$items = parent::getItems();		// Convert them to a simple array.		foreach ($items as $k => $v)		{			$items[$k] = $v->term;		}		return $items;	}	/**	 * Method to build a database query to load the list data.	 *	 * @return  JDatabaseQuery  A database query	 *	 * @since   2.5	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select required fields		$query->select('t.term')			->from($db->quoteName('#__finder_terms') . ' AS t')			->where('t.term LIKE ' . $db->quote($db->escape($this->getState('input'), true) . '%'))			->where('t.common = 0')			->where('t.language IN (' . $db->quote($db->escape($this->getState('language'), true)) . ', ' . $db->quote('*') . ')')			->order('t.links DESC')			->order('t.weight DESC');		return $query;	}	/**	 * Method to get a store id based on model the configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  An identifier string to generate the store id. [optional]	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '')	{		// Add the search query state.		$id .= ':' . $this->getState('input');		$id .= ':' . $this->getState('language');		// Add the list state.		$id .= ':' . $this->getState('list.start');		$id .= ':' . $this->getState('list.limit');		return parent::getStoreId($id);	}	/**	 * Method to auto-populate the model state.  Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState($ordering = null, $direction = null)	{		// Get the configuration options.		$app = JFactory::getApplication();		$input = $app->input;		$params = JComponentHelper::getParams('com_finder');		$user = JFactory::getUser();		// Get the query input.		$this->setState('input', $input->request->get('q', '', 'string'));		// Set the query language		$lang = FinderIndexerHelper::getDefaultLanguage();		$lang = FinderIndexerHelper::getPrimaryLanguage($lang);		$this->setState('language', $lang);		// Load the list state.		$this->setState('list.start', 0);		$this->setState('list.limit', 10);		// Load the parameters.		$this->setState('params', $params);		// Load the user state.		$this->setState('user.id', (int) $user->get('id'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$html = JHtml::_('icons.buttons', $buttons);?><?php if (!empty($html)) : ?>	<div class="row-striped">		<?php echo $html;?>	</div><?php endif;?>
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_title($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"module-title\"><h6>".$module->title."</h6></div>";		echo $module->content;	}}function modChrome_no($module, &$params, &$attribs){	if ($module->content)	{		echo $module->content;	}}function modChrome_well($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"well well-small\">";		echo "<div class=\"module-title nav-header\">".$module->title."</div>";		echo $module->content;		echo "</div>";	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_ARTICLES'); ?>	 </p><?php else : ?>	<form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide' || $this->params->get('show_pagination_limit')) :?>	<fieldset class="filters btn-toolbar">		<?php if ($this->params->get('filter_field') != 'hide') :?>			<div class="btn-group">				<label class="filter-search-lbl element-invisible" for="filter-search"><span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php echo JText::_('COM_CONTACT_FILTER_LABEL').'&#160;'; ?></label>				<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC'); ?>" placeholder="<?php echo JText::_('COM_CONTACT_FILTER_SEARCH_DESC'); ?>" />			</div>		<?php endif; ?>		<?php if ($this->params->get('show_pagination_limit')) : ?>			<div class="btn-group pull-right">				<label for="limit" class="element-invisible">					<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>				</label>				<?php echo $this->pagination->getLimitBox(); ?>			</div>		<?php endif; ?>	</fieldset>	<?php endif; ?>		<ul class="category list-striped">			<?php foreach ($this->items as $i => $item) : ?>				<?php if (in_array($item->access, $this->user->getAuthorisedViewLevels())) : ?>					<?php if ($this->items[$i]->published == 0) : ?>						<li class="system-unpublished cat-list-row<?php echo $i % 2; ?>">					<?php else: ?>						<li class="cat-list-row<?php echo $i % 2; ?>" >					<?php endif; ?>						<span class="pull-right">							<?php if ($this->params->get('show_telephone_headings') AND !empty($item->telephone)) : ?>								<?php echo JTEXT::sprintf('COM_CONTACT_TELEPHONE_NUMBER', $item->telephone); ?><br/>							<?php endif; ?>							<?php if ($this->params->get('show_mobile_headings') AND !empty ($item->mobile)) : ?>									<?php echo JTEXT::sprintf('COM_CONTACT_MOBILE_NUMBER', $item->mobile); ?><br/>							<?php endif; ?>							<?php if ($this->params->get('show_fax_headings') AND !empty($item->fax) ) : ?>								<?php echo JTEXT::sprintf('COM_CONTACT_FAX_NUMBER', $item->fax); ?><br/>							<?php endif; ?>					</span>					<p>						<strong class="list-title">							<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">								<?php echo $item->name; ?></a>							<?php if ($this->items[$i]->published == 0) : ?>								<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>							<?php endif; ?>						</strong><br/>						<?php if ($this->params->get('show_position_headings')) : ?>								<?php echo $item->con_position; ?><br/>						<?php endif; ?>						<?php if ($this->params->get('show_email_headings')) : ?>								<?php echo $item->email_to; ?>						<?php endif; ?>						<?php if ($this->params->get('show_suburb_headings') AND !empty($item->suburb)) : ?>							<?php echo $item->suburb . ', '; ?>						<?php endif; ?>						<?php if ($this->params->get('show_state_headings') AND !empty($item->state)) : ?>							<?php echo $item->state . ', '; ?>						<?php endif; ?>						<?php if ($this->params->get('show_country_headings') AND !empty($item->country)) : ?>							<?php echo $item->country; ?><br/>						<?php endif; ?>					</p>					</li>				<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php if ($this->params->get('show_pagination')) : ?>		<div class="pagination">			<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>			<?php endif; ?>			<?php echo $this->pagination->getPagesLinks(); ?>		</div>		<?php endif; ?>		<div>			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		</div></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('NewsfeedsHelper', JPATH_ADMINISTRATOR . '/components/com_newsfeeds/helpers/newsfeeds.php');/** * Newsfeed model. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsModelNewsfeed extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_NEWSFEEDS';	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   11.1	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_newsfeeds.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->name);			$table->name = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			//$table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    A record object.	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			if (!empty($record->catid))			{				return $user->authorise('core.delete', 'com_newsfeed.category.' . (int) $record->catid);			}			else			{				return parent::canDelete($record);			}		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object    A record object.	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_newsfeeds.category.' . (int) $record->catid);		}		else		{			return parent::canEditState($record);		}	}	/**	 * Returns a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 * @return  JTable    A database object	 */	public function getTable($type = 'Newsfeed', $prefix = 'NewsfeedsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_newsfeeds.newsfeed', 'newsfeed', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Determine correct permissions to check.		if ($this->getState('newsfeed.id'))		{			// Existing record. Can only edit in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit');		}		else		{			// New record. Can only create in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.create');		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_newsfeeds.edit.newsfeed.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('newsfeed.id') == 0)			{				$app = JFactory::getApplication();				$data->set('catid', $app->input->get('catid', $app->getUserState('com_newsfeeds.newsfeeds.filter.category_id'), 'int'));			}		}		$this->preprocessData('com_newsfeeds.newsfeed', $data);		return $data;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since    3.0	 */	public function save($data)	{		$app = JFactory::getApplication();		// Alter the title for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($name, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['name']);			$data['name'] = $name;			$data['alias'] = $alias;			$data['published'] = 0;		}		if (parent::save($data))		{			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$id = (int) $this->getState($this->getName() . '.id');				$item = $this->getItem($id);				// Adding self to the association				$associations = $data['associations'];				foreach ($associations as $tag => $id)				{					if (empty($id))					{						unset($associations[$tag]);					}				}				// Detecting all item menus				$all_language = $item->language == '*';				if ($all_language && !empty($associations))				{					JError::raiseNotice(403, JText::_('COM_NEWSFEEDS_ERROR_ALL_LANGUAGE_ASSOCIATED'));				}				$associations[$item->language] = $item->id;				// Deleting old association for these items				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->delete('#__associations')					->where($db->quoteName('context') . ' = ' . $db->quote('com_newsfeeds.item'))					->where($db->quoteName('id') . ' IN (' . implode(',', $associations) . ')');				$db->setQuery($query);				$db->execute();				if ($error = $db->getErrorMsg())				{					$this->setError($error);					return false;				}				if (!$all_language && count($associations))				{					// Adding new association for these items					$key = md5(json_encode($associations));					$query->clear()						->insert('#__associations');					foreach ($associations as $tag => $id)					{						$query->values($id . ',' . $db->quote('com_newsfeeds.item') . ',' . $db->quote($key));					}					$db->setQuery($query);					$db->execute();					if ($error = $db->getErrorMsg())					{						$this->setError($error);						return false;					}				}			}			return true;		}		return false;	}	/**	 * Method to get a single record.	 *	 * @param   integer    The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		if ($item = parent::getItem($pk))		{			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($item->metadata);			$item->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($item->images);			$item->images = $registry->toArray();		}		// Load associated newsfeeds items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$item->associations = array();			if ($item->id != null)			{				$associations = JLanguageAssociations::getAssociations('com_newsfeeds', '#__newsfeeds', 'com_newsfeeds.item', $item->id);				foreach ($associations as $tag => $association)				{					$item->associations[$tag] = $association->id;				}			}		}		if (!empty($item->id))		{			$item->tags = new JHelperTags;			$item->tags->getTagIds($item->id, 'com_newsfeeds.newsfeed');			$item->metadata['tags'] = $item->tags;		}		return $item;	}	/**	 * Prepare and sanitise the table prior to saving.	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		$table->name = htmlspecialchars_decode($table->name, ENT_QUOTES);		$table->alias = JApplication::stringURLSafe($table->alias);		if (empty($table->alias))		{			$table->alias = JApplication::stringURLSafe($table->name);		}		if (empty($table->id))		{			// Set the values			$table->created = $date->toSql();			// Set ordering to the last item if not set			if (empty($table->ordering))			{				$db = JFactory::getDbo();				$db->setQuery('SELECT MAX(ordering) FROM #__newsfeeds');				$max = $db->loadResult();				$table->ordering = $max + 1;			}		}		else		{			// Set the values			$table->modified = $date->toSql();			$table->modified_by = $user->get('id');		}		// Increment the content version number.		$table->version++;	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    $pks      A list of the primary keys to change.	 * @param   integer  $value    The value of the published state.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function publish(&$pks, $value = 1)	{		$result = parent::publish($pks, $value);		// Clean extra cache for newsfeeds		$this->cleanCache('feed_parser');		return $result;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object    A record object.	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = ' . (int) $table->catid;		return $condition;	}	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Association newsfeeds items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			// force to array (perhaps move to $this->loadFormData())			$data = (array) $data;			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_NEWSFEEDS_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if (empty($data['language']) || $tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'modal_newsfeeds');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');				}			}			if ($add)			{				$form->load($addform, false);			}		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($category_id, $alias, $name)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'catid' => $category_id)))		{			if ($name == $table->name)			{				$name = JString::increment($name);			}			$alias = JString::increment($alias, 'dash');		}		return array($name, $alias);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API Gps class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmapGps extends JOpenstreetmapObject{	/**	 * Method to retrieve GPS points	 * 	 * @param   float  $left    left boundary	 * @param   float  $bottom  bottom boundary	 * @param   float  $right   right boundary	 * @param   float  $top     top boundary	 * @param   int    $page    page number	 * 	 * @return	array	The xml response containing GPS points	 * 	 * @since	13.1	 */	public function retrieveGps($left,$bottom,$right,$top,$page=0)	{		// Set the API base		$base = 'trackpoints?bbox=' . $left . ',' . $bottom . ',' . $right . ',' . $top . '&page=' . $page;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', array());		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}	/**	 * Method to upload GPS Traces	 * 	 * @param   string  $file         file name that contains trace points	 * @param   string  $description  description on trace points	 * @param   string  $tags         tags for trace	 * @param   int     $public       1 for public, 0 for private	 * @param   string  $visibility   One of the following: private, public, trackable, identifiable	 * @param   string  $username     username	 * @param   string  $password     password	 * 	 * @return  JHttpResponse the response	 * 	 * @since   13.1	 */	public function uploadTrace($file, $description, $tags, $public, $visibility, $username, $password)	{		// Set parameters.		$parameters = array(				'file' => $file,				'description' => $description,				'tags' => $tags,				'public' => $public,				'visibility' => $visibility		);		// Set the API base		$base = 'gpx/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'multipart/form-data';		$header = array_merge($header, $parameters);		$header = array_merge($header, array('Authorization' => 'Basic ' . base64_encode($username . ':' . $password)));		// Send the request.		$response = $this->sendRequest($path, 'POST', $header, array());		return $response;	}	/**	 * Method to download Trace details	 * 	 * @param   int     $id        trace identifier	 * @param   string  $username  username	 * @param   string  $password  password	 * 	 * @return  array  The xml response	 * 	 * @since   13.1	 */	public function downloadTraceMetadetails($id, $username, $password)	{		// Set the API base		$base = 'gpx/' . $id . '/details';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path, 'GET', array('Authorization' => 'Basic ' . base64_encode($username . ':' . $password)));		return $xml_string;	}	/**	 * Method to download Trace data	 * 	 * @param   int     $id        trace identifier	 * @param   string  $username  username	 * @param   string  $password  password	 * 	 * @return  array  The xml response	 * 	 * @since   13.1	 */	public function downloadTraceMetadata($id, $username, $password)	{		// Set the API base		$base = 'gpx/' . $id . '/data';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$client = JHttpFactory::getHttp();		// Send the request.		$xml_string = $this->sendRequest($path, 'GET', array('Authorization' => 'Basic ' . base64_encode($username . ':' . $password)));		return $xml_string;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'message.cancel' || document.formvalidator.isValid(document.id('message-form')))		{			Joomla.submitform(task, document.getElementById('message-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_messages'); ?>" method="post" name="adminForm" id="message-form" class="form-validate form-horizontal">	<fieldset class="adminform">		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('user_id_to'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('user_id_to'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('subject'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('subject'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('message'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('message'); ?>			</div>		</div>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Memcache cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://php.net/manual/en/book.memcache.php * @since       11.1 */class JCacheStorageMemcache extends JCacheStorage{	/**	 * @var    Memcache	 * @since  11.1	 */	protected static $_db = null;	/**	 * @var    boolean	 * @since  11.1	 */	protected $_persistent = false;	/**	 * @var	 * @since   11.1	 */	protected $_compress = 0;	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		if (self::$_db === null)		{			$this->getConnection();		}	}	/**	 * Return memcache connection object	 *	 * @return  object   memcache connection object	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function getConnection()	{		if ((extension_loaded('memcache') && class_exists('Memcache')) != true)		{			return false;		}		$config = JFactory::getConfig();		$this->_persistent = $config->get('memcache_persist', true);		$this->_compress = $config->get('memcache_compress', false) == false ? 0 : MEMCACHE_COMPRESSED;		/*		 * This will be an array of loveliness		 * @todo: multiple servers		 * $servers	= (isset($params['servers'])) ? $params['servers'] : array();		 */		$server = array();		$server['host'] = $config->get('memcache_server_host', 'localhost');		$server['port'] = $config->get('memcache_server_port', 11211);		// Create the memcache connection		self::$_db = new Memcache;		self::$_db->addServer($server['host'], $server['port'], $this->_persistent);		$memcachetest = @self::$_db->connect($server['host'], $server['port']);		if ($memcachetest == false)		{			throw new RuntimeException('Could not connect to memcache server', 404);		}		// Memcahed has no list keys, we do our own accounting, initialise key index		if (self::$_db->get($this->_hash . '-index') === false)		{			$empty = array();			self::$_db->set($this->_hash . '-index', $empty, $this->_compress, 0);		}		return;	}	/**	 * Get cached data from memcache by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean false on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		$back = self::$_db->get($cache_id);		return $back;	}	/**	 * Get all cached data	 *	 * @return  array    data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$keys = self::$_db->get($this->_hash . '-index');		$secret = $this->_hash;		$data = array();		if (!empty($keys))		{			foreach ($keys as $key)			{				if (empty($key))				{					continue;				}				$namearr = explode('-', $key->name);				if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')				{					$group = $namearr[2];					if (!isset($data[$group]))					{						$item = new JCacheStorageHelper($group);					}					else					{						$item = $data[$group];					}					$item->updateSize($key->size / 1024);					$data[$group] = $item;				}			}		}		return $data;	}	/**	 * Store the data to memcache by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		$tmparr = new stdClass;		$tmparr->name = $cache_id;		$tmparr->size = strlen($data);		$config = JFactory::getConfig();		$lifetime = (int) $config->get('cachetime', 15);		if ($this->_lifetime == $lifetime)		{			$this->_lifetime = $lifetime * 60;		}		$index[] = $tmparr;		self::$_db->replace($this->_hash . '-index', $index, 0, 0);		$this->unlockindex();		// Prevent double writes, write only if it doesn't exist else replace		if (!self::$_db->replace($cache_id, $data, $this->_compress, $this->_lifetime))		{			self::$_db->set($cache_id, $data, $this->_compress, $this->_lifetime);		}		return true;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		foreach ($index as $key => $value)		{			if ($value->name == $cache_id)			{				unset($index[$key]);			}			break;		}		self::$_db->replace($this->_hash . '-index', $index, 0, 0);		$this->unlockindex();		return self::$_db->delete($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		$secret = $this->_hash;		foreach ($index as $key => $value)		{			if (strpos($value->name, $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				self::$_db->delete($value->name, 0);				unset($index[$key]);			}		}		self::$_db->replace($this->_hash . '-index', $index, 0, 0);		$this->unlockindex();		return true;	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		if ((extension_loaded('memcache') && class_exists('Memcache')) != true)		{			return false;		}		$config = JFactory::getConfig();		$host = $config->get('memcache_server_host', 'localhost');		$port = $config->get('memcache_server_port', 11211);		$memcache = new Memcache;		$memcachetest = @$memcache->connect($host, $port);		if (!$memcachetest)		{			return false;		}		else		{			return true;		}	}	/**	 * Lock cached item - override parent as this is more efficient	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function lock($id, $group, $locktime)	{		$returning = new stdClass;		$returning->locklooped = false;		$looptime = $locktime * 10;		$cache_id = $this->_getCacheId($id, $group);		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		$tmparr = new stdClass;		$tmparr->name = $cache_id;		$tmparr->size = 1;		$index[] = $tmparr;		self::$_db->replace($this->_hash . '-index', $index, 0, 0);		$this->unlockindex();		$data_lock = self::$_db->add($cache_id . '_lock', 1, false, $locktime);		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = self::$_db->add($cache_id . '_lock', 1, false, $locktime);				$lock_counter++;			}		}		$returning->locked = $data_lock;		return $returning;	}	/**	 * Unlock cached item - override parent for cacheid compatibility with lock	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		$cache_id = $this->_getCacheId($id, $group) . '_lock';		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		foreach ($index as $key => $value)		{			if ($value->name == $cache_id)			{				unset($index[$key]);			}			break;		}		self::$_db->replace($this->_hash . '-index', $index, 0, 0);		$this->unlockindex();		return self::$_db->delete($cache_id);	}	/**	 * Lock cache index	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	protected function lockindex()	{		$looptime = 300;		$data_lock = self::$_db->add($this->_hash . '-index_lock', 1, false, 30);		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.  that implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					return false;					break;				}				usleep(100);				$data_lock = self::$_db->add($this->_hash . '-index_lock', 1, false, 30);				$lock_counter++;			}		}		return true;	}	/**	 * Unlock cache index	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	protected function unlockindex()	{		return self::$_db->delete($this->_hash . '-index_lock');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * User notes list view * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersViewNotes extends JViewLegacy{	/**	 * A list of user note objects.	 *	 * @var    array	 * @since  2.5	 */	protected $items;	/**	 * The pagination object.	 *	 * @var    JPagination	 * @since  2.5	 */	protected $pagination;	/**	 * The model state.	 *	 * @var    JObject	 * @since  2.5	 */	protected $state;	/**	 * The model state.	 *	 * @var    JUser	 * @since  2.5	 */	protected $user;	/**	 * Override the display method for the view.	 *	 * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Initialise view variables.		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		$this->user       = $this->get('User');		UsersHelper::addSubmenu('notes');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			throw new Exception(implode("\n", $errors), 500);		}		// Get the component HTML helpers		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// turn parameters into registry objects		foreach ($this->items as $item)		{			$item->cparams = new JRegistry;			$item->cparams->loadString($item->category_params);		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Display the toolbar.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		$canDo = UsersHelper::getActions();		JToolbarHelper::title(JText::_('COM_USERS_VIEW_NOTES_TITLE'), 'user');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('note.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('note.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::divider();			JToolbarHelper::publish('notes.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('notes.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::divider();			JToolbarHelper::archiveList('notes.archive');			JToolbarHelper::checkin('notes.checkin');		}		if ($this->state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'notes.delete', 'JTOOLBAR_EMPTY_TRASH');			JToolbarHelper::divider();		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('notes.trash');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_users');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_USERS_USER_NOTES');		JHtmlSidebar::setAction('index.php?option=com_users&view=notes');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_users.notes'), 'value', 'text', $this->state->get('filter.category_id'))		);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><div class="remind <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form id="user-registration" action="<?php echo JRoute::_('index.php?option=com_users&task=remind.remind'); ?>" method="post" class="form-validate form-horizontal">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		</fieldset>		<?php endforeach; ?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Oauth * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.response');/** * Joomla Platform class for interacting with an OAuth 2.0 server. * * @package     Joomla.Platform * @subpackage  Oauth * @since       12.3 */class JOAuth2Client{	/**	 * @var    JRegistry  Options for the JOAuth2Client object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  12.3	 */	protected $http;	/**	 * @var    JInput  The input object to use in retrieving GET/POST data.	 * @since  12.3	 */	protected $input;	/**	 * @var    JApplicationWeb  The application object to send HTTP headers for redirects.	 * @since  12.3	 */	protected $application;	/**	 * Constructor.	 *	 * @param   JRegistry        $options      JOAuth2Client options object	 * @param   JHttp            $http         The HTTP client object	 * @param   JInput           $input        The input object	 * @param   JApplicationWeb  $application  The application object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JHttp $http = null, JInput $input = null, JApplicationWeb $application = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->http = isset($http) ? $http : new JHttp($this->options);		$this->input = isset($input) ? $input : JFactory::getApplication()->input;		$this->application = isset($application) ? $application : new JApplicationWeb;	}	/**	 * Get the access token or redict to the authentication URL.	 *	 * @return  string  The access token	 *	 * @since   12.3	 */	public function authenticate()	{		if ($data['code'] = $this->input->get('code', false, 'raw'))		{			$data['grant_type'] = 'authorization_code';			$data['redirect_uri'] = $this->getOption('redirecturi');			$data['client_id'] = $this->getOption('clientid');			$data['client_secret'] = $this->getOption('clientsecret');			$response = $this->http->post($this->getOption('tokenurl'), $data);			if ($response->code >= 200 && $response->code < 400)			{				if ($response->headers['Content-Type'] == 'application/json')				{					$token = array_merge(json_decode($response->body, true), array('created' => time()));				}				else				{					parse_str($response->body, $token);					$token = array_merge($token, array('created' => time()));				}				$this->setToken($token);				return $token;			}			else			{				throw new RuntimeException('Error code ' . $response->code . ' received requesting access token: ' . $response->body . '.');			}		}		if ($this->getOption('sendheaders'))		{			$this->application->redirect($this->createUrl());		}		return false;	}	/**	 * Verify if the client has been authenticated	 *	 * @return  boolean  Is authenticated	 *	 * @since   12.3	 */	public function isAuthenticated()	{		$token = $this->getToken();		if (!$token || !array_key_exists('access_token', $token))		{			return false;		}		elseif (array_key_exists('expires_in', $token) && $token['created'] + $token['expires_in'] < time() + 20)		{			return false;		}		else		{			return true;		}	}	/**	 * Create the URL for authentication.	 *	 * @return  JHttpResponse  The HTTP response	 *	 * @since   12.3	 */	public function createUrl()	{		if (!$this->getOption('authurl') || !$this->getOption('clientid'))		{			throw new InvalidArgumentException('Authorization URL and client_id are required');		}		$url = $this->getOption('authurl');		if (strpos($url, '?'))		{			$url .= '&';		}		else		{			$url .= '?';		}		$url .= 'response_type=code';		$url .= '&client_id=' . urlencode($this->getOption('clientid'));		if ($this->getOption('redirecturi'))		{			$url .= '&redirect_uri=' . urlencode($this->getOption('redirecturi'));		}		if ($this->getOption('scope'))		{			$scope = is_array($this->getOption('scope')) ? implode(' ', $this->getOption('scope')) : $this->getOption('scope');			$url .= '&scope=' . urlencode($scope);		}		if ($this->getOption('state'))		{			$url .= '&state=' . urlencode($this->getOption('state'));		}		if (is_array($this->getOption('requestparams')))		{			foreach ($this->getOption('requestparams') as $key => $value)			{				$url .= '&' . $key . '=' . urlencode($value);			}		}		return $url;	}	/**	 * Send a signed Oauth request.	 *	 * @param   string  $url      The URL forf the request.	 * @param   mixed   $data     The data to include in the request	 * @param   array   $headers  The headers to send with the request	 * @param   string  $method   The method with which to send the request	 * @param   int     $timeout  The timeout for the request	 *	 * @return  string  The URL.	 *	 * @since   12.3	 */	public function query($url, $data = null, $headers = array(), $method = 'get', $timeout = null)	{		$token = $this->getToken();		if (array_key_exists('expires_in', $token) && $token['created'] + $token['expires_in'] < time() + 20)		{			if (!$this->getOption('userefresh'))			{				return false;			}			$token = $this->refreshToken($token['refresh_token']);		}		if (!$this->getOption('authmethod') || $this->getOption('authmethod') == 'bearer')		{			$headers['Authorization'] = 'Bearer ' . $token['access_token'];		}		elseif ($this->getOption('authmethod') == 'get')		{			if (strpos($url, '?'))			{				$url .= '&';			}			else			{				$url .= '?';			}			$url .= $this->getOption('getparam') ? $this->getOption('getparam') : 'access_token';			$url .= '=' . $token['access_token'];		}		switch ($method)		{			case 'head':			case 'get':			case 'delete':			case 'trace':			$response = $this->http->$method($url, $headers, $timeout);			break;			case 'post':			case 'put':			case 'patch':			$response = $this->http->$method($url, $data, $headers, $timeout);			break;			default:			throw new InvalidArgumentException('Unknown HTTP request method: ' . $method . '.');		}		if ($response->code < 200 || $response->code >= 400)		{			throw new RuntimeException('Error code ' . $response->code . ' received requesting data: ' . $response->body . '.');		}		return $response;	}	/**	 * Get an option from the JOAuth2Client instance.	 *	 * @param   string  $key  The name of the option to get	 *	 * @return  mixed  The option value	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JOAuth2Client instance.	 *	 * @param   string  $key    The name of the option to set	 * @param   mixed   $value  The option value to set	 *	 * @return  JOAuth2Client  This object for method chaining	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}	/**	 * Get the access token from the JOAuth2Client instance.	 *	 * @return  array  The access token	 *	 * @since   12.3	 */	public function getToken()	{		return $this->getOption('accesstoken');	}	/**	 * Set an option for the JOAuth2Client instance.	 *	 * @param   array  $value  The access token	 *	 * @return  JOAuth2Client  This object for method chaining	 *	 * @since   12.3	 */	public function setToken($value)	{		if (is_array($value) && !array_key_exists('expires_in', $value) && array_key_exists('expires', $value))		{			$value['expires_in'] = $value['expires'];			unset($value['expires']);		}		$this->setOption('accesstoken', $value);		return $this;	}	/**	 * Refresh the access token instance.	 *	 * @param   string  $token  The refresh token	 *	 * @return  array  The new access token	 *	 * @since   12.3	 */	public function refreshToken($token = null)	{		if (!$this->getOption('userefresh'))		{			throw new RuntimeException('Refresh token is not supported for this OAuth instance.');		}		if (!$token)		{			$token = $this->getToken();			if (!array_key_exists('refresh_token', $token))			{				throw new RuntimeException('No refresh token is available.');			}			$token = $token['refresh_token'];		}		$data['grant_type'] = 'refresh_token';		$data['refresh_token'] = $token;		$data['client_id'] = $this->getOption('clientid');		$data['client_secret'] = $this->getOption('clientsecret');		$response = $this->http->post($this->getOption('tokenurl'), $data);		if ($response->code >= 200 || $response->code < 400)		{			if ($response->headers['Content-Type'] == 'application/json')			{				$token = array_merge(json_decode($response->body, true), array('created' => time()));			}			else			{				parse_str($response->body, $token);				$token = array_merge($token, array('created' => time()));			}			$this->setToken($token);			return $token;		}		else		{			throw new Exception('Error code ' . $response->code . ' received refreshing token: ' . $response->body . '.');		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to encapsulate a feed entry for the Joomla Platform. * * @property  JFeedPerson  $author         Person responsible for feed entry content. * @property  array        $categories     Categories to which the feed entry belongs. * @property  string       $content        The content of the feed entry. * @property  array        $contributors   People who contributed to the feed entry content. * @property  string       $copyright      Information about rights, e.g. copyrights, held in and over the feed entry. * @property  array        $links          Links associated with the feed entry. * @property  JDate        $publishedDate  The publication date for the feed entry. * @property  JFeed        $source         The feed from which the entry is sourced. * @property  string       $title          A human readable title for the feed entry. * @property  JDate        $updatedDate    The last time the content of the feed entry changed. * @property  string       $uri            Universal, permanent identifier for the feed entry. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */class JFeedEntry{	/**	 * @var    array  The entry properties.	 * @since  12.3	 */	protected $properties = array(		'uri'  => '',		'title' => '',		'updatedDate' => '',		'content' => '',		'categories' => array(),		'contributors' => array(),		'links' => array()	);	/**	 * Magic method to return values for feed entry properties.	 *	 * @param   string  $name  The name of the property.	 *	 * @return  mixed	 *	 * @since   12.3	 */	public function __get($name)	{		return (isset($this->properties[$name])) ? $this->properties[$name] : null;	}	/**	 * Magic method to set values for feed properties.	 *	 * @param   string  $name   The name of the property.	 * @param   mixed   $value  The value to set for the property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __set($name, $value)	{		// Ensure that setting a date always sets a JDate instance.		if ((($name == 'updatedDate') || ($name == 'publishedDate')) && !($value instanceof JDate))		{			$value = new JDate($value);		}		// Validate that any authors that are set are instances of JFeedPerson or null.		if (($name == 'author') && (!($value instanceof JFeedPerson) || ($value === null)))		{			throw new InvalidArgumentException('JFeedEntry "author" must be of type JFeedPerson. ' . gettype($value) . 'given.');		}		// Validate that any sources that are set are instances of JFeed or null.		if (($name == 'source') && (!($value instanceof JFeed) || ($value === null)))		{			throw new InvalidArgumentException('JFeedEntry "source" must be of type JFeed. ' . gettype($value) . 'given.');		}		// Disallow setting categories, contributors, or links directly.		if (($name == 'categories') || ($name == 'contributors') || ($name == 'links'))		{			throw new InvalidArgumentException('Cannot directly set JFeedEntry property "' . $name . '".');		}		$this->properties[$name] = $value;	}	/**	 * Method to add a category to the feed entry object.	 *	 * @param   string  $name  The name of the category to add.	 * @param   string  $uri   The optional URI for the category to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addCategory($name, $uri = '')	{		$this->properties['categories'][$name] = $uri;		return $this;	}	/**	 * Method to add a contributor to the feed entry object.	 *	 * @param   string  $name   The full name of the person to add.	 * @param   string  $email  The email address of the person to add.	 * @param   string  $uri    The optional URI for the person to add.	 * @param   string  $type   The optional type of person to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addContributor($name, $email, $uri = null, $type = null)	{		$contributor = new JFeedPerson($name, $email, $uri, $type);		// If the new contributor already exists then there is nothing to do, so just return.		foreach ($this->properties['contributors'] as $c)		{			if ($c == $contributor)			{				return $this;			}		}		// Add the new contributor.		$this->properties['contributors'][] = $contributor;		return $this;	}	/**	 * Method to add a link to the feed entry object.	 *	 * @param   JFeedLink  $link  The link object to add.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function addLink(JFeedLink $link)	{		// If the new link already exists then there is nothing to do, so just return.		foreach ($this->properties['links'] as $l)		{			if ($l == $link)			{				return $this;			}		}		// Add the new link.		$this->properties['links'][] = $link;		return $this;	}	/**	 * Method to remove a category from the feed entry object.	 *	 * @param   string  $name  The name of the category to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeCategory($name)	{		unset($this->properties['categories'][$name]);		return $this;	}	/**	 * Method to remove a contributor from the feed entry object.	 *	 * @param   JFeedPerson  $contributor  The person object to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeContributor(JFeedPerson $contributor)	{		// If the contributor exists remove it.		foreach ($this->properties['contributors'] as $k => $c)		{			if ($c == $contributor)			{				unset($this->properties['contributors'][$k]);				$this->properties['contributors'] = array_values($this->properties['contributors']);				return $this;			}		}		return $this;	}	/**	 * Method to remove a link from the feed entry object.	 *	 * @param   JFeedLink  $link  The link object to remove.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function removeLink(JFeedLink $link)	{		// If the link exists remove it.		foreach ($this->properties['links'] as $k => $l)		{			if ($l == $link)			{				unset($this->properties['links'][$k]);				$this->properties['links'] = array_values($this->properties['links']);				return $this;			}		}		return $this;	}	/**	 * Shortcut method to set the author for the feed entry object.	 *	 * @param   string  $name   The full name of the person to set.	 * @param   string  $email  The email address of the person to set.	 * @param   string  $uri    The optional URI for the person to set.	 * @param   string  $type   The optional type of person to set.	 *	 * @return  JFeedEntry	 *	 * @since   12.3	 */	public function setAuthor($name, $email, $uri = null, $type = null)	{		$author = new JFeedPerson($name, $email, $uri, $type);		$this->properties['author'] = $author;		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// JLayout for standard handling of metadata fields in the administrator content edit screens.$form = $displayData->get('form');?><fieldset>	<div class="control-group">		<?php echo $form->getLabel('metadesc'); ?>		<div class="controls">			<?php echo $form->getInput('metadesc'); ?>		</div>	</div>	<div class="control-group">		<?php echo $form->getLabel('metakey'); ?>		<div class="controls">			<?php echo $form->getInput('metakey'); ?>		</div>	</div>	<?php if ($form->getLabel('xreference')):?>		<div class="control-group">			<?php echo $form->getLabel('xreference'); ?>			<div class="controls">				<?php echo $form->getInput('xreference'); ?>			</div>		</div>	<?php endif; ?>	<?php foreach ($form->getGroup('metadata') as $field) : ?>		<?php if ($field->name != 'jform[metadata][tags][]') :?>			<div class="control-group">				<?php if (!$field->hidden) : ?>					<?php echo $field->label; ?>				<?php endif; ?>				<div class="controls">					<?php echo $field->input; ?>				</div>			</div>		<?php endif; ?>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Menu table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableMenu extends JTableNested{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__menu', 'id', $db);		// Set the default access level.		$this->access = (int) JFactory::getConfig()->get('access');	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Verify that the default home menu is not unset		if ($this->home == '1' && $this->language == '*' && ($array['home'] == '0'))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_CANNOT_UNSET_DEFAULT_DEFAULT'));			return false;		}		// Verify that the default home menu set to "all" languages" is not unset		if ($this->home == '1' && $this->language == '*' && ($array['language'] != '*'))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_CANNOT_UNSET_DEFAULT'));			return false;		}		// Verify that the default home menu is not unpublished		if ($this->home == '1' && $this->language == '*' && $array['published'] != '1')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNPUBLISH_DEFAULT_HOME'));			return false;		}		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		// If the alias field is empty, set it to the title.		$this->alias = trim($this->alias);		if ((empty($this->alias)) && ($this->type != 'alias' && $this->type != 'url'))		{			$this->alias = $this->title;		}		// Make the alias URL safe.		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		// Cast the home property to an int for checking.		$this->home = (int) $this->home;		// Verify that a first level menu item alias is not 'component'.		if ($this->parent_id == 1 && $this->alias == 'component')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_ROOT_ALIAS_COMPONENT'));			return false;		}		// Verify that a first level menu item alias is not the name of a folder.		jimport('joomla.filesystem.folder');		if ($this->parent_id == 1 && in_array($this->alias, JFolder::folders(JPATH_ROOT)))		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_MENU_ROOT_ALIAS_FOLDER', $this->alias, $this->alias));			return false;		}		// Verify that the home item a component.		if ($this->home && $this->type != 'component')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_HOME_NOT_COMPONENT'));			return false;		}		return true;	}	/**	 * Overloaded store function	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  mixed  False on failure, positive integer on success.	 *	 * @see     JTable::store	 * @since   11.1	 */	public function store($updateNulls = false)	{		$db = JFactory::getDbo();		// Verify that the alias is unique		$table = JTable::getInstance('Menu', 'JTable', array('dbo' => $this->getDbo()));		if ($table->load(array('alias' => $this->alias, 'parent_id' => $this->parent_id, 'client_id' => (int) $this->client_id, 'language' => $this->language))			&& ($table->id != $this->id || $this->id == 0))		{			if ($this->menutype == $table->menutype)			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNIQUE_ALIAS'));			}			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_UNIQUE_ALIAS_ROOT'));			}			return false;		}		// Verify that the home page for this language is unique		if ($this->home == '1')		{			$table = JTable::getInstance('Menu', 'JTable', array('dbo' => $this->getDbo()));			if ($table->load(array('home' => '1', 'language' => $this->language)))			{				if ($table->checked_out && $table->checked_out != $this->checked_out)				{					$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_DEFAULT_CHECKIN_USER_MISMATCH'));					return false;				}				$table->home = 0;				$table->checked_out = 0;				$table->checked_out_time = $db->getNullDate();				$table->store();			}			// Verify that the home page for this menu is unique.			if ($table->load(array('home' => '1', 'menutype' => $this->menutype)) && ($table->id != $this->id || $this->id == 0))			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_MENU_HOME_NOT_UNIQUE_IN_MENU'));				return false;			}		}		if (!parent::store($updateNulls))		{			return false;		}		// Get the new path in case the node was moved		$pathNodes = $this->getPath();		$segments = array();		foreach ($pathNodes as $node)		{			// Don't include root in path			if ($node->alias != 'root')			{				$segments[] = $node->alias;			}		}		$newPath = trim(implode('/', $segments), ' /\\');		// Use new path for partial rebuild of table		// Rebuild will return positive integer on success, false on failure		return ($this->rebuild($this->{$this->_tbl_key}, $this->lft, $this->level, $newPath) > 0);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Load tooltips behaviorJHtml::_('behavior.formvalidation');JHtml::_('behavior.switcher');JHtml::_('behavior.tooltip');// Load submenu template, using element id 'submenu' as needed by behavior.switcher$this->document->setBuffer($this->loadTemplate('navigation'), 'modules', 'submenu');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'application.cancel' || document.formvalidator.isValid(document.id('application-form')))		{			Joomla.submitform(task, document.getElementById('application-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_config');?>" id="application-form" method="post" name="adminForm" class="form-validate">	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftplogin'); ?>	<?php endif; ?>	<div id="config-document">		<div id="page-site" class="tab">			<div class="noshow">				<div class="width-60 fltlft">					<?php echo $this->loadTemplate('site'); ?>					<?php echo $this->loadTemplate('metadata'); ?>				</div>				<div class="width-40 fltrt">					<?php echo $this->loadTemplate('seo'); ?>					<?php echo $this->loadTemplate('cookie'); ?>				</div>			</div>		</div>		<div id="page-system" class="tab">			<div class="noshow">				<div class="width-60 fltlft">					<?php echo $this->loadTemplate('system'); ?>				</div>				<div class="width-40 fltrt">					<?php echo $this->loadTemplate('debug'); ?>					<?php echo $this->loadTemplate('cache'); ?>					<?php echo $this->loadTemplate('session'); ?>				</div>			</div>		</div>		<div id="page-server" class="tab">			<div class="noshow">				<div class="width-60 fltlft">					<?php echo $this->loadTemplate('server'); ?>					<?php echo $this->loadTemplate('locale'); ?>					<?php echo $this->loadTemplate('ftp'); ?>				</div>				<div class="width-40 fltrt">					<?php echo $this->loadTemplate('database'); ?>					<?php echo $this->loadTemplate('mail'); ?>				</div>			</div>		</div>		<div id="page-permissions" class="tab">			<div class="noshow">				<?php echo $this->loadTemplate('permissions'); ?>			</div>		</div>		<div id="page-filters" class="tab">			<div class="noshow">				<?php echo $this->loadTemplate('filters'); ?>			</div>		</div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * marker_class: Class based on the selection of text, none, or icons * jicon-text, jicon-none, jicon-icon */?><dl class="contact-address dl-horizontal">	<?php if (($this->params->get('address_check') > 0) &&		($this->contact->address || $this->contact->suburb  || $this->contact->state || $this->contact->country || $this->contact->postcode)) : ?>		<?php if ($this->params->get('address_check') > 0) : ?>			<dt>				<span class="<?php echo $this->params->get('marker_class'); ?>" >					<?php echo $this->params->get('marker_address'); ?>				</span>			</dt>		<?php endif; ?>		<?php if ($this->contact->address && $this->params->get('show_street_address')) : ?>			<dd>				<span class="contact-street">					<?php echo $this->contact->address .'<br/>'; ?>				</span>			</dd>		<?php endif; ?>		<?php if ($this->contact->suburb && $this->params->get('show_suburb')) : ?>			<dd>				<span class="contact-suburb">					<?php echo $this->contact->suburb .'<br/>'; ?>				</span>			</dd>		<?php endif; ?>		<?php if ($this->contact->state && $this->params->get('show_state')) : ?>			<dd>				<span class="contact-state">					<?php echo $this->contact->state . '<br/>'; ?>				</span>			</dd>		<?php endif; ?>		<?php if ($this->contact->postcode && $this->params->get('show_postcode')) : ?>			<dd>				<span class="contact-postcode">					<?php echo $this->contact->postcode .'<br/>'; ?>				</span>			</dd>		<?php endif; ?>		<?php if ($this->contact->country && $this->params->get('show_country')) : ?>		<dd>			<span class="contact-country">				<?php echo $this->contact->country .'<br/>'; ?>			</span>		</dd>		<?php endif; ?>	<?php endif; ?><?php if ($this->contact->email_to && $this->params->get('show_email')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo nl2br($this->params->get('marker_email')); ?>		</span>	</dt>	<dd>		<span class="contact-emailto">			<?php echo $this->contact->email_to; ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->telephone && $this->params->get('show_telephone')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_telephone'); ?>		</span>	</dt>	<dd>		<span class="contact-telephone">			<?php echo nl2br($this->contact->telephone); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->fax && $this->params->get('show_fax')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_fax'); ?>		</span>	</dt>	<dd>		<span class="contact-fax">		<?php echo nl2br($this->contact->fax); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->mobile && $this->params->get('show_mobile')) :?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_mobile'); ?>		</span>	</dt>	<dd>		<span class="contact-mobile">			<?php echo nl2br($this->contact->mobile); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->webpage && $this->params->get('show_webpage')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >		</span>	</dt>	<dd>		<span class="contact-webpage">			<a href="<?php echo $this->contact->webpage; ?>" target="_blank">			<?php echo $this->contact->webpage; ?></a>		</span>	</dd><?php endif; ?></dl>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('bootstrap.tooltip');JHtml::_('formbehavior.chosen');$document = JFactory::getDocument();$mainDirection = $document->direction == 'rtl' ? 'right' : 'left';$altDirection  = $document->direction == 'rtl' ? 'left' : 'right';?><form action="<?php echo JRoute::_('index.php', true, $params->get('usesecure')); ?>" method="post" id="form-login" class="form-inline">	<fieldset class="loginform">		<div class="control-group">			<div class="controls">				<div class="input-prepend input-append">					<span class="add-on">						<i class="icon-user hasTooltip" data-placement="<?php echo $mainDirection; ?>" title="<?php echo JText::_('JGLOBAL_USERNAME'); ?>"></i>						<label for="mod-login-username" class="element-invisible">							<?php echo JText::_('JGLOBAL_USERNAME'); ?>						</label>					</span>					<input name="username" tabindex="1" id="mod-login-username" type="text" class="input-medium" placeholder="<?php echo JText::_('JGLOBAL_USERNAME'); ?>" size="15"/>					<a href="<?php echo JUri::root(); ?>index.php?option=com_users&view=remind" class="btn width-auto hasTooltip" data-placement="<?php echo $altDirection; ?>" title="<?php echo JText::_('MOD_LOGIN_REMIND'); ?>">						<i class="icon-help" title="<?php echo JText::_('MOD_LOGIN_REMIND'); ?>"></i>					</a>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="input-prepend input-append">					<span class="add-on">						<i class="icon-lock hasTooltip" data-placement="<?php echo $mainDirection; ?>" title="<?php echo JText::_('JGLOBAL_PASSWORD'); ?>"></i>						<label for="mod-login-password" class="element-invisible">							<?php echo JText::_('JGLOBAL_PASSWORD'); ?>						</label>					</span>					<input name="passwd" tabindex="2" id="mod-login-password" type="password" class="input-medium" placeholder="<?php echo JText::_('JGLOBAL_PASSWORD'); ?>" size="15"/>					<a href="<?php echo JUri::root(); ?>index.php?option=com_users&view=reset" class="btn width-auto hasTooltip" data-placement="<?php echo $altDirection; ?>" title="<?php echo JText::_('MOD_LOGIN_RESET'); ?>">						<i class="icon-help" title="<?php echo JText::_('MOD_LOGIN_RESET'); ?>"></i>					</a>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="input-prepend">					<span class="add-on">						<i class="icon-comment hasTooltip" data-placement="<?php echo $mainDirection; ?>" class="hasTooltip" title="<?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?>"></i>						<label for="lang" class="element-invisible">							<?php echo JText::_('MOD_LOGIN_LANGUAGE'); ?>						</label>					</span>					<?php echo $langs; ?>				</div>			</div>		</div>		<div class="control-group">			<div class="controls">				<div class="btn-group pull-left">					<button tabindex="3" class="btn btn-primary btn-large">						<i class="icon-lock icon-white"></i> <?php echo JText::_('MOD_LOGIN_LOGIN'); ?>					</button>				</div>			</div>		</div>		<input type="hidden" name="option" value="com_login"/>		<input type="hidden" name="task" value="login"/>		<input type="hidden" name="return" value="<?php echo $return; ?>"/>		<?php echo JHtml::_('form.token'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Components helper for com_config * * @package     Joomla.Administrator * @subpackage  com_config * @since       3.0 */class ConfigHelperComponent{	/**	 * Get an array of all enabled components.	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getAllComponents()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('element')			->from('#__extensions')			->where('type = ' . $db->quote('component'))			->where('enabled = 1');		$db->setQuery($query);		$result = $db->loadColumn();		return $result;	}	/**	 * Returns true if the component has configuration options.	 *	 * @param   string  $components	 *	 * @return  boolean	 *	 * @since   3.0	 */	public static function hasComponentConfig($component)	{		return is_file(JPATH_ADMINISTRATOR . '/components/' . $component . '/config.xml');	}	/**	 * Returns an array of all components with configuration options. By only	 * components for which the current user has 'core.manage' rights are returned.	 *	 * @param   boolean  $authCheck	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getComponentsWithConfig($authCheck = true)	{		$result = array();		$components = self::getAllComponents();		$user = JFactory::getUser();		// Remove com_config from the array as that may have weird side effects		$components = array_diff($components, array('com_config'));		foreach ($components as $component)		{			if (self::hasComponentConfig($component) && (!$authCheck || $user->authorise('core.manage', $component)))			{				$result[] = $component;			}		}		return $result;	}	/**	 * Load the sys language for the given component.	 *	 * @param   string  $components	 *	 * @return  void	 *	 * @since   3.0	 */	public static function loadLanguageForComponents($components)	{		$lang = JFactory::getLanguage();		foreach ($components as $component)		{			if (!empty($component))				{					// Load the core file then					// Load extension-local file.					$lang->load($component . '.sys', JPATH_BASE, null, false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, null, false, false)				||	$lang->load($component . '.sys', JPATH_BASE, $lang->getDefault(), false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, $lang->getDefault(), false, false);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('script', 'system/multiselect.js', false, true);$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_templates&view=styles'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_TEMPLATES_STYLES_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_template"><?php echo JText::_('COM_TEMPLATES_FILTER_TEMPLATE'); ?></label>			<select name="filter_template" class="inputbox" id="filter_template">				<option value="0"><?php echo JText::_('COM_TEMPLATES_FILTER_TEMPLATE'); ?></option>				<?php echo JHtml::_('select.options', TemplatesHelper::getTemplateOptions($this->state->get('filter.client_id')), 'value', 'text', $this->state->get('filter.template'));?>			</select>			<label class="selectlabel" for="filter_client_id"><?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?></label>			<select name="filter_client_id" class="inputbox" id="filter_client_id">				<option value="*"><?php echo JText::_('JGLOBAL_FILTER_CLIENT'); ?></option>				<?php echo JHtml::_('select.options', TemplatesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					&#160;				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_STYLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="width-10">					<?php echo JHtml::_('grid.sort', 'JCLIENT', 'a.client_id', $listDirn, $listOrder); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_TEMPLATE', 'a.template', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JHtml::_('grid.sort', 'COM_TEMPLATES_HEADING_DEFAULT', 'a.home', $listDirn, $listOrder); ?>				</th>				<th class="width-5">					<?php echo JText::_('COM_TEMPLATES_HEADING_ASSIGNED'); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>			<?php foreach ($this->items as $i => $item) :				$canCreate = $user->authorise('core.create',     'com_templates');				$canEdit   = $user->authorise('core.edit',       'com_templates');				$canChange = $user->authorise('core.edit.state', 'com_templates');			?>			<tr class="row<?php echo $i % 2; ?>">				<td class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</td>				<td>					<?php if ($this->preview && $item->client_id == '0') : ?>						<a target="_blank"href="<?php echo JURI::root().'index.php?tp=1&templateStyle='.(int) $item->id ?>"  class="jgrid hasTip" title="<?php echo  htmlspecialchars(JText::_('COM_TEMPLATES_TEMPLATE_PREVIEW')); ?>::<?php echo htmlspecialchars($item->title);?>" ><span class="state icon-16-preview"><span class="text"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_PREVIEW'); ?></span></span></a>					<?php elseif ($item->client_id == '1') : ?>						<span class="jgrid hasTip" title="<?php echo  htmlspecialchars(JText::_('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN')); ?>" ><span class="state icon-16-nopreview"><span class="text"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_NO_PREVIEW_ADMIN'); ?></span></span></span>					<?php else: ?>						<span class="jgrid hasTip" title="<?php echo  htmlspecialchars(JText::_('COM_TEMPLATES_TEMPLATE_NO_PREVIEW')); ?>" ><span class="state icon-16-nopreview"><span class="text"><?php echo JText::_('COM_TEMPLATES_TEMPLATE_NO_PREVIEW'); ?></span></span></span>					<?php endif; ?>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_templates&task=style.edit&id='.(int) $item->id); ?>">						<?php echo $this->escape($item->title);?></a>					<?php else : ?>						<?php echo $this->escape($item->title);?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>				</td>				<td>					<label for="cb<?php echo $i;?>">						<?php echo $this->escape($item->template);?>					</label>				</td>				<td class="center">					<?php if ($item->home == '0' || $item->home == '1'):?>						<?php echo JHtml::_('jgrid.isdefault', $item->home != '0', $i, 'styles.', $canChange && $item->home != '1');?>					<?php elseif ($canChange):?>						<a href="<?php echo JRoute::_('index.php?option=com_templates&task=styles.unsetDefault&cid[]='.$item->id.'&'.JSession::getFormToken().'=1');?>">							<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => JText::sprintf('COM_TEMPLATES_GRID_UNSET_LANGUAGE', $item->language_title)), true);?>						</a>					<?php else:?>						<?php echo JHtml::_('image', 'mod_languages/' . $item->image . '.gif', $item->language_title, array('title' => $item->language_title), true);?>					<?php endif;?>				</td>				<td class="center">					<?php if ($item->assigned > 0) : ?>						<?php echo JHtml::_('image', 'admin/tick.png', JText::plural('COM_TEMPLATES_ASSIGNED', $item->assigned), array('title' => JText::plural('COM_TEMPLATES_ASSIGNED', $item->assigned)), true); ?>					<?php else : ?>						&#160;					<?php endif; ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JFormRule for com_contact to make sure the subject contains no banned word. * * @package     Joomla.Site * @subpackage  com_contact */class JFormRuleContactEmailSubject extends JFormRule{	/**	 * Method to test for a valid color in hexadecimal.	 *	 * @param   SimpleXMLElement  &$element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value     The form field value to validate.	 * @param   string            $group     The field name group control value. This acts as as an array container for the field.	 *                                       For example if the field has name="foo" and the group value is set to "bar" then the	 *                                       full field name would end up being "bar[foo]".	 * @param   object            &$input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   object            &$form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 */	public function test(&$element, $value, $group = null, &$input = null, &$form = null)	{		$params = JComponentHelper::getParams('com_contact');		$banned = $params->get('banned_subject');		foreach (explode(';', $banned) as $item) {			if (JString::stristr($item, $value) !== false)					return false;		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Video class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/video/ * @since       13.1 */class JFacebookVideo extends JFacebookObject{	/**	 * Method to get a video. Requires authentication and user_videos or friends_videos permission for private videos.	 *	 * @param   string  $video  The video id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getVideo($video)	{		return $this->get($video);	}	/**	 * Method to get a video's comments. Requires authentication and user_videos or friends_videos permission for private videos.	 *	 * @param   string   $video   The video id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($video, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($video, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a video. Requires authentication and publish_stream permission, user_videos or friends_videos permission for private videos.	 *	 * @param   string  $video    The video id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($video, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($video, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission, user_videos or friends_videos permission for private videos.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get video's likes. Requires authentication and user_videos or friends_videos permission for private videos.	 *	 * @param   string   $video   The video id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($video, $limit=0, $offset=0, $until=null, $since=null)	{		return $this->getConnection($video, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a video. Requires authentication and publish_stream permission, user_videos or friends_videos permission for private videos.	 *	 * @param   string  $video  The video id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($video)	{		return $this->createConnection($video, 'likes');	}	/**	 * Method to unlike a video. Requires authentication and publish_stream permission, user_videos or friends_videos permission for private videos.	 *	 * @param   string  $video  The video id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($video)	{		return $this->deleteConnection($video, 'likes');	}	/**	 * Method to get the album-sized view of the video. Requires authentication and user_videos or friends_videos permission for private photos.	 *	 * @param   string  $video  The video id.	 *	 * @return  string  URL of the picture.	 *	 * @since   13.1	 */	public function getPicture($video)	{		return $this->getConnection($video, 'picture');	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2009 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Form Field class for the Joomla Framework. * * @package     Joomla.Libraries * @subpackage  Form * @since       2.5 */class JFormFieldCaptcha extends JFormField{	/**	 * The field type.	 *	 * @var		string	 */	protected $type = 'Captcha';	/**	 * Method to attach a JForm object to the field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function setup(SimpleXMLElement $element, $value, $group = null)	{		$result = parent::setup($element, $value, $group);		$plugin = $this->element['plugin'] ?			(string) $this->element['plugin'] :			JFactory::getApplication()->getParams()->get('captcha', JFactory::getConfig()->get('captcha'));		if ($plugin === 0 || $plugin === '0' || $plugin === '' || $plugin === null)		{			$this->hidden = true;		}		else		{			// Force field to be required. There's no reason to have a captcha if it is not required.			// Obs: Don't put required="required" in the xml file, you just need to have validate="captcha"			$this->required = true;			$class = $this->element['class'];			if (strpos($class, 'required') === false)			{				$this->element['class'] = $class . ' required';			}		}		return $result;	}	/**	 * Method to get the field input.	 *	 * @return  string  The field input.	 *	 * @since   2.5	 */	protected function getInput()	{		$class     = $this->element['class'] ? (string) $this->element['class'] : '';		$plugin    = $this->element['plugin'] ? (string) $this->element['plugin'] : JFactory::getApplication()->getParams()->get('captcha', JFactory::getConfig()->get('captcha'));		$namespace = $this->element['namespace'] ? (string) $this->element['namespace'] : $this->form->getName();		// Use 0 for none		if ($plugin === 0 || $plugin === '0' || $plugin === '' || $plugin === null)		{			return '';		}		else		{			if (($captcha = JCaptcha::getInstance($plugin, array('namespace' => $namespace))) == null)			{				return '';			}		}		return $captcha->display($this->name, $this->id, $class);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of weblinks. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblinks extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		WeblinksHelper::addSubmenu('weblinks');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/weblinks.php';		$state	= $this->get('State');		$canDo	= WeblinksHelper::getActions($state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_WEBLINKS_MANAGER_WEBLINKS'), 'weblinks.png');		if (count($user->getAuthorisedCategories('com_weblinks', 'core.create')) > 0)		{			JToolbarHelper::addNew('weblink.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('weblink.edit');		}		if ($canDo->get('core.edit.state')) {			JToolbarHelper::publish('weblinks.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('weblinks.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('weblinks.archive');			JToolbarHelper::checkin('weblinks.checkin');		}		if ($state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'weblinks.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('weblinks.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_weblinks');		}		JToolbarHelper::help('JHELP_COMPONENTS_WEBLINKS_LINKS');		JHtmlSidebar::setAction('index.php?option=com_weblinks&view=weblinks');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_state',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.state'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_weblinks'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'a.hits' => JText::_('JGLOBAL_HITS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('MenusHelper', JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php');/** * Helper for mod_languages * * @package     Joomla.Site * @subpackage  mod_languages */abstract class ModLanguagesHelper{	public static function getList(&$params)	{		$user	= JFactory::getUser();		$lang 	= JFactory::getLanguage();		$app	= JFactory::getApplication();		$menu 	= $app->getMenu();		// Get menu home items		$homes = array();		foreach ($menu->getMenu() as $item)		{			if ($item->home)			{				$homes[$item->language] = $item;			}		}		// Load associations		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$active = $menu->getActive();			if ($active)			{				$associations = MenusHelper::getAssociations($active->id);			}			// load component associations			$option = $app->input->get('option');			$eName = JString::ucfirst(JString::str_ireplace('com_', '', $option));			$cName = JString::ucfirst($eName.'HelperAssociation');			JLoader::register($cName, JPath::clean(JPATH_COMPONENT_SITE . '/helpers/association.php'));			if (class_exists($cName) && is_callable(array($cName, 'getAssociations')))			{				$cassociations = call_user_func(array($cName, 'getAssociations'));			}		}		$levels		= $user->getAuthorisedViewLevels();		$languages	= JLanguageHelper::getLanguages();		// Filter allowed languages		foreach ($languages as $i => &$language) {			// Do not display language without frontend UI			if (!JLanguage::exists($language->lang_code))			{				unset($languages[$i]);			}			// Do not display language without specific home menu			elseif (!isset($homes[$language->lang_code]))			{				unset($languages[$i]);			}			// Do not display language without authorized access level			elseif (isset($language->access) && $language->access && !in_array($language->access, $levels))			{				unset($languages[$i]);			}			else {				$language->active = $language->lang_code == $lang->getTag();				if (JLanguageMultilang::isEnabled())				{					if (isset($cassociations[$language->lang_code]))					{						$language->link = JRoute::_($cassociations[$language->lang_code].'&lang='.$language->sef);					}					elseif (isset($associations[$language->lang_code]) && $menu->getItem($associations[$language->lang_code]))					{						$itemid = $associations[$language->lang_code];						if ($app->getCfg('sef') == '1')						{							$language->link = JRoute::_('index.php?lang='.$language->sef.'&Itemid='.$itemid);						}						else {							$language->link = 'index.php?lang='.$language->sef.'&amp;Itemid='.$itemid;						}					}					else {						if ($app->getCfg('sef') == '1')						{							$itemid = isset($homes[$language->lang_code]) ? $homes[$language->lang_code]->id : $homes['*']->id;							$language->link = JRoute::_('index.php?lang='.$language->sef.'&Itemid='.$itemid);						}						else {							$language->link = 'index.php?lang='.$language->sef;						}					}				}				else {					$language->link = JRoute::_('&Itemid='.$homes['*']->id);				}			}		}		return $languages;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component HTML Helper * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */abstract class JHtmlIcon{	/**	 * Method to generate a link to the create item page for the given category	 *	 * @param   object     $category  The category information	 * @param   JRegistry  $params    The item parameters	 * @param   array      $attribs   Optional attributes for the link	 * @param   boolean    $legacy    True to use legacy images, false to use icomoon based graphic	 *	 * @return  string  The HTML markup for the create item link	 */	public static function create($category, $params, $attribs = array(), $legacy = false)	{		$uri = JURI::getInstance();		$url = 'index.php?option=com_content&task=article.add&return=' . base64_encode($uri) . '&a_id=0&catid=' . $category->id;		if ($params->get('show_icons'))		{			if ($legacy)			{				$text = JHtml::_('image', 'system/new.png', JText::_('JNEW'), null, true);			}			else			{				$text = '<span class="icon-plus"></span>&#160;' . JText::_('JNEW') . '&#160;';			}		}		else		{			$text = JText::_('JNEW') . '&#160;';		}		// Add the button classes to the attribs array		if (isset($attribs['class']))		{			$attribs['class'] = $attribs['class'] . ' btn btn-primary';		}		else		{			$attribs['class'] = 'btn btn-primary';		}		$button = JHtml::_('link', JRoute::_($url), $text, $attribs);		$output = '<span class="hasTip" title="' . JText::_('COM_CONTENT_CREATE_ARTICLE') . '">' . $button . '</span>';		return $output;	}	/**	 * Method to generate a link to the email item page for the given article	 *	 * @param   object     $article  The article information	 * @param   JRegistry  $params   The item parameters	 * @param   array      $attribs  Optional attributes for the link	 * @param   boolean    $legacy   True to use legacy images, false to use icomoon based graphic	 *	 * @return  string  The HTML markup for the email item link	 */	public static function email($article, $params, $attribs = array(), $legacy = false)	{		require_once JPATH_SITE . '/components/com_mailto/helpers/mailto.php';		$uri      = JURI::getInstance();		$base     = $uri->toString(array('scheme', 'host', 'port'));		$template = JFactory::getApplication()->getTemplate();		$link     = $base . JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid), false);		$url      = 'index.php?option=com_mailto&tmpl=component&template=' . $template . '&link=' . MailToHelper::addLink($link);		$status = 'width=400,height=350,menubar=yes,resizable=yes';		if ($params->get('show_icons'))		{			if ($legacy)			{				$text = JHtml::_('image', 'system/emailButton.png', JText::_('JGLOBAL_EMAIL'), null, true);			}			else			{				$text = '<span class="icon-envelope"></span> ' . JText::_('JGLOBAL_EMAIL');			}		}		else		{			$text = JText::_('JGLOBAL_EMAIL');		}		$attribs['title']   = JText::_('JGLOBAL_EMAIL');		$attribs['onclick'] = "window.open(this.href,'win2','" . $status . "'); return false;";		$output = JHtml::_('link', JRoute::_($url), $text, $attribs);		return $output;	}	/**	 * Display an edit icon for the article.	 *	 * This icon will not display in a popup window, nor if the article is trashed.	 * Edit access checks must be performed in the calling code.	 *	 * @param   object     $article  The article information	 * @param   JRegistry  $params   The item parameters	 * @param   array      $attribs  Optional attributes for the link	 * @param   boolean    $legacy   True to use legacy images, false to use icomoon based graphic	 *	 * @return  string	The HTML for the article edit icon.	 * @since   1.6	 */	public static function edit($article, $params, $attribs = array(), $legacy = false)	{		$user = JFactory::getUser();		$uri  = JURI::getInstance();		// Ignore if in a popup window.		if ($params && $params->get('popup'))		{			return;		}		// Ignore if the state is negative (trashed).		if ($article->state < 0)		{			return;		}		JHtml::_('behavior.tooltip');		// Show checked_out icon if the article is checked out by a different user		if (property_exists($article, 'checked_out') && property_exists($article, 'checked_out_time') && $article->checked_out > 0 && $article->checked_out != $user->get('id'))		{			$checkoutUser = JFactory::getUser($article->checked_out);			$button       = JHtml::_('image', 'system/checked_out.png', null, null, true);			$date         = JHtml::_('date', $article->checked_out_time);			$tooltip      = JText::_('JLIB_HTML_CHECKED_OUT') . ' :: ' . JText::sprintf('COM_CONTENT_CHECKED_OUT_BY', $checkoutUser->name) . ' <br /> ' . $date;			return '<span class="hasTip" title="' . htmlspecialchars($tooltip, ENT_COMPAT, 'UTF-8') . '">' . $button . '</span>';		}		$url = 'index.php?option=com_content&task=article.edit&a_id=' . $article->id . '&return=' . base64_encode($uri);		if ($article->state == 0)		{			$overlib = JText::_('JUNPUBLISHED');		}		else		{			$overlib = JText::_('JPUBLISHED');		}		$date   = JHtml::_('date', $article->created);		$author = $article->created_by_alias ? $article->created_by_alias : $article->author;		$overlib .= '&lt;br /&gt;';		$overlib .= $date;		$overlib .= '&lt;br /&gt;';		$overlib .= JText::sprintf('COM_CONTENT_WRITTEN_BY', htmlspecialchars($author, ENT_COMPAT, 'UTF-8'));		if ($legacy)		{			$icon = $article->state ? 'edit.png' : 'edit_unpublished.png';			$text = JHtml::_('image', 'system/' . $icon, JText::_('JGLOBAL_EDIT'), null, true);		}		else		{			$icon = $article->state ? 'edit' : 'eye-close';			$text = '<span class="hasTip icon-' . $icon . ' tip" title="' . JText::_('COM_CONTENT_EDIT_ITEM') . ' :: ' . $overlib . '"></span>&#160;' . JText::_('JGLOBAL_EDIT') . '&#160;';		}		$output = JHtml::_('link', JRoute::_($url), $text, $attribs);		return $output;	}	/**	 * Method to generate a popup link to print an article	 *	 * @param   object     $article  The article information	 * @param   JRegistry  $params   The item parameters	 * @param   array      $attribs  Optional attributes for the link	 * @param   boolean    $legacy   True to use legacy images, false to use icomoon based graphic	 *	 * @return  string  The HTML markup for the popup link	 */	public static function print_popup($article, $params, $attribs = array(), $legacy = false)	{		$url  = ContentHelperRoute::getArticleRoute($article->slug, $article->catid);		$url .= '&tmpl=component&print=1&layout=default&page=' . @ $request->limitstart;		$status = 'status=no,toolbar=no,scrollbars=yes,titlebar=no,menubar=no,resizable=yes,width=640,height=480,directories=no,location=no';		// checks template image directory for image, if non found default are loaded		if ($params->get('show_icons'))		{			if ($legacy)			{				$text = JHtml::_('image', 'system/printButton.png', JText::_('JGLOBAL_PRINT'), null, true);			}			else			{				$text = '<span class="icon-print"></span>&#160;' . JText::_('JGLOBAL_PRINT') . '&#160;';			}		}		else		{			$text = JText::_('JGLOBAL_PRINT');		}		$attribs['title']   = JText::_('JGLOBAL_PRINT');		$attribs['onclick'] = "window.open(this.href,'win2','" . $status . "'); return false;";		$attribs['rel']     = 'nofollow';		return JHtml::_('link', JRoute::_($url), $text, $attribs);	}	/**	 * Method to generate a link to print an article	 *	 * @param   object     $article  Not used, @deprecated for 4.0	 * @param   JRegistry  $params   The item parameters	 * @param   array      $attribs  Not used, @deprecated for 4.0	 * @param   boolean    $legacy   True to use legacy images, false to use icomoon based graphic	 *	 * @return  string  The HTML markup for the popup link	 */	public static function print_screen($article, $params, $attribs = array(), $legacy = false)	{		// Checks template image directory for image, if none found default are loaded		if ($params->get('show_icons'))		{			if ($legacy)			{				$text = JHtml::_('image', 'system/printButton.png', JText::_('JGLOBAL_PRINT'), null, true);			}			else			{				$text = '<span class="icon-print"></span>&#160;' . JText::_('JGLOBAL_PRINT') . '&#160;';			}		}		else		{			$text = JText::_('JGLOBAL_PRINT');		}		return '<a href="#" onclick="window.print();return false;">' . $text . '</a>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a template style. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesViewTemplate extends JViewLegacy{	protected $files;	protected $state;	protected $template;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->files	= $this->get('Files');		$this->state	= $this->get('State');		$this->template	= $this->get('Template');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		$user  = JFactory::getUser();		$canDo = TemplatesHelper::getActions();		JToolbarHelper::title(JText::_('COM_TEMPLATES_MANAGER_VIEW_TEMPLATE'), 'thememanager');		JToolbarHelper::cancel('template.cancel', 'JTOOLBAR_CLOSE');		// Add a copy button		if ($user->authorise('core.create', 'com_templates'))		{			$title = JText::_('JLIB_HTML_BATCH_COPY');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-copy\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'upload');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_TEMPLATE_MANAGER_TEMPLATES_EDIT');	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the WebLinks component * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksViewWeblink extends JViewLegacy{	protected $state;	protected $item;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$item		= $this->get('Item');		$category	= $this->get('Category');		if ($this->getLayout() == 'edit')		{			$this->_displayEdit($tpl);			return;		}		if ($item->url)		{			// redirects to url if matching id found			$app->redirect($item->url);		}		else		{			//TODO create proper error handling			$app->redirect(JRoute::_('index.php'), JText::_('COM_WEBLINKS_ERROR_WEBLINK_NOT_FOUND'), 'notice');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories view class for the Category package. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesViewCategories extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	protected $assoc;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->assoc		= $this->get('Assoc');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Preprocess the list of items to find ordering divisions.		foreach ($this->items as &$item)		{			$this->ordering[$item->parent_id][] = $item->id;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$categoryId	= $this->state->get('filter.category_id');		$component	= $this->state->get('filter.component');		$section	= $this->state->get('filter.section');		$canDo		= null;		$user		= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Avoid nonsense situation.		if ($component == 'com_categories')		{			return;		}		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load($component, JPATH_BASE, null, false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, null, false, false)		||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, $lang->getDefault(), false, false);		// Load the category helper.		require_once JPATH_COMPONENT.'/helpers/categories.php';		// Get the results for each action.		$canDo = CategoriesHelper::getActions($component, $categoryId);		// If a component categories title string is present, let's use it.		if ($lang->hasKey($component_title_key = strtoupper($component.($section?"_$section":'')).'_CATEGORIES_TITLE'))		{			$title = JText::_($component_title_key);		}		// Else if the component section string exits, let's use it		elseif ($lang->hasKey($component_section_key = strtoupper($component.($section?"_$section":''))))		{			$title = JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', $this->escape(JText::_($component_section_key)));		}		// Else use the base title		else		{			$title = JText::_('COM_CATEGORIES_CATEGORIES_BASE_TITLE');		}		// Load specific css component		JHtml::_('stylesheet', $component.'/administrator/categories.css', array(), true);		// Prepare the toolbar.		JToolbarHelper::title($title, 'categories '.substr($component, 4).($section?"-$section":'').'-categories');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories($component, 'core.create'))) > 0 )		{			JToolbarHelper::addNew('category.add');		}		if ($canDo->get('core.edit') || $canDo->get('core.edit.own'))		{			JToolbarHelper::editList('category.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('categories.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('categories.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('categories.archive');		}		if (JFactory::getUser()->authorise('core.admin'))		{			JToolbarHelper::checkin('categories.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete', $component))		{			JToolbarHelper::deleteList('', 'categories.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('categories.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::custom('categories.rebuild', 'refresh.png', 'refresh_f2.png', 'JTOOLBAR_REBUILD', false);			JToolbarHelper::preferences($component);		}		// Compute the ref_key if it does exist in the component		if (!$lang->hasKey($ref_key = strtoupper($component.($section?"_$section":'')).'_CATEGORIES_HELP_KEY'))		{			$ref_key = 'JHELP_COMPONENTS_'.strtoupper(substr($component, 4).($section?"_$section":'')).'_CATEGORIES';		}		// Get help for the categories view for the component by		// -remotely searching in a language defined dedicated URL: *component*_HELP_URL		// -locally  searching in a component help file if helpURL param exists in the component and is set to ''		// -remotely searching in a component URL if helpURL param exists in the component and is NOT set to ''		if ($lang->hasKey($lang_help_url = strtoupper($component).'_HELP_URL'))		{			$debug = $lang->setDebug(false);			$url = JText::_($lang_help_url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($ref_key, JComponentHelper::getParams($component)->exists('helpURL'), $url);		JHtmlSidebar::setAction('index.php?option=com_categories&view=categories');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.lft' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PostgreSQL database driver * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseDriverPostgresql extends JDatabaseDriver{	/**	 * The database driver name	 *	 * @var string	 */	public $name = 'postgresql';	/**	 * Quote for named objects	 *	 * @var string	 */	protected $nameQuote = '"';	/**	 *  The null/zero date string	 *	 * @var string	 */	protected $nullDate = '1970-01-01 00:00:00';	/**	 * @var    string  The minimum supported database version.	 * @since  12.1	 */	protected static $dbMinimum = '8.3.18';	/**	 * Operator used for concatenation	 *	 * @var string	 */	protected $concat_operator = '||';	/**	 * JDatabaseDriverPostgresqlQuery object returned by getQuery	 *	 * @var JDatabaseDriverPostgresqlQuery	 */	protected $queryObject = null;	/**	 * Database object constructor	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since	12.1	 */	public function __construct( $options )	{		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['user'] = (isset($options['user'])) ? $options['user'] : '';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		// Finalize initialization		parent::__construct($options);	}	/**	 * Database object destructor	 *	 * @since 12.1	 */	public function __destruct()	{		if (is_resource($this->connection))		{			pg_close($this->connection);		}	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		// Make sure the postgresql extension for PHP is installed and enabled.		if (!function_exists('pg_connect'))		{			throw new RuntimeException('PHP extension pg_connect is not available.');		}		// Build the DSN for the connection.		$dsn = "host={$this->options['host']} dbname={$this->options['database']} user={$this->options['user']} password={$this->options['password']}";		// Attempt to connect to the server.		if (!($this->connection = @pg_connect($dsn)))		{			throw new RuntimeException('Error connecting to PGSQL database.');		}		pg_set_error_verbosity($this->connection, PGSQL_ERRORS_DEFAULT);		pg_query('SET standard_conforming_strings=off');	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		// Close the connection.		if (is_resource($this->connection))		{			pg_close($this->connection);		}		$this->connection = null;	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		$this->connect();		$result = pg_escape_string($this->connection, $text);		if ($extra)		{			$result = addcslashes($result, '%_');		}		return $result;	}	/**	 * Test to see if the PostgreSQL connector is available	 *	 * @return boolean  True on success, false otherwise.	 */	public static function test()	{		return (function_exists('pg_connect'));	}	/**	 * Determines if the connection to the server is active.	 *	 * @return	boolean	 *	 * @since	12.1	 */	public function connected()	{		$this->connect();		if (is_resource($this->connection))		{			return pg_ping($this->connection);		}		return false;	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  boolean	true	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$this->setQuery('DROP TABLE ' . ($ifExists ? 'IF EXISTS ' : '') . $this->quoteName($tableName));		$this->execute();		return true;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 *	 * @return int The number of affected rows in the previous operation	 *	 * @since 12.1	 */	public function getAffectedRows()	{		$this->connect();		return pg_affected_rows($this->cursor);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getCollation()	{		$this->connect();		$this->setQuery('SHOW LC_COLLATE');		$array = $this->loadAssocList();		return $array[0]['lc_collate'];	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cur  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows( $cur = null )	{		$this->connect();		return pg_num_rows((int) $cur ? $cur : $this->cursor);	}	/**	 * Get the current or query, or new JDatabaseQuery object.	 *	 * @param   boolean  $new    False to return the last query set, True to return a new JDatabaseQuery object.	 * @param   boolean  $asObj  False to return last query as string, true to get JDatabaseQueryPostgresql object.	 *	 * @return  JDatabaseQuery  The current query object or a new object extending the JDatabaseQuery class.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getQuery($new = false, $asObj = false)	{		if ($new)		{			// Make sure we have a query class for this driver.			if (!class_exists('JDatabaseQueryPostgresql'))			{				throw new RuntimeException('JDatabaseQueryPostgresql Class not found.');			}			$this->queryObject = new JDatabaseQueryPostgresql($this);			return $this->queryObject;		}		else		{			if ($asObj)			{				return $this->queryObject;			}			else			{				return $this->sql;			}		}	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * This is unsuported by PostgreSQL.	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  char  An empty char because this function is not supported by PostgreSQL.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		return '';	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$result = array();		$tableSub = $this->replacePrefix($table);		$this->setQuery('				SELECT a.attname AS "column_name",					pg_catalog.format_type(a.atttypid, a.atttypmod) as "type",					CASE WHEN a.attnotnull IS TRUE						THEN \'NO\'						ELSE \'YES\'					END AS "null",					CASE WHEN pg_catalog.pg_get_expr(adef.adbin, adef.adrelid, true) IS NOT NULL						THEN pg_catalog.pg_get_expr(adef.adbin, adef.adrelid, true)					END as "Default",					CASE WHEN pg_catalog.col_description(a.attrelid, a.attnum) IS NULL					THEN \'\'					ELSE pg_catalog.col_description(a.attrelid, a.attnum)					END  AS "comments"				FROM pg_catalog.pg_attribute a				LEFT JOIN pg_catalog.pg_attrdef adef ON a.attrelid=adef.adrelid AND a.attnum=adef.adnum				LEFT JOIN pg_catalog.pg_type t ON a.atttypid=t.oid				WHERE a.attrelid =					(SELECT oid FROM pg_catalog.pg_class WHERE relname=' . $this->quote($tableSub) . '						AND relnamespace = (SELECT oid FROM pg_catalog.pg_namespace WHERE						nspname = \'public\')					)				AND a.attnum > 0 AND NOT a.attisdropped				ORDER BY a.attnum'		);		$fields = $this->loadObjectList();		if ($typeOnly)		{			foreach ($fields as $field)			{				$result[$field->column_name] = preg_replace("/[(0-9)]/", '', $field->type);			}		}		else		{			foreach ($fields as $field)			{				$result[$field->column_name] = $field;			}		}		/* Change Postgresql's NULL::* type with PHP's null one */		foreach ($fields as $field)		{			if (preg_match("/^NULL::*/", $field->Default))			{				$field->Default = null;			}		}		return $result;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		// To check if table exists and prevent SQL injection		$tableList = $this->getTableList();		if ( in_array($table, $tableList) )		{			// Get the details columns information.			$this->setQuery('					SELECT indexname AS "idxName", indisprimary AS "isPrimary", indisunique  AS "isUnique",						CASE WHEN indisprimary = true THEN							( SELECT \'ALTER TABLE \' || tablename || \' ADD \' || pg_catalog.pg_get_constraintdef(const.oid, true)								FROM pg_constraint AS const WHERE const.conname= pgClassFirst.relname )						ELSE pg_catalog.pg_get_indexdef(indexrelid, 0, true)						END AS "Query"					FROM pg_indexes					LEFT JOIN pg_class AS pgClassFirst ON indexname=pgClassFirst.relname					LEFT JOIN pg_index AS pgIndex ON pgClassFirst.oid=pgIndex.indexrelid					WHERE tablename=' . $this->quote($table) . ' ORDER BY indkey'			);			$keys = $this->loadObjectList();			return $keys;		}		return false;	}	/**	 * Method to get an array of all tables in the database.	 *	 * @return  array  An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		$query = $this->getQuery(true)			->select('table_name')				->from('information_schema.tables')				->where('table_type=' . $this->quote('BASE TABLE'))				->where(					'table_schema NOT IN (' . $this->quote('pg_catalog') . ', ' . $this->quote('information_schema') . ')'				)				->order('table_name ASC');		$this->setQuery($query);		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the details list of sequences for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of sequences specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableSequences($table)	{		$this->connect();		// To check if table exists and prevent SQL injection		$tableList = $this->getTableList();		if ( in_array($table, $tableList) )		{			$name = array('s.relname', 'n.nspname', 't.relname', 'a.attname', 'info.data_type',							'info.minimum_value', 'info.maximum_value', 'info.increment', 'info.cycle_option');			$as = array('sequence', 'schema', 'table', 'column', 'data_type',							'minimum_value', 'maximum_value', 'increment', 'cycle_option');			if (version_compare($this->getVersion(), '9.1.0') >= 0)			{				$name[] .= 'info.start_value';				$as[] .= 'start_value';			}			// Get the details columns information.			$query = $this->getQuery(true)				->select($this->quoteName($name, $as))					->from('pg_class AS s')					->join('LEFT', "pg_depend d ON d.objid=s.oid AND d.classid='pg_class'::regclass AND d.refclassid='pg_class'::regclass")					->join('LEFT', 'pg_class t ON t.oid=d.refobjid')					->join('LEFT', 'pg_namespace n ON n.oid=t.relnamespace')					->join('LEFT', 'pg_attribute a ON a.attrelid=t.oid AND a.attnum=d.refobjsubid')					->join('LEFT', 'information_schema.sequences AS info ON info.sequence_name=s.relname')					->where("s.relkind='S' AND d.deptype='a' AND t.relname=" . $this->quote($table));			$this->setQuery($query);			$seq = $this->loadObjectList();			return $seq;		}		return false;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$version = pg_version($this->connection);		return $version['server'];	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 * To be called after the INSERT statement, it's MANDATORY to have a sequence on	 * every primary key table.	 *	 * To get the auto incremented value it's possible to call this function after	 * INSERT INTO query, or use INSERT INTO with RETURNING clause.	 *	 * @example with insertid() call:	 *		$query = $this->getQuery(true);	 *		$query->insert('jos_dbtest')	 *				->columns('title,start_date,description')	 *				->values("'testTitle2nd','1971-01-01','testDescription2nd'");	 *		$this->setQuery($query);	 *		$this->execute();	 *		$id = $this->insertid();	 *	 * @example with RETURNING clause:	 *		$query = $this->getQuery(true);	 *		$query->insert('jos_dbtest')	 *				->columns('title,start_date,description')	 *				->values("'testTitle2nd','1971-01-01','testDescription2nd'")	 *				->returning('id');	 *		$this->setQuery($query);	 *		$id = $this->loadResult();	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		$insertQuery = $this->getQuery(false, true);		$table = $insertQuery->__get('insert')->getElements();		/* find sequence column name */		$colNameQuery = $this->getQuery(true);		$colNameQuery->select('column_default')						->from('information_schema.columns')						->where(								"table_name=" . $this->quote(									$this->replacePrefix(str_replace('"', '', $table[0]))								), 'AND'						)						->where("column_default LIKE '%nextval%'");		$this->setQuery($colNameQuery);		$colName = $this->loadRow();		$changedColName = str_replace('nextval', 'currval', $colName);		$insertidQuery = $this->getQuery(true);		$insertidQuery->select($changedColName);		$this->setQuery($insertidQuery);		$insertVal = $this->loadRow();		return $insertVal[0];	}	/**	 * Locks a table in the database.	 *	 * @param   string  $tableName  The name of the table to unlock.	 *	 * @return  JDatabaseDriverPostgresql  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public function lockTable($tableName)	{		$this->transactionStart();		$this->setQuery('LOCK TABLE ' . $this->quoteName($tableName) . ' IN ACCESS EXCLUSIVE MODE')->execute();		return $this;	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function execute()	{		$this->connect();		if (!is_resource($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			$query .= ' LIMIT ' . $this->limit . ' OFFSET ' . $this->offset;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query. Error suppression is used here to prevent warnings/notices that the connection has been lost.		$this->cursor = @pg_query($this->connection, $query);		// If an error occurred handle it.		if (!$this->cursor)		{			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					// Get the error number and message.					$this->errorNum = (int) pg_result_error_field($this->cursor, PGSQL_DIAG_SQLSTATE) . ' ';					$this->errorMsg = JText::_('JLIB_DATABASE_QUERY_FAILED') . "\n" . pg_last_error($this->connection) . "\nSQL=" . $query;					// Throw the normal query exception.					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				// Get the error number and message.				$this->errorNum = (int) pg_result_error_field($this->cursor, PGSQL_DIAG_SQLSTATE) . ' ';				$this->errorMsg = JText::_('JLIB_DATABASE_QUERY_FAILED') . "\n" . pg_last_error($this->connection) . "\nSQL=" . $query;				// Throw the normal query exception.				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg);			}		}		return $this->cursor;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by PostgreSQL.	 * @param   string  $prefix    Not used by PostgreSQL.	 *	 * @return  JDatabaseDriverPostgresql  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->connect();		// To check if table exists and prevent SQL injection		$tableList = $this->getTableList();		// Origin Table does not exist		if ( !in_array($oldTable, $tableList) )		{			// Origin Table not found			throw new RuntimeException('Table not found in Postgresql database.');		}		else		{			/* Rename indexes */			$this->setQuery(							'SELECT relname								FROM pg_class								WHERE oid IN (									SELECT indexrelid									FROM pg_index, pg_class									WHERE pg_class.relname=' . $this->quote($oldTable, true) . '									AND pg_class.oid=pg_index.indrelid );'			);			$oldIndexes = $this->loadColumn();			foreach ($oldIndexes as $oldIndex)			{				$changedIdxName = str_replace($oldTable, $newTable, $oldIndex);				$this->setQuery('ALTER INDEX ' . $this->escape($oldIndex) . ' RENAME TO ' . $this->escape($changedIdxName));				$this->execute();			}			/* Rename sequence */			$this->setQuery(							'SELECT relname								FROM pg_class								WHERE relkind = \'S\'								AND relnamespace IN (									SELECT oid									FROM pg_namespace									WHERE nspname NOT LIKE \'pg_%\'									AND nspname != \'information_schema\'								)								AND relname LIKE \'%' . $oldTable . '%\' ;'			);			$oldSequences = $this->loadColumn();			foreach ($oldSequences as $oldSequence)			{				$changedSequenceName = str_replace($oldTable, $newTable, $oldSequence);				$this->setQuery('ALTER SEQUENCE ' . $this->escape($oldSequence) . ' RENAME TO ' . $this->escape($changedSequenceName));				$this->execute();			}			/* Rename table */			$this->setQuery('ALTER TABLE ' . $this->escape($oldTable) . ' RENAME TO ' . $this->escape($newTable));			$this->execute();		}		return true;	}	/**	 * Selects the database, but redundant for PostgreSQL	 *	 * @param   string  $database  Database name to select.	 *	 * @return  boolean  Always true	 */	public function select($database)	{		return true;	}	/**	 * Custom settings for UTF support	 *	 * @return  int  Zero on success, -1 on failure	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return pg_set_client_encoding($this->connection, 'UTF8');	}	/**	 * This function return a field value as a prepared string to be used in a SQL statement.	 *	 * @param   array   $columns      Array of table's column returned by ::getTableColumns.	 * @param   string  $field_name   The table field's name.	 * @param   string  $field_value  The variable value to quote and return.	 *	 * @return  string  The quoted string.	 *	 * @since   11.3	 */	protected function sqlValue($columns, $field_name, $field_value)	{		switch ($columns[$field_name])		{			case 'boolean':				$val = 'NULL';				if ($field_value == 't')				{					$val = 'TRUE';				}				elseif ($field_value == 'f')				{					$val = 'FALSE';				}				break;			case 'bigint':			case 'bigserial':			case 'integer':			case 'money':			case 'numeric':			case 'real':			case 'smallint':			case 'serial':			case 'numeric,':				$val = strlen($field_value) == 0 ? 'NULL' : $field_value;				break;			case 'date':			case 'timestamp without time zone':				if (empty($field_value))				{					$field_value = $this->getNullDate();				}			default:				$val = $this->quote($field_value);				break;		}		return $val;	}	/**	 * Method to commit a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		$this->setQuery('COMMIT');		$this->execute();	}	/**	 * Method to roll back a transaction.	 *	 * @param   string  $toSavepoint  If present rollback transaction to this savepoint	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionRollback($toSavepoint = null)	{		$this->connect();		$query = 'ROLLBACK';		if (!is_null($toSavepoint))		{			$query .= ' TO SAVEPOINT ' . $this->escape($toSavepoint);		}		$this->setQuery($query);		$this->execute();	}	/**	 * Method to initialize a transaction.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		$this->setQuery('START TRANSACTION');		$this->execute();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		return pg_fetch_row($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		return pg_fetch_assoc($cursor ? $cursor : $this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   The class name to use for the returned row object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		return pg_fetch_object(is_null($cursor) ? $this->cursor : $cursor, null, $class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		pg_free_result($cursor ? $cursor : $this->cursor);	}	/**	 * Inserts a row into a table based on an object's properties.	 *	 * @param   string  $table    The name of the database table to insert into.	 * @param   object  &$object  A reference to an object whose public properties match the table fields.	 * @param   string  $key      The name of the primary key. If provided the object property is updated.	 *	 * @return  boolean    True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function insertObject($table, &$object, $key = null)	{		$columns = $this->getTableColumns($table);		$fields = array();		$values = array();		// Iterate over the object variables to build the query fields and values.		foreach (get_object_vars($object) as $k => $v)		{			// Only process non-null scalars.			if (is_array($v) or is_object($v) or $v === null)			{				continue;			}			// Ignore any internal fields.			if ($k[0] == '_')			{				continue;			}			// Prepare and sanitize the fields and values for the database query.			$fields[] = $this->quoteName($k);			$values[] = $this->sqlValue($columns, $k, $v);		}		// Create the base insert statement.		$query = $this->getQuery(true)			->insert($this->quoteName($table))				->columns($fields)				->values(implode(',', $values));		$retVal = false;		if ($key)		{			$query->returning($key);			// Set the query and execute the insert.			$this->setQuery($query);			$id = $this->loadResult();			if ($id)			{				$object->$key = $id;				$retVal = true;			}		}		else		{			// Set the query and execute the insert.			$this->setQuery($query);			if ($this->execute())			{				$retVal = true;			}		}		return $retVal;	}	/**	 * Test to see if the PostgreSQL connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (function_exists('pg_connect'));	}	/**	 * Returns an array containing database's table list.	 *	 * @return	array	The database's table list.	 */	public function showTables()	{		$this->connect();		$query = $this->getQuery(true)			->select('table_name')				->from('information_schema.tables')				->where('table_type=' . $this->quote('BASE TABLE'))				->where(					'table_schema NOT IN (' . $this->quote('pg_catalog') . ', ' . $this->quote('information_schema') . ' )'				);		$this->setQuery($query);		$tableList = $this->loadColumn();		return $tableList;	}	/**	 * Get the substring position inside a string	 *	 * @param   string  $substring  The string being sought	 * @param   string  $string     The string/column being searched	 *	 * @return int   The position of $substring in $string	 */	public function getStringPositionSQL( $substring, $string )	{		$this->connect();		$query = "SELECT POSITION( $substring IN $string )";		$this->setQuery($query);		$position = $this->loadRow();		return $position['position'];	}	/**	 * Generate a random value	 *	 * @return float The random generated number	 */	public function getRandom()	{		$this->connect();		$this->setQuery('SELECT RANDOM()');		$random = $this->loadAssoc();		return $random['random'];	}	/**	 * Return the query string to alter the database character set.	 *	 * @param   string  $dbName  The database name	 *	 * @return  string  The query that alter the database query string	 *	 * @since   12.2	 */	protected function getAlterDbCharacterSet($dbName)	{		$query = 'ALTER DATABASE ' . $this->quoteName($dbName) . ' SET CLIENT_ENCODING TO ' . $this->quote('UTF8');		return $query;	}	/**	 * Return the query string to create new Database using PostgreSQL's syntax	 *	 * @param   stdClass  $options  Object used to pass user and database name to database driver.	 * 									This object must have "db_name" and "db_user" set.	 * @param   boolean   $utf      True if the database supports the UTF-8 character set.	 *	 * @return  string  The query that creates database, owned by $options['user']	 *	 * @since   12.2	 */	protected function getCreateDatabaseQuery($options, $utf)	{		$query = 'CREATE DATABASE ' . $this->quoteName($options->db_name) . ' OWNER ' . $this->quoteName($options->db_user);		if ($utf)		{			$query .= ' ENCODING ' . $this->quote('UTF-8');		}		return $query;	}	/**	 * This function replaces a string identifier <var>$prefix</var> with the string held is the	 * <var>tablePrefix</var> class variable.	 *	 * @param   string  $query   The SQL statement to prepare.	 * @param   string  $prefix  The common table prefix.	 *	 * @return  string  The processed SQL statement.	 *	 * @since   12.1	 */	public function replacePrefix($query, $prefix = '#__')	{		$query = trim($query);		$replacedQuery = '';		if ( strpos($query, '\'') )		{			// Sequence name quoted with ' ' but need to be replaced			if ( strpos($query, 'currval') )			{				$query = explode('currval', $query);				for ( $nIndex = 1; $nIndex < count($query); $nIndex = $nIndex + 2 )				{					$query[$nIndex] = str_replace($prefix, $this->tablePrefix, $query[$nIndex]);				}				$query = implode('currval', $query);			}			// Sequence name quoted with ' ' but need to be replaced			if ( strpos($query, 'nextval') )			{				$query = explode('nextval', $query);				for ( $nIndex = 1; $nIndex < count($query); $nIndex = $nIndex + 2 )				{					$query[$nIndex] = str_replace($prefix, $this->tablePrefix, $query[$nIndex]);				}				$query = implode('nextval', $query);			}			// Sequence name quoted with ' ' but need to be replaced			if ( strpos($query, 'setval') )			{				$query = explode('setval', $query);				for ( $nIndex = 1; $nIndex < count($query); $nIndex = $nIndex + 2 )				{					$query[$nIndex] = str_replace($prefix, $this->tablePrefix, $query[$nIndex]);				}				$query = implode('setval', $query);			}			$explodedQuery = explode('\'', $query);			for ( $nIndex = 0; $nIndex < count($explodedQuery); $nIndex = $nIndex + 2 )			{				if ( strpos($explodedQuery[$nIndex], $prefix) )				{					$explodedQuery[$nIndex] = str_replace($prefix, $this->tablePrefix, $explodedQuery[$nIndex]);				}			}			$replacedQuery = implode('\'', $explodedQuery);		}		else		{			$replacedQuery = str_replace($prefix, $this->tablePrefix, $query);		}		return $replacedQuery;	}	/**	 * Method to release a savepoint.	 *	 * @param   string  $savepointName  Savepoint's name to release	 *	 * @return  void	 *	 * @since   12.1	 */	public function releaseTransactionSavepoint( $savepointName )	{		$this->connect();		$this->setQuery('RELEASE SAVEPOINT ' . $this->escape($savepointName));		$this->execute();	}	/**	 * Method to create a savepoint.	 *	 * @param   string  $savepointName  Savepoint's name to create	 *	 * @return  void	 *	 * @since   12.1	 */	public function transactionSavepoint( $savepointName )	{		$this->connect();		$this->setQuery('SAVEPOINT ' . $this->escape($savepointName));		$this->execute();	}	/**	 * Unlocks tables in the database, this command does not exist in PostgreSQL,	 * it is automatically done on commit or rollback.	 *	 * @return  JDatabaseDriverPostgresql  Returns this object to support chaining.	 *	 * @since   11.4	 * @throws  RuntimeException	 */	public function unlockTables()	{		$this->transactionCommit();		return $this;	}	/**	 * Updates a row in a table based on an object's properties.	 *	 * @param   string   $table    The name of the database table to update.	 * @param   object   &$object  A reference to an object whose public properties match the table fields.	 * @param   string   $key      The name of the primary key.	 * @param   boolean  $nulls    True to update null fields or false to ignore them.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function updateObject($table, &$object, $key, $nulls = false)	{		$columns = $this->getTableColumns($table);		$fields = array();		$where = '';		// Create the base update statement.		$query = $this->getQuery(true)			->update($table);		$stmt = '%s WHERE %s';		// Iterate over the object variables to build the query fields/value pairs.		foreach (get_object_vars($object) as $k => $v)		{			// Only process scalars that are not internal fields.			if (is_array($v) or is_object($v) or $k[0] == '_')			{				continue;			}			// Set the primary key to the WHERE clause instead of a field to update.			if ($k == $key)			{				$key_val = $this->sqlValue($columns, $k, $v);				$where = $this->quoteName($k) . '=' . $key_val;				continue;			}			// Prepare and sanitize the fields and values for the database query.			if ($v === null)			{				// If the value is null and we want to update nulls then set it.				if ($nulls)				{					$val = 'NULL';				}				// If the value is null and we do not want to update nulls then ignore this field.				else				{					continue;				}			}			// The field is not null so we prep it for update.			else			{				$val = $this->sqlValue($columns, $k, $v);			}			// Add the field to be updated.			$fields[] = $this->quoteName($k) . '=' . $val;		}		// We don't have any fields to update.		if (empty($fields))		{			return true;		}		// Set the query and execute the update.		$query->set(sprintf($stmt, implode(",", $fields), $where));		$this->setQuery($query);		return $this->execute();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('InstallerModelInstall', JPATH_ADMINISTRATOR . '/components/com_installer/models/install.php');/** * Template style controller class. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesControllerTemplate extends JControllerLegacy{	/**	 */	public function cancel()	{		$this->setRedirect('index.php?option=com_templates&view=templates');	}	public function copy()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$this->input->set('installtype', 'folder');		$newName    = $this->input->get('new_name');		$newNameRaw = $this->input->get('new_name', null, 'string');		$templateID = $this->input->getInt('id', 0);		$this->setRedirect('index.php?option=com_templates&view=template&id=' . $templateID);		$model = $this->getModel('Template', 'TemplatesModel');		$model->setState('new_name', $newName);		$model->setState('tmp_prefix', uniqid('template_copy_'));		$model->setState('to_path', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));		// Process only if we have a new name entered		if (strlen($newName) > 0)		{			if (!JFactory::getUser()->authorise('core.create', 'com_templates'))			{				// User is not authorised to delete				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_CREATE_NOT_PERMITTED'));				return false;			}			// Set FTP credentials, if given			JClientHelper::setCredentialsFromRequest('ftp');			// Check that new name is valid			if (($newNameRaw !== null) && ($newName !== $newNameRaw))			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_TEMPLATE_NAME'));				return false;			}			// Check that new name doesn't already exist			if (!$model->checkNewName())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_DUPLICATE_TEMPLATE_NAME'));				return false;			}			// Check that from name does exist and get the folder name			$fromName = $model->getFromName();			if (!$fromName)			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_INVALID_FROM_NAME'));				return false;			}			// Call model's copy method			if (!$model->copy())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_COPY'));				return false;			}			// Call installation model			$this->input->set('install_directory', JFactory::getConfig()->get('tmp_path') . '/' . $model->getState('tmp_prefix'));			$installModel = $this->getModel('Install', 'InstallerModel');			JFactory::getLanguage()->load('com_installer');			if (!$installModel->install())			{				JError::raiseWarning(403, JText::_('COM_TEMPLATES_ERROR_COULD_NOT_INSTALL'));				return false;			}			$this->setMessage(JText::sprintf('COM_TEMPLATES_COPY_SUCCESS', $newName));			$model->cleanup();			return true;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Media component * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.0 */class MediaViewMediaList extends JViewLegacy{	public function display($tpl = null)	{		// Do not allow cache		JResponse::allowCache(false);		$app	= JFactory::getApplication();		$style = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');		$lang	= JFactory::getLanguage();		JHtml::_('behavior.framework', true);		$document = JFactory::getDocument();		/*		$document->addStyleSheet('../media/media/css/medialist-'.$style.'.css');		if ($lang->isRTL()) :			$document->addStyleSheet('../media/media/css/medialist-'.$style.'_rtl.css');		endif;		*/		$document->addScriptDeclaration("		window.addEvent('domready', function()		{			window.parent.document.updateUploader();			$$('a.img-preview').each(function(el)			{				el.addEvent('click', function(e)				{					new Event(e).stop();					window.top.document.preview.fromElement(el);				});			});		});");		$images = $this->get('images');		$documents = $this->get('documents');		$folders = $this->get('folders');		$state = $this->get('state');		$this->baseURL = JURI::root();		$this->images = &$images;		$this->documents = &$documents;		$this->folders = &$folders;		$this->state = &$state;		parent::display($tpl);	}	function setFolder($index = 0)	{		if (isset($this->folders[$index]))		{			$this->_tmp_folder = &$this->folders[$index];		}		else		{			$this->_tmp_folder = new JObject;		}	}	function setImage($index = 0)	{		if (isset($this->images[$index]))		{			$this->_tmp_img = &$this->images[$index];		}		else		{			$this->_tmp_img = new JObject;		}	}	function setDoc($index = 0)	{		if (isset($this->documents[$index]))		{			$this->_tmp_doc = &$this->documents[$index];		}		else		{			$this->_tmp_doc = new JObject;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of plugin records. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsModelPlugins extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'extension_id', 'a.extension_id',				'name', 'a.name',				'folder', 'a.folder',				'element', 'a.element',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'state', 'a.state',				'enabled', 'a.enabled',				'access', 'a.access', 'access_level',				'ordering', 'a.ordering',				'client_id', 'a.client_id',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$accessId = $this->getUserStateFromRequest($this->context . '.filter.access', 'filter_access', null, 'int');		$this->setState('filter.access', $accessId);		$state = $this->getUserStateFromRequest($this->context . '.filter.enabled', 'filter_enabled', '', 'string');		$this->setState('filter.enabled', $state);		$folder = $this->getUserStateFromRequest($this->context . '.filter.folder', 'filter_folder', null, 'cmd');		$this->setState('filter.folder', $folder);		$language = $this->getUserStateFromRequest($this->context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_plugins');		$this->setState('params', $params);		// List state information.		parent::populateState('folder', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string    A prefix for the store id.	 *	 * @return  string    A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.folder');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Returns an object list	 *	 * @param   string The query	 * @param   int    Offset	 * @param   int    The number of records	 * @return  array	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$search = $this->getState('filter.search');		$ordering = $this->getState('list.ordering', 'ordering');		if ($ordering == 'name' || (!empty($search) && stripos($search, 'id:') !== 0))		{			$this->_db->setQuery($query);			$result = $this->_db->loadObjectList();			$this->translate($result);			if (!empty($search))			{				foreach ($result as $i => $item)				{					if (!preg_match("/$search/i", $item->name))					{						unset($result[$i]);					}				}			}			$lang = JFactory::getLanguage();			$direction = ($this->getState('list.direction') == 'desc') ? -1 : 1;			JArrayHelper::sortObjects($result, $ordering, $direction, true, $lang->getLocale());			$total = count($result);			$this->cache[$this->getStoreId('getTotal')] = $total;			if ($total < $limitstart)			{				$limitstart = 0;				$this->setState('list.start', 0);			}			return array_slice($result, $limitstart, $limit ? $limit : null);		}		else		{			if ($ordering == 'ordering')			{				$query->order('a.folder ASC');				$ordering = 'a.ordering';			}			$query->order($this->_db->quoteName($ordering) . ' ' . $this->getState('list.direction'));			if ($ordering == 'folder')			{				$query->order('a.ordering ASC');			}			$result = parent::_getList($query, $limitstart, $limit);			$this->translate($result);			return $result;		}	}	/**	 * Translate a list of objects	 *	 * @param   array The array of objects	 * @return  array The array of translated objects	 */	protected function translate(&$items)	{		$lang = JFactory::getLanguage();		foreach ($items as &$item)		{			$source = JPATH_PLUGINS . '/' . $item->folder . '/' . $item->element;			$extension = 'plg_' . $item->folder . '_' . $item->element;			$lang->load($extension . '.sys', JPATH_ADMINISTRATOR, null, false, false)				|| $lang->load($extension . '.sys', $source, null, false, false)				|| $lang->load($extension . '.sys', JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)				|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false);			$item->name = JText::_($item->name);		}	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.extension_id , a.name, a.element, a.folder, a.checked_out, a.checked_out_time,' .					' a.enabled, a.access, a.ordering'			)		)			->from($db->quoteName('#__extensions') . ' AS a')			->where($db->quoteName('type') . ' = ' . $db->quote('plugin'));		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the asset groups.		$query->select('ag.title AS access_level')			->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Filter by published state		$published = $this->getState('filter.enabled');		if (is_numeric($published))		{			$query->where('a.enabled = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.enabled IN (0, 1))');		}		// Filter by state		$query->where('a.state >= 0');		// Filter by folder.		if ($folder = $this->getState('filter.folder'))		{			$query->where('a.folder = ' . $db->quote($folder));		}		// Filter by search in id		$search = $this->getState('filter.search');		if (!empty($search) && stripos($search, 'id:') === 0)		{			$query->where('a.extension_id = ' . (int) substr($search, 3));		}		return $query;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;// Load the base adapter.require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Tag. * * @package     Joomla.Plugin * @subpackage  Finder.Tags * @since       3.1 */class PlgFinderTags extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  3.1	 */	protected $context = 'Tags';	/**	 * The extension name.	 *	 * @var    string	 * @since  3.1	 */	protected $extension = 'com_tags';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  3.1	 */	protected $layout = 'tag';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  3.1	 */	protected $type_title = 'Tag';	/**	 * The table name.	 *	 * @var    string	 * @since  3.1	 */	protected $table = '#__tags';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  3.1	 */	protected $state_field = 'published';	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_tags.tag')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle tags here.		if ($context == 'com_tags.tag')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle news feeds here		if ($context == 'com_tags.tag')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   3.1	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle tags here		if ($context == 'com_tags.tag')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = JComponentHelper::getParams('com_tags', true);		$item->params->merge($registry);		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = TagsHelperRoute::getTagRoute($item->slug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		// Get the menu title if it exists.		$title = $this->getItemMenuTitle($item->url);		// Adjust the title if necessary.		if (!empty($title) && $this->params->get('use_menu_title', true))		{			$item->title = $title;		}		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'Tag');		// Add the author taxonomy data.		if (!empty($item->author) || !empty($item->created_by_alias))		{			$item->addTaxonomy('Author', !empty($item->created_by_alias) ? $item->created_by_alias : $item->author);		}		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	protected function setup()	{		// Load dependent classes.		require_once JPATH_SITE . '/components/com_tags/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   3.1	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.title, a.alias, a.description AS summary')			->select('a.created_time AS start_date, a.created_user_id AS created_by')			->select('a.metakey, a.metadesc, a.metadata, a.language, a.access')			->select('a.modified_time AS modified, a.modified_user_id AS modified_by')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('a.published AS state, a.access, a.created_time AS start_date, a.params');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias)			->from('#__tags AS a');		// Join the #__users table		$query->select('u.name AS author')			->join('LEFT', '#__users AS u ON u.id = b.created_user_id')			->from('#__tags AS b');		// Exclude the ROOT item		$query->where($db->quoteName('a.id') . ' > 1');		return $query;	}	/**	 * Method to get a SQL query to load the published and access states for the given tag.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   3.1	 */	protected function getStateQuery()	{		$query = $this->db->getQuery(true);		$query->select($this->db->quoteName('a.id'))			->select($this->db->quoteName('a.' . $this->state_field, 'state') . ', ' . $this->db->quoteName('a.access'))			->select('NULL AS cat_state, NULL AS cat_access')			->from($this->db->quoteName($this->table, 'a'));		return $query;	}	/**	 * Method to get the query clause for getting items to update by time.	 *	 * @param   string  $time  The modified timestamp.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   3.1	 */	protected function getUpdateQueryByTime($time)	{		// Build an SQL query based on the modified time.		$query = $this->db->getQuery(true)			->where('a.date >= ' . $this->db->quote($time));		return $query;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Memcached cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://php.net/manual/en/book.memcached.php * @since       12.1 */class JCacheStorageMemcached extends JCacheStorage{	/**	 * @var    Memcached	 * @since  12.1	 */	protected static $_db = null;	/**	 * @var    boolean	 * @since  12.1	 */	protected $_persistent = false;	/**	 * @var	 * @since   12.1	 */	protected $_compress = 0;	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   12.1	 */	public function __construct($options = array())	{		parent::__construct($options);		if (self::$_db === null)		{			$this->getConnection();		}	}	/**	 * Return memcached connection object	 *	 * @return  object   memcached connection object	 *	 * @since   12.1	 * @throws  RuntimeException	 */	protected function getConnection()	{		if ((extension_loaded('memcached') && class_exists('Memcached')) != true)		{			return false;		}		$config = JFactory::getConfig();		$this->_persistent = $config->get('memcache_persist', true);		$this->_compress = $config->get('memcache_compress', false) == false ? 0 : Memcached::OPT_COMPRESSION;		/*		 * This will be an array of loveliness		 * @todo: multiple servers		 * $servers	= (isset($params['servers'])) ? $params['servers'] : array();		 */		$server = array();		$server['host'] = $config->get('memcache_server_host', 'localhost');		$server['port'] = $config->get('memcache_server_port', 11211);		// Create the memcache connection		if ($this->_persistent)		{			$session = JFactory::getSession();			self::$_db = new Memcached($session->getId());		}		else		{			self::$_db = new Memcached;		}		$memcachedtest = self::$_db->addServer($server['host'], $server['port']);		if ($memcachedtest == false)		{			throw new RuntimeException('Could not connect to memcached server', 404);		}		self::$_db->setOption(Memcached::OPT_COMPRESSION, $this->_compress);		// Memcached has no list keys, we do our own accounting, initialise key index		if (self::$_db->get($this->_hash . '-index') === false)		{			$empty = array();			self::$_db->set($this->_hash . '-index', $empty, 0);		}		return;	}	/**	 * Get cached data from memcached by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean false on failure or a cached data string	 *	 * @since   12.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		$back = self::$_db->get($cache_id);		return $back;	}	/**	 * Get all cached data	 *	 * @return  array    data	 *	 * @since   12.1	 */	public function getAll()	{		parent::getAll();		$keys = self::$_db->get($this->_hash . '-index');		$secret = $this->_hash;		$data = array();		if (!empty($keys) && is_array($keys))		{			foreach ($keys as $key)			{				if (empty($key))				{					continue;				}				$namearr = explode('-', $key->name);				if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')				{					$group = $namearr[2];					if (!isset($data[$group]))					{						$item = new JCacheStorageHelper($group);					}					else					{						$item = $data[$group];					}					$item->updateSize($key->size / 1024);					$data[$group] = $item;				}			}		}		return $data;	}	/**	 * Store the data to memcached by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   12.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		$tmparr = new stdClass;		$tmparr->name = $cache_id;		$tmparr->size = strlen($data);		$index[] = $tmparr;		self::$_db->replace($this->_hash . '-index', $index, 0);		$this->unlockindex();		// Prevent double writes, write only if it doesn't exist else replace		if (!self::$_db->replace($cache_id, $data, $this->_lifetime))		{			self::$_db->set($cache_id, $data, $this->_lifetime);		}		return true;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   12.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		foreach ($index as $key => $value)		{			if ($value->name == $cache_id)			{				unset($index[$key]);			}			break;		}		self::$_db->replace($this->_hash . '-index', $index, 0);		$this->unlockindex();		return self::$_db->delete($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   12.1	 */	public function clean($group, $mode = null)	{		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		$secret = $this->_hash;		foreach ($index as $key => $value)		{			if (strpos($value->name, $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				self::$_db->delete($value->name, 0);				unset($index[$key]);			}		}		self::$_db->replace($this->_hash . '-index', $index, 0);		$this->unlockindex();		return true;	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		if ((extension_loaded('memcached') && class_exists('Memcached')) != true)		{			return false;		}		$config = JFactory::getConfig();		$host = $config->get('memcache_server_host', 'localhost');		$port = $config->get('memcache_server_port', 11211);		$memcached = new Memcached;		$memcachedtest = @$memcached->addServer($host, $port);		if (!$memcachedtest)		{			return false;		}		else		{			return true;		}	}	/**	 * Lock cached item - override parent as this is more efficient	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public function lock($id, $group, $locktime)	{		$returning = new stdClass;		$returning->locklooped = false;		$looptime = $locktime * 10;		$cache_id = $this->_getCacheId($id, $group);		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		$tmparr = new stdClass;		$tmparr->name = $cache_id;		$tmparr->size = 1;		$index[] = $tmparr;		self::$_db->replace($this->_hash . '-index', $index, 0);		$this->unlockindex();		$data_lock = self::$_db->add($cache_id . '_lock', 1, $locktime);		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = self::$_db->add($cache_id . '_lock', 1, $locktime);				$lock_counter++;			}		}		$returning->locked = $data_lock;		return $returning;	}	/**	 * Unlock cached item - override parent for cacheid compatibility with lock	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public function unlock($id, $group = null)	{		$cache_id = $this->_getCacheId($id, $group) . '_lock';		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		foreach ($index as $key => $value)		{			if ($value->name == $cache_id)			{				unset($index[$key]);			}			break;		}		self::$_db->replace($this->_hash . '-index', $index, 0);		$this->unlockindex();		return self::$_db->delete($cache_id);	}	/**	 * Lock cache index	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	protected function lockindex()	{		$looptime = 300;		$data_lock = self::$_db->add($this->_hash . '-index_lock', 1, 30);		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.  that implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					return false;					break;				}				usleep(100);				$data_lock = self::$_db->add($this->_hash . '-index_lock', 1, 30);				$lock_counter++;			}		}		return true;	}	/**	 * Unlock cache index	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	protected function unlockindex()	{		return self::$_db->delete($this->_hash . '-index_lock');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canDo		= SearchHelper::getActions();?><form action="<?php echo JRoute::_('index.php?option=com_search&view=searches'); ?>" method="post" name="adminForm" id="adminForm">	<div id="filter-bar" class="btn-toolbar">		<div class="filter-search btn-group pull-left">			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_SEARCH_SEARCH_IN_PHRASE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_SEARCH_SEARCH_IN_PHRASE'); ?>" />		</div>		<div class="filter-search btn-group pull-left">			<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>			<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>		</div>		<div class="btn-group pull-right hidden-phone">			<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>			<?php echo $this->pagination->getLimitBox(); ?>		</div>		<div class="filter-select btn-group pull-left">			<span class="adminlist-searchstatus">			<?php if ($this->state->get('filter.results')) : ?>				<a class="btn" href="<?php echo JRoute::_('index.php?option=com_search&filter_results=0');?>">					<i class="icon-zoom-out"></i> <?php echo JText::_('COM_SEARCH_HIDE_SEARCH_RESULTS'); ?></a>			<?php else : ?>				<a class="btn" href="<?php echo JRoute::_('index.php?option=com_search&filter_results=1');?>">					<i class="icon-zoom-in"></i> <?php echo JText::_('COM_SEARCH_SHOW_SEARCH_RESULTS'); ?></a>			<?php endif; ?>			</span>		</div>	</div>	<div class="clearfix"> </div>	<?php if ($this->enabled) : ?>	<div class="alert alert-info">		<a class="close" data-dismiss="alert"></a>		<span class="enabled"><?php echo JText::_('COM_SEARCH_LOGGING_ENABLED'); ?></span>	</div>	<?php else : ?>	<div class="alert alert-error">		<a class="close" data-dismiss="alert"></a>		<span class="disabled"><?php echo JText::_('COM_SEARCH_LOGGING_DISABLED'); ?></span>	</div>	<?php endif; ?>	<table class="table table-striped">		<thead>			<tr>				<th width="20">					<?php echo JText::_('JGRID_HEADING_ROW_NUMBER'); ?>				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_SEARCH_HEADING_PHRASE', 'a.search_term', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center">					<?php echo JText::_('COM_SEARCH_HEADING_RESULTS'); ?>				</th>				<th width="30%">					&#160;				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="11">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">					<td class="right">						<?php echo $i + 1 + $this->pagination->limitstart; ?>					</td>					<td>						<?php echo $this->escape($item->search_term); ?>					</td>					<td class="center">						<?php echo (int) $item->hits; ?>					</td>					<td class="center">					<?php if ($this->state->get('filter.results')) : ?>						<?php echo (int) $item->returns; ?>					<?php else: ?>						<?php echo JText::_('COM_SEARCH_NO_RESULTS'); ?>					<?php endif; ?>					</td>					<td>						&#160;					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectContact');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_contact&view=contacts&layout=modal&tmpl=component');?>" method="post" name="adminForm" id="adminForm">	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit">				<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();">				<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_access">				<?php echo JText::_('JOPTION_SELECT_ACCESS'); ?>			</label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_published">				<?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?>			</label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<label class="selectlabel" for="filter_category_id">				<?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?>			</label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>				<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />				<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>				<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>				<select name="filter_language" class="inputbox" id="filter_language">					<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>					<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>				</select>			<?php endif; ?>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist modal">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th>					<?php echo JHtml::_('grid.sort', 'COM_CONTACT_FIELD_LINKED_USER_LABEL', 'ul.name', $listDirn, $listOrder); ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="title language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</th>				<td class="center">					<?php if (!empty($item->linked_user)) : ?>						<?php echo $item->linked_user;?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * UCM map table * * @package     Joomla.Libraries * @subpackage  Table * @since       3.1 */class JTableUcm extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   3.1	 */	public function __construct($db)	{		parent::__construct('#__ucm_base', 'ucm_id', $db);	}}
<?php/** * lessphp v0.3.8 * http://leafo.net/lessphp * * LESS css compiler, adapted from http://lesscss.org * * Copyright 2012, Leaf Corcoran <leafot@gmail.com> * Licensed under MIT or GPLv3, see LICENSE *//** * The less compiler and parser. * * Converting LESS to CSS is a three stage process. The incoming file is parsed * by `lessc_parser` into a syntax tree, then it is compiled into another tree * representing the CSS structure by `lessc`. The CSS tree is fed into a * formatter, like `lessc_formatter` which then outputs CSS as a string. * * During the first compile, all values are *reduced*, which means that their * types are brought to the lowest form before being dump as strings. This * handles math equations, variable dereferences, and the like. * * The `parse` function of `lessc` is the entry point. * * In summary: * * The `lessc` class creates an intstance of the parser, feeds it LESS code, * then transforms the resulting tree to a CSS tree. This class also holds the * evaluation context, such as all available mixins and variables at any given * time. * * The `lessc_parser` class is only concerned with parsing its input. * * The `lessc_formatter` takes a CSS tree, and dumps it to a formatted string, * handling things like indentation. */class lessc {	static public $VERSION = "v0.3.8";	static protected $TRUE = array("keyword", "true");	static protected $FALSE = array("keyword", "false");	protected $libFunctions = array();	protected $registeredVars = array();	protected $preserveComments = false;	public $vPrefix = '@'; // prefix of abstract properties	public $mPrefix = '$'; // prefix of abstract blocks	public $parentSelector = '&';	public $importDisabled = false;	public $importDir = '';	protected $numberPrecision = null;	// set to the parser that generated the current line when compiling	// so we know how to create error messages	protected $sourceParser = null;	protected $sourceLoc = null;	static public $defaultValue = array("keyword", "");	static protected $nextImportId = 0; // uniquely identify imports	// attempts to find the path of an import url, returns null for css files	protected function findImport($url)	{		foreach ((array)$this->importDir as $dir)		{			$full = $dir.(substr($dir, -1) != '/' ? '/' : '').$url;			if ($this->fileExists($file = $full.'.less') || $this->fileExists($file = $full))			{				return $file;			}		}		return null;	}	protected function fileExists($name)	{		return is_file($name);	}	static public function compressList($items, $delim)	{		if (!isset($items[1]) && isset($items[0])) return $items[0];		else return array('list', $delim, $items);	}	static public function preg_quote($what)	{		return preg_quote($what, '/');	}	protected function tryImport($importPath, $parentBlock, $out)	{		if ($importPath[0] == "function" && $importPath[1] == "url")		{			$importPath = $this->flattenList($importPath[2]);		}		$str = $this->coerceString($importPath);		if ($str === null) return false;		$url = $this->compileValue($this->lib_e($str));		// don't import if it ends in css		if (substr_compare($url, '.css', -4, 4) === 0) return false;		$realPath = $this->findImport($url);		if ($realPath === null) return false;		if ($this->importDisabled)		{			return array(false, "/* import disabled */");		}		$this->addParsedFile($realPath);		$parser = $this->makeParser($realPath);		$root = $parser->parse(file_get_contents($realPath));		// set the parents of all the block props		foreach ($root->props as $prop)		{			if ($prop[0] == "block")			{				$prop[1]->parent = $parentBlock;			}		}		// copy mixins into scope, set their parents		// bring blocks from import into current block		// TODO: need to mark the source parser	these came from this file		foreach ($root->children as $childName => $child)		{			if (isset($parentBlock->children[$childName]))			{				$parentBlock->children[$childName] = array_merge(					$parentBlock->children[$childName],					$child);			} else {				$parentBlock->children[$childName] = $child;			}		}		$pi = pathinfo($realPath);		$dir = $pi["dirname"];		list($top, $bottom) = $this->sortProps($root->props, true);		$this->compileImportedProps($top, $parentBlock, $out, $parser, $dir);		return array(true, $bottom, $parser, $dir);	}	protected function compileImportedProps($props, $block, $out, $sourceParser, $importDir)	{		$oldSourceParser = $this->sourceParser;		$oldImport = $this->importDir;		// TODO: this is because the importDir api is stupid		$this->importDir = (array)$this->importDir;		array_unshift($this->importDir, $importDir);		foreach ($props as $prop)		{			$this->compileProp($prop, $block, $out);		}		$this->importDir = $oldImport;		$this->sourceParser = $oldSourceParser;	}	/**	 * Recursively compiles a block.	 *	 * A block is analogous to a CSS block in most cases. A single LESS document	 * is encapsulated in a block when parsed, but it does not have parent tags	 * so all of it's children appear on the root level when compiled.	 *	 * Blocks are made up of props and children.	 *	 * Props are property instructions, array tuples which describe an action	 * to be taken, eg. write a property, set a variable, mixin a block.	 *	 * The children of a block are just all the blocks that are defined within.	 * This is used to look up mixins when performing a mixin.	 *	 * Compiling the block involves pushing a fresh environment on the stack,	 * and iterating through the props, compiling each one.	 *	 * See lessc::compileProp()	 *	 */	protected function compileBlock($block)	{		switch ($block->type)	{		case "root":			$this->compileRoot($block);			break;		case null:			$this->compileCSSBlock($block);			break;		case "media":			$this->compileMedia($block);			break;		case "directive":			$name = "@" . $block->name;			if (!empty($block->value))			{				$name .= " " . $this->compileValue($this->reduce($block->value));			}			$this->compileNestedBlock($block, array($name));			break;		default:			$this->throwError("unknown block type: $block->type\n");		}	}	protected function compileCSSBlock($block)	{		$env = $this->pushEnv();		$selectors = $this->compileSelectors($block->tags);		$env->selectors = $this->multiplySelectors($selectors);		$out = $this->makeOutputBlock(null, $env->selectors);		$this->scope->children[] = $out;		$this->compileProps($block, $out);		$block->scope = $env; // mixins carry scope with them!		$this->popEnv();	}	protected function compileMedia($media)	{		$env = $this->pushEnv($media);		$parentScope = $this->mediaParent($this->scope);		$query = $this->compileMediaQuery($this->multiplyMedia($env));		$this->scope = $this->makeOutputBlock($media->type, array($query));		$parentScope->children[] = $this->scope;		$this->compileProps($media, $this->scope);		if (count($this->scope->lines) > 0)		{			$orphanSelelectors = $this->findClosestSelectors();			if (!is_null($orphanSelelectors))			{				$orphan = $this->makeOutputBlock(null, $orphanSelelectors);				$orphan->lines = $this->scope->lines;				array_unshift($this->scope->children, $orphan);				$this->scope->lines = array();			}		}		$this->scope = $this->scope->parent;		$this->popEnv();	}	protected function mediaParent($scope)	{		while (!empty($scope->parent))		{			if (!empty($scope->type) && $scope->type != "media")			{				break;			}			$scope = $scope->parent;		}		return $scope;	}	protected function compileNestedBlock($block, $selectors)	{		$this->pushEnv($block);		$this->scope = $this->makeOutputBlock($block->type, $selectors);		$this->scope->parent->children[] = $this->scope;		$this->compileProps($block, $this->scope);		$this->scope = $this->scope->parent;		$this->popEnv();	}	protected function compileRoot($root)	{		$this->pushEnv();		$this->scope = $this->makeOutputBlock($root->type);		$this->compileProps($root, $this->scope);		$this->popEnv();	}	protected function compileProps($block, $out)	{		foreach ($this->sortProps($block->props) as $prop)		{			$this->compileProp($prop, $block, $out);		}	}	protected function sortProps($props, $split = false)	{		$vars = array();		$imports = array();		$other = array();		foreach ($props as $prop)		{			switch ($prop[0])		{			case "assign":				if (isset($prop[1][0]) && $prop[1][0] == $this->vPrefix)				{					$vars[] = $prop;				} else {					$other[] = $prop;				}				break;			case "import":				$id = self::$nextImportId++;				$prop[] = $id;				$imports[] = $prop;				$other[] = array("import_mixin", $id);				break;			default:				$other[] = $prop;			}		}		if ($split)		{			return array(array_merge($vars, $imports), $other);		}		else		{			return array_merge($vars, $imports, $other);		}	}	protected function compileMediaQuery($queries)	{		$compiledQueries = array();		foreach ($queries as $query)		{			$parts = array();			foreach ($query as $q)			{				switch ($q[0])			{				case "mediaType":					$parts[] = implode(" ", array_slice($q, 1));					break;				case "mediaExp":					if (isset($q[2]))					{						$parts[] = "($q[1]: " .							$this->compileValue($this->reduce($q[2])) . ")";					} else {						$parts[] = "($q[1])";					}					break;				}			}			if (count($parts) > 0)			{				$compiledQueries[] =  implode(" and ", $parts);			}		}		$out = "@media";		if (!empty($parts))		{			$out .= " " .				implode($this->formatter->selectorSeparator, $compiledQueries);		}		return $out;	}	protected function multiplyMedia($env, $childQueries = null)	{		if (is_null($env) ||			!empty($env->block->type) && $env->block->type != "media")		{			return $childQueries;		}		// plain old block, skip		if (empty($env->block->type))		{			return $this->multiplyMedia($env->parent, $childQueries);		}		$out = array();		$queries = $env->block->queries;		if (is_null($childQueries))		{			$out = $queries;		}		else		{			foreach ($queries as $parent)			{				foreach ($childQueries as $child)				{					$out[] = array_merge($parent, $child);				}			}		}		return $this->multiplyMedia($env->parent, $out);	}	protected function expandParentSelectors(&$tag, $replace)	{		$parts = explode("$&$", $tag);		$count = 0;		foreach ($parts as &$part)		{			$part = str_replace($this->parentSelector, $replace, $part, $c);			$count += $c;		}		$tag = implode($this->parentSelector, $parts);		return $count;	}	protected function findClosestSelectors()	{		$env = $this->env;		$selectors = null;		while ($env !== null)		{			if (isset($env->selectors))			{				$selectors = $env->selectors;				break;			}			$env = $env->parent;		}		return $selectors;	}	// multiply $selectors against the nearest selectors in env	protected function multiplySelectors($selectors)	{		// find parent selectors		$parentSelectors = $this->findClosestSelectors();		if (is_null($parentSelectors))		{			// kill parent reference in top level selector			foreach ($selectors as &$s)			{				$this->expandParentSelectors($s, "");			}			return $selectors;		}		$out = array();		foreach ($parentSelectors as $parent)		{			foreach ($selectors as $child)			{				$count = $this->expandParentSelectors($child, $parent);				// don't prepend the parent tag if & was used				if ($count > 0)				{					$out[] = trim($child);				} else {					$out[] = trim($parent . ' ' . $child);				}			}		}		return $out;	}	// reduces selector expressions	protected function compileSelectors($selectors)	{		$out = array();		foreach ($selectors as $s)		{			if (is_array($s))			{				list(, $value) = $s;				$out[] = $this->compileValue($this->reduce($value));			} else {				$out[] = $s;			}		}		return $out;	}	protected function eq($left, $right)	{		return $left == $right;	}	protected function patternMatch($block, $callingArgs)	{		// match the guards if it has them		// any one of the groups must have all its guards pass for a match		if (!empty($block->guards))		{			$groupPassed = false;			foreach ($block->guards as $guardGroup)			{				foreach ($guardGroup as $guard)				{					$this->pushEnv();					$this->zipSetArgs($block->args, $callingArgs);					$negate = false;					if ($guard[0] == "negate")					{						$guard = $guard[1];						$negate = true;					}					$passed = $this->reduce($guard) == self::$TRUE;					if ($negate) $passed = !$passed;					$this->popEnv();					if ($passed)					{						$groupPassed = true;					} else {						$groupPassed = false;						break;					}				}				if ($groupPassed) break;			}			if (!$groupPassed)			{				return false;			}		}		$numCalling = count($callingArgs);		if (empty($block->args))		{			return $block->isVararg || $numCalling == 0;		}		$i = -1; // no args		// try to match by arity or by argument literal		foreach ($block->args as $i => $arg)		{			switch ($arg[0])		{			case "lit":				if (empty($callingArgs[$i]) || !$this->eq($arg[1], $callingArgs[$i]))				{					return false;				}				break;			case "arg":				// no arg and no default value				if (!isset($callingArgs[$i]) && !isset($arg[2]))				{					return false;				}				break;			case "rest":				$i--; // rest can be empty				break 2;			}		}		if ($block->isVararg)		{			return true; // not having enough is handled above		}		else		{			$numMatched = $i + 1;			// greater than becuase default values always match			return $numMatched >= $numCalling;		}	}	protected function patternMatchAll($blocks, $callingArgs)	{		$matches = null;		foreach ($blocks as $block)		{			if ($this->patternMatch($block, $callingArgs))			{				$matches[] = $block;			}		}		return $matches;	}	// attempt to find blocks matched by path and args	protected function findBlocks($searchIn, $path, $args, $seen=array())	{		if ($searchIn == null) return null;		if (isset($seen[$searchIn->id])) return null;		$seen[$searchIn->id] = true;		$name = $path[0];		if (isset($searchIn->children[$name]))		{			$blocks = $searchIn->children[$name];			if (count($path) == 1)			{				$matches = $this->patternMatchAll($blocks, $args);				if (!empty($matches))				{					// This will return all blocks that match in the closest					// scope that has any matching block, like lessjs					return $matches;				}			} else {				$matches = array();				foreach ($blocks as $subBlock)				{					$subMatches = $this->findBlocks($subBlock,						array_slice($path, 1), $args, $seen);					if (!is_null($subMatches))					{						foreach ($subMatches as $sm)						{							$matches[] = $sm;						}					}				}				return count($matches) > 0 ? $matches : null;			}		}		if ($searchIn->parent === $searchIn) return null;		return $this->findBlocks($searchIn->parent, $path, $args, $seen);	}	// sets all argument names in $args to either the default value	// or the one passed in through $values	protected function zipSetArgs($args, $values)	{		$i = 0;		$assignedValues = array();		foreach ($args as $a)		{			if ($a[0] == "arg")			{				if ($i < count($values) && !is_null($values[$i]))				{					$value = $values[$i];				} elseif (isset($a[2]))				{					$value = $a[2];				} else $value = null;				$value = $this->reduce($value);				$this->set($a[1], $value);				$assignedValues[] = $value;			}			$i++;		}		// check for a rest		$last = end($args);		if ($last[0] == "rest")		{			$rest = array_slice($values, count($args) - 1);			$this->set($last[1], $this->reduce(array("list", " ", $rest)));		}		$this->env->arguments = $assignedValues;	}	// compile a prop and update $lines or $blocks appropriately	protected function compileProp($prop, $block, $out)	{		// set error position context		$this->sourceLoc = isset($prop[-1]) ? $prop[-1] : -1;		switch ($prop[0])	{		case 'assign':			list(, $name, $value) = $prop;			if ($name[0] == $this->vPrefix)			{				$this->set($name, $value);			} else {				$out->lines[] = $this->formatter->property($name,						$this->compileValue($this->reduce($value)));			}			break;		case 'block':			list(, $child) = $prop;			$this->compileBlock($child);			break;		case 'mixin':			list(, $path, $args, $suffix) = $prop;			$args = array_map(array($this, "reduce"), (array)$args);			$mixins = $this->findBlocks($block, $path, $args);			if ($mixins === null)			{				// fwrite(STDERR,"failed to find block: ".implode(" > ", $path)."\n");				break; // throw error here??			}			foreach ($mixins as $mixin)			{				$haveScope = false;				if (isset($mixin->parent->scope))				{					$haveScope = true;					$mixinParentEnv = $this->pushEnv();					$mixinParentEnv->storeParent = $mixin->parent->scope;				}				$haveArgs = false;				if (isset($mixin->args))				{					$haveArgs = true;					$this->pushEnv();					$this->zipSetArgs($mixin->args, $args);				}				$oldParent = $mixin->parent;				if ($mixin != $block) $mixin->parent = $block;				foreach ($this->sortProps($mixin->props) as $subProp)				{					if ($suffix !== null &&						$subProp[0] == "assign" &&						is_string($subProp[1]) &&						$subProp[1]{0} != $this->vPrefix)					{						$subProp[2] = array(							'list', ' ',							array($subProp[2], array('keyword', $suffix))						);					}					$this->compileProp($subProp, $mixin, $out);				}				$mixin->parent = $oldParent;				if ($haveArgs) $this->popEnv();				if ($haveScope) $this->popEnv();			}			break;		case 'raw':			$out->lines[] = $prop[1];			break;		case "directive":			list(, $name, $value) = $prop;			$out->lines[] = "@$name " . $this->compileValue($this->reduce($value)).';';			break;		case "comment":			$out->lines[] = $prop[1];			break;		case "import";			list(, $importPath, $importId) = $prop;			$importPath = $this->reduce($importPath);			if (!isset($this->env->imports))			{				$this->env->imports = array();			}			$result = $this->tryImport($importPath, $block, $out);			$this->env->imports[$importId] = $result === false ?				array(false, "@import " . $this->compileValue($importPath).";") :				$result;			break;		case "import_mixin":			list(,$importId) = $prop;			$import = $this->env->imports[$importId];			if ($import[0] === false)			{				$out->lines[] = $import[1];			} else {				list(, $bottom, $parser, $importDir) = $import;				$this->compileImportedProps($bottom, $block, $out, $parser, $importDir);			}			break;		default:			$this->throwError("unknown op: {$prop[0]}\n");		}	}	/**	 * Compiles a primitive value into a CSS property value.	 *	 * Values in lessphp are typed by being wrapped in arrays, their format is	 * typically:	 *	 *     array(type, contents [, additional_contents]*)	 *	 * The input is expected to be reduced. This function will not work on	 * things like expressions and variables.	 */	protected function compileValue($value)	{		switch ($value[0])	{		case 'list':			// [1] - delimiter			// [2] - array of values			return implode($value[1], array_map(array($this, 'compileValue'), $value[2]));		case 'raw_color':			if (!empty($this->formatter->compressColors))			{				return $this->compileValue($this->coerceColor($value));			}			return $value[1];		case 'keyword':			// [1] - the keyword			return $value[1];		case 'number':			list(, $num, $unit) = $value;			// [1] - the number			// [2] - the unit			if ($this->numberPrecision !== null)			{				$num = round($num, $this->numberPrecision);			}			return $num . $unit;		case 'string':			// [1] - contents of string (includes quotes)			list(, $delim, $content) = $value;			foreach ($content as &$part)			{				if (is_array($part))				{					$part = $this->compileValue($part);				}			}			return $delim . implode($content) . $delim;		case 'color':			// [1] - red component (either number or a %)			// [2] - green component			// [3] - blue component			// [4] - optional alpha component			list(, $r, $g, $b) = $value;			$r = round($r);			$g = round($g);			$b = round($b);			if (count($value) == 5 && $value[4] != 1) { // rgba				return 'rgba('.$r.','.$g.','.$b.','.$value[4].')';			}			$h = sprintf("#%02x%02x%02x", $r, $g, $b);			if (!empty($this->formatter->compressColors))			{				// Converting hex color to short notation (e.g. #003399 to #039)				if ($h[1] === $h[2] && $h[3] === $h[4] && $h[5] === $h[6])				{					$h = '#' . $h[1] . $h[3] . $h[5];				}			}			return $h;		case 'function':			list(, $name, $args) = $value;			return $name.'('.$this->compileValue($args).')';		default: // assumed to be unit			$this->throwError("unknown value type: $value[0]");		}	}	protected function lib_isnumber($value)	{		return $this->toBool($value[0] == "number");	}	protected function lib_isstring($value)	{		return $this->toBool($value[0] == "string");	}	protected function lib_iscolor($value)	{		return $this->toBool($this->coerceColor($value));	}	protected function lib_iskeyword($value)	{		return $this->toBool($value[0] == "keyword");	}	protected function lib_ispixel($value)	{		return $this->toBool($value[0] == "number" && $value[2] == "px");	}	protected function lib_ispercentage($value)	{		return $this->toBool($value[0] == "number" && $value[2] == "%");	}	protected function lib_isem($value)	{		return $this->toBool($value[0] == "number" && $value[2] == "em");	}	protected function lib_rgbahex($color)	{		$color = $this->coerceColor($color);		if (is_null($color))			$this->throwError("color expected for rgbahex");		return sprintf("#%02x%02x%02x%02x",			isset($color[4]) ? $color[4]*255 : 255,			$color[1],$color[2], $color[3]);	}	protected function lib_argb($color){		return $this->lib_rgbahex($color);	}	// utility func to unquote a string	protected function lib_e($arg)	{		switch ($arg[0])		{			case "list":				$items = $arg[2];				if (isset($items[0]))				{					return $this->lib_e($items[0]);				}				return self::$defaultValue;			case "string":				$arg[1] = "";				return $arg;			case "keyword":				return $arg;			default:				return array("keyword", $this->compileValue($arg));		}	}	protected function lib__sprintf($args)	{		if ($args[0] != "list") return $args;		$values = $args[2];		$string = array_shift($values);		$template = $this->compileValue($this->lib_e($string));		$i = 0;		if (preg_match_all('/%[dsa]/', $template, $m))		{			foreach ($m[0] as $match)			{				$val = isset($values[$i]) ?					$this->reduce($values[$i]) : array('keyword', '');				// lessjs compat, renders fully expanded color, not raw color				if ($color = $this->coerceColor($val))				{					$val = $color;				}				$i++;				$rep = $this->compileValue($this->lib_e($val));				$template = preg_replace('/'.self::preg_quote($match).'/',					$rep, $template, 1);			}		}		$d = $string[0] == "string" ? $string[1] : '"';		return array("string", $d, array($template));	}	protected function lib_floor($arg)	{		$value = $this->assertNumber($arg);		return array("number", floor($value), $arg[2]);	}	protected function lib_ceil($arg)	{		$value = $this->assertNumber($arg);		return array("number", ceil($value), $arg[2]);	}	protected function lib_round($arg)	{		$value = $this->assertNumber($arg);		return array("number", round($value), $arg[2]);	}	/**	 * Helper function to get arguments for color manipulation functions.	 * takes a list that contains a color like thing and a percentage	 */	protected function colorArgs($args)	{		if ($args[0] != 'list' || count($args[2]) < 2)		{			return array(array('color', 0, 0, 0), 0);		}		list($color, $delta) = $args[2];		$color = $this->assertColor($color);		$delta = floatval($delta[1]);		return array($color, $delta);	}	protected function lib_darken($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[3] = $this->clamp($hsl[3] - $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_lighten($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[3] = $this->clamp($hsl[3] + $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_saturate($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[2] = $this->clamp($hsl[2] + $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_desaturate($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[2] = $this->clamp($hsl[2] - $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_spin($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[1] = $hsl[1] + $delta % 360;		if ($hsl[1] < 0) $hsl[1] += 360;		return $this->toRGB($hsl);	}	protected function lib_fadeout($args)	{		list($color, $delta) = $this->colorArgs($args);		$color[4] = $this->clamp((isset($color[4]) ? $color[4] : 1) - $delta/100);		return $color;	}	protected function lib_fadein($args)	{		list($color, $delta) = $this->colorArgs($args);		$color[4] = $this->clamp((isset($color[4]) ? $color[4] : 1) + $delta/100);		return $color;	}	protected function lib_hue($color)	{		$hsl = $this->toHSL($this->assertColor($color));		return round($hsl[1]);	}	protected function lib_saturation($color)	{		$hsl = $this->toHSL($this->assertColor($color));		return round($hsl[2]);	}	protected function lib_lightness($color)	{		$hsl = $this->toHSL($this->assertColor($color));		return round($hsl[3]);	}	// get the alpha of a color	// defaults to 1 for non-colors or colors without an alpha	protected function lib_alpha($value)	{		if (!is_null($color = $this->coerceColor($value)))		{			return isset($color[4]) ? $color[4] : 1;		}	}	// set the alpha of the color	protected function lib_fade($args)	{		list($color, $alpha) = $this->colorArgs($args);		$color[4] = $this->clamp($alpha / 100.0);		return $color;	}	protected function lib_percentage($arg)	{		$num = $this->assertNumber($arg);		return array("number", $num*100, "%");	}	// mixes two colors by weight	// mix(@color1, @color2, @weight);	// http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#mix-instance_method	protected function lib_mix($args)	{		if ($args[0] != "list" || count($args[2]) < 3)			$this->throwError("mix expects (color1, color2, weight)");		list($first, $second, $weight) = $args[2];		$first = $this->assertColor($first);		$second = $this->assertColor($second);		$first_a = $this->lib_alpha($first);		$second_a = $this->lib_alpha($second);		$weight = $weight[1] / 100.0;		$w = $weight * 2 - 1;		$a = $first_a - $second_a;		$w1 = (($w * $a == -1 ? $w : ($w + $a)/(1 + $w * $a)) + 1) / 2.0;		$w2 = 1.0 - $w1;		$new = array('color',			$w1 * $first[1] + $w2 * $second[1],			$w1 * $first[2] + $w2 * $second[2],			$w1 * $first[3] + $w2 * $second[3],		);		if ($first_a != 1.0 || $second_a != 1.0)		{			$new[] = $first_a * $weight + $second_a * ($weight - 1);		}		return $this->fixColor($new);	}	protected function assertColor($value, $error = "expected color value")	{		$color = $this->coerceColor($value);		if (is_null($color)) $this->throwError($error);		return $color;	}	protected function assertNumber($value, $error = "expecting number")	{		if ($value[0] == "number") return $value[1];		$this->throwError($error);	}	protected function toHSL($color)	{		if ($color[0] == 'hsl') return $color;		$r = $color[1] / 255;		$g = $color[2] / 255;		$b = $color[3] / 255;		$min = min($r, $g, $b);		$max = max($r, $g, $b);		$L = ($min + $max) / 2;		if ($min == $max)		{			$S = $H = 0;		}		else		{			if ($L < 0.5)				$S = ($max - $min)/($max + $min);			else				$S = ($max - $min)/(2.0 - $max - $min);			if ($r == $max) $H = ($g - $b)/($max - $min);			elseif ($g == $max) $H = 2.0 + ($b - $r)/($max - $min);			elseif ($b == $max) $H = 4.0 + ($r - $g)/($max - $min);		}		$out = array('hsl',			($H < 0 ? $H + 6 : $H)*60,			$S*100,			$L*100,		);		if (count($color) > 4) $out[] = $color[4]; // copy alpha		return $out;	}	protected function toRGB_helper($comp, $temp1, $temp2)	{		if ($comp < 0) $comp += 1.0;		elseif ($comp > 1) $comp -= 1.0;		if (6 * $comp < 1) return $temp1 + ($temp2 - $temp1) * 6 * $comp;		if (2 * $comp < 1) return $temp2;		if (3 * $comp < 2) return $temp1 + ($temp2 - $temp1)*((2/3) - $comp) * 6;		return $temp1;	}	/**	 * Converts a hsl array into a color value in rgb.	 * Expects H to be in range of 0 to 360, S and L in 0 to 100	 */	protected function toRGB($color)	{		if ($color == 'color') return $color;		$H = $color[1] / 360;		$S = $color[2] / 100;		$L = $color[3] / 100;		if ($S == 0)		{			$r = $g = $b = $L;		}		else		{			$temp2 = $L < 0.5 ?				$L*(1.0 + $S) :				$L + $S - $L * $S;			$temp1 = 2.0 * $L - $temp2;			$r = $this->toRGB_helper($H + 1/3, $temp1, $temp2);			$g = $this->toRGB_helper($H, $temp1, $temp2);			$b = $this->toRGB_helper($H - 1/3, $temp1, $temp2);		}		// $out = array('color', round($r*255), round($g*255), round($b*255));		$out = array('color', $r*255, $g*255, $b*255);		if (count($color) > 4) $out[] = $color[4]; // copy alpha		return $out;	}	protected function clamp($v, $max = 1, $min = 0)	{		return min($max, max($min, $v));	}	/**	 * Convert the rgb, rgba, hsl color literals of function type	 * as returned by the parser into values of color type.	 */	protected function funcToColor($func)	{		$fname = $func[1];		if ($func[2][0] != 'list') return false; // need a list of arguments		$rawComponents = $func[2][2];		if ($fname == 'hsl' || $fname == 'hsla')		{			$hsl = array('hsl');			$i = 0;			foreach ($rawComponents as $c)			{				$val = $this->reduce($c);				$val = isset($val[1]) ? floatval($val[1]) : 0;				if ($i == 0) $clamp = 360;				elseif ($i < 3) $clamp = 100;				else $clamp = 1;				$hsl[] = $this->clamp($val, $clamp);				$i++;			}			while (count($hsl) < 4) $hsl[] = 0;			return $this->toRGB($hsl);		} elseif ($fname == 'rgb' || $fname == 'rgba')		{			$components = array();			$i = 1;			foreach	($rawComponents as $c)			{				$c = $this->reduce($c);				if ($i < 4)				{					if ($c[0] == "number" && $c[2] == "%")					{						$components[] = 255 * ($c[1] / 100);					} else {						$components[] = floatval($c[1]);					}				} elseif ($i == 4)				{					if ($c[0] == "number" && $c[2] == "%")					{						$components[] = 1.0 * ($c[1] / 100);					} else {						$components[] = floatval($c[1]);					}				} else break;				$i++;			}			while (count($components) < 3) $components[] = 0;			array_unshift($components, 'color');			return $this->fixColor($components);		}		return false;	}	protected function reduce($value, $forExpression = false)	{		switch ($value[0])	{		case "variable":			$key = $value[1];			if (is_array($key))			{				$key = $this->reduce($key);				$key = $this->vPrefix . $this->compileValue($this->lib_e($key));			}			$seen =& $this->env->seenNames;			if (!empty($seen[$key]))			{				$this->throwError("infinite loop detected: $key");			}			$seen[$key] = true;			$out = $this->reduce($this->get($key, self::$defaultValue));			$seen[$key] = false;			return $out;		case "list":			foreach ($value[2] as &$item)			{				$item = $this->reduce($item, $forExpression);			}			return $value;		case "expression":			return $this->evaluate($value);		case "string":			foreach ($value[2] as &$part)			{				if (is_array($part))				{					$strip = $part[0] == "variable";					$part = $this->reduce($part);					if ($strip) $part = $this->lib_e($part);				}			}			return $value;		case "escape":			list(,$inner) = $value;			return $this->lib_e($this->reduce($inner));		case "function":			$color = $this->funcToColor($value);			if ($color) return $color;			list(, $name, $args) = $value;			if ($name == "%") $name = "_sprintf";			$f = isset($this->libFunctions[$name]) ?				$this->libFunctions[$name] : array($this, 'lib_'.$name);			if (is_callable($f))			{				if ($args[0] == 'list')					$args = self::compressList($args[2], $args[1]);				$ret = call_user_func($f, $this->reduce($args, true), $this);				if (is_null($ret))				{					return array("string", "", array(						$name, "(", $args, ")"					));				}				// convert to a typed value if the result is a php primitive				if (is_numeric($ret)) $ret = array('number', $ret, "");				elseif (!is_array($ret)) $ret = array('keyword', $ret);				return $ret;			}			// plain function, reduce args			$value[2] = $this->reduce($value[2]);			return $value;		case "unary":			list(, $op, $exp) = $value;			$exp = $this->reduce($exp);			if ($exp[0] == "number")			{				switch ($op)			{				case "+":					return $exp;				case "-":					$exp[1] *= -1;					return $exp;				}			}			return array("string", "", array($op, $exp));		}		if ($forExpression)		{			switch ($value[0])		{			case "keyword":				if ($color = $this->coerceColor($value))				{					return $color;				}				break;			case "raw_color":				return $this->coerceColor($value);			}		}		return $value;	}	// coerce a value for use in color operation	protected function coerceColor($value)	{		switch($value[0])		{			case 'color': return $value;			case 'raw_color':				$c = array("color", 0, 0, 0);				$colorStr = substr($value[1], 1);				$num = hexdec($colorStr);				$width = strlen($colorStr) == 3 ? 16 : 256;				for ($i = 3; $i > 0; $i--) { // 3 2 1					$t = $num % $width;					$num /= $width;					$c[$i] = $t * (256/$width) + $t * floor(16/$width);				}				return $c;			case 'keyword':				$name = $value[1];				if (isset(self::$cssColors[$name]))				{					list($r, $g, $b) = explode(',', self::$cssColors[$name]);					return array('color', $r, $g, $b);				}				return null;		}	}	// make something string like into a string	protected function coerceString($value)	{		switch ($value[0])	{		case "string":			return $value;		case "keyword":			return array("string", "", array($value[1]));		}		return null;	}	// turn list of length 1 into value type	protected function flattenList($value)	{		if ($value[0] == "list" && count($value[2]) == 1)		{			return $this->flattenList($value[2][0]);		}		return $value;	}	protected function toBool($a)	{		if ($a) return self::$TRUE;		else return self::$FALSE;	}	// evaluate an expression	protected function evaluate($exp)	{		list(, $op, $left, $right, $whiteBefore, $whiteAfter) = $exp;		$left = $this->reduce($left, true);		$right = $this->reduce($right, true);		if ($leftColor = $this->coerceColor($left))		{			$left = $leftColor;		}		if ($rightColor = $this->coerceColor($right))		{			$right = $rightColor;		}		$ltype = $left[0];		$rtype = $right[0];		// operators that work on all types		if ($op == "and")		{			return $this->toBool($left == self::$TRUE && $right == self::$TRUE);		}		if ($op == "=")		{			return $this->toBool($this->eq($left, $right) );		}		if ($op == "+" && !is_null($str = $this->stringConcatenate($left, $right)))		{			return $str;		}		// type based operators		$fname = "op_${ltype}_${rtype}";		if (is_callable(array($this, $fname)))		{			$out = $this->$fname($op, $left, $right);			if (!is_null($out)) return $out;		}		// make the expression look it did before being parsed		$paddedOp = $op;		if ($whiteBefore) $paddedOp = " " . $paddedOp;		if ($whiteAfter) $paddedOp .= " ";		return array("string", "", array($left, $paddedOp, $right));	}	protected function stringConcatenate($left, $right)	{		if ($strLeft = $this->coerceString($left))		{			if ($right[0] == "string")			{				$right[1] = "";			}			$strLeft[2][] = $right;			return $strLeft;		}		if ($strRight = $this->coerceString($right))		{			array_unshift($strRight[2], $left);			return $strRight;		}	}	// make sure a color's components don't go out of bounds	protected function fixColor($c)	{		foreach (range(1, 3) as $i)		{			if ($c[$i] < 0) $c[$i] = 0;			if ($c[$i] > 255) $c[$i] = 255;		}		return $c;	}	protected function op_number_color($op, $lft, $rgt)	{		if ($op == '+' || $op == '*')		{			return $this->op_color_number($op, $rgt, $lft);		}	}	protected function op_color_number($op, $lft, $rgt)	{		if ($rgt[0] == '%') $rgt[1] /= 100;		return $this->op_color_color($op, $lft,			array_fill(1, count($lft) - 1, $rgt[1]));	}	protected function op_color_color($op, $left, $right)	{		$out = array('color');		$max = count($left) > count($right) ? count($left) : count($right);		foreach (range(1, $max - 1) as $i)		{			$lval = isset($left[$i]) ? $left[$i] : 0;			$rval = isset($right[$i]) ? $right[$i] : 0;			switch ($op)		{			case '+':				$out[] = $lval + $rval;				break;			case '-':				$out[] = $lval - $rval;				break;			case '*':				$out[] = $lval * $rval;				break;			case '%':				$out[] = $lval % $rval;				break;			case '/':				if ($rval == 0) $this->throwError("evaluate error: can't divide by zero");				$out[] = $lval / $rval;				break;			default:				$this->throwError('evaluate error: color op number failed on op '.$op);			}		}		return $this->fixColor($out);	}	// operator on two numbers	protected function op_number_number($op, $left, $right)	{		$unit = empty($left[2]) ? $right[2] : $left[2];		$value = 0;		switch ($op)	{		case '+':			$value = $left[1] + $right[1];			break;		case '*':			$value = $left[1] * $right[1];			break;		case '-':			$value = $left[1] - $right[1];			break;		case '%':			$value = $left[1] % $right[1];			break;		case '/':			if ($right[1] == 0) $this->throwError('parse error: divide by zero');			$value = $left[1] / $right[1];			break;		case '<':			return $this->toBool($left[1] < $right[1]);		case '>':			return $this->toBool($left[1] > $right[1]);		case '>=':			return $this->toBool($left[1] >= $right[1]);		case '=<':			return $this->toBool($left[1] <= $right[1]);		default:			$this->throwError('parse error: unknown number operator: '.$op);		}		return array("number", $value, $unit);	}	/* environment functions */	protected function makeOutputBlock($type, $selectors = null)	{		$b = new stdclass;		$b->lines = array();		$b->children = array();		$b->selectors = $selectors;		$b->type = $type;		$b->parent = $this->scope;		return $b;	}	// the state of execution	protected function pushEnv($block = null)	{		$e = new stdclass;		$e->parent = $this->env;		$e->store = array();		$e->block = $block;		$this->env = $e;		return $e;	}	// pop something off the stack	protected function popEnv()	{		$old = $this->env;		$this->env = $this->env->parent;		return $old;	}	// set something in the current env	protected function set($name, $value)	{		$this->env->store[$name] = $value;	}	// get the highest occurrence entry for a name	protected function get($name, $default=null)	{		$current = $this->env;		$isArguments = $name == $this->vPrefix . 'arguments';		while ($current)		{			if ($isArguments && isset($current->arguments))			{				return array('list', ' ', $current->arguments);			}			if (isset($current->store[$name]))				return $current->store[$name];			else {				$current = isset($current->storeParent) ?					$current->storeParent : $current->parent;			}		}		return $default;	}	// inject array of unparsed strings into environment as variables	protected function injectVariables($args)	{		$this->pushEnv();		$parser = new lessc_parser($this, __METHOD__);		foreach ($args as $name => $strValue)		{			if ($name{0} != '@') $name = '@'.$name;			$parser->count = 0;			$parser->buffer = (string)$strValue;			if (!$parser->propertyValue($value))			{				throw new Exception("failed to parse passed in variable $name: $strValue");			}			$this->set($name, $value);		}	}	/**	 * Initialize any static state, can initialize parser for a file	 * $opts isn't used yet	 */	public function __construct($fname = null)	{		if ($fname !== null)		{			// used for deprecated parse method			$this->_parseFile = $fname;		}	}	public function compile($string, $name = null)	{		$locale = setlocale(LC_NUMERIC, 0);		setlocale(LC_NUMERIC, "C");		$this->parser = $this->makeParser($name);		$root = $this->parser->parse($string);		$this->env = null;		$this->scope = null;		$this->formatter = $this->newFormatter();		if (!empty($this->registeredVars))		{			$this->injectVariables($this->registeredVars);		}		$this->sourceParser = $this->parser; // used for error messages		$this->compileBlock($root);		ob_start();		$this->formatter->block($this->scope);		$out = ob_get_clean();		setlocale(LC_NUMERIC, $locale);		return $out;	}	public function compileFile($fname, $outFname = null)	{		if (!is_readable($fname))		{			throw new Exception('load error: failed to find '.$fname);		}		$pi = pathinfo($fname);		$oldImport = $this->importDir;		$this->importDir = (array)$this->importDir;		$this->importDir[] = $pi['dirname'].'/';		$this->allParsedFiles = array();		$this->addParsedFile($fname);		$out = $this->compile(file_get_contents($fname), $fname);		$this->importDir = $oldImport;		if ($outFname !== null)		{			return file_put_contents($outFname, $out);		}		return $out;	}	// compile only if changed input has changed or output doesn't exist	public function checkedCompile($in, $out)	{		if (!is_file($out) || filemtime($in) > filemtime($out))		{			$this->compileFile($in, $out);			return true;		}		return false;	}	/**	 * Execute lessphp on a .less file or a lessphp cache structure	 *	 * The lessphp cache structure contains information about a specific	 * less file having been parsed. It can be used as a hint for future	 * calls to determine whether or not a rebuild is required.	 *	 * The cache structure contains two important keys that may be used	 * externally:	 *	 * compiled: The final compiled CSS	 * updated: The time (in seconds) the CSS was last compiled	 *	 * The cache structure is a plain-ol' PHP associative array and can	 * be serialized and unserialized without a hitch.	 *	 * @param mixed $in Input	 * @param bool $force Force rebuild?	 * @return array lessphp cache structure	 */	public function cachedCompile($in, $force = false)	{		// assume no root		$root = null;		if (is_string($in))		{			$root = $in;		} elseif (is_array($in) and isset($in['root']))		{			if ($force or ! isset($in['files']))			{				// If we are forcing a recompile or if for some reason the				// structure does not contain any file information we should				// specify the root to trigger a rebuild.				$root = $in['root'];			} elseif (isset($in['files']) and is_array($in['files']))			{				foreach ($in['files'] as $fname => $ftime )				{					if (!file_exists($fname) or filemtime($fname) > $ftime)					{						// One of the files we knew about previously has changed						// so we should look at our incoming root again.						$root = $in['root'];						break;					}				}			}		}		else		{			// TODO: Throw an exception? We got neither a string nor something			// that looks like a compatible lessphp cache structure.			return null;		}		if ($root !== null)		{			// If we have a root value which means we should rebuild.			$out = array();			$out['root'] = $root;			$out['compiled'] = $this->compileFile($root);			$out['files'] = $this->allParsedFiles();			$out['updated'] = time();			return $out;		}		else		{			// No changes, pass back the structure			// we were given initially.			return $in;		}	}	// parse and compile buffer	// This is deprecated	public function parse($str = null, $initialVariables = null)	{		if (is_array($str))		{			$initialVariables = $str;			$str = null;		}		$oldVars = $this->registeredVars;		if ($initialVariables !== null)		{			$this->setVariables($initialVariables);		}		if ($str == null)		{			if (empty($this->_parseFile))			{				throw new exception("nothing to parse");			}			$out = $this->compileFile($this->_parseFile);		}		else		{			$out = $this->compile($str);		}		$this->registeredVars = $oldVars;		return $out;	}	protected function makeParser($name)	{		$parser = new lessc_parser($this, $name);		$parser->writeComments = $this->preserveComments;		return $parser;	}	public function setFormatter($name)	{		$this->formatterName = $name;	}	protected function newFormatter()	{		$className = "lessc_formatter_lessjs";		if (!empty($this->formatterName))		{			if (!is_string($this->formatterName))				return $this->formatterName;			$className = "lessc_formatter_$this->formatterName";		}		return new $className;	}	public function setPreserveComments($preserve)	{		$this->preserveComments = $preserve;	}	public function registerFunction($name, $func)	{		$this->libFunctions[$name] = $func;	}	public function unregisterFunction($name)	{		unset($this->libFunctions[$name]);	}	public function setVariables($variables)	{		$this->registeredVars = array_merge($this->registeredVars, $variables);	}	public function unsetVariable($name)	{		unset($this->registeredVars[$name]);	}	public function setImportDir($dirs)	{		$this->importDir = (array)$dirs;	}	public function addImportDir($dir)	{		$this->importDir = (array)$this->importDir;		$this->importDir[] = $dir;	}	public function allParsedFiles()	{		return $this->allParsedFiles;	}	protected function addParsedFile($file)	{		$this->allParsedFiles[realpath($file)] = filemtime($file);	}	/**	 * Uses the current value of $this->count to show line and line number	 */	protected function throwError($msg = null)	{		if ($this->sourceLoc >= 0)		{			$this->sourceParser->throwError($msg, $this->sourceLoc);		}		throw new exception($msg);	}	// compile file $in to file $out if $in is newer than $out	// returns true when it compiles, false otherwise	public static function ccompile($in, $out, $less = null)	{		if ($less === null)		{			$less = new self;		}		return $less->checkedCompile($in, $out);	}	public static function cexecute($in, $force = false, $less = null)	{		if ($less === null)		{			$less = new self;		}		return $less->cachedCompile($in, $force);	}	static protected $cssColors = array(		'aliceblue' => '240,248,255',		'antiquewhite' => '250,235,215',		'aqua' => '0,255,255',		'aquamarine' => '127,255,212',		'azure' => '240,255,255',		'beige' => '245,245,220',		'bisque' => '255,228,196',		'black' => '0,0,0',		'blanchedalmond' => '255,235,205',		'blue' => '0,0,255',		'blueviolet' => '138,43,226',		'brown' => '165,42,42',		'burlywood' => '222,184,135',		'cadetblue' => '95,158,160',		'chartreuse' => '127,255,0',		'chocolate' => '210,105,30',		'coral' => '255,127,80',		'cornflowerblue' => '100,149,237',		'cornsilk' => '255,248,220',		'crimson' => '220,20,60',		'cyan' => '0,255,255',		'darkblue' => '0,0,139',		'darkcyan' => '0,139,139',		'darkgoldenrod' => '184,134,11',		'darkgray' => '169,169,169',		'darkgreen' => '0,100,0',		'darkgrey' => '169,169,169',		'darkkhaki' => '189,183,107',		'darkmagenta' => '139,0,139',		'darkolivegreen' => '85,107,47',		'darkorange' => '255,140,0',		'darkorchid' => '153,50,204',		'darkred' => '139,0,0',		'darksalmon' => '233,150,122',		'darkseagreen' => '143,188,143',		'darkslateblue' => '72,61,139',		'darkslategray' => '47,79,79',		'darkslategrey' => '47,79,79',		'darkturquoise' => '0,206,209',		'darkviolet' => '148,0,211',		'deeppink' => '255,20,147',		'deepskyblue' => '0,191,255',		'dimgray' => '105,105,105',		'dimgrey' => '105,105,105',		'dodgerblue' => '30,144,255',		'firebrick' => '178,34,34',		'floralwhite' => '255,250,240',		'forestgreen' => '34,139,34',		'fuchsia' => '255,0,255',		'gainsboro' => '220,220,220',		'ghostwhite' => '248,248,255',		'gold' => '255,215,0',		'goldenrod' => '218,165,32',		'gray' => '128,128,128',		'green' => '0,128,0',		'greenyellow' => '173,255,47',		'grey' => '128,128,128',		'honeydew' => '240,255,240',		'hotpink' => '255,105,180',		'indianred' => '205,92,92',		'indigo' => '75,0,130',		'ivory' => '255,255,240',		'khaki' => '240,230,140',		'lavender' => '230,230,250',		'lavenderblush' => '255,240,245',		'lawngreen' => '124,252,0',		'lemonchiffon' => '255,250,205',		'lightblue' => '173,216,230',		'lightcoral' => '240,128,128',		'lightcyan' => '224,255,255',		'lightgoldenrodyellow' => '250,250,210',		'lightgray' => '211,211,211',		'lightgreen' => '144,238,144',		'lightgrey' => '211,211,211',		'lightpink' => '255,182,193',		'lightsalmon' => '255,160,122',		'lightseagreen' => '32,178,170',		'lightskyblue' => '135,206,250',		'lightslategray' => '119,136,153',		'lightslategrey' => '119,136,153',		'lightsteelblue' => '176,196,222',		'lightyellow' => '255,255,224',		'lime' => '0,255,0',		'limegreen' => '50,205,50',		'linen' => '250,240,230',		'magenta' => '255,0,255',		'maroon' => '128,0,0',		'mediumaquamarine' => '102,205,170',		'mediumblue' => '0,0,205',		'mediumorchid' => '186,85,211',		'mediumpurple' => '147,112,219',		'mediumseagreen' => '60,179,113',		'mediumslateblue' => '123,104,238',		'mediumspringgreen' => '0,250,154',		'mediumturquoise' => '72,209,204',		'mediumvioletred' => '199,21,133',		'midnightblue' => '25,25,112',		'mintcream' => '245,255,250',		'mistyrose' => '255,228,225',		'moccasin' => '255,228,181',		'navajowhite' => '255,222,173',		'navy' => '0,0,128',		'oldlace' => '253,245,230',		'olive' => '128,128,0',		'olivedrab' => '107,142,35',		'orange' => '255,165,0',		'orangered' => '255,69,0',		'orchid' => '218,112,214',		'palegoldenrod' => '238,232,170',		'palegreen' => '152,251,152',		'paleturquoise' => '175,238,238',		'palevioletred' => '219,112,147',		'papayawhip' => '255,239,213',		'peachpuff' => '255,218,185',		'peru' => '205,133,63',		'pink' => '255,192,203',		'plum' => '221,160,221',		'powderblue' => '176,224,230',		'purple' => '128,0,128',		'red' => '255,0,0',		'rosybrown' => '188,143,143',		'royalblue' => '65,105,225',		'saddlebrown' => '139,69,19',		'salmon' => '250,128,114',		'sandybrown' => '244,164,96',		'seagreen' => '46,139,87',		'seashell' => '255,245,238',		'sienna' => '160,82,45',		'silver' => '192,192,192',		'skyblue' => '135,206,235',		'slateblue' => '106,90,205',		'slategray' => '112,128,144',		'slategrey' => '112,128,144',		'snow' => '255,250,250',		'springgreen' => '0,255,127',		'steelblue' => '70,130,180',		'tan' => '210,180,140',		'teal' => '0,128,128',		'thistle' => '216,191,216',		'tomato' => '255,99,71',		'turquoise' => '64,224,208',		'violet' => '238,130,238',		'wheat' => '245,222,179',		'white' => '255,255,255',		'whitesmoke' => '245,245,245',		'yellow' => '255,255,0',		'yellowgreen' => '154,205,50'	);}// responsible for taking a string of LESS code and converting it into a// syntax treeclass lessc_parser {	static protected $nextBlockId = 0; // used to uniquely identify blocks	static protected $precedence = array(		'=<' => 0,		'>=' => 0,		'=' => 0,		'<' => 0,		'>' => 0,		'+' => 1,		'-' => 1,		'*' => 2,		'/' => 2,		'%' => 2,	);	static protected $whitePattern;	static protected $commentMulti;	static protected $commentSingle = "//";	static protected $commentMultiLeft = "/*";	static protected $commentMultiRight = "*/";	// regex string to match any of the operators	static protected $operatorString;	// these properties will supress division unless it's inside parenthases	static protected $supressDivisionProps =		array('/border-radius$/i', '/^font$/i');	protected $blockDirectives = array("font-face", "keyframes", "page", "-moz-document");	protected $lineDirectives = array("charset");	/**	 * if we are in parens we can be more liberal with whitespace around	 * operators because it must evaluate to a single value and thus is less	 * ambiguous.	 *	 * Consider:	 *     property1: 10 -5; // is two numbers, 10 and -5	 *     property2: (10 -5); // should evaluate to 5	 */	protected $inParens = false;	// caches preg escaped literals	static protected $literalCache = array();	public function __construct($lessc, $sourceName = null)	{		$this->eatWhiteDefault = true;		// reference to less needed for vPrefix, mPrefix, and parentSelector		$this->lessc = $lessc;		$this->sourceName = $sourceName; // name used for error messages		$this->writeComments = false;		if (!self::$operatorString)		{			self::$operatorString =				'('.implode('|', array_map(array('lessc', 'preg_quote'),					array_keys(self::$precedence))).')';			$commentSingle = lessc::preg_quote(self::$commentSingle);			$commentMultiLeft = lessc::preg_quote(self::$commentMultiLeft);			$commentMultiRight = lessc::preg_quote(self::$commentMultiRight);			self::$commentMulti = $commentMultiLeft.'.*?'.$commentMultiRight;			self::$whitePattern = '/'.$commentSingle.'[^\n]*\s*|('.self::$commentMulti.')\s*|\s+/Ais';		}	}	public function parse($buffer)	{		$this->count = 0;		$this->line = 1;		$this->env = null; // block stack		$this->buffer = $this->writeComments ? $buffer : $this->removeComments($buffer);		$this->pushSpecialBlock("root");		$this->eatWhiteDefault = true;		$this->seenComments = array();		// trim whitespace on head		// if (preg_match('/^\s+/', $this->buffer, $m))		//{		// 	$this->line += substr_count($m[0], "\n");		// 	$this->buffer = ltrim($this->buffer);		// }		$this->whitespace();		// parse the entire file		$lastCount = $this->count;		while (false !== $this->parseChunk());		if ($this->count != strlen($this->buffer))			$this->throwError();		// TODO report where the block was opened		if (!is_null($this->env->parent))			throw new exception('parse error: unclosed block');		return $this->env;	}	/**	 * Parse a single chunk off the head of the buffer and append it to the	 * current parse environment.	 * Returns false when the buffer is empty, or when there is an error.	 *	 * This function is called repeatedly until the entire document is	 * parsed.	 *	 * This parser is most similar to a recursive descent parser. Single	 * functions represent discrete grammatical rules for the language, and	 * they are able to capture the text that represents those rules.	 *	 * Consider the function lessc::keyword(). (all parse functions are	 * structured the same)	 *	 * The function takes a single reference argument. When calling the	 * function it will attempt to match a keyword on the head of the buffer.	 * If it is successful, it will place the keyword in the referenced	 * argument, advance the position in the buffer, and return true. If it	 * fails then it won't advance the buffer and it will return false.	 *	 * All of these parse functions are powered by lessc::match(), which behaves	 * the same way, but takes a literal regular expression. Sometimes it is	 * more convenient to use match instead of creating a new function.	 *	 * Because of the format of the functions, to parse an entire string of	 * grammatical rules, you can chain them together using &&.	 *	 * But, if some of the rules in the chain succeed before one fails, then	 * the buffer position will be left at an invalid state. In order to	 * avoid this, lessc::seek() is used to remember and set buffer positions.	 *	 * Before parsing a chain, use $s = $this->seek() to remember the current	 * position into $s. Then if a chain fails, use $this->seek($s) to	 * go back where we started.	 */	protected function parseChunk()	{		if (empty($this->buffer)) return false;		$s = $this->seek();		// setting a property		if ($this->keyword($key) && $this->assign() &&			$this->propertyValue($value, $key) && $this->end())		{			$this->append(array('assign', $key, $value), $s);			return true;		}		else		{			$this->seek($s);		}		// look for special css blocks		if ($this->literal('@', false))		{			$this->count--;			// media			if ($this->literal('@media'))			{				if (($this->mediaQueryList($mediaQueries) || true)					&& $this->literal('{'))				{					$media = $this->pushSpecialBlock("media");					$media->queries = is_null($mediaQueries) ? array() : $mediaQueries;					return true;				} else {					$this->seek($s);					return false;				}			}			if ($this->literal("@", false) && $this->keyword($dirName))			{				if ($this->isDirective($dirName, $this->blockDirectives))				{					if (($this->openString("{", $dirValue, null, array(";")) || true) &&						$this->literal("{"))					{						$dir = $this->pushSpecialBlock("directive");						$dir->name = $dirName;						if (isset($dirValue)) $dir->value = $dirValue;						return true;					}				} elseif ($this->isDirective($dirName, $this->lineDirectives))				{					if ($this->propertyValue($dirValue) && $this->end())					{						$this->append(array("directive", $dirName, $dirValue));						return true;					}				}			}			$this->seek($s);		}		// setting a variable		if ($this->variable($var) && $this->assign() &&			$this->propertyValue($value) && $this->end())		{			$this->append(array('assign', $var, $value), $s);			return true;		}		else		{			$this->seek($s);		}		if ($this->import($importValue))		{			$this->append($importValue, $s);			return true;		}		// opening parametric mixin		if ($this->tag($tag, true) && $this->argumentDef($args, $isVararg) &&			($this->guards($guards) || true) &&			$this->literal('{'))		{			$block = $this->pushBlock($this->fixTags(array($tag)));			$block->args = $args;			$block->isVararg = $isVararg;			if (!empty($guards)) $block->guards = $guards;			return true;		}		else		{			$this->seek($s);		}		// opening a simple block		if ($this->tags($tags) && $this->literal('{'))		{			$tags = $this->fixTags($tags);			$this->pushBlock($tags);			return true;		}		else		{			$this->seek($s);		}		// closing a block		if ($this->literal('}', false))		{			try {				$block = $this->pop();			} catch (exception $e)			{				$this->seek($s);				$this->throwError($e->getMessage());			}			$hidden = false;			if (is_null($block->type))			{				$hidden = true;				if (!isset($block->args))				{					foreach ($block->tags as $tag)					{						if (!is_string($tag) || $tag{0} != $this->lessc->mPrefix)						{							$hidden = false;							break;						}					}				}				foreach ($block->tags as $tag)				{					if (is_string($tag))					{						$this->env->children[$tag][] = $block;					}				}			}			if (!$hidden)			{				$this->append(array('block', $block), $s);			}			// this is done here so comments aren't bundled into he block that			// was just closed			$this->whitespace();			return true;		}		// mixin		if ($this->mixinTags($tags) &&			($this->argumentValues($argv) || true) &&			($this->keyword($suffix) || true) && $this->end())		{			$tags = $this->fixTags($tags);			$this->append(array('mixin', $tags, $argv, $suffix), $s);			return true;		}		else		{			$this->seek($s);		}		// spare ;		if ($this->literal(';')) return true;		return false; // got nothing, throw error	}	protected function isDirective($dirname, $directives)	{		// TODO: cache pattern in parser		$pattern = implode("|",			array_map(array("lessc", "preg_quote"), $directives));		$pattern = '/^(-[a-z-]+-)?(' . $pattern . ')$/i';		return preg_match($pattern, $dirname);	}	protected function fixTags($tags)	{		// move @ tags out of variable namespace		foreach ($tags as &$tag)		{			if ($tag{0} == $this->lessc->vPrefix)				$tag[0] = $this->lessc->mPrefix;		}		return $tags;	}	// a list of expressions	protected function expressionList(&$exps)	{		$values = array();		while ($this->expression($exp))		{			$values[] = $exp;		}		if (count($values) == 0) return false;		$exps = lessc::compressList($values, ' ');		return true;	}	/**	 * Attempt to consume an expression.	 * @link http://en.wikipedia.org/wiki/Operator-precedence_parser#Pseudo-code	 */	protected function expression(&$out)	{		if ($this->value($lhs))		{			$out = $this->expHelper($lhs, 0);			// look for / shorthand			if (!empty($this->env->supressedDivision))			{				unset($this->env->supressedDivision);				$s = $this->seek();				if ($this->literal("/") && $this->value($rhs))				{					$out = array("list", "",						array($out, array("keyword", "/"), $rhs));				} else {					$this->seek($s);				}			}			return true;		}		return false;	}	/**	 * recursively parse infix equation with $lhs at precedence $minP	 */	protected function expHelper($lhs, $minP)	{		$this->inExp = true;		$ss = $this->seek();		while (true)		{			$whiteBefore = isset($this->buffer[$this->count - 1]) &&				ctype_space($this->buffer[$this->count - 1]);			// If there is whitespace before the operator, then we require			// whitespace after the operator for it to be an expression			$needWhite = $whiteBefore && !$this->inParens;			if ($this->match(self::$operatorString.($needWhite ? '\s' : ''), $m) && self::$precedence[$m[1]] >= $minP)			{				if (!$this->inParens && isset($this->env->currentProperty) && $m[1] == "/" && empty($this->env->supressedDivision))				{					foreach (self::$supressDivisionProps as $pattern)					{						if (preg_match($pattern, $this->env->currentProperty))						{							$this->env->supressedDivision = true;							break 2;						}					}				}				$whiteAfter = isset($this->buffer[$this->count - 1]) &&					ctype_space($this->buffer[$this->count - 1]);				if (!$this->value($rhs)) break;				// peek for next operator to see what to do with rhs				if ($this->peek(self::$operatorString, $next) && self::$precedence[$next[1]] > self::$precedence[$m[1]])				{					$rhs = $this->expHelper($rhs, self::$precedence[$next[1]]);				}				$lhs = array('expression', $m[1], $lhs, $rhs, $whiteBefore, $whiteAfter);				$ss = $this->seek();				continue;			}			break;		}		$this->seek($ss);		return $lhs;	}	// consume a list of values for a property	public function propertyValue(&$value, $keyName = null)	{		$values = array();		if ($keyName !== null) $this->env->currentProperty = $keyName;		$s = null;		while ($this->expressionList($v))		{			$values[] = $v;			$s = $this->seek();			if (!$this->literal(',')) break;		}		if ($s) $this->seek($s);		if ($keyName !== null) unset($this->env->currentProperty);		if (count($values) == 0) return false;		$value = lessc::compressList($values, ', ');		return true;	}	protected function parenValue(&$out)	{		$s = $this->seek();		// speed shortcut		if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] != "(")		{			return false;		}		$inParens = $this->inParens;		if ($this->literal("(") &&			($this->inParens = true) && $this->expression($exp) &&			$this->literal(")"))		{			$out = $exp;			$this->inParens = $inParens;			return true;		}		else		{			$this->inParens = $inParens;			$this->seek($s);		}		return false;	}	// a single value	protected function value(&$value)	{		$s = $this->seek();		// speed shortcut		if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] == "-")		{			// negation			if ($this->literal("-", false) &&				(($this->variable($inner) && $inner = array("variable", $inner)) ||				$this->unit($inner) ||				$this->parenValue($inner)))			{				$value = array("unary", "-", $inner);				return true;			} else {				$this->seek($s);			}		}		if ($this->parenValue($value)) return true;		if ($this->unit($value)) return true;		if ($this->color($value)) return true;		if ($this->func($value)) return true;		if ($this->string($value)) return true;		if ($this->keyword($word))		{			$value = array('keyword', $word);			return true;		}		// try a variable		if ($this->variable($var))		{			$value = array('variable', $var);			return true;		}		// unquote string (should this work on any type?		if ($this->literal("~") && $this->string($str))		{			$value = array("escape", $str);			return true;		}		else		{			$this->seek($s);		}		// css hack: \0		if ($this->literal('\\') && $this->match('([0-9]+)', $m))		{			$value = array('keyword', '\\'.$m[1]);			return true;		}		else		{			$this->seek($s);		}		return false;	}	// an import statement	protected function import(&$out)	{		$s = $this->seek();		if (!$this->literal('@import')) return false;		// @import "something.css" media;		// @import url("something.css") media;		// @import url(something.css) media;		if ($this->propertyValue($value))		{			$out = array("import", $value);			return true;		}	}	protected function mediaQueryList(&$out)	{		if ($this->genericList($list, "mediaQuery", ",", false))		{			$out = $list[2];			return true;		}		return false;	}	protected function mediaQuery(&$out)	{		$s = $this->seek();		$expressions = null;		$parts = array();		if (($this->literal("only") && ($only = true) || $this->literal("not") && ($not = true) || true) && $this->keyword($mediaType))		{			$prop = array("mediaType");			if (isset($only)) $prop[] = "only";			if (isset($not)) $prop[] = "not";			$prop[] = $mediaType;			$parts[] = $prop;		}		else		{			$this->seek($s);		}		if (!empty($mediaType) && !$this->literal("and"))		{			// ~		}		else		{			$this->genericList($expressions, "mediaExpression", "and", false);			if (is_array($expressions)) $parts = array_merge($parts, $expressions[2]);		}		if (count($parts) == 0)		{			$this->seek($s);			return false;		}		$out = $parts;		return true;	}	protected function mediaExpression(&$out)	{		$s = $this->seek();		$value = null;		if ($this->literal("(") &&			$this->keyword($feature) &&			($this->literal(":") && $this->expression($value) || true) &&			$this->literal(")"))		{			$out = array("mediaExp", $feature);			if ($value) $out[] = $value;			return true;		}		$this->seek($s);		return false;	}	// an unbounded string stopped by $end	protected function openString($end, &$out, $nestingOpen=null, $rejectStrs = null)	{		$oldWhite = $this->eatWhiteDefault;		$this->eatWhiteDefault = false;		$stop = array("'", '"', "@{", $end);		$stop = array_map(array("lessc", "preg_quote"), $stop);		// $stop[] = self::$commentMulti;		if (!is_null($rejectStrs))		{			$stop = array_merge($stop, $rejectStrs);		}		$patt = '(.*?)('.implode("|", $stop).')';		$nestingLevel = 0;		$content = array();		while ($this->match($patt, $m, false))		{			if (!empty($m[1]))			{				$content[] = $m[1];				if ($nestingOpen)				{					$nestingLevel += substr_count($m[1], $nestingOpen);				}			}			$tok = $m[2];			$this->count-= strlen($tok);			if ($tok == $end)			{				if ($nestingLevel == 0)				{					break;				} else {					$nestingLevel--;				}			}			if (($tok == "'" || $tok == '"') && $this->string($str))			{				$content[] = $str;				continue;			}			if ($tok == "@{" && $this->interpolation($inter))			{				$content[] = $inter;				continue;			}			if (in_array($tok, $rejectStrs))			{				$count = null;				break;			}			$content[] = $tok;			$this->count+= strlen($tok);		}		$this->eatWhiteDefault = $oldWhite;		if (count($content) == 0) return false;		// trim the end		if (is_string(end($content)))		{			$content[count($content) - 1] = rtrim(end($content));		}		$out = array("string", "", $content);		return true;	}	protected function string(&$out)	{		$s = $this->seek();		if ($this->literal('"', false))		{			$delim = '"';		} elseif ($this->literal("'", false))		{			$delim = "'";		}		else		{			return false;		}		$content = array();		// look for either ending delim , escape, or string interpolation		$patt = '([^\n]*?)(@\{|\\\\|' .			lessc::preg_quote($delim).')';		$oldWhite = $this->eatWhiteDefault;		$this->eatWhiteDefault = false;		while ($this->match($patt, $m, false))		{			$content[] = $m[1];			if ($m[2] == "@{")			{				$this->count -= strlen($m[2]);				if ($this->interpolation($inter, false))				{					$content[] = $inter;				} else {					$this->count += strlen($m[2]);					$content[] = "@{"; // ignore it				}			} elseif ($m[2] == '\\')			{				$content[] = $m[2];				if ($this->literal($delim, false))				{					$content[] = $delim;				}			} else {				$this->count -= strlen($delim);				break; // delim			}		}		$this->eatWhiteDefault = $oldWhite;		if ($this->literal($delim))		{			$out = array("string", $delim, $content);			return true;		}		$this->seek($s);		return false;	}	protected function interpolation(&$out)	{		$oldWhite = $this->eatWhiteDefault;		$this->eatWhiteDefault = true;		$s = $this->seek();		if ($this->literal("@{") &&			$this->keyword($var) &&			$this->literal("}", false))		{			$out = array("variable", $this->lessc->vPrefix . $var);			$this->eatWhiteDefault = $oldWhite;			if ($this->eatWhiteDefault) $this->whitespace();			return true;		}		$this->eatWhiteDefault = $oldWhite;		$this->seek($s);		return false;	}	protected function unit(&$unit)	{		// speed shortcut		if (isset($this->buffer[$this->count]))		{			$char = $this->buffer[$this->count];			if (!ctype_digit($char) && $char != ".") return false;		}		if ($this->match('([0-9]+(?:\.[0-9]*)?|\.[0-9]+)([%a-zA-Z]+)?', $m))		{			$unit = array("number", $m[1], empty($m[2]) ? "" : $m[2]);			return true;		}		return false;	}	// a # color	protected function color(&$out)	{		if ($this->match('(#(?:[0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{3}))', $m))		{			if (strlen($m[1]) > 7)			{				$out = array("string", "", array($m[1]));			} else {				$out = array("raw_color", $m[1]);			}			return true;		}		return false;	}	// consume a list of property values delimited by ; and wrapped in ()	protected function argumentValues(&$args, $delim = ',')	{		$s = $this->seek();		if (!$this->literal('(')) return false;		$values = array();		while (true)		{			if ($this->expressionList($value)) $values[] = $value;			if (!$this->literal($delim)) break;			else {				if ($value == null) $values[] = null;				$value = null;			}		}		if (!$this->literal(')'))		{			$this->seek($s);			return false;		}		$args = $values;		return true;	}	// consume an argument definition list surrounded by ()	// each argument is a variable name with optional value	// or at the end a ... or a variable named followed by ...	protected function argumentDef(&$args, &$isVararg, $delim = ',')	{		$s = $this->seek();		if (!$this->literal('(')) return false;		$values = array();		$isVararg = false;		while (true)		{			if ($this->literal("..."))			{				$isVararg = true;				break;			}			if ($this->variable($vname))			{				$arg = array("arg", $vname);				$ss = $this->seek();				if ($this->assign() && $this->expressionList($value))				{					$arg[] = $value;				} else {					$this->seek($ss);					if ($this->literal("..."))					{						$arg[0] = "rest";						$isVararg = true;					}				}				$values[] = $arg;				if ($isVararg) break;				continue;			}			if ($this->value($literal))			{				$values[] = array("lit", $literal);			}			if (!$this->literal($delim)) break;		}		if (!$this->literal(')'))		{			$this->seek($s);			return false;		}		$args = $values;		return true;	}	// consume a list of tags	// this accepts a hanging delimiter	protected function tags(&$tags, $simple = false, $delim = ',')	{		$tags = array();		while ($this->tag($tt, $simple))		{			$tags[] = $tt;			if (!$this->literal($delim)) break;		}		if (count($tags) == 0) return false;		return true;	}	// list of tags of specifying mixin path	// optionally separated by > (lazy, accepts extra >)	protected function mixinTags(&$tags)	{		$s = $this->seek();		$tags = array();		while ($this->tag($tt, true))		{			$tags[] = $tt;			$this->literal(">");		}		if (count($tags) == 0) return false;		return true;	}	// a bracketed value (contained within in a tag definition)	protected function tagBracket(&$value)	{		// speed shortcut		if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] != "[")		{			return false;		}		$s = $this->seek();		if ($this->literal('[') && $this->to(']', $c, true) && $this->literal(']', false))		{			$value = '['.$c.']';			// whitespace?			if ($this->whitespace()) $value .= " ";			// escape parent selector, (yuck)			$value = str_replace($this->lessc->parentSelector, "$&$", $value);			return true;		}		$this->seek($s);		return false;	}	protected function tagExpression(&$value)	{		$s = $this->seek();		if ($this->literal("(") && $this->expression($exp) && $this->literal(")"))		{			$value = array('exp', $exp);			return true;		}		$this->seek($s);		return false;	}	// a single tag	protected function tag(&$tag, $simple = false)	{		if ($simple)			$chars = '^,:;{}\][>\(\) "\'';		else			$chars = '^,;{}["\'';		if (!$simple && $this->tagExpression($tag))		{			return true;		}		$tag = '';		while ($this->tagBracket($first)) $tag .= $first;		while (true)		{			if ($this->match('(['.$chars.'0-9]['.$chars.']*)', $m))			{				$tag .= $m[1];				if ($simple) break;				while ($this->tagBracket($brack)) $tag .= $brack;				continue;			} elseif ($this->unit($unit)) { // for keyframes				$tag .= $unit[1] . $unit[2];				continue;			}			break;		}		$tag = trim($tag);		if ($tag == '') return false;		return true;	}	// a css function	protected function func(&$func)	{		$s = $this->seek();		if ($this->match('(%|[\w\-_][\w\-_:\.]+|[\w_])', $m) && $this->literal('('))		{			$fname = $m[1];			$sPreArgs = $this->seek();			$args = array();			while (true)			{				$ss = $this->seek();				// this ugly nonsense is for ie filter properties				if ($this->keyword($name) && $this->literal('=') && $this->expressionList($value))				{					$args[] = array("string", "", array($name, "=", $value));				} else {					$this->seek($ss);					if ($this->expressionList($value))					{						$args[] = $value;					}				}				if (!$this->literal(',')) break;			}			$args = array('list', ',', $args);			if ($this->literal(')'))			{				$func = array('function', $fname, $args);				return true;			} elseif ($fname == 'url')			{				// couldn't parse and in url? treat as string				$this->seek($sPreArgs);				if ($this->openString(")", $string) && $this->literal(")"))				{					$func = array('function', $fname, $string);					return true;				}			}		}		$this->seek($s);		return false;	}	// consume a less variable	protected function variable(&$name)	{		$s = $this->seek();		if ($this->literal($this->lessc->vPrefix, false) &&			($this->variable($sub) || $this->keyword($name)))		{			if (!empty($sub))			{				$name = array('variable', $sub);			} else {				$name = $this->lessc->vPrefix.$name;			}			return true;		}		$name = null;		$this->seek($s);		return false;	}	/**	 * Consume an assignment operator	 * Can optionally take a name that will be set to the current property name	 */	protected function assign($name = null)	{		if ($name) $this->currentProperty = $name;		return $this->literal(':') || $this->literal('=');	}	// consume a keyword	protected function keyword(&$word)	{		if ($this->match('([\w_\-\*!"][\w\-_"]*)', $m))		{			$word = $m[1];			return true;		}		return false;	}	// consume an end of statement delimiter	protected function end()	{		if ($this->literal(';'))		{			return true;		} elseif ($this->count == strlen($this->buffer) || $this->buffer{$this->count} == '}')		{			// if there is end of file or a closing block next then we don't need a ;			return true;		}		return false;	}	protected function guards(&$guards)	{		$s = $this->seek();		if (!$this->literal("when"))		{			$this->seek($s);			return false;		}		$guards = array();		while ($this->guardGroup($g))		{			$guards[] = $g;			if (!$this->literal(",")) break;		}		if (count($guards) == 0)		{			$guards = null;			$this->seek($s);			return false;		}		return true;	}	// a bunch of guards that are and'd together	// TODO rename to guardGroup	protected function guardGroup(&$guardGroup)	{		$s = $this->seek();		$guardGroup = array();		while ($this->guard($guard))		{			$guardGroup[] = $guard;			if (!$this->literal("and")) break;		}		if (count($guardGroup) == 0)		{			$guardGroup = null;			$this->seek($s);			return false;		}		return true;	}	protected function guard(&$guard)	{		$s = $this->seek();		$negate = $this->literal("not");		if ($this->literal("(") && $this->expression($exp) && $this->literal(")"))		{			$guard = $exp;			if ($negate) $guard = array("negate", $guard);			return true;		}		$this->seek($s);		return false;	}	/* raw parsing functions */	protected function literal($what, $eatWhitespace = null)	{		if ($eatWhitespace === null) $eatWhitespace = $this->eatWhiteDefault;		// shortcut on single letter		if (!isset($what[1]) && isset($this->buffer[$this->count]))		{			if ($this->buffer[$this->count] == $what)			{				if (!$eatWhitespace)				{					$this->count++;					return true;				}				// goes below...			} else {				return false;			}		}		if (!isset(self::$literalCache[$what]))		{			self::$literalCache[$what] = lessc::preg_quote($what);		}		return $this->match(self::$literalCache[$what], $m, $eatWhitespace);	}	protected function genericList(&$out, $parseItem, $delim="", $flatten=true)	{		$s = $this->seek();		$items = array();		while ($this->$parseItem($value))		{			$items[] = $value;			if ($delim)			{				if (!$this->literal($delim)) break;			}		}		if (count($items) == 0)		{			$this->seek($s);			return false;		}		if ($flatten && count($items) == 1)		{			$out = $items[0];		}		else		{			$out = array("list", $delim, $items);		}		return true;	}	// advance counter to next occurrence of $what	// $until - don't include $what in advance	// $allowNewline, if string, will be used as valid char set	protected function to($what, &$out, $until = false, $allowNewline = false)	{		if (is_string($allowNewline))		{			$validChars = $allowNewline;		}		else		{			$validChars = $allowNewline ? "." : "[^\n]";		}		if (!$this->match('('.$validChars.'*?)'.lessc::preg_quote($what), $m, !$until)) return false;		if ($until) $this->count -= strlen($what); // give back $what		$out = $m[1];		return true;	}	// try to match something on head of buffer	protected function match($regex, &$out, $eatWhitespace = null)	{		if ($eatWhitespace === null) $eatWhitespace = $this->eatWhiteDefault;		$r = '/'.$regex.($eatWhitespace && !$this->writeComments ? '\s*' : '').'/Ais';		if (preg_match($r, $this->buffer, $out, null, $this->count))		{			$this->count += strlen($out[0]);			if ($eatWhitespace && $this->writeComments) $this->whitespace();			return true;		}		return false;	}	// match some whitespace	protected function whitespace()	{		if ($this->writeComments)		{			$gotWhite = false;			while (preg_match(self::$whitePattern, $this->buffer, $m, null, $this->count))			{				if (isset($m[1]) && empty($this->commentsSeen[$this->count]))				{					$this->append(array("comment", $m[1]));					$this->commentsSeen[$this->count] = true;				}				$this->count += strlen($m[0]);				$gotWhite = true;			}			return $gotWhite;		}		else		{			$this->match("", $m);			return strlen($m[0]) > 0;		}	}	// match something without consuming it	protected function peek($regex, &$out = null, $from=null)	{		if (is_null($from)) $from = $this->count;		$r = '/'.$regex.'/Ais';		$result = preg_match($r, $this->buffer, $out, null, $from);		return $result;	}	// seek to a spot in the buffer or return where we are on no argument	protected function seek($where = null)	{		if ($where === null) return $this->count;		else $this->count = $where;		return true;	}	/* misc functions */	public function throwError($msg = "parse error", $count = null)	{		$count = is_null($count) ? $this->count : $count;		$line = $this->line +			substr_count(substr($this->buffer, 0, $count), "\n");		if (!empty($this->sourceName))		{			$loc = "$this->sourceName on line $line";		}		else		{			$loc = "line: $line";		}		// TODO this depends on $this->count		if ($this->peek("(.*?)(\n|$)", $m, $count))		{			throw new exception("$msg: failed at `$m[1]` $loc");		}		else		{			throw new exception("$msg: $loc");		}	}	protected function pushBlock($selectors=null, $type=null)	{		$b = new stdclass;		$b->parent = $this->env;		$b->type = $type;		$b->id = self::$nextBlockId++;		$b->isVararg = false; // TODO: kill me from here		$b->tags = $selectors;		$b->props = array();		$b->children = array();		$this->env = $b;		return $b;	}	// push a block that doesn't multiply tags	protected function pushSpecialBlock($type)	{		return $this->pushBlock(null, $type);	}	// append a property to the current block	protected function append($prop, $pos = null)	{		if ($pos !== null) $prop[-1] = $pos;		$this->env->props[] = $prop;	}	// pop something off the stack	protected function pop()	{		$old = $this->env;		$this->env = $this->env->parent;		return $old;	}	// remove comments from $text	// todo: make it work for all functions, not just url	protected function removeComments($text)	{		$look = array(			'url(', '//', '/*', '"', "'"		);		$out = '';		$min = null;		while (true)		{			// find the next item			foreach ($look as $token)			{				$pos = strpos($text, $token);				if ($pos !== false)				{					if (!isset($min) || $pos < $min[1]) $min = array($token, $pos);				}			}			if (is_null($min)) break;			$count = $min[1];			$skip = 0;			$newlines = 0;			switch ($min[0])		{			case 'url(':				if (preg_match('/url\(.*?\)/', $text, $m, 0, $count))					$count += strlen($m[0]) - strlen($min[0]);				break;			case '"':			case "'":				if (preg_match('/'.$min[0].'.*?'.$min[0].'/', $text, $m, 0, $count))					$count += strlen($m[0]) - 1;				break;			case '//':				$skip = strpos($text, "\n", $count);				if ($skip === false) $skip = strlen($text) - $count;				else $skip -= $count;				break;			case '/*':				if (preg_match('/\/\*.*?\*\//s', $text, $m, 0, $count))				{					$skip = strlen($m[0]);					$newlines = substr_count($m[0], "\n");				}				break;			}			if ($skip == 0) $count += strlen($min[0]);			$out .= substr($text, 0, $count).str_repeat("\n", $newlines);			$text = substr($text, $count + $skip);			$min = null;		}		return $out.$text;	}}class lessc_formatter_classic {	public $indentChar = "  ";	public $break = "\n";	public $open = " {";	public $close = "}";	public $selectorSeparator = ", ";	public $assignSeparator = ":";	public $openSingle = " { ";	public $closeSingle = " }";	public $disableSingle = false;	public $breakSelectors = false;	public $compressColors = false;	public function __construct()	{		$this->indentLevel = 0;	}	public function indentStr($n = 0)	{		return str_repeat($this->indentChar, max($this->indentLevel + $n, 0));	}	public function property($name, $value)	{		return $name . $this->assignSeparator . $value . ";";	}	protected function isEmpty($block)	{		if (empty($block->lines))		{			foreach ($block->children as $child)			{				if (!$this->isEmpty($child)) return false;			}			return true;		}		return false;	}	public function block($block)	{		if ($this->isEmpty($block)) return;		$inner = $pre = $this->indentStr();		$isSingle = !$this->disableSingle &&			is_null($block->type) && count($block->lines) == 1;		if (!empty($block->selectors))		{			$this->indentLevel++;			if ($this->breakSelectors)			{				$selectorSeparator = $this->selectorSeparator . $this->break . $pre;			} else {				$selectorSeparator = $this->selectorSeparator;			}			echo $pre .				implode($selectorSeparator, $block->selectors);			if ($isSingle)			{				echo $this->openSingle;				$inner = "";			} else {				echo $this->open . $this->break;				$inner = $this->indentStr();			}		}		if (!empty($block->lines))		{			$glue = $this->break.$inner;			echo $inner . implode($glue, $block->lines);			if (!$isSingle && !empty($block->children))			{				echo $this->break;			}		}		foreach ($block->children as $child)		{			$this->block($child);		}		if (!empty($block->selectors))		{			if (!$isSingle && empty($block->children)) echo $this->break;			if ($isSingle)			{				echo $this->closeSingle . $this->break;			} else {				echo $pre . $this->close . $this->break;			}			$this->indentLevel--;		}	}}class lessc_formatter_compressed extends lessc_formatter_classic {	public $disableSingle = true;	public $open = "{";	public $selectorSeparator = ",";	public $assignSeparator = ":";	public $break = "";	public $compressColors = true;	public function indentStr($n = 0)	{		return "";	}}class lessc_formatter_lessjs extends lessc_formatter_classic {	public $disableSingle = true;	public $breakSelectors = true;	public $assignSeparator = ": ";	public $selectorSeparator = ",";}
<?php/** * @package     Joomla.Plugin * @subpackage  System.cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Page Cache Plugin * * @package     Joomla.Plugin * @subpackage  System.cache */class PlgSystemCache extends JPlugin{	var $_cache		= null;	var $_cache_key	= null;	/**	 * Constructor	 *	 * @access	protected	 * @param   object	$subject The object to observe	 * @param   array  $config  An array that holds the plugin configuration	 * @since   1.0	 */	function __construct(& $subject, $config)	{		parent::__construct($subject, $config);		//Set the language in the class		$config = JFactory::getConfig();		$options = array(			'defaultgroup'	=> 'page',			'browsercache'	=> $this->params->get('browsercache', false),			'caching'		=> false,		);		$this->_cache		= JCache::getInstance('page', $options);		$this->_cache_key	= JRequest::getURI();	}	/**	* Converting the site URL to fit to the HTTP request	*	*/	function onAfterInitialise()	{		global $_PROFILER;		$app  = JFactory::getApplication();		$user = JFactory::getUser();		if ($app->isAdmin() || JDEBUG)		{			return;		}		if (count($app->getMessageQueue()))		{			return;		}		if ($user->get('guest') && $app->input->getMethod() == 'GET')		{			$this->_cache->setCaching(true);		}		$data = $this->_cache->get($this->_cache_key);		if ($data !== false)		{			JResponse::setBody($data);			echo JResponse::toString($app->getCfg('gzip'));			if (JDEBUG)			{				$_PROFILER->mark('afterCache');				echo implode('', $_PROFILER->getBuffer());			}			$app->close();		}	}	function onAfterRender()	{		$app = JFactory::getApplication();		if ($app->isAdmin() || JDEBUG)		{			return;		}		if (count($app->getMessageQueue()))		{			return;		}		$user = JFactory::getUser();		if ($user->get('guest'))		{			//We need to check again here, because auto-login plugins have not been fired before the first aid check			$this->_cache->store($this->_cache_key);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');// Get the form fieldsets.$fieldsets = $this->form->getFieldsets();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'profile.cancel' || document.formvalidator.isValid(document.id('profile-form')))		{			Joomla.submitform(task, document.getElementById('profile-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_admin&view=profile&layout=edit&id='.$this->item->id); ?>" method="post" name="adminForm" id="profile-form" class="form-validate form-horizontal" enctype="multipart/form-data">	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'account')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'account', JText::_('COM_ADMIN_USER_ACCOUNT_DETAILS', true)); ?>			<?php foreach ($this->form->getFieldset('user_details') as $field) : ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php		foreach ($fieldsets as $fieldset) :			if ($fieldset->name == 'user_details') :				continue;			endif;		?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', $fieldset->name, JText::_($fieldset->label, true)); ?>			<?php foreach ($this->form->getFieldset($fieldset->name) as $field) : ?>				<?php if ($field->hidden) : ?>				<div class="control-group">					<div class="controls"><?php echo $field->input; ?></div>				</div>				<?php else: ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>				<?php endif; ?>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;// Register dependent classes.JLoader::register('FinderIndexer', JPATH_COMPONENT_ADMINISTRATOR . '/helpers/indexer/indexer.php');/** * Indexer controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerIndexer extends JControllerLegacy{	/**	 * Method to start the indexer.	 *	 * @return  void	 *	 * @since   2.5	 */	public function start()	{		static $log;		$params = JComponentHelper::getParams('com_finder');		if ($params->get('enable_logging', '0'))		{			if ($log == null)			{				$options['format'] = '{DATE}\t{TIME}\t{LEVEL}\t{CODE}\t{MESSAGE}';				$options['text_file'] = 'indexer.php';				$log = JLog::addLogger($options);			}		}		// Log the start		JLog::add('Starting the indexer', JLog::INFO);		// We don't want this form to be cached.		header('Pragma: no-cache');		header('Cache-Control: no-cache');		header('Expires: -1');		// Check for a valid token. If invalid, send a 403 with the error message.		JSession::checkToken('request') or $this->sendResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Put in a buffer to silence noise.		ob_start();		// Reset the indexer state.		FinderIndexer::resetState();		// Import the finder plugins.		JPluginHelper::importPlugin('finder');		// Add the indexer language to JS		JText::script('COM_FINDER_AN_ERROR_HAS_OCCURRED');		JText::script('COM_FINDER_NO_ERROR_RETURNED');		// Start the indexer.		try		{			// Trigger the onStartIndex event.			JEventDispatcher::getInstance()->trigger('onStartIndex');			// Get the indexer state.			$state = FinderIndexer::getState();			$state->start = 1;			// Send the response.			$this->sendResponse($state);		}		// Catch an exception and return the response.		catch (Exception $e)		{			$this->sendResponse($e);		}	}	/**	 * Method to run the next batch of content through the indexer.	 *	 * @return  void	 *	 * @since   2.5	 */	public function batch()	{		static $log;		$params = JComponentHelper::getParams('com_finder');		if ($params->get('enable_logging', '0'))		{			if ($log == null)			{				$options['format'] = '{DATE}\t{TIME}\t{LEVEL}\t{CODE}\t{MESSAGE}';				$options['text_file'] = 'indexer.php';				$log = JLog::addLogger($options);			}		}		// Log the start		JLog::add('Starting the indexer batch process', JLog::INFO);		// We don't want this form to be cached.		header('Pragma: no-cache');		header('Cache-Control: no-cache');		header('Expires: -1');		// Check for a valid token. If invalid, send a 403 with the error message.		JSession::checkToken('request') or $this->sendResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Put in a buffer to silence noise.		ob_start();		// Remove the script time limit.		@set_time_limit(0);		// Get the indexer state.		$state = FinderIndexer::getState();		// Reset the batch offset.		$state->batchOffset = 0;		// Update the indexer state.		FinderIndexer::setState($state);		// Import the finder plugins.		JPluginHelper::importPlugin('finder');		/*		 * We are going to swap out the raw document object with an HTML document		 * in order to work around some plugins that don't do proper environment		 * checks before trying to use HTML document functions.		 */		$raw = clone(JFactory::getDocument());		$lang = JFactory::getLanguage();		// Get the document properties.		$attributes = array (			'charset'	=> 'utf-8',			'lineend'	=> 'unix',			'tab'		=> '  ',			'language'	=> $lang->getTag(),			'direction'	=> $lang->isRTL() ? 'rtl' : 'ltr'		);		// Get the HTML document.		$html = JDocument::getInstance('html', $attributes);		$doc = JFactory::getDocument();		// Swap the documents.		$doc = $html;		// Get the admin application.		$admin = clone(JFactory::getApplication());		// Get the site app.		include_once JPATH_SITE . '/includes/application.php';		$site = JApplication::getInstance('site');		// Swap the app.		$app = JFactory::getApplication();		$app = $site;		// Start the indexer.		try		{			// Trigger the onBeforeIndex event.			JEventDispatcher::getInstance()->trigger('onBeforeIndex');			// Trigger the onBuildIndex event.			JEventDispatcher::getInstance()->trigger('onBuildIndex');			// Get the indexer state.			$state = FinderIndexer::getState();			$state->start = 0;			$state->complete = 0;			// Swap the documents back.			$doc = $raw;			// Swap the applications back.			$app = $admin;			// Send the response.			$this->sendResponse($state);		}		// Catch an exception and return the response.		catch (Exception $e)		{			// Swap the documents back.			$doc = $raw;			// Send the response.			$this->sendResponse($e);		}	}	/**	 * Method to optimize the index and perform any necessary cleanup.	 *	 * @return  void	 *	 * @since   2.5	 */	public function optimize()	{		// We don't want this form to be cached.		header('Pragma: no-cache');		header('Cache-Control: no-cache');		header('Expires: -1');		// Check for a valid token. If invalid, send a 403 with the error message.		JSession::checkToken('request') or $this->sendResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Put in a buffer to silence noise.		ob_start();		// Import the finder plugins.		JPluginHelper::importPlugin('finder');		try		{			// Optimize the index			FinderIndexer::getInstance()->optimize();			// Get the indexer state.			$state = FinderIndexer::getState();			$state->start = 0;			$state->complete = 1;			// Send the response.			$this->sendResponse($state);		}		// Catch an exception and return the response.		catch (Exception $e)		{			$this->sendResponse($e);		}	}	/**	 * Method to handle a send a JSON response. The body parameter	 * can be a Exception object for when an error has occurred or	 * a JObject for a good response.	 *	 * @param   mixed  $data  JObject on success, Exception on error. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	public static function sendResponse($data = null)	{		static $log;		$params = JComponentHelper::getParams('com_finder');		if ($params->get('enable_logging', '0'))		{			if ($log == null)			{				$options['format'] = '{DATE}\t{TIME}\t{LEVEL}\t{CODE}\t{MESSAGE}';				$options['text_file'] = 'indexer.php';				$log = JLog::addLogger($options);			}		}		// Send the assigned error code if we are catching an exception.		if ($data instanceof Exception)		{			JLog::add($data->getMessage(), JLog::ERROR);			JResponse::setHeader('status', $data->getCode());			JResponse::sendHeaders();		}		// Create the response object.		$response = new FinderIndexerResponse($data);		// Add the buffer.		$response->buffer = JDEBUG ? ob_get_contents() : ob_end_clean();		// Send the JSON response.		echo json_encode($response);		// Close the application.		JFactory::getApplication()->close();	}}/** * Finder Indexer JSON Response Class * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerResponse{	/**	 * Class Constructor	 *	 * @param   mixed  $state  The processing state for the indexer	 *	 * @since   2.5	 */	public function __construct($state)	{		static $log;		$params = JComponentHelper::getParams('com_finder');		if ($params->get('enable_logging', '0'))		{			if ($log == null)			{				$options['format'] = '{DATE}\t{TIME}\t{LEVEL}\t{CODE}\t{MESSAGE}';				$options['text_file'] = 'indexer.php';				$log = JLog::addLogger($options);			}		}		// The old token is invalid so send a new one.		$this->token = JFactory::getSession()->getFormToken();		// Check if we are dealing with an error.		if ($state instanceof Exception)		{			// Log the error			JLog::add($state->getMessage(), JLog::ERROR);			// Prepare the error response.			$this->error = true;			$this->header = JText::_('COM_FINDER_INDEXER_HEADER_ERROR');			$this->message = $state->getMessage();		}		else		{			// Prepare the response data.			$this->batchSize = (int) $state->batchSize;			$this->batchOffset = (int) $state->batchOffset;			$this->totalItems = (int) $state->totalItems;			$this->startTime = $state->startTime;			$this->endTime = JFactory::getDate()->toSQL();			$this->start = !empty($state->start) ? (int) $state->start : 0;			$this->complete = !empty($state->complete) ? (int) $state->complete : 0;			// Set the appropriate messages.			if ($this->totalItems <= 0 && $this->complete)			{				$this->header = JText::_('COM_FINDER_INDEXER_HEADER_COMPLETE');				$this->message = JText::_('COM_FINDER_INDEXER_MESSAGE_COMPLETE');			}			elseif ($this->totalItems <= 0)			{				$this->header = JText::_('COM_FINDER_INDEXER_HEADER_OPTIMIZE');				$this->message = JText::_('COM_FINDER_INDEXER_MESSAGE_OPTIMIZE');			}			else			{				$this->header = JText::_('COM_FINDER_INDEXER_HEADER_RUNNING');				$this->message = JText::_('COM_FINDER_INDEXER_MESSAGE_RUNNING');			}		}	}}// Register the error handler.JError::setErrorHandling(E_ALL, 'callback', array('FinderControllerIndexer', 'sendResponse'));
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Field for assigning permissions to groups for a given asset * * @package     Joomla.Platform * @subpackage  Form * @see         JAccess * @since       11.1 */class JFormFieldRules extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Rules';	/**	 * Method to get the field input markup for Access Control Lists.	 * Optionally can be associated with a specific component and section.	 *	 * TODO: Add access check.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		JHtml::_('behavior.tooltip');		// Initialise some field attributes.		$section = $this->element['section'] ? (string) $this->element['section'] : '';		$component = $this->element['component'] ? (string) $this->element['component'] : '';		$assetField = $this->element['asset_field'] ? (string) $this->element['asset_field'] : 'asset_id';		// Get the actions for the asset.		$actions = JAccess::getActions($component, $section);		// Iterate over the children and add to the actions.		foreach ($this->element->children() as $el)		{			if ($el->getName() == 'action')			{				$actions[] = (object) array('name' => (string) $el['name'], 'title' => (string) $el['title'],					'description' => (string) $el['description']);			}		}		// Get the explicit rules for this asset.		if ($section == 'component')		{			// Need to find the asset id by the name of the component.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select($db->quoteName('id'))				->from($db->quoteName('#__assets'))				->where($db->quoteName('name') . ' = ' . $db->quote($component));			$db->setQuery($query);			$assetId = (int) $db->loadResult();		}		else		{			// Find the asset id of the content.			// Note that for global configuration, com_config injects asset_id = 1 into the form.			$assetId = $this->form->getValue($assetField);		}		// Use the compact form for the content rules (deprecated).		/* @todo remove code:		if (!empty($component) && $section != 'component') {			return JHtml::_('rules.assetFormWidget', $actions, $assetId, $assetId ? null : $component, $this->name, $this->id);		}		 */		// Full width format.		// Get the rules for just this asset (non-recursive).		$assetRules = JAccess::getAssetRules($assetId);		// Get the available user groups.		$groups = $this->getUserGroups();		// Build the form control.		$curLevel = 0;		// Prepare output		$html = array();		// Description		$html[] = '<p class="rule-desc">' . JText::_('JLIB_RULES_SETTINGS_DESC') . '</p>';		// Begin tabs		$html[] = '<div id="permissions-sliders" class="tabbable tabs-left">';		// Building tab nav		$html[] = '<ul class="nav nav-tabs">';		foreach ($groups as $group)		{			// Initial Active Tab			$active = "";			if ($group->value == 1)			{				$active = "active";			}			$html[] = '<li class="' . $active . '">';				$html[] = '<a href="#permission-' . $group->value . '" data-toggle="tab">';				$html[] = str_repeat('<span class="level">&ndash; ', $curLevel = $group->level) . $group->text;				$html[] = '</a>';			$html[] = '</li>';		}		$html[] = '</ul>';		$html[] = '<div class="tab-content">';		// Start a row for each user group.		foreach ($groups as $group)		{			// Initial Active Pane			$active = "";			if ($group->value == 1)			{				$active = " active";			}			$difLevel = $group->level - $curLevel;			$html[] = '<div class="tab-pane' . $active . '" id="permission-' . $group->value . '">';			$html[] = '<table class="table table-striped">';			$html[] = '<thead>';			$html[] = '<tr>';			$html[] = '<th class="actions" id="actions-th' . $group->value . '">';			$html[] = '<span class="acl-action">' . JText::_('JLIB_RULES_ACTION') . '</span>';			$html[] = '</th>';			$html[] = '<th class="settings" id="settings-th' . $group->value . '">';			$html[] = '<span class="acl-action">' . JText::_('JLIB_RULES_SELECT_SETTING') . '</span>';			$html[] = '</th>';			// The calculated setting is not shown for the root group of global configuration.			$canCalculateSettings = ($group->parent_id || !empty($component));			if ($canCalculateSettings)			{				$html[] = '<th id="aclactionth' . $group->value . '">';				$html[] = '<span class="acl-action">' . JText::_('JLIB_RULES_CALCULATED_SETTING') . '</span>';				$html[] = '</th>';			}			$html[] = '</tr>';			$html[] = '</thead>';			$html[] = '<tbody>';			foreach ($actions as $action)			{				$html[] = '<tr>';				$html[] = '<td headers="actions-th' . $group->value . '">';				$html[] = '<label class="tip" for="' . $this->id . '_' . $action->name . '_' . $group->value . '" title="'					. htmlspecialchars(JText::_($action->title) . ' ' . JText::_($action->description), ENT_COMPAT, 'UTF-8') . '">';				$html[] = JText::_($action->title);				$html[] = '</label>';				$html[] = '</td>';				$html[] = '<td headers="settings-th' . $group->value . '">';				$html[] = '<select class="input-small" name="' . $this->name . '[' . $action->name . '][' . $group->value . ']" id="' . $this->id . '_' . $action->name					. '_' . $group->value . '" title="'					. JText::sprintf('JLIB_RULES_SELECT_ALLOW_DENY_GROUP', JText::_($action->title), trim($group->text)) . '">';				$inheritedRule = JAccess::checkGroup($group->value, $action->name, $assetId);				// Get the actual setting for the action for this group.				$assetRule = $assetRules->allow($action->name, $group->value);				// Build the dropdowns for the permissions sliders				// The parent group has "Not Set", all children can rightly "Inherit" from that.				$html[] = '<option value=""' . ($assetRule === null ? ' selected="selected"' : '') . '>'					. JText::_(empty($group->parent_id) && empty($component) ? 'JLIB_RULES_NOT_SET' : 'JLIB_RULES_INHERITED') . '</option>';				$html[] = '<option value="1"' . ($assetRule === true ? ' selected="selected"' : '') . '>' . JText::_('JLIB_RULES_ALLOWED')					. '</option>';				$html[] = '<option value="0"' . ($assetRule === false ? ' selected="selected"' : '') . '>' . JText::_('JLIB_RULES_DENIED')					. '</option>';				$html[] = '</select>&#160; ';				// If this asset's rule is allowed, but the inherited rule is deny, we have a conflict.				if (($assetRule === true) && ($inheritedRule === false))				{					$html[] = JText::_('JLIB_RULES_CONFLICT');				}				$html[] = '</td>';				// Build the Calculated Settings column.				// The inherited settings column is not displayed for the root group in global configuration.				if ($canCalculateSettings)				{					$html[] = '<td headers="aclactionth' . $group->value . '">';					// This is where we show the current effective settings considering currrent group, path and cascade.					// Check whether this is a component or global. Change the text slightly.					if (JAccess::checkGroup($group->value, 'core.admin', $assetId) !== true)					{						if ($inheritedRule === null)						{							$html[] = '<span class="label label-important">' . JText::_('JLIB_RULES_NOT_ALLOWED') . '</span>';						}						elseif ($inheritedRule === true)						{							$html[] = '<span class="label label-success">' . JText::_('JLIB_RULES_ALLOWED') . '</span>';						}						elseif ($inheritedRule === false)						{							if ($assetRule === false)							{								$html[] = '<span class="label label-important">' . JText::_('JLIB_RULES_NOT_ALLOWED') . '</span>';							}							else							{								$html[] = '<span class="label"><i class="icon-lock icon-white"></i> ' . JText::_('JLIB_RULES_NOT_ALLOWED_LOCKED')									. '</span>';							}						}					}					elseif (!empty($component))					{						$html[] = '<span class="label label-success"><i class="icon-lock icon-white"></i> ' . JText::_('JLIB_RULES_ALLOWED_ADMIN')							. '</span>';					}					else					{						// Special handling for  groups that have global admin because they can't  be denied.						// The admin rights can be changed.						if ($action->name === 'core.admin')						{							$html[] = '<span class="label label-success">' . JText::_('JLIB_RULES_ALLOWED') . '</span>';						}						elseif ($inheritedRule === false)						{							// Other actions cannot be changed.							$html[] = '<span class="label label-important"><i class="icon-lock icon-white"></i> '								. JText::_('JLIB_RULES_NOT_ALLOWED_ADMIN_CONFLICT') . '</span>';						}						else						{							$html[] = '<span class="label label-success"><i class="icon-lock icon-white"></i> ' . JText::_('JLIB_RULES_ALLOWED_ADMIN')								. '</span>';						}					}					$html[] = '</td>';				}				$html[] = '</tr>';			}			$html[] = '</tbody>';			$html[] = '</table></div>';		}		$html[] = '</div></div>';		$html[] = '<div class="alert">';		if ($section == 'component' || $section == null)		{			$html[] = JText::_('JLIB_RULES_SETTING_NOTES');		}		else		{			$html[] = JText::_('JLIB_RULES_SETTING_NOTES_ITEM');		}		$html[] = '</div>';		return implode("\n", $html);	}	/**	 * Get a list of the user groups.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function getUserGroups()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level, a.parent_id')			->from('#__usergroups AS a')			->join('LEFT', $db->quoteName('#__usergroups') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt')			->group('a.id, a.title, a.lft, a.rgt, a.parent_id')			->order('a.lft ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/pdo * @since       12.1 */class JDatabaseDriverSqlite extends JDatabaseDriverPdo{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlite';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc. The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = '`';	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Drops a table from the database.	 *	 * @param   string   $tableName  The name of the database table to drop.	 * @param   boolean  $ifExists   Optionally specify that the table must exist before it is dropped.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function dropTable($tableName, $ifExists = true)	{		$this->connect();		$query = $this->getQuery(true);		$this->setQuery('DROP TABLE ' . ($ifExists ? 'IF EXISTS ' : '') . $query->quoteName($tableName));		$this->execute();		return $this;	}	/**	 * Method to escape a string for usage in an SQLite statement.	 *	 * Note: Using query objects with bound variables is	 * preferable to the below.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Unused optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		if (is_int($text) || is_float($text))		{			return $text;		}		return SQLite3::escapeString($text);	}	/**	 * Method to get the database collation in use by sampling a text field of a table in the database.	 *	 * @return  mixed  The collation in use by the database or boolean false if not supported.	 *	 * @since   12.1	 */	public function getCollation()	{		return $this->charset;	}	/**	 * Shows the table CREATE statement that creates the given tables.	 *	 * Note: Doesn't appear to have support in SQLite	 *	 * @param   mixed  $tables  A table name or a list of table names.	 *	 * @return  array  A list of the create SQL for the tables.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableCreate($tables)	{		$this->connect();		// Sanitize input to an array and iterate over the list.		settype($tables, 'array');		return $tables;	}	/**	 * Retrieves field information about a given table.	 *	 * @param   string   $table     The name of the database table.	 * @param   boolean  $typeOnly  True to only return field types.	 *	 * @return  array  An array of fields for the database table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableColumns($table, $typeOnly = true)	{		$this->connect();		$columns = array();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->setQuery('pragma table_info(' . $table . ')');		$this->setQuery($query);		$fields = $this->loadObjectList();		if ($typeOnly)		{			foreach ($fields as $field)			{				$columns[$field->NAME] = $field->TYPE;			}		}		else		{			foreach ($fields as $field)			{				// Do some dirty translation to MySQL output.				// TODO: Come up with and implement a standard across databases.				$columns[$field->NAME] = (object) array(					'Field' => $field->NAME,					'Type' => $field->TYPE,					'Null' => ($field->NOTNULL == '1' ? 'NO' : 'YES'),					'Default' => $field->DFLT_VALUE,					'Key' => ($field->PK == '1' ? 'PRI' : '')				);			}		}		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $columns;	}	/**	 * Get the details list of keys for a table.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  array  An array of the column specification for the table.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableKeys($table)	{		$this->connect();		$keys = array();		$query = $this->getQuery(true);		$fieldCasing = $this->getOption(PDO::ATTR_CASE);		$this->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);		$table = strtoupper($table);		$query->setQuery('pragma table_info( ' . $table . ')');		// $query->bind(':tableName', $table);		$this->setQuery($query);		$rows = $this->loadObjectList();		foreach ($rows as $column)		{			if ($column->PK == 1)			{				$keys[$column->NAME] = $column;			}		}		$this->setOption(PDO::ATTR_CASE, $fieldCasing);		return $keys;	}	/**	 * Method to get an array of all tables in the database (schema).	 *	 * @return  array   An array of all the tables in the database.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getTableList()	{		$this->connect();		$query = $this->getQuery(true);		$tables = array();		$type = 'table';		$query->select('name')			->from('sqlite_master')			->where('type = :type')			->bind(':type', $type)			->order('name');		$this->setQuery($query);		$tables = $this->loadColumn();		return $tables;	}	/**	 * Get the version of the database connector.	 *	 * @return  string  The database connector version.	 *	 * @since   12.1	 */	public function getVersion()	{		$this->connect();		$this->setQuery("SELECT sqlite_version()");		return $this->loadResult();	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		return true;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * Returns false automatically for the Oracle driver since	 * you can only set the character set when the connection	 * is created.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		$this->connect();		return false;	}	/**	 * Locks a table in the database.	 *	 * @param   string  $table  The name of the table to unlock.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function lockTable($table)	{		return $this;	}	/**	 * Renames a table in the database.	 *	 * @param   string  $oldTable  The name of the table to be renamed	 * @param   string  $newTable  The new name for the table.	 * @param   string  $backup    Not used by Sqlite.	 * @param   string  $prefix    Not used by Sqlite.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function renameTable($oldTable, $newTable, $backup = null, $prefix = null)	{		$this->setQuery('ALTER TABLE ' . $oldTable . ' RENAME TO ' . $newTable)->execute();		return $this;	}	/**	 * Unlocks tables in the database.	 *	 * @return  JDatabaseDriverSqlite  Returns this object to support chaining.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function unlockTables()	{		return $this;	}	/**	 * Test to see if the PDO ODBC connector is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return class_exists('PDO') && in_array('sqlite', PDO::getAvailableDrivers());	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filters model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelFilters extends JModelList{	/**	 * Constructor.	 *	 * @param   array  $config  An associative array of configuration settings. [optional]	 *	 * @since   2.5	 * @see     JController	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'filter_id', 'a.filter_id',				'title', 'a.title',				'state', 'a.state',				'created_by_alias', 'a.created_by_alias',				'created', 'a.created',				'map_count', 'a.map_count'			);		}		parent::__construct($config);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object	 *	 * @since   2.5	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select all fields from the table.		$query->select('a.*')			->from($db->quoteName('#__finder_filters') . ' AS a');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', $db->quoteName('#__users') . ' AS uc ON uc.id=a.checked_out');		// Join over the users for the author.		$query->select('ua.name AS user_name')			->join('LEFT', $db->quoteName('#__users') . ' AS ua ON ua.id = a.created_by');		// Check for a search filter.		if ($this->getState('filter.search'))		{			$query->where('( a.title LIKE \'%' . $db->escape($this->getState('filter.search')) . '%\' )');		}		// If the model is set to check item state, add to the query.		if (is_numeric($this->getState('filter.state')))		{			$query->where('a.state = ' . (int) $this->getState('filter.state'));		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering') . ' ' . $db->escape($this->getState('list.direction'))));		return $query;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id. [optional]	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.state');		return parent::getStoreId($id);	}	/**	 * Method to auto-populate the model state.  Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field. [optional]	 * @param   string  $direction  An optional direction. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState($ordering = null, $direction = null)	{		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		// Load the parameters.		$params = JComponentHelper::getParams('com_finder');		$this->setState('params', $params);		// List state information.		parent::populateState('a.title', 'asc');	}}
<?php/** * @package     Joomla.Plugin * @subpackage  User.joomla * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla User plugin * * @package     Joomla.Plugin * @subpackage  User.joomla * @since       1.5 */class PlgUserJoomla extends JPlugin{	/**	 * Remove all sessions for the user name	 *	 * Method is called after user data is deleted from the database	 *	 * @param   array          $user      Holds the user data	 * @param   boolean        $succes    True if user was succesfully stored in the database	 * @param   string         $msg       Message	 *	 * @return  boolean	 * @since   1.6	 */	public function onUserAfterDelete($user, $succes, $msg)	{		if (!$succes)		{			return false;		}		$db = JFactory::getDbo();		$db->setQuery(			'DELETE FROM ' . $db->quoteName('#__session') .				' WHERE ' . $db->quoteName('userid') . ' = ' . (int) $user['id']		);		$db->execute();		return true;	}	/**	 * Utility method to act on a user after it has been saved.	 *	 * This method sends a registration email to new users created in the backend.	 *	 * @param   array          $user         Holds the new user data.	 * @param   boolean        $isnew        True if a new user is stored.	 * @param   boolean        $success      True if user was succesfully stored in the database.	 * @param   string         $msg          Message.	 *	 * @return  void	 * @since   1.6	 */	public function onUserAfterSave($user, $isnew, $success, $msg)	{		$app = JFactory::getApplication();		$config = JFactory::getConfig();		$mail_to_user = $this->params->get('mail_to_user', 1);		if ($isnew)		{			// TODO: Suck in the frontend registration emails here as well. Job for a rainy day.			if ($app->isAdmin())			{				if ($mail_to_user)				{					// Load user_joomla plugin language (not done automatically).					$lang = JFactory::getLanguage();					$lang->load('plg_user_joomla', JPATH_ADMINISTRATOR);					// Compute the mail subject.					$emailSubject = JText::sprintf(						'PLG_USER_JOOMLA_NEW_USER_EMAIL_SUBJECT',						$user['name'],						$config->get('sitename')					);					// Compute the mail body.					$emailBody = JText::sprintf(						'PLG_USER_JOOMLA_NEW_USER_EMAIL_BODY',						$user['name'],						$config->get('sitename'),						JUri::root(),						$user['username'],						$user['password_clear']					);					// Assemble the email data...the sexy way!					$mail = JFactory::getMailer()						->setSender(							array(								$config->get('mailfrom'),								$config->get('fromname')							)						)						->addRecipient($user['email'])						->setSubject($emailSubject)						->setBody($emailBody);					if (!$mail->Send())					{						// TODO: Probably should raise a plugin error but this event is not error checked.						JError::raiseWarning(500, JText::_('ERROR_SENDING_EMAIL'));					}				}			}		}		else		{			// Existing user - nothing to do...yet.		}	}	/**	 * This method should handle any login logic and report back to the subject	 *	 * @param   array  $user        Holds the user data	 * @param   array  $options     Array holding options (remember, autoregister, group)	 *	 * @return  boolean  True on success	 * @since   1.5	 */	public function onUserLogin($user, $options = array())	{		$instance = $this->_getUser($user, $options);		// If _getUser returned an error, then pass it back.		if ($instance instanceof Exception)		{			return false;		}		// If the user is blocked, redirect with an error		if ($instance->get('block') == 1)		{			JError::raiseWarning('SOME_ERROR_CODE', JText::_('JERROR_NOLOGIN_BLOCKED'));			return false;		}		// Authorise the user based on the group information		if (!isset($options['group']))		{			$options['group'] = 'USERS';		}		// Check the user can login.		$result = $instance->authorise($options['action']);		if (!$result)		{			JError::raiseWarning(401, JText::_('JERROR_LOGIN_DENIED'));			return false;		}		// Mark the user as logged in		$instance->set('guest', 0);		// Register the needed session variables		$session = JFactory::getSession();		$session->set('user', $instance);		$db = JFactory::getDbo();		// Check to see the the session already exists.		$app = JFactory::getApplication();		$app->checkSession();		// Update the user related fields for the Joomla sessions table.		$query = $db->getQuery(true)			->update($db->quoteName('#__session'))			->set($db->quoteName('guest') . ' = ' . $db->quote($instance->get('guest')))			->set($db->quoteName('username') . ' = ' . $db->quote($instance->get('username')))			->set($db->quoteName('userid') . ' = ' . (int) $instance->get('id'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($session->getId()));		$db->setQuery($query);		$db->execute();		// Hit the user last visit field		$instance->setLastVisit();		return true;	}	/**	 * This method should handle any logout logic and report back to the subject	 *	 * @param   array  $user        Holds the user data.	 * @param   array  $options     Array holding options (client, ...).	 *	 * @return  object  True on success	 * @since   1.5	 */	public function onUserLogout($user, $options = array())	{		$my = JFactory::getUser();		$session = JFactory::getSession();		$app = JFactory::getApplication();		// Make sure we're a valid user first		if ($user['id'] == 0 && !$my->get('tmp_user'))		{			return true;		}		// Check to see if we're deleting the current session		if ($my->get('id') == $user['id'] && $options['clientid'] == $app->getClientId())		{			// Hit the user last visit field			$my->setLastVisit();			// Destroy the php session for this user			$session->destroy();		}		// Force logout all users with that userid		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->delete($db->quoteName('#__session'))			->where($db->quoteName('userid') . ' = ' . (int) $user['id'])			->where($db->quoteName('client_id') . ' = ' . (int) $options['clientid']);		$db->setQuery($query);		$db->execute();		return true;	}	/**	 * This method will return a user object	 *	 * If options['autoregister'] is true, if the user doesn't exist yet he will be created	 *	 * @param   array  $user        Holds the user data.	 * @param   array  $options     Array holding options (remember, autoregister, group).	 *	 * @return  object  A JUser object	 * @since   1.5	 */	protected function _getUser($user, $options = array())	{		$instance = JUser::getInstance();		$id = (int) JUserHelper::getUserId($user['username']);		if ($id)		{			$instance->load($id);			return $instance;		}		//TODO : move this out of the plugin		$config = JComponentHelper::getParams('com_users');		// Default to Registered.		$defaultUserGroup = $config->get('new_usertype', 2);		$instance->set('id', 0);		$instance->set('name', $user['fullname']);		$instance->set('username', $user['username']);		$instance->set('password_clear', $user['password_clear']);		// Result should contain an email (check)		$instance->set('email', $user['email']);		$instance->set('groups', array($defaultUserGroup));		//If autoregister is set let's register the user		$autoregister = isset($options['autoregister']) ? $options['autoregister'] : $this->params->get('autoregister', 1);		if ($autoregister)		{			if (!$instance->save())			{				return JError::raiseWarning('SOME_ERROR_CODE', $instance->getError());			}		}		else		{			// No existing user and autoregister off, this is a temporary user.			$instance->set('tmp_user', true);		}		return $instance;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'category.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_categories&extension=' . $input->getCmd('extension', 'com_content') . '&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_CATEGORIES_FIELDSET_DETAILS', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('title'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('title'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('alias'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('description'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('description'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('extension'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('extension'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_CATEGORIES_FIELDSET_PUBLISHING', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('id'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('hits'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('hits'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('created_user_id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('created_user_id'); ?>						</div>					</div>					<?php if (intval($this->item->created_time)) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('created_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('created_time'); ?>							</div>						</div>					<?php endif; ?>					<?php if ($this->item->modified_user_id) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_user_id'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_user_id'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_time'); ?>							</div>						</div>					<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'options', JText::_('CATEGORIES_FIELDSET_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('options'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('metadata'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo $this->loadTemplate('extrafields'); ?>				<?php if ($this->assoc) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>						<fieldset>							<?php echo $this->loadTemplate('associations'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>				<?php if ($this->canDo->get('core.admin')) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'rules', JText::_('COM_CATEGORIES_FIELDSET_RULES', true)); ?>						<fieldset>							<?php echo $this->form->getInput('rules'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<?php foreach ($this->form->getFieldset('jmetadata') as $field) : ?>						<?php if ($field->name == 'jform[metadata][tags][]') :?>						<div class="control-group">							<div class="control-label"><?php echo $field->label; ?></div>							<div class="controls"><?php echo $field->input; ?></div>						</div>						<?php endif; ?>					<?php endforeach; ?>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentControllerArticle extends JControllerForm{	/**	 * Class constructor.	 *	 * @param   array  $config  A named array of configuration variables.	 *	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		// An article edit form can come from the articles or featured view.		// Adjust the redirect view on the value of 'return' in the request.		if ($this->input->get('return') == 'featured')		{			$this->view_list = 'featured';			$this->view_item = 'article&return=featured';		}	}	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the data or URL check it.			$allow = $user->authorise('core.create', 'com_content.category.' . $categoryId);		}		if ($allow === null)		{			// In the absense of better information, revert to the component permissions.			return parent::allowAdd();		}		else		{			return $allow;		}	}	/**	 * Method override to check if you can edit an existing record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$user = JFactory::getUser();		$userId = $user->get('id');		// Check general edit permission first.		if ($user->authorise('core.edit', 'com_content.article.' . $recordId))		{			return true;		}		// Fallback on edit.own.		// First test if the permission is available.		if ($user->authorise('core.edit.own', 'com_content.article.' . $recordId))		{			// Now test the owner is the user.			$ownerId = (int) isset($data['created_by']) ? $data['created_by'] : 0;			if (empty($ownerId) && $recordId)			{				// Need to do a lookup from the model.				$record = $this->getModel()->getItem($recordId);				if (empty($record))				{					return false;				}				$ownerId = $record->created_by;			}			// If the owner matches 'me' then do the test.			if ($ownerId == $userId)			{				return true;			}		}		// Since there is no asset tracking, revert to the component permissions.		return parent::allowEdit($data, $key);	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   1.6	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Article', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_content&view=articles' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   array         $validData   The validated data.	 *	 * @return	void	 *	 * @since	3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		return;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! MySQL Database Log class * * This class is designed to output logs to a specific MySQL database table. Fields in this * table are based on the Syslog style of log output. This is designed to allow quick and * easy searching. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerDatabase extends JLogLogger{	/**	 * @var    string  The name of the database driver to use for connecting to the database.	 * @since  11.1	 */	protected $driver = 'mysqli';	/**	 * @var    string  The host name (or IP) of the server with which to connect for the logger.	 * @since  11.1	 */	protected $host = '127.0.0.1';	/**	 * @var    string  The database server user to connect as for the logger.	 * @since  11.1	 */	protected $user = 'root';	/**	 * @var    string  The password to use for connecting to the database server.	 * @since  11.1	 */	protected $password = '';	/**	 * @var    string  The name of the database table to use for the logger.	 * @since  11.1	 */	protected $database = 'logging';	/**	 * @var    string  The database table to use for logging entries.	 * @since  11.1	 */	protected $table = 'jos_';	/**	 * @var    JDatabaseDriver  The database driver object for the logger.	 * @since  11.1	 */	protected $db;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// If both the database object and driver options are empty we want to use the system database connection.		if (empty($this->options['db_driver']))		{			$this->db = JFactory::getDbo();			$this->driver = null;			$this->host = null;			$this->user = null;			$this->password = null;			$this->database = null;			$this->prefix = null;		}		else		{			$this->db = null;			$this->driver = (empty($this->options['db_driver'])) ? 'mysqli' : $this->options['db_driver'];			$this->host = (empty($this->options['db_host'])) ? '127.0.0.1' : $this->options['db_host'];			$this->user = (empty($this->options['db_user'])) ? 'root' : $this->options['db_user'];			$this->password = (empty($this->options['db_pass'])) ? '' : $this->options['db_pass'];			$this->database = (empty($this->options['db_database'])) ? 'logging' : $this->options['db_database'];			$this->prefix = (empty($this->options['db_prefix'])) ? 'jos_' : $this->options['db_prefix'];		}		// The table name is independent of how we arrived at the connection object.		$this->table = (empty($this->options['db_table'])) ? '#__log_entries' : $this->options['db_table'];	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addEntry(JLogEntry $entry)	{		// Connect to the database if not connected.		if (empty($this->db))		{			$this->connect();		}		// Convert the date.		$entry->date = $entry->date->toSql(false, $this->db);		$this->db->insertObject($this->table, $entry);	}	/**	 * Method to connect to the database server based on object properties.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function connect()	{		// Build the configuration object to use for JDatabaseDriver.		$options = array(			'driver' => $this->driver,			'host' => $this->host,			'user' => $this->user,			'password' => $this->password,			'database' => $this->database,			'prefix' => $this->prefix);		$db = JDatabaseDriver::getInstance($options);		// Assign the database connector to the class.		$this->db = $db;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $this UsersViewNotes */JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');?><div class="unotes">	<h1><?php echo JText::sprintf('COM_USERS_NOTES_FOR_USER', $this->user->name, $this->user->id); ?></h1><?php if (empty($this->items)) : ?>	<?php echo JText::_('COM_USERS_NO_NOTES'); ?><?php else : ?>	<ol class="alternating">	<?php foreach ($this->items as $item) : ?>		<li>			<div class="fltlft utitle">				<?php if ($item->subject) : ?>					<h4><?php echo JText::sprintf('COM_USERS_NOTE_N_SUBJECT', (int) $item->id, $this->escape($item->subject)); ?></h4>				<?php else : ?>					<h4><?php echo JText::sprintf('COM_USERS_NOTE_N_SUBJECT', (int) $item->id, JText::_('COM_USERS_EMPTY_SUBJECT')); ?></h4>				<?php endif; ?>			</div>			<div class="fltlft utitle">				<?php echo JHtml::date($item->created_time, 'D d M Y H:i'); ?>			</div>			<?php $category_image = $item->cparams->get('image'); ?>			<?php if ($item->catid && isset($category_image)) : ?>			<div class="fltlft utitle">				<?php echo JHtml::_('users.image', $category_image); ?>			</div>			<div class="fltlft utitle">				<em><?php echo $this->escape($item->category_title); ?></em>			</div>			<?php endif; ?>			<div class="clr"></div>			<div class="ubody">				<?php echo $item->body; ?>			</div>		</li>	<?php endforeach; ?>	</ol><?php endif; ?></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.base.adapterinstance');jimport('joomla.filesystem.folder');/** * File installer * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerAdapterFile extends JAdapterInstance{	protected $route = 'install';	/**	 * Custom loadLanguage method	 *	 * @param   string  $path  The path on which to find language files.	 *	 * @return  void	 *	 * @since   3.1	 */	public function loadLanguage($path)	{		$this->manifest = $this->parent->getManifest();		$extension = 'files_' . str_replace('files_', '', strtolower(JFilterInput::getInstance()->clean((string) $this->manifest->name, 'cmd')));		$lang = JFactory::getLanguage();		$source = $path;		$lang->load($extension . '.sys', $source, null, false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, null, false, false)			|| $lang->load($extension . '.sys', $source, $lang->getDefault(), false, false)			|| $lang->load($extension . '.sys', JPATH_SITE, $lang->getDefault(), false, false);	}	/**	 * Custom install method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function install()	{		// Get the extension manifest object		$this->manifest = $this->parent->getManifest();		/*		 * ---------------------------------------------------------------------------------------------		 * Manifest Document Setup Section		 * ---------------------------------------------------------------------------------------------		 */		// Set the extension's name		$name = JFilterInput::getInstance()->clean((string) $this->manifest->name, 'string');		$this->set('name', $name);		// Set element		$manifestPath = JPath::clean($this->parent->getPath('manifest'));		$element = preg_replace('/\.xml/', '', basename($manifestPath));		$this->set('element', $element);		// Get the component description		$description = (string) $this->manifest->description;		if ($description)		{			$this->parent->set('message', JText::_($description));		}		else		{			$this->parent->set('message', '');		}		// Check if the extension by the same name is already installed		if ($this->extensionExistsInSystem($element))		{			// Package with same name already exists			if (!$this->parent->isOverwrite())			{				// We're not overwriting so abort				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_SAME_NAME'));				return false;			}			else			{				// Swap to the update route				$this->route = 'update';			}		}		// Set the file root path		if ($name == 'files_joomla')		{			// If we are updating the Joomla core, set the root path to the root of Joomla			$this->parent->setPath('extension_root', JPATH_ROOT);		}		else		{			$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/files/' . $this->get('element'));		}		/**		 * ---------------------------------------------------------------------------------------------		 * Installer Trigger Loading		 * ---------------------------------------------------------------------------------------------		 */		// If there is an manifest class file, lets load it; we'll copy it later (don't have dest yet)		$this->scriptElement = $this->manifest->scriptfile;		$manifestScript = (string) $this->manifest->scriptfile;		if ($manifestScript)		{			$manifestScriptFile = $this->parent->getPath('source') . '/' . $manifestScript;			if (is_file($manifestScriptFile))			{				// Load the file				include_once $manifestScriptFile;			}			// Set the class name			$classname = $element . 'InstallerScript';			if (class_exists($classname))			{				// Create a new instance				$this->parent->manifestClass = new $classname($this);				// And set this so we can copy it later				$this->set('manifest_script', $manifestScript);			}		}		// Run preflight if possible (since we know we're not an update)		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'preflight'))		{			if ($this->parent->manifestClass->preflight($this->route, $this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Create msg object; first use here		$msg = ob_get_contents();		ob_end_clean();		// Populate File and Folder List to copy		$this->populateFilesAndFolderList();		/*		 * ---------------------------------------------------------------------------------------------		 * Filesystem Processing Section		 * ---------------------------------------------------------------------------------------------		 */		// Now that we have folder list, lets start creating them		foreach ($this->folderList as $folder)		{			if (!JFolder::exists($folder))			{				if (!$created = JFolder::create($folder))				{					JLog::add(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_FAIL_SOURCE_DIRECTORY', $folder), JLog::WARNING, 'jerror');					// If installation fails, rollback					$this->parent->abort();					return false;				}				// Since we created a directory and will want to remove it if we have to roll back.				// The installation due to some errors, let's add it to the installation step stack.				if ($created)				{					$this->parent->pushStep(array('type' => 'folder', 'path' => $folder));				}			}		}		// Now that we have file list, let's start copying them		$this->parent->copyFiles($this->fileList);		// Parse optional tags		$this->parent->parseLanguages($this->manifest->languages);		/**		 * ---------------------------------------------------------------------------------------------		 * Finalization and Cleanup Section		 * ---------------------------------------------------------------------------------------------		 */		// Get a database connector object		$db = $this->parent->getDbo();		/*		 * Check to see if a file extension by the same name is already installed		 * If it is, then update the table because if the files aren't there		 * we can assume that it was (badly) uninstalled		 * If it isn't, add an entry to extensions		 */		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('file'))			->where($db->quoteName('element') . ' = ' . $db->quote($element));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent->abort(				JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))			);			return false;		}		$id = $db->loadResult();		$row = JTable::getInstance('extension');		if ($id)		{			// Load the entry and update the manifest_cache			$row->load($id);			// Update name			$row->set('name', $this->get('name'));			// Update manifest			$row->manifest_cache = $this->parent->generateManifestCache();			if (!$row->store())			{				// Install failed, roll back changes				$this->parent->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}		}		else		{			// Add an entry to the extension table with a whole heap of defaults			$row->set('name', $this->get('name'));			$row->set('type', 'file');			$row->set('element', $this->get('element'));			// There is no folder for files so leave it blank			$row->set('folder', '');			$row->set('enabled', 1);			$row->set('protected', 0);			$row->set('access', 0);			$row->set('client_id', 0);			$row->set('params', '');			$row->set('system_data', '');			$row->set('manifest_cache', $this->parent->generateManifestCache());			if (!$row->store())			{				// Install failed, roll back changes				$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_ROLLBACK', $db->stderr(true)));				return false;			}			// Since we have created a module item, we add it to the installation step stack			// so that if we have to rollback the changes we can undo it.			$this->parent->pushStep(array('type' => 'extension', 'extension_id' => $row->extension_id));		}		// Let's run the queries for the file		if (strtolower($this->route) == 'install')		{			$result = $this->parent->parseSQLFiles($this->manifest->install->sql);			if ($result === false)			{				// Install failed, rollback changes				$this->parent->abort(					JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_SQL_ERROR', JText::_('JLIB_INSTALLER_' . $this->route), $db->stderr(true))				);				return false;			}			// Set the schema version to be the latest update version			if ($this->manifest->update)			{				$this->parent->setSchemaVersion($this->manifest->update->schemas, $row->extension_id);			}		}		elseif (strtolower($this->route) == 'update')		{			if ($this->manifest->update)			{				$result = $this->parent->parseSchemaUpdates($this->manifest->update->schemas, $row->extension_id);				if ($result === false)				{					// Install failed, rollback changes					$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_UPDATE_SQL_ERROR', $db->stderr(true)));					return false;				}			}		}		// Try to run the script file's custom method based on the route		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, $this->route))		{			if ($this->parent->manifestClass->{$this->route}($this) === false)			{				// Install failed, rollback changes				$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_CUSTOM_INSTALL_FAILURE'));				return false;			}		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		// Lastly, we will copy the manifest file to its appropriate place.		$manifest = array();		$manifest['src'] = $this->parent->getPath('manifest');		$manifest['dest'] = JPATH_MANIFESTS . '/files/' . basename($this->parent->getPath('manifest'));		if (!$this->parent->copyFiles(array($manifest), true))		{			// Install failed, rollback changes			$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_FILE_INSTALL_COPY_SETUP'));			return false;		}		// If there is a manifest script, let's copy it.		if ($this->get('manifest_script'))		{			// First, we have to create a folder for the script if one isn't present			if (!file_exists($this->parent->getPath('extension_root')))			{				JFolder::create($this->parent->getPath('extension_root'));			}			$path['src'] = $this->parent->getPath('source') . '/' . $this->get('manifest_script');			$path['dest'] = $this->parent->getPath('extension_root') . '/' . $this->get('manifest_script');			if (!file_exists($path['dest']) || $this->parent->isOverwrite())			{				if (!$this->parent->copyFiles(array($path)))				{					// Install failed, rollback changes					$this->parent->abort(JText::_('JLIB_INSTALLER_ABORT_PACKAGE_INSTALL_MANIFEST'));					return false;				}			}		}		// Clobber any possible pending updates		$update = JTable::getInstance('update');		$uid = $update->find(			array('element' => $this->get('element'), 'type' => 'file', 'client_id' => '', 'folder' => '')		);		if ($uid)		{			$update->delete($uid);		}		// And now we run the postflight		ob_start();		ob_implicit_flush(false);		if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'postflight'))		{			$this->parent->manifestClass->postflight($this->route, $this);		}		// Append messages		$msg .= ob_get_contents();		ob_end_clean();		if ($msg != '')		{			$this->parent->set('extension_message', $msg);		}		return $row->get('extension_id');	}	/**	 * Custom update method	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function update()	{		// Set the overwrite setting		$this->parent->setOverwrite(true);		$this->parent->setUpgrade(true);		$this->route = 'update';		// ...and adds new files		return $this->install();	}	/**	 * Custom uninstall method	 *	 * @param   string  $id  The id of the file to uninstall	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function uninstall($id)	{		$row = JTable::getInstance('extension');		if (!$row->load($id))		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_LOAD_ENTRY'), JLog::WARNING, 'jerror');			return false;		}		if ($row->protected)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_WARNCOREFILE'), JLog::WARNING, 'jerror');			return false;		}		$retval = true;		$manifestFile = JPATH_MANIFESTS . '/files/' . $row->element . '.xml';		// Because files may not have their own folders we cannot use the standard method of finding an installation manifest		if (file_exists($manifestFile))		{			// Set the files root path			$this->parent->setPath('extension_root', JPATH_MANIFESTS . '/files/' . $row->element);			$xml = simplexml_load_file($manifestFile);			// If we cannot load the XML file return null			if (!$xml)			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_LOAD_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			// Check for a valid XML root tag.			if ($xml->getName() != 'extension')			{				JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_INVALID_MANIFEST'), JLog::WARNING, 'jerror');				return false;			}			$this->manifest = $xml;			// If there is an manifest class file, let's load it			$this->scriptElement = $this->manifest->scriptfile;			$manifestScript = (string) $this->manifest->scriptfile;			if ($manifestScript)			{				$manifestScriptFile = $this->parent->getPath('extension_root') . '/' . $manifestScript;				if (is_file($manifestScriptFile))				{					// Load the file					include_once $manifestScriptFile;				}				// Set the class name				$classname = $row->element . 'InstallerScript';				if (class_exists($classname))				{					// Create a new instance					$this->parent->manifestClass = new $classname($this);					// And set this so we can copy it later					$this->set('manifest_script', $manifestScript);				}			}			ob_start();			ob_implicit_flush(false);			// Run uninstall if possible			if ($this->parent->manifestClass && method_exists($this->parent->manifestClass, 'uninstall'))			{				$this->parent->manifestClass->uninstall($this);			}			$msg = ob_get_contents();			ob_end_clean();			if ($msg != '')			{				$this->parent->set('extension_message', $msg);			}			$db = JFactory::getDbo();			// Let's run the uninstall queries for the extension			$result = $this->parent->parseSQLFiles($this->manifest->uninstall->sql);			if ($result === false)			{				// Install failed, rollback changes				JLog::add(JText::sprintf('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_SQL_ERROR', $db->stderr(true)), JLog::WARNING, 'jerror');				$retval = false;			}			// Remove the schema version			$query = $db->getQuery(true)				->delete('#__schemas')				->where('extension_id = ' . $row->extension_id);			$db->setQuery($query);			$db->execute();			// Loop through all elements and get list of files and folders			foreach ($xml->fileset->files as $eFiles)			{				$folder = (string) $eFiles->attributes()->folder;				$target = (string) $eFiles->attributes()->target;				// Create folder path				if (empty($target))				{					$targetFolder = JPATH_ROOT;				}				else				{					$targetFolder = JPATH_ROOT . '/' . $target;				}				$folderList = array();				// Check if all children exists				if (count($eFiles->children()) > 0)				{					// Loop through all filenames elements					foreach ($eFiles->children() as $eFileName)					{						if ($eFileName->getName() == 'folder')						{							$folderList[] = $targetFolder . '/' . $eFileName;						}						else						{							$fileName = $targetFolder . '/' . $eFileName;							JFile::delete($fileName);						}					}				}				// Delete any folders that don't have any content in them.				foreach ($folderList as $folder)				{					$files = JFolder::files($folder);					if (!count($files))					{						JFolder::delete($folder);					}				}			}			JFile::delete($manifestFile);			// Lastly, remove the extension_root			$folder = $this->parent->getPath('extension_root');			if (JFolder::exists($folder))			{				JFolder::delete($folder);			}		}		else		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_FILE_UNINSTALL_INVALID_NOTFOUND_MANIFEST'), JLog::WARNING, 'jerror');			// Delete the row because its broken			$row->delete();			return false;		}		$this->parent->removeFiles($xml->languages);		$row->delete();		return $retval;	}	/**	 * Function used to check if extension is already installed	 *	 * @param   string  $extension  The element name of the extension to install	 *	 * @return  boolean  True if extension exists	 *	 * @since   3.1	 */	protected function extensionExistsInSystem($extension = null)	{		// Get a database connector object		$db = $this->parent->getDBO();		$query = $db->getQuery(true)			->select($db->quoteName('extension_id'))			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' . $db->quote('file'))			->where($db->quoteName('element') . ' = ' . $db->quote($extension));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			// Install failed, roll back changes			$this->parent->abort(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_ROLLBACK', $db->stderr(true)));			return false;		}		$id = $db->loadResult();		if (empty($id))		{			return false;		}		return true;	}	/**	 * Function used to populate files and folder list	 *	 * @return  boolean  none	 *	 * @since   3.1	 */	protected function populateFilesAndFolderList()	{		// Initialise variable		$this->folderList = array();		$this->fileList = array();		// Set root folder names		$packagePath = $this->parent->getPath('source');		$jRootPath = JPath::clean(JPATH_ROOT);		// Loop through all elements and get list of files and folders		foreach ($this->manifest->fileset->files as $eFiles)		{			// Check if the element is files element			$folder = (string) $eFiles->attributes()->folder;			$target = (string) $eFiles->attributes()->target;			// Split folder names into array to get folder names. This will help in creating folders			$arrList = preg_split("#/|\\/#", $target);			$folderName = $jRootPath;			foreach ($arrList as $dir)			{				if (empty($dir))				{					continue;				}				$folderName .= '/' . $dir;				// Check if folder exists, if not then add to the array for folder creation				if (!JFolder::exists($folderName))				{					array_push($this->folderList, $folderName);				}			}			// Create folder path			$sourceFolder = empty($folder) ? $packagePath : $packagePath . '/' . $folder;			$targetFolder = empty($target) ? $jRootPath : $jRootPath . '/' . $target;			// Check if source folder exists			if (!JFolder::exists($sourceFolder))			{				JLog::add(JText::sprintf('JLIB_INSTALLER_ABORT_FILE_INSTALL_FAIL_SOURCE_DIRECTORY', $sourceFolder), JLog::WARNING, 'jerror');				// If installation fails, rollback				$this->parent->abort();				return false;			}			// Check if all children exists			if (count($eFiles->children()))			{				// Loop through all filenames elements				foreach ($eFiles->children() as $eFileName)				{					$path['src'] = $sourceFolder . '/' . $eFileName;					$path['dest'] = $targetFolder . '/' . $eFileName;					$path['type'] = 'file';					if ($eFileName->getName() == 'folder')					{						$folderName = $targetFolder . '/' . $eFileName;						array_push($this->folderList, $folderName);						$path['type'] = 'folder';					}					array_push($this->fileList, $path);				}			}			else			{				$files = JFolder::files($sourceFolder);				foreach ($files as $file)				{					$path['src'] = $sourceFolder . '/' . $file;					$path['dest'] = $targetFolder . '/' . $file;					array_push($this->fileList, $path);				}			}		}	}	/**	 * Refreshes the extension table cache	 *	 * @return  boolean result of operation, true if updated, false on failure	 *	 * @since   3.1	 */	public function refreshManifestCache()	{		// Need to find to find where the XML file is since we don't store this normally		$manifestPath = JPATH_MANIFESTS . '/files/' . $this->parent->extension->element . '.xml';		$this->parent->manifest = $this->parent->isManifest($manifestPath);		$this->parent->setPath('manifest', $manifestPath);		$manifest_details = JInstaller::parseXMLInstallFile($this->parent->getPath('manifest'));		$this->parent->extension->manifest_cache = json_encode($manifest_details);		$this->parent->extension->name = $manifest_details['name'];		try		{			return $this->parent->extension->store();		}		catch (RuntimeException $e)		{			JLog::add(JText::_('JLIB_INSTALLER_ERROR_PACK_REFRESH_MANIFEST_CACHE'), JLog::WARNING, 'jerror');			return false;		}	}}/** * Deprecated class placeholder. You should use JInstallerAdapterFile instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JInstallerFile extends JInstallerAdapterFile{}
<?php/** * @package     Joomla.Plugin * @subpackage  Finder.Newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';/** * Finder adapter for Joomla Newsfeeds. * * @package     Joomla.Plugin * @subpackage  Finder.Newsfeeds * @since       2.5 */class PlgFinderNewsfeeds extends FinderIndexerAdapter{	/**	 * The plugin identifier.	 *	 * @var    string	 * @since  2.5	 */	protected $context = 'Newsfeeds';	/**	 * The extension name.	 *	 * @var    string	 * @since  2.5	 */	protected $extension = 'com_newsfeeds';	/**	 * The sublayout to use when rendering the results.	 *	 * @var    string	 * @since  2.5	 */	protected $layout = 'newsfeed';	/**	 * The type of content that the adapter indexes.	 *	 * @var    string	 * @since  2.5	 */	protected $type_title = 'News Feed';	/**	 * The table name.	 *	 * @var    string	 * @since  2.5	 */	protected $table = '#__newsfeeds';	/**	 * The field the published state is stored in.	 *	 * @var    string	 * @since  2.5	 */	protected $state_field = 'published';	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Method to update the item link information when the item category is	 * changed. This is fired when the item category is published or unpublished	 * from the list view.	 *	 * @param   string   $extension  The extension whose category has been updated.	 * @param   array    $pks        A list of primary key ids of the content that has changed state.	 * @param   integer  $value      The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderCategoryChangeState($extension, $pks, $value)	{		// Make sure we're handling com_newsfeeds categories		if ($extension == 'com_newsfeeds')		{			$this->categoryStateChange($pks, $value);		}	}	/**	 * Method to remove the link information for items that have been deleted.	 *	 * @param   string  $context  The context of the action being performed.	 * @param   JTable  $table    A JTable object containing the record to be deleted	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterDelete($context, $table)	{		if ($context == 'com_newsfeeds.newsfeed')		{			$id = $table->id;		}		elseif ($context == 'com_finder.index')		{			$id = $table->link_id;		}		else		{			return true;		}		// Remove the items.		return $this->remove($id);	}	/**	 * Method to determine if the access level of an item changed.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row      A JTable object	 * @param   boolean  $isNew    If the content has just been created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderAfterSave($context, $row, $isNew)	{		// We only want to handle news feeds here		if ($context == 'com_newsfeeds.newsfeed')		{			// Check if the access levels are different			if (!$isNew && $this->old_access != $row->access)			{				// Process the change.				$this->itemAccessChange($row);			}			// Reindex the item			$this->reindex($row->id);		}		// Check for access changes in the category		if ($context == 'com_categories.category')		{			// Check if the access levels are different			if (!$isNew && $this->old_cataccess != $row->access)			{				$this->categoryAccessChange($row);			}		}		return true;	}	/**	 * Method to reindex the link information for an item that has been saved.	 * This event is fired before the data is actually saved so we are going	 * to queue the item to be indexed later.	 *	 * @param   string   $context  The context of the content passed to the plugin.	 * @param   JTable   $row     A JTable object	 * @param   boolean  $isNew    If the content is just about to be created	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public function onFinderBeforeSave($context, $row, $isNew)	{		// We only want to handle news feeds here		if ($context == 'com_newsfeeds.newsfeed')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkItemAccess($row);			}		}		// Check for access levels from the category		if ($context == 'com_categories.category')		{			// Query the database for the old access level if the item isn't new			if (!$isNew)			{				$this->checkCategoryAccess($row);			}		}		return true;	}	/**	 * Method to update the link information for items that have been changed	 * from outside the edit screen. This is fired when the item is published,	 * unpublished, archived, or unarchived from the list view.	 *	 * @param   string   $context  The context for the content passed to the plugin.	 * @param   array    $pks      A list of primary key ids of the content that has changed state.	 * @param   integer  $value    The value of the state that the content has been changed to.	 *	 * @return  void	 *	 * @since   2.5	 */	public function onFinderChangeState($context, $pks, $value)	{		// We only want to handle news feeds here		if ($context == 'com_newsfeeds.newsfeed')		{			$this->itemStateChange($pks, $value);		}		// Handle when the plugin is disabled		if ($context == 'com_plugins.plugin' && $value === 0)		{			$this->pluginDisable($pks);		}	}	/**	 * Method to index an item. The item must be a FinderIndexerResult object.	 *	 * @param   FinderIndexerResult  $item    The item to index as an FinderIndexerResult object.	 * @param   string               $format  The item format	 *	 * @return  void	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	protected function index(FinderIndexerResult $item, $format = 'html')	{		// Check if the extension is enabled		if (JComponentHelper::isEnabled($this->extension) == false)		{			return;		}		$item->setLanguage();		// Initialize the item parameters.		$registry = new JRegistry;		$registry->loadString($item->params);		$item->params = $registry;		$registry = new JRegistry;		$registry->loadString($item->metadata);		$item->metadata = $registry;		// Build the necessary route and path information.		$item->url = $this->getURL($item->id, $this->extension, $this->layout);		$item->route = NewsfeedsHelperRoute::getNewsfeedRoute($item->slug, $item->catslug);		$item->path = FinderIndexerHelper::getContentPath($item->route);		/*		 * Add the meta-data processing instructions based on the newsfeeds		 * configuration parameters.		 */		// Add the meta-author.		$item->metaauthor = $item->metadata->get('author');		// Handle the link to the meta-data.		$item->addInstruction(FinderIndexer::META_CONTEXT, 'link');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');		$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');		// Add the type taxonomy data.		$item->addTaxonomy('Type', 'News Feed');		// Add the category taxonomy data.		$item->addTaxonomy('Category', $item->category, $item->cat_state, $item->cat_access);		// Add the language taxonomy data.		$item->addTaxonomy('Language', $item->language);		// Get content extras.		FinderIndexerHelper::getContentExtras($item);		// Index the item.		$this->indexer->index($item);	}	/**	 * Method to setup the indexer to be run.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	protected function setup()	{		// Load dependent classes.		require_once JPATH_SITE . '/components/com_newsfeeds/helpers/route.php';		return true;	}	/**	 * Method to get the SQL query used to retrieve the list of content items.	 *	 * @param   mixed  $query  A JDatabaseQuery object or null.	 *	 * @return  JDatabaseQuery  A database object.	 *	 * @since   2.5	 */	protected function getListQuery($query = null)	{		$db = JFactory::getDbo();		// Check if we can use the supplied SQL query.		$query = $query instanceof JDatabaseQuery ? $query : $db->getQuery(true)			->select('a.id, a.catid, a.name AS title, a.alias, a.link AS link')			->select('a.published AS state, a.ordering, a.created AS start_date, a.params, a.access')			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')			->select('a.metakey, a.metadesc, a.metadata, a.language')			->select('a.created_by, a.created_by_alias, a.modified, a.modified_by')			->select('c.title AS category, c.published AS cat_state, c.access AS cat_access');		// Handle the alias CASE WHEN portion of the query		$case_when_item_alias = ' CASE WHEN ';		$case_when_item_alias .= $query->charLength('a.alias', '!=', '0');		$case_when_item_alias .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when_item_alias .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when_item_alias .= ' ELSE ';		$case_when_item_alias .= $a_id.' END as slug';		$query->select($case_when_item_alias);		$case_when_category_alias = ' CASE WHEN ';		$case_when_category_alias .= $query->charLength('c.alias', '!=', '0');		$case_when_category_alias .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when_category_alias .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when_category_alias .= ' ELSE ';		$case_when_category_alias .= $c_id.' END as catslug';		$query->select($case_when_category_alias)			->from('#__newsfeeds AS a')			->join('LEFT', '#__categories AS c ON c.id = a.catid');		return $query;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Build the route for the com_content component * * @return  array  An array of URL arguments * @return  array  The URL arguments to use to assemble the subsequent URL. * @since    1.5 */function ContentBuildRoute(&$query){	$segments = array();	// get a menu item based on Itemid or currently active	$app = JFactory::getApplication();	$menu = $app->getMenu();	$params = JComponentHelper::getParams('com_content');	$advanced = $params->get('sef_advanced_link', 0);	// we need a menu item.  Either the one specified in the query, or the current active one if none specified	if (empty($query['Itemid']))	{		$menuItem = $menu->getActive();		$menuItemGiven = false;	}	else	{		$menuItem = $menu->getItem($query['Itemid']);		$menuItemGiven = true;	}	// check again	if ($menuItemGiven && isset($menuItem) && $menuItem->component != 'com_content')	{		$menuItemGiven = false;		unset($query['Itemid']);	}	if (isset($query['view']))	{		$view = $query['view'];	}	else	{		// we need to have a view in the query or it is an invalid URL		return $segments;	}	// are we dealing with an article or category that is attached to a menu item?	if (($menuItem instanceof stdClass) && $menuItem->query['view'] == $query['view'] && isset($query['id']) && $menuItem->query['id'] == (int) $query['id'])	{		unset($query['view']);		if (isset($query['catid']))		{			unset($query['catid']);		}		if (isset($query['layout']))		{			unset($query['layout']);		}		unset($query['id']);		return $segments;	}	if ($view == 'category' || $view == 'article')	{		if (!$menuItemGiven)		{			$segments[] = $view;		}		unset($query['view']);		if ($view == 'article')		{			if (isset($query['id']) && isset($query['catid']) && $query['catid'])			{				$catid = $query['catid'];				// Make sure we have the id and the alias				if (strpos($query['id'], ':') === false)				{					$db = JFactory::getDbo();					$aquery = $db->setQuery(						$db->getQuery(true)							->select('alias')							->from('#__content')							->where('id=' . (int) $query['id'])					);					$alias = $db->loadResult();					$query['id'] = $query['id'] . ':' . $alias;				}			}			else			{				// we should have these two set for this view.  If we don't, it is an error				return $segments;			}		}		else		{			if (isset($query['id']))			{				$catid = $query['id'];			}			else			{				// we should have id set for this view.  If we don't, it is an error				return $segments;			}		}		if ($menuItemGiven && isset($menuItem->query['id']))		{			$mCatid = $menuItem->query['id'];		}		else		{			$mCatid = 0;		}		$categories = JCategories::getInstance('Content');		$category = $categories->get($catid);		if (!$category)		{			// we couldn't find the category we were given.  Bail.			return $segments;		}		$path = array_reverse($category->getPath());		$array = array();		foreach ($path as $id)		{			if ((int) $id == (int) $mCatid)			{				break;			}			list($tmp, $id) = explode(':', $id, 2);			$array[] = $id;		}		$array = array_reverse($array);		if (!$advanced && count($array))		{			$array[0] = (int) $catid . ':' . $array[0];		}		$segments = array_merge($segments, $array);		if ($view == 'article')		{			if ($advanced)			{				list($tmp, $id) = explode(':', $query['id'], 2);			}			else			{				$id = $query['id'];			}			$segments[] = $id;		}		unset($query['id']);		unset($query['catid']);	}	if ($view == 'archive')	{		if (!$menuItemGiven)		{			$segments[] = $view;			unset($query['view']);		}		if (isset($query['year']))		{			if ($menuItemGiven)			{				$segments[] = $query['year'];				unset($query['year']);			}		}		if (isset($query['year']) && isset($query['month']))		{			if ($menuItemGiven)			{				$segments[] = $query['month'];				unset($query['month']);			}		}	}	// if the layout is specified and it is the same as the layout in the menu item, we	// unset it so it doesn't go into the query string.	if (isset($query['layout']))	{		if ($menuItemGiven && isset($menuItem->query['layout']))		{			if ($query['layout'] == $menuItem->query['layout'])			{				unset($query['layout']);			}		}		else		{			if ($query['layout'] == 'default')			{				unset($query['layout']);			}		}	}	return $segments;}/** * Parse the segments of a URL. * * @return  array  The segments of the URL to parse. * * @return  array  The URL attributes to be used by the application. * @since    1.5 */function ContentParseRoute($segments){	$vars = array();	//Get the active menu item.	$app = JFactory::getApplication();	$menu = $app->getMenu();	$item = $menu->getActive();	$params = JComponentHelper::getParams('com_content');	$advanced = $params->get('sef_advanced_link', 0);	$db = JFactory::getDbo();	// Count route segments	$count = count($segments);	// Standard routing for articles.  If we don't pick up an Itemid then we get the view from the segments	// the first segment is the view and the last segment is the id of the article or category.	if (!isset($item))	{		$vars['view'] = $segments[0];		$vars['id'] = $segments[$count - 1];		return $vars;	}	// if there is only one segment, then it points to either an article or a category	// we test it first to see if it is a category.  If the id and alias match a category	// then we assume it is a category.  If they don't we assume it is an article	if ($count == 1)	{		// we check to see if an alias is given.  If not, we assume it is an article		if (strpos($segments[0], ':') === false)		{			$vars['view'] = 'article';			$vars['id'] = (int) $segments[0];			return $vars;		}		list($id, $alias) = explode(':', $segments[0], 2);		// first we check if it is a category		$category = JCategories::getInstance('Content')->get($id);		if ($category && $category->alias == $alias)		{			$vars['view'] = 'category';			$vars['id'] = $id;			return $vars;		}		else		{			$query = 'SELECT alias, catid FROM #__content WHERE id = ' . (int) $id;			$db->setQuery($query);			$article = $db->loadObject();			if ($article)			{				if ($article->alias == $alias)				{					$vars['view'] = 'article';					$vars['catid'] = (int) $article->catid;					$vars['id'] = (int) $id;					return $vars;				}			}		}	}	// if there was more than one segment, then we can determine where the URL points to	// because the first segment will have the target category id prepended to it.  If the	// last segment has a number prepended, it is an article, otherwise, it is a category.	if (!$advanced)	{		$cat_id = (int) $segments[0];		$article_id = (int) $segments[$count - 1];		if ($article_id > 0)		{			$vars['view'] = 'article';			$vars['catid'] = $cat_id;			$vars['id'] = $article_id;		}		else		{			$vars['view'] = 'category';			$vars['id'] = $cat_id;		}		return $vars;	}	// we get the category id from the menu item and search from there	$id = $item->query['id'];	$category = JCategories::getInstance('Content')->get($id);	if (!$category)	{		JError::raiseError(404, JText::_('COM_CONTENT_ERROR_PARENT_CATEGORY_NOT_FOUND'));		return $vars;	}	$categories = $category->getChildren();	$vars['catid'] = $id;	$vars['id'] = $id;	$found = 0;	foreach ($segments as $segment)	{		$segment = str_replace(':', '-', $segment);		foreach ($categories as $category)		{			if ($category->alias == $segment)			{				$vars['id'] = $category->id;				$vars['catid'] = $category->id;				$vars['view'] = 'category';				$categories = $category->getChildren();				$found = 1;				break;			}		}		if ($found == 0)		{			if ($advanced)			{				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->select($db->quoteName('id'))					->from('#__content')					->where($db->quoteName('catid') . ' = ' . (int) $vars['catid'])					->where($db->quoteName('alias') . ' = ' . $db->quote($db->quote($segment)));				$db->setQuery($query);				$cid = $db->loadResult();			}			else			{				$cid = $segment;			}			$vars['id'] = $cid;			if ($item->query['view'] == 'archive' && $count != 1)			{				$vars['year'] = $count >= 2 ? $segments[$count - 2] : null;				$vars['month'] = $segments[$count - 1];				$vars['view'] = 'archive';			}			else			{				$vars['view'] = 'article';			}		}		$found = 0;	}	return $vars;}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?><div id="sidebar">	<div class="sidebar-nav">		<?php if ($displayData->displayMenu) : ?>		<ul id="submenu" class="nav nav-list">			<?php foreach ($displayData->list as $item) :			if (isset ($item[2]) && $item[2] == 1) : ?>				<li class="active">			<?php else : ?>				<li>			<?php endif;			if ($displayData->hide) : ?>				<a class="nolink"><?php echo $item[0]; ?>			<?php else :				if (strlen($item[1])) : ?>					<a href="<?php echo JFilterOutput::ampReplace($item[1]); ?>"><?php echo $item[0]; ?></a>				<?php else : ?>					<?php echo $item[0]; ?>				<?php endif;			endif; ?>			</li>			<?php endforeach; ?>		</ul>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');require_once __DIR__ . '/../../helpers/banners.php';/** * Bannerclient Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldBannerClient extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'BannerClient';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	public function getOptions()	{		return BannersHelper::getClientOptions();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.updater.updateadapter');/** * Collection Update Adapter Class * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 */class JUpdaterCollection extends JUpdateAdapter{	/**	 * Root of the tree	 *	 * @var    object	 * @since  11.1	 */	protected $base;	/**	 * Tree of objects	 *	 * @var    array	 * @since  11.1	 */	protected $parent = array(0);	/**	 * Used to control if an item has a child or not	 *	 * @var    boolean	 * @since  11.1	 */	protected $pop_parent = 0;	/**	 * @var array A list of discovered update sites	 */	protected $update_sites;	/**	 * A list of discovered updates	 *	 * @var array	 */	protected $updates;	/**	 * Gets the reference to the current direct parent	 *	 * @return  object	 *	 * @since   11.1	 */	protected function _getStackLocation()	{		return implode('->', $this->stack);	}	/**	 * Get the parent tag	 *	 * @return  string   parent	 *	 * @since   11.1	 */	protected function _getParent()	{		return end($this->parent);	}	/**	 * Opening an XML element	 *	 * @param   object  $parser  Parser object	 * @param   string  $name    Name of element that is opened	 * @param   array   $attrs   Array of attributes for the element	 *	 * @return  void	 *	 * @since   11.1	 */	public function _startElement($parser, $name, $attrs = array())	{		array_push($this->stack, $name);		$tag = $this->_getStackLocation();		// Reset the data		if (isset($this->$tag))		{			$this->$tag->_data = "";		}		switch ($name)		{			case 'CATEGORY':				if (isset($attrs['REF']))				{					$this->update_sites[] = array('type' => 'collection', 'location' => $attrs['REF'], 'update_site_id' => $this->updateSiteId);				}				else				{					// This item will have children, so prepare to attach them					$this->pop_parent = 1;				}				break;			case 'EXTENSION':				$update = JTable::getInstance('update');				$update->set('update_site_id', $this->updateSiteId);				foreach ($this->updatecols as $col)				{					// Reset the values if it doesn't exist					if (!array_key_exists($col, $attrs))					{						$attrs[$col] = '';						if ($col == 'CLIENT')						{							$attrs[$col] = 'site';						}					}				}				$client = JApplicationHelper::getClientInfo($attrs['CLIENT'], 1);				if (isset($client->id))				{					$attrs['CLIENT_ID'] = $client->id;				}				// Lower case all of the fields				foreach ($attrs as $key => $attr)				{					$values[strtolower($key)] = $attr;				}				// Only add the update if it is on the same platform and release as we are				$ver = new JVersion;				// Lower case and remove the exclamation mark				$product = strtolower(JFilterInput::getInstance()->clean($ver->PRODUCT, 'cmd'));				/*				 * Set defaults, the extension file should clarify in case but it may be only available in one version				 * This allows an update site to specify a targetplatform				 * targetplatformversion can be a regexp, so 1.[56] would be valid for an extension that supports 1.5 and 1.6				 * Note: Whilst the version is a regexp here, the targetplatform is not (new extension per platform)				 * Additionally, the version is a regexp here and it may also be in an extension file if the extension is				 * compatible against multiple versions of the same platform (e.g. a library)				 */				if (!isset($values['targetplatform']))				{					$values['targetplatform'] = $product;				}				// Set this to ourself as a default				if (!isset($values['targetplatformversion']))				{					$values['targetplatformversion'] = $ver->RELEASE;				}				// Set this to ourself as a default				// validate that we can install the extension				if ($product == $values['targetplatform'] && preg_match('/' . $values['targetplatformversion'] . '/', $ver->RELEASE))				{					$update->bind($values);					$this->updates[] = $update;				}				break;		}	}	/**	 * Closing an XML element	 * Note: This is a protected function though has to be exposed externally as a callback	 *	 * @param   object  $parser  Parser object	 * @param   string  $name    Name of the element closing	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _endElement($parser, $name)	{		array_pop($this->stack);		switch ($name)		{			case 'CATEGORY':				if ($this->pop_parent)				{					$this->pop_parent = 0;					array_pop($this->parent);				}				break;		}	}	// Note: we don't care about char data in collection because there should be none	/**	 * Finds an update	 *	 * @param   array  $options  Options to use: update_site_id: the unique ID of the update site to look at	 *	 * @return  array  Update_sites and updates discovered	 *	 * @since   11.1	 */	public function findUpdate($options)	{		$url = $options['location'];		$this->updateSiteId = $options['update_site_id'];		if (substr($url, -4) != '.xml')		{			if (substr($url, -1) != '/')			{				$url .= '/';			}			$url .= 'update.xml';		}		$this->base = new stdClass;		$this->update_sites = array();		$this->updates = array();		$db = $this->parent->getDBO();		$http = JHttpFactory::getHttp();		$response = $http->get($url);		if (200 != $response->code)		{			$query = $db->getQuery(true)				->update('#__update_sites')				->set('enabled = 0')				->where('update_site_id = ' . $this->updateSiteId);			$db->setQuery($query);			$db->execute();			JLog::add("Error parsing url: " . $url, JLog::WARNING, 'updater');			$app = JFactory::getApplication();			$app->enqueueMessage(JText::sprintf('JLIB_UPDATER_ERROR_COLLECTION_OPEN_URL', $url), 'warning');			return false;		}		$this->xmlParser = xml_parser_create('');		xml_set_object($this->xmlParser, $this);		xml_set_element_handler($this->xmlParser, '_startElement', '_endElement');		if (!xml_parse($this->xmlParser, $response->body))		{			JLog::add("Error parsing url: " . $url, JLog::WARNING, 'updater');			$app = JFactory::getApplication();			$app->enqueueMessage(JText::sprintf('JLIB_UPDATER_ERROR_COLLECTION_PARSE_URL', $url), 'warning');			return false;		}		// TODO: Decrement the bad counter if non-zero		return array('update_sites' => $this->update_sites, 'updates' => $this->updates);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * * Provides a pop up date picker linked to a button. * Optionally may be filtered to use user's or server's time zone. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldCalendar extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Calendar';	/**	 * Method to get the field input markup.	 *	 * @return  string   The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$format = $this->element['format'] ? (string) $this->element['format'] : '%Y-%m-%d';		// Build the attributes array.		$attributes = array();		if ($this->element['size'])		{			$attributes['size'] = (int) $this->element['size'];		}		if ($this->element['maxlength'])		{			$attributes['maxlength'] = (int) $this->element['maxlength'];		}		if ($this->element['class'])		{			$attributes['class'] = (string) $this->element['class'];		}		if ((string) $this->element['readonly'] == 'true')		{			$attributes['readonly'] = 'readonly';		}		if ((string) $this->element['disabled'] == 'true')		{			$attributes['disabled'] = 'disabled';		}		if ($this->element['onchange'])		{			$attributes['onchange'] = (string) $this->element['onchange'];		}		if ($this->required)		{			$attributes['required'] = 'required';			$attributes['aria-required'] = 'true';		}		// Handle the special case for "now".		if (strtoupper($this->value) == 'NOW')		{			$this->value = strftime($format);		}		// Get some system objects.		$config = JFactory::getConfig();		$user = JFactory::getUser();		// If a known filter is given use it.		switch (strtoupper((string) $this->element['filter']))		{			case 'SERVER_UTC':				// Convert a date to UTC based on the server timezone.				if ((int) $this->value)				{					// Get a date object based on the correct timezone.					$date = JFactory::getDate($this->value, 'UTC');					$date->setTimezone(new DateTimeZone($config->get('offset')));					// Transform the date string.					$this->value = $date->format('Y-m-d H:i:s', true, false);				}				break;			case 'USER_UTC':				// Convert a date to UTC based on the user timezone.				if ((int) $this->value)				{					// Get a date object based on the correct timezone.					$date = JFactory::getDate($this->value, 'UTC');					$date->setTimezone(new DateTimeZone($user->getParam('timezone', $config->get('offset'))));					// Transform the date string.					$this->value = $date->format('Y-m-d H:i:s', true, false);				}				break;		}		return JHtml::_('calendar', $this->value, $this->name, $this->id, $format, $attributes);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();if ($app->isSite()){	JSession::checkToken('get') or die(JText::_('JINVALID_TOKEN'));}require_once JPATH_ROOT . '/components/com_content/helpers/route.php';JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');$function  = $app->input->getCmd('function', 'jSelectArticle');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_content&view=articles&layout=modal&tmpl=component&function='.$function.'&'.JSession::getFormToken().'=1');?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<fieldset class="filter clearfix">		<div class="btn-toolbar">			<div class="btn-group pull-left">				<label for="filter_search">					<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>				</label>			</div>			<div class="btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>">					<span class="icon-search"></span><?php echo '&#160;' . JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>				<button type="button" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();">					<span class="icon-remove"></span><?php echo '&#160;' . JText::_('JSEARCH_FILTER_CLEAR'); ?></button>			</div>			<?php if ($app->isAdmin()) : ?>				<input onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('0', '<?php echo $this->escape(addslashes(JText::_('COM_CONTENT_SELECT_AN_ARTICLE'))); ?>', null, null);" class="btn" type="button" value="<?php echo JText::_('COM_CONTENT_NONE'); ?>" />			<?php endif; ?>			<div class="clearfix"></div>		</div>		<hr class="hr-condensed" />		<div class="filters pull-left">			<select name="filter_access" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<select name="filter_published" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content', array('filter.language' => array('*', $this->state->get('filter.forcedLanguage')))), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />			<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<select name="filter_language" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<?php endif; ?>		</div>	</fieldset>	<table class="table table-striped table-condensed">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="center nowrap">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<?php if ($item->language && JLanguageMultilang::isEnabled())			{				$tag = strlen($item->language);				if ($tag == 5)				{					$lang = substr($item->language, 0, 2);				}				elseif ($tag == 6)				{					$lang = substr($item->language, 0, 3);				}				else {					$lang = "";				}			}			elseif (!JLanguageMultilang::isEnabled())			{				$lang = "";			}			?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->title)); ?>', '<?php echo $this->escape($item->catid); ?>', null, '<?php echo $this->escape(ContentHelperRoute::getArticleRoute($item->id, $item->catid, $item->language)); ?>', '<?php echo $this->escape($lang); ?>', null);">						<?php echo $this->escape($item->title); ?></a>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PostgreSQL export driver. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseExporterPostgresql extends JDatabaseExporter{	/**	 * An array of cached data.	 *	 * @var    array	 * @since  12.1	 */	protected $cache = array();	/**	 * The database connector to use for exporting structure and/or data.	 *	 * @var    JDatabaseDriverPostgresql	 * @since  12.1	 */	protected $db = null;	/**	 * An array input sources (table names).	 *	 * @var    array	 * @since  12.1	 */	protected $from = array();	/**	 * The type of output format (xml).	 *	 * @var    string	 * @since  12.1	 */	protected $asFormat = 'xml';	/**	 * An array of options for the exporter.	 *	 * @var    object	 * @since  12.1	 */	protected $options = null;	/**	 * Constructor.	 *	 * Sets up the default options for the exporter.	 *	 * @since   12.1	 */	public function __construct()	{		$this->options = new stdClass;		$this->cache = array('columns' => array(), 'keys' => array());		// Set up the class defaults:		// Export with only structure		$this->withStructure();		// Export as xml.		$this->asXml();		// Default destination is a string using $output = (string) $exporter;	}	/**	 * Magic function to exports the data to a string.	 *	 * @return  string	 *	 * @since   12.1	 * @throws  Exception if an error is encountered.	 */	public function __toString()	{		// Check everything is ok to run first.		$this->check();		$buffer = '';		// Get the format.		switch ($this->asFormat)		{			case 'xml':			default:				$buffer = $this->buildXml();				break;		}		return $buffer;	}	/**	 * Set the output option for the exporter to XML format.	 *	 * @return  JDatabaseExporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 */	public function asXml()	{		$this->asFormat = 'xml';		return $this;	}	/**	 * Builds the XML data for the tables to export.	 *	 * @return  string  An XML string	 *	 * @since   12.1	 * @throws  Exception if an error occurs.	 */	protected function buildXml()	{		$buffer = array();		$buffer[] = '<?xml version="1.0"?>';		$buffer[] = '<postgresqldump xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">';		$buffer[] = ' <database name="">';		$buffer = array_merge($buffer, $this->buildXmlStructure());		$buffer[] = ' </database>';		$buffer[] = '</postgresqldump>';		return implode("\n", $buffer);	}	/**	 * Builds the XML structure to export.	 *	 * @return  array  An array of XML lines (strings).	 *	 * @since   12.1	 * @throws  Exception if an error occurs.	 */	protected function buildXmlStructure()	{		$buffer = array();		foreach ($this->from as $table)		{			// Replace the magic prefix if found.			$table = $this->getGenericTableName($table);			// Get the details columns information.			$fields = $this->db->getTableColumns($table, false);			$keys = $this->db->getTableKeys($table);			$sequences = $this->db->getTableSequences($table);			$buffer[] = '  <table_structure name="' . $table . '">';			foreach ($sequences as $sequence)			{				if (version_compare($this->db->getVersion(), '9.1.0') < 0)				{					$sequence->start_value = null;				}				$buffer[] = '   <sequence Name="' . $sequence->sequence . '" Schema="' . $sequence->schema . '"' .					' Table="' . $sequence->table . '" Column="' . $sequence->column . '" Type="' . $sequence->data_type . '"' .					' Start_Value="' . $sequence->start_value . '" Min_Value="' . $sequence->minimum_value . '"' .					' Max_Value="' . $sequence->maximum_value . '" Increment="' . $sequence->increment . '"' .					' Cycle_option="' . $sequence->cycle_option . '"' .					' />';			}			foreach ($fields as $field)			{				$buffer[] = '   <field Field="' . $field->column_name . '" Type="' . $field->type . '" Null="' . $field->null . '"' .							(isset($field->default) ? ' Default="' . $field->default . '"' : '') . ' Comments="' . $field->comments . '"' .					' />';			}			foreach ($keys as $key)			{				$buffer[] = '   <key Index="' . $key->idxName . '" is_primary="' . $key->isPrimary . '" is_unique="' . $key->isUnique . '"' .					' Query="' . $key->Query . '" />';			}			$buffer[] = '  </table_structure>';		}		return $buffer;	}	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseExporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 *	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverPostgresql))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Get the generic name of the table, converting the database prefix to the wildcard string.	 *	 * @param   string  $table  The name of the table.	 *	 * @return  string  The name of the table with the database prefix replaced with #__.	 *	 * @since   12.1	 */	protected function getGenericTableName($table)	{		// TODO Incorporate into parent class and use $this.		$prefix = $this->db->getPrefix();		// Replace the magic prefix if found.		$table = preg_replace("|^$prefix|", '#__', $table);		return $table;	}	/**	 * Specifies a list of table names to export.	 *	 * @param   mixed  $from  The name of a single table, or an array of the table names to export.	 *	 * @return  JDatabaseExporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 * @throws  Exception if input is not a string or array.	 */	public function from($from)	{		if (is_string($from))		{			$this->from = array($from);		}		elseif (is_array($from))		{			$this->from = $from;		}		else		{			throw new Exception('JPLATFORM_ERROR_INPUT_REQUIRES_STRING_OR_ARRAY');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from PostgreSQL.	 *	 * @param   JDatabaseDriverPostgresql  $db  The database connector.	 *	 * @return  JDatabaseExporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 */	public function setDbo(JDatabaseDriverPostgresql $db)	{		$this->db = $db;		return $this;	}	/**	 * Sets an internal option to export the structure of the input table(s).	 *	 * @param   boolean  $setting  True to export the structure, false to not.	 *	 * @return  JDatabaseExporterPostgresql  Method supports chaining.	 *	 * @since   12.1	 */	public function withStructure($setting = true)	{		$this->options->withStructure = (boolean) $setting;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags table * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsTableTag extends JTableNested{	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct($db)	{		parent::__construct('#__tags', 'id', $db);	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 * to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @see     JTable::bind	 * @since   3.1	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['urls']) && $array['urls'])		{			$registry = new JRegistry;			$registry->loadArray($array['urls']);			$array['urls'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function check()	{		// Check for valid name.		if (trim($this->title) == '')		{			throw new UnexpectedValueException(sprintf('The title is empty'));		}		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ((int) $this->publish_down > 0 && $this->publish_down < $this->publish_up)		{			throw new UnexpectedValueException(sprintf('End publish date is before start publish date.'));		}		// Clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// Only process if not empty			// Define array of characters to remove			$bad_characters = array("\n", "\r", "\"", "<", ">");			// Remove bad characters			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey);			// Create array using commas as delimiter			$keys = explode(',', $after_clean);			$clean_keys = array();			foreach($keys as $key)			{				if (trim($key))				{					// Ignore blank keywords					$clean_keys[] = trim($key);				}			}			// Put array back together delimited by ", "			$this->metakey = implode(", ", $clean_keys);		}		// Clean up description -- eliminate quotes and <> brackets		if (!empty($this->metadesc)) {			// Only process if not empty			$bad_characters = array("\"", "<", ">");			$this->metadesc = JString::str_ireplace($bad_characters, "", $this->metadesc);		}		return true;	}	/**	 * Overriden JTable::store to set modified data and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id) {			// Existing item			$this->modified_time		= $date->toSql();			$this->modified_user_id	= $user->get('id');		}		else		{			// New tag. A tag created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created_time) {				$this->created_time = $date->toSql();			}			if (empty($this->created_user_id)) {				$this->created_user_id = $user->get('id');			}		}		// Verify that the alias is unique		$table = JTable::getInstance('Tag', 'TagsTable');		if ($table->load(array('alias' => $this->alias)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_TAGS_ERROR_UNIQUE_ALIAS'));			return false;		}		return parent::store($updateNulls);	}	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @see     http://docs.joomla.org/JTableNested/delete	 */	public function delete($pk = null, $children = false)	{		return parent::delete($pk, $children);		$helper = new JHelperTags;		$helper->tagDeleteInstances($pk);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewCategory extends JViewLegacy{	public function display($tpl = null)	{		$app       = JFactory::getApplication();		$doc       = JFactory::getDocument();		$params    = $app->getParams();		$feedEmail = $app->getCfg('feed_email', 'author');		$siteEmail = $app->getCfg('mailfrom');		// Get some data from the model		$app->input->set('limit', $app->getCfg('feed_limit'));		$category = $this->get('Category');		$rows     = $this->get('Items');		$doc->link = JRoute::_(ContentHelperRoute::getCategoryRoute($category->id));		foreach ($rows as $row)		{			// Strip html from feed item title			$title = $this->escape($row->title);			$title = html_entity_decode($title, ENT_COMPAT, 'UTF-8');			// Compute the article slug			$row->slug = $row->alias ? ($row->id . ':' . $row->alias) : $row->id;			// Url link to article			$link = JRoute::_(ContentHelperRoute::getArticleRoute($row->slug, $row->catid));			// Get row fulltext			$db = JFactory::getDbo();			$query = 'SELECT' .$db->quoteName('fulltext'). 'FROM #__content WHERE id ='.$row->id;			$db->setQuery($query);			$row->fulltext = $db->loadResult();			// Get description, author and date			$description = ($params->get('feed_summary', 0) ? $row->introtext.$row->fulltext : $row->introtext);			$author = $row->created_by_alias ? $row->created_by_alias : $row->author;			@$date = ($row->publish_up ? date('r', strtotime($row->publish_up)) : '');			// Load individual item creator class			$item           = new JFeedItem;			$item->title    = $title;			$item->link     = $link;			$item->date     = $date;			$item->category = $row->category_title;			$item->author   = $author;			if ($feedEmail == 'site')			{				$item->authorEmail = $siteEmail;			}			elseif ($feedEmail === 'author')			{				$item->authorEmail = $row->author_email;			}			// Add readmore link to description if introtext is shown, show_readmore is true and fulltext exists			if (!$params->get('feed_summary', 0) && $params->get('feed_show_readmore', 0) && $row->fulltext)			{				$description .= '<p class="feed-readmore"><a target="_blank" href ="' . $item->link . '">' . JText::_('COM_CONTENT_FEED_READMORE') . '</a></p>';			}			// Load item description and add div			$item->description	= '<div class="feed-description">'.$description.'</div>';			// Loads item info into rss array			$doc->addItem($item);		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Oracle Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseQueryOracle extends JDatabaseQueryPdo implements JDatabaseQueryPreparable, JDatabaseQueryLimitable{	/**	 * @var integer	 * @since 12.1	 */	protected $limit;	/**	 * @var integer	 * @since 12.1	 */	protected $offset;	/**	 * @var mixed	 * @since 12.1	 */	protected $bounded = array();	/**	 * Method to add a variable to an internal array that will be bound to a prepared SQL statement before query execution. Also	 * removes a variable that has been bounded from the internal bounded array when the passed in value is null.	 *	 * @param   string|integer  $key            The key that will be used in your SQL query to reference the value. Usually of	 *                                          the form ':key', but can also be an integer.	 * @param   mixed           &$value         The value that will be bound. The value is passed by reference to support output	 *                                          parameters such as those possible with stored procedures.	 * @param   integer         $dataType       Constant corresponding to a SQL datatype.	 * @param   integer         $length         The length of the variable. Usually required for OUTPUT parameters.	 * @param   array           $driverOptions  Optional driver options to be used.	 *	 * @return  JDatabaseQuery	 *	 * @since   12.1	 */	public function bind($key = null, &$value = null, $dataType = PDO::PARAM_STR, $length = 0, $driverOptions = array())	{		// Case 1: Empty Key (reset $bounded array)		if (empty($key))		{			$this->bounded = array();			return $this;		}		// Case 2: Key Provided, null value (unset key from $bounded array)		if (is_null($value))		{			if (isset($this->bounded[$key]))			{				unset($this->bounded[$key]);			}			return $this;		}		$obj = new stdClass;		$obj->value = &$value;		$obj->dataType = $dataType;		$obj->length = $length;		$obj->driverOptions = $driverOptions;		// Case 3: Simply add the Key/Value into the bounded array		$this->bounded[$key] = $obj;		return $this;	}	/**	 * Retrieves the bound parameters array when key is null and returns it by reference. If a key is provided then that item is	 * returned.	 *	 * @param   mixed  $key  The bounded variable key to retrieve.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function &getBounded($key = null)	{		if (empty($key))		{			return $this->bounded;		}		else		{			if (isset($this->bounded[$key]))			{				return $this->bounded[$key];			}		}	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function clear($clause = null)	{		switch ($clause)		{			case null:				$this->bounded = array();				break;		}		parent::clear($clause);		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		// Check if we need to mangle the query.		if ($limit || $offset)		{			$query = "SELECT joomla2.*		              FROM (		                  SELECT joomla1.*, ROWNUM AS joomla_db_rownum		                  FROM (		                      " . $query . "		                  ) joomla1		              ) joomla2";			// Check if the limit value is greater than zero.			if ($limit > 0)			{				$query .= ' WHERE joomla2.joomla_db_rownum BETWEEN ' . ($offset + 1) . ' AND ' . ($offset + $limit);			}			else			{				// Check if there is an offset and then use this.				if ($offset)				{					$query .= ' WHERE joomla2.joomla_db_rownum > ' . ($offset + 1);				}			}		}		return $query;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit = (int) $limit;		$this->offset = (int) $offset;		return $this;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.folder');jimport('legacy.application.helper');/** * Database configuration model for the Joomla Core Installer. * * @package  Joomla.Installation * @since    3.1 */class InstallationModelDatabase extends JModelBase{	/**	 * The generated user ID	 *	 * @var    integer	 * @since  3.1	 */	protected static $userId = 0;	/**	 * Generates the user ID	 *	 * @return  integer  The user ID	 *	 * @since   3.1	 */	protected static function generateRandUserId()	{		$session = JFactory::getSession();		$randUserId = $session->get('randUserId');		if (empty($randUserId))		{			// Create the ID for the root user only once and store in session			$randUserId = mt_rand(1, 1000);			$session->set('randUserId', $randUserId);		}		return $randUserId;	}	/**	 * Resets the user ID	 *	 * @return  void	 *	 * @since   3.1	 */	public static function resetRandUserId()	{		self::$userId = 0;		$session = JFactory::getSession();		$session->set('randUserId', self::$userId);	}	/**	 * Retrieves the default user ID and sets it if necessary	 *	 * @return  integer  The user ID	 *	 * @since   3.1	 */	public static function getUserId()	{		if (!self::$userId)		{			self::$userId = self::generateRandUserId();		}		return self::$userId;	}	/**	 * Method to initialise the database	 *	 * @param   array  $options  The options to use for configuration	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function initialise($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Load the back-end language files so that the DB error messages work		$lang = JFactory::getLanguage();		$currentLang = $lang->getTag();		// Load the selected language		if (JLanguage::exists($currentLang, JPATH_ADMINISTRATOR))		{			$lang->load('joomla', JPATH_ADMINISTRATOR, $currentLang, true);		}		// Pre-load en-GB in case the chosen language files do not exist		else		{			$lang->load('joomla', JPATH_ADMINISTRATOR, 'en-GB', true);		}		// Ensure a database type was selected.		if (empty($options->db_type))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_INVALID_TYPE'), 'notice');			return false;		}		// Ensure that a hostname and user name were input.		if (empty($options->db_host) || empty($options->db_user))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_INVALID_DB_DETAILS'), 'notice');			return false;		}		// Ensure that a database name was input.		if (empty($options->db_name))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_EMPTY_NAME'), 'notice');			return false;		}		// Validate database table prefix.		if (!preg_match('#^[a-zA-Z]+[a-zA-Z0-9_]*$#', $options->db_prefix))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_PREFIX_INVALID_CHARS'), 'notice');			return false;		}		// Validate length of database table prefix.		if (strlen($options->db_prefix) > 15)		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_FIX_TOO_LONG'), 'notice');			return false;		}		// Validate length of database name.		if (strlen($options->db_name) > 64)		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_NAME_TOO_LONG'), 'notice');			return false;		}		// Get a database object.		try		{			return InstallationHelperDatabase::getDbo(				$options->db_type, $options->db_host, $options->db_user, $options->db_pass, $options->db_name, $options->db_prefix, $options->db_select			);		}		catch (RuntimeException $e)		{			$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_COULD_NOT_CONNECT', $e->getMessage()), 'notice');			return false;		}	}	/**	 * Method to create a new database.	 *	 * @param   array  $options  The configuration options	 *	 * @return    boolean    True on success.	 *	 * @since    3.1	 */	public function createDatabase($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Disable autoselect database before it's created		$tmpSelect = true;		if (isset($options['db_select']))		{			$tmpSelect = $options['db_select'];		}		$options['db_select'] = false;		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Check database version.		$type = $options->db_type;		try		{			$db_version = $db->getVersion();		}		catch (RuntimeException $e)		{			$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_COULD_NOT_CONNECT', $e->getMessage()), 'notice');			return false;		}		if (!$db->isMinimumVersion())		{			$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_INVALID_' . strtoupper($type) . '_VERSION', $db_version), 'notice');			return false;		}		if (($type == 'mysql') || ($type == 'mysqli'))		{			// @internal MySQL versions pre 5.1.6 forbid . / or \ or NULL			if ((preg_match('#[\\\/\.\0]#', $options->db_name)) && (!version_compare($db_version, '5.1.6', '>=')))			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_INVALID_NAME', $db_version), 'notice');				return false;			}		}		// @internal Check for spaces in beginning or end of name		if (strlen(trim($options->db_name)) <> strlen($options->db_name))		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_NAME_INVALID_SPACES'), 'notice');			return false;		}		// @internal Check for asc(00) Null in name		if (strpos($options->db_name, chr(00)) !== false)		{			$app->enqueueMessage(JText::_('INSTL_DATABASE_NAME_INVALID_CHAR'), 'notice');			return false;		}		// PostgreSQL database older than version 9.0.0 needs to run 'CREATE LANGUAGE' to create function.		if (($options->db_type == 'postgresql') && (version_compare($db_version, '9.0.0', '<')))		{			$db->setQuery("CREATE LANGUAGE plpgsql");			$db->execute();		}		// Get database's UTF support		$utfSupport = $db->hasUTFSupport();		// Try to select the database		try		{			$db->select($options->db_name);		}		catch (RuntimeException $e)		{			// If the database could not be selected, attempt to create it and then select it.			if ($this->createDB($db, $options, $utfSupport))			{				$db->select($options->db_name);			}			else			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_CREATE', $options->db_name), 'notice');				return false;			}		}		$options = (array) $options;		// Remove *_errors value		foreach ($options as $i => $option)		{			if (isset($i['1']) && $i['1'] == '*')			{				unset($options[$i]);				break;			}		}		$options = array_merge(array('db_created' => 1), $options);		// Restore autoselect value after database creation		$options['db_select'] = $tmpSelect;		$session = JFactory::getSession();		$session->set('setup.options', $options);		return true;	}	/**	 * Method to process the old database	 *	 * @param   array  $options  The options array	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function handleOldDatabase($options)	{		if (!isset($options['db_created']) || !$options['db_created'])		{			return $this->createDatabase($options);		}		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Set the character set to UTF-8 for pre-existing databases.		$this->setDatabaseCharset($db, $options->db_name);		// Should any old database tables be removed or backed up?		if ($options->db_old == 'remove')		{			// Attempt to delete the old database tables.			if (!$this->deleteDatabase($db, $options->db_prefix))			{				// Message queued by method, simply return				return false;			}		}		else		{			// If the database isn't being deleted, back it up.			if (!$this->backupDatabase($db, $options->db_prefix))			{				return false;			}		}		return true;	}	/**	 * Method to create the database tables	 *	 * @param   array  $options  The options array	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function createTables($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		if (!isset($options['db_created']) || !$options['db_created'])		{			return $this->createDatabase($options);		}		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Check database type.		$type = $options->db_type;		// Set the character set to UTF-8 for pre-existing databases.		$this->setDatabaseCharset($db, $options->db_name);		// Set the appropriate schema script based on UTF-8 support.		if ($type == 'mysqli' || $type == 'mysql')		{			$schema = 'sql/mysql/joomla.sql';		}		elseif ($type == 'sqlsrv' || $type == 'sqlazure')		{			$schema = 'sql/sqlazure/joomla.sql';		}		else		{			$schema = 'sql/' . $type . '/joomla.sql';		}		// Check if the schema is a valid file		if (!is_file($schema))		{			$app->enqueueMessage(JText::sprintf('INSTL_ERROR_DB', JText::_('INSTL_DATABASE_NO_SCHEMA')), 'notice');			return false;		}		// Attempt to import the database schema.		if (!$this->populateDatabase($db, $schema))		{			return false;		}		// Attempt to update the table #__schema.		$pathPart = JPATH_ADMINISTRATOR . '/components/com_admin/sql/updates/';		if ($type == 'mysqli' || $type == 'mysql')		{			$pathPart .= 'mysql/';		}		elseif ($type == 'sqlsrv' || $type == 'sqlazure')		{			$pathPart .= 'sqlazure/';		}		else		{			$pathPart .= $type . '/';		}		$files = JFolder::files($pathPart, '\.sql$');		if (empty($files))		{			$app->enqueueMessage(JText::_('INSTL_ERROR_INITIALISE_SCHEMA'), 'notice');			return false;		}		$version = '';		foreach ($files as $file)		{			if (version_compare($version, JFile::stripExt($file)) < 0)			{				$version = JFile::stripExt($file);			}		}		$query = $db->getQuery(true)			->insert($db->quoteName('#__schemas'))			->columns(				array(					$db->quoteName('extension_id'),					$db->quoteName('version_id')				)			)			->values('700, ' . $db->quote($version));		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			$app->enqueueMessage($e->getMessage(), 'notice');			return false;		}		// Attempt to refresh manifest caches		$query = $db->getQuery(true)			->select('*')			->from('#__extensions');		$db->setQuery($query);		$return = true;		try		{			$extensions = $db->loadObjectList();		}		catch (RuntimeException $e)		{			$app->enqueueMessage($e->getMessage(), 'notice');			$return = false;		}		JFactory::$database = $db;		$installer = JInstaller::getInstance();		foreach ($extensions as $extension)		{			if (!$installer->refreshManifestCache($extension->extension_id))			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_COULD_NOT_REFRESH_MANIFEST_CACHE', $extension->name), 'notice');				return false;			}		}		// Load the localise.sql for translating the data in joomla.sql		if ($type == 'mysqli' || $type == 'mysql')		{			$dblocalise = 'sql/mysql/localise.sql';		}		elseif ($type == 'sqlsrv' || $type == 'sqlazure')		{			$dblocalise = 'sql/sqlazure/localise.sql';		}		else		{			$dblocalise = 'sql/' . $type . '/localise.sql';		}		if (is_file($dblocalise))		{			if (!$this->populateDatabase($db, $dblocalise))			{				return false;			}		}		// Handle default backend language setting. This feature is available for localized versions of Joomla.		$app = JFactory::getApplication();		$languages = $app->getLocaliseAdmin($db);		if (in_array($options->language, $languages['admin']) || in_array($options->language, $languages['site']))		{			// Build the language parameters for the language manager.			$params = array();			// Set default administrator/site language to sample data values:			$params['administrator'] = 'en-GB';			$params['site'] = 'en-GB';			if (in_array($options->language, $languages['admin']))			{				$params['administrator'] = $options->language;			}			if (in_array($options->language, $languages['site']))			{				$params['site'] = $options->language;			}			$params = json_encode($params);			// Update the language settings in the language manager.			$query = $db->getQuery(true)				->update($db->quoteName('#__extensions'))				->set($db->quoteName('params') . ' = ' . $db->quote($params))				->where($db->quoteName('element') . ' = ' . $db->quote('com_languages'));			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$app->enqueueMessage($e->getMessage(), 'notice');				$return = false;			}		}		return $return;	}	/**	 * Method to install the sample data	 *	 * @param   array  $options  The options array	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 */	public function installSampleData($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		if (!isset($options['db_created']) || !$options['db_created'])		{			return $this->createDatabase($options);		}		if (!$db = $this->initialise($options))		{			return false;		}		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Build the path to the sample data file.		$type = $options->db_type;		if ($type == 'mysqli')		{			$type = 'mysql';		}		elseif ($type == 'sqlsrv')		{			$type = 'sqlazure';		}		$data = JPATH_INSTALLATION . '/sql/' . $type . '/' . $options->sample_file;		// Attempt to import the database schema if one is chosen.		if ($options->sample_file != '')		{			if (!file_exists($data))			{				$app->enqueueMessage(JText::sprintf('INSTL_DATABASE_FILE_DOES_NOT_EXIST', $data), 'notice');				return false;			}			elseif (!$this->populateDatabase($db, $data))			{				return false;			}			$this->postInstallSampleData($db);		}		return true;	}	/**	 * Method to update the user id of the sample data content to the new rand user id	 *	 * @param   JDatabaseDriver  $db  Database connector object $db*	 *	 * @return  void	 *	 * @since   3.1	 */	protected function postInstallSampleData($db)	{		// Create the ID for the root user		$userId = self::getUserId();		// Update all created_by field of the tables with the random user id		// categories (created_user_id), contact_details, content, newsfeeds, weblinks		$updates_array = array(			'categories' => 'created_user_id',			'contact_details' => 'created_by',			'content' => 'created_by',			'newsfeeds' => 'created_by',			'weblinks' => 'created_by',		);		foreach ($updates_array as $table => $field)		{			$db->setQuery(				'UPDATE ' . $db->quoteName('#__' . $table) .					' SET ' . $db->quoteName($field) . ' = ' . $db->quote($userId)			);			$db->execute();		}	}	/**	 * Method to backup all tables in a database with a given prefix.	 *	 * @param   JDatabaseDriver  $db      JDatabaseDriver object.	 * @param   string           $prefix  Database table prefix.	 *	 * @return  boolean  True on success.	 *	 * @since    3.1	 */	public function backupDatabase($db, $prefix)	{		$return = true;		$backup = 'bak_' . $prefix;		// Get the tables in the database.		$tables = $db->getTableList();		if ($tables)		{			foreach ($tables as $table)			{				// If the table uses the given prefix, back it up.				if (strpos($table, $prefix) === 0)				{					// Backup table name.					$backupTable = str_replace($prefix, $backup, $table);					// Drop the backup table.					try					{						$db->dropTable($backupTable, true);					}					catch (RuntimeException $e)					{						JFactory::getApplication()->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_BACKINGUP', $e->getMessage()), 'notice');						$return = false;					}					// Rename the current table to the backup table.					try					{						$db->renameTable($table, $backupTable, $backup, $prefix);					}					catch (RuntimeException $e)					{						JFactory::getApplication()->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_BACKINGUP', $e->getMessage()), 'notice');						$return = false;					}				}			}		}		return $return;	}	/**	 * Method to create a new database.	 *	 * @param   JDatabaseDriver  $db       JDatabase object.	 * @param   JObject          $options  JObject coming from "initialise" function to pass user	 *                                     and database name to database driver.	 * @param   boolean          $utf      True if the database supports the UTF-8 character set.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function createDB($db, $options, $utf)	{		// Build the create database query.		try		{			// Run the create database query.			$db->createDatabase($options, $utf);		}		catch (RuntimeException $e)		{			// If an error occurred return false.			return false;		}		return true;	}	/**	 * Method to delete all tables in a database with a given prefix.	 *	 * @param   JDatabaseDriver  $db      JDatabaseDriver object.	 * @param   string           $prefix  Database table prefix.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function deleteDatabase($db, $prefix)	{		$return = true;		// Get the tables in the database.		$tables = $db->getTableList();		if ($tables)		{			foreach ($tables as $table)			{				// If the table uses the given prefix, drop it.				if (strpos($table, $prefix) === 0)				{					// Drop the table.					try					{						$db->dropTable($table);					}					catch (RuntimeException $e)					{						JFactory::getApplication()->enqueueMessage(JText::sprintf('INSTL_DATABASE_ERROR_DELETE', $e->getMessage()), 'notice');						$return = false;					}				}			}		}		return $return;	}	/**	 * Method to import a database schema from a file.	 *	 * @param   JDatabaseDriver  $db      JDatabase object.	 * @param   string           $schema  Path to the schema file.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function populateDatabase($db, $schema)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		$return = true;		// Get the contents of the schema file.		if (!($buffer = file_get_contents($schema)))		{			$app->enqueueMessage($db->getErrorMsg(), 'notice');			return false;		}		// Get an array of queries from the schema and process them.		$queries = $this->_splitQueries($buffer);		foreach ($queries as $query)		{			// Trim any whitespace.			$query = trim($query);			// If the query isn't empty and is not a MySQL or PostgreSQL comment, execute it.			if (!empty($query) && ($query{0} != '#') && ($query{0} != '-'))			{				// Execute the query.				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					$app->enqueueMessage($e->getMessage(), 'notice');					$return = false;				}			}		}		return $return;	}	/**	 * Method to set the database character set to UTF-8.	 *	 * @param   JDatabaseDriver  $db    JDatabaseDriver object.	 * @param   string           $name  Name of the database to process.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 */	public function setDatabaseCharset($db, $name)	{		// Run the create database query.		$db->setQuery($db->getAlterDbCharacterSet($name));		try		{			$db->execute();		}		catch (RuntimeException $e)		{			return false;		}		return true;	}	/**	 * Method to split up queries from a schema file into an array.	 *	 * @param   string  $query  SQL schema.	 *	 * @return  array  Queries to perform.	 *	 * @since   3.1	 */	protected function _splitQueries($query)	{		$buffer = array();		$queries = array();		$in_string = false;		// Trim any whitespace.		$query = trim($query);		// Remove comment lines.		$query = preg_replace("/\n\#[^\n]*/", '', "\n" . $query);		// Remove PostgreSQL comment lines.		$query = preg_replace("/\n\--[^\n]*/", '', "\n" . $query);		// Find function		$funct = explode('CREATE OR REPLACE FUNCTION', $query);		// Save sql before function and parse it		$query = $funct[0];		// Parse the schema file to break up queries.		for ($i = 0; $i < strlen($query) - 1; $i++)		{			if ($query[$i] == ";" && !$in_string)			{				$queries[] = substr($query, 0, $i);				$query = substr($query, $i + 1);				$i = 0;			}			if ($in_string && ($query[$i] == $in_string) && $buffer[1] != "\\")			{				$in_string = false;			}			elseif (!$in_string && ($query[$i] == '"' || $query[$i] == "'") && (!isset ($buffer[0]) || $buffer[0] != "\\"))			{				$in_string = $query[$i];			}			if (isset ($buffer[1]))			{				$buffer[0] = $buffer[1];			}			$buffer[1] = $query[$i];		}		// If the is anything left over, add it to the queries.		if (!empty($query))		{			$queries[] = $query;		}		// Add function part as is		for ($f = 1; $f < count($funct); $f++)		{			$queries[] = 'CREATE OR REPLACE FUNCTION ' . $funct[$f];		}		return $queries;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Registration controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerUser extends UsersController{	/**	 * Method to log in a user.	 *	 * @since   1.6	 */	public function login()	{		JSession::checkToken('post') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		// Populate the data array:		$data = array();		$data['return'] = base64_decode($app->input->post->get('return', '', 'BASE64'));		$data['username'] = JRequest::getVar('username', '', 'method', 'username');		$data['password'] = JRequest::getString('password', '', 'post', JREQUEST_ALLOWRAW);		// Set the return URL if empty.		if (empty($data['return']))		{			$data['return'] = 'index.php?option=com_users&view=profile';		}		// Set the return URL in the user state to allow modification by plugins		$app->setUserState('users.login.form.return', $data['return']);		// Get the log in options.		$options = array();		$options['remember'] = $this->input->getBool('remember', false);		$options['return'] = $data['return'];		// Get the log in credentials.		$credentials = array();		$credentials['username'] = $data['username'];		$credentials['password'] = $data['password'];		// Perform the log in.		if (true === $app->login($credentials, $options))		{			// Success			$app->setUserState('users.login.form.data', array());			$app->redirect(JRoute::_($app->getUserState('users.login.form.return'), false));		}		else		{			// Login failed !			$data['remember'] = (int) $options['remember'];			$app->setUserState('users.login.form.data', $data);			$app->redirect(JRoute::_('index.php?option=com_users&view=login', false));		}	}	/**	 * Method to log out a user.	 *	 * @since   1.6	 */	public function logout()	{		JSession::checkToken('request') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		// Perform the log in.		$error = $app->logout();		// Check if the log out succeeded.		if (!($error instanceof Exception))		{			// Get the return url from the request and validate that it is internal.			$return = JRequest::getVar('return', '', 'method', 'base64');			$return = base64_decode($return);			if (!JURI::isInternal($return))			{				$return = '';			}			// Redirect the user.			$app->redirect(JRoute::_($return, false));		}		else		{			$app->redirect(JRoute::_('index.php?option=com_users&view=login', false));		}	}	/**	 * Method to register a user.	 *	 * @since   1.6	 */	public function register()	{		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		// Get the form data.		$data  = $this->input->post->get('user', array(), 'array');		// Get the model and validate the data.		$model  = $this->getModel('Registration', 'UsersModel');		$return	= $model->validate($data);		// Check for errors.		if ($return === false)		{			// Get the validation messages.			$app	= &JFactory::getApplication();			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'notice');				} else {					$app->enqueueMessage($errors[$i], 'notice');				}			}			// Save the data in the session.			$app->setUserState('users.registration.form.data', $data);			// Redirect back to the registration form.			$this->setRedirect('index.php?option=com_users&view=registration');			return false;		}		// Finish the registration.		$return	= $model->register($data);		// Check for errors.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('users.registration.form.data', $data);			// Redirect back to the registration form.			$message = JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $model->getError());			$this->setRedirect('index.php?option=com_users&view=registration', $message, 'error');			return false;		}		// Flush the data from the session.		$app->setUserState('users.registration.form.data', null);		exit;	}	/**	 * Method to login a user.	 *	 * @since   1.6	 */	public function remind()	{		// Check the request token.		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('User', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Submit the username remind request.		$return	= $model->processRemindRequest($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_REMIND_REQUEST_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=remind'.$itemid;			// Go back to the complete form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// Complete failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getRemindRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=remind'.$itemid;			// Go back to the complete form.			$message = JText::sprintf('COM_USERS_REMIND_REQUEST_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// Complete succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getLoginRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=login'.$itemid;			// Proceed to the login form.			$message = JText::_('COM_USERS_REMIND_REQUEST_SUCCESS');			$this->setRedirect(JRoute::_($route, false), $message);			return true;		}	}	/**	 * Method to login a user.	 *	 * @since   1.6	 */	public function resend()	{		// Check for request forgeries		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('formbehavior.chosen', 'select');$input     = JFactory::getApplication()->input;$field     = $input->getCmd('field');$function  = 'jSelectUser_'.$field;$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=users&layout=modal&tmpl=component&groups=' . $input->get('groups', '', 'BASE64') . '&excluded=' . $input->get('excluded', '', 'BASE64'));?>" method="post" name="adminForm" id="adminForm">	<fieldset class="filter">		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<label for="filter_search" class="element-invisible"><?php echo JText::_('JSEARCH_FILTER'); ?></label>				<input type="text" name="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_IN_NAME'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_IN_NAME'); ?>" />			</div>			<div class="btn-group pull-left hidden-phone">				<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>				<button class="btn tip hasTooltip" type="button" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('', '<?php echo JText::_('JLIB_FORM_SELECT_USER') ?>');"><?php echo JText::_('JOPTION_NO_USER')?></button>			</div>			<div class="btn-group pull-right hidden-phone">				<label for="filter_group_id" class="element-invisible"><?php echo JText::_('COM_USERS_FILTER_USER_GROUP'); ?></label>				<?php echo JHtml::_('access.usergroup', 'filter_group_id', $this->state->get('filter.group_id'), 'onchange="this.form.submit()"'); ?>			</div>		</div>	</fieldset>	<table class="table table-striped table-condensed">		<thead>			<tr>				<th class="left">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_NAME', 'a.name', $listDirn, $listOrder); ?>				</th>				<th class="nowrap" width="25%">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_USERNAME', 'a.username', $listDirn, $listOrder); ?>				</th>				<th class="nowrap" width="25%">					<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_GROUPS', 'group_names', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php			$i = 0;			foreach ($this->items as $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $item->name; ?></a>				</td>				<td align="center">					<?php echo $item->username; ?>				</td>				<td align="left">					<?php echo nl2br($item->group_names); ?>				</td>			</tr>		<?php endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="field" value="<?php echo $this->escape($field); ?>" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Newsfeeds component * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.0 */class NewsfeedsViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $categories;	protected $pagination;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Check whether category access level allows access.		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Prepare the data.		// Compute the newsfeed slug.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			$temp		= new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		$children = array($category->id => $children);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$maxLevel = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $this->category->id) === false)))		{			if ($layout = $category->params->get('category_layout'))		{			$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$this->category->tags = new JHelperTags;		$this->category->tags->getItemTags('com_newsfeeds.category', $this->category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_NEWSFEEDS_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_newsfeeds' || $menu->query['view'] == 'newsfeed' || $id != $this->category->id))		{			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_newsfeeds' || $menu->query['view'] == 'newsfeed' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => NewsfeedsHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Languages View class for the Languages component * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesViewLanguages extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		LanguagesHelper::addSubmenu('languages');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/languages.php';		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_LANGUAGES_TITLE'), 'langmanager.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('language.add');		}		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('language.edit');			JToolbarHelper::divider();		}		if ($canDo->get('core.edit.state'))		{			if ($this->state->get('filter.published') != 2)			{				JToolbarHelper::publishList('languages.publish');				JToolbarHelper::unpublishList('languages.unpublish');			}		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'languages.delete', 'JTOOLBAR_EMPTY_TRASH');			JToolbarHelper::divider();		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('languages.trash');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			// Add install languages link to the lang installer component			$bar = JToolbar::getInstance('toolbar');			$bar->appendButton('Link', 'upload', 'COM_LANGUAGES_INSTALL', 'index.php?option=com_installer&view=languages');			JToolbarHelper::divider();			JToolbarHelper::preferences('com_languages');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_CONTENT');		JHtmlSidebar::setAction('index.php?option=com_languages&view=languages');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Articles list controller class. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentControllerArticles extends JControllerAdmin{	/**	 * Constructor.	 *	 * @param   array  $config	An optional associative array of configuration settings.	 * @return  ContentControllerArticles	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		// Articles default form can come from the articles or featured view.		// Adjust the redirect view on the value of 'view' in the request.		if ($this->input->get('view') == 'featured')		{			$this->view_list = 'featured';		}		$this->registerTask('unfeatured',	'featured');	}	/**	 * Method to toggle the featured setting of a list of articles.	 *	 * @return  void	 * @since   1.6	 */	public function featured()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user   = JFactory::getUser();		$ids    = $this->input->get('cid', array(), 'array');		$values = array('featured' => 1, 'unfeatured' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		// Access checks.		foreach ($ids as $i => $id)		{			if (!$user->authorise('core.edit.state', 'com_content.article.'.(int) $id))			{				// Prune items that you can't change.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Publish the items.			if (!$model->featured($ids, $value))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_content&view=articles');	}	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the PHP class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Article', $prefix = 'ContentModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}	/**	 * Function that allows child controller access to model data	 * after the item has been deleted.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   integer       $ids    The array of ids for items being deleted.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postDeleteHook(JModelLegacy $model, $ids = null)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'newsfeed.cancel' || document.formvalidator.isValid(document.id('newsfeed-form')))		{			Joomla.submitform(task, document.getElementById('newsfeed-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="newsfeed-form" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin Newsfeed -->		<div class="span10 form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_NEWSFEEDS_NEW_NEWSFEED', true) : JText::sprintf('COM_NEWSFEEDS_EDIT_NEWSFEED', $this->item->id, true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('name'); ?></div>				<div class="controls"><?php echo $this->form->getInput('name'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('link'); ?></div>				<div class="controls"><?php echo $this->form->getInput('link'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>				<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('description'); ?></div>				<div class="controls"><?php echo $this->form->getInput('description'); ?></div>			</div>			<div class="span6">				<h4><?php echo JText::_('COM_NEWSFEEDS_FIELDSET_IMAGES');?></h4>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('images'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('images'); ?>					</div>				</div>				<?php foreach ($this->form->getGroup('images') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label">								<?php echo $field->label; ?>							</div>						<?php endif; ?>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>				<div class="controls"><?php echo $this->form->getInput('id'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>			</div>			<?php if ($this->item->modified_by) : ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>				</div>			<?php endif; ?>			<?php if ($this->item->version) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('version'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('version'); ?>					</div>				</div>			<?php endif; ?>			<?php if ($this->item->hits) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('hits'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('hits'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>				<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('numarticles'); ?></div>				<div class="controls"><?php echo $this->form->getInput('numarticles'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('cache_time'); ?></div>				<div class="controls"><?php echo $this->form->getInput('cache_time'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('rtl'); ?></div>				<div class="controls"><?php echo $this->form->getInput('rtl'); ?></div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php $fieldSets = $this->form->getFieldsets('params'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $paramstabs = 'params-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php $fieldSets = $this->form->getFieldsets('metadata'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $metadatatabs = 'metadata-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $metadatatabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('metadata'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php if ($assoc) : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Newsfeed -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_DEBUG_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('debug') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class JFormFieldGroupParent extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.6	 */	protected $type = 'GroupParent';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$db = JFactory::getDbo();		$user = JFactory::getUser();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, COUNT(DISTINCT b.id) AS level')			->from('#__usergroups AS a')			->join('LEFT', $db->quoteName('#__usergroups') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		// Prevent parenting to children of this item.		if ($id = $this->form->getValue('id'))		{			$query->join('LEFT', $db->quoteName('#__usergroups') . ' AS p ON p.id = ' . (int) $id)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');		}		$query->group('a.id, a.title, a.lft, a.rgt')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			// Show groups only if user is super admin or group is not super admin			if ($user->authorise('core.admin') || (!JAccess::checkGroup($options[$i]->value, 'core.admin')))			{				$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;			}			else			{				unset($options[$i]);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Profiler * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class to assist in the process of benchmarking the execution * of sections of code to understand where time is being spent. * * @package     Joomla.Platform * @subpackage  Profiler * @since       11.1 */class JProfiler{	/**	 * @var    integer  The start time.	 * @since  12.1	 */	protected $start = 0;	/**	 * @var    string  The prefix to use in the output	 * @since  12.1	 */	protected $prefix = '';	/**	 * @var    array  The buffer of profiling messages.	 * @since  12.1	 */	protected $buffer = null;	/**	 * @var    float	 * @since  12.1	 */	protected $previousTime = 0.0;	/**	 * @var    float	 * @since  12.1	 */	protected $previousMem = 0.0;	/**	 * @var    array  JProfiler instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   string  $prefix  Prefix for mark messages	 *	 * @since  11.1	 */	public function __construct($prefix = '')	{		$this->start = $this->getmicrotime();		$this->prefix = $prefix;		$this->buffer = array();	}	/**	 * Returns the global Profiler object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $prefix  Prefix used to distinguish profiler objects.	 *	 * @return  JProfiler  The Profiler object.	 *	 * @since   11.1	 */	public static function getInstance($prefix = '')	{		if (empty(self::$instances[$prefix]))		{			self::$instances[$prefix] = new JProfiler($prefix);		}		return self::$instances[$prefix];	}	/**	 * Output a time mark	 *	 * The mark is returned as text enclosed in <div> tags	 * with a CSS class of 'profiler'.	 *	 * @param   string  $label  A label for the time mark	 *	 * @return  string  Mark enclosed in <div> tags	 *	 * @since   11.1	 */	public function mark($label)	{		$current = self::getmicrotime() - $this->start;		$currentMem = 0;		$currentMem = memory_get_usage() / 1048576;		$mark = sprintf(			'<code>%s %.3f seconds (+%.3f); %0.2f MB (%s%0.3f) - %s</code>',			$this->prefix,			$current,			$current - $this->previousTime,			$currentMem,			($currentMem > $this->previousMem) ? '+' : '', $currentMem - $this->previousMem,			$label		);		$this->previousTime = $current;		$this->previousMem = $currentMem;		$this->buffer[] = $mark;		return $mark;	}	/**	 * Get the current time.	 *	 * @return  float The current time	 *	 * @since   11.1	 */	public static function getmicrotime()	{		list ($usec, $sec) = explode(' ', microtime());		return ((float) $usec + (float) $sec);	}	/**	 * Get information about current memory usage.	 *	 * @return  integer  The memory usage	 *	 * @link    PHP_MANUAL#memory_get_usage	 * @since   11.1	 * @deprecated  12.3  Use PHP's native memory_get_usage()	 */	public function getMemory()	{		return memory_get_usage();	}	/**	 * Get all profiler marks.	 *	 * Returns an array of all marks created since the Profiler object	 * was instantiated.  Marks are strings as per {@link JProfiler::mark()}.	 *	 * @return  array  Array of profiler marks	 */	public function getBuffer()	{		return $this->buffer;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Modules component * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewSelect extends JViewLegacy{	protected $state;	protected $items;	/**	 * Display the view	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->state = &$state;		$this->items = &$items;		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   3.0	 */	protected function addToolbar()	{		// Add page title		JToolbarHelper::title(JText::_('COM_MODULES_MANAGER_MODULES'), 'module.png');		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Cancel		$title = JText::_('JTOOLBAR_CANCEL');		$dhtml = "<button onClick=\"location.href='index.php?option=com_modules'\" class=\"btn\">					<i class=\"icon-remove\" title=\"$title\"></i>					$title</button>";		$bar->appendButton('Custom', $dhtml, 'new');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$client    = $this->state->get('filter.client') == 'site' ? JText::_('JSITE') : JText::_('JADMINISTRATOR');$language  = $this->state->get('filter.language');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction')); ?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=overrides'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDES_FILTER_SEARCH_DESC'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_LANGUAGES_VIEW_OVERRIDES_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"></div>		<table class="adminlist">			<thead>				<tr>					<th width="1%">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th width="30%" class="left">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_KEY', 'key', $listDirn, $listOrder); ?>					</th>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_LANGUAGES_VIEW_OVERRIDES_TEXT', 'text', $listDirn, $listOrder); ?>					</th>					<th class="nowrap">						<?php echo JText::_('COM_LANGUAGES_FIELD_LANG_TAG_LABEL'); ?>					</th>					<th>						<?php echo JText::_('JCLIENT'); ?>					</th>					<th class="right" width="20">						<?php echo JText::_('COM_LANGUAGES_HEADING_NUM'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="6">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php $canEdit = JFactory::getUser()->authorise('core.edit', 'com_languages');			$i = 0;			foreach ($this->items as $key => $text) : ?>				<tr class="row<?php echo $i % 2; ?>" id="overriderrow<?php echo $i; ?>">					<td class="center">						<?php echo JHtml::_('grid.id', $i, $key); ?>					</td>					<td>						<?php if ($canEdit) : ?>							<a id="key[<?php echo $this->escape($key); ?>]" href="<?php echo JRoute::_('index.php?option=com_languages&task=override.edit&id='.$key); ?>"><?php echo $this->escape($key); ?></a>						<?php else: ?>							<?php echo $this->escape($key); ?>						<?php endif; ?>					</td>					<td>						<span id="string[<?php	echo $this->escape($key); ?>]"><?php echo $this->escape($text); ?></span>					</td>					<td class="center">						<?php echo $language; ?>					</td>					<td class="center">						<?php echo $client; ?>					</td>					<td class="right">						<?php echo $this->pagination->getRowOffset($i); ?>					</td>				</tr>			<?php $i++;			endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');JHtml::_('bootstrap.tooltip');JHtml::addIncludePath(JPATH_SITE . '/components/com_finder/helpers/html');// Load the smart search component language file.$lang = JFactory::getLanguage();$lang->load('com_finder', JPATH_SITE);$suffix = $params->get('moduleclass_sfx');$output = '<input type="text" name="q" id="mod-finder-searchword" class="search-query input-medium" size="' . $params->get('field_size', 20) . '" value="' . htmlspecialchars(JFactory::getApplication()->input->get('q', '', 'string')) . '" />';$button = '';$label = '';if ($params->get('show_label', 1)){	$label = '<label for="mod-finder-searchword" class="finder' . $suffix . '">' . $params->get('alt_label', JText::_('JSEARCH_FILTER_SUBMIT')) . '</label>';	switch ($params->get('label_pos', 'left')):		case 'top' :			$label = $label . '<br />';			$output = $label . $output;			break;		case 'bottom' :			$label = '<br />' . $label;			$output = $output . $label;			break;		case 'right' :			$output = $output . $label;			break;		case 'left' :		default :			$output = $label . $output;			break;	endswitch;}if ($params->get('show_button', 1)){	$button = '<button class="btn btn-primary hasTooltip ' . $suffix . ' finder' . $suffix . '" type="submit" title="' . JText::_('MOD_FINDER_SEARCH_BUTTON') . '"><i class="icon-search icon-white"></i></button>';	switch ($params->get('button_pos', 'right')):		case 'top' :			$button = $button . '<br />';			$output = $button . $output;			break;		case 'bottom' :			$button = '<br />' . $button;			$output = $output . $button;			break;		case 'right' :			$output = $output . $button;			break;		case 'left' :		default :			$output = $button . $output;			break;	endswitch;}JHtml::stylesheet('com_finder/finder.css', false, true, false);?><script type="text/javascript">//<![CDATA[	window.addEvent('domready', function()	{		var value;		// Set the input value if not already set.		if (!document.id('mod-finder-searchword').getProperty('value'))		{			document.id('mod-finder-searchword').setProperty('value', '<?php echo JText::_('MOD_FINDER_SEARCH_VALUE', true); ?>');		}		// Get the current value.		value = document.id('mod-finder-searchword').getProperty('value');		// If the current value equals the default value, clear it.		document.id('mod-finder-searchword').addEvent('focus', function()		{			if (this.getProperty('value') == '<?php echo JText::_('MOD_FINDER_SEARCH_VALUE', true); ?>')			{				this.setProperty('value', '');			}		});		// If the current value is empty, set the previous value.		document.id('mod-finder-searchword').addEvent('blur', function()		{			if (!this.getProperty('value'))			{				this.setProperty('value', value);			}		});		document.id('mod-finder-searchform').addEvent('submit', function(e){			e = new Event(e);			e.stop();			// Disable select boxes with no value selected.			if (document.id('mod-finder-advanced') != null)			{				document.id('mod-finder-advanced').getElements('select').each(function(s){					if (!s.getProperty('value'))					{						s.setProperty('disabled', 'disabled');					}				});			}			document.id('mod-finder-searchform').submit();		});		/*		 * This segment of code sets up the autocompleter.		 */		<?php if ($params->get('show_autosuggest', 1)) : ?>			<?php JHtml::_('script', 'com_finder/autocompleter.js', false, true); ?>			var url = '<?php echo JRoute::_('index.php?option=com_finder&task=suggestions.display&format=json&tmpl=component', false); ?>';			var ModCompleter = new Autocompleter.Request.JSON(document.id('mod-finder-searchword'), url, {'postVar': 'q'});		<?php endif; ?>	});//]]></script><form id="mod-finder-searchform" action="<?php echo JRoute::_($route); ?>" method="get" class="form-search">	<div class="finder<?php echo $suffix; ?>">		<?php		// Show the form fields.		echo $output;		?>		<?php if ($params->get('show_advanced', 1)) : ?>			<?php if ($params->get('show_advanced', 1) == 2) : ?>				<br />				<a href="<?php echo JRoute::_($route); ?>"><?php echo JText::_('COM_FINDER_ADVANCED_SEARCH'); ?></a>			<?php elseif ($params->get('show_advanced', 1) == 1) : ?>				<div id="mod-finder-advanced">					<?php echo JHtml::_('filter.select', $query, $params); ?>				</div>			<?php endif; ?>		<?php endif; ?>		<?php echo modFinderHelper::getGetFields($route); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><tr class="<?php echo "row".$this->item->index % 2; ?>" <?php echo $this->item->style; ?>>	<td><?php echo $this->pagination->getRowOffset($this->item->index); ?></td>	<td>			<input type="checkbox" id="cb<?php echo $this->item->index;?>" name="eid[]" value="<?php echo $this->item->extension_id; ?>" onclick="Joomla.isChecked(this.checked);" <?php echo $this->item->cbd; ?> /><!--		<input type="checkbox" id="cb<?php echo $this->item->index;?>" name="eid" value="<?php echo $this->item->extension_id; ?>" onclick="Joomla.isChecked(this.checked);" <?php echo $this->item->cbd; ?> />-->		<span class="bold"><?php echo $this->item->name; ?></span>	</td>	<td>		<?php echo $this->item->type ?>	</td>	<td class="center">		<?php if (!$this->item->element) : ?>		<strong>X</strong>		<?php else : ?>		<a href="index.php?option=com_installer&amp;type=manage&amp;task=<?php echo $this->item->task; ?>&amp;eid[]=<?php echo $this->item->extension_id; ?>&amp;limitstart=<?php echo $this->pagination->limitstart; ?>&amp;<?php echo JSession::getFormToken();?>=1"><?php echo JHtml::_('image', 'images/'.$this->item->img, $this->item->alt, array('title' => $this->item->action)); ?></a>		<?php endif; ?>	</td>	<td class="center"><?php echo @$this->item->folder != '' ? $this->item->folder : 'N/A'; ?></td>	<td class="center"><?php echo @$this->item->client != '' ? $this->item->client : 'N/A'; ?></td>	<td>		<span class="editlinktip hasTip" title="<?php echo addslashes(htmlspecialchars(JText::_('COM_INSTALLER_AUTHOR_INFORMATION').'::'.$this->item->author_info)); ?>">			<?php echo @$this->item->author != '' ? $this->item->author : '&#160;'; ?>		</span>	</td></tr>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$params = $this->params;?><div id="archive-items">	<?php foreach ($this->items as $i => $item) : ?>		<?php $info = $item->params->get('info_block_position', 0); ?>		<div class="row<?php echo $i % 2; ?>">			<div class="page-header">				<h2>					<?php if ($params->get('link_titles')) : ?>						<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>"> <?php echo $this->escape($item->title); ?></a>					<?php else: ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>				</h2>				<?php if ($params->get('show_author') && !empty($item->author )) : ?>					<small class="createdby">					<?php $author = $item->author; ?>					<?php $author = ($item->created_by_alias ? $item->created_by_alias : $author); ?>						<?php if (!empty($item->contactid ) && $params->get('link_author') == true) : ?>							<?php echo JText::sprintf(							'COM_CONTENT_WRITTEN_BY',							JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$item->contactid), $author)							); ?>						<?php else :?>							<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>						<?php endif; ?>					</small>				<?php endif; ?>			</div>		<?php $useDefList = ($params->get('show_modify_date') || $params->get('show_publish_date') || $params->get('show_create_date')			|| $params->get('show_hits') || $params->get('show_category') || $params->get('show_parent_category')); ?>		<?php if ($useDefList && ($info == 0 || $info == 2)) : ?>			<div class="article-info muted">				<dl class="article-info">				<dt class="article-info-term">					<?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?>				</dt>				<?php if ($params->get('show_parent_category') && !empty($item->parent_slug)) : ?>					<dd>						<div class="parent-category-name">							<?php	$title = $this->escape($item->parent_title);							$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($item->parent_slug)).'">' . $title . '</a>'; ?>							<?php if ($params->get('link_parent_category') && !empty($item->parent_slug)) : ?>								<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>							<?php else : ?>								<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>							<?php endif; ?>						</div>					</dd>				<?php endif; ?>				<?php if ($params->get('show_category')) : ?>					<dd>						<div class="category-name">							<?php $title = $this->escape($item->category_title);							$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($item->catslug)).'">' . $title . '</a>'; ?>							<?php if ($params->get('link_category') && $item->catslug) : ?>								<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>							<?php else : ?>								<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>							<?php endif; ?>						</div>					</dd>				<?php endif; ?>				<?php if ($params->get('show_publish_date')) : ?>					<dd>						<div class="published">							<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>						</div>					</dd>				<?php endif; ?>				<?php if ($info == 0) : ?>					<?php if ($params->get('show_modify_date')) : ?>						<dd>							<div class="modified">								<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $item->modified, JText::_('DATE_FORMAT_LC3'))); ?>							</div>						</dd>					<?php endif; ?>					<?php if ($params->get('show_create_date')) : ?>						<dd>							<div class="create">								<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC3'))); ?>							</div>						</dd>					<?php endif; ?>					<?php if ($params->get('show_hits')) : ?>						<dd>							<div class="hits">								<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $item->hits); ?>							</div>						</dd>					<?php endif; ?>				<?php endif; ?>				</dl>			</div>		<?php endif; ?>		<?php if ($params->get('show_intro')) :?>			<div class="intro"> <?php echo JHtml::_('string.truncate', $item->introtext, $params->get('introtext_limit')); ?> </div>		<?php endif; ?>		<?php if ($useDefList && ($info == 1 || $info == 2)) : ?>			<div class="article-info muted">				<dl class="article-info">				<dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt>				<?php if ($info == 1) : ?>					<?php if ($params->get('show_parent_category') && !empty($item->parent_slug)) : ?>						<dd>							<div class="parent-category-name">								<?php	$title = $this->escape($item->parent_title);								$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($item->parent_slug)) . '">' . $title . '</a>';?>							<?php if ($params->get('link_parent_category') && $item->parent_slug) : ?>								<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>							<?php else : ?>								<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>							<?php endif; ?>							</div>						</dd>					<?php endif; ?>					<?php if ($params->get('show_category')) : ?>						<dd>							<div class="category-name">								<?php 	$title = $this->escape($item->category_title);								$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($item->catslug)) . '">' . $title . '</a>'; ?>								<?php if ($params->get('link_category') && $item->catslug) : ?>									<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>								<?php else : ?>									<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>								<?php endif; ?>							</div>						</dd>					<?php endif; ?>					<?php if ($params->get('show_publish_date')) : ?>						<dd>							<div class="published">								<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>							</div>						</dd>					<?php endif; ?>				<?php endif; ?>				<?php if ($params->get('show_create_date')) : ?>					<dd>						<div class="create"><span class="icon-calendar">							</span> <?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $item->modified, JText::_('DATE_FORMAT_LC3'))); ?>						</div>					</dd>				<?php endif; ?>				<?php if ($params->get('show_modify_date')) : ?>					<dd>						<div class="modified"><span class="icon-calendar">							</span> <?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $item->modified, JText::_('DATE_FORMAT_LC3'))); ?>						</div>					</dd>				<?php endif; ?>				<?php if ($params->get('show_hits')) : ?>					<dd>						<div class="hits">							<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $item->hits); ?>						</div>					</dd>				<?php endif; ?>			</dl>		</div>		<?php endif; ?>	</div>	<?php endforeach; ?></div><div class="pagination">	<p class="counter"> <?php echo $this->pagination->getPagesCounter(); ?> </p>	<?php echo $this->pagination->getPagesLinks(); ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// no direct accessdefined('_JEXEC') or die;echo JHtml::_('sliders.start', 'panel-sliders', array('useCookie' => '1'));foreach ($this->modules as $module){	$output = JModuleHelper::renderModule($module);	$params = new JRegistry;	$params->loadString($module->params);	if ($params->get('automatic_title', '0') == '0')	{		echo JHtml::_('sliders.panel', $module->title, 'cpanel-panel-' . $module->name);	}	elseif (method_exists('mod'.$module->name.'Helper', 'getTitle'))	{		echo JHtml::_('sliders.panel', call_user_func_array(array('mod' . $module->name . 'Helper', 'getTitle'), array($params)), 'cpanel-panel-' . $module->name);	}	else	{		echo JHtml::_('sliders.panel', JText::_('MOD_' . $module->name . '_TITLE'), 'cpanel-panel-' . $module->name);	}	echo $output;}echo JHtml::_('sliders.end');
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Content table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableContent extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  A database connector object	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__content', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_content.article';	}	/**	 * Method to compute the default name of the asset.	 * The default name is in the form table_name.id	 * where id is the value of the primary key of the table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetName()	{		$k = $this->_tbl_key;		return 'com_content.article.' . (int) $this->$k;	}	/**	 * Method to return the title to use for the asset table.	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _getAssetTitle()	{		return $this->title;	}	/**	 * Method to get the parent asset id for the record	 *	 * @param   JTable   $table  A JTable object (optional) for the asset parent	 * @param   integer  $id     The id (optional) of the content.	 *	 * @return  integer	 *	 * @since   11.1	 */	protected function _getAssetParentId($table = null, $id = null)	{		$assetId = null;		// This is a article under a category.		if ($this->catid)		{			// Build the query to get the asset id for the parent category.			$query = $this->_db->getQuery(true)				->select($this->_db->quoteName('asset_id'))				->from($this->_db->quoteName('#__categories'))				->where($this->_db->quoteName('id') . ' = ' . (int) $this->catid);			// Get the asset id from the database.			$this->_db->setQuery($query);			if ($result = $this->_db->loadResult())			{				$assetId = (int) $result;			}		}		// Return the asset id.		if ($assetId)		{			return $assetId;		}		else		{			return parent::_getAssetParentId($table, $id);		}	}	/**	 * Overloaded bind function	 *	 * @param   array  $array   Named array	 * @param   mixed  $ignore  An optional array or space separated list of properties	 *                          to ignore while binding.	 *	 * @return  mixed  Null if operation was satisfactory, otherwise returns an error string	 *	 * @see     JTable::bind	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Search for the {readmore} tag and split the text up accordingly.		if (isset($array['articletext']))		{			$pattern = '#<hr\s+id=("|\')system-readmore("|\')\s*\/*>#i';			$tagPos = preg_match($pattern, $array['articletext']);			if ($tagPos == 0)			{				$this->introtext = $array['articletext'];				$this->fulltext = '';			}			else			{				list ($this->introtext, $this->fulltext) = preg_split($pattern, $array['articletext'], 2);			}		}		if (isset($array['attribs']) && is_array($array['attribs']))		{			$registry = new JRegistry;			$registry->loadArray($array['attribs']);			$array['attribs'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		// Bind the rules.		if (isset($array['rules']) && is_array($array['rules']))		{			$rules = new JAccessRules($array['rules']);			$this->setRules($rules);		}		return parent::bind($array, $ignore);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success, false on failure	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		if (trim($this->title) == '')		{			$this->setError(JText::_('COM_CONTENT_WARNING_PROVIDE_VALID_NAME'));			return false;		}		if (trim($this->alias) == '')		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format('Y-m-d-H-i-s');		}		if (trim(str_replace('&nbsp;', '', $this->fulltext)) == '')		{			$this->fulltext = '';		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			// Swap the dates.			$temp = $this->publish_up;			$this->publish_up = $this->publish_down;			$this->publish_down = $temp;		}		// Clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// Only process if not empty			// Array of characters to remove			$bad_characters = array("\n", "\r", "\"", "<", ">");			// Remove bad characters			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey);			// Create array using commas as delimiter			$keys = explode(',', $after_clean);			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key))				{					// Ignore blank keywords					$clean_keys[] = trim($key);				}			}			// Put array back together delimited by ", "			$this->metakey = implode(", ", $clean_keys);		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		$this->tagsHelper->typeAlias = 'com_content.article';		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Overrides JTable::store to set modified data and user id.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function store($updateNulls = false)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified = $date->toSql();			$this->modified_by = $user->get('id');		}		else		{			// New article. An article created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Verify that the alias is unique		$table = JTable::getInstance('Content', 'JTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_ARTICLE_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->typeAlias = 'com_content.article';		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table. The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k . '=' . implode(' OR ' . $k . '=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = ' . (int) $userId . ')';		}		// Get the JDatabaseQuery object		$query = $this->_db->getQuery(true);		// Update the publishing state for rows with the given primary keys.		$query->update($this->_db->quoteName($this->_tbl))			->set($this->_db->quoteName('state') . ' = ' . (int) $state)			->where('(' . $where . ')' . $checkin);		$this->_db->setQuery($query);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Plugin * @subpackage  User.contactcreator * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Class for Contact Creator * * A tool to automatically create and synchronise contacts with a user * * @package     Joomla.Plugin * @subpackage  User.contactcreator * @since       1.6 */class PlgUserContactCreator extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	public function onUserAfterSave($user, $isnew, $success, $msg)	{		if (!$success)		{			return false; // if the user wasn't stored we don't resync		}		if (!$isnew)		{			return false; // if the user isn't new we don't sync		}		// ensure the user id is really an int		$user_id = (int) $user['id'];		if (empty($user_id))		{			die('invalid userid');			return false; // if the user id appears invalid then bail out just in case		}		$category = $this->params->get('category', 0);		if (empty($category))		{			JError::raiseWarning(41, JText::_('PLG_CONTACTCREATOR_ERR_NO_CATEGORY'));			return false; // bail out if we don't have a category		}		$db = JFactory::getDbo();		// grab the contact ID for this user; note $user_id is cleaned above		$db->setQuery('SELECT id FROM #__contact_details WHERE user_id = '. $user_id);		$id = $db->loadResult();		JTable::addIncludePath(JPATH_ADMINISTRATOR.'/components/com_contact/tables');		$contact = JTable::getInstance('contact', 'ContactTable');		if (!$contact)		{			return false;		}		if ($id)		{			$contact->load($id);		}		elseif ($this->params->get('autopublish', 0))		{			$contact->published = 1;		}		$contact->name = $user['name'];		$contact->user_id = $user_id;		$contact->email_to = $user['email'];		$contact->catid = $category;		$contact->language = '*';		$autowebpage = $this->params->get('autowebpage', '');		if (!empty($autowebpage))		{			// search terms			$search_array = array('[name]', '[username]', '[userid]', '[email]');			// replacement terms, urlencoded			$replace_array = array_map('urlencode', array($user['name'], $user['username'], $user['id'], $user['email']));			// now replace it in together			$contact->webpage = str_replace($search_array, $replace_array, $autowebpage);		}		if ($contact->check())		{			$result = $contact->store();		}		if (!(isset($result)) || !$result)		{			JError::raiseError(42, JText::sprintf('PLG_CONTACTCREATOR_ERR_FAILED_UPDATE', $contact->getError()));		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API Elements class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmapElements extends JOpenstreetmapObject{	/**	 * Method to create a node	 * 	 * @param   int    $changeset  change set id	 * @param   float  $latitude   latitude of the node	 * @param   float  $longitude  longitude of the node	 * @param   arary  $tags       array of tags for a node	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 */	public function createNode($changeset,$latitude,$longitude,$tags)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'node/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$tag_list = "";		// Create XML node		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<node changeset="' . $changeset . '" lat="' . $latitude . '" lon="' . $longitude . '">'				. $tag_list .				'</node>				</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to create a way	 * 	 * @param   int    $changeset  change set id	 * @param   array  $tags       array of tags for a way	 * @param   array  $nds        node ids to refer	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 */	public function createWay($changeset,$tags,$nds)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'way/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$tag_list = "";		// Create XML node		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		$nd_list = "";		if (!empty($nds))		{			foreach ($nds as $value)			{				$nd_list .= '<nd ref="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<way changeset="' . $changeset . '">'					. $tag_list					. $nd_list .				'</way>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to create a relation	 * 	 * @param   int    $changeset  change set id	 * @param   array  $tags       array of tags for a relation	 * @param   array  $members    array of members for a relation 	 *                             eg:$members=array(array("type"=>"node","role"=>"stop","ref"=>"123"),array("type"=>"way","ref"=>"123"))	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 */	public function createRelation($changeset,$tags,$members)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'relation/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$tag_list = "";		// Create XML node		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		// Members		$member_list = "";		if (!empty($members))		{			foreach ($members as $member)			{				if ($member['type'] == "node")				{					$member_list .= '<member type="' . $member['type'] . '" role="' . $member['role'] . '" ref="' . $member['ref'] . '"/>';				}				elseif ($member['type'] == "way")				{					$member_list .= '<member type="' . $member['type'] . '" ref="' . $member['ref'] . '"/>';				}			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<relation relation="' . $changeset . '" >'					. $tag_list					. $member_list .				'</relation>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to read an Element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function readElement($element, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to update an Element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   string  $xml      full reperentation of the element with a version number	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function updateElement($element, $xml, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = $element . '/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to delete an element [node|way|relation]	 * 	 * @param   string  $element    [node|way|relation]	 * @param   int     $id         element identifier	 * @param   int     $version    element versioln	 * @param   int     $changeset  changeset identifier	 * @param   float   $latitude   latitude of the element	 * @param   float   $longitude  longitude of the element	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function deleteElement($element, $id, $version, $changeset, $latitude=null, $longitude=null)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = $element . '/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create xml		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<' . $element . ' id="' . $id . '" version="' . $version . '" changeset="' . $changeset . '"';		if (!empty($latitude) && !empty($longitude))		{			$xml .= ' lat="' . $latitude . '" lon="' . $longitude . '"';		}		$xml .= '/></osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to get history of an element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function historyOfElement($element, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/history';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to get details about a version of an element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * @param   int     $version  element version	 * 	 * @return  array    The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function versionOfElement($element, $id ,$version)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/' . $version;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to get data about multiple ids of an element [node|way|relation]	 *	 * @param   string  $element  [nodes|ways|relations] - use plural word	 * @param   string  $params   Comma separated list ids belongto type $element	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function multiFetchElements($element, $params)	{		if ($element != 'nodes' && $element != 'ways' && $element != 'relations')		{			throw new DomainException("Element should be nodes, ways or relations");		}		// Get singular word		$single_element = substr($element, 0, strlen($element) - 1);		// Set the API base, $params is a string with comma seperated values		$base = $element . '?' . $element . "=" . $params;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$single_element;	}	/**	 * Method to get relations for an Element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function relationsForElement($element, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/relations';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to get ways for a Node element	 *	 * @param   int  $id  node identifier	 * 	 * @return  array    The xml response	 * 	 * @since   13.1	 */	public function waysForNode($id)	{		// Set the API base		$base = 'node/' . $id . '/ways';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->way;	}	/**	 * Method to get full information about an element [way|relation]	 *	 * @param   string  $element  [way|relation]	 * @param   int     $id       identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function fullElement($element, $id)	{		if ($element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/full';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->node;	}	/**	 * Method used by the DWG to hide old versions of elements containing data privacy or copyright infringements	 *  	 * @param   string  $element       [node|way|relation]	 * @param   int     $id            element identifier	 * @param   int     $version       element version	 * @param   int     $redaction_id  redaction id	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function redaction($element, $id, $version, $redaction_id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = $element . '/' . $id . '/' . $version . '/redact?redaction=' . $redaction_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters);		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for form related behaviors * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlFormbehavior{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the Chosen JavaScript framework and supporting CSS into the document head	 *	 * If debugging mode is on an uncompressed version of Chosen is included for easier debugging.	 *	 * @param   string  $selector  Class for Chosen elements.	 * @param   mixed   $debug     Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function chosen($selector = '.advancedSelect', $debug = null)	{		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include jQuery		JHtml::_('jquery.framework');		// Add chosen.jquery.js language strings		JText::script('JGLOBAL_SELECT_SOME_OPTIONS');		JText::script('JGLOBAL_SELECT_AN_OPTION');		JText::script('JGLOBAL_SELECT_NO_RESULTS_MATCH');		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug  = (boolean) $config->get('debug');		}		JHtml::_('script', 'jui/chosen.jquery.min.js', false, true, false, false, $debug);		JHtml::_('stylesheet', 'jui/chosen.css', false, true);		JFactory::getDocument()->addScriptDeclaration("				jQuery(document).ready(function (){					jQuery('" . $selector . "').chosen({						disable_search_threshold : 10,						allow_single_deselect : true					});				});			"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Method to load the AJAX Chosen library	 *	 * If debugging mode is on an uncompressed version of AJAX Chosen is included for easier debugging.	 *	 * @param   JRegistry  $options  Options in a JRegistry object	 * @param   mixed      $debug    Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function ajaxchosen(JRegistry $options, $debug = null)	{		// Retrieve options/defaults		$selector       = $options->get('selector', '.tagfield');		$type           = $options->get('type', 'GET');		$url            = $options->get('url', null);		$dataType       = $options->get('dataType', 'json');		$jsonTermKey    = $options->get('jsonTermKey', 'term');		$afterTypeDelay = $options->get('afterTypeDelay', '500');		$minTermLength  = $options->get('minTermLength', '3');		JText::script('JGLOBAL_KEEP_TYPING');		JText::script('JGLOBAL_LOOKING_FOR');		// Ajax URL is mandatory		if (!empty($url))		{			if (isset(self::$loaded[__METHOD__][$selector]))			{				return;			}			// Include jQuery			JHtml::_('jquery.framework');			// Requires chosen to work			self::chosen($selector, $debug);			JHtml::_('script', 'jui/ajax-chosen.min.js', false, true, false, false, $debug);			JFactory::getDocument()->addScriptDeclaration("				(function($){					$(document).ready(function () {						$('" . $selector . "').ajaxChosen({							type: '" . $type . "',							url: '" . $url . "',							dataType: '" . $dataType . "',							jsonTermKey: '" . $jsonTermKey . "',							afterTypeDelay: '" . $afterTypeDelay . "',							minTermLength: '" . $minTermLength . "'						}, function (data) {							var results = [];							$.each(data, function (i, val) {								results.push({ value: val.value, text: val.text });							});							return results;						});					});				})(jQuery);				"			);			self::$loaded[__METHOD__][$selector] = true;		}		return;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Menu Types table * * @package     Joomla.Legacy * @subpackage  Table * @since       11.1 */class JTableMenuType extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since  11.1	 */	public function __construct($db)	{		parent::__construct('#__menu_types', 'id', $db);	}	/**	 * Overloaded check function	 *	 * @return  boolean  True on success, false on failure	 *	 * @see     JTable::check	 * @since   11.1	 */	public function check()	{		$this->menutype = JApplication::stringURLSafe($this->menutype);		if (empty($this->menutype))		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_MENUTYPE_EMPTY'));			return false;		}		// Sanitise data.		if (trim($this->title) == '')		{			$this->title = $this->menutype;		}		// Check for unique menutype.		$query = $this->_db->getQuery(true)			->select('COUNT(id)')			->from($this->_db->quoteName('#__menu_types'))			->where($this->_db->quoteName('menutype') . ' = ' . $this->_db->quote($this->menutype))			->where($this->_db->quoteName('id') . ' <> ' . (int) $this->id);		$this->_db->setQuery($query);		if ($this->_db->loadResult())		{			$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_MENUTYPE_EXISTS', $this->menutype));			return false;		}		return true;	}	/**	 * Method to store a row in the database from the JTable instance properties.	 * If a primary key value is set the row with that primary key value will be	 * updated with the instance property values.  If no primary key value is set	 * a new row will be inserted into the database with the properties from the	 * JTable instance.	 *	 * @param   boolean  $updateNulls  True to update fields even if they are null.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		if ($this->id)		{			// Get the user id			$userId = JFactory::getUser()->id;			// Get the old value of the table			$table = JTable::getInstance('Menutype', 'JTable');			$table->load($this->id);			// Verify that no items are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(					JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE_CHECKOUT'))				);				return false;			}			// Verify that no module for this menu are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(					JText::sprintf('JLIB_DATABASE_ERROR_STORE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE_CHECKOUT'))				);				return false;			}			// Update the menu items			$query = $this->_db->getQuery(true)				->update('#__menu')				->set('menutype=' . $this->_db->quote($this->menutype))				->where('menutype=' . $this->_db->quote($table->menutype));			$this->_db->setQuery($query);			$this->_db->execute();			// Update the module items			$query = $this->_db->getQuery(true)				->update('#__modules')				->set(				'params=REPLACE(params,' . $this->_db->quote('"menutype":' . json_encode($table->menutype)) . ',' .				$this->_db->quote('"menutype":' . json_encode($this->menutype)) . ')'			);			$query->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'));			$this->_db->setQuery($query);			$this->_db->execute();		}		return parent::store($updateNulls);	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   mixed  $pk  An optional primary key value to delete.  If not set the instance property value is used.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTable/delete	 * @since   11.1	 */	public function delete($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// If no primary key is given, return false.		if ($pk !== null)		{			// Get the user id			$userId = JFactory::getUser()->id;			// Get the old value of the table			$table = JTable::getInstance('Menutype', 'JTable');			$table->load($pk);			// Verify that no items are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('client_id=0')				->where('(checked_out NOT IN (0,' . (int) $userId . ') OR home=1 AND language=' . $this->_db->quote('*') . ')');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_DELETE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE')));				return false;			}			// Verify that no module for this menu are checked out			$query = $this->_db->getQuery(true)				->select('id')				->from('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'))				->where('checked_out !=' . (int) $userId)				->where('checked_out !=0');			$this->_db->setQuery($query);			if ($this->_db->loadRowList())			{				$this->setError(JText::sprintf('JLIB_DATABASE_ERROR_DELETE_FAILED', get_class($this), JText::_('JLIB_DATABASE_ERROR_MENUTYPE')));				return false;			}			// Delete the menu items			$query = $this->_db->getQuery(true)				->delete('#__menu')				->where('menutype=' . $this->_db->quote($table->menutype))				->where('client_id=0');			$this->_db->setQuery($query);			$this->_db->execute();			// Update the module items			$query = $this->_db->getQuery(true)				->delete('#__modules')				->where('module=' . $this->_db->quote('mod_menu'))				->where('params LIKE ' . $this->_db->quote('%"menutype":' . json_encode($table->menutype) . '%'));			$this->_db->setQuery($query);			$this->_db->execute();		}		return parent::delete($pk);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');$user = JFactory::getUser();$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>		<tr>			<td>				<a class="img-preview" href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>"><?php echo JHtml::_('image', COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_16, 'height' => $this->_tmp_img->height_16)); ?></a>			</td>			<td class="description">				<a href="<?php echo  COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" rel="preview"><?php echo $this->escape($this->_tmp_img->title); ?></a>			</td>			<td class="dimensions">				<?php echo JText::sprintf('COM_MEDIA_IMAGE_DIMENSIONS', $this->_tmp_img->width, $this->_tmp_img->height); ?>			</td>			<td class="filesize">				<?php echo JHtml::_('number.bytes', $this->_tmp_img->size); ?>			</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>				<a class="delete-item" target="_top" href="index.php?option=com_media&amp;task=file.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_img->name; ?>" rel="<?php echo $this->_tmp_img->name; ?>"><i class="icon-remove hasTooltip" title="<?php echo JText::_('JACTION_DELETE');?>"></i></a>				<input type="checkbox" name="rm[]" value="<?php echo $this->_tmp_img->name; ?>" />			</td>		<?php endif;?>		</tr><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Admin Component Help Model * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminModelHelp extends JModelLegacy{	/**	 * The search string	 * @var    string	 *	 * @since  1.6	 */	protected $help_search = null;	/**	 * The page to be viewed	 * @var    string	 *	 * @since  1.6	 */	protected $page = null;	/**	 * The iso language tag	 * @var    string	 *	 * @since  1.6	 */	protected $lang_tag = null;	/**	 * Table of contents	 *	 * @var    array	 * @since  1.6	 */	protected $toc = null;	/**	 * URL for the latest version check	 *	 * @var    string	 * @since  1.6	 */	protected $latest_version_check = null;	/**	 * Method to get the help search string	 *	 * @return  string  Help search string	 *	 * @since  1.6	 */	public function &getHelpSearch()	{		if (is_null($this->help_search))		{			$this->help_search = JFactory::getApplication()->input->getString('helpsearch');		}		return $this->help_search;	}	/**	 * Method to get the page	 *	 * @return  string  The page	 *	 * @since  1.6	 */	public function &getPage()	{		if (is_null($this->page))		{			$page = JFactory::getApplication()->input->get('page', 'JHELP_START_HERE');			$this->page = JHelp::createUrl($page);		}		return $this->page;	}	/**	 * Method to get the lang tag	 *	 * @return  string  lang iso tag	 *	 * @since  1.6	 */	public function getLangTag()	{		if (is_null($this->lang_tag))		{			$lang = JFactory::getLanguage();			$this->lang_tag = $lang->getTag();			if (!is_dir(JPATH_BASE . '/help/' . $this->lang_tag))			{				// Use english as fallback				$this->lang_tag = 'en-GB';			}		}		return $this->lang_tag;	}	/**	 * Method to get the toc	 *	 * @return  array  Table of contents	 */	public function &getToc()	{		if (is_null($this->toc))		{			// Get vars			$lang_tag = $this->getLangTag();			$help_search = $this->getHelpSearch();			// Get Help files			jimport('joomla.filesystem.folder');			$files = JFolder::files(JPATH_BASE . '/help/' . $lang_tag, '\.xml$|\.html$');			$this->toc = array();			foreach ($files as $file)			{				$buffer = file_get_contents(JPATH_BASE . '/help/' . $lang_tag . '/' . $file);				if (preg_match('#<title>(.*?)</title>#', $buffer, $m))				{					$title = trim($m[1]);					if ($title)					{						// Translate the page title						$title = JText::_($title);						// strip the extension						$file = preg_replace('#\.xml$|\.html$#', '', $file);						if ($help_search)						{							if (JString::strpos(JString::strtolower(strip_tags($buffer)), JString::strtolower($help_search)) !== false)							{								// Add an item in the Table of Contents								$this->toc[$file] = $title;							}						}						else						{							// Add an item in the Table of Contents							$this->toc[$file] = $title;						}					}				}			}			// Sort the Table of Contents			asort($this->toc);		}		return $this->toc;	}	/**	 * Method to get the latest version check	 *	 * @return  string  Latest Version Check URL	 */	public function &getLatestVersionCheck()	{		if (!$this->latest_version_check)		{			$override = 'http://help.joomla.org/proxy/index.php?option=com_help&keyref=Help{major}{minor}:Joomla_Version_{major}_{minor}_{maintenance}';			$this->latest_version_check = JHelp::createUrl('JVERSION', false, $override);		}		return $this->latest_version_check;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerStemmer', __DIR__ . '/stemmer.php');JLoader::register('FinderIndexerToken', __DIR__ . '/token.php');/** * Helper class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerHelper{	/**	 * The token stemmer object. The stemmer is set by whatever class	 * wishes to use it but it must be an instance of FinderIndexerStemmer.	 *	 * @var		FinderIndexerStemmer	 * @since	2.5	 */	public static $stemmer;	/**	 * Method to parse input into plain text.	 *	 * @param   string  $input   The raw input.	 * @param   string  $format  The format of the input. [optional]	 *	 * @return  string  The parsed input.	 *	 * @since   2.5	 * @throws  Exception on invalid parser.	 */	public static function parse($input, $format = 'html')	{		// Get a parser for the specified format and parse the input.		return FinderIndexerParser::getInstance($format)->parse($input);	}	/**	 * Method to tokenize a text string.	 *	 * @param   string   $input   The input to tokenize.	 * @param   string   $lang    The language of the input.	 * @param   boolean  $phrase  Flag to indicate whether input could be a phrase. [optional]	 *	 * @return  array  An array of FinderIndexerToken objects.	 *	 * @since   2.5	 */	public static function tokenize($input, $lang, $phrase = false)	{		static $cache;		$store = JString::strlen($input) < 128 ? md5($input . '::' . $lang . '::' . $phrase) : null;		// Check if the string has been tokenized already.		if ($store && isset($cache[$store]))		{			return $cache[$store];		}		$tokens = array();		$quotes = html_entity_decode('&#8216;&#8217;&#39;', ENT_QUOTES, 'UTF-8');		// Get the simple language key.		$lang = self::getPrimaryLanguage($lang);		/*		 * Parsing the string input into terms is a multi-step process.		 *		 * Regexes:		 *  1. Remove everything except letters, numbers, quotes, apostrophe, plus, dash, period, and comma.		 *  2. Remove plus, dash, period, and comma characters located before letter characters.		 *  3. Remove plus, dash, period, and comma characters located after other characters.		 *  4. Remove plus, period, and comma characters enclosed in alphabetical characters. Ungreedy.		 *  5. Remove orphaned apostrophe, plus, dash, period, and comma characters.		 *  6. Remove orphaned quote characters.		 *  7. Replace the assorted single quotation marks with the ASCII standard single quotation.		 *  8. Remove multiple space characters and replaces with a single space.		 */		$input = JString::strtolower($input);		$input = preg_replace('#[^\pL\pM\pN\p{Pi}\p{Pf}\'+-.,]+#mui', ' ', $input);		$input = preg_replace('#(^|\s)[+-.,]+([\pL\pM]+)#mui', ' $1', $input);		$input = preg_replace('#([\pL\pM\pN]+)[+-.,]+(\s|$)#mui', '$1 ', $input);		$input = preg_replace('#([\pL\pM]+)[+.,]+([\pL\pM]+)#muiU', '$1 $2', $input); // Ungreedy		$input = preg_replace('#(^|\s)[\'+-.,]+(\s|$)#mui', ' ', $input);		$input = preg_replace('#(^|\s)[\p{Pi}\p{Pf}]+(\s|$)#mui', ' ', $input);		$input = preg_replace('#[' . $quotes . ']+#mui', '\'', $input);		$input = preg_replace('#\s+#mui', ' ', $input);		$input = JString::trim($input);		// Explode the normalized string to get the terms.		$terms = explode(' ', $input);		/*		 * If we have Unicode support and are dealing with Chinese text, Chinese		 * has to be handled specially because there are not necessarily any spaces		 * between the "words". So, we have to test if the words belong to the Chinese		 * character set and if so, explode them into single glyphs or "words".		 */		if ($lang === 'zh')		{			// Iterate through the terms and test if they contain Chinese.			for ($i = 0, $n = count($terms); $i < $n; $i++)			{				$charMatches = array();				$charCount = preg_match_all('#[\p{Han}]#mui', $terms[$i], $charMatches);				// Split apart any groups of Chinese characters.				for ($j = 0; $j < $charCount; $j++)				{					$tSplit = JString::str_ireplace($charMatches[0][$j], '', $terms[$i], false);					if (!empty($tSplit))					{						$terms[$i] = $tSplit;					}					else					{						unset($terms[$i]);					}					$terms[] = $charMatches[0][$j];				}			}			// Reset array keys.			$terms = array_values($terms);		}		/*		 * If we have to handle the input as a phrase, that means we don't		 * tokenize the individual terms and we do not create the two and three		 * term combinations. The phrase must contain more than one word!		 */		if ($phrase === true && count($terms) > 1)		{			// Create tokens from the phrase.			$tokens[] = new FinderIndexerToken($terms, $lang);		}		else		{			// Create tokens from the terms.			for ($i = 0, $n = count($terms); $i < $n; $i++)			{				$tokens[] = new FinderIndexerToken($terms[$i], $lang);			}			// Create two and three word phrase tokens from the individual words.			for ($i = 0, $n = count($tokens); $i < $n; $i++)			{				// Setup the phrase positions.				$i2 = $i + 1;				$i3 = $i + 2;				// Create the two word phrase.				if ($i2 < $n && isset($tokens[$i2]))				{					// Tokenize the two word phrase.					$token = new FinderIndexerToken(array($tokens[$i]->term, $tokens[$i2]->term), $lang, $lang === 'zh' ? '' : ' ');					$token->derived = true;					// Add the token to the stack.					$tokens[] = $token;				}				// Create the three word phrase.				if ($i3 < $n && isset($tokens[$i3]))				{					// Tokenize the three word phrase.					$token = new FinderIndexerToken(array($tokens[$i]->term, $tokens[$i2]->term, $tokens[$i3]->term), $lang, $lang === 'zh' ? '' : ' ');					$token->derived = true;					// Add the token to the stack.					$tokens[] = $token;				}			}		}		if ($store)		{			$cache[$store] = count($tokens) > 1 ? $tokens : array_shift($tokens);			return $cache[$store];		}		else		{			return count($tokens) > 1 ? $tokens : array_shift($tokens);		}	}	/**	 * Method to get the base word of a token. This method uses the public	 * {@link FinderIndexerHelper::$stemmer} object if it is set. If no stemmer is set,	 * the original token is returned.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	public static function stem($token, $lang)	{		// Trim apostrophes at either end of the token.		$token = JString::trim($token, '\'');		// Trim everything after any apostrophe in the token.		if (($pos = JString::strpos($token, '\'')) !== false)		{			$token = JString::substr($token, 0, $pos);		}		// Stem the token if we have a valid stemmer to use.		if (self::$stemmer instanceof FinderIndexerStemmer)		{			return self::$stemmer->stem($token, $lang);		}		else		{			return $token;		}	}	/**	 * Method to add a content type to the database.	 *	 * @param   string  $title  The type of content. For example: PDF	 * @param   string  $mime   The mime type of the content. For example: PDF [optional]	 *	 * @return  integer  The id of the content type.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function addContentType($title, $mime = null)	{		static $types;		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Check if the types are loaded.		if (empty($types))		{			// Build the query to get the types.			$query->select('*')				->from($db->quoteName('#__finder_types'));			// Get the types.			$db->setQuery($query);			$types = $db->loadObjectList('title');		}		// Check if the type already exists.		if (isset($types[$title]))		{			return (int) $types[$title]->id;		}		// Add the type.		$query->clear()			->insert($db->quoteName('#__finder_types'))			->columns(array($db->quoteName('title'), $db->quoteName('mime')))			->values($db->quote($title) . ', ' . $db->quote($mime));		$db->setQuery($query);		$db->execute();		// Return the new id.		return (int) $db->insertid();	}	/**	 * Method to check if a token is common in a language.	 *	 * @param   string  $token  The token to test.	 * @param   string  $lang   The language to reference.	 *	 * @return  boolean  True if common, false otherwise.	 *	 * @since   2.5	 */	public static function isCommon($token, $lang)	{		static $data;		// Load the common tokens for the language if necessary.		if (!isset($data[$lang]))		{			$data[$lang] = self::getCommonWords($lang);		}		// Check if the token is in the common array.		if (in_array($token, $data[$lang]))		{			return true;		}		else		{			return false;		}	}	/**	 * Method to get an array of common terms for a language.	 *	 * @param   string  $lang  The language to use.	 *	 * @return  array  Array of common terms.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function getCommonWords($lang)	{		$db = JFactory::getDbo();		// Create the query to load all the common terms for the language.		$query = $db->getQuery(true)			->select($db->quoteName('term'))			->from($db->quoteName('#__finder_terms_common'))			->where($db->quoteName('language') . ' = ' . $db->quote($lang));		// Load all of the common terms for the language.		$db->setQuery($query);		$results = $db->loadColumn();		return $results;	}	/**	 * Method to get the default language for the site.	 *	 * @return  string  The default language string.	 *	 * @since   2.5	 */	public static function getDefaultLanguage()	{		static $lang;		// We need to go to com_languages to get the site default language, it's the best we can guess.		if (empty($lang))		{			$lang = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');		}		return $lang;	}	/**	 * Method to parse a language/locale key and return a simple language string.	 *	 * @param   string  $lang  The language/locale key. For example: en-GB	 *	 * @return  string  The simple language string. For example: en	 *	 * @since   2.5	 */	public static function getPrimaryLanguage($lang)	{		static $data;		// Only parse the identifier if necessary.		if (!isset($data[$lang]))		{			if (is_callable(array('Locale', 'getPrimaryLanguage')))			{				// Get the language key using the Locale package.				$data[$lang] = Locale::getPrimaryLanguage($lang);			}			else			{				// Get the language key using string position.				$data[$lang] = JString::substr($lang, 0, JString::strpos($lang, '-'));			}		}		return $data[$lang];	}	/**	 * Method to get the path (SEF route) for a content item.	 *	 * @param   string  $url  The non-SEF route to the content item.	 *	 * @return  string  The path for the content item.	 *	 * @since   2.5	 */	public static function getContentPath($url)	{		static $router;		// Only get the router once.		if (!($router instanceof JRouter))		{			jimport('joomla.application.router');			include_once JPATH_SITE . '/includes/application.php';			// Get and configure the site router.			$config = JFactory::getConfig();			$router = JRouter::getInstance('site');			$router->setMode($config->get('sef', 1));		}		// Build the relative route.		$uri = $router->build($url);		$route = $uri->toString(array('path', 'query', 'fragment'));		$route = str_replace(JURI::base(true) . '/', '', $route);		return $route;	}	/**	 * Method to get extra data for a content before being indexed. This is how	 * we add Comments, Tags, Labels, etc. that should be available to Finder.	 *	 * @param   FinderIndexerResult  &$item  The item to index as an FinderIndexerResult object.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	public static function getContentExtras(FinderIndexerResult &$item)	{		// Get the event dispatcher.		$dispatcher = JEventDispatcher::getInstance();		// Load the finder plugin group.		JPluginHelper::importPlugin('finder');		try		{			// Trigger the event.			$results = $dispatcher->trigger('onPrepareFinderContent', array(&$item));			// Check the returned results. This is for plugins that don't throw			// exceptions when they encounter serious errors.			if (in_array(false, $results))			{				throw new Exception($dispatcher->getError(), 500);			}		}		catch (Exception $e)		{			// Handle a caught exception.			throw $e;		}		return true;	}	/**	 * Method to process content text using the onContentPrepare event trigger.	 *	 * @param   string     $text    The content to process.	 * @param   JRegistry  $params  The parameters object. [optional]	 *	 * @return  string  The processed content.	 *	 * @since   2.5	 */	public static function prepareContent($text, $params = null)	{		static $loaded;		// Get the dispatcher.		$dispatcher = JEventDispatcher::getInstance();		// Load the content plugins if necessary.		if (empty($loaded))		{			JPluginHelper::importPlugin('content');			$loaded = true;		}		// Instantiate the parameter object if necessary.		if (!($params instanceof JRegistry))		{			$registry = new JRegistry;			$registry->loadString($params);			$params = $registry;		}		// Create a mock content object.		$content = JTable::getInstance('Content');		$content->text = $text;		// Fire the onContentPrepare event.		$dispatcher->trigger('onContentPrepare', array('com_finder.indexer', &$content, &$params, 0));		return $content->text;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'weblink.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit<?php echo $this->pageclass_sfx; ?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_weblinks&view=form&w_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-vertical">		<div class="btn-toolbar">			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('weblink.save')">					<span class="icon-ok"></span> <?php echo JText::_('JSAVE') ?>				</button>			</div>			<div class="btn-group">				<button type="button" class="btn" onclick="Joomla.submitbutton('weblink.cancel')">					<span class="icon-cancel"></span> <?php echo JText::_('JCANCEL') ?>				</button>			</div>		</div>		<hr class="hr-condensed" />		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('title'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('title'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('alias'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('alias'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('catid'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('catid'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('url'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('url'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('tags', 'metadata'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('tags', 'metadata'); ?>			</div>		</div>		<?php if ($this->user->authorise('core.edit.state', 'com_weblinks.weblink')) : ?>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('state'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('state'); ?>				</div>			</div>		<?php endif; ?>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('language'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('language'); ?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('description'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('description'); ?>			</div>		</div>		<input type="hidden" name="return" value="<?php echo $this->return_page;?>" />		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Cache output type object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheControllerOutput extends JCacheController{	/**	 * @since   11.1	 */	protected $_id;	/**	 * @since   11.1	 */	protected $_group;	/**	 * @since   11.1	 */	protected $_locktest = null;	/**	 * Start the cache	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True if the cache is hit (false else)	 *	 * @since   11.1	 */	public function start($id, $group = null)	{		// If we have data in cache use that.		$data = $this->cache->get($id, $group);		$this->_locktest = new stdClass;		$this->_locktest->locked = null;		$this->_locktest->locklooped = null;		if ($data === false)		{			$this->_locktest = $this->cache->lock($id, $group);			if ($this->_locktest->locked == true && $this->_locktest->locklooped == true)			{				$data = $this->cache->get($id, $group);			}		}		if ($data !== false)		{			$data = unserialize(trim($data));			echo $data;			if ($this->_locktest->locked == true)			{				$this->cache->unlock($id, $group);			}			return true;		}		else		{			// Nothing in cache... let's start the output buffer and start collecting data for next time.			if ($this->_locktest->locked == false)			{				$this->_locktest = $this->cache->lock($id, $group);			}			ob_start();			ob_implicit_flush(false);			// Set id and group placeholders			$this->_id = $id;			$this->_group = $group;			return false;		}	}	/**	 * Stop the cache buffer and store the cached data	 *	 * @return  boolean  True if cache stored	 *	 * @since   11.1	 */	public function end()	{		// Get data from output buffer and echo it		$data = ob_get_contents();		ob_end_clean();		echo $data;		// Get id and group and reset them placeholders		$id = $this->_id;		$group = $this->_group;		$this->_id = null;		$this->_group = null;		// Get the storage handler and store the cached data		$ret = $this->cache->store(serialize($data), $id, $group);		if ($this->_locktest->locked == true)		{			$this->cache->unlock($id, $group);		}		return $ret;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');// If the page class is defined, add to class as suffix.// It will be a separate class if the user starts it with a space?><div class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading') != 0) : ?><div class="page-header">	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1></div><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<div class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</div>		<div class="clearfix"></div>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><div class="clearfix"></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>		<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>		<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?> row-fluid">		<?php endif; ?>			<div class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?> span<?php echo round((12 / $this->columns));?>">			<?php					$this->item = &$item;					echo $this->loadTemplate('item');			?>			</div>			<?php $counter++; ?>			<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<div class="items-more">	<?php echo $this->loadTemplate('links'); ?>	</div><?php endif; ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter pull-right">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Manage View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewDatabase extends InstallerViewDefault{	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		// Get data from the model		$this->state = $this->get('State');		$this->changeSet = $this->get('Items');		$this->errors = $this->changeSet->check();		$this->results = $this->changeSet->getStatus();		$this->schemaVersion = $this->get('SchemaVersion');		$this->updateVersion = $this->get('UpdateVersion');		$this->filterParams  = $this->get('DefaultTextFilters');		$this->schemaVersion = ($this->schemaVersion) ?  $this->schemaVersion : JText::_('JNONE');		$this->updateVersion = ($this->updateVersion) ?  $this->updateVersion : JText::_('JNONE');		$this->pagination = $this->get('Pagination');		$this->errorCount = count($this->errors);		$errors = count($this->errors);		if (!(strncmp($this->schemaVersion, JVERSION, 5) === 0))		{			$this->errorCount++;		}		if (!$this->filterParams)		{			$this->errorCount++;		}		if (($this->updateVersion != JVERSION))		{			$this->errorCount++;		}		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= InstallerHelper::getActions();		/*		 * Set toolbar items for the page		 */		JToolbarHelper::custom('database.fix', 'refresh', 'refresh', 'COM_INSTALLER_TOOLBAR_DATABASE_FIX', false, false);		JToolbarHelper::divider();		parent::addToolbar();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_DATABASE');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of contacts. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactViewContacts extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 *	 * @return  void	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		ContactHelper::addSubmenu('contacts');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Preprocess the list of items to find ordering divisions.		// TODO: Complete the ordering stuff with nested sets		foreach ($this->items as &$item)		{			$item->order_up = true;			$item->order_dn = true;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		require_once JPATH_COMPONENT.'/helpers/contact.php';		$canDo	= ContactHelper::getActions($this->state->get('filter.category_id'));		$user	= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		JToolbarHelper::title(JText::_('COM_CONTACT_MANAGER_CONTACTS'), 'contact.png');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories('com_contact', 'core.create'))) > 0)		{			JToolbarHelper::addNew('contact.add');		}		if (($canDo->get('core.edit')) || ($canDo->get('core.edit.own')))		{			JToolbarHelper::editList('contact.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('contacts.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('contacts.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('contacts.archive');			JToolbarHelper::checkin('contacts.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'contacts.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('contacts.trash');		}		// Add a batch button		if ($user->authorise('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_contact');		}		JToolbarHelper::help('JHELP_COMPONENTS_CONTACTS_CONTACTS');		JHtmlSidebar::setAction('index.php?option=com_contact');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_CATEGORY'),			'filter_category_id',			JHtml::_('select.options', JHtml::_('category.options', 'com_contact'), 'value', 'text', $this->state->get('filter.category_id'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.ordering' => JText::_('JGRID_HEADING_ORDERING'),			'a.published' => JText::_('JSTATUS'),			'a.name' => JText::_('JGLOBAL_TITLE'),			'category_title' => JText::_('JCATEGORY'),			'ul.name' => JText::_('COM_CONTACT_FIELD_LINKED_USER_LABEL'),			'a.featured' => JText::_('JFEATURED'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'a.language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_content')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}JLoader::register('ContentHelper', __DIR__ . '/helpers/content.php');$controller = JControllerLegacy::getInstance('Content');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_tags_popular * * @package     Joomla.Site * @subpackage  mod_tags_popular * @since       3.1 */abstract class ModTagssimilarHelper{	public static function getList($params)	{		$db         = JFactory::getDbo();		$app        = JFactory::getApplication();		$user       = JFactory::getUser();		$groups     = implode(',', $user->getAuthorisedViewLevels());		$matchtype  = $params->get('matchtype', 'all');		$maximum    = $params->get('maximum', 5);		$tagsHelper = new JHelperTags;		$option     = $app->input->get('option');		$view       = $app->input->get('view');		$prefix     = $option . '.' . $view;		$id         = (array) $app->input->getObject('id');		// Strip off any slug data.		foreach ($id as $id)		{			if (substr_count($id, ':') > 0)			{				$idexplode = explode(':', $id);				$id        = $idexplode[0];			}		}		// For now assume com_tags and com_users do not have tags.		// This module does not apply to list views in general at this point.		if ($option != 'com_tags' && $view != 'category'  && $option != 'com_users')		{			$tagsToMatch = $tagsHelper->getTagIds($id, $prefix);			if (!$tagsToMatch || is_null($tagsToMatch))			{				return $results = false;			}			$tagCount = substr_count($tagsToMatch, ',') + 1;			$query = $db->getQuery(true)				->select(				array(					$db->quoteName('m.tag_id'),					$db->quoteName('m.core_content_id'),					$db->quoteName('m.content_item_id'),					$db->quoteName('m.type_alias'),						'COUNT( '  . $db->quoteName('tag_id') . ') AS ' . $db->quoteName('count'),					$db->quoteName('t.access'),					$db->quoteName('t.id'),					$db->quoteName('ct.router'),					$db->quoteName('cc.core_title'),					$db->quoteName('cc.core_alias'),					$db->quoteName('cc.core_catid'),					$db->quoteName('cc.core_language')					)			);			$query->from($db->quoteName('#__contentitem_tag_map', 'm'));			$query->join('INNER', $db->quoteName('#__tags', 't') . ' ON m.tag_id = t.id')				->join('INNER', $db->quoteName('#__ucm_content', 'cc') . ' ON m.core_content_id = cc.core_content_id')				->join('INNER', $db->quoteName('#__content_types', 'ct') . ' ON m.type_alias = ct.type_alias');			$query->where('t.access IN (' . $groups . ')');			$query->where($db->quoteName('m.tag_id') . ' IN (' . $tagsToMatch . ')');			// Don't show current item			$query->where('(' . $db->quoteName('m.content_item_id') . ' <> ' . $id . ' OR ' . $db->quoteName('m.type_alias') . ' <> ' . $db->quote($prefix) . ')');			// Only return published tags			$query->where($db->quoteName('cc.core_state') . ' = 1 ');			// Optionally filter on language			$language = JComponentHelper::getParams('com_tags')->get('tag_list_language_filter', 'all');			if ($language != 'all')			{				if ($language == 'current_language')				{					$language = JHelperContent::getCurrentLanguage();				}				$query->where($db->quoteName('cc.core_language') . ' IN (' . $db->quote($language) . ', ' . $db->quote('*') . ')');			}			$query->group($db->quoteName(array('m.core_content_id')));			if ($matchtype == 'all' && $tagCount > 0)			{				$query->having('COUNT( '  . $db->quoteName('tag_id') . ')  = ' . $tagCount);			}			elseif ($matchtype == 'half' && $tagCount > 0)			{				$tagCountHalf = ceil($tagCount / 2);				$query->having('COUNT( '  . $db->quoteName('tag_id') . ')  >= ' . $tagCountHalf);			}			$query->order($db->quoteName('count') . ' DESC');			$db->setQuery($query, 0, $maximum);			$results = $db->loadObjectList();			foreach ($results as $result)			{				$explodedAlias = explode('.', $result->type_alias);				$result->link = 'index.php?option=' . $explodedAlias[0] . '&view=' . $explodedAlias[1] . '&id=' . $result->content_item_id . '-' . $result->core_alias;			}			return $results;		}		else		{			return;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.framework');$n = count($this->items);$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<?php if ($this->params->get('show_no_articles', 1)) : ?>		<p><?php echo JText::_('COM_CONTENT_NO_ARTICLES'); ?></p>	<?php endif; ?><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm">	<?php if ($this->params->get('filter_field') != 'hide') : ?>	<fieldset class="filters">		<legend class="hidelabeltxt">			<?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?>		</legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?></label>			<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->state->get('list.filter')); ?>" class="inputbox" onchange="document.adminForm.submit();" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />		</div>	<?php endif; ?>	<?php if ($this->params->get('show_pagination_limit')) : ?>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	<?php endif; ?>	<?php if ($this->params->get('filter_field') != 'hide') :?>	</fieldset>	<?php endif; ?>	<div class="clr"></div>	<table class="category">		<?php if ($this->params->get('show_headings')) :?>		<thead>			<tr>				<th class="list-title" id="tableOrdering">					<?php echo JHtml::_('grid.sort', 'COM_CONTENT_HEADING_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<?php if ($date = $this->params->get('list_show_date')) : ?>				<th class="list-date" id="tableOrdering2">					<?php if ($date == "created") : ?>						<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.created', $listDirn, $listOrder); ?>					<?php elseif ($date == "modified") : ?>						<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.modified', $listDirn, $listOrder); ?>					<?php elseif ($date == "published") : ?>						<?php echo JHtml::_('grid.sort', 'COM_CONTENT_'.$date.'_DATE', 'a.publish_up', $listDirn, $listOrder); ?>					<?php endif; ?>				</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_author', 1)) : ?>				<th class="list-author" id="tableOrdering3">					<?php echo JHtml::_('grid.sort', 'JAUTHOR', 'author', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>				<?php if ($this->params->get('list_show_hits', 1)) : ?>				<th class="list-hits" id="tableOrdering4">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => &$article) : ?>			<tr class="cat-list-row<?php echo $i % 2; ?>">				<?php if (in_array($article->access, $this->user->getAuthorisedViewLevels())) : ?>					<td class="list-title">						<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catid)); ?>">							<?php echo $this->escape($article->title); ?></a>					</td>					<?php if ($this->params->get('list_show_date')) : ?>					<td class="list-date">						<?php						echo JHtml::_(							'date', $article->displayDate, $this->escape(								$this->params->get('date_format', JText::_('DATE_FORMAT_LC3'))							)						); ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_author', 1)) : ?>					<td class="list-author">						<?php if (!empty($article->author) || !empty($article->created_by_alias)) : ?>							<?php $author = $article->author ?>							<?php $author = ($article->created_by_alias ? $article->created_by_alias : $author);?>							<?php if (!empty($article->contactid ) &&  $this->params->get('link_author') == true):?>								<?php echo JHtml::_(										'link',										JRoute::_('index.php?option=com_contact&view=contact&id='.$article->contactid),										$author								); ?>							<?php else :?>								<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>							<?php endif; ?>						<?php endif; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('list_show_hits', 1)) : ?>					<td class="list-hits">						<?php echo $article->hits; ?>					</td>					<?php endif; ?>				<?php else : ?>				<td>					<?php						echo $this->escape($article->title).' : ';						$menu		= JFactory::getApplication()->getMenu();						$active		= $menu->getActive();						$itemId		= $active->id;						$link = JRoute::_('index.php?option=com_users&view=login&Itemid='.$itemId);						$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($article->slug));						$fullURL = new JURI($link);						$fullURL->setVar('return', base64_encode($returnURL));					?>					<a href="<?php echo $fullURL; ?>" class="register">					<?php echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE'); ?></a>				</td>				<?php endif; ?>			</tr>			<?php endforeach; ?>		</tbody>	</table><?php endif; ?><?php // Code to add a link to submit an article. ?><?php if ($this->category->getParams()->get('access-create')) : ?>	<?php echo JHtml::_('icon.create', $this->category, $this->category->params, array(), true); ?><?php  endif; ?><?php // Add pagination links ?><?php if (!empty($this->items)) : ?>	<?php if (($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>		 	<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="filter_order" value="" />		<input type="hidden" name="filter_order_Dir" value="" />		<input type="hidden" name="limitstart" value="" />	</div></form><?php endif; ?>
<?php/** * @package    Joomla.Build * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */// Set flag that this is a parent file.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}require_once JPATH_LIBRARIES . '/import.php';JLoader::registerPrefix('J', __DIR__ . '/libraries');require_once JPATH_LIBRARIES . '/cms.php';/** * This script will recompile the CSS files for templates using Less to build their stylesheets. * * @package  Joomla.Build * @since    3.0 */class GenerateCss extends JApplicationCli{	/**	 * Entry point for the script	 *	 * @return  void	 *	 * @since   3.0	 */	public function doExecute()	{		$templates = array(			JPATH_ADMINISTRATOR . '/templates/isis/less/template.less' => JPATH_ADMINISTRATOR . '/templates/isis/css/template.css',			JPATH_ADMINISTRATOR . '/templates/hathor/less/template.less' => JPATH_ADMINISTRATOR . '/templates/hathor/css/template.css',			JPATH_ADMINISTRATOR . '/templates/hathor/less/colour_blue.less' => JPATH_ADMINISTRATOR . '/templates/hathor/css/colour_blue.css',			JPATH_ADMINISTRATOR . '/templates/hathor/less/colour_brown.less' => JPATH_ADMINISTRATOR . '/templates/hathor/css/colour_brown.css',			JPATH_ADMINISTRATOR . '/templates/hathor/less/colour_standard.less' => JPATH_ADMINISTRATOR . '/templates/hathor/css/colour_standard.css',			JPATH_SITE . '/templates/protostar/less/template.less' => JPATH_SITE . '/templates/protostar/css/template.css',			// Below files are to recompile the default Bootstrap CSS files			__DIR__ . '/less/bootstrap-extended.less' => JPATH_SITE . '/media/jui/css/bootstrap-extended.css',			__DIR__ . '/less/bootstrap-rtl.less' => JPATH_SITE . '/media/jui/css/bootstrap-rtl.css'		);		$less = new JLess;		foreach ($templates as $source => $output)		{			try			{				$less->compileFile($source, $output);			}			catch (Exception $e)			{				echo $e->getMessage();			}		}	}}JApplicationCli::getInstance('GenerateCss')->execute();
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'menu.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><div class="menu-edit"><form action="<?php echo JRoute::_('index.php?option=com_menus&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form"><div class="col main-section">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_MENUS_MENU_DETAILS');?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<li><?php echo $this->form->getLabel('menutype'); ?>				<?php echo $this->form->getInput('menutype'); ?></li>				<li><?php echo $this->form->getLabel('description'); ?>				<?php echo $this->form->getInput('description'); ?></li>			</ul>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?>	</div></form><div class="clr"></div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('text');/** * Supports a modal article picker. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class JFormFieldModulePosition extends JFormFieldText{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ModulePosition';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 *	 * @since   1.6	 */	protected function getInput()	{		// Get the client id.		$clientId = $this->element['client_id'];		if (!isset($clientId))		{			$clientName = $this->element['client'];			if (isset($clientName))			{				$client = JApplicationHelper::getClientInfo($clientName, true);				$clientId = $client->id;			}		}		if (!isset($clientId) && $this->form instanceof JForm)		{			$clientId = $this->form->getValue('client_id');		}		$clientId = (int) $clientId;		// Load the modal behavior script.		JHtml::_('behavior.modal', 'a.modal');		// Build the script.		$script = array();		$script[] = '	function jSelectPosition_' . $this->id . '(name) {';		$script[] = '		document.id("' . $this->id . '").value = name;';		$script[] = '		SqueezeBox.close();';		$script[] = '	}';		// Add the script to the document head.		JFactory::getDocument()->addScriptDeclaration(implode("\n", $script));		// Setup variables for display.		$html = array();		$link = 'index.php?option=com_modules&view=positions&layout=modal&tmpl=component&function=jSelectPosition_' . $this->id . '&amp;client_id=' . $clientId;		// The current user display field.		$html[] = '<div class="input-append">';		$html[] = parent::getInput()			. '<a class="btn modal" title="' . JText::_('COM_MODULES_CHANGE_POSITION_TITLE') . '"  href="' . $link . '" rel="{handler: \'iframe\', size: {x: 800, y: 450}}">'			. '<i class="icon-screenshot"></i> '			. JText::_('COM_MODULES_CHANGE_POSITION_BUTTON') . '</a>';		$html[] = '</div>';		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories helper. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesHelper{	/**	 * Configure the Submenu links.	 *	 * @param   string    The extension being used for the categories.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($extension)	{		// Avoid nonsense situation.		if ($extension == 'com_categories')		{			return;		}		$parts = explode('.', $extension);		$component = $parts[0];		if (count($parts) > 1)		{			$section = $parts[1];		}		// Try to find the component helper.		$eName = str_replace('com_', '', $component);		$file = JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component . '/helpers/' . $eName . '.php');		if (file_exists($file))		{			require_once $file;			$prefix = ucfirst(str_replace('com_', '', $component));			$cName = $prefix . 'Helper';			if (class_exists($cName))			{				if (is_callable(array($cName, 'addSubmenu')))				{					$lang = JFactory::getLanguage();					// loading language file from the administrator/language directory then					// loading language file from the administrator/components/*extension*/language directory					$lang->load($component, JPATH_BASE, null, false, false)						|| $lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), null, false, false)						|| $lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)						|| $lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), $lang->getDefault(), false, false);					call_user_func(array($cName, 'addSubmenu'), 'categories' . (isset($section) ? '.' . $section : ''));				}			}		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   string    $extension     The extension.	 * @param   integer   $categoryId    The category ID.	 *	 * @return  JObject	 * @since   1.6	 */	public static function getActions($extension, $categoryId = 0)	{		$user = JFactory::getUser();		$result = new JObject;		$parts = explode('.', $extension);		$component = $parts[0];		if (empty($categoryId))		{			$assetName = $component;			$level = 'component';		}		else		{			$assetName = $component . '.category.' . (int) $categoryId;			$level = 'category';		}		$actions = JAccess::getActions($component, $level);		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}	public static function getAssociations($pk, $extension = 'com_content')	{		$associations = array();		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->from('#__categories as c')			->join('INNER', '#__associations as a ON a.id = c.id AND a.context=' . $db->quote('com_categories.item'))			->join('INNER', '#__associations as a2 ON a.key = a2.key')			->join('INNER', '#__categories as c2 ON a2.id = c2.id AND c2.extension = ' . $db->quote($extension))			->where('c.id =' . (int) $pk)			->where('c.extension = ' . $db->quote($extension));		$select = array(			'c2.language',			$query->concatenate(array('c2.id', 'c2.alias'), ':') . ' AS id'		);		$query->select($select);		$db->setQuery($query);		$contentitems = $db->loadObjectList('language');		// Check for a database error.		if ($error = $db->getErrorMsg())		{			JError::raiseWarning(500, $error);			return false;		}		foreach ($contentitems as $tag => $item)		{			$associations[$tag] = $item->id;		}		return $associations;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Add specific helper files for html generationJHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$user		= JFactory::getUser();$userId		= $user->get('id');$client		= $this->state->get('filter.client_id', 0) ? JText::_('JADMINISTRATOR') : JText::_('JSITE');$clientId	= $this->state->get('filter.client_id', 0);?><form action="<?php echo JRoute::_('index.php?option=com_languages&view=installed&client='.$clientId); ?>" method="post" id="adminForm" name="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<table class="table table-striped">			<thead>				<tr>					<th width="20">						<?php echo JText::_('COM_LANGUAGES_HEADING_NUM'); ?>					</th>					<th width="20">						&#160;					</th>					<th width="25%" class="title">						<?php echo JText::_('COM_LANGUAGES_HEADING_LANGUAGE'); ?>					</th>					<th>						<?php echo JText::_('COM_LANGUAGES_FIELD_LANG_TAG_LABEL'); ?>					</th>					<th>						<?php echo JText::_('JCLIENT'); ?>					</th>					<th>						<?php echo JText::_('COM_LANGUAGES_HEADING_DEFAULT'); ?>					</th>					<th>						<?php echo JText::_('JVERSION'); ?>					</th>					<th>						<?php echo JText::_('JDATE'); ?>					</th>					<th>						<?php echo JText::_('JAUTHOR'); ?>					</th>					<th>						<?php echo JText::_('COM_LANGUAGES_HEADING_AUTHOR_EMAIL'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="10">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php foreach ($this->rows as $i => $row) :			$canCreate = $user->authorise('core.create',     'com_languages');			$canEdit   = $user->authorise('core.edit',       'com_languages');			$canChange = $user->authorise('core.edit.state', 'com_languages');			?>				<tr class="row<?php echo $i % 2; ?>">					<td width="20">						<?php echo $this->pagination->getRowOffset($i); ?>					</td>					<td width="20">						<?php echo JHtml::_('languages.id', $i, $row->language);?>					</td>					<td width="25%">						<?php echo $this->escape($row->name); ?>					</td>					<td align="center">						<?php echo $this->escape($row->language); ?>					</td>					<td align="center">						<?php echo $client;?>					</td>					<td align="center">						<?php echo JHtml::_('jgrid.isdefault', $row->published, $i, 'installed.', !$row->published && $canChange);?>					</td>					<td align="center">						<?php echo $this->escape($row->version); ?>					</td>					<td align="center">						<?php echo $this->escape($row->creationDate); ?>					</td>					<td align="center">						<?php echo $this->escape($row->author); ?>					</td>					<td align="center">						<?php echo $this->escape($row->authorEmail); ?>					</td>				</tr>			<?php endforeach;?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/*~ class.pop3.php.---------------------------------------------------------------------------.|  Software: PHPMailer - PHP email class                                    ||   Version: 5.2.2                                                          ||      Site: https://code.google.com/a/apache-extras.org/p/phpmailer/       || ------------------------------------------------------------------------- ||     Admin: Jim Jagielski (project admininistrator)                        ||   Authors: Andy Prevost (codeworxtech) codeworxtech@users.sourceforge.net ||          : Marcus Bointon (coolbru) coolbru@users.sourceforge.net         ||          : Jim Jagielski (jimjag) jimjag@gmail.com                        ||   Founder: Brent R. Matzelle (original founder)                           || Copyright (c) 2010-2012, Jim Jagielski. All Rights Reserved.              || Copyright (c) 2004-2009, Andy Prevost. All Rights Reserved.               || Copyright (c) 2001-2003, Brent R. Matzelle                                || ------------------------------------------------------------------------- ||   License: Distributed under the Lesser General Public License (LGPL)     ||            http://www.gnu.org/copyleft/lesser.html                        || This program is distributed in the hope that it will be useful - WITHOUT  || ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or     || FITNESS FOR A PARTICULAR PURPOSE.                                         |'---------------------------------------------------------------------------'*//** * PHPMailer - PHP POP Before SMTP Authentication Class * NOTE: Designed for use with PHP version 5 and up * @package PHPMailer * @author Andy Prevost * @author Marcus Bointon * @author Jim Jagielski * @copyright 2010 - 2012 Jim Jagielski * @copyright 2004 - 2009 Andy Prevost * @license http://www.gnu.org/copyleft/lesser.html Distributed under the Lesser General Public License (LGPL) *//** * PHP POP-Before-SMTP Authentication Class * * Version 5.2.2 * * @license: LGPL, see PHPMailer License * * Specifically for PHPMailer to allow POP before SMTP authentication. * Does not yet work with APOP - if you have an APOP account, contact Jim Jagielski * and we can test changes to this script. * * This class is based on the structure of the SMTP class originally authored by Chris Ryan * * This class is rfc 1939 compliant and implements all the commands * required for POP3 connection, authentication and disconnection. * * @package PHPMailer * @author Richard Davey (orig) <rich@corephp.co.uk> * @author Andy Prevost * @author Jim Jagielski */class POP3 {  /**   * Default POP3 port   * @var int   */  public $POP3_PORT = 110;  /**   * Default Timeout   * @var int   */  public $POP3_TIMEOUT = 30;  /**   * POP3 Carriage Return + Line Feed   * @var string   */  public $CRLF = "\r\n";  /**   * Displaying Debug warnings? (0 = now, 1+ = yes)   * @var int   */  public $do_debug = 2;  /**   * POP3 Mail Server   * @var string   */  public $host;  /**   * POP3 Port   * @var int   */  public $port;  /**   * POP3 Timeout Value   * @var int   */  public $tval;  /**   * POP3 Username   * @var string   */  public $username;  /**   * POP3 Password   * @var string   */  public $password;  /**   * Sets the POP3 PHPMailer Version number   * @var string   */  public $Version         = '5.2.2';  /////////////////////////////////////////////////  // PROPERTIES, PRIVATE AND PROTECTED  /////////////////////////////////////////////////  /**   * @var resource Resource handle for the POP connection socket   */  private $pop_conn;  /**   * @var boolean Are we connected?   */  private $connected;  /**   * @var array Error container   */  private $error;     //  Error log array  /**   * Constructor, sets the initial values   * @access public   * @return POP3   */  public function __construct() {    $this->pop_conn  = 0;    $this->connected = false;    $this->error     = null;  }  /**   * Combination of public events - connect, login, disconnect   * @access public   * @param string $host   * @param bool|int $port   * @param bool|int $tval   * @param string $username   * @param string $password   * @param int $debug_level   * @return bool   */  public function Authorise ($host, $port = false, $tval = false, $username, $password, $debug_level = 0) {    $this->host = $host;    //  If no port value is passed, retrieve it    if ($port == false) {      $this->port = $this->POP3_PORT;    } else {      $this->port = $port;    }    //  If no port value is passed, retrieve it    if ($tval == false) {      $this->tval = $this->POP3_TIMEOUT;    } else {      $this->tval = $tval;    }    $this->do_debug = $debug_level;    $this->username = $username;    $this->password = $password;    //  Refresh the error log    $this->error = null;    //  Connect    $result = $this->Connect($this->host, $this->port, $this->tval);    if ($result) {      $login_result = $this->Login($this->username, $this->password);      if ($login_result) {        $this->Disconnect();        return true;      }    }    //  We need to disconnect regardless if the login succeeded    $this->Disconnect();    return false;  }  /**   * Connect to the POP3 server   * @access public   * @param string $host   * @param bool|int $port   * @param integer $tval   * @return boolean   */  public function Connect ($host, $port = false, $tval = 30) {    //  Are we already connected?    if ($this->connected) {      return true;    }    /*    On Windows this will raise a PHP Warning error if the hostname doesn't exist.    Rather than supress it with @fsockopen, let's capture it cleanly instead    */    set_error_handler(array(&$this, 'catchWarning'));    //  Connect to the POP3 server    $this->pop_conn = fsockopen($host,    //  POP3 Host                  $port,    //  Port #                  $errno,   //  Error Number                  $errstr,  //  Error Message                  $tval);   //  Timeout (seconds)    //  Restore the error handler    restore_error_handler();    //  Does the Error Log now contain anything?    if ($this->error && $this->do_debug >= 1) {      $this->displayErrors();    }    //  Did we connect?    if ($this->pop_conn == false) {      //  It would appear not...      $this->error = array(        'error' => "Failed to connect to server $host on port $port",        'errno' => $errno,        'errstr' => $errstr      );      if ($this->do_debug >= 1) {        $this->displayErrors();      }      return false;    }    //  Increase the stream time-out    //  Check for PHP 4.3.0 or later    if (version_compare(phpversion(), '5.0.0', 'ge')) {      stream_set_timeout($this->pop_conn, $tval, 0);    } else {      //  Does not work on Windows      if (substr(PHP_OS, 0, 3) !== 'WIN') {        socket_set_timeout($this->pop_conn, $tval, 0);      }    }    //  Get the POP3 server response    $pop3_response = $this->getResponse();    //  Check for the +OK    if ($this->checkResponse($pop3_response)) {    //  The connection is established and the POP3 server is talking    $this->connected = true;      return true;    }    return false;  }  /**   * Login to the POP3 server (does not support APOP yet)   * @access public   * @param string $username   * @param string $password   * @return boolean   */  public function Login ($username = '', $password = '') {    if ($this->connected == false) {      $this->error = 'Not connected to POP3 server';      if ($this->do_debug >= 1) {        $this->displayErrors();      }    }    if (empty($username)) {      $username = $this->username;    }    if (empty($password)) {      $password = $this->password;    }    $pop_username = "USER $username" . $this->CRLF;    $pop_password = "PASS $password" . $this->CRLF;    //  Send the Username    $this->sendString($pop_username);    $pop3_response = $this->getResponse();    if ($this->checkResponse($pop3_response)) {      //  Send the Password      $this->sendString($pop_password);      $pop3_response = $this->getResponse();      if ($this->checkResponse($pop3_response)) {        return true;      }    }    return false;  }  /**   * Disconnect from the POP3 server   * @access public   */  public function Disconnect () {    $this->sendString('QUIT');    fclose($this->pop_conn);  }  /////////////////////////////////////////////////  //  Private Methods  /////////////////////////////////////////////////  /**   * Get the socket response back.   * $size is the maximum number of bytes to retrieve   * @access private   * @param integer $size   * @return string   */  private function getResponse ($size = 128) {    $pop3_response = fgets($this->pop_conn, $size);    return $pop3_response;  }  /**   * Send a string down the open socket connection to the POP3 server   * @access private   * @param string $string   * @return integer   */  private function sendString ($string) {    $bytes_sent = fwrite($this->pop_conn, $string, strlen($string));    return $bytes_sent;  }  /**   * Checks the POP3 server response for +OK or -ERR   * @access private   * @param string $string   * @return boolean   */  private function checkResponse ($string) {    if (substr($string, 0, 3) !== '+OK') {      $this->error = array(        'error' => "Server reported an error: $string",        'errno' => 0,        'errstr' => ''      );      if ($this->do_debug >= 1) {        $this->displayErrors();      }      return false;    } else {      return true;    }  }  /**   * If debug is enabled, display the error message array   * @access private   */  private function displayErrors () {    echo '<pre>';    foreach ($this->error as $single_error) {      print_r($single_error);    }    echo '</pre>';  }  /**   * Takes over from PHP for the socket warning handler   * @access private   * @param integer $errno   * @param string $errstr   * @param string $errfile   * @param integer $errline   */  private function catchWarning ($errno, $errstr, $errfile, $errline) {    $this->error[] = array(      'error' => "Connecting to the POP3 server raised a PHP warning: ",      'errno' => $errno,      'errstr' => $errstr    );  }  //  End of class}?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblink Table class * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksTableWeblink extends JTable{	/**	 * Helper object for storing and deleting tag information.	 *	 * @var    JHelperTags	 * @since  3.1	 */	protected $tagsHelper = null;	/**	 * Constructor	 *	 * @param JDatabaseDriver A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__weblinks', 'id', $db);		$this->tagsHelper = new JHelperTags();		$this->tagsHelper->typeAlias = 'com_weblinks.weblink';	}	/**	 * Overloaded bind function to pre-process the params.	 *	 * @param   array  Named array	 * @return  null|string	null is operation was satisfactory, otherwise returns an error	 * @see     JTable:bind	 * @since   1.5	 */	public function bind($array, $ignore = '')	{		if (isset($array['params']) && is_array($array['params']))		{			$registry = new JRegistry;			$registry->loadArray($array['params']);			$array['params'] = (string) $registry;		}		if (isset($array['metadata']) && is_array($array['metadata']))		{			$registry = new JRegistry;			$registry->loadArray($array['metadata']);			$array['metadata'] = (string) $registry;		}		if (isset($array['images']) && is_array($array['images']))		{			$registry = new JRegistry;			$registry->loadArray($array['images']);			$array['images'] = (string) $registry;		}		return parent::bind($array, $ignore);	}	/**	 * Overload the store method for the Weblinks table.	 *	 * @param   boolean	Toggle whether null values should be updated.	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function store($updateNulls = false)	{		$date	= JFactory::getDate();		$user	= JFactory::getUser();		if ($this->id)		{			// Existing item			$this->modified		= $date->toSql();			$this->modified_by	= $user->get('id');		}		else		{			// New weblink. A weblink created and created_by field can be set by the user,			// so we don't touch either of these if they are set.			if (!(int) $this->created)			{				$this->created = $date->toSql();			}			if (empty($this->created_by))			{				$this->created_by = $user->get('id');			}		}		// Set publish_up to null date if not set		if (!$this->publish_up)		{			$this->publish_up = $this->_db->getNullDate();		}		// Set publish_down to null date if not set		if (!$this->publish_down)		{			$this->publish_down = $this->_db->getNullDate();		}		// Verify that the alias is unique		$table = JTable::getInstance('Weblink', 'WeblinksTable');		if ($table->load(array('alias' => $this->alias, 'catid' => $this->catid)) && ($table->id != $this->id || $this->id == 0))		{			$this->setError(JText::_('COM_WEBLINKS_ERROR_UNIQUE_ALIAS'));			return false;		}		$this->tagsHelper->preStoreProcess($this);		$result = parent::store($updateNulls);		return $result && $this->tagsHelper->postStoreProcess($this);	}	/**	 * Overloaded check method to ensure data integrity.	 *	 * @return  boolean  True on success.	 */	public function check()	{		if (JFilterInput::checkAttribute(array ('href', $this->url)))		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_PROVIDE_URL'));			return false;		}		// check for valid name		if (trim($this->title) == '')		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_TITLE'));			return false;		}		// check for existing name		$query = 'SELECT id FROM #__weblinks WHERE title = '.$this->_db->quote($this->title).' AND catid = '.(int) $this->catid;		$this->_db->setQuery($query);		$xid = (int) $this->_db->loadResult();		if ($xid && $xid != (int) $this->id)		{			$this->setError(JText::_('COM_WEBLINKS_ERR_TABLES_NAME'));			return false;		}		if (empty($this->alias))		{			$this->alias = $this->title;		}		$this->alias = JApplication::stringURLSafe($this->alias);		if (trim(str_replace('-', '', $this->alias)) == '')		{			$this->alias = JFactory::getDate()->format("Y-m-d-H-i-s");		}		// Check the publish down date is not earlier than publish up.		if ($this->publish_down > $this->_db->getNullDate() && $this->publish_down < $this->publish_up)		{			$this->setError(JText::_('JGLOBAL_START_PUBLISH_AFTER_FINISH'));			return false;		}		// clean up keywords -- eliminate extra spaces between phrases		// and cr (\r) and lf (\n) characters from string		if (!empty($this->metakey))		{			// only process if not empty			$bad_characters = array("\n", "\r", "\"", "<", ">"); // array of characters to remove			$after_clean = JString::str_ireplace($bad_characters, "", $this->metakey); // remove bad characters			$keys = explode(',', $after_clean); // create array using commas as delimiter			$clean_keys = array();			foreach ($keys as $key)			{				if (trim($key)) {  // ignore blank keywords					$clean_keys[] = trim($key);				}			}			$this->metakey = implode(", ", $clean_keys); // put array back together delimited by ", "		}		return true;	}	/**	 * Override parent delete method to delete tags information.	 *	 * @param   integer  $pk  Primary key to delete.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  UnexpectedValueException	 */	public function delete($pk = null)	{		$result = parent::delete($pk);		return $result && $this->tagsHelper->deleteTagData($this, $pk);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.0.4	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.'='.implode(' OR '.$k.'=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = '.(int) $userId.')';		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl) .			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')' .			$checkin		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$input = JFactory::getApplication()->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'category.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><div class="category-edit"><form action="<?php echo JRoute::_('index.php?option=com_categories&extension=' . $input->getCmd('extension', 'com_content') . '&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('COM_CATEGORIES_FIELDSET_DETAILS');?></legend>			<ul class="adminformlist">				<li><?php echo $this->form->getLabel('title'); ?>				<?php echo $this->form->getInput('title'); ?></li>				<li><?php echo $this->form->getLabel('alias'); ?>				<?php echo $this->form->getInput('alias'); ?></li>				<li><?php echo $this->form->getLabel('extension'); ?>				<?php echo $this->form->getInput('extension'); ?></li>				<li><?php echo $this->form->getLabel('parent_id'); ?>				<?php echo $this->form->getInput('parent_id'); ?></li>				<li><?php echo $this->form->getLabel('published'); ?>				<?php echo $this->form->getInput('published'); ?></li>				<li><?php echo $this->form->getLabel('access'); ?>				<?php echo $this->form->getInput('access'); ?></li>				<?php if ($this->canDo->get('core.admin')) : ?>					<li><span class="faux-label"><?php echo JText::_('JGLOBAL_ACTION_PERMISSIONS_LABEL'); ?></span>      					<button type="button" onclick="document.location.href='#access-rules';">      					<?php echo JText::_('JGLOBAL_PERMISSIONS_ANCHOR'); ?></button>    				</li>    			<?php endif; ?>				<li><?php echo $this->form->getLabel('language'); ?>				<?php echo $this->form->getInput('language'); ?></li>				<!-- Tag field -->				<?php foreach ($this->get('form')->getFieldset('jmetadata') as $field) : ?>					<?php if ($field->name == 'jform[metadata][tags][]') :?>						<li>							<?php echo $field->label; ?>							<?php echo $field->input; ?>						</li>					<?php endif; ?>				<?php endforeach; ?>				<li><?php echo $this->form->getLabel('id'); ?>				<?php echo $this->form->getInput('id'); ?></li>				<li><?php echo $this->form->getLabel('hits'); ?>				<?php echo $this->form->getInput('hits'); ?></li>			</ul>			<div class="clr"></div>			<?php echo $this->form->getLabel('description'); ?>			<div class="clr"></div>			<?php echo $this->form->getInput('description'); ?>			<div class="clr"></div>		</fieldset>	</div>	<div class="col options-section">		<?php echo JHtml::_('sliders.start', 'categories-sliders-' . $this->item->id, array('useCookie' => 1)); ?>			<?php echo $this->loadTemplate('options'); ?>			<div class="clr"></div>			<?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'), 'meta-options'); ?>			<fieldset class="panelform">				<legend class="element-invisible"><?php echo JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS'); ?></legend>				<?php echo $this->loadTemplate('metadata'); ?>			</fieldset>			<?php				$fieldSets = $this->form->getFieldsets('attribs');					foreach ($fieldSets as $name => $fieldSet) :						if ($name != 'editorConfig' && $name != 'basic-limited') :							$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL';							echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');							if (isset($fieldSet->description) && trim($fieldSet->description)) :								echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';							endif;					?>						<div class="clr"></div>						<fieldset class="panelform">							<ul class="adminformlist">								<?php foreach ($this->form->getFieldset($name) as $field) : ?>									<li><?php echo $field->label; ?>									<?php echo $field->input; ?></li>								<?php endforeach; ?>							</ul>						</fieldset>						<?php endif; ?>					<?php endforeach;?>			<?php				$fieldSets = $this->form->getFieldsets('associations');				foreach ($fieldSets as $name => $fieldSet) :					$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL';					echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');						if (isset($fieldSet->description) && trim($fieldSet->description)) :							echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';						endif;						?>					<div class="clr"></div>					<fieldset class="panelform">						<ul class="adminformlist">							<?php foreach ($this->form->getFieldset($name) as $field) : ?>								<li><?php echo $field->label; ?>								<?php echo $field->input; ?></li>							<?php endforeach; ?>						</ul>					</fieldset>				<?php endforeach;?>		<?php echo JHtml::_('sliders.end'); ?>	</div>	<div class="clr"></div>	<?php if ($this->canDo->get('core.admin')) : ?>		<div  class="col rules-section">			<?php echo JHtml::_('sliders.start', 'permissions-sliders-' . $this->item->id, array('useCookie' => 1)); ?>			<?php echo JHtml::_('sliders.panel', JText::_('COM_CATEGORIES_FIELDSET_RULES'), 'access-rules'); ?>			<fieldset class="panelform">			<legend class="element-invisible"><?php echo JText::_('COM_CATEGORIES_FIELDSET_RULES'); ?></legend>				<?php echo $this->form->getLabel('rules'); ?>				<?php echo $this->form->getInput('rules'); ?>			</fieldset>			<?php echo JHtml::_('sliders.end'); ?>		</div>	<?php endif; ?>	<div>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div></form><div class="clr"></div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Media component * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.0 */class MediaViewImages extends JViewLegacy{	public function display($tpl = null)	{		$config = JComponentHelper::getParams('com_media');		$app	= JFactory::getApplication();		$lang	= JFactory::getLanguage();		$append = '';		JHtml::_('behavior.framework', true);		JHtml::_('script', 'media/popup-imagemanager.js', true, true);		JHtml::_('stylesheet', 'media/popup-imagemanager.css', array(), true);		if ($lang->isRTL())		{			JHtml::_('stylesheet', 'media/popup-imagemanager_rtl.css', array(), true);		}		/*		 * Display form for FTP credentials?		 * Don't set them here, as there are other functions called before this one if there is any file write operation		 */		$ftp = !JClientHelper::hasCredentials('ftp');		$this->session = JFactory::getSession();		$this->config = $config;		$this->state = $this->get('state');		$this->folderList = $this->get('folderList');		$this->require_ftp = $ftp;		parent::display($tpl);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :			if (!isset($this->items[$this->parent->id][$id + 1]))			{				$class = ' class="last"';			}			?>			<div <?php echo $class; ?> >			<?php $class = ''; ?>				<h3 class="page-header item-title">					<a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($item->id)); ?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_CONTACT_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">							<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">						<?php						$this->items[$item->id] = $item->getChildren();						$this->parent = $item;						$this->maxLevelcat--;						echo $this->loadTemplate('items');						$this->parent = $item->getParent();						$this->maxLevelcat++;						?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>		<li class="imgOutline thumbnail height-80 width-80 center">			<?php if ($user->authorise('core.delete', 'com_media')):?>				<a class="close delete-item" target="_top" href="index.php?option=com_media&amp;task=file.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_img->name; ?>" rel="<?php echo $this->_tmp_img->name; ?>" title="<?php echo JText::_('JACTION_DELETE');?>">x</a>				<input class="pull-left" type="checkbox" name="rm[]" value="<?php echo $this->_tmp_img->name; ?>" />				<div class="clearfix"></div>			<?php endif;?>			<div class="height-50">				<a class="img-preview" href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" >					<?php echo JHtml::_('image', COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_60, 'height' => $this->_tmp_img->height_60)); ?>				</a>			</div>			<div class="small">				<a href="<?php echo COM_MEDIA_BASEURL.'/'.$this->_tmp_img->path_relative; ?>" title="<?php echo $this->_tmp_img->name; ?>" class="preview"><?php echo JHtml::_('string.truncate', $this->_tmp_img->name, 10, false); ?></a>			</div>		</li><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$showhelp = $params->get('showhelp', 1);//// Site SubMenu//$menu->addChild(new JMenuNode(JText::_('MOD_MENU_SYSTEM'), null, 'disabled'));//// Users Submenu//if ($user->authorise('core.manage', 'com_users')){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COM_USERS'), null, 'disabled'));}//// Menus Submenu//if ($user->authorise('core.manage', 'com_menus')){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_MENUS'), null, 'disabled'));}//// Content Submenu//if ($user->authorise('core.manage', 'com_content')){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COM_CONTENT'), null, 'disabled'));}//// Components Submenu//// Get the authorised components and sub-menus.$components = ModMenuHelper::getComponents(true);// Check if there are any components, otherwise, don't display the components menu itemif ($components){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COMPONENTS'), null, 'disabled'));}//// Extensions Submenu//$im = $user->authorise('core.manage', 'com_installer');$mm = $user->authorise('core.manage', 'com_modules');$pm = $user->authorise('core.manage', 'com_plugins');$tm = $user->authorise('core.manage', 'com_templates');$lm = $user->authorise('core.manage', 'com_languages');if ($im || $mm || $pm || $tm || $lm){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSIONS'), null, 'disabled'));}//// Help Submenu//if ($showhelp == 1) {$menu->addChild(new JMenuNode(JText::_('MOD_MENU_HELP'), null, 'disabled'));}
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$this->fieldsets = $this->form->getFieldsets('params');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'plugin.cancel' || document.formvalidator.isValid(document.id('style-form')))		{			Joomla.submitform(task, document.getElementById('style-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_plugins&layout=edit&extension_id='.(int) $this->item->extension_id); ?>" method="post" name="adminForm" id="style-form" class="form-validate form-horizontal">	<fieldset>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('JDETAILS', true)); ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('name'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('name'); ?>						<span class="readonly plg-name"><?php echo JText::_($this->item->name);?></span>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('enabled'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('enabled'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('ordering'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('ordering'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('folder'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('folder'); ?>					</div>				</div>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('element'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('element'); ?>					</div>				</div>				<?php if ($this->item->extension_id) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('extension_id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('extension_id'); ?>						</div>					</div>				<?php endif; ?>				<!-- Plugin metadata -->				<?php if ($this->item->xml) : ?>					<?php if ($text = trim($this->item->xml->description)) : ?>						<div class="control-group">							<label id="jform_extdescription-lbl" class="control-label">								<?php echo JText::_('JGLOBAL_DESCRIPTION'); ?>							</label>							<div class="controls disabled">								<?php echo JText::_($text); ?>							</div>						</div>					<?php endif; ?>				<?php else : ?>					<div class="alert alert-error">						<?php echo JText::_('COM_PLUGINS_XML_ERR'); ?>					</div>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo $this->loadTemplate('options'); ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class JFormFieldNewsfeeds extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Newsfeeds';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('id As value, name As text')			->from('#__newsfeeds AS a')			->order('a.name');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $db->getMessage());		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.modal');/** * View class for a list of messages. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesViewMessages extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= MessagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_MESSAGES_MANAGER_MESSAGES'), 'inbox.png');		if ($canDo->get('core.create'))		{			JToolbarHelper::addNew('message.add');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::divider();			JToolbarHelper::publish('messages.publish', 'COM_MESSAGES_TOOLBAR_MARK_AS_READ');			JToolbarHelper::unpublish('messages.unpublish', 'COM_MESSAGES_TOOLBAR_MARK_AS_UNREAD');		}		if ($state->get('filter.state') == -2 && $canDo->get('core.delete'))		{			JToolbarHelper::divider();			JToolbarHelper::deleteList('', 'messages.delete', 'JTOOLBAR_EMPTY_TRASH');		} elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::divider();			JToolbarHelper::trash('messages.trash');		}		//JToolbarHelper::addNew('module.add');		JToolbarHelper::divider();		$bar = JToolBar::getInstance('toolbar');		JHtml::_('bootstrap.modal', 'collapseModal');		$title = JText::_('COM_MESSAGES_TOOLBAR_MY_SETTINGS');		$dhtml = "<a class=\"btn modal btn-small\" href=\"index.php?option=com_messages&amp;view=config&amp;tmpl=component\"					rel=\"{handler:'iframe', size:{x:700,y:300}}\">					<i class=\"icon-cog\" title=\"$title\"></i>$title</a>";		$bar->appendButton('Custom', $dhtml, 'config');		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_messages');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_MESSAGING_INBOX');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_menu * * @package     Joomla.Administrator * @subpackage  mod_menu * @since       1.5 */abstract class ModMenuHelper{	/**	 * Get a list of the available menus.	 *	 * @return  array  An array of the available menus (from the menu types table).	 * @since   1.6	 */	public static function getMenus()	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('a.*, SUM(b.home) AS home')			->from('#__menu_types AS a')			->join('LEFT', '#__menu AS b ON b.menutype = a.menutype AND b.home != 0')			->select('b.language')			->join('LEFT', '#__languages AS l ON l.lang_code = language')			->select('l.image')			->select('l.sef')			->select('l.title_native')			->where('(b.client_id = 0 OR b.client_id IS NULL)');		//sqlsrv change		$query->group('a.id, a.menutype, a.description, a.title, b.menutype,b.language,l.image,l.sef,l.title_native');		$db->setQuery($query);		$result = $db->loadObjectList();		return $result;	}	/**	 * Get a list of the authorised, non-special components to display in the components menu.	 *	 * @param   boolean	$authCheck	An optional switch to turn off the auth check (to support custom layouts 'grey out' behaviour).	 *	 * @return  array  A nest array of component objects and submenus	 * @since   1.6	 */	public static function getComponents($authCheck = true)	{		$lang	= JFactory::getLanguage();		$user	= JFactory::getUser();		$db		= JFactory::getDbo();		$query	= $db->getQuery(true);		$result	= array();		$langs	= array();		// Prepare the query.		$query->select('m.id, m.title, m.alias, m.link, m.parent_id, m.img, e.element')			->from('#__menu AS m');		// Filter on the enabled states.		$query->join('LEFT', '#__extensions AS e ON m.component_id = e.extension_id')			->where('m.client_id = 1')			->where('e.enabled = 1')			->where('m.id > 1');		// Order by lft.		$query->order('m.lft');		$db->setQuery($query);		// component list		$components	= $db->loadObjectList();		// Parse the list of extensions.		foreach ($components as &$component)		{			// Trim the menu link.			$component->link = trim($component->link);			if ($component->parent_id == 1)			{				// Only add this top level if it is authorised and enabled.				if ($authCheck == false || ($authCheck && $user->authorise('core.manage', $component->element)))				{					// Root level.					$result[$component->id] = $component;					if (!isset($result[$component->id]->submenu))					{						$result[$component->id]->submenu = array();					}					// If the root menu link is empty, add it in.					if (empty($component->link))					{						$component->link = 'index.php?option='.$component->element;					}					if (!empty($component->element))					{						// Load the core file then						// Load extension-local file.						$lang->load($component->element.'.sys', JPATH_BASE, null, false, false)					||	$lang->load($component->element.'.sys', JPATH_ADMINISTRATOR.'/components/'.$component->element, null, false, false)					||	$lang->load($component->element.'.sys', JPATH_BASE, $lang->getDefault(), false, false)					||	$lang->load($component->element.'.sys', JPATH_ADMINISTRATOR.'/components/'.$component->element, $lang->getDefault(), false, false);					}					$component->text = $lang->hasKey($component->title) ? JText::_($component->title) : $component->alias;				}			} else {				// Sub-menu level.				if (isset($result[$component->parent_id]))				{					// Add the submenu link if it is defined.					if (isset($result[$component->parent_id]->submenu) && !empty($component->link))					{						$component->text = $lang->hasKey($component->title) ? JText::_($component->title) : $component->alias;						$result[$component->parent_id]->submenu[] = &$component;					}				}			}		}		$result = JArrayHelper::sortObjects($result, 'text', 1, true, $lang->getLocale());		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks model. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksModelWeblink extends JModelAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_WEBLINKS';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	A record object.	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->state != -2)			{				return;			}			$user = JFactory::getUser();			if ($record->catid)			{				return $user->authorise('core.delete', 'com_weblinks.category.'.(int) $record->catid);			}			else			{				return parent::canDelete($record);			}		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object	A record object.	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_weblinks.category.'.(int) $record->catid);		}		else		{			return parent::canEditState($record);		}	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	 * @since   1.6	 */	public function getTable($type = 'Weblink', $prefix = 'WeblinksTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Get the form.		$form = $this->loadForm('com_weblinks.weblink', 'weblink', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Determine correct permissions to check.		if ($this->getState('weblink.id'))		{			// Existing record. Can only edit in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit');		}		else		{			// New record. Can only create in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.create');		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('state', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('state', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_weblinks.edit.weblink.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('weblink.id') == 0)			{				$app = JFactory::getApplication();				$data->set('catid', $app->input->get('catid', $app->getUserState('com_weblinks.weblinks.filter.category_id'), 'int'));			}		}		$this->preprocessData('com_weblinks.weblink', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		if ($item = parent::getItem($pk))		{			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($item->metadata);			$item->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($item->images);			$item->images = $registry->toArray();			if (!empty($item->id))			{				$item->tags = new JHelperTags;				$item->tags->getTagIds($item->id, 'com_weblinks.weblink');				$item->metadata['tags'] = $item->tags;			}		}		return $item;	}	/**	 * Prepare and sanitise the table prior to saving.	 *	 * @since   1.6	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		$table->title		= htmlspecialchars_decode($table->title, ENT_QUOTES);		$table->alias		= JApplication::stringURLSafe($table->alias);		if (empty($table->alias))		{			$table->alias = JApplication::stringURLSafe($table->title);		}		if (empty($table->id))		{			// Set the values			// Set ordering to the last item if not set			if (empty($table->ordering))			{				$db = JFactory::getDbo();				$db->setQuery('SELECT MAX(ordering) FROM #__weblinks');				$max = $db->loadResult();				$table->ordering = $max + 1;			}			else			{				// Set the values				$table->modified	= $date->toSql();				$table->modified_by	= $user->get('id');			}			// Increment the content version number.			$table->version++;		}	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object	A record object.	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = '.(int) $table->catid;		return $condition;	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since	3.1	 */	public function save($data)	{		$app = JFactory::getApplication();		// Alter the title for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($name, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['title']);			$data['title']	= $name;			$data['alias']	= $alias;			$data['state']	= 0;		}		$return = parent::save($data);		return $return;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $category_id  The id of the parent.	 * @param   string   $alias        The alias.	 * @param   string   $name         The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($category_id, $alias, $name)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'catid' => $category_id)))		{			if ($name == $table->title)			{				$name = JString::increment($name);			}			$alias = JString::increment($alias, 'dash');		}		return array($name, $alias);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Article View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewArticle extends JViewLegacy{	protected $item;	protected $params;	protected $print;	protected $state;	protected $user;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		$userId		= $user->get('id');		$dispatcher	= JEventDispatcher::getInstance();		$this->item  = $this->get('Item');		$this->print = $app->input->getBool('print');		$this->state = $this->get('State');		$this->user  = $user;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Create a shortcut for $item.		$item = $this->item;		$item->tagLayout      = new JLayoutFile('joomla.content.tags');		// Add router helpers.		$item->slug			= $item->alias ? ($item->id.':'.$item->alias) : $item->id;		$item->catslug		= $item->category_alias ? ($item->catid.':'.$item->category_alias) : $item->catid;		$item->parent_slug = $item->parent_alias ? ($item->parent_id . ':' . $item->parent_alias) : $item->parent_id;		// No link for ROOT category		if ($item->parent_alias == 'root')		{			$item->parent_slug = null;		}		// TODO: Change based on shownoauth		$item->readmore_link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug));		// Merge article params. If this is single-article view, menu params override article params		// Otherwise, article params override menu item params		$this->params	= $this->state->get('params');		$active	= $app->getMenu()->getActive();		$temp	= clone ($this->params);		// Check to see which parameters should take priority		if ($active)		{			$currentLink = $active->link;			// If the current view is the active item and an article view for this article, then the menu item params take priority			if (strpos($currentLink, 'view=article') && (strpos($currentLink, '&id='.(string) $item->id)))			{				// $item->params are the article params, $temp are the menu item params				// Merge so that the menu item params take priority				$item->params->merge($temp);				// Load layout from active query (in case it is an alternative menu item)				if (isset($active->query['layout']))				{					$this->setLayout($active->query['layout']);				}			}			else {				// Current view is not a single article, so the article params take priority here				// Merge the menu item params with the article params so that the article params take priority				$temp->merge($item->params);				$item->params = $temp;				// Check for alternative layouts (since we are not in a single-article menu item)				// Single-article menu item layout takes priority over alt layout for an article				if ($layout = $item->params->get('article_layout'))				{					$this->setLayout($layout);				}			}		}		else		{			// Merge so that article params take priority			$temp->merge($item->params);			$item->params = $temp;			// Check for alternative layouts (since we are not in a single-article menu item)			// Single-article menu item layout takes priority over alt layout for an article			if ($layout = $item->params->get('article_layout'))			{				$this->setLayout($layout);			}		}		$offset = $this->state->get('list.offset');		// Check the view access to the article (the model has already computed the values).		if ($item->params->get('access-view') != true && (($item->params->get('show_noauth') != true &&  $user->get('guest') ))) {						JError::raiseWarning(403, JText::_('JERROR_ALERTNOAUTHOR'));				return;		}		if ($item->params->get('show_intro', '1') == '1')		{			$item->text = $item->introtext.' '.$item->fulltext;		}		elseif ($item->fulltext)		{			$item->text = $item->fulltext;		}		else  {			$item->text = $item->introtext;		}		$item->tags = new JHelperTags;		$item->tags->getItemTags('com_content.article', $this->item->id);		// Process the content plugins.		JPluginHelper::importPlugin('content');		$results = $dispatcher->trigger('onContentPrepare', array ('com_content.article', &$item, &$this->params, $offset));		$item->event = new stdClass;		$results = $dispatcher->trigger('onContentAfterTitle', array('com_content.article', &$item, &$this->params, $offset));		$item->event->afterDisplayTitle = trim(implode("\n", $results));		$results = $dispatcher->trigger('onContentBeforeDisplay', array('com_content.article', &$item, &$this->params, $offset));		$item->event->beforeDisplayContent = trim(implode("\n", $results));		$results = $dispatcher->trigger('onContentAfterDisplay', array('com_content.article', &$item, &$this->params, $offset));		$item->event->afterDisplayContent = trim(implode("\n", $results));		// Increment the hit counter of the article.		if (!$this->params->get('intro_only') && $offset == 0)		{			$model = $this->getModel();			$model->hit();		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->item->params->get('pageclass_sfx'));		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$pathway = $app->getPathway();		$title = null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$title = $this->params->get('page_title', '');		$id = (int) @$menu->query['id'];		// if the menu item does not concern this article		if ($menu && ($menu->query['option'] != 'com_content' || $menu->query['view'] != 'article' || $id != $this->item->id))		{			// If this is not a single article menu item, set the page title to the article title			if ($this->item->title)			{				$title = $this->item->title;			}			$path = array(array('title' => $this->item->title, 'link' => ''));			$category = JCategories::getInstance('Content')->get($this->item->catid);			while ($category && ($menu->query['option'] != 'com_content' || $menu->query['view'] == 'article' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => ContentHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		// Check for empty title and add site name if param is set		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		if (empty($title))		{			$title = $this->item->title;		}		$this->document->setTitle($title);		if ($this->item->metadesc)		{			$this->document->setDescription($this->item->metadesc);		}		elseif (!$this->item->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->item->metakey)		{			$this->document->setMetadata('keywords', $this->item->metakey);		}		elseif (!$this->item->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->item->author);		}		$mdata = $this->item->metadata->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}		// If there is a pagebreak heading or title, add it to the page title		if (!empty($this->item->page_title))		{			$this->item->title = $this->item->title . ' - ' . $this->item->page_title;			$this->document->setTitle($this->item->page_title . ' - ' . JText::sprintf('PLG_CONTENT_PAGEBREAK_PAGE_NUM', $this->state->get('list.offset') + 1));		}		if ($this->print)		{			$this->document->setMetaData('robots', 'noindex, nofollow');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$lang = JFactory::getLanguage();JText::script('COM_FINDER_INDEX_CONFIRM_PURGE_PROMPT');JText::script('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT');?><script type="text/javascript">Joomla.submitbutton = function(pressbutton){	if (pressbutton == 'index.purge')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_PURGE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	if (pressbutton == 'index.delete')	{		if (confirm(Joomla.JText._('COM_FINDER_INDEX_CONFIRM_DELETE_PROMPT')))		{			Joomla.submitform(pressbutton);		}		else		{			return false;		}	}	Joomla.submitform(pressbutton);}</script><form action="<?php echo JRoute::_('index.php?option=com_finder&view=index');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_ITEMS')); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::sprintf('COM_FINDER_SEARCH_LABEL', JText::_('COM_FINDER_ITEMS')); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_FINDER_FILTER_SEARCH_DESCRIPTION'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_type"><?php echo JText::_('COM_FINDER_INDEX_TYPE_FILTER'); ?></label>			<select name="filter_type" class="inputbox" id="filter_type">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_TYPE_FILTER'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.typeslist'), 'value', 'text', $this->state->get('filter.type'));?>			</select>			<label class="selectlabel" for="filter_state"><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'); ?></label>			<select name="filter_state" class="inputbox" id="filter_state">				<option value=""><?php echo JText::_('COM_FINDER_INDEX_FILTER_BY_STATE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'l.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'l.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-5">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_INDEX_TYPE', 'l.type_id', $listDirn, $listOrder); ?>				</th>				<th class="nowrap width-20">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_LINK_URL', 'l.url', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'COM_FINDER_INDEX_HEADING_INDEX_DATE', 'l.indexdate', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php if (count($this->items) == 0) : ?>			<tr class="row0">				<td align="center" colspan="7">					<?php					if ($this->total == 0)					{						echo JText::_('COM_FINDER_INDEX_NO_DATA') . '  ' . JText::_('COM_FINDER_INDEX_TIP');					} else {						echo JText::_('COM_FINDER_INDEX_NO_CONTENT');					}					?>				</td>			</tr>		<?php endif; ?>		<?php $canChange	= JFactory::getUser()->authorise('core.manage',	'com_finder'); ?>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->link_id); ?>				</th>				<td>					<?php if ((int) $item->publish_start_date or (int) $item->publish_end_date or (int) $item->start_date or (int) $item->end_date) : ?>					<img src="<?php echo JURI::root();?>/media/system/images/calendar.png" style="border:1px;float:right" class="hasTip" title="<?php echo JText::sprintf('COM_FINDER_INDEX_DATE_INFO', $item->publish_start_date, $item->publish_end_date, $item->start_date, $item->end_date);?>" />					<?php endif; ?>					<?php echo $this->escape($item->title); ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('jgrid.published', $item->published, $i, 'index.', $canChange, 'cb'); ?>				</td>				<td class="center nowrap">					<?php					$key = FinderHelperLanguage::branchSingular($item->t_title);					echo $lang->hasKey($key) ? JText::_($key) : $item->t_title;					?>				</td>				<td class="nowrap">					<?php					if (strlen($item->url) > 80)					{						echo substr($item->url, 0, 70) . '...';					} else {						echo $item->url;					}					?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->indexdate, JText::_('DATE_FORMAT_LC4')); ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="display" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('NewsfeedsHelper', JPATH_ADMINISTRATOR . '/components/com_newsfeeds/helpers/newsfeeds.php');/** * Utility class for creating HTML Grids * * @static * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.5 */class JHtmlNewsfeed{	/**	 * Get the associated language flags	 *	 * @param   int  $newsfeedid  The item id to search associations	 *	 * @return  string  The language HTML	 */	public static function association($newsfeedid)	{		// Defaults		$html = '';		// Get the associations		if ($associations = JLanguageAssociations::getAssociations('com_newsfeeds', '#__newsfeeds', 'com_newsfeeds.item', $newsfeedid))		{			foreach ($associations as $tag => $associated)			{				$associations[$tag] = (int) $associated->id;			}			// Get the associated newsfeed items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('c.*')				->from('#__newsfeeds as c')				->select('cat.title as category_title')				->join('LEFT', '#__categories as cat ON cat.id=c.catid')				->where('c.id IN (' . implode(',', array_values($associations)) . ')')				->join('LEFT', '#__languages as l ON c.language=l.lang_code')				->select('l.image')				->select('l.title as language_title');			$db->setQuery($query);			try			{				$items = $db->loadObjectList('id');			}			catch (runtimeException $e)			{				throw new Exception($e->getMessage(), 500);				return false;			}			$tags = array();			// Construct html			foreach ($associations as $tag => $associated)			{				if ($associated != $newsfeedid)				{					$tags[] = JText::sprintf('COM_NEWSFEEDS_TIP_ASSOCIATED_LANGUAGE',						JHtml::_('image', 'mod_languages/' . $items[$associated]->image . '.gif',							$items[$associated]->language_title,							array('title' => $items[$associated]->language_title),							true						),						$items[$associated]->name, $items[$associated]->category_title					);				}			}			$html = JHtml::_('tooltip', implode('<br />', $tags), JText::_('COM_NEWSFEEDS_TIP_ASSOCIATION'), 'admin/icon-16-links.png');		}		return $html;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_wrapper * * @package     Joomla.Site * @subpackage  mod_wrapper * @since       1.5 */class ModWrapperHelper{	public static function getParams(&$params)	{		$params->def('url', '');		$params->def('scrolling', 'auto');		$params->def('height', '200');		$params->def('height_auto', '0');		$params->def('width', '100%');		$params->def('add', '1');		$params->def('name', 'wrapper');		$url = $params->get('url');		if ($params->get('add'))		{			// adds 'http://' if none is set			if (substr($url, 0, 1) == '/')			{				// relative url in component. use server http_host.				$url = 'http://'.$_SERVER['HTTP_HOST'].$url;			}			elseif (!strstr($url, 'http') && !strstr($url, 'https'))			{				$url = 'http://'.$url;			}			else {				$url = $url;			}		}		// auto height control		if ($params->def('height_auto'))		{			$load = 'onload="iFrameHeight()"';		}		else		{			$load = '';		}		$params->set('load', $load);		$params->set('url', $url);		return $params;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API Photo class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/photo/ * @since       13.1 */class JFacebookPhoto extends JFacebookObject{	/**	 * Method to get a photo. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo  The photo id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPhoto($photo)	{		return $this->get($photo);	}	/**	 * Method to get a photo's comments. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo   The photo id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getComments($photo, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($photo, 'comments', '', $limit, $offset, $until, $since);	}	/**	 * Method to comment on a photo. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo    The photo id.	 * @param   string  $message  The comment's text.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createComment($photo, $message)	{		// Set POST request parameters.		$data['message'] = $message;		return $this->createConnection($photo, 'comments', $data);	}	/**	 * Method to delete a comment. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $comment  The comment's id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteComment($comment)	{		return $this->deleteConnection($comment);	}	/**	 * Method to get photo's likes. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo   The photo id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getLikes($photo, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($photo, 'likes', '', $limit, $offset, $until, $since);	}	/**	 * Method to like a photo. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo  The photo id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createLike($photo)	{		return $this->createConnection($photo, 'likes');	}	/**	 * Method to unlike a photo. Requires authentication and publish_stream permission, user_photos or friends_photos permission for private photos.	 *	 * @param   string  $photo  The photo id.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLike($photo)	{		return $this->deleteConnection($photo, 'likes');	}	/**	 * Method to get the Users tagged in the photo. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo   The photo id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getTags($photo, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($photo, 'tags', '', $limit, $offset, $until, $since);	}	/**	 * Method to tag one or more Users in a photo. $to or $tag_text required.	 * Requires authentication and publish_stream permission, user_photos permission for private photos.	 *	 * @param   string   $photo     The photo id.	 * @param   mixed    $to        ID of the User or an array of Users to tag in the photo: [{"id":"1234"}, {"id":"12345"}].	 * @param   string   $tag_text  A text string to tag.	 * @param   integer  $x         x coordinate of tag, as a percentage offset from the left edge of the picture.	 * @param   integer  $y         y coordinate of tag, as a percentage offset from the top edge of the picture.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createTag($photo, $to = null, $tag_text = null, $x = null, $y = null)	{		// Set POST request parameters.		if (is_array($to))		{			$data['tags'] = $to;		}		else		{			$data['to'] = $to;		}		if ($tag_text)		{			$data['tag_text'] = $tag_text;		}		if ($x)		{			$data['x'] = $x;		}		if ($y)		{			$data['y'] = $y;		}		return $this->createConnection($photo, 'tags', $data);	}	/**	 * Method to update the position of the tag for a particular Users in a photo.	 * Requires authentication and publish_stream permission, user_photos permission for private photos.	 *	 * @param   string   $photo  The photo id.	 * @param   string   $to     ID of the User to update tag in the photo.	 * @param   integer  $x      x coordinate of tag, as a percentage offset from the left edge of the picture.	 * @param   integer  $y      y coordinate of tag, as a percentage offset from the top edge of the picture.	 *	 * @return  boolean Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function updateTag($photo, $to, $x = null, $y = null)	{		// Set POST request parameters.		$data['to'] = $to;		if ($x)		{			$data['x'] = $x;		}		if ($y)		{			$data['y'] = $y;		}		return $this->createConnection($photo, 'tags', $data);	}	/**	 * Method to get the album-sized view of the photo. Requires authentication and user_photos or friends_photos permission for private photos.	 *	 * @param   string   $photo     The photo id.	 * @param   boolean  $redirect  If false this will return the URL of the picture without a 302 redirect.	 *	 * @return  string  URL of the picture.	 *	 * @since   13.1	 */	public function getPicture($photo, $redirect = true)	{		$extra_fields = '';		if ($redirect == false)		{			$extra_fields = '?redirect=false';		}		return $this->getConnection($photo, 'picture', $extra_fields);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();// This checks if the config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params['show_publishing_options']);$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;if (!$editoroptions){	$params['show_publishing_options'] = '1';	$params['show_article_options'] = '1';	$params['show_urls_images_backend'] = '0';	$params['show_urls_images_frontend'] = '0';}// Check if the article uses configuration settings besides global. If so, use them.if (!empty($this->item->attribs['show_publishing_options'])){	$params['show_publishing_options'] = $this->item->attribs['show_publishing_options'];}if (!empty($this->item->attribs['show_article_options'])){	$params['show_article_options'] = $this->item->attribs['show_article_options'];}if (!empty($this->item->attribs['show_urls_images_backend'])){	$params['show_urls_images_backend'] = $this->item->attribs['show_urls_images_backend'];}?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_content&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate">	<div class="row-fluid">		<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_CONTENT_ARTICLE_DETAILS', true)); ?>					<fieldset class="adminform">						<div class="control-group form-inline">							<?php echo $this->form->getLabel('title'); ?> <?php echo $this->form->getInput('title'); ?> <?php echo $this->form->getLabel('catid'); ?> <?php echo $this->form->getInput('catid'); ?>						</div>						<?php echo $this->form->getInput('articletext'); ?>					</fieldset>					<?php						// The url and images fields only show if the configuration is set to allow them. This is for legacy reasons.					?>					<?php if ($params['show_urls_images_backend']) : ?>						<div class="row-fluid">							<div class="span6">								<h4><?php echo JText::_('COM_CONTENT_FIELDSET_URLS_AND_IMAGES');?></h4>								<div class="control-group">									<?php echo $this->form->getLabel('images'); ?>									<div class="controls">										<?php echo $this->form->getInput('images'); ?>									</div>								</div>								<?php foreach ($this->form->getGroup('images') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>											<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>							<div class="span6">								<?php foreach ($this->form->getGroup('urls') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>												<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>						</div>					<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php // Do not show the publishing options if the edit form is configured not to. ?>					<?php  if ($params['show_publishing_options'] || ( $params['show_publishing_options'] = '' && !empty($editoroptions)) ) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_CONTENT_FIELDSET_PUBLISHING', true)); ?>							<div class="row-fluid">								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('alias'); ?>										</div>									</div>									<div class="control-group">										<div class="control-label">											<?php echo $this->form->getLabel('id'); ?>										</div>										<div class="controls">											<?php echo $this->form->getInput('id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by_alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by_alias'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created'); ?>										<div class="controls">											<?php echo $this->form->getInput('created'); ?>										</div>									</div>								</div>								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('publish_up'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_up'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('publish_down'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_down'); ?>										</div>									</div>									<?php if ($this->item->modified_by) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('modified_by'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_by'); ?>											</div>										</div>										<div class="control-group">											<?php echo $this->form->getLabel('modified'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->version) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('version'); ?>											<div class="controls">												<?php echo $this->form->getInput('version'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->hits) : ?>										<div class="control-group">											<div class="control-label">												<?php echo $this->form->getLabel('hits'); ?>											</div>											<div class="controls">												<?php echo $this->form->getInput('hits'); ?>											</div>										</div>									<?php endif; ?>								</div>							</div>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php  endif; ?>					<?php if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))) : ?>							<?php $fieldSets = $this->form->getFieldsets('attribs'); ?>							<?php foreach ($fieldSets as $name => $fieldSet) : ?>								<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>									<?php $attribtabs = 'attrib-' . $name; ?>									<?php echo JHtml::_('bootstrap.addTab', 'myTab', $attribtabs, JText::_($fieldSet->label, true)); ?>								<?php endif; ?>							<?php								// If the parameter says to show the article options or if the parameters have never been set, we will								// show the article options.								if ($params['show_article_options'] || (( $params['show_article_options'] == '' && !empty($editoroptions) ))) : ?>								<?php	// Go through all the fieldsets except the configuration and basic-limited, which are									// handled separately below.								?>									<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>										<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>											<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>										<?php endif; ?>										<?php foreach ($this->form->getFieldset($name) as $field) : ?>											<div class="control-group">												<?php echo $field->label; ?>												<div class="controls">													<?php echo $field->input; ?>												</div>											</div>										<?php endforeach; ?>									<?php endif; ?>								<?php // If we are not showing the options we need to use the hidden fields so the values are not lost.								?>								<?php elseif ($name == 'basic-limited'):									foreach ($this->form->getFieldset('basic-limited') as $field) :										echo $field->input;									endforeach;								endif;							?>						<?php endforeach; ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>					<?php // We need to make a separate space for the configuration						// so that those fields always show to those wih permissions					?>					<?php if ($this->canDo->get('core.admin')):  ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'editor', JText::_('COM_CONTENT_SLIDER_EDITOR_CONFIG', true)); ?>							<?php foreach ($this->form->getFieldset('editorConfig') as $field) : ?>								<div class="control-group">									<?php echo $field->label; ?>									<div class="controls">										<?php echo $field->input; ?>									</div>								</div>							<?php endforeach; ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>							<?php echo $this->loadTemplate('metadata'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php if ($assoc) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>							<?php echo $this->loadTemplate('associations'); ?>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>					<?php if ($this->canDo->get('core.admin')) : ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'permissions', JText::_('COM_CONTENT_FIELDSET_RULES', true)); ?>							<fieldset>								<?php echo $this->form->getInput('rules'); ?>							</fieldset>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="return" value="<?php echo $input->getCmd('return');?>" />			<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.protostar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Getting params from template$params = JFactory::getApplication()->getTemplate(true)->params;$app = JFactory::getApplication();$doc = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;// Detecting Active Variables$option   = $app->input->getCmd('option', '');$view     = $app->input->getCmd('view', '');$layout   = $app->input->getCmd('layout', '');$task     = $app->input->getCmd('task', '');$itemid   = $app->input->getCmd('Itemid', '');$sitename = $app->getCfg('sitename');if($task == "edit" || $layout == "form" ){	$fullWidth = 1;}else{	$fullWidth = 0;}// Add JavaScript FrameworksJHtml::_('bootstrap.framework');// Add current user information$user = JFactory::getUser();// Logo fileif ($params->get('logoFile')){	$logo = JURI::root() . $params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<title><?php echo $this->title; ?> <?php echo $this->error->getMessage();?></title>	<meta name="viewport" content="width=device-width, initial-scale=1.0">	<meta http-equiv="content-type" content="text/html; charset=utf-8" />	<meta name="language" content="<?php echo $this->language; ?>" />	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/template.css" type="text/css" />	<?php		$debug = JFactory::getConfig()->get('debug_lang');		if ((defined('JDEBUG') && JDEBUG) || $debug)		{	?>		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/media/cms/css/debug.css" type="text/css" />	<?php		}	?>	<?php	// If Right-to-Left	if ($this->direction == 'rtl')	{	?>		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/media/jui/css/bootstrap-rtl.css" type="text/css" />	<?php	}	// Use of Google Font	if ($params->get('googleFont'))	{	?>		<link href='http://fonts.googleapis.com/css?family=<?php echo $params->get('googleFontName');?>' rel='stylesheet' type='text/css'>	<?php	}	?>	<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />	<?php	// Template color	if ($params->get('templateColor'))	{	?>	<style type="text/css">		body.site		{			border-top: 3px solid <?php echo $params->get('templateColor');?>;			background-color: <?php echo $params->get('templateBackgroundColor');?>		}		a		{			color: <?php echo $params->get('templateColor');?>;		}		.navbar-inner, .nav-list > .active > a, .nav-list > .active > a:hover, .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover, .nav-pills > .active > a, .nav-pills > .active > a:hover		{			background: <?php echo $params->get('templateColor');?>;		}		.navbar-inner		{			-moz-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			-webkit-box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);			box-shadow: 0 1px 3px rgba(0, 0, 0, .25), inset 0 -1px 0 rgba(0, 0, 0, .1), inset 0 30px 10px rgba(0, 0, 0, .2);		}	</style>	<?php	}	?>	<!--[if lt IE 9]>		<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script>	<![endif]--></head><body class="site <?php echo $option	. ' view-' . $view	. ($layout ? ' layout-' . $layout : ' no-layout')	. ($task ? ' task-' . $task : ' no-task')	. ($itemid ? ' itemid-' . $itemid : '')	. ($params->get('fluidContainer') ? ' fluid' : '');?>">	<!-- Body -->	<div class="body">		<div class="container<?php echo ($params->get('fluidContainer') ? '-fluid' : '');?>">			<!-- Header -->			<div class="header">				<div class="header-inner clearfix">					<a class="brand pull-left" href="<?php echo $this->baseurl; ?>">						<img src="<?php echo $logo;?>" alt="<?php echo $sitename; ?>" />					</a>					<div class="header-search pull-right">						<?php						// Display position-0 modules						$this->searchmodules = JModuleHelper::getModules('position-0');						foreach ($this->searchmodules as $searchmodule)						{							$output = JModuleHelper::renderModule($searchmodule, array('style' => 'none'));							$params = new JRegistry;							$params->loadString($searchmodule->params);							echo $output;						}						?>					</div>				</div>			</div>			<div class="navigation">				<?php				// Display position-1 modules				$this->navmodules = JModuleHelper::getModules('position-1');				foreach ($this->navmodules as $navmodule)				{					$output = JModuleHelper::renderModule($navmodule, array('style' => 'none'));					$params = new JRegistry;					$params->loadString($navmodule->params);					echo $output;				}				?>			</div>			<!-- Banner -->			<div class="banner">				<jdoc:include type="modules" name="banner" style="xhtml" />			</div>			<div class="row-fluid">				<div id="content" class="span12">					<!-- Begin Content -->					<h1 class="page-header"><?php echo JText::_('JERROR_LAYOUT_PAGE_NOT_FOUND'); ?></h1>					<div class="well">						<div class="row-fluid">							<div class="span6">								<p><strong><?php echo JText::_('JERROR_LAYOUT_ERROR_HAS_OCCURRED_WHILE_PROCESSING_YOUR_REQUEST'); ?></strong></p>								<p><?php echo JText::_('JERROR_LAYOUT_NOT_ABLE_TO_VISIT'); ?></p>								<ul>									<li><?php echo JText::_('JERROR_LAYOUT_AN_OUT_OF_DATE_BOOKMARK_FAVOURITE'); ?></li>									<li><?php echo JText::_('JERROR_LAYOUT_MIS_TYPED_ADDRESS'); ?></li>									<li><?php echo JText::_('JERROR_LAYOUT_SEARCH_ENGINE_OUT_OF_DATE_LISTING'); ?></li>									<li><?php echo JText::_('JERROR_LAYOUT_YOU_HAVE_NO_ACCESS_TO_THIS_PAGE'); ?></li>								</ul>							</div>							<div class="span6">								<?php if (JModuleHelper::getModule('search')) : ?>									<p><strong><?php echo JText::_('JERROR_LAYOUT_SEARCH'); ?></strong></p>									<p><?php echo JText::_('JERROR_LAYOUT_SEARCH_PAGE'); ?></p>									<?php										$module = JModuleHelper::getModule('search');										echo JModuleHelper::renderModule($module);									?>								<?php endif; ?>								<p><?php echo JText::_('JERROR_LAYOUT_GO_TO_THE_HOME_PAGE'); ?></p>								<p><a href="<?php echo $this->baseurl; ?>/index.php" class="btn"><i class="icon-home"></i> <?php echo JText::_('JERROR_LAYOUT_HOME_PAGE'); ?></a></p>							</div>						</div>						<hr />						<p><?php echo JText::_('JERROR_LAYOUT_PLEASE_CONTACT_THE_SYSTEM_ADMINISTRATOR'); ?></p>						<blockquote>							<span class="label label-inverse"><?php echo $this->error->getCode(); ?></span> <?php echo $this->error->getMessage();?>						</blockquote>					</div>					<!-- End Content -->				</div>			</div>		</div>	</div>	<!-- Footer -->	<div class="footer">		<div class="container<?php echo ($params->get('fluidContainer') ? '-fluid' : '');?>">			<hr />			<jdoc:include type="modules" name="footer" style="none" />			<p class="pull-right"><a href="#top" id="back-top"><?php echo JText::_('TPL_PROTOSTAR_BACKTOTOP'); ?></a></p>			<p>&copy; <?php echo $sitename; ?> <?php echo date('Y');?></p>		</div>	</div>	<jdoc:include type="modules" name="debug" style="none" /></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');$user = JFactory::getUser();$canDo = TemplatesHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'style.cancel' || document.formvalidator.isValid(document.id('style-form')))		{			Joomla.submitform(task, document.getElementById('style-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_templates&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="style-form" class="form-validate">	<div class="width-60 fltlft">		<fieldset class="adminform">			<legend><?php echo JText::_('JDETAILS');?></legend>			<ul class="adminformlist">			<li><?php echo $this->form->getLabel('title'); ?>			<?php echo $this->form->getInput('title'); ?></li>			<li><?php echo $this->form->getLabel('template'); ?>			<?php echo $this->form->getInput('template'); ?>			<?php echo $this->form->getLabel('client_id'); ?>			<?php echo $this->form->getInput('client_id'); ?>			<input type="text" size="35" value="<?php echo $this->item->client_id == 0 ? JText::_('JSITE') : JText::_('JADMINISTRATOR'); ?>	" class="readonly" readonly="readonly" /></li>			<li><?php echo $this->form->getLabel('home'); ?>			<?php echo $this->form->getInput('home'); ?></li>			<?php if ($this->item->id) : ?>				<li><?php echo $this->form->getLabel('id'); ?>				<span class="readonly"><?php echo $this->item->id; ?></span></li>			<?php endif; ?>			</ul>			<div class="clr"></div>			<?php if ($this->item->xml) : ?>				<?php if ($text = trim($this->item->xml->description)) : ?>					<label>						<?php echo JText::_('COM_TEMPLATES_TEMPLATE_DESCRIPTION'); ?>					</label>					<span class="readonly mod-desc"><?php echo JText::_($text); ?></span>				<?php endif; ?>			<?php else : ?>				<p class="error"><?php echo JText::_('COM_TEMPLATES_ERR_XML'); ?></p>			<?php endif; ?>			<div class="clr"></div>		</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>	</div>	<div class="width-40 fltrt">	<?php echo JHtml::_('sliders.start', 'template-sliders-'.$this->item->id); ?>		<?php //get the menu parameters that are automatically set but may be modified.			echo $this->loadTemplate('options'); ?>		<div class="clr"></div>	<?php echo JHtml::_('sliders.end'); ?>	</div>	<?php if ($user->authorise('core.edit', 'com_menu') && $this->item->client_id == 0):?>		<?php if ($canDo->get('core.edit.state')) : ?>			<div class="width-60 fltlft">			<?php echo $this->loadTemplate('assignment'); ?>			</div>			<?php endif; ?>		<?php endif;?>	<div class="clr"></div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Uri * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JURI Class * * This class serves two purposes. First it parses a URI and provides a common interface * for the Joomla Platform to access and manipulate a URI.  Second it obtains the URI of * the current executing script from the server regardless of server. * * @package     Joomla.Platform * @subpackage  Uri * @since       11.1 */class JUri{	/**	 * @var    string Original URI	 * @since  12.1	 */	protected $uri = null;	/**	 * @var    string  Protocol	 * @since  12.1	 */	protected $scheme = null;	/**	 * @var    string  Host	 * @since  12.1	 */	protected $host = null;	/**	 * @var    integer  Port	 * @since  12.1	 */	protected $port = null;	/**	 * @var    string  Username	 * @since  12.1	 */	protected $user = null;	/**	 * @var    string  Password	 * @since  12.1	 */	protected $pass = null;	/**	 * @var    string  Path	 * @since  12.1	 */	protected $path = null;	/**	 * @var    string  Query	 * @since  12.1	 */	protected $query = null;	/**	 * @var    string  Anchor	 * @since  12.1	 */	protected $fragment = null;	/**	 * @var    array  Query variable hash	 * @since  12.1	 */	protected $vars = array();	/**	 * @var    array  An array of JURI instances.	 * @since  11.1	 */	protected static $instances = array();	/**	 * @var    array  The current calculated base url segments.	 * @since  11.1	 */	protected static $base = array();	/**	 * @var    array  The current calculated root url segments.	 * @since  11.1	 */	protected static $root = array();	/**	 * @var    string  The current url.	 * @since  11.1	 */	protected static $current;	/**	 * Constructor.	 * You can pass a URI string to the constructor to initialise a specific URI.	 *	 * @param   string  $uri  The optional URI string	 *	 * @since   11.1	 */	public function __construct($uri = null)	{		if (!is_null($uri))		{			$this->parse($uri);		}	}	/**	 * Magic method to get the string representation of the URI object.	 *	 * @return  string	 *	 * @since   11.1	 */	public function __toString()	{		return $this->toString();	}	/**	 * Returns the global JURI object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $uri  The URI to parse.  [optional: if null uses script URI]	 *	 * @return  JURI  The URI object.	 *	 * @since   11.1	 */	public static function getInstance($uri = 'SERVER')	{		if (empty(self::$instances[$uri]))		{			// Are we obtaining the URI from the server?			if ($uri == 'SERVER')			{				// Determine if the request was over SSL (HTTPS).				if (isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS']) && (strtolower($_SERVER['HTTPS']) != 'off'))				{					$https = 's://';				}				else				{					$https = '://';				}				/*				 * Since we are assigning the URI from the server variables, we first need				 * to determine if we are running on apache or IIS.  If PHP_SELF and REQUEST_URI				 * are present, we will assume we are running on apache.				 */				if (!empty($_SERVER['PHP_SELF']) && !empty($_SERVER['REQUEST_URI']))				{					// To build the entire URI we need to prepend the protocol, and the http host					// to the URI string.					$theURI = 'http' . $https . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];				}				else				{					/*					 * Since we do not have REQUEST_URI to work with, we will assume we are					 * running on IIS and will therefore need to work some magic with the SCRIPT_NAME and					 * QUERY_STRING environment variables.					 *					 * IIS uses the SCRIPT_NAME variable instead of a REQUEST_URI variable... thanks, MS					 */					$theURI = 'http' . $https . $_SERVER['HTTP_HOST'] . $_SERVER['SCRIPT_NAME'];					// If the query string exists append it to the URI string					if (isset($_SERVER['QUERY_STRING']) && !empty($_SERVER['QUERY_STRING']))					{						$theURI .= '?' . $_SERVER['QUERY_STRING'];					}				}				// Check for quotes in the URL to prevent injections through the Host header				if ($theURI !== str_replace(array("'", '"', '<', '>'), '', $theURI))				{					throw new InvalidArgumentException('Invalid URI detected.');				}			}			else			{				// We were given a URI				$theURI = $uri;			}			self::$instances[$uri] = new JURI($theURI);		}		return clone self::$instances[$uri];	}	/**	 * Returns the base URI for the request.	 *	 * @param   boolean  $pathonly  If false, prepend the scheme, host and port information. Default is false.	 *	 * @return  string  The base URI string	 *	 * @since   11.1	 */	public static function base($pathonly = false)	{		// Get the base request path.		if (empty(self::$base))		{			$config = JFactory::getConfig();			$live_site = $config->get('live_site');			if (trim($live_site) != '')			{				$uri = self::getInstance($live_site);				self::$base['prefix'] = $uri->toString(array('scheme', 'host', 'port'));				self::$base['path'] = rtrim($uri->toString(array('path')), '/\\');				if (defined('JPATH_BASE') && defined('JPATH_ADMINISTRATOR'))				{					if (JPATH_BASE == JPATH_ADMINISTRATOR)					{						self::$base['path'] .= '/administrator';					}				}			}			else			{				$uri = self::getInstance();				self::$base['prefix'] = $uri->toString(array('scheme', 'host', 'port'));				if (strpos(php_sapi_name(), 'cgi') !== false && !ini_get('cgi.fix_pathinfo') && !empty($_SERVER['REQUEST_URI']))				{					// PHP-CGI on Apache with "cgi.fix_pathinfo = 0"					// We shouldn't have user-supplied PATH_INFO in PHP_SELF in this case					// because PHP will not work with PATH_INFO at all.					$script_name = $_SERVER['PHP_SELF'];				}				else				{					// Others					$script_name = $_SERVER['SCRIPT_NAME'];				}				self::$base['path'] = rtrim(dirname($script_name), '/\\');			}		}		return $pathonly === false ? self::$base['prefix'] . self::$base['path'] . '/' : self::$base['path'];	}	/**	 * Returns the root URI for the request.	 *	 * @param   boolean  $pathonly  If false, prepend the scheme, host and port information. Default is false.	 * @param   string   $path      The path	 *	 * @return  string  The root URI string.	 *	 * @since   11.1	 */	public static function root($pathonly = false, $path = null)	{		// Get the scheme		if (empty(self::$root))		{			$uri = self::getInstance(self::base());			self::$root['prefix'] = $uri->toString(array('scheme', 'host', 'port'));			self::$root['path'] = rtrim($uri->toString(array('path')), '/\\');		}		// Get the scheme		if (isset($path))		{			self::$root['path'] = $path;		}		return $pathonly === false ? self::$root['prefix'] . self::$root['path'] . '/' : self::$root['path'];	}	/**	 * Returns the URL for the request, minus the query.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function current()	{		// Get the current URL.		if (empty(self::$current))		{			$uri = self::getInstance();			self::$current = $uri->toString(array('scheme', 'host', 'port', 'path'));		}		return self::$current;	}	/**	 * Method to reset class static members for testing and other various issues.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function reset()	{		self::$instances = array();		self::$base = array();		self::$root = array();		self::$current = '';	}	/**	 * Parse a given URI and populate the class fields.	 *	 * @param   string  $uri  The URI string to parse.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function parse($uri)	{		// Set the original URI to fall back on		$this->uri = $uri;		// Parse the URI and populate the object fields. If URI is parsed properly,		// set method return value to true.		$parts = JString::parse_url($uri);		$retval = ($parts) ? true : false;		// We need to replace &amp; with & for parse_str to work right...		if (isset($parts['query']) && strpos($parts['query'], '&amp;'))		{			$parts['query'] = str_replace('&amp;', '&', $parts['query']);		}		$this->scheme = isset($parts['scheme']) ? $parts['scheme'] : null;		$this->user = isset($parts['user']) ? $parts['user'] : null;		$this->pass = isset($parts['pass']) ? $parts['pass'] : null;		$this->host = isset($parts['host']) ? $parts['host'] : null;		$this->port = isset($parts['port']) ? $parts['port'] : null;		$this->path = isset($parts['path']) ? $parts['path'] : null;		$this->query = isset($parts['query']) ? $parts['query'] : null;		$this->fragment = isset($parts['fragment']) ? $parts['fragment'] : null;		// Parse the query		if (isset($parts['query']))		{			parse_str($parts['query'], $this->vars);		}		return $retval;	}	/**	 * Returns full uri string.	 *	 * @param   array  $parts  An array specifying the parts to render.	 *	 * @return  string  The rendered URI string.	 *	 * @since   11.1	 */	public function toString(array $parts = array('scheme', 'user', 'pass', 'host', 'port', 'path', 'query', 'fragment'))	{		// Make sure the query is created		$query = $this->getQuery();		$uri = '';		$uri .= in_array('scheme', $parts) ? (!empty($this->scheme) ? $this->scheme . '://' : '') : '';		$uri .= in_array('user', $parts) ? $this->user : '';		$uri .= in_array('pass', $parts) ? (!empty($this->pass) ? ':' : '') . $this->pass . (!empty($this->user) ? '@' : '') : '';		$uri .= in_array('host', $parts) ? $this->host : '';		$uri .= in_array('port', $parts) ? (!empty($this->port) ? ':' : '') . $this->port : '';		$uri .= in_array('path', $parts) ? $this->path : '';		$uri .= in_array('query', $parts) ? (!empty($query) ? '?' . $query : '') : '';		$uri .= in_array('fragment', $parts) ? (!empty($this->fragment) ? '#' . $this->fragment : '') : '';		return $uri;	}	/**	 * Adds a query variable and value, replacing the value if it	 * already exists and returning the old value.	 *	 * @param   string  $name   Name of the query variable to set.	 * @param   string  $value  Value of the query variable.	 *	 * @return  string  Previous value for the query variable.	 *	 * @since   11.1	 */	public function setVar($name, $value)	{		$tmp = isset($this->vars[$name]) ? $this->vars[$name] : null;		$this->vars[$name] = $value;		// Empty the query		$this->query = null;		return $tmp;	}	/**	 * Checks if variable exists.	 *	 * @param   string  $name  Name of the query variable to check.	 *	 * @return  boolean  True if the variable exists.	 *	 * @since   11.1	 */	public function hasVar($name)	{		return array_key_exists($name, $this->vars);	}	/**	 * Returns a query variable by name.	 *	 * @param   string  $name     Name of the query variable to get.	 * @param   string  $default  Default value to return if the variable is not set.	 *	 * @return  array   Query variables.	 *	 * @since   11.1	 */	public function getVar($name, $default = null)	{		if (array_key_exists($name, $this->vars))		{			return $this->vars[$name];		}		return $default;	}	/**	 * Removes an item from the query string variables if it exists.	 *	 * @param   string  $name  Name of variable to remove.	 *	 * @return  void	 *	 * @since   11.1	 */	public function delVar($name)	{		if (array_key_exists($name, $this->vars))		{			unset($this->vars[$name]);			// Empty the query			$this->query = null;		}	}	/**	 * Sets the query to a supplied string in format:	 * foo=bar&x=y	 *	 * @param   mixed  $query  The query string or array.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setQuery($query)	{		if (is_array($query))		{			$this->vars = $query;		}		else		{			if (strpos($query, '&amp;') !== false)			{				$query = str_replace('&amp;', '&', $query);			}			parse_str($query, $this->vars);		}		// Empty the query		$this->query = null;	}	/**	 * Returns flat query string.	 *	 * @param   boolean  $toArray  True to return the query as a key => value pair array.	 *	 * @return  string   Query string.	 *	 * @since   11.1	 */	public function getQuery($toArray = false)	{		if ($toArray)		{			return $this->vars;		}		// If the query is empty build it first		if (is_null($this->query))		{			$this->query = self::buildQuery($this->vars);		}		return $this->query;	}	/**	 * Build a query from a array (reverse of the PHP parse_str()).	 *	 * @param   array  $params  The array of key => value pairs to return as a query string.	 *	 * @return  string  The resulting query string.	 *	 * @see     parse_str()	 * @since   11.1	 */	public static function buildQuery(array $params)	{		if (count($params) == 0)		{			return false;		}		return urldecode(http_build_query($params, '', '&'));	}	/**	 * Get URI scheme (protocol)	 * ie. http, https, ftp, etc...	 *	 * @return  string  The URI scheme.	 *	 * @since   11.1	 */	public function getScheme()	{		return $this->scheme;	}	/**	 * Set URI scheme (protocol)	 * ie. http, https, ftp, etc...	 *	 * @param   string  $scheme  The URI scheme.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setScheme($scheme)	{		$this->scheme = $scheme;	}	/**	 * Get URI username	 * Returns the username, or null if no username was specified.	 *	 * @return  string  The URI username.	 *	 * @since   11.1	 */	public function getUser()	{		return $this->user;	}	/**	 * Set URI username.	 *	 * @param   string  $user  The URI username.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setUser($user)	{		$this->user = $user;	}	/**	 * Get URI password	 * Returns the password, or null if no password was specified.	 *	 * @return  string  The URI password.	 *	 * @since   11.1	 */	public function getPass()	{		return $this->pass;	}	/**	 * Set URI password.	 *	 * @param   string  $pass  The URI password.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setPass($pass)	{		$this->pass = $pass;	}	/**	 * Get URI host	 * Returns the hostname/ip or null if no hostname/ip was specified.	 *	 * @return  string  The URI host.	 *	 * @since   11.1	 */	public function getHost()	{		return $this->host;	}	/**	 * Set URI host.	 *	 * @param   string  $host  The URI host.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setHost($host)	{		$this->host = $host;	}	/**	 * Get URI port	 * Returns the port number, or null if no port was specified.	 *	 * @return  integer  The URI port number.	 *	 * @since   11.1	 */	public function getPort()	{		return (isset($this->port)) ? $this->port : null;	}	/**	 * Set URI port.	 *	 * @param   integer  $port  The URI port number.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setPort($port)	{		$this->port = $port;	}	/**	 * Gets the URI path string.	 *	 * @return  string  The URI path string.	 *	 * @since   11.1	 */	public function getPath()	{		return $this->path;	}	/**	 * Set the URI path string.	 *	 * @param   string  $path  The URI path string.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setPath($path)	{		$this->path = $this->_cleanPath($path);	}	/**	 * Get the URI archor string	 * Everything after the "#".	 *	 * @return  string  The URI anchor string.	 *	 * @since   11.1	 */	public function getFragment()	{		return $this->fragment;	}	/**	 * Set the URI anchor string	 * everything after the "#".	 *	 * @param   string  $anchor  The URI anchor string.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setFragment($anchor)	{		$this->fragment = $anchor;	}	/**	 * Checks whether the current URI is using HTTPS.	 *	 * @return  boolean  True if using SSL via HTTPS.	 *	 * @since   11.1	 */	public function isSSL()	{		return $this->getScheme() == 'https' ? true : false;	}	/**	 * Checks if the supplied URL is internal	 *	 * @param   string  $url  The URL to check.	 *	 * @return  boolean  True if Internal.	 *	 * @since   11.1	 */	public static function isInternal($url)	{		$uri = self::getInstance($url);		$base = $uri->toString(array('scheme', 'host', 'port', 'path'));		$host = $uri->toString(array('scheme', 'host', 'port'));		if (stripos($base, self::base()) !== 0 && !empty($host))		{			return false;		}		return true;	}	/**	 * Resolves //, ../ and ./ from a path and returns	 * the result. Eg:	 *	 * /foo/bar/../boo.php	=> /foo/boo.php	 * /foo/bar/../../boo.php => /boo.php	 * /foo/bar/.././/boo.php => /foo/boo.php	 *	 * @param   string  $path  The URI path to clean.	 *	 * @return  string  Cleaned and resolved URI path.	 *	 * @since   11.1	 */	protected function _cleanPath($path)	{		$path = explode('/', preg_replace('#(/+)#', '/', $path));		for ($i = 0, $n = count($path); $i < $n; $i++)		{			if ($path[$i] == '.' || $path[$i] == '..')			{				if (($path[$i] == '.') || ($path[$i] == '..' && $i == 1 && $path[0] == ''))				{					unset($path[$i]);					$path = array_values($path);					$i--;					$n--;				}				elseif ($path[$i] == '..' && ($i > 1 || ($i == 1 && $path[0] != '')))				{					unset($path[$i]);					unset($path[$i - 1]);					$path = array_values($path);					$i -= 2;					$n -= 2;				}			}		}		return implode('/', $path);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_logged * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');?><div class="row-striped">	<?php foreach ($users as $user) : ?>		<div class="row-fluid">			<div class="span9">				<?php if ($user->client_id == 0) : ?>					<a class="hasTooltip" title="<?php echo JText::_('MOD_LOGGED_LOGOUT'); ?>" href="<?php echo $user->logoutLink; ?>" class="btn btn-danger btn-mini">						<i class="icon-remove icon-white" title="<?php echo JText::_('JLOGOUT'); ?>"></i>					</a>				<?php endif; ?>				<strong class="row-title">					<?php if (isset($user->editLink)) : ?>						<a href="<?php echo $user->editLink; ?>" class="hasTooltip" title="<?php echo JText::_('JGRID_HEADING_ID'); ?> : <?php echo $user->id; ?>">							<?php echo $user->name;?>						</a>					<?php else : ?>						<?php echo $user->name; ?>					<?php endif; ?>				</strong>				<small class="small hasTooltip" title="<?php echo JText::_('JCLIENT'); ?>">					<?php if ($user->client_id) : ?>						<?php echo JText::_('JADMINISTRATION'); ?>					<?php else : ?>						<?php echo JText::_('JSITE'); ?>					<?php endif;?>				</small>			</div>			<div class="span3">				<span class="small hasTooltip" title="<?php echo JText::_('MOD_LOGGED_LAST_ACTIVITY'); ?>">					<i class="icon-calendar"></i> <?php echo JHtml::_('date', $user->time, 'Y-m-d'); ?>				</span>			</div>		</div>	<?php endforeach; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');$user = JFactory::getUser();$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_doc, &$params));?>		<tr>			<td>				<a  title="<?php echo $this->_tmp_doc->name; ?>">					<?php  echo JHtml::_('image', $this->_tmp_doc->icon_16, $this->_tmp_doc->title, null, true, true) ? JHtml::_('image', $this->_tmp_doc->icon_16, $this->_tmp_doc->title, array('width' => 16, 'height' => 16), true) : JHtml::_('image', 'media/con_info.png', $this->_tmp_doc->title, array('width' => 16, 'height' => 16), true);?> </a>			</td>			<td class="description"  title="<?php echo $this->_tmp_doc->name; ?>">				<?php echo $this->_tmp_doc->title; ?>			</td>			<td>&#160;			</td>			<td class="filesize">				<?php echo JHtml::_('number.bytes', $this->_tmp_doc->size); ?>			</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>				<a class="delete-item" target="_top" href="index.php?option=com_media&amp;task=file.delete&amp;tmpl=index&amp;<?php echo JSession::getFormToken(); ?>=1&amp;folder=<?php echo $this->state->folder; ?>&amp;rm[]=<?php echo $this->_tmp_doc->name; ?>" rel="<?php echo $this->_tmp_doc->name; ?>"><i class="icon-remove hasTooltip" title="<?php echo JText::_('JACTION_DELETE');?>"></i></a>				<input type="checkbox" name="rm[]" value="<?php echo $this->_tmp_doc->name; ?>" />			</td>		<?php endif;?>		</tr><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_doc, &$params));?>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for all HTML drawing classes. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlRules{	/**	 * Creates the HTML for the permissions widget	 *	 * @param   array    $actions   Array of action objects	 * @param   integer  $assetId   Id of a specific asset to  create a widget for.	 * @param   integer  $parent    Id of the parent of the asset	 * @param   string   $control   The form control	 * @param   string   $idPrefix  Prefix for the ids assigned to specific action-group pairs	 *	 * @return  string   HTML for the permissions widget	 *	 * @since   11.1	 *	 * @see     JAccess	 * @see     JFormFieldRules	 */	public static function assetFormWidget($actions, $assetId = null, $parent = null, $control = 'jform[rules]', $idPrefix = 'jform_rules')	{		$images = self::_getImagesArray();		// Get the user groups.		$groups = self::_getUserGroups();		// Get the incoming inherited rules as well as the asset specific rules.		$inheriting = JAccess::getAssetRules($parent ? $parent : self::_getParentAssetId($assetId), true);		$inherited = JAccess::getAssetRules($assetId, true);		$rules = JAccess::getAssetRules($assetId);		$html = array();		$html[] = '<div class="acl-options">';		$html[] = JHtml::_('tabs.start', 'acl-rules-' . $assetId, array('useCookie' => 1));		$html[] = JHtml::_('tabs.panel', JText::_('JLIB_HTML_ACCESS_SUMMARY'), 'summary');		$html[] = '			<p>' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC') . '</p>';		$html[] = '			<table class="aclsummary-table" summary="' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC') . '">';		$html[] = '			<caption>' . JText::_('JLIB_HTML_ACCESS_SUMMARY_DESC_CAPTION') . '</caption>';		$html[] = '			<tr>';		$html[] = '				<th class="col1 hidelabeltxt">' . JText::_('JLIB_RULES_GROUPS') . '</th>';		foreach ($actions as $i => $action)		{			$html[] = '				<th class="col' . ($i + 2) . '">' . JText::_($action->title) . '</th>';		}		$html[] = '			</tr>';		foreach ($groups as $i => $group)		{			$html[] = '			<tr class="row' . ($i % 2) . '">';			$html[] = '				<td class="col1">' . $group->text . '</td>';			foreach ($actions as $j => $action)			{				$html[] = '				<td class="col' . ($j + 2) . '">'					. ($assetId ? ($inherited->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])					: ($inheriting->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])) . '</td>';			}			$html[] = '			</tr>';		}		$html[] = ' 		</table>';		foreach ($actions as $action)		{			$actionTitle = JText::_($action->title);			$actionDesc = JText::_($action->description);			$html[] = JHtml::_('tabs.panel', $actionTitle, $action->name);			$html[] = '			<p>' . $actionDesc . '</p>';			$html[] = '			<table class="aclmodify-table" summary="' . strip_tags($actionDesc) . '">';			$html[] = '			<caption>' . JText::_('JLIB_HTML_ACCESS_MODIFY_DESC_CAPTION_ACL') . ' ' . $actionTitle . ' '				. JText::_('JLIB_HTML_ACCESS_MODIFY_DESC_CAPTION_TABLE') . '</caption>';			$html[] = '			<tr>';			$html[] = '				<th class="col1 hidelabeltxt">' . JText::_('JLIB_RULES_GROUP') . '</th>';			$html[] = '				<th class="col2">' . JText::_('JLIB_RULES_INHERIT') . '</th>';			$html[] = '				<th class="col3 hidelabeltxt">' . JText::_('JMODIFY') . '</th>';			$html[] = '				<th class="col4">' . JText::_('JCURRENT') . '</th>';			$html[] = '			</tr>';			foreach ($groups as $i => $group)			{				$selected = $rules->allow($action->name, $group->value);				$html[] = '			<tr class="row' . ($i % 2) . '">';				$html[] = '				<td class="col1">' . $group->text . '</td>';				$html[] = '				<td class="col2">'					. ($inheriting->allow($action->name, $group->identities) ? $images['allow-i'] : $images['deny-i']) . '</td>';				$html[] = '				<td class="col3">';				$html[] = '					<select id="' . $idPrefix . '_' . $action->name . '_' . $group->value					. '" class="inputbox" size="1" name="' . $control . '[' . $action->name . '][' . $group->value . ']" title="'					. JText::sprintf('JLIB_RULES_SELECT_ALLOW_DENY_GROUP', $actionTitle, $group->text) . '">';				$html[] = '						<option value=""' . ($selected === null ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_INHERIT') . '</option>';				$html[] = '						<option value="1"' . ($selected === true ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_ALLOWED') . '</option>';				$html[] = '						<option value="0"' . ($selected === false ? ' selected="selected"' : '') . '>'					. JText::_('JLIB_RULES_DENIED') . '</option>';				$html[] = '					</select>';				$html[] = '				</td>';				$html[] = '				<td class="col4">'					. ($assetId ? ($inherited->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])					: ($inheriting->allow($action->name, $group->identities) ? $images['allow'] : $images['deny'])) . '</td>';				$html[] = '			</tr>';			}			$html[] = '			</table>';		}		$html[] = JHtml::_('tabs.end');		// Build the footer with legend and special purpose buttons.		$html[] = '	<div class="clr"></div>';		$html[] = '	<ul class="acllegend fltlft">';		$html[] = '		<li class="acl-allowed">' . JText::_('JLIB_RULES_ALLOWED') . '</li>';		$html[] = '		<li class="acl-denied">' . JText::_('JLIB_RULES_DENIED') . '</li>';		$html[] = '	</ul>';		$html[] = '</div>';		return implode("\n", $html);	}	/**	 * Get the id of the parent asset	 *	 * @param   integer  $assetId  The asset for which the parentid will be returned	 *	 * @return  integer  The id of the parent asset	 *	 * @since   11.1	 */	protected static function _getParentAssetId($assetId)	{		// Get a database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Get the user groups from the database.		$query->select($db->quoteName('parent_id'))			->from($db->quoteName('#__assets'))			->where($db->quoteName('id') . ' = ' . (int) $assetId);		$db->setQuery($query);		return (int) $db->loadResult();	}	/**	 * Get the user groups	 *	 * @return  array  Array of user groups	 *	 * @since   11.1	 */	protected static function _getUserGroups()	{		// Get a database object.		$db = JFactory::getDbo();		// Get the user groups from the database.		$db->setQuery(			'SELECT a.id AS value, a.title AS text, b.id as parent'			. ' FROM #__usergroups AS a LEFT JOIN #__usergroups AS b ON a.lft >= b.lft AND a.rgt <= b.rgt'			. ' ORDER BY a.lft ASC, b.lft ASC'		);		$result = $db->loadObjectList();		$options = array();		// Pre-compute additional values.		foreach ($result as $option)		{			$end = end($options);			if ($end === false || $end->value != $option->value)			{				$end = $option;				$end->level = 0;				$options[] = $end;			}			else			{				$end->level++;			}			$end->identities[] = $option->parent;		}		return $options;	}	/**	 * Get the array of images associate with specific permissions	 *	 * @return  array  An associative  array of permissions and images	 *	 * @since   11.1	 */	protected static function _getImagesArray()	{		$images['allow-l'] = '<label class="icon-16-allow" title="' . JText::_('JLIB_RULES_ALLOWED') . '">' . JText::_('JLIB_RULES_ALLOWED')			. '</label>';		$images['deny-l'] = '<label class="icon-16-deny" title="' . JText::_('JLIB_RULES_DENIED') . '">' . JText::_('JLIB_RULES_DENIED') . '</label>';		$images['allow'] = '<a class="icon-16-allow" title="' . JText::_('JLIB_RULES_ALLOWED') . '"> </a>';		$images['deny'] = '<a class="icon-16-deny" title="' . JText::_('JLIB_RULES_DENIED') . '"> </a>';		$images['allow-i'] = '<a class="icon-16-allowinactive" title="' . JText::_('JRULE_ALLOWED_INHERITED') . '"> </a>';		$images['deny-i'] = '<a class="icon-16-denyinactive" title="' . JText::_('JRULE_DENIED_INHERITED') . '"> </a>';		return $images;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  UCM * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Base class for implementing UCM * * @package     Joomla.Libraries * @subpackage  UCM * @since       3.1 */class JUcmBase implements JUcm{	/**	 * The UCM type object	 *	 * @var    JUcmType	 * @since  3.1	 */	protected $type;	/**	 * The alias for the content table	 *	 * @var    string	 * @since  3.1	 */	protected $alias;	/**	 * Instantiate the UcmBase.	 *	 * @param   string    $alias  The alias string	 * @param   JUcmType  $type   The type object	 *	 * @since   3.1	 */	public function __construct($alias = null, JUcmType $type = null)	{		// Setup dependencies.		$input = JFactory::getApplication()->input;		$this->alias = isset($alias) ? $alias : $input->get('option') . '.' . $input->get('view');		$this->type = isset($type) ? $type : $this->getType();	}	/**	 * Store data to the appropriate table	 *	 * @param   array   $data        Data to be stored	 * @param   JTable  $table       JTable Object	 * @param   string  $primaryKey  The primary key name	 *	 * @return  boolean  True on success	 *	 * @since   3.1	 * @throws  Exception	 */	protected function store($data, JTable $table = null, $primaryKey = null)	{		if (!$table)		{			$table = JTable::getInstance('Ucm');		}		$ucmId		= isset($data['ucm_id']) ? $data['ucm_id'] : null;		$primaryKey	= $primaryKey ? $primaryKey : $ucmId;		if (isset($primaryKey))		{			$table->load($primaryKey);		}		try		{			$table->bind($data);		}		catch (RuntimeException $e)		{			throw new Exception($e->getMessage(), 500);		}		try		{			$table->store();		}		catch (RuntimeException $e)		{			throw new Exception($e->getMessage(), 500);		}		return true;	}	/**	 * Get the UCM Content type.	 *	 * @return  object  The UCM content type	 *	 * @since   3.1	 */	public function getType()	{		$type = new JUcmType($this->alias);		return $type;	}	/**	 * Method to map the base ucm fields	 *	 * @param   array     $original  Data array	 * @param   JUcmType  $type      UCM Content Type	 *	 * @return  array  Data array of UCM mappings	 *	 * @since   3.1	 */	public function mapBase($original, JUcmType $type = null)	{		$type = $type ? $type : $this->type;		$data = array(			'ucm_type_id' => $type->id,			'ucm_item_id' => $original[$type->primary_key],			'ucm_language_id' => JHelperContent::getLanguageId($original['language'])		);		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeed controller class. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsControllerNewsfeed extends JControllerForm{	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user = JFactory::getUser();		$categoryId = JArrayHelper::getValue($data, 'catid', $this->input->getInt('filter_category_id'), 'int');		$allow = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow = $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absence of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method to check if you can edit a record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user = JFactory::getUser();		$recordId = (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return $user->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean   True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('Newsfeed', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Text field for passwords * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.password.html#input.password * @note        Two password fields may be validated as matching using JFormRuleEquals * @since       11.1 */class JFormFieldPassword extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Password';	/**	 * Method to get the field input markup for password.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$size		= $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$maxLength	= $this->element['maxlength'] ? ' maxlength="' . (int) $this->element['maxlength'] . '"' : '';		$class		= $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$auto		= ((string) $this->element['autocomplete'] == 'off') ? ' autocomplete="off"' : '';		$readonly	= ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$disabled	= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$meter		= ((string) $this->element['strengthmeter'] == 'true');		$required   = $this->required ? ' required="required" aria-required="true"' : '';		$threshold	= $this->element['threshold'] ? (int) $this->element['threshold'] : 66;		$script = '';		if ($meter)		{			JHtml::_('script', 'system/passwordstrength.js', true, true);			$script = '<script type="text/javascript">new Form.PasswordStrength("' . $this->id . '",				{					threshold: ' . $threshold . ',					onUpdate: function(element, strength, threshold) {						element.set("data-passwordstrength", strength);					}				}			);</script>';		}		return '<input type="password" name="' . $this->name . '" id="' . $this->id . '"' .			' value="' . htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' .			$auto . $class . $readonly . $disabled . $size . $maxLength . $required . '/>' . $script;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);
<?php/** * @package     Joomla.Libraries * @subpackage  Error * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Displays the custom error page when an uncaught exception occurs. * * @package     Joomla.Libraries * @subpackage  Error * @since       3.0 */class JErrorPage{	/**	 * Render the error page based on an exception.	 *	 * @param   Exception  $error  The exception for which to render the error page.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function render(Exception $error)	{		try		{			$app      = JFactory::getApplication();			$document = JDocument::getInstance('error');			if (!$document)			{				// We're probably in an CLI environment				exit($error->getMessage());				$app->close(0);			}			$config = JFactory::getConfig();			// Get the current template from the application			$template = $app->getTemplate();			// Push the error object into the document			$document->setError($error);			if (ob_get_contents())			{				ob_end_clean();			}			$document->setTitle(JText::_('Error') . ': ' . $error->getCode());			$data = $document->render(				false,				array('template' => $template,				'directory' => JPATH_THEMES,				'debug' => $config->get('debug'))			);			// Failsafe to get the error displayed.			if (empty($data))			{				exit($error->getMessage());			}			else			{				// Do not allow cache				JResponse::allowCache(false);				JResponse::setBody($data);				echo JResponse::toString();			}		}		catch (Exception $e)		{			exit('Error displaying the error page: ' . $e->getMessage());		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Helper to render a JLayout object, storing a base path * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.1 */class JLayoutHelper{	/**	 * A default base path that will be used if none is provided when calling the render method.	 * Note that JLayoutFile itself will defaults to JPATH_ROOT . '/layouts' if no basePath is supplied at all	 *	 * @var    string	 * @since  3.1	 */	public static $defaultBasePath = '';	/**	 * Method to render the layout.	 *	 * @param   string  $layoutFile   Dot separated path to the layout file, relative to base path	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 * @param   string  $basePath     Base path to use when loading layout files	 *	 * @return  string	 *	 * @since   3.1	 */	public static function render($layoutFile, $displayData = null, $basePath = '')	{		$basePath = empty($basePath) ? self::$defaultBasePath : $basePath;		// Make sure we send null to JLayoutFile if no path set		$basePath = empty($basePath) ? null : $basePath;		$layout = new JLayoutFile($layoutFile, $basePath);		$renderedLayout = $layout->render($displayData);		return $renderedLayout;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit an article. * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.6 */class ContentViewArticle extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		if ($this->getLayout() == 'pagebreak')		{			// TODO: This is really dogy - should change this one day.			$eName    = JRequest::getVar('e_name');			$eName    = preg_replace('#[^A-Z0-9\-\_\[\]]#i', '', $eName);			$document = JFactory::getDocument();			$document->setTitle(JText::_('COM_CONTENT_PAGEBREAK_DOC_TITLE'));			$this->eName = &$eName;			parent::display($tpl);			return;		}		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		$this->canDo	= ContentHelper::getActions($this->state->get('filter.category_id'));		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $userId);		$canDo		= ContentHelper::getActions($this->state->get('filter.category_id'), $this->item->id);		JToolbarHelper::title(JText::_('COM_CONTENT_PAGE_'.($checkedOut ? 'VIEW_ARTICLE' : ($isNew ? 'ADD_ARTICLE' : 'EDIT_ARTICLE'))), 'article-add.png');		// Built the actions for new and existing records.		// For new records, check the create permission.		if ($isNew && (count($user->getAuthorisedCategories('com_content', 'core.create')) > 0))		{			JToolbarHelper::apply('article.apply');			JToolbarHelper::save('article.save');			JToolbarHelper::save2new('article.save2new');			JToolbarHelper::cancel('article.cancel');		}		else		{			// Can't save the record if it's checked out.			if (!$checkedOut)			{				// Since it's an existing record, check the edit permission, or fall back to edit own if the owner.				if ($canDo->get('core.edit') || ($canDo->get('core.edit.own') && $this->item->created_by == $userId))				{					JToolbarHelper::apply('article.apply');					JToolbarHelper::save('article.save');					// We can save this record, but check the create permission to see if we can return to make a new one.					if ($canDo->get('core.create'))					{						JToolbarHelper::save2new('article.save2new');					}				}			}			// If checked out, we can still save			if ($canDo->get('core.create'))			{				JToolbarHelper::save2copy('article.save2copy');			}			JToolbarHelper::cancel('article.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_CONTENT_ARTICLE_MANAGER_EDIT');	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.p3p * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! P3P Header Plugin * * @package     Joomla.Plugin * @subpackage  System.p3p * @since       1.6 */class PlgSystemP3p extends JPlugin{	/*	 * @since   1.6	 */	public function onAfterInitialise()	{		// Get the header		$header = $this->params->get('header', 'NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM');		$header = trim($header);		// Bail out on empty header (why would anyone do that?!)		if ( empty($header) )		{			return;		}		// Replace any existing P3P headers in the response		JResponse::setHeader('P3P', 'CP="'.$header.'"', true);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Editors.codemirror * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * CodeMirror Editor Plugin. * * @package     Joomla.Plugin * @subpackage  Editors.codemirror * @since       1.6 */class PlgEditorCodemirror extends JPlugin{	/**	 * Base path for editor files	 */	protected $_basePath = 'media/editors/codemirror/';	/**	 * Initialises the Editor.	 *	 * @return  string	JavaScript Initialization string.	 */	public function onInit()	{		JHtml::_('behavior.framework');		$uncompressed	= JFactory::getApplication()->getCfg('debug') ? '-uncompressed' : '';		JHtml::_('script', $this->_basePath . 'js/codemirror'.$uncompressed.'.js', false, false, false, false);		JHtml::_('stylesheet', $this->_basePath . 'css/codemirror.css');		return '';	}	/**	 * Copy editor content to form field.	 *	 * @param   string	$id	The id of the editor field.	 *	 * @return  string Javascript	 */	public function onSave($id)	{		return "document.getElementById('$id').value = Joomla.editors.instances['$id'].getCode();\n";	}	/**	 * Get the editor content.	 *	 * @param   string	$id	The id of the editor field.	 *	 * @return  string Javascript	 */	public function onGetContent($id)	{		return "Joomla.editors.instances['$id'].getCode();\n";	}	/**	 * Set the editor content.	 *	 * @param   string	$id			The id of the editor field.	 * @param   string	$content	The content to set.	 *	 * @return  string Javascript	 */	public function onSetContent($id, $content)	{		return "Joomla.editors.instances['$id'].setCode($content);\n";	}	/**	 * Adds the editor specific insert method.	 *	 * @return  boolean	 */	public function onGetInsertMethod()	{		static $done = false;		// Do this only once.		if (!$done)		{			$done = true;			$doc = JFactory::getDocument();			$js = "\tfunction jInsertEditorText(text, editor)				{					Joomla.editors.instances[editor].replaceSelection(text);\n			}";			$doc->addScriptDeclaration($js);		}		return true;	}	/**	 * Display the editor area.	 *	 * @param   string	$name		The control name.	 * @param   string	$html		The contents of the text area.	 * @param   string	$width		The width of the text area (px or %).	 * @param   string	$height		The height of the text area (px or %).	 * @param   integer  $col		The number of columns for the textarea.	 * @param   integer  $row		The number of rows for the textarea.	 * @param   boolean	$buttons	True and the editor buttons will be displayed.	 * @param   string	$id			An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string	$asset	 * @param   object	$author	 * @param   array  $params		Associative array of editor parameters.	 *	 * @return  string HTML	 */	public function onDisplay($name, $content, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		if (empty($id))		{			$id = $name;		}		// Only add "px" to width and height if they are not given as a percentage		if (is_numeric($width))		{			$width .= 'px';		}		if (is_numeric($height))		{			$height .= 'px';		}		// Must pass the field id to the buttons in this editor.		$buttons = $this->_displayButtons($id, $buttons, $asset, $author);		$compressed	= JFactory::getApplication()->getCfg('debug') ? '-uncompressed' : '';		// Default syntax		$parserFile = 'parsexml.js';		$styleSheet = array('xmlcolors.css');		// Look if we need special syntax coloring.		$syntax = JFactory::getApplication()->getUserState('editor.source.syntax');		if ($syntax)		{			switch($syntax)			{				case 'css':					$parserFile = 'parsecss.js';					$styleSheet = array('csscolors.css');					break;				case 'js':					$parserFile = array('tokenizejavascript.js', 'parsejavascript.js');					$styleSheet = array('jscolors.css');					break;				case 'html':					$parserFile = array('parsexml.js', 'parsecss.js', 'tokenizejavascript.js', 'parsejavascript.js', 'parsehtmlmixed.js');					$styleSheet = array('xmlcolors.css', 'jscolors.css', 'csscolors.css');					break;				case 'php':					$parserFile = array('parsexml.js', 'parsecss.js', 'tokenizejavascript.js', 'parsejavascript.js', 'tokenizephp.js', 'parsephp.js', 'parsephphtmlmixed.js');					$styleSheet = array('xmlcolors.css', 'jscolors.css', 'csscolors.css', 'phpcolors.css');					break;				default:					break;			} //switch		}		foreach ($styleSheet as &$style)		{			$style = JURI::root(true).'/'.$this->_basePath.'css/'.$style;		}		$options	= new stdClass;		$options->basefiles		= array('basefiles'.$compressed.'.js');		$options->path			= JURI::root(true).'/'.$this->_basePath.'js/';		$options->parserfile	= $parserFile;		$options->stylesheet	= $styleSheet;		$options->height		= $height;		$options->width			= $width;		$options->continuousScanning = 500;		if ($this->params->get('linenumbers', 0))		{			$options->lineNumbers	= true;			$options->textWrapping	= false;		}		if ($this->params->get('tabmode', '') == 'shift')		{			$options->tabMode = 'shift';		}		$html = array();		$html[]	= "<textarea name=\"$name\" id=\"$id\" cols=\"$col\" rows=\"$row\">$content</textarea>";		$html[] = $buttons;		$html[] = '<script type="text/javascript">';		$html[] = '(function() {';		$html[] = 'var editor = CodeMirror.fromTextArea("'.$id.'", '.json_encode($options).');';		$html[] = 'Joomla.editors.instances[\''.$id.'\'] = editor;';		$html[] = '})()';		$html[] = '</script>';		return implode("\n", $html);	}	/**	 * Displays the editor buttons.	 *	 * @param string $name	 * @param mixed $buttons [array with button objects | boolean true to display buttons]	 *	 * @return  string HTML	 */	protected function _displayButtons($name, $buttons, $asset, $author)	{		// Load modal popup behavior		JHtml::_('behavior.modal', 'a.modal-button');		$args['name'] = $name;		$args['event'] = 'onGetInsertMethod';		$html = array();		$results[] = $this->update($args);		foreach ($results as $result)		{			if (is_string($result) && trim($result))			{				$html[] = $result;			}		}		if (is_array($buttons) || (is_bool($buttons) && $buttons))		{			$results = $this->_subject->getButtons($name, $buttons, $asset, $author);			// This will allow plugins to attach buttons or change the behavior on the fly using AJAX			$html[] = '<div id="editor-xtd-buttons">';			$html[] = '<div class="btn-toolbar">';			foreach ($results as $button)			{				// Results should be an object				if ($button->get('name'))				{					$modal		= ($button->get('modal')) ? 'class="modal-button btn"' : null;					$href		= ($button->get('link')) ? ' class="btn" href="'.JURI::base().$button->get('link').'"' : null;					$onclick	= ($button->get('onclick')) ? 'onclick="'.$button->get('onclick').'"' : null;					$title      = ($button->get('title')) ? $button->get('title') : $button->get('text');					$html[] = '<a '.$modal.' title="'.$title.'" '.$href.' '.$onclick.' rel="'.$button->get('options').'">';					$html[] = '<i class="icon-' . $button->get('name'). '"></i> ';					$html[] = $button->get('text').'</a>';				}			}			$html[] = '</div>';			$html[] = '</div>';		}		return implode("\n", $html);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a select list of integers with specified first, last and step values. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldInteger extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Integer';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Initialize some field attributes.		$first = (int) $this->element['first'];		$last = (int) $this->element['last'];		$step = (int) $this->element['step'];		// Sanity checks.		if ($step == 0)		{			// Step of 0 will create an endless loop.			return $options;		}		elseif ($first < $last && $step < 0)		{			// A negative step will never reach the last number.			return $options;		}		elseif ($first > $last && $step > 0)		{			// A position step will never reach the last number.			return $options;		}		elseif ($step < 0)		{			// Build the options array backwards.			for ($i = $first; $i >= $last; $i += $step)			{				$options[] = JHtml::_('select.option', $i);			}		}		else		{			// Build the options array.			for ($i = $first; $i <= $last; $i += $step)			{				$options[] = JHtml::_('select.option', $i);			}		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;jimport('joomla.filesystem.file');/** * Indexer class supporting SQL Server for the Finder indexer package. * * The indexer class provides the core functionality of the Finder * search engine. It is responsible for adding and updating the * content links table; extracting and scoring tokens; and maintaining * all referential information for the content. * * Note: All exceptions thrown from within this class should be caught * by the controller. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.1 */class FinderIndexerDriverSqlsrv extends FinderIndexer{	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function index($item, $format = 'html')	{		// Mark beforeIndexing in the profiler.		static::$profiler ? static::$profiler->mark('beforeIndexing') : null;		$db = JFactory::getDbo();		$nd = $db->getNullDate();		// Check if the item is in the database.		$query = $db->getQuery(true)			->select($db->quoteName('link_id') . ', ' . $db->quoteName('md5sum'))			->from($db->quoteName('#__finder_links'))			->where($db->quoteName('url') . ' = ' . $db->quote($item->url));		// Load the item  from the database.		$db->setQuery($query);		$link = $db->loadObject();		// Get the indexer state.		$state = static::getState();		// Get the signatures of the item.		$curSig = static::getSignature($item);		$oldSig = isset($link->md5sum) ? $link->md5sum : null;		// Get the other item information.		$linkId = empty($link->link_id) ? null : $link->link_id;		$isNew = empty($link->link_id) ? true : false;		// Check the signatures. If they match, the item is up to date.		if (!$isNew && $curSig == $oldSig)		{			return $linkId;		}		/*		 * If the link already exists, flush all the term maps for the item.		 * Maps are stored in 16 tables so we need to iterate through and flush		 * each table one at a time.		 */		if (!$isNew)		{			for ($i = 0; $i <= 15; $i++)			{				// Flush the maps for the link.				$query->clear()					->delete($db->quoteName('#__finder_links_terms' . dechex($i)))					->where($db->quoteName('link_id') . ' = ' . (int) $linkId);				$db->setQuery($query);				$db->execute();			}			// Remove the taxonomy maps.			FinderIndexerTaxonomy::removeMaps($linkId);		}		// Mark afterUnmapping in the profiler.		static::$profiler ? static::$profiler->mark('afterUnmapping') : null;		// Perform cleanup on the item data.		$item->publish_start_date = (int) $item->publish_start_date != 0 ? $item->publish_start_date : $nd;		$item->publish_end_date = (int) $item->publish_end_date != 0 ? $item->publish_end_date : $nd;		$item->start_date = (int) $item->start_date != 0 ? $item->start_date : $nd;		$item->end_date = (int) $item->end_date != 0 ? $item->end_date : $nd;		// Prepare the item description.		$item->description = FinderIndexerHelper::parse($item->summary);		/*		 * Now, we need to enter the item into the links table. If the item		 * already exists in the database, we need to use an UPDATE query.		 * Otherwise, we need to use an INSERT to get the link id back.		 */		if ($isNew)		{			$columnsArray = array(				$db->quoteName('url'), $db->quoteName('route'), $db->quoteName('title'), $db->quoteName('description'),				$db->quoteName('indexdate'), $db->quoteName('published'), $db->quoteName('state'), $db->quoteName('access'),				$db->quoteName('language'), $db->quoteName('type_id'), $db->quoteName('object'), $db->quoteName('publish_start_date'),				$db->quoteName('publish_end_date'), $db->quoteName('start_date'), $db->quoteName('end_date'), $db->quoteName('list_price'),				$db->quoteName('sale_price')			);			// Insert the link.			$query->clear()				->insert($db->quoteName('#__finder_links'))				->columns($columnsArray)				->values(				$db->quote($item->url) . ', '				. $db->quote($item->route) . ', '				. $db->quote($item->title) . ', '				. $db->quote($item->description) . ', '				. $query->currentTimestamp() . ', '				. '1, '				. (int) $item->state . ', '				. (int) $item->access . ', '				. $db->quote($item->language) . ', '				. (int) $item->type_id . ', '				. $db->quote(serialize($item)) . ', '				. $db->quote($item->publish_start_date) . ', '				. $db->quote($item->publish_end_date) . ', '				. $db->quote($item->start_date) . ', '				. $db->quote($item->end_date) . ', '				. (double) ($item->list_price ? $item->list_price : 0) . ', '				. (double) ($item->sale_price ? $item->sale_price : 0)			);			$db->setQuery($query);			$db->execute();			// Get the link id.			$linkId = (int) $db->insertid();		}		else		{			// Update the link.			$query->clear()				->update($db->quoteName('#__finder_links'))				->set($db->quoteName('route') . ' = ' . $db->quote($item->route))				->set($db->quoteName('title') . ' = ' . $db->quote($item->title))				->set($db->quoteName('description') . ' = ' . $db->quote($item->description))				->set($db->quoteName('indexdate') . ' = ' . $query->currentTimestamp())				->set($db->quoteName('state') . ' = ' . (int) $item->state)				->set($db->quoteName('access') . ' = ' . (int) $item->access)				->set($db->quoteName('language') . ' = ' . $db->quote($item->language))				->set($db->quoteName('type_id') . ' = ' . (int) $item->type_id)				->set($db->quoteName('object') . ' = ' . $db->quote(serialize($item)))				->set($db->quoteName('publish_start_date') . ' = ' . $db->quote($item->publish_start_date))				->set($db->quoteName('publish_end_date') . ' = ' . $db->quote($item->publish_end_date))				->set($db->quoteName('start_date') . ' = ' . $db->quote($item->start_date))				->set($db->quoteName('end_date') . ' = ' . $db->quote($item->end_date))				->set($db->quoteName('list_price') . ' = ' . (double) ($item->list_price ? $item->list_price : 0))				->set($db->quoteName('sale_price') . ' = ' . (double) ($item->sale_price ? $item->sale_price : 0))				->where('link_id = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Set up the variables we will need during processing.		$tokens = array();		$count = 0;		// Mark afterLinking in the profiler.		static::$profiler ? static::$profiler->mark('afterLinking') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		/*		 * Process the item's content. The items can customize their		 * processing instructions to define extra properties to process		 * or rearrange how properties are weighted.		 */		foreach ($item->getInstructions() as $group => $properties)		{			// Iterate through the properties of the group.			foreach ($properties as $property)			{				// Check if the property exists in the item.				if (empty($item->$property))				{					continue;				}				// Tokenize the property.				if (is_array($item->$property))				{					// Tokenize an array of content and add it to the database.					foreach ($item->$property as $ip)					{						// If the group is path, we need to a few extra processing						// steps to strip the extension and convert slashes and dashes						// to spaces.						if ($group === static::PATH_CONTEXT)						{							$ip = JFile::stripExt($ip);							$ip = str_replace('/', ' ', $ip);							$ip = str_replace('-', ' ', $ip);						}						// Tokenize a string of content and add it to the database.						$count += $this->tokenizeToDB($ip, $group, $item->language, $format);						// Check if we're approaching the memory limit of the token table.						if ($count > static::$state->options->get('memory_table_limit', 30000))						{							$this->toggleTables(false);						}					}				}				else				{					// If the group is path, we need to a few extra processing					// steps to strip the extension and convert slashes and dashes					// to spaces.					if ($group === static::PATH_CONTEXT)					{						$item->$property = JFile::stripExt($item->$property);						$item->$property = str_replace('/', ' ', $item->$property);						$item->$property = str_replace('-', ' ', $item->$property);					}					// Tokenize a string of content and add it to the database.					$count += $this->tokenizeToDB($item->$property, $group, $item->language, $format);					// Check if we're approaching the memory limit of the token table.					if ($count > static::$state->options->get('memory_table_limit', 30000))					{						$this->toggleTables(false);					}				}			}		}		/*		 * Process the item's taxonomy. The items can customize their		 * taxonomy mappings to define extra properties to map.		 */		foreach ($item->getTaxonomy() as $branch => $nodes)		{			// Iterate through the nodes and map them to the branch.			foreach ($nodes as $node)			{				// Add the node to the tree.				$nodeId = FinderIndexerTaxonomy::addNode($branch, $node->title, $node->state, $node->access);				// Add the link => node map.				FinderIndexerTaxonomy::addMap($linkId, $nodeId);				// Tokenize the node title and add them to the database.				$count += $this->tokenizeToDB($node->title, static::META_CONTEXT, $item->language, $format);			}		}		// Mark afterProcessing in the profiler.		static::$profiler ? static::$profiler->mark('afterProcessing') : null;		/*		 * At this point, all of the item's content has been parsed, tokenized		 * and inserted into the #__finder_tokens table. Now, we need to		 * aggregate all the data into that table into a more usable form. The		 * aggregated data will be inserted into #__finder_tokens_aggregate		 * table.		 */		$query	= 'INSERT INTO ' . $db->quoteName('#__finder_tokens_aggregate') .				' (' . $db->quoteName('term_id') .				', ' . $db->quoteName('term') .				', ' . $db->quoteName('stem') .				', ' . $db->quoteName('common') .				', ' . $db->quoteName('phrase') .				', ' . $db->quoteName('term_weight') .				', ' . $db->quoteName('context') .				', ' . $db->quoteName('context_weight') .				', ' . $db->quoteName('language') . ')' .				' SELECT' .				' t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context,' .				' ROUND( t1.weight * COUNT( t2.term ) * %F, 8 ) AS context_weight, t1.language' .				' FROM (' .				'   SELECT DISTINCT t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				'   FROM ' . $db->quoteName('#__finder_tokens') . ' AS t1' .				'   WHERE t1.context = %d' .				' ) AS t1' .				' JOIN ' . $db->quoteName('#__finder_tokens') . ' AS t2 ON t2.term = t1.term' .				' LEFT JOIN ' . $db->quoteName('#__finder_terms') . ' AS t ON t.term = t1.term' .				' WHERE t2.context = %d' .				' GROUP BY t1.term, t.term_id, t1.term, t1.stem, t1.common, t1.phrase, t1.weight, t1.context, t1.language' .				' ORDER BY t1.term DESC';		// Iterate through the contexts and aggregate the tokens per context.		foreach ($state->weights as $context => $multiplier)		{			// Run the query to aggregate the tokens for this context..			$db->setQuery(sprintf($query, $multiplier, $context, $context));			$db->execute();		}		// Mark afterAggregating in the profiler.		static::$profiler ? static::$profiler->mark('afterAggregating') : null;		/*		 * When we pulled down all of the aggregate data, we did a LEFT JOIN		 * over the terms table to try to find all the term ids that		 * already exist for our tokens. If any of the rows in the aggregate		 * table have a term of 0, then no term record exists for that		 * term so we need to add it to the terms table.		 */		$db->setQuery(			'INSERT INTO ' . $db->quoteName('#__finder_terms') .			' (' . $db->quoteName('term') .			', ' . $db->quoteName('stem') .			', ' . $db->quoteName('common') .			', ' . $db->quoteName('phrase') .			', ' . $db->quoteName('weight') .			', ' . $db->quoteName('soundex') . ')' .			' SELECT ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight, SOUNDEX(ta.term)' .			' FROM ' . $db->quoteName('#__finder_tokens_aggregate') . ' AS ta' .			' WHERE ta.term_id IS NULL' .			' GROUP BY ta.term, ta.stem, ta.common, ta.phrase, ta.term_weight'		);		$db->execute();		/*		 * Now, we just inserted a bunch of new records into the terms table		 * so we need to go back and update the aggregate table with all the		 * new term ids.		 */		$query = $db->getQuery(true)			->update('ta')			->set('ta.term_id = t.term_id from #__finder_tokens_aggregate AS ta INNER JOIN #__finder_terms AS t ON t.term = ta.term')			->where('ta.term_id IS NULL');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * After we've made sure that all of the terms are in the terms table		 * and the aggregate table has the correct term ids, we need to update		 * the links counter for each term by one.		 */		$query->clear()			->update('t')			->set('t.links = t.links + 1 FROM #__finder_terms AS t INNER JOIN #__finder_tokens_aggregate AS ta ON ta.term_id = t.term_id');		$db->setQuery($query);		$db->execute();		// Mark afterTerms in the profiler.		static::$profiler ? static::$profiler->mark('afterTerms') : null;		/*		 * Before we can insert all of the mapping rows, we have to figure out		 * which mapping table the rows need to be inserted into. The mapping		 * table for each term is based on the first character of the md5 of		 * the first character of the term. In php, it would be expressed as		 * substr(md5(substr($token, 0, 1)), 0, 1)		 */		$query->clear()			->update($db->quoteName('#__finder_tokens_aggregate'))			->set($db->quoteName('map_suffix') . " = SUBSTRING(HASHBYTES('MD5', SUBSTRING(" . $db->quoteName('term') . ', 1, 1)), 1, 1)');		$db->setQuery($query);		$db->execute();		/*		 * At this point, the aggregate table contains a record for each		 * term in each context. So, we're going to pull down all of that		 * data while grouping the records by term and add all of the		 * sub-totals together to arrive at the final total for each token for		 * this link. Then, we insert all of that data into the appropriate		 * mapping table.		 */		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			/*			 * We have to run this query 16 times, one for each link => term			 * mapping table.			 */			$db->setQuery(				'INSERT INTO ' . $db->quoteName('#__finder_links_terms' . $suffix) .				' (' . $db->quoteName('link_id') .				', ' . $db->quoteName('term_id') .				', ' . $db->quoteName('weight') . ')' .				' SELECT ' . (int) $linkId . ', ' . $db->quoteName('term_id') . ',' .				' ROUND(SUM(' . $db->quoteName('context_weight') . '), 8)' .				' FROM ' . $db->quoteName('#__finder_tokens_aggregate') .				' WHERE ' . $db->quoteName('map_suffix') . ' = ' . $db->quote($suffix) .				' GROUP BY term, term_id' .				' ORDER BY ' . $db->quoteName('term') . ' DESC'			);			$db->execute();		}		// Mark afterMapping in the profiler.		static::$profiler ? static::$profiler->mark('afterMapping') : null;		// Update the signature.		$query->clear()			->update($db->quoteName('#__finder_links'))			->set($db->quoteName('md5sum') . ' = ' . $db->quote($curSig))			->where($db->quoteName('link_id') . ' = ' . $db->quote($linkId));		$db->setQuery($query);		$db->execute();		// Mark afterSigning in the profiler.		static::$profiler ? static::$profiler->mark('afterSigning') : null;		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		// Toggle the token tables back to memory tables.		$this->toggleTables(true);		// Mark afterTruncating in the profiler.		static::$profiler ? static::$profiler->mark('afterTruncating') : null;		return $linkId;	}	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function remove($linkId)	{		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Update the link counts and remove the mapping records.		for ($i = 0; $i <= 15; $i++)		{			// Update the link counts for the terms.			$query->update('t')				->set('t.links = t.links - 1 from #__finder_terms AS t INNER JOIN #__finder_links_terms' . dechex($i) . ' AS AS m ON m.term_id = t.term_id')				->where('m.link_id = ' . $db->quote((int) $linkId));			$db->setQuery($query);			$db->execute();			// Remove all records from the mapping tables.			$query->clear()				->delete($db->quoteName('#__finder_links_terms' . dechex($i)))				->where($db->quoteName('link_id') . ' = ' . (int) $linkId);			$db->setQuery($query);			$db->execute();		}		// Delete all orphaned terms.		$query->clear()			->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Delete the link from the index.		$query->clear()			->delete($db->quoteName('#__finder_links'))			->where($db->quoteName('link_id') . ' = ' . $db->quote((int) $linkId));		$db->setQuery($query);		$db->execute();		// Remove the taxonomy maps.		FinderIndexerTaxonomy::removeMaps($linkId);		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	public function optimize()	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Delete all orphaned terms.		$query->delete($db->quoteName('#__finder_terms'))			->where($db->quoteName('links') . ' <= 0');		$db->setQuery($query);		$db->execute();		// Remove the orphaned taxonomy nodes.		FinderIndexerTaxonomy::removeOrphanNodes();		return true;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	protected function addTokensToDB($tokens, $context = '')	{		// Get the database object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Force tokens to an array.		$tokens = is_array($tokens) ? $tokens : array($tokens);		// Count the number of token values.		$values = 0;		// Set some variables to count the iterations		$totalTokens = count($tokens);		$remaining   = $totalTokens;		$iterations  = 0;		$loop        = true;		do		{			// Shift the token off the array			$token = array_shift($tokens);			$query->values(				$db->quote($token->term) . ', '				. $db->quote($token->stem) . ', '				. (int) $token->common . ', '				. (int) $token->phrase . ', '				. (float) $token->weight . ', '				. (int) $context . ', '				. $db->quote($token->language)			);			$values++;			$iterations++;			$remaining--;			// Run the query if we've reached 1000 iterations or there are no tokens remaining			if ($iterations == 1000 || $remaining == 0)			{				// Insert the tokens into the database.				$query->insert($db->quoteName('#__finder_tokens'))					->columns(					array(						$db->quoteName('term'),						$db->quoteName('stem'),						$db->quoteName('common'),						$db->quoteName('phrase'),						$db->quoteName('weight'),						$db->quoteName('context'),						$db->quoteName('language')					)				);				$db->setQuery($query);				$db->execute();				// Reset the query				$query->clear();			}			// If there's nothing remaining, we're done looping			if ($remaining == 0)			{				$loop = false;			}		}		while ($loop == true);		return $values;	}	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   3.1	 * @throws  Exception on database error.	 */	protected function toggleTables($memory)	{		return true;	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to install the sample data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerInstallSample extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Get the options from the session		$options = $model->getOptions();		// Get the database model.		$db = new InstallationModelDatabase;		// Attempt to create the database tables.		$return = $db->installSampleData($options);		$r = new stdClass;		$r->view = 'install';		// Check if the database was initialised		if (!$return)		{			$r->view = 'database';		}		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.calendar');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');//$images = json_decode($this->item->images);//$urls = json_decode($this->item->urls);// This checks if the editor config options have ever been saved. If they haven't they will fall back to the original settings.$editoroptions = isset($params->show_publishing_options);if (!$editoroptions){	$params->show_urls_images_frontend = '0';}?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'article.cancel' || document.formvalidator.isValid(document.id('adminForm')))		{			<?php echo $this->form->getField('articletext')->save(); ?>			Joomla.submitform(task);		}	}</script><div class="edit item-page<?php echo $this->pageclass_sfx; ?>">	<?php if ($params->get('show_page_heading', 1)) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_content&a_id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="adminForm" class="form-validate form-vertical">		<div class="btn-toolbar">			<div class="btn-group">				<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('article.save')">					<span class="icon-ok"></span>&#160;<?php echo JText::_('JSAVE') ?>				</button>			</div>			<div class="btn-group">				<button type="button" class="btn" onclick="Joomla.submitbutton('article.cancel')">					<span class="icon-cancel"></span>&#160;<?php echo JText::_('JCANCEL') ?>				</button>			</div>		</div>		<fieldset>			<ul class="nav nav-tabs">				<li class="active"><a href="#editor" data-toggle="tab"><?php echo JText::_('JEDITOR') ?></a></li>				<?php if ($params->get('show_urls_images_frontend') ) : ?>				<li><a href="#images" data-toggle="tab"><?php echo JText::_('COM_CONTENT_IMAGES_AND_URLS') ?></a></li>				<?php endif; ?>				<li><a href="#publishing" data-toggle="tab"><?php echo JText::_('COM_CONTENT_PUBLISHING') ?></a></li>				<li><a href="#language" data-toggle="tab"><?php echo JText::_('JFIELD_LANGUAGE_LABEL') ?></a></li>				<li><a href="#metadata" data-toggle="tab"><?php echo JText::_('COM_CONTENT_METADATA') ?></a></li>			</ul>			<div class="tab-content">				<div class="tab-pane active" id="editor">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('title'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('title'); ?>						</div>					</div>					<?php if (is_null($this->item->id)) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('alias'); ?>						</div>					</div>					<?php endif; ?>					<?php echo $this->form->getInput('articletext'); ?>				</div>				<?php if ($params->get('show_urls_images_frontend')): ?>				<div class="tab-pane" id="images">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro', 'images'); ?>							<?php echo $this->form->getInput('image_intro', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro_alt', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_intro_alt', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_intro_caption', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_intro_caption', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('float_intro', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('float_intro', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext_alt', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext_alt', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('image_fulltext_caption', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('image_fulltext_caption', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('float_fulltext', 'images'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('float_fulltext', 'images'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urla', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urla', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlatext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlatext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targeta', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlb', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlb', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlbtext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlbtext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targetb', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlc', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlc', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('urlctext', 'urls'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('urlctext', 'urls'); ?>						</div>					</div>					<div class="control-group">						<div class="controls">							<?php echo $this->form->getInput('targetc', 'urls'); ?>						</div>					</div>				</div>				<?php endif; ?>				<div class="tab-pane" id="publishing">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('catid'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('catid'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('tags', 'metadata'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('tags', 'metadata'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('created_by_alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('created_by_alias'); ?>						</div>					</div>					<?php if ($this->item->params->get('access-change')) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('state'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('state'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('featured'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('featured'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('publish_up'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('publish_up'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('publish_down'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('publish_down'); ?>							</div>						</div>					<?php endif; ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('access'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('access'); ?>						</div>					</div>					<?php if (is_null($this->item->id)):?>						<div class="control-group">							<div class="control-label">							</div>							<div class="controls">								<?php echo JText::_('COM_CONTENT_ORDERING'); ?>							</div>						</div>					<?php endif; ?>				</div>				<div class="tab-pane" id="language">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('language'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('language'); ?>						</div>					</div>				</div>				<div class="tab-pane" id="metadata">					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('metadesc'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('metadesc'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('metakey'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('metakey'); ?>						</div>					</div>					<input type="hidden" name="task" value="" />					<input type="hidden" name="return" value="<?php echo $this->return_page; ?>" />					<?php if ($this->params->get('enable_category', 0) == 1) :?>					<input type="hidden" name="jform[catid]" value="<?php echo $this->params->get('catid', 1); ?>" />					<?php endif; ?>				</div>			</div>			<?php echo JHtml::_('form.token'); ?>		</fieldset>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User note model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersModelNote extends JModelAdmin{	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   2.5	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.note', 'note', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 *	 * @since   2.5	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		// Get the dispatcher and load the users plugins.		$dispatcher	= JEventDispatcher::getInstance();		JPluginHelper::importPlugin('user');		// Trigger the data preparation event.		$results = $dispatcher->trigger('onContentPrepareData', array('com_users.note', $result));		return $result;	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $name     The table name. Optional.	 * @param   string  $prefix   The class prefix. Optional.	 * @param   array   $options  Configuration array for model. Optional.	 *	 * @return  JTable  The table object	 *	 * @since   2.5	 */	public function getTable($name = 'Note', $prefix = 'UsersTable', $options = array())	{		return JTable::getInstance($name, $prefix, $options);	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Get the application		$app = JFactory::getApplication();		// Check the session for previously entered form data.		$data = $app->getUserState('com_users.edit.note.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('note.id') == 0)			{				$data->set('catid', $app->input->get('catid', $app->getUserState('com_users.notes.filter.category_id'), 'int'));			}			$userId = $app->input->get('u_id', 0, 'int');			if ($userId != 0)			{				$data->user_id = $userId;			}		}		$this->preprocessData('com_users.note', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState()	{		parent::populateState();		$userId = JFactory::getApplication()->input->get('u_id', 0, 'int');		$this->setState('note.user_id', $userId);	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	/*public function save($data)	{		$pk		= (!empty($data['id'])) ? $data['id'] : (int) $this->getState('note.id');		$table	= $this->getTable();		$isNew	= empty($pk);		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// JTableCategory doesn't bind the params, so we need to do that by hand.		if (isset($data['params']) && is_array($data['params']))		{			$registry = new JRegistry();			$registry->loadArray($data['params']);			$table->params = $registry->toString();			// This will give us INI format.		}		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		$this->setState('note.id', $table->id);		return true;	}*/}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_users&view=debuggroup&user_id='.(int) $this->state->get('filter.user_id'));?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>		<div id="filter-bar" class="btn-toolbar">			<div class="filter-search btn-group pull-left">				<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_USERS_SEARCH_ASSETS'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn tip" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>				<button type="button" class="btn tip" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_RESET'); ?>"><i class="icon-remove"></i></button>			</div>		</div>		<div class="clearfix"> </div>		<table class="table table-striped">			<thead>				<tr>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_TITLE', 'a.title', $listDirn, $listOrder); ?>					</th>					<th class="left">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_ASSET_NAME', 'a.name', $listDirn, $listOrder); ?>					</th>					<?php foreach ($this->actions as $key => $action) : ?>					<th width="5%" class="nowrap center">						<span class="hasTip" title="<?php echo htmlspecialchars(JText::_($key) . '::' . JText::_($action[1]), ENT_COMPAT, 'UTF-8'); ?>"><?php echo JText::_($key); ?></span>					</th>					<?php endforeach; ?>					<th width="5%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'COM_USERS_HEADING_LFT', 'a.lft', $listDirn, $listOrder); ?>					</th>					<th width="1%" class="nowrap center">						<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="15">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>				<tr class="row1">					<td colspan="15">						<div>							<?php echo JText::_('COM_USERS_DEBUG_LEGEND'); ?>							<span class="btn disabled btn-micro btn-warning"><i class="icon-white icon-ban-circle"></i></span> <?php echo JText::_('COM_USERS_DEBUG_IMPLICIT_DENY');?>							<span class="btn disabled btn-micro btn-success"><i class="icon-white icon-ok"></i></span> <?php echo JText::_('COM_USERS_DEBUG_EXPLICIT_ALLOW');?>							<span class="btn disabled btn-micro btn-danger"><i class="icon-white icon-remove"></i></span> <?php echo JText::_('COM_USERS_DEBUG_EXPLICIT_DENY');?>						</div>					</td>				</tr>				<?php foreach ($this->items as $i => $item) : ?>					<tr class="row0">						<td>							<?php echo $this->escape($item->title); ?>						</td>						<td class="nowrap">							<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level) ?>							<?php echo $this->escape($item->name); ?>						</td>						<?php foreach ($this->actions as $action) : ?>							<?php							$name  = $action[0];							$check = $item->checks[$name];							if ($check === true) :								$class  = 'icon-ok';								$button = 'btn-success';							elseif ($check === false) :								$class  = 'icon-remove';								$button = 'btn-danger';							elseif ($check === null) :								$class  = 'icon-ban-circle';								$button = 'btn-warning';							else :								$class  = '';								$button = '';							endif;							?>						<td class="center">							<span class="btn disabled btn-micro <?php echo $button; ?>">								<i class="icon-white <?php echo $class; ?>"></i>							</span>						</td>						<?php endforeach; ?>						<td class="center">							<?php echo (int) $item->lft; ?>							- <?php echo (int) $item->rgt; ?>						</td>						<td class="center">							<?php echo (int) $item->id; ?>						</td>					</tr>				<?php endforeach; ?>			</tbody>		</table>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'plugin.cancel' || document.formvalidator.isValid(document.id('style-form')))		{			Joomla.submitform(task, document.getElementById('style-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_plugins&layout=edit&extension_id='.(int) $this->item->extension_id); ?>" method="post" name="adminForm" id="style-form" class="form-validate">	<div class="col main-section">		<fieldset class="adminform">			<legend><?php echo JText::_('JDETAILS') ?></legend>			<ul class="adminformlist">			<li><?php echo $this->form->getLabel('name'); ?>			<?php echo $this->form->getInput('name'); ?>			<span class="readonly plg-name"><?php echo JText::_($this->item->name);?></span></li>			<li><?php echo $this->form->getLabel('enabled'); ?>			<?php echo $this->form->getInput('enabled'); ?></li>			<li><?php echo $this->form->getLabel('access'); ?>			<?php echo $this->form->getInput('access'); ?></li>			<li><?php echo $this->form->getLabel('ordering'); ?>			<?php echo $this->form->getInput('ordering'); ?></li>			<li><?php echo $this->form->getLabel('folder'); ?>			<?php echo $this->form->getInput('folder'); ?></li>			<li><?php echo $this->form->getLabel('element'); ?>			<?php echo $this->form->getInput('element'); ?></li>			<?php if ($this->item->extension_id) : ?>				<li><?php echo $this->form->getLabel('extension_id'); ?>				<?php echo $this->form->getInput('extension_id'); ?></li>			<?php endif; ?>			</ul>			<!-- Plugin metadata -->			<?php if ($this->item->xml) : ?>				<?php if ($text = trim($this->item->xml->description)) : ?>					<label id="jform_extdescription-lbl">						<?php echo JText::_('JGLOBAL_DESCRIPTION'); ?>					</label>					<div class="clr"></div>					<div class="readonly plg-desc extdescript">						<?php echo JText::_($text); ?>					</div>				<?php endif; ?>			<?php else : ?>				<?php echo JText::_('COM_PLUGINS_XML_ERR'); ?>			<?php endif; ?>		</fieldset>	</div>	<div class="col options-section">	<?php echo JHtml::_('sliders.start', 'plugin-sliders-'.$this->item->extension_id); ?>		<?php echo $this->loadTemplate('options'); ?>		<div class="clr"></div>	<?php echo JHtml::_('sliders.end'); ?>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?>	</div>	<div class="clr"></div></form>
