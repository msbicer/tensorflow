<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to pagination rendering. * * pagination_list_footer *	Input variable $list is an array with offsets: *		$list[prefix]		: string *		$list[limit]		: int *		$list[limitstart]	: int *		$list[total]		: int *		$list[limitfield]	: string *		$list[pagescounter]	: string *		$list[pageslinks]	: string * * pagination_list_render *	Input variable $list is an array with offsets: *		$list[all] *			[data]		: string *			[active]	: boolean *		$list[start] *			[data]		: string *			[active]	: boolean *		$list[previous] *			[data]		: string *			[active]	: boolean *		$list[next] *			[data]		: string *			[active]	: boolean *		$list[end] *			[data]		: string *			[active]	: boolean *		$list[pages] *			[{PAGE}][data]		: string *			[{PAGE}][active]	: boolean * * pagination_item_active *	Input variable $item is an object with fields: *		$item->base	: integer *		$item->prefix	: string *		$item->link	: string *		$item->text	: string * * pagination_item_inactive *	Input variable $item is an object with fields: *		$item->base	: integer *		$item->prefix	: string *		$item->link	: string *		$item->text	: string * * This gives template designers ultimate control over how pagination is rendered. * * NOTE: If you override pagination_item_active OR pagination_item_inactive you MUST override them both */function pagination_list_footer($list){	$lang = JFactory::getLanguage();	/**	 * Fix javascript jump menu	 *	 * Remove the onchange=Joomla.submitform from the select tag	 * Add in a button with onclick instead	 */	$fixlimit = $list['limitfield'];	$fixlimit = preg_replace('/onchange="Joomla.submitform\(\);"/', '', $fixlimit);	$html = "<div class=\"containerpg\"><div class=\"pagination\">\n";	$html .= "\n<div class=\"limit\"><label for=\"limit\">".JText::_('JGLOBAL_DISPLAY_NUM')." </label>";	$html .= "\n".$fixlimit;	$html .= "\n<button id=\"pagination-go\" type=\"button\" onclick=\"Joomla.submitform()\">" . JText::_('JSUBMIT') . "</button></div>";	$html .= "\n" . $list['pageslinks'];	$html .= "\n<div class=\"limit\">".$list['pagescounter']."</div>";	$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"".$list['limitstart']."\" />";	$html .= "\n<div class=\"clr\"></div></div></div>";	return $html;}function pagination_list_render($list){	$html = null;	if ($list['start']['active'])	{		$html .= "<div class=\"button2-right\"><div class=\"start\">".$list['start']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-right off\"><div class=\"start\">".$list['start']['data']."</div></div>";	}	if ($list['previous']['active'])	{		$html .= "<div class=\"button2-right\"><div class=\"prev\">".$list['previous']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-right off\"><div class=\"prev\">".$list['previous']['data']."</div></div>";	}	$html .= "\n<div class=\"button2-left\"><div class=\"page\">";	foreach ($list['pages'] as $page)	{		$html .= $page['data'];	}	$html .= "\n</div></div>";	if ($list['next']['active'])	{		$html .= "<div class=\"button2-left\"><div class=\"next\">".$list['next']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-left off\"><div class=\"next\">".$list['next']['data']."</div></div>";	}	if ($list['end']['active'])	{		$html .= "<div class=\"button2-left\"><div class=\"end\">".$list['end']['data']."</div></div>";	} else {		$html .= "<div class=\"button2-left off\"><div class=\"end\">".$list['end']['data']."</div></div>";	}	return $html;}function pagination_item_active(&$item){	if ($item->base > 0)	{		return "<a href=\"#\" title=\"".$item->text."\" onclick=\"document.adminForm." . $item->prefix . "limitstart.value=".$item->base."; Joomla.submitform();return false;\">".$item->text."</a>";	}	else	{		return "<a href=\"#\" title=\"".$item->text."\" onclick=\"document.adminForm." . $item->prefix . "limitstart.value=0; Joomla.submitform();return false;\">".$item->text."</a>";	}}function pagination_item_inactive(&$item){	if ($item->active)	{		$class = 'class="active"';	}	else	{		$class = '';	}	return '<span ' . $class . '>' . $item->text . '</span>';}
<?php/** * @package     Joomla.Legacy * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla Controller * * Controller (Controllers are where you put all the actual code.) Provides basic * functionality, such as rendering views (aka displaying templates). * * @package     Joomla.Legacy * @subpackage  Controller * @since       12.2 */class JControllerLegacy extends JObject{	/**	 * The base path of the controller	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _basePath.	 */	protected $basePath;	/**	 * The default view for the display method.	 *	 * @var    string	 * @since  12.2	 */	protected $default_view;	/**	 * The mapped task that was performed.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _doTask.	 */	protected $doTask;	/**	 * Redirect message.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _message.	 */	protected $message;	/**	 * Redirect message type.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _messageType.	 */	protected $messageType;	/**	 * Array of class methods	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _methods.	 */	protected $methods;	/**	 * The name of the controller	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _name.	 */	protected $name;	/**	 * The prefix of the models	 *	 * @var    string	 * @since  12.2	 */	protected $model_prefix;	/**	 * The set of search directories for resources (views).	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _path.	 */	protected $paths;	/**	 * URL for redirection.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _redirect.	 */	protected $redirect;	/**	 * Current or most recently performed task.	 *	 * @var    string	 * @since  12.2	 * @note   Replaces _task.	 */	protected $task;	/**	 * Array of class methods to call for a given task.	 *	 * @var    array	 * @since  12.2	 * @note   Replaces _taskMap.	 */	protected $taskMap;	/**	 * Hold a JInput object for easier access to the input variables.	 *	 * @var    JInput	 * @since  12.2	 */	protected $input;	/**	 * Instance container.	 *	 * @var    JControllerLegacy	 * @since  12.2	 */	protected static $instance;	/**	 * Adds to the stack of model paths in LIFO order.	 *	 * @param   mixed   $path    The directory (string), or list of directories (array) to add.	 * @param   string  $prefix  A prefix for models	 *	 * @return  void	 */	public static function addModelPath($path, $prefix = '')	{		JModelLegacy::addIncludePath($path, $prefix);	}	/**	 * Create the filename for a resource.	 *	 * @param   string  $type   The resource type to create the filename for.	 * @param   array   $parts  An associative array of filename information. Optional.	 *	 * @return  string  The filename.	 *	 * @note    Replaced _createFileName.	 * @since   12.2	 */	protected static function createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'controller':				if (!empty($parts['format']))				{					if ($parts['format'] == 'html')					{						$parts['format'] = '';					}					else					{						$parts['format'] = '.' . $parts['format'];					}				}				else				{					$parts['format'] = '';				}				$filename = strtolower($parts['name'] . $parts['format'] . '.php');				break;			case 'view':				if (!empty($parts['type']))				{					$parts['type'] = '.' . $parts['type'];				}				else				{					$parts['type'] = '';				}				$filename = strtolower($parts['name'] . '/view' . $parts['type'] . '.php');				break;		}		return $filename;	}	/**	 * Method to get a singleton controller instance.	 *	 * @param   string  $prefix  The prefix for the controller.	 * @param   array   $config  An array of optional constructor options.	 *	 * @return  JControllerLegacy	 *	 * @since   12.2	 * @throws  Exception if the controller cannot be loaded.	 */	public static function getInstance($prefix, $config = array())	{		if (is_object(self::$instance))		{			return self::$instance;		}		$input = JFactory::getApplication()->input;		// Get the environment configuration.		$basePath = array_key_exists('base_path', $config) ? $config['base_path'] : JPATH_COMPONENT;		$format   = $input->getWord('format');		$command  = $input->get('task', 'display');		// Check for array format.		$filter = JFilterInput::getInstance();		if (is_array($command))		{			$command = $filter->clean(array_pop(array_keys($command)), 'cmd');		}		else		{			$command = $filter->clean($command, 'cmd');		}		// Check for a controller.task command.		if (strpos($command, '.') !== false)		{			// Explode the controller.task command.			list ($type, $task) = explode('.', $command);			// Define the controller filename and path.			$file = self::createFileName('controller', array('name' => $type, 'format' => $format));			$path = $basePath . '/controllers/' . $file;			// Reset the task without the controller context.			$input->set('task', $task);		}		else		{			// Base controller.			$type = null;			$task = $command;			// Define the controller filename and path.			$file       = self::createFileName('controller', array('name' => 'controller', 'format' => $format));			$path       = $basePath . '/' . $file;			$backupfile = self::createFileName('controller', array('name' => 'controller'));			$backuppath = $basePath . '/' . $backupfile;		}		// Get the controller class name.		$class = ucfirst($prefix) . 'Controller' . ucfirst($type);		// Include the class if not present.		if (!class_exists($class))		{			// If the controller file path exists, include it.			if (file_exists($path))			{				require_once $path;			}			elseif (isset($backuppath) && file_exists($backuppath))			{				require_once $backuppath;			}			else			{				throw new InvalidArgumentException(JText::sprintf('JLIB_APPLICATION_ERROR_INVALID_CONTROLLER', $type, $format));			}		}		// Instantiate the class.		if (class_exists($class))		{			self::$instance = new $class($config);		}		else		{			throw new InvalidArgumentException(JText::sprintf('JLIB_APPLICATION_ERROR_INVALID_CONTROLLER_CLASS', $class));		}		return self::$instance;	}	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 * Recognized key values include 'name', 'default_task', 'model_path', and	 * 'view_path' (this list is not meant to be comprehensive).	 *	 * @since   12.2	 */	public function __construct($config = array())	{		$this->methods = array();		$this->message = null;		$this->messageType = 'message';		$this->paths = array();		$this->redirect = null;		$this->taskMap = array();		if (defined('JDEBUG') && JDEBUG)		{			JLog::addLogger(array('text_file' => 'jcontroller.log.php'), JLog::ALL, array('controller'));		}		$this->input = JFactory::getApplication()->input;		// Determine the methods to exclude from the base class.		$xMethods = get_class_methods('JControllerLegacy');		// Get the public methods in this class using reflection.		$r = new ReflectionClass($this);		$rMethods = $r->getMethods(ReflectionMethod::IS_PUBLIC);		foreach ($rMethods as $rMethod)		{			$mName = $rMethod->getName();			// Add default display method if not explicitly declared.			if (!in_array($mName, $xMethods) || $mName == 'display')			{				$this->methods[] = strtolower($mName);				// Auto register the methods as tasks.				$this->taskMap[strtolower($mName)] = $mName;			}		}		// Set the view name		if (empty($this->name))		{			if (array_key_exists('name', $config))			{				$this->name = $config['name'];			}			else			{				$this->name = $this->getName();			}		}		// Set a base path for use by the controller		if (array_key_exists('base_path', $config))		{			$this->basePath = $config['base_path'];		}		else		{			$this->basePath = JPATH_COMPONENT;		}		// If the default task is set, register it as such		if (array_key_exists('default_task', $config))		{			$this->registerDefaultTask($config['default_task']);		}		else		{			$this->registerDefaultTask('display');		}		// Set the models prefix		if (empty($this->model_prefix))		{			if (array_key_exists('model_prefix', $config))			{				// User-defined prefix				$this->model_prefix = $config['model_prefix'];			}			else			{				$this->model_prefix = $this->name . 'Model';			}		}		// Set the default model search path		if (array_key_exists('model_path', $config))		{			// User-defined dirs			$this->addModelPath($config['model_path'], $this->model_prefix);		}		else		{			$this->addModelPath($this->basePath . '/models', $this->model_prefix);		}		// Set the default view search path		if (array_key_exists('view_path', $config))		{			// User-defined dirs			$this->setPath('view', $config['view_path']);		}		else		{			$this->setPath('view', $this->basePath . '/views');		}		// Set the default view.		if (array_key_exists('default_view', $config))		{			$this->default_view = $config['default_view'];		}		elseif (empty($this->default_view))		{			$this->default_view = $this->getName();		}	}	/**	 * Adds to the search path for templates and resources.	 *	 * @param   string  $type  The path type (e.g. 'model', 'view').	 * @param   mixed   $path  The directory string  or stream array to search.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 * @note    Replaces _addPath.	 */	protected function addPath($type, $path)	{		// Just force path to array		settype($path, 'array');		if (!isset($this->paths[$type]))		{			$this->paths[$type] = array();		}		// Loop through the path directories		foreach ($path as $dir)		{			// No surrounding spaces allowed!			$dir = rtrim(JPath::check($dir, '/'), '/') . '/';			// Add to the top of the search dirs			array_unshift($this->paths[$type], $dir);		}		return $this;	}	/**	 * Add one or more view paths to the controller's stack, in LIFO order.	 *	 * @param   mixed  $path  The directory (string) or list of directories (array) to add.	 *	 * @return  JControllerLegacy  This object to support chaining.	 */	public function addViewPath($path)	{		$this->addPath('view', $path);		return $this;	}	/**	 * Authorisation check	 *	 * @param   string  $task  The ACO Section Value to check access on.	 *	 * @return  boolean  True if authorised	 *	 * @since   12.2	 * @deprecated  13.3  Use JAccess instead.	 */	public function authorise($task)	{		JLog::add(__METHOD__ . ' is deprecated. Use JAccess instead.', JLog::WARNING, 'deprecated');		return true;	}	/**	 * Method to check whether an ID is in the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  boolean  True if the ID is in the edit list.	 *	 * @since   12.2	 */	protected function checkEditId($context, $id)	{		if ($id)		{			$app = JFactory::getApplication();			$values = (array) $app->getUserState($context . '.id');			$result = in_array((int) $id, $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Checking edit ID %s.%s: %d %s',						$context,						$id,						(int) $result,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}			return $result;		}		else		{			// No id for a new item.			return true;		}	}	/**	 * Method to load and return a model object.	 *	 * @param   string  $name    The name of the model.	 * @param   string  $prefix  Optional model prefix.	 * @param   array   $config  Configuration array for the model. Optional.	 *	 * @return  mixed   Model object on success; otherwise null failure.	 *	 * @since   12.2	 * @note    Replaces _createModel.	 */	protected function createModel($name, $prefix = '', $config = array())	{		// Clean the model name		$modelName = preg_replace('/[^A-Z0-9_]/i', '', $name);		$classPrefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		$result = JModelLegacy::getInstance($modelName, $classPrefix, $config);		return $result;	}	/**	 * Method to load and return a view object. This method first looks in the	 * current template directory for a match and, failing that, uses a default	 * set path to load the view class file.	 *	 * Note the "name, prefix, type" order of parameters, which differs from the	 * "name, type, prefix" order used in related public methods.	 *	 * @param   string  $name    The name of the view.	 * @param   string  $prefix  Optional prefix for the view class name.	 * @param   string  $type    The type of view.	 * @param   array   $config  Configuration array for the view. Optional.	 *	 * @return  mixed  View object on success; null or error result on failure.	 *	 * @since   12.2	 * @note    Replaces _createView.	 * @throws  Exception	 */	protected function createView($name, $prefix = '', $type = '', $config = array())	{		// Clean the view name		$viewName = preg_replace('/[^A-Z0-9_]/i', '', $name);		$classPrefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		$viewType = preg_replace('/[^A-Z0-9_]/i', '', $type);		// Build the view class name		$viewClass = $classPrefix . $viewName;		if (!class_exists($viewClass))		{			jimport('joomla.filesystem.path');			$path = JPath::find($this->paths['view'], $this->createFileName('view', array('name' => $viewName, 'type' => $viewType)));			if ($path)			{				require_once $path;				if (!class_exists($viewClass))				{					throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_VIEW_CLASS_NOT_FOUND', $viewClass, $path), 500);				}			}			else			{				return null;			}		}		return new $viewClass($config);	}	/**	 * Typical view method for MVC based architecture	 *	 * This function is provide as a default implementation, in most cases	 * you will need to override it in your own controllers.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function display($cachable = false, $urlparams = array())	{		$document = JFactory::getDocument();		$viewType = $document->getType();		$viewName = $this->input->get('view', $this->default_view);		$viewLayout = $this->input->get('layout', 'default');		$view = $this->getView($viewName, $viewType, '', array('base_path' => $this->basePath, 'layout' => $viewLayout));		// Get/Create the model		if ($model = $this->getModel($viewName))		{			// Push the model into the view (as default)			$view->setModel($model, true);		}		$view->document = $document;		$conf = JFactory::getConfig();		// Display the view		if ($cachable && $viewType != 'feed' && $conf->get('caching') >= 1)		{			$option = $this->input->get('option');			$cache = JFactory::getCache($option, 'view');			if (is_array($urlparams))			{				$app = JFactory::getApplication();				if (!empty($app->registeredurlparams))				{					$registeredurlparams = $app->registeredurlparams;				}				else				{					$registeredurlparams = new stdClass;				}				foreach ($urlparams as $key => $value)				{					// Add your safe url parameters with variable type as value {@see JFilterInput::clean()}.					$registeredurlparams->$key = $value;				}				$app->registeredurlparams = $registeredurlparams;			}			$cache->get($view, 'display');		}		else		{			$view->display();		}		return $this;	}	/**	 * Execute a task by triggering a method in the derived class.	 *	 * @param   string  $task  The task to perform. If no matching task is found, the '__default' task is executed, if defined.	 *	 * @return  mixed   The value returned by the called method, false in error case.	 *	 * @since   12.2	 * @throws  Exception	 */	public function execute($task)	{		$this->task = $task;		$task = strtolower($task);		if (isset($this->taskMap[$task]))		{			$doTask = $this->taskMap[$task];		}		elseif (isset($this->taskMap['__default']))		{			$doTask = $this->taskMap['__default'];		}		else		{			throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_TASK_NOT_FOUND', $task), 404);		}		// Record the actual task being fired		$this->doTask = $doTask;		return $this->$doTask();	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   12.2	 */	public function getModel($name = '', $prefix = '', $config = array())	{		if (empty($name))		{			$name = $this->getName();		}		if (empty($prefix))		{			$prefix = $this->model_prefix;		}		if ($model = $this->createModel($name, $prefix, $config))		{			// Task is a reserved state			$model->setState('task', $this->task);			// Let's get the application object and set menu information if it's available			$app = JFactory::getApplication();			$menu = $app->getMenu();			if (is_object($menu))			{				if ($item = $menu->getActive())				{					$params = $menu->getParams($item->id);					// Set default state data					$model->setState('parameters.menu', $params);				}			}		}		return $model;	}	/**	 * Method to get the controller name	 *	 * The dispatcher name is set by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the dispatcher	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->name))		{			$r = null;			if (!preg_match('/(.*)Controller/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_CONTROLLER_GET_NAME'), 500);			}			$this->name = strtolower($r[1]);		}		return $this->name;	}	/**	 * Get the last task that is being performed or was most recently performed.	 *	 * @return  string  The task that is being performed or was most recently performed.	 *	 * @since   12.2	 */	public function getTask()	{		return $this->task;	}	/**	 * Gets the available tasks in the controller.	 *	 * @return  array  Array[i] of task names.	 *	 * @since   12.2	 */	public function getTasks()	{		return $this->methods;	}	/**	 * Method to get a reference to the current view and load it if necessary.	 *	 * @param   string  $name    The view name. Optional, defaults to the controller name.	 * @param   string  $type    The view type. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for view. Optional.	 *	 * @return  JViewLegacy  Reference to the view or an error.	 *	 * @since   12.2	 * @throws  Exception	 */	public function getView($name = '', $type = '', $prefix = '', $config = array())	{		static $views;		if (!isset($views))		{			$views = array();		}		if (empty($name))		{			$name = $this->getName();		}		if (empty($prefix))		{			$prefix = $this->getName() . 'View';		}		if (empty($views[$name]))		{			if ($view = $this->createView($name, $prefix, $type, $config))			{				$views[$name] = & $view;			}			else			{				throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_VIEW_NOT_FOUND', $name, $type, $prefix), 500);			}		}		return $views[$name];	}	/**	 * Method to add a record ID to the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function holdEditId($context, $id)	{		$app = JFactory::getApplication();		$values = (array) $app->getUserState($context . '.id');		// Add the id to the list if non-zero.		if (!empty($id))		{			array_push($values, (int) $id);			$values = array_unique($values);			$app->setUserState($context . '.id', $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Holding edit ID %s.%s %s',						$context,						$id,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}		}	}	/**	 * Redirects the browser or returns false if no redirect is set.	 *	 * @return  boolean  False if no redirect exists.	 *	 * @since   12.2	 */	public function redirect()	{		if ($this->redirect)		{			$app = JFactory::getApplication();			$app->redirect($this->redirect, $this->message, $this->messageType);		}		return false;	}	/**	 * Register the default task to perform if a mapping is not found.	 *	 * @param   string  $method  The name of the method in the derived class to perform if a named task is not found.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function registerDefaultTask($method)	{		$this->registerTask('__default', $method);		return $this;	}	/**	 * Register (map) a task to a method in the class.	 *	 * @param   string  $task    The task.	 * @param   string  $method  The name of the method in the derived class to perform for this task.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function registerTask($task, $method)	{		if (in_array(strtolower($method), $this->methods))		{			$this->taskMap[strtolower($task)] = $method;		}		return $this;	}	/**	 * Unregister (unmap) a task in the class.	 *	 * @param   string  $task  The task.	 *	 * @return  JControllerLegacy  This object to support chaining.	 *	 * @since   12.2	 */	public function unregisterTask($task)	{		unset($this->taskMap[strtolower($task)]);		return $this;	}	/**	 * Method to check whether an ID is in the edit list.	 *	 * @param   string   $context  The context for the session storage.	 * @param   integer  $id       The ID of the record to add to the edit list.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function releaseEditId($context, $id)	{		$app = JFactory::getApplication();		$values = (array) $app->getUserState($context . '.id');		// Do a strict search of the edit list values.		$index = array_search((int) $id, $values, true);		if (is_int($index))		{			unset($values[$index]);			$app->setUserState($context . '.id', $values);			if (defined('JDEBUG') && JDEBUG)			{				JLog::add(					sprintf(						'Releasing edit ID %s.%s %s',						$context,						$id,						str_replace("\n", ' ', print_r($values, 1))					),					JLog::INFO,					'controller'				);			}		}	}	/**	 * Sets the internal message that is passed with a redirect	 *	 * @param   string  $text  Message to display on redirect.	 * @param   string  $type  Message type. Optional, defaults to 'message'.	 *	 * @return  string  Previous message	 *	 * @since   12.2	 */	public function setMessage($text, $type = 'message')	{		$previous = $this->message;		$this->message = $text;		$this->messageType = $type;		return $previous;	}	/**	 * Sets an entire array of search paths for resources.	 *	 * @param   string  $type  The type of path to set, typically 'view' or 'model'.	 * @param   string  $path  The new set of search paths. If null or false, resets to the current directory only.	 *	 * @return  void	 *	 * @note    Replaces _setPath.	 * @since   12.2	 */	protected function setPath($type, $path)	{		// Clear out the prior search dirs		$this->paths[$type] = array();		// Actually add the user-specified directories		$this->addPath($type, $path);	}	/**	 * Set a URL for browser redirection.	 *	 * @param   string  $url   URL to redirect to.	 * @param   string  $msg   Message to display on redirect. Optional, defaults to value set internally by controller, if any.	 * @param   string  $type  Message type. Optional, defaults to 'message' or the type set by a previous call to setMessage.	 *	 * @return  JControllerLegacy  This object to support chaining.	 *	 * @since   12.2	 */	public function setRedirect($url, $msg = null, $type = null)	{		$this->redirect = $url;		if ($msg !== null)		{			// Controller may have set this directly			$this->message = $msg;		}		// Ensure the type is not overwritten by a previous call to setMessage.		if (empty($type))		{			if (empty($this->messageType))			{				$this->messageType = 'message';			}		}		// If the type is explicitly set, set it.		else		{			$this->messageType = $type;		}		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_title($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"module-title\"><h6>".$module->title."</h6></div>";		echo $module->content;	}}function modChrome_no($module, &$params, &$attribs){	if ($module->content)	{		echo $module->content;	}}function modChrome_well($module, &$params, &$attribs){	if ($module->content)	{		echo "<div class=\"well well-small\">";		echo "<div class=\"module-title nav-header\">".$module->title."</div>";		echo $module->content;		echo "</div>";	}}
<?php/** * @package     Joomla.Platform * @subpackage  User * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Authentication class, provides an interface for the Joomla authentication system * * @package     Joomla.Platform * @subpackage  User * @since       11.1 */class JAuthentication extends JObject{	// Shared success status	/**	 * This is the status code returned when the authentication is success (permit login)	 * @const  STATUS_SUCCESS successful response	 * @since  11.2	 */	const STATUS_SUCCESS = 1;	// These are for authentication purposes (username and password is valid)	/**	 * Status to indicate cancellation of authentication (unused)	 * @const  STATUS_CANCEL cancelled request (unused)	 * @since  11.2	 */	const STATUS_CANCEL = 2;	/**	 * This is the status code returned when the authentication failed (prevent login if no success)	 * @const  STATUS_FAILURE failed request	 * @since  11.2	 */	const STATUS_FAILURE = 4;	// These are for authorisation purposes (can the user login)	/**	 * This is the status code returned when the account has expired (prevent login)	 * @const  STATUS_EXPIRED an expired account (will prevent login)	 * @since  11.2	 */	const STATUS_EXPIRED = 8;	/**	 * This is the status code returned when the account has been denied (prevent login)	 * @const  STATUS_DENIED denied request (will prevent login)	 * @since  11.2	 */	const STATUS_DENIED = 16;	/**	 * This is the status code returned when the account doesn't exist (not an error)	 * @const  STATUS_UNKNOWN unknown account (won't permit or prevent login)	 * @since  11.2	 */	const STATUS_UNKNOWN = 32;	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  12.1	 */	protected $observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  12.1	 */	protected $state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  12.1	 */	protected $methods = array();	/**	 * @var    JAuthentication  JAuthentication instances container.	 * @since  11.3	 */	protected static $instance;	/**	 * Constructor	 *	 * @since   11.1	 */	public function __construct()	{		$isLoaded = JPluginHelper::importPlugin('authentication');		if (!$isLoaded)		{			JLog::add(JText::_('JLIB_USER_ERROR_AUTHENTICATION_LIBRARIES'), JLog::WARNING, 'jerror');		}	}	/**	 * Returns the global authentication object, only creating it	 * if it doesn't already exist.	 *	 * @return  JAuthentication  The global JAuthentication object	 *	 * @since   11.1	 */	public static function getInstance()	{		if (empty(self::$instance))		{			self::$instance = new JAuthentication;		}		return self::$instance;	}	/**	 * Get the state of the JAuthentication object	 *	 * @return  mixed    The state of the object.	 *	 * @since   11.1	 */	public function getState()	{		return $this->state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   11.1	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->observers[] = $observer;			end($this->observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JAuthentication))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->methods[$method]))			{				$this->methods[$method] = array();			}			$this->methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   11.1	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->observers);		if ($key !== false)		{			unset($this->observers[$key]);			$retval = true;			foreach ($this->methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}	/**	 * Finds out if a set of login credentials are valid by asking all observing	 * objects to run their respective authentication routines.	 *	 * @param   array  $credentials  Array holding the user credentials.	 * @param   array  $options      Array holding user options.	 *	 * @return  JAuthenticationResponse  Response object with status variable filled in for last plugin or first successful plugin.	 *	 * @see     JAuthenticationResponse	 * @since   11.1	 */	public function authenticate($credentials, $options = array())	{		// Get plugins		$plugins = JPluginHelper::getPlugin('authentication');		// Create authentication response		$response = new JAuthenticationResponse;		/*		 * Loop through the plugins and check of the credentials can be used to authenticate		 * the user		 *		 * Any errors raised in the plugin should be returned via the JAuthenticationResponse		 * and handled appropriately.		 */		foreach ($plugins as $plugin)		{			$className = 'plg' . $plugin->type . $plugin->name;			if (class_exists($className))			{				$plugin = new $className($this, (array) $plugin);			}			else			{				// Bail here if the plugin can't be created				JLog::add(JText::sprintf('JLIB_USER_ERROR_AUTHENTICATION_FAILED_LOAD_PLUGIN', $className), JLog::WARNING, 'jerror');				continue;			}			// Try to authenticate			$plugin->onUserAuthenticate($credentials, $options, $response);			// If authentication is successful break out of the loop			if ($response->status === self::STATUS_SUCCESS)			{				if (empty($response->type))				{					$response->type = isset($plugin->_name) ? $plugin->_name : $plugin->name;				}				break;			}		}		if (empty($response->username))		{			$response->username = $credentials['username'];		}		if (empty($response->fullname))		{			$response->fullname = $credentials['username'];		}		if (empty($response->password))		{			$response->password = $credentials['password'];		}		return $response;	}	/**	 * Authorises that a particular user should be able to login	 *	 * @param   JAuthenticationResponse  $response  response including username of the user to authorise	 * @param   array                    $options   list of options	 *	 * @return  array[JAuthenticationResponse]  results of authorisation	 *	 * @since  11.2	 */	public static function authorise($response, $options = array())	{		// Get plugins in case they haven't been imported already		JPluginHelper::importPlugin('user');		JPluginHelper::importPlugin('authentication');		$dispatcher = JEventDispatcher::getInstance();		$results = $dispatcher->trigger('onUserAuthorisation', array($response, $options));		return $results;	}}/** * Authentication response class, provides an object for storing user and error details * * @package     Joomla.Platform * @subpackage  User * @since       11.1 */class JAuthenticationResponse{	/**	 * Response status (see status codes)	 *	 * @var    string	 * @since  11.1	 */	public $status = JAuthentication::STATUS_FAILURE;	/**	 * The type of authentication that was successful	 *	 * @var    string	 * @since  11.1	 */	public $type = '';	/**	 *  The error message	 *	 * @var    string	 * @since  11.1	 */	public $error_message = '';	/**	 * Any UTF-8 string that the End User wants to use as a username.	 *	 * @var    string	 * @since  11.1	 */	public $username = '';	/**	 * Any UTF-8 string that the End User wants to use as a password.	 *	 * @var    string	 * @since  11.1	 */	public $password = '';	/**	 * The email address of the End User as specified in section 3.4.1 of [RFC2822]	 *	 * @var    string	 * @since  11.1	 */	public $email = '';	/**	 * UTF-8 string free text representation of the End User's full name.	 *	 * @var    string	 * @since  11.1	 *	 */	public $fullname = '';	/**	 * The End User's date of birth as YYYY-MM-DD. Any values whose representation uses	 * fewer than the specified number of digits should be zero-padded. The length of this	 * value MUST always be 10. If the End User user does not want to reveal any particular	 * component of this value, it MUST be set to zero.	 *	 * For instance, if a End User wants to specify that his date of birth is in 1980, but	 * not the month or day, the value returned SHALL be "1980-00-00".	 *	 * @var    string	 * @since  11.1	 */	public $birthdate = '';	/**	 * The End User's gender, "M" for male, "F" for female.	 *	 * @var    string	 * @since  11.1	 */	public $gender = '';	/**	 * UTF-8 string free text that SHOULD conform to the End User's country's postal system.	 *	 * @var    string	 * @since  11.1	 */	public $postcode = '';	/**	 * The End User's country of residence as specified by ISO3166.	 *	 * @var    string	 * @since  11.1	 */	public $country = '';	/**	 * End User's preferred language as specified by ISO639.	 *	 * @var    string	 * @since  11.1	 */	public $language = '';	/**	 * ASCII string from TimeZone database	 *	 * @var    string	 * @since  11.1	 */	public $timezone = '';}
<?php/** * @package     Joomla.Platform * @subpackage  OAuth * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();jimport('joomla.environment.response');/** * Joomla Platform class for interacting with an OAuth 1.0 and 1.0a server. * * @package     Joomla.Platform * @subpackage  OAuth * * @since       13.1 */abstract class JOAuth1Client{	/**	 * @var    JRegistry  Options for the JOAuth1Client object.	 * @since  13.1	 */	protected $options;	/**	 * @var array  Contains access token key, secret and verifier.	 * @since 13.1	 */	protected $token = array();	/**	 * @var    JHttp  The HTTP client object to use in sending HTTP requests.	 * @since  13.1	 */	protected $client;	/**	 * @var    JInput The input object to use in retrieving GET/POST data.	 * @since  13.1	 */	protected $input;	/**	 * @var   JApplicationWeb  The application object to send HTTP headers for redirects.	 * @since 13.1	 */	protected $application;	/**	 * @var   string  Selects which version of OAuth to use: 1.0 or 1.0a.	 * @since 13.1	 */	protected $version;	/**	 * Constructor.	 *	 * @param   JRegistry        $options      OAuth1Client options object.	 * @param   JHttp            $client       The HTTP client object.	 * @param   JInput           $input        The input object	 * @param   JApplicationWeb  $application  The application object	 * @param   string           $version      Specify the OAuth version. By default we are using 1.0a.	 *	 * @since 13.1	 */	public function __construct(JRegistry $options = null, JHttp $client = null, JInput $input = null, JApplicationWeb $application = null,		$version = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : JHttpFactory::getHttp($this->options);		$this->input = isset($input) ? $input : JFactory::getApplication()->input;		$this->application = isset($application) ? $application : new JApplicationWeb;		$this->version = isset($version) ? $version : '1.0a';	}	/**	 * Method to for the oauth flow.	 *	 * @return void	 *	 * @since  13.1	 *	 * @throws DomainException	 */	public function authenticate()	{		// Already got some credentials stored?		if ($this->token)		{			$response = $this->verifyCredentials();			if ($response)			{				return $this->token;			}			else			{				$this->token = null;			}		}		// Check for callback.		if (strcmp($this->version, '1.0a') === 0)		{			$verifier = $this->input->get('oauth_verifier');		}		else		{			$verifier = $this->input->get('oauth_token');		}		if (empty($verifier))		{			// Generate a request token.			$this->_generateRequestToken();			// Authenticate the user and authorise the app.			$this->_authorise();		}		// Callback		else		{			$session = JFactory::getSession();			// Get token form session.			$this->token = array('key' => $session->get('key', null, 'oauth_token'), 'secret' => $session->get('secret', null, 'oauth_token'));			// Verify the returned request token.			if (strcmp($this->token['key'], $this->input->get('oauth_token')) !== 0)			{				throw new DomainException('Bad session!');			}			// Set token verifier for 1.0a.			if (strcmp($this->version, '1.0a') === 0)			{				$this->token['verifier'] = $this->input->get('oauth_verifier');			}			// Generate access token.			$this->_generateAccessToken();			// Return the access token.			return $this->token;		}	}	/**	 * Method used to get a request token.	 *	 * @return void	 *	 * @since  13.1	 * @throws  DomainException	 */	private function _generateRequestToken()	{		// Set the callback URL.		if ($this->getOption('callback'))		{			$parameters = array(				'oauth_callback' => $this->getOption('callback')			);		}		else		{			$parameters = array();		}		// Make an OAuth request for the Request Token.		$response = $this->oauthRequest($this->getOption('requestTokenURL'), 'POST', $parameters);		parse_str($response->body, $params);		if (strcmp($this->version, '1.0a') === 0 && strcmp($params['oauth_callback_confirmed'], 'true') !== 0)		{			throw new DomainException('Bad request token!');		}		// Save the request token.		$this->token = array('key' => $params['oauth_token'], 'secret' => $params['oauth_token_secret']);		// Save the request token in session		$session = JFactory::getSession();		$session->set('key', $this->token['key'], 'oauth_token');		$session->set('secret', $this->token['secret'], 'oauth_token');	}	/**	 * Method used to authorise the application.	 *	 * @return void	 *	 * @since  13.1	 */	private function _authorise()	{		$url = $this->getOption('authoriseURL') . '?oauth_token=' . $this->token['key'];		if ($this->getOption('scope'))		{			$scope = is_array($this->getOption('scope')) ? implode(' ', $this->getOption('scope')) : $this->getOption('scope');			$url .= '&scope=' . urlencode($scope);		}		if ($this->getOption('sendheaders'))		{			$this->application->redirect($url);		}	}	/**	 * Method used to get an access token.	 *	 * @return void	 *	 * @since  13.1	 */	private function _generateAccessToken()	{		// Set the parameters.		$parameters = array(			'oauth_token' => $this->token['key']		);		if (strcmp($this->version, '1.0a') === 0)		{			$parameters = array_merge($parameters, array('oauth_verifier' => $this->token['verifier']));		}		// Make an OAuth request for the Access Token.		$response = $this->oauthRequest($this->getOption('accessTokenURL'), 'POST', $parameters);		parse_str($response->body, $params);		// Save the access token.		$this->token = array('key' => $params['oauth_token'], 'secret' => $params['oauth_token_secret']);	}	/**	 * Method used to make an OAuth request.	 *	 * @param   string  $url         The request URL.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 * @param   mixed   $data        The POST request data.	 * @param   array   $headers     An array of name-value pairs to include in the header of the request	 *	 * @return  object  The JHttpResponse object.	 *	 * @since 13.1	 * @throws  DomainException	 */	public function oauthRequest($url, $method, $parameters, $data = array(), $headers = array())	{		// Set the parameters.		$defaults = array(			'oauth_consumer_key' => $this->getOption('consumer_key'),			'oauth_signature_method' => 'HMAC-SHA1',			'oauth_version' => '1.0',			'oauth_nonce' => $this->generateNonce(),			'oauth_timestamp' => time()		);		$parameters = array_merge($parameters, $defaults);		// Do not encode multipart parameters. Do not include $data in the signature if $data is not array.		if (isset($headers['Content-Type']) && strpos($headers['Content-Type'], 'multipart/form-data') !== false || !is_array($data))		{			$oauth_headers = $parameters;		}		else		{			// Use all parameters for the signature.			$oauth_headers = array_merge($parameters, $data);		}		// Sign the request.		$oauth_headers = $this->_signRequest($url, $method, $oauth_headers);		// Get parameters for the Authorisation header.		if (is_array($data))		{			$oauth_headers = array_diff_key($oauth_headers, $data);		}		// Send the request.		switch ($method)		{			case 'GET':				$url = $this->toUrl($url, $data);				$response = $this->client->get($url, array('Authorization' => $this->_createHeader($oauth_headers)));				break;			case 'POST':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->post($url, $data, $headers);				break;			case 'PUT':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->put($url, $data, $headers);				break;			case 'DELETE':				$headers = array_merge($headers, array('Authorization' => $this->_createHeader($oauth_headers)));				$response = $this->client->delete($url, $headers);				break;		}		// Validate the response code.		$this->validateResponse($url, $response);		return $response;	}	/**	 * Method to validate a response.	 *	 * @param   string         $url       The request URL.	 * @param   JHttpResponse  $response  The response to validate.	 *	 * @return  void	 *	 * @since  13.1	 * @throws DomainException	 */	abstract public function validateResponse($url, $response);	/**	 * Method used to create the header for the POST request.	 *	 * @param   array  $parameters  Array containing request parameters.	 *	 * @return  string  The header.	 *	 * @since 13.1	 */	private function _createHeader($parameters)	{		$header = 'OAuth ';		foreach ($parameters as $key => $value)		{			if (!strcmp($header, 'OAuth '))			{				$header .= $key . '="' . $this->safeEncode($value) . '"';			}			else			{				$header .= ', ' . $key . '="' . $value . '"';			}		}		return $header;	}	/**	 * Method to create the URL formed string with the parameters.	 *	 * @param   string  $url         The request URL.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return  string  The formed URL.	 *	 * @since  13.1	 */	public function toUrl($url, $parameters)	{		foreach ($parameters as $key => $value)		{			if (is_array($value))			{				foreach ($value as $k => $v)				{					if (strpos($url, '?') === false)					{						$url .= '?' . $key . '=' . $v;					}					else					{						$url .= '&' . $key . '=' . $v;					}				}			}			else			{				if (strpos($value, ' ') !== false)				{					$value = $this->safeEncode($value);				}				if (strpos($url, '?') === false)				{					$url .= '?' . $key . '=' . $value;				}				else				{					$url .= '&' . $key . '=' . $value;				}			}		}		return $url;	}	/**	 * Method used to sign requests.	 *	 * @param   string  $url         The URL to sign.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return  void	 *	 * @since   13.1	 */	private function _signRequest($url, $method, $parameters)	{		// Create the signature base string.		$base = $this->_baseString($url, $method, $parameters);		$parameters['oauth_signature'] = $this->safeEncode(			base64_encode(				hash_hmac('sha1', $base, $this->_prepareSigningKey(), true)				)			);		return $parameters;	}	/**	 * Prepare the signature base string.	 *	 * @param   string  $url         The URL to sign.	 * @param   string  $method      The request method.	 * @param   array   $parameters  Array containing request parameters.	 *	 * @return string  The base string.	 *	 * @since 13.1	 */	private function _baseString($url, $method, $parameters)	{		// Sort the parameters alphabetically		uksort($parameters, 'strcmp');		// Encode parameters.		foreach ($parameters as $key => $value)		{			$key = $this->safeEncode($key);			if (is_array($value))			{				foreach ($value as $k => $v)				{					$v = $this->safeEncode($v);					$kv[] = "{$key}={$v}";				}			}			else			{				$value = $this->safeEncode($value);				$kv[] = "{$key}={$value}";			}		}		// Form the parameter string.		$params = implode('&', $kv);		// Signature base string elements.		$base = array(			$method,			$url,			$params			);		// Return the base string.		return implode('&', $this->safeEncode($base));	}	/**	 * Encodes the string or array passed in a way compatible with OAuth.	 * If an array is passed each array value will will be encoded.	 *	 * @param   mixed  $data  The scalar or array to encode.	 *	 * @return  string  $data encoded in a way compatible with OAuth.	 *	 * @since 13.1	 */	public function safeEncode($data)	{		if (is_array($data))		{			return array_map(array($this, 'safeEncode'), $data);		}		elseif (is_scalar($data))		{			return str_ireplace(				array('+', '%7E'),				array(' ', '~'),				rawurlencode($data)				);		}		else		{			return '';		}	}	/**	 * Method used to generate the current nonce.	 *	 * @return  string  The current nonce.	 *	 * @since 13.1	 */	public static function generateNonce()	{		$mt = microtime();		$rand = mt_rand();		// The md5s look nicer than numbers.		return md5($mt . $rand);	}	/**	 * Prepares the OAuth signing key.	 *	 * @return string  The prepared signing key.	 *	 * @since 13.1	 */	private function _prepareSigningKey()	{		return $this->safeEncode($this->getOption('consumer_secret')) . '&' . $this->safeEncode(($this->token) ? $this->token['secret'] : '');	}	/**	 * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;	 * returns a 401 status code and an error message if not.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	abstract public function verifyCredentials();	/**	 * Get an option from the JOauth1aClient instance.	 *	 * @param   string  $key  The name of the option to get	 *	 * @return  mixed  The option value	 *	 * @since   13.1	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JOauth1aClient instance.	 *	 * @param   string  $key    The name of the option to set	 * @param   mixed   $value  The option value to set	 *	 * @return  JOAuth1Client  This object for method chaining	 *	 * @since   13.1	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}	/**	 * Get the oauth token key or secret.	 *	 * @return  array  The oauth token key and secret.	 *	 * @since   13.1	 */	public function getToken()	{		return $this->token;	}	/**	 * Set the oauth token.	 *	 * @param   array  $token  The access token key and secret.	 *	 * @return  JOAuth1Client  This object for method chaining.	 *	 * @since   13.1	 */	public function setToken($token)	{		$this->token = $token;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelRegistration extends JModelForm{	/**	 * @var    object  The user registration data.	 * @since  1.6	 */	protected $data;	/**	 * Method to activate a user account.	 *	 * @param   string  $token  The activation token.	 *	 * @return  mixed    False on failure, user object on success.	 *	 * @since   1.6	 */	public function activate($token)	{		$config = JFactory::getConfig();		$userParams = JComponentHelper::getParams('com_users');		$db = $this->getDbo();		// Get the user id based on the token.		$query = $db->getQuery(true);		$query->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('activation') . ' = ' . $db->quote($token))			->where($db->quoteName('block') . ' = ' . 1)			->where($db->quoteName('lastvisitDate') . ' = ' . $db->quote($db->getNullDate()));		$db->setQuery($query);		try		{			$userId = (int) $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);			return false;		}		// Check for a valid user id.		if (!$userId)		{			$this->setError(JText::_('COM_USERS_ACTIVATION_TOKEN_NOT_FOUND'));			return false;		}		// Load the users plugin group.		JPluginHelper::importPlugin('user');		// Activate the user.		$user = JFactory::getUser($userId);		// Admin activation is on and user is verifying their email		if (($userParams->get('useractivation') == 2) && !$user->getParam('activate', 0))		{			$uri = JUri::getInstance();			// Compile the admin notification mail values.			$data = $user->getProperties();			$data['activation'] = JApplication::getHash(JUserHelper::genRandomPassword());			$user->set('activation', $data['activation']);			$data['siteurl'] = JUri::base();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$data['fromname'] = $config->get('fromname');			$data['mailfrom'] = $config->get('mailfrom');			$data['sitename'] = $config->get('sitename');			$user->setParam('activate', 1);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATE_WITH_ADMIN_ACTIVATION_SUBJECT',				$data['name'],				$data['sitename']			);			$emailBody = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATE_WITH_ADMIN_ACTIVATION_BODY',				$data['sitename'],				$data['name'],				$data['email'],				$data['username'],				$data['activate']			);			// get all admin users			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail', 'id')))				->from($db->quoteName('#__users')				->where($db->quoteName('sendEmail') . ' = ' . 1));			$db->setQuery($query);			try			{				$rows = $db->loadObjectList();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			// Send mail to all users with users creating permissions and receiving system emails			foreach ($rows as $row)			{				$usercreator = JFactory::getUser($row->id);				if ($usercreator->authorise('core.create', 'com_users'))				{					$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $row->email, $emailSubject, $emailBody);					// Check for an error.					if ($return !== true)					{						$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));						return false;					}				}			}		}		// Admin activation is on and admin is activating the account		elseif (($userParams->get('useractivation') == 2) && $user->getParam('activate', 0))		{			$user->set('activation', '');			$user->set('block', '0');			// Compile the user activated notification mail values.			$data = $user->getProperties();			$user->setParam('activate', 0);			$data['fromname'] = $config->get('fromname');			$data['mailfrom'] = $config->get('mailfrom');			$data['sitename'] = $config->get('sitename');			$data['siteurl'] = JUri::base();			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATED_BY_ADMIN_ACTIVATION_SUBJECT',				$data['name'],				$data['sitename']			);			$emailBody = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATED_BY_ADMIN_ACTIVATION_BODY',				$data['name'],				$data['siteurl'],				$data['username']			);			$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $data['email'], $emailSubject, $emailBody);			// Check for an error.			if ($return !== true)			{				$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));				return false;			}		}		else		{			$user->set('activation', '');			$user->set('block', '0');		}		// Store the user object.		if (!$user->save())		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_ACTIVATION_SAVE_FAILED', $user->getError()));			return false;		}		return $user;	}	/**	 * Method to get the registration form data.	 *	 * The base form data is loaded and then an event is fired	 * for users plugins to extend the data.	 *	 * @return  mixed  Data object on success, false on failure.	 *	 * @since   1.6	 */	public function getData()	{		if ($this->data === null)		{			$this->data = new stdClass;			$app = JFactory::getApplication();			$params = JComponentHelper::getParams('com_users');			// Override the base user data with any data in the session.			$temp = (array) $app->getUserState('com_users.registration.data', array());			foreach ($temp as $k => $v)			{				$this->data->$k = $v;			}			// Get the groups the user should be added to after registration.			$this->data->groups = array();			// Get the default new user group, Registered if not specified.			$system = $params->get('new_usertype', 2);			$this->data->groups[] = $system;			// Unset the passwords.			unset($this->data->password1);			unset($this->data->password2);			// Get the dispatcher and load the users plugins.			$dispatcher = JEventDispatcher::getInstance();			JPluginHelper::importPlugin('user');			// Trigger the data preparation event.			$results = $dispatcher->trigger('onContentPrepareData', array('com_users.registration', $this->data));			// Check for errors encountered while preparing the data.			if (count($results) && in_array(false, $results, true))			{				$this->setError($dispatcher->getError());				$this->data = false;			}		}		return $this->data;	}	/**	 * Method to get the registration form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array    $data      An optional array of data for the form to interogate.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  JForm  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.registration', 'registration', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		$data = $this->getData();		$this->preprocessData('com_users.registration', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		$userParams = JComponentHelper::getParams('com_users');		//Add the choice for site language at registration time		if ($userParams->get('site_language') == 1 && $userParams->get('frontend_userparams') == 1)		{			$form->loadFile('sitelang', false);		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$app = JFactory::getApplication();		$params = $app->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to save the form data.	 *	 * @param   array  $temp  The form data.	 *	 * @return  mixed  The user id on success, false on failure.	 *	 * @since   1.6	 */	public function register($temp)	{		$config = JFactory::getConfig();		$db = $this->getDbo();		$params = JComponentHelper::getParams('com_users');		// Initialise the table with JUser.		$user = new JUser;		$data = (array) $this->getData();		// Merge in the registration data.		foreach ($temp as $k => $v)		{			$data[$k] = $v;		}		// Prepare the data for the user object.		$data['email'] = $data['email1'];		$data['password'] = $data['password1'];		$useractivation = $params->get('useractivation');		$sendpassword = $params->get('sendpassword', 1);		// Check if the user needs to activate their account.		if (($useractivation == 1) || ($useractivation == 2))		{			$data['activation'] = JApplication::getHash(JUserHelper::genRandomPassword());			$data['block'] = 1;		}		// Bind the data.		if (!$user->bind($data))		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_BIND_FAILED', $user->getError()));			return false;		}		// Load the users plugin group.		JPluginHelper::importPlugin('user');		// Store the data.		if (!$user->save())		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $user->getError()));			return false;		}		// Compile the notification mail values.		$data = $user->getProperties();		$data['fromname'] = $config->get('fromname');		$data['mailfrom'] = $config->get('mailfrom');		$data['sitename'] = $config->get('sitename');		$data['siteurl'] = JUri::root();		// Handle account activation/confirmation emails.		if ($useractivation == 2)		{			// Set the link to confirm the user email.			$uri = JUri::getInstance();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ADMIN_ACTIVATION_BODY',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ADMIN_ACTIVATION_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username']				);			}		}		elseif ($useractivation == 1)		{			// Set the link to activate the user account.			$uri = JUri::getInstance();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ACTIVATION_BODY',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ACTIVATION_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username']				);			}		}		else		{			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_BODY',					$data['name'],					$data['sitename'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['siteurl']				);			}		}		// Send the registration email.		$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $data['email'], $emailSubject, $emailBody);		// Send Notification mail to administrators		if (($params->get('useractivation') < 2) && ($params->get('mail_to_admin') == 1))		{			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			$emailBodyAdmin = JText::sprintf(				'COM_USERS_EMAIL_REGISTERED_NOTIFICATION_TO_ADMIN_BODY',				$data['name'],				$data['username'],				$data['siteurl']			);			// Get all admin users			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail')))				->from($db->quoteName('#__users')				->where($db->quoteName('sendEmail') . ' = ' . 1));			$db->setQuery($query);			try			{				$rows = $db->loadObjectList();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			// Send mail to all superadministrators id			foreach ($rows as $row)			{				$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $row->email, $emailSubject, $emailBodyAdmin);				// Check for an error.				if ($return !== true)				{					$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));					return false;				}			}		}		// Check for an error.		if ($return !== true)		{			$this->setError(JText::_('COM_USERS_REGISTRATION_SEND_MAIL_FAILED'));			// Send a system message to administrators receiving system mails			$db = JFactory::getDbo();			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail', 'id')))				->from($db->quoteName('#__users'))				->where($db->quoteName('block') . ' = ' . (int) 0)				->where($db->quoteName('sendEmail') . ' = ' . (int) 1);			$db->setQuery($query);			try			{				$sendEmail = $db->loadColumn();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			if (count($sendEmail) > 0)			{				$jdate = new JDate;				// Build the query to add the messages				foreach ($sendEmail as $userid)				{					$values = array($db->quote($userid), $db->quote($userid), $db->quote($jdate->toSql()), $db->quote(JText::_('COM_USERS_MAIL_SEND_FAILURE_SUBJECT')), $db->quote(JText::sprintf('COM_USERS_MAIL_SEND_FAILURE_BODY', $return, $data['username'])));					$query = $db->getQuery(true);					$query->insert($db->quoteName('#__messages'))						->columns($db->quoteName(array('user_id_from', 'user_id_to', 'date_time', 'subject', 'message')))						->values(implode(',', $values));					$db->setQuery($query);					try					{						$db->execute();					}					catch (RuntimeException $e)					{						$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);						return false;					}				}			}			return false;		}		if ($useractivation == 1)		{			return "useractivate";		}		elseif ($useractivation == 2)		{			return "adminactivate";		}		else		{			return $user->id;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Category Tree * * @package     Joomla.Site * @subpackage  com_content * @since       1.6 */class ContentCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__content';		$options['extension'] = 'com_content';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User groups list controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerGroups extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_GROUPS';	/**	 * Proxy for getModel.	 *	 * @since   1.6	 */	public function getModel($name = 'Group', $prefix = 'UsersModel')	{		return parent::getModel($name, $prefix, array('ignore_request' => true));	}	/**	 * Removes an item.	 *	 * Overrides JControllerAdmin::delete to check the core.admin permission.	 *	 * @since   1.6	 */	public function delete()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::delete();	}	/**	 * Method to publish a list of records.	 *	 * Overrides JControllerAdmin::publish to check the core.admin permission.	 *	 * @since   1.6	 */	public function publish()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::publish();	}	/**	 * Changes the order of one or more records.	 *	 * Overrides JControllerAdmin::reorder to check the core.admin permission.	 *	 * @since   1.6	 */	public function reorder()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::reorder();	}	/**	 * Method to save the submitted ordering values for records.	 *	 * Overrides JControllerAdmin::saveorder to check the core.admin permission.	 *	 * @since   1.6	 */	public function saveorder()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::saveorder();	}	/**	 * Check in of one or more records.	 *	 * Overrides JControllerAdmin::checkin to check the core.admin permission.	 *	 * @since   1.6	 */	public function checkin()	{		if (!JFactory::getUser()->authorise('core.admin', $this->option))		{			JError::raiseError(500, JText::_('JERROR_ALERTNOAUTHOR'));			jexit();		}		return parent::checkin();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class for managing HTTP sessions * * Provides access to session-state values as well as session-level * settings and lifetime management methods. * Based on the standard PHP session handling mechanism it provides * more advanced features such as expire timeouts. * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSession implements IteratorAggregate{	/**	 * Internal state.	 * One of 'inactive'|'active'|'expired'|'destroyed'|'error'	 *	 * @var    string	 * @see    getState()	 * @since  11.1	 */	protected $_state = 'inactive';	/**	 * Maximum age of unused session in minutes	 *	 * @var    string	 * @since  11.1	 */	protected $_expire = 15;	/**	 * The session store object.	 *	 * @var    JSessionStorage	 * @since  11.1	 */	protected $_store = null;	/**	 * Security policy.	 * List of checks that will be done.	 *	 * Default values:	 * - fix_browser	 * - fix_adress	 *	 * @var array	 * @since  11.1	 */	protected $_security = array('fix_browser');	/**	 * Force cookies to be SSL only	 * Default  false	 *	 * @var    boolean	 * @since  11.1	 */	protected $_force_ssl = false;	/**	 * @var    JSession  JSession instances container.	 * @since  11.3	 */	protected static $instance;	/**	 * @var    string	 * @since  12.2	 */	protected $storeName;	/**	 * Holds the JInput object	 *	 * @var    JInput	 * @since  12.2	 */	private $_input = null;	/**	 * Holds the event dispatcher object	 *	 * @var    JEventDispatcher	 * @since  12.2	 */	private $_dispatcher = null;	/**	 * Constructor	 *	 * @param   string  $store    The type of storage for the session.	 * @param   array   $options  Optional parameters	 *	 * @since   11.1	 */	public function __construct($store = 'none', array $options = array())	{		// Need to destroy any existing sessions started with session.auto_start		if (session_id())		{			session_unset();			session_destroy();		}		// Disable transparent sid support		ini_set('session.use_trans_sid', '0');		// Only allow the session ID to come from cookies and nothing else.		ini_set('session.use_only_cookies', '1');		// Create handler		$this->_store = JSessionStorage::getInstance($store, $options);		$this->storeName = $store;		// Set options		$this->_setOptions($options);		$this->_setCookieParams();		$this->_state = 'inactive';	}	/**	 * Magic method to get read-only access to properties.	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  mixed   The value of the property	 *	 * @since   12.2	 */	public function __get($name)	{		if ($name === 'storeName')		{			return $this->$name;		}		if ($name === 'state' || $name === 'expire')		{			$property = '_' . $name;			return $this->$property;		}	}	/**	 * Returns the global Session object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $handler  The type of session handler.	 * @param   array   $options  An array of configuration options.	 *	 * @return  JSession  The Session object.	 *	 * @since   11.1	 */	public static function getInstance($handler, $options)	{		if (!is_object(self::$instance))		{			self::$instance = new JSession($handler, $options);		}		return self::$instance;	}	/**	 * Get current state of session	 *	 * @return  string  The session state	 *	 * @since   11.1	 */	public function getState()	{		return $this->_state;	}	/**	 * Get expiration time in minutes	 *	 * @return  integer  The session expiration time in minutes	 *	 * @since   11.1	 */	public function getExpire()	{		return $this->_expire;	}	/**	 * Get a session token, if a token isn't set yet one will be generated.	 *	 * Tokens are used to secure forms from spamming attacks. Once a token	 * has been generated the system will check the post request to see if	 * it is present, if not it will invalidate the session.	 *	 * @param   boolean  $forceNew  If true, force a new token to be created	 *	 * @return  string  The session token	 *	 * @since   11.1	 */	public function getToken($forceNew = false)	{		$token = $this->get('session.token');		// Create a token		if ($token === null || $forceNew)		{			$token = $this->_createToken(12);			$this->set('session.token', $token);		}		return $token;	}	/**	 * Method to determine if a token exists in the session. If not the	 * session will be set to expired	 *	 * @param   string   $tCheck       Hashed token to be verified	 * @param   boolean  $forceExpire  If true, expires the session	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function hasToken($tCheck, $forceExpire = true)	{		// Check if a token exists in the session		$tStored = $this->get('session.token');		// Check token		if (($tStored !== $tCheck))		{			if ($forceExpire)			{				$this->_state = 'expired';			}			return false;		}		return true;	}	/**	 * Method to determine a hash for anti-spoofing variable names	 *	 * @param   boolean  $forceNew  If true, force a new token to be created	 *	 * @return  string  Hashed var name	 *	 * @since   11.1	 */	public static function getFormToken($forceNew = false)	{		$user    = JFactory::getUser();		$session = JFactory::getSession();		// TODO: Decouple from legacy JApplication class.		if (is_callable(array('JApplication', 'getHash')))		{			$hash = JApplication::getHash($user->get('id', 0) . $session->getToken($forceNew));		}		else		{			$hash = md5(JFactory::getApplication()->get('secret') . $user->get('id', 0) . $session->getToken($forceNew));		}		return $hash;	}	/**	 * Retrieve an external iterator.	 *	 * @return  ArrayIterator  Return an ArrayIterator of $_SESSION.	 *	 * @since   12.2	 */	public function getIterator()	{		return new ArrayIterator($_SESSION);	}	/**	 * Checks for a form token in the request.	 *	 * Use in conjunction with JHtml::_('form.token') or JSession::getFormToken.	 *	 * @param   string  $method  The request method in which to look for the token key.	 *	 * @return  boolean  True if found and valid, false otherwise.	 *	 * @since   12.1	 */	public static function checkToken($method = 'post')	{		$token = self::getFormToken();		$app = JFactory::getApplication();		if (!$app->input->$method->get($token, '', 'alnum'))		{			$session = JFactory::getSession();			if ($session->isNew())			{				// Redirect to login screen.				$app->redirect(JRoute::_('index.php'), JText::_('JLIB_ENVIRONMENT_SESSION_EXPIRED'));				$app->close();			}			else			{				return false;			}		}		else		{			return true;		}	}	/**	 * Get session name	 *	 * @return  string  The session name	 *	 * @since   11.1	 */	public function getName()	{		if ($this->_state === 'destroyed')		{			// @TODO : raise error			return null;		}		return session_name();	}	/**	 * Get session id	 *	 * @return  string  The session name	 *	 * @since   11.1	 */	public function getId()	{		if ($this->_state === 'destroyed')		{			// @TODO : raise error			return null;		}		return session_id();	}	/**	 * Get the session handlers	 *	 * @return  array  An array of available session handlers	 *	 * @since   11.1	 */	public static function getStores()	{		$connectors = array();		// Get an iterator and loop trough the driver classes.		$iterator = new DirectoryIterator(__DIR__ . '/storage');		foreach ($iterator as $file)		{			$fileName = $file->getFilename();			// Only load for php files.			// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6			if (!$file->isFile() || substr($fileName, strrpos($fileName, '.') + 1) != 'php')			{				continue;			}			// Derive the class name from the type.			$class = str_ireplace('.php', '', 'JSessionStorage' . ucfirst(trim($fileName)));			// If the class doesn't exist we have nothing left to do but look at the next type. We did our best.			if (!class_exists($class))			{				continue;			}			// Sweet!  Our class exists, so now we just need to know if it passes its test method.			if ($class::isSupported())			{				// Connector names should not have file extensions.				$connectors[] = str_ireplace('.php', '', $fileName);			}		}		return $connectors;	}	/**	 * Shorthand to check if the session is active	 *	 * @return  boolean	 *	 * @since   12.2	 */	public function isActive()	{		return (bool) ($this->_state == 'active');	}	/**	 * Check whether this session is currently created	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function isNew()	{		$counter = $this->get('session.counter');		return (bool) ($counter === 1);	}	/**	 * Check whether this session is currently created	 *	 * @param   JInput            $input       JInput object for the session to use.	 * @param   JEventDispatcher  $dispatcher  Dispatcher object for the session to use.	 *	 * @return  void.	 *	 * @since   12.2	 */	public function initialise(JInput $input, JEventDispatcher $dispatcher = null)	{		$this->_input      = $input;		$this->_dispatcher = $dispatcher;	}	/**	 * Get data from the session store	 *	 * @param   string  $name       Name of a variable	 * @param   mixed   $default    Default value of a variable if not set	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  mixed  Value of a variable	 *	 * @since   11.1	 */	public function get($name, $default = null, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active' && $this->_state !== 'expired')		{			// @TODO :: generated error here			$error = null;			return $error;		}		if (isset($_SESSION[$namespace][$name]))		{			return $_SESSION[$namespace][$name];		}		return $default;	}	/**	 * Set data into the session store.	 *	 * @param   string  $name       Name of a variable.	 * @param   mixed   $value      Value of a variable.	 * @param   string  $namespace  Namespace to use, default to 'default'.	 *	 * @return  mixed  Old value of a variable.	 *	 * @since   11.1	 */	public function set($name, $value = null, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		$old = isset($_SESSION[$namespace][$name]) ? $_SESSION[$namespace][$name] : null;		if (null === $value)		{			unset($_SESSION[$namespace][$name]);		}		else		{			$_SESSION[$namespace][$name] = $value;		}		return $old;	}	/**	 * Check whether data exists in the session store	 *	 * @param   string  $name       Name of variable	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  boolean  True if the variable exists	 *	 * @since   11.1	 */	public function has($name, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions.		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		return isset($_SESSION[$namespace][$name]);	}	/**	 * Unset data from the session store	 *	 * @param   string  $name       Name of variable	 * @param   string  $namespace  Namespace to use, default to 'default'	 *	 * @return  mixed   The value from session or NULL if not set	 *	 * @since   11.1	 */	public function clear($name, $namespace = 'default')	{		// Add prefix to namespace to avoid collisions		$namespace = '__' . $namespace;		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return null;		}		$value = null;		if (isset($_SESSION[$namespace][$name]))		{			$value = $_SESSION[$namespace][$name];			unset($_SESSION[$namespace][$name]);		}		return $value;	}	/**	 * Start a session.	 *	 * @return  void	 *	 * @since   12.2	 */	public function start()	{		if ($this->_state === 'active')		{			return;		}		$this->_start();		$this->_state = 'active';		// Initialise the session		$this->_setCounter();		$this->_setTimers();		// Perform security checks		$this->_validate();		if ($this->_dispatcher instanceof JEventDispatcher)		{			$this->_dispatcher->trigger('onAfterSessionStart');		}	}	/**	 * Start a session.	 *	 * Creates a session (or resumes the current one based on the state of the session)	 *	 * @return  boolean  true on success	 *	 * @since   11.1	 */	protected function _start()	{		// Start session if not started		if ($this->_state === 'restart')		{			session_regenerate_id(true);		}		else		{			$session_name = session_name();			// Get the JInputCookie object			$cookie = $this->_input->cookie;			if (is_null($cookie->get($session_name)))			{				$session_clean = $this->_input->get($session_name, false, 'string');				if ($session_clean)				{					session_id($session_clean);					$cookie->set($session_name, '', time() - 3600);				}			}		}		/**		 * Write and Close handlers are called after destructing objects since PHP 5.0.5.		 * Thus destructors can use sessions but session handler can't use objects.		 * So we are moving session closure before destructing objects.		 *		 * Replace with session_register_shutdown() when dropping compatibility with PHP 5.3		 */		register_shutdown_function('session_write_close');		session_cache_limiter('none');		session_start();		return true;	}	/**	 * Frees all session variables and destroys all data registered to a session	 *	 * This method resets the $_SESSION variable and destroys all of the data associated	 * with the current session in its storage (file or DB). It forces new session to be	 * started after this method is called. It does not unset the session cookie.	 *	 * @return  boolean  True on success	 *	 * @see     session_destroy()	 * @see     session_unset()	 * @since   11.1	 */	public function destroy()	{		// Session was already destroyed		if ($this->_state === 'destroyed')		{			return true;		}		/*		 * In order to kill the session altogether, such as to log the user out, the session id		 * must also be unset. If a cookie is used to propagate the session id (default behavior),		 * then the session cookie must be deleted.		 */		if (isset($_COOKIE[session_name()]))		{			$config = JFactory::getConfig();			$cookie_domain = $config->get('cookie_domain', '');			$cookie_path = $config->get('cookie_path', '/');			setcookie(session_name(), '', time() - 42000, $cookie_path, $cookie_domain);		}		session_unset();		session_destroy();		$this->_state = 'destroyed';		return true;	}	/**	 * Restart an expired or locked session.	 *	 * @return  boolean  True on success	 *	 * @see     destroy	 * @since   11.1	 */	public function restart()	{		$this->destroy();		if ($this->_state !== 'destroyed')		{			// @TODO :: generated error here			return false;		}		// Re-register the session handler after a session has been destroyed, to avoid PHP bug		$this->_store->register();		$this->_state = 'restart';		// Regenerate session id		session_regenerate_id(true);		$this->_start();		$this->_state = 'active';		$this->_validate();		$this->_setCounter();		return true;	}	/**	 * Create a new session and copy variables from the old one	 *	 * @return  boolean $result true on success	 *	 * @since   11.1	 */	public function fork()	{		if ($this->_state !== 'active')		{			// @TODO :: generated error here			return false;		}		// Save values		$values = $_SESSION;		// Keep session config		$cookie = session_get_cookie_params();		// Kill session		session_destroy();		// Re-register the session store after a session has been destroyed, to avoid PHP bug		$this->_store->register();		// Restore config		session_set_cookie_params($cookie['lifetime'], $cookie['path'], $cookie['domain'], $cookie['secure'], true);		// Restart session with new id		session_regenerate_id(true);		session_start();		return true;	}	/**	 * Writes session data and ends session	 *	 * Session data is usually stored after your script terminated without the need	 * to call JSession::close(), but as session data is locked to prevent concurrent	 * writes only one script may operate on a session at any time. When using	 * framesets together with sessions you will experience the frames loading one	 * by one due to this locking. You can reduce the time needed to load all the	 * frames by ending the session as soon as all changes to session variables are	 * done.	 *	 * @return  void	 *	 * @see     session_write_close()	 * @since   11.1	 */	public function close()	{		session_write_close();	}	/**	 * Set session cookie parameters	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _setCookieParams()	{		$cookie = session_get_cookie_params();		if ($this->_force_ssl)		{			$cookie['secure'] = true;		}		$config = JFactory::getConfig();		if ($config->get('cookie_domain', '') != '')		{			$cookie['domain'] = $config->get('cookie_domain');		}		if ($config->get('cookie_path', '') != '')		{			$cookie['path'] = $config->get('cookie_path');		}		session_set_cookie_params($cookie['lifetime'], $cookie['path'], $cookie['domain'], $cookie['secure'], true);	}	/**	 * Create a token-string	 *	 * @param   integer  $length  Length of string	 *	 * @return  string  Generated token	 *	 * @since   11.1	 */	protected function _createToken($length = 32)	{		static $chars = '0123456789abcdef';		$max = strlen($chars) - 1;		$token = '';		$name = session_name();		for ($i = 0; $i < $length; ++$i)		{			$token .= $chars[(rand(0, $max))];		}		return md5($token . $name);	}	/**	 * Set counter of session usage	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setCounter()	{		$counter = $this->get('session.counter', 0);		++$counter;		$this->set('session.counter', $counter);		return true;	}	/**	 * Set the session timers	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setTimers()	{		if (!$this->has('session.timer.start'))		{			$start = time();			$this->set('session.timer.start', $start);			$this->set('session.timer.last', $start);			$this->set('session.timer.now', $start);		}		$this->set('session.timer.last', $this->get('session.timer.now'));		$this->set('session.timer.now', time());		return true;	}	/**	 * Set additional session options	 *	 * @param   array  $options  List of parameter	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	protected function _setOptions(array $options)	{		// Set name		if (isset($options['name']))		{			session_name(md5($options['name']));		}		// Set id		if (isset($options['id']))		{			session_id($options['id']);		}		// Set expire time		if (isset($options['expire']))		{			$this->_expire = $options['expire'];		}		// Get security options		if (isset($options['security']))		{			$this->_security = explode(',', $options['security']);		}		if (isset($options['force_ssl']))		{			$this->_force_ssl = (bool) $options['force_ssl'];		}		// Sync the session maxlifetime		ini_set('session.gc_maxlifetime', $this->_expire);		return true;	}	/**	 * Do some checks for security reason	 *	 * - timeout check (expire)	 * - ip-fixiation	 * - browser-fixiation	 *	 * If one check failed, session data has to be cleaned.	 *	 * @param   boolean  $restart  Reactivate session	 *	 * @return  boolean  True on success	 *	 * @see     http://shiflett.org/articles/the-truth-about-sessions	 * @since   11.1	 */	protected function _validate($restart = false)	{		// Allow to restart a session		if ($restart)		{			$this->_state = 'active';			$this->set('session.client.address', null);			$this->set('session.client.forwarded', null);			$this->set('session.client.browser', null);			$this->set('session.token', null);		}		// Check if session has expired		if ($this->_expire)		{			$curTime = $this->get('session.timer.now', 0);			$maxTime = $this->get('session.timer.last', 0) + $this->_expire;			// Empty session variables			if ($maxTime < $curTime)			{				$this->_state = 'expired';				return false;			}		}		// Record proxy forwarded for in the session in case we need it later		if (isset($_SERVER['HTTP_X_FORWARDED_FOR']))		{			$this->set('session.client.forwarded', $_SERVER['HTTP_X_FORWARDED_FOR']);		}		// Check for client address		if (in_array('fix_adress', $this->_security) && isset($_SERVER['REMOTE_ADDR']))		{			$ip = $this->get('session.client.address');			if ($ip === null)			{				$this->set('session.client.address', $_SERVER['REMOTE_ADDR']);			}			elseif ($_SERVER['REMOTE_ADDR'] !== $ip)			{				$this->_state = 'error';				return false;			}		}		// Check for clients browser		if (in_array('fix_browser', $this->_security) && isset($_SERVER['HTTP_USER_AGENT']))		{			$browser = $this->get('session.client.browser');			if ($browser === null)			{				$this->set('session.client.browser', $_SERVER['HTTP_USER_AGENT']);			}			elseif ($_SERVER['HTTP_USER_AGENT'] !== $browser)			{				// @todo remove code: 				$this->_state	=	'error';				// @todo remove code: 				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds component helper. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsHelper{	public static $extension = 'com_newsfeeds';	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_NEWSFEEDS_SUBMENU_NEWSFEEDS'),			'index.php?option=com_newsfeeds&view=newsfeeds',			$vName == 'newsfeeds'		);		JHtmlSidebar::addEntry(			JText::_('COM_NEWSFEEDS_SUBMENU_CATEGORIES'),			'index.php?option=com_categories&extension=com_newsfeeds',			$vName == 'categories'		);		if ($vName == 'categories')		{			JToolbarHelper::title(				JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', JText::_('com_newsfeeds')),				'newsfeeds-categories');		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  The category ID.	 *	 * @return  JObject	 */	public static function getActions($categoryId = 0, $newsfeedId = 0)	{		$user	= JFactory::getUser();		$result	= new JObject;		if (empty($categoryId))		{			$assetName = 'com_newsfeeds';			$level = 'component';		}		else		{			$assetName = 'com_newsfeeds.category.'.(int) $categoryId;			$level = 'category';		}		$actions = JAccess::getActions('com_newsfeeds', $level);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('NewsfeedsHelper', JPATH_ADMINISTRATOR . '/components/com_newsfeeds/helpers/newsfeeds.php');/** * Newsfeed model. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsModelNewsfeed extends JModelAdmin{	/**	 * @var        string    The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_NEWSFEEDS';	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since   11.1	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_newsfeeds.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->name);			$table->name = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			//$table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i] = $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object    A record object.	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->published != -2)			{				return;			}			$user = JFactory::getUser();			if (!empty($record->catid))			{				return $user->authorise('core.delete', 'com_newsfeed.category.' . (int) $record->catid);			}			else			{				return parent::canDelete($record);			}		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object    A record object.	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_newsfeeds.category.' . (int) $record->catid);		}		else		{			return parent::canEditState($record);		}	}	/**	 * Returns a Table object, always creating it.	 *	 * @param   type      The table type to instantiate	 * @param   string    A prefix for the table class name. Optional.	 * @param   array     Configuration array for model. Optional.	 * @return  JTable    A database object	 */	public function getTable($type = 'Newsfeed', $prefix = 'NewsfeedsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array      $data        Data for the form.	 * @param   boolean    $loadData    True if the form is to load its own data (default case), false if not.	 * @return  JForm    A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_newsfeeds.newsfeed', 'newsfeed', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Determine correct permissions to check.		if ($this->getState('newsfeed.id'))		{			// Existing record. Can only edit in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit');		}		else		{			// New record. Can only create in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.create');		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('published', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('published', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_newsfeeds.edit.newsfeed.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('newsfeed.id') == 0)			{				$app = JFactory::getApplication();				$data->set('catid', $app->input->get('catid', $app->getUserState('com_newsfeeds.newsfeeds.filter.category_id'), 'int'));			}		}		$this->preprocessData('com_newsfeeds.newsfeed', $data);		return $data;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since    3.0	 */	public function save($data)	{		$app = JFactory::getApplication();		// Alter the title for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($name, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['name']);			$data['name'] = $name;			$data['alias'] = $alias;			$data['published'] = 0;		}		if (parent::save($data))		{			$assoc = isset($app->item_associations) ? $app->item_associations : 0;			if ($assoc)			{				$id = (int) $this->getState($this->getName() . '.id');				$item = $this->getItem($id);				// Adding self to the association				$associations = $data['associations'];				foreach ($associations as $tag => $id)				{					if (empty($id))					{						unset($associations[$tag]);					}				}				// Detecting all item menus				$all_language = $item->language == '*';				if ($all_language && !empty($associations))				{					JError::raiseNotice(403, JText::_('COM_NEWSFEEDS_ERROR_ALL_LANGUAGE_ASSOCIATED'));				}				$associations[$item->language] = $item->id;				// Deleting old association for these items				$db = JFactory::getDbo();				$query = $db->getQuery(true)					->delete('#__associations')					->where($db->quoteName('context') . ' = ' . $db->quote('com_newsfeeds.item'))					->where($db->quoteName('id') . ' IN (' . implode(',', $associations) . ')');				$db->setQuery($query);				$db->execute();				if ($error = $db->getErrorMsg())				{					$this->setError($error);					return false;				}				if (!$all_language && count($associations))				{					// Adding new association for these items					$key = md5(json_encode($associations));					$query->clear()						->insert('#__associations');					foreach ($associations as $tag => $id)					{						$query->values($id . ',' . $db->quote('com_newsfeeds.item') . ',' . $db->quote($key));					}					$db->setQuery($query);					$db->execute();					if ($error = $db->getErrorMsg())					{						$this->setError($error);						return false;					}				}			}			return true;		}		return false;	}	/**	 * Method to get a single record.	 *	 * @param   integer    The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		if ($item = parent::getItem($pk))		{			// Convert the params field to an array.			$registry = new JRegistry;			$registry->loadString($item->metadata);			$item->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($item->images);			$item->images = $registry->toArray();		}		// Load associated newsfeeds items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$item->associations = array();			if ($item->id != null)			{				$associations = JLanguageAssociations::getAssociations('com_newsfeeds', '#__newsfeeds', 'com_newsfeeds.item', $item->id);				foreach ($associations as $tag => $association)				{					$item->associations[$tag] = $association->id;				}			}		}		if (!empty($item->id))		{			$item->tags = new JHelperTags;			$item->tags->getTagIds($item->id, 'com_newsfeeds.newsfeed');			$item->metadata['tags'] = $item->tags;		}		return $item;	}	/**	 * Prepare and sanitise the table prior to saving.	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		$table->name = htmlspecialchars_decode($table->name, ENT_QUOTES);		$table->alias = JApplication::stringURLSafe($table->alias);		if (empty($table->alias))		{			$table->alias = JApplication::stringURLSafe($table->name);		}		if (empty($table->id))		{			// Set the values			$table->created = $date->toSql();			// Set ordering to the last item if not set			if (empty($table->ordering))			{				$db = JFactory::getDbo();				$db->setQuery('SELECT MAX(ordering) FROM #__newsfeeds');				$max = $db->loadResult();				$table->ordering = $max + 1;			}		}		else		{			// Set the values			$table->modified = $date->toSql();			$table->modified_by = $user->get('id');		}		// Increment the content version number.		$table->version++;	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    $pks      A list of the primary keys to change.	 * @param   integer  $value    The value of the published state.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function publish(&$pks, $value = 1)	{		$result = parent::publish($pks, $value);		// Clean extra cache for newsfeeds		$this->cleanCache('feed_parser');		return $result;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object    A record object.	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = ' . (int) $table->catid;		return $condition;	}	protected function preprocessForm(JForm $form, $data, $group = 'content')	{		// Association newsfeeds items		$app = JFactory::getApplication();		$assoc = isset($app->item_associations) ? $app->item_associations : 0;		if ($assoc)		{			$languages = JLanguageHelper::getLanguages('lang_code');			// force to array (perhaps move to $this->loadFormData())			$data = (array) $data;			$addform = new SimpleXMLElement('<form />');			$fields = $addform->addChild('fields');			$fields->addAttribute('name', 'associations');			$fieldset = $fields->addChild('fieldset');			$fieldset->addAttribute('name', 'item_associations');			$fieldset->addAttribute('description', 'COM_NEWSFEEDS_ITEM_ASSOCIATIONS_FIELDSET_DESC');			$add = false;			foreach ($languages as $tag => $language)			{				if (empty($data['language']) || $tag != $data['language'])				{					$add = true;					$field = $fieldset->addChild('field');					$field->addAttribute('name', $tag);					$field->addAttribute('type', 'modal_newsfeeds');					$field->addAttribute('language', $tag);					$field->addAttribute('label', $language->title);					$field->addAttribute('translate_label', 'false');				}			}			if ($add)			{				$form->load($addform, false);			}		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $parent_id  The id of the parent.	 * @param   string   $alias      The alias.	 * @param   string   $title      The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($category_id, $alias, $name)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'catid' => $category_id)))		{			if ($name == $table->name)			{				$name = JString::increment($name);			}			$alias = JString::increment($alias, 'dash');		}		return array($name, $alias);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Plugin class for redirect handling. * * @package     Joomla.Plugin * @subpackage  System.redirect * @since       1.6 */class PlgSystemRedirect extends JPlugin{	/**	 * Object Constructor.	 *	 * @access    public	 * @param   object    The object to observe -- event dispatcher.	 * @param   object    The configuration object for the plugin.	 * @return  void	 * @since   1.6	 */	public function __construct(&$subject, $config)	{		parent::__construct($subject, $config);		// Set the error handler for E_ERROR to be the class handleError method.		JError::setErrorHandling(E_ERROR, 'callback', array('PlgSystemRedirect', 'handleError'));	}	public static function handleError(&$error)	{		// Get the application object.		$app = JFactory::getApplication();		// Make sure the error is a 404 and we are not in the administrator.		if (!$app->isAdmin() and ($error->getCode() == 404))		{			// Get the full current URI.			$uri = JURI::getInstance();			$current = $uri->toString(array('scheme', 'host', 'port', 'path', 'query', 'fragment'));			// Attempt to ignore idiots.			if ((strpos($current, 'mosConfig_') !== false) || (strpos($current, '=http://') !== false))			{				// Render the error page.				JError::customErrorPage($error);			}			// See if the current url exists in the database as a redirect.			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select($db->quoteName('new_url'))				->select($db->quoteName('published'))				->from($db->quoteName('#__redirect_links'))				->where($db->quoteName('old_url') . ' = ' . $db->quote($current));			$db->setQuery($query, 0, 1);			$link = $db->loadObject();			// If a redirect exists and is published, permanently redirect.			if ($link and ($link->published == 1))			{				$app->redirect($link->new_url, null, null, true, false);			}			else			{				$referer = empty($_SERVER['HTTP_REFERER']) ? '' : $_SERVER['HTTP_REFERER'];				$db->setQuery('SELECT id FROM ' . $db->quoteName('#__redirect_links') . '  WHERE old_url= ' . $db->quote($current));				$res = $db->loadResult();				if (!$res)				{					// If not, add the new url to the database.					$columns = array(						$db->quoteName('old_url'),						$db->quoteName('new_url'),						$db->quoteName('referer'),						$db->quoteName('comment'),						$db->quoteName('hits'),						$db->quoteName('published'),						$db->quoteName('created_date')					);					$query = $db->getQuery(true)						->insert($db->quoteName('#__redirect_links'), false)						->columns($columns)						->values(							$db->quote($current) . ', ' . $db->quote('') .								' ,' . $db->quote($referer) . ', ' . $db->quote('') . ',1,0, ' .								$db->quote(JFactory::getDate()->toSql())						);					$db->setQuery($query);					$db->execute();				}				else				{					// Existing error url, increase hit counter					$query = $db->getQuery(true)						->update($db->quoteName('#__redirect_links'))						->set($db->quoteName('hits') . ' = ' . $db->quote('hits') . ' + 1')						->where('id = ' . (int) $res);					$db->setQuery($query);					$db->execute();				}				// Render the error page.				JError::customErrorPage($error);			}		}		else		{			// Render the error page.			JError::customErrorPage($error);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_menu * * @package     Joomla.Site * @subpackage  mod_menu * @since       1.5 */class ModMenuHelper{	/**	 * Get a list of the menu items.	 *	 * @param  JRegistry   $params  The module options.	 *	 * @return  array	 *	 * @since   1.5	 */	public static function getList(&$params)	{		$app = JFactory::getApplication();		$menu = $app->getMenu();		// Get active menu item		$base = self::getBase($params);		$user = JFactory::getUser();		$levels = $user->getAuthorisedViewLevels();		asort($levels);		$key = 'menu_items' . $params . implode(',', $levels) . '.' . $base->id;		$cache = JFactory::getCache('mod_menu', '');		if (!($items = $cache->get($key)))		{			$path    = $base->tree;			$start   = (int) $params->get('startLevel');			$end     = (int) $params->get('endLevel');			$showAll = $params->get('showAllChildren');			$items   = $menu->getItems('menutype', $params->get('menutype'));			$lastitem = 0;			if ($items)			{				foreach ($items as $i => $item)				{					if (($start && $start > $item->level)						|| ($end && $item->level > $end)						|| (!$showAll && $item->level > 1 && !in_array($item->parent_id, $path))						|| ($start > 1 && !in_array($item->tree[$start - 2], $path)))					{						unset($items[$i]);						continue;					}					$item->deeper     = false;					$item->shallower  = false;					$item->level_diff = 0;					if (isset($items[$lastitem]))					{						$items[$lastitem]->deeper     = ($item->level > $items[$lastitem]->level);						$items[$lastitem]->shallower  = ($item->level < $items[$lastitem]->level);						$items[$lastitem]->level_diff = ($items[$lastitem]->level - $item->level);					}					$item->parent = (boolean) $menu->getItems('parent_id', (int) $item->id, true);					$lastitem     = $i;					$item->active = false;					$item->flink  = $item->link;					// Reverted back for CMS version 2.5.6					switch ($item->type)					{						case 'separator':						case 'heading':							// No further action needed.							continue;						case 'url':							if ((strpos($item->link, 'index.php?') === 0) && (strpos($item->link, 'Itemid=') === false))							{								// If this is an internal Joomla link, ensure the Itemid is set.								$item->flink = $item->link . '&Itemid=' . $item->id;							}							break;						case 'alias':							// If this is an alias use the item id stored in the parameters to make the link.							$item->flink = 'index.php?Itemid=' . $item->params->get('aliasoptions');							break;						default:							$router = JSite::getRouter();							if ($router->getMode() == JROUTER_MODE_SEF)							{								$item->flink = 'index.php?Itemid=' . $item->id;							}							else							{								$item->flink .= '&Itemid=' . $item->id;							}							break;					}					if (strcasecmp(substr($item->flink, 0, 4), 'http') && (strpos($item->flink, 'index.php?') !== false))					{						$item->flink = JRoute::_($item->flink, true, $item->params->get('secure'));					}					else					{						$item->flink = JRoute::_($item->flink);					}					// We prevent the double encoding because for some reason the $item is shared for menu modules and we get double encoding					// when the cause of that is found the argument should be removed					$item->title        = htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8', false);					$item->anchor_css   = htmlspecialchars($item->params->get('menu-anchor_css', ''), ENT_COMPAT, 'UTF-8', false);					$item->anchor_title = htmlspecialchars($item->params->get('menu-anchor_title', ''), ENT_COMPAT, 'UTF-8', false);					$item->menu_image   = $item->params->get('menu_image', '') ? htmlspecialchars($item->params->get('menu_image', ''), ENT_COMPAT, 'UTF-8', false) : '';				}				if (isset($items[$lastitem]))				{					$items[$lastitem]->deeper     = (($start?$start:1) > $items[$lastitem]->level);					$items[$lastitem]->shallower  = (($start?$start:1) < $items[$lastitem]->level);					$items[$lastitem]->level_diff = ($items[$lastitem]->level - ($start?$start:1));				}			}			$cache->store($items, $key);		}		return $items;	}	/**	 * Get base menu item.	 *	 * @param   JRegistry  $params  The module options.	 *	 * @return   object	 *	 * @since	3.0.2	 */	public static function getBase(&$params)	{		// Get base menu item from parameters		if ($params->get('base'))		{			$base = JFactory::getApplication()->getMenu()->getItem($params->get('base'));		}		else		{			$base = false;		}		// Use active menu item if no base found		if (!$base)		{			$base = self::getActive($params);		}		return $base;	}	/**	 * Get active menu item.	 *	 * @param   JRegistry  $params  The module options.	 *	 * @return  object	 *	 * @since	3.0.2	 */	public static function getActive(&$params)	{		$menu = JFactory::getApplication()->getMenu();		return $menu->getActive() ? $menu->getActive() : $menu->getDefault();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class JFormFieldMenuParent extends JFormFieldList{	/**	 * The form field type.	 *	 * @var        string	 * @since   1.6	 */	protected $type = 'MenuParent';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 * @since   1.6	 */	protected function getOptions()	{		$options = array();		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id AS value, a.title AS text, a.level')			->from('#__menu AS a')			->join('LEFT', $db->quoteName('#__menu') . ' AS b ON a.lft > b.lft AND a.rgt < b.rgt');		if ($menuType = $this->form->getValue('menutype'))		{			$query->where('a.menutype = ' . $db->quote($menuType));		}		else		{			$query->where('a.menutype != ' . $db->quote(''));		}		// Prevent parenting to children of this item.		if ($id = $this->form->getValue('id'))		{			$query->join('LEFT', $db->quoteName('#__menu') . ' AS p ON p.id = ' . (int) $id)				->where('NOT(a.lft >= p.lft AND a.rgt <= p.rgt)');		}		$query->where('a.published != -2')			->group('a.id, a.title, a.level, a.lft, a.rgt, a.menutype, a.parent_id, a.published')			->order('a.lft ASC');		// Get the options.		$db->setQuery($query);		try		{			$options = $db->loadObjectList();		}		catch (RuntimeException $e)		{			JError::raiseWarning(500, $e->getMessage());		}		// Pad the option text with spaces using depth level as a multiplier.		for ($i = 0, $n = count($options); $i < $n; $i++)		{			$options[$i]->text = str_repeat('- ', $options[$i]->level) . $options[$i]->text;		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users component debugging helper. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersHelperDebug{	/**	 * Get a list of the components.	 *	 * @return  array	 * @since   1.6	 */	public static function getComponents()	{		// Initialise variable.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('name AS text, element AS value')			->from('#__extensions')			->where('enabled >= 1')			->where('type =' . $db->quote('component'));		$items = $db->setQuery($query)->loadObjectList();		if (count($items))		{			$lang = JFactory::getLanguage();			foreach ($items as &$item)			{				// Load language				$extension = $item->value;				$source = JPATH_ADMINISTRATOR . '/components/' . $extension;				$lang->load("$extension.sys", JPATH_ADMINISTRATOR, null, false, false)					|| $lang->load("$extension.sys", $source, null, false, false)					|| $lang->load("$extension.sys", JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					|| $lang->load("$extension.sys", $source, $lang->getDefault(), false, false);				// Translate component name				$item->text = JText::_($item->text);			}			// Sort by component name			JArrayHelper::sortObjects($items, 'text', 1, true, $lang->getLocale());		}		return $items;	}	/**	 * Get a list of the actions for the component or code actions.	 *	 * @param   string    The name of the component.	 *	 * @return  array	 * @since   1.6	 */	public static function getDebugActions($component = null)	{		$actions = array();		// Try to get actions for the component		if (!empty($component))		{			$component_actions = JAccess::getActions($component);			if (!empty($component_actions))			{				foreach ($component_actions as &$action)				{					$actions[$action->title] = array($action->name, $action->description);				}			}		}		// Use default actions from configuration if no component selected or component doesn't have actions		if (empty($actions))		{			$filename = JPATH_ADMINISTRATOR . '/components/com_config/models/forms/application.xml';			if (is_file($filename))			{				$xml = simplexml_load_file($filename);				foreach ($xml->children()->fieldset as $fieldset)				{					if ('permissions' == (string) $fieldset['name'])					{						foreach ($fieldset->children() as $field)						{							if ('rules' == (string) $field['name'])							{								foreach ($field->children() as $action)								{									$actions[(string) $action['title']] = array(										(string) $action['name'],										(string) $action['description']									);								}								break;								break;								break;							}						}					}				}				// Load language				$lang = JFactory::getLanguage();				$extension = 'com_config';				$source = JPATH_ADMINISTRATOR . '/components/' . $extension;				$lang->load($extension, JPATH_ADMINISTRATOR, null, false, false)					|| $lang->load($extension, $source, null, false, false)					|| $lang->load($extension, JPATH_ADMINISTRATOR, $lang->getDefault(), false, false)					|| $lang->load($extension, $source, $lang->getDefault(), false, false);			}		}		return $actions;	}	/**	 * Get a list of filter options for the levels.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getLevelsOptions()	{		// Build the filter options.		$options = array();		$options[] = JHtml::_('select.option', '1', JText::sprintf('COM_USERS_OPTION_LEVEL_COMPONENT', 1));		$options[] = JHtml::_('select.option', '2', JText::sprintf('COM_USERS_OPTION_LEVEL_CATEGORY', 2));		$options[] = JHtml::_('select.option', '3', JText::sprintf('COM_USERS_OPTION_LEVEL_DEEPER', 3));		$options[] = JHtml::_('select.option', '4', '4');		$options[] = JHtml::_('select.option', '5', '5');		$options[] = JHtml::_('select.option', '6', '6');		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_menu * * @package     Joomla.Administrator * @subpackage  mod_menu * @since       1.5 */abstract class ModMenuHelper{	/**	 * Get a list of the available menus.	 *	 * @return  array  An array of the available menus (from the menu types table).	 * @since   1.6	 */	public static function getMenus()	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('a.*, SUM(b.home) AS home')			->from('#__menu_types AS a')			->join('LEFT', '#__menu AS b ON b.menutype = a.menutype AND b.home != 0')			->select('b.language')			->join('LEFT', '#__languages AS l ON l.lang_code = language')			->select('l.image')			->select('l.sef')			->select('l.title_native')			->where('(b.client_id = 0 OR b.client_id IS NULL)');		//sqlsrv change		$query->group('a.id, a.menutype, a.description, a.title, b.menutype,b.language,l.image,l.sef,l.title_native');		$db->setQuery($query);		$result = $db->loadObjectList();		return $result;	}	/**	 * Get a list of the authorised, non-special components to display in the components menu.	 *	 * @param   boolean	$authCheck	An optional switch to turn off the auth check (to support custom layouts 'grey out' behaviour).	 *	 * @return  array  A nest array of component objects and submenus	 * @since   1.6	 */	public static function getComponents($authCheck = true)	{		$lang	= JFactory::getLanguage();		$user	= JFactory::getUser();		$db		= JFactory::getDbo();		$query	= $db->getQuery(true);		$result	= array();		$langs	= array();		// Prepare the query.		$query->select('m.id, m.title, m.alias, m.link, m.parent_id, m.img, e.element')			->from('#__menu AS m');		// Filter on the enabled states.		$query->join('LEFT', '#__extensions AS e ON m.component_id = e.extension_id')			->where('m.client_id = 1')			->where('e.enabled = 1')			->where('m.id > 1');		// Order by lft.		$query->order('m.lft');		$db->setQuery($query);		// component list		$components	= $db->loadObjectList();		// Parse the list of extensions.		foreach ($components as &$component)		{			// Trim the menu link.			$component->link = trim($component->link);			if ($component->parent_id == 1)			{				// Only add this top level if it is authorised and enabled.				if ($authCheck == false || ($authCheck && $user->authorise('core.manage', $component->element)))				{					// Root level.					$result[$component->id] = $component;					if (!isset($result[$component->id]->submenu))					{						$result[$component->id]->submenu = array();					}					// If the root menu link is empty, add it in.					if (empty($component->link))					{						$component->link = 'index.php?option='.$component->element;					}					if (!empty($component->element))					{						// Load the core file then						// Load extension-local file.						$lang->load($component->element.'.sys', JPATH_BASE, null, false, false)					||	$lang->load($component->element.'.sys', JPATH_ADMINISTRATOR.'/components/'.$component->element, null, false, false)					||	$lang->load($component->element.'.sys', JPATH_BASE, $lang->getDefault(), false, false)					||	$lang->load($component->element.'.sys', JPATH_ADMINISTRATOR.'/components/'.$component->element, $lang->getDefault(), false, false);					}					$component->text = $lang->hasKey($component->title) ? JText::_($component->title) : $component->alias;				}			} else {				// Sub-menu level.				if (isset($result[$component->parent_id]))				{					// Add the submenu link if it is defined.					if (isset($result[$component->parent_id]->submenu) && !empty($component->link))					{						$component->text = $lang->hasKey($component->title) ? JText::_($component->title) : $component->alias;						$result[$component->parent_id]->submenu[] = &$component;					}				}			}		}		$result = JArrayHelper::sortObjects($result, 'text', 1, true, $lang->getLocale());		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Set the available masks for the routing mode */const JROUTER_MODE_RAW = 0;const JROUTER_MODE_SEF = 1;/** * Class to create and parse routes * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 */class JRouter{	/**	 * The rewrite mode	 *	 * @var    integer	 * @since  11.1	 */	protected $mode = null;	/**	 * The rewrite mode	 *	 * @var    integer	 * @since  11.1	 * @deprecated use $mode declare as private	 */	protected $_mode = null;	/**	 * An array of variables	 *	 * @var     array	 * @since   11.1	 */	protected $vars = array();	/**	 * An array of variables	 *	 * @var     array	 * @since   11.1	 * @deprecated use $vars declare as private	 */	protected $_vars = array();	/**	 * An array of rules	 *	 * @var    array	 * @since  11.1	 */	protected $rules = array(		'build' => array(),		'parse' => array()	);	/**	 * An array of rules	 *	 * @var    array	 * @since  11.1	 * @deprecated use $rules declare as private	 */	protected $_rules = array(		'build' => array(),		'parse' => array()	);	/**	 * @var    array  JRouter instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor	 *	 * @param   array  $options  Array of options	 *	 * @since 11.1	 */	public function __construct($options = array())	{		if (array_key_exists('mode', $options))		{			$this->_mode = $options['mode'];		}		else		{			$this->_mode = JROUTER_MODE_RAW;		}	}	/**	 * Returns the global JRouter object, only creating it if it	 * doesn't already exist.	 *	 * @param   string  $client   The name of the client	 * @param   array   $options  An associative array of options	 *	 * @return  JRouter A JRouter object.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($client, $options = array())	{		if (empty(self::$instances[$client]))		{			// Create a JRouter object			$classname = 'JRouter' . ucfirst($client);			if (!class_exists($classname))			{				JLog::add('Non-autoloadable JRouter subclasses are deprecated.', JLog::WARNING, 'deprecated');				// Load the router object				$info = JApplicationHelper::getClientInfo($client, true);				if (is_object($info))				{					$path = $info->path . '/includes/router.php';					if (file_exists($path))					{						include_once $path;					}				}			}			if (class_exists($classname))			{				self::$instances[$client] = new $classname($options);			}			else			{				throw new RuntimeException(JText::sprintf('JLIB_APPLICATION_ERROR_ROUTER_LOAD', $client), 500);			}		}		return self::$instances[$client];	}	/**	 * Function to convert a route to an internal URI	 *	 * @param   JURI  $uri  The uri.	 *	 * @return  array	 *	 * @since   11.1	 */	public function parse($uri)	{		$vars = array();		// Process the parsed variables based on custom defined rules		$vars = $this->_processParseRules($uri);		// Parse RAW URL		if ($this->_mode == JROUTER_MODE_RAW)		{			$vars += $this->_parseRawRoute($uri);		}		// Parse SEF URL		if ($this->_mode == JROUTER_MODE_SEF)		{			$vars += $this->_parseSefRoute($uri);		}		return array_merge($this->getVars(), $vars);	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   11.1	 */	public function build($url)	{		// Create the URI object		$uri = $this->_createURI($url);		// Process the uri information based on custom defined rules		$this->_processBuildRules($uri);		// Build RAW URL		if ($this->_mode == JROUTER_MODE_RAW)		{			$this->_buildRawRoute($uri);		}		// Build SEF URL : mysite/route/index.php?var=x		if ($this->_mode == JROUTER_MODE_SEF)		{			$this->_buildSefRoute($uri);		}		return $uri;	}	/**	 * Get the router mode	 *	 * @return  integer	 *	 * @since   11.1	 */	public function getMode()	{		return $this->_mode;	}	/**	 * Set the router mode	 *	 * @param   integer  $mode  The routing mode.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setMode($mode)	{		$this->_mode = $mode;	}	/**	 * Set a router variable, creating it if it doesn't exist	 *	 * @param   string   $key     The name of the variable	 * @param   mixed    $value   The value of the variable	 * @param   boolean  $create  If True, the variable will be created if it doesn't exist yet	 *	 * @return  void	 *	 * @since   11.1	 */	public function setVar($key, $value, $create = true)	{		if ($create || array_key_exists($key, $this->_vars))		{			$this->_vars[$key] = $value;		}	}	/**	 * Set the router variable array	 *	 * @param   array    $vars   An associative array with variables	 * @param   boolean  $merge  If True, the array will be merged instead of overwritten	 *	 * @return  void	 *	 * @since   11.1	 */	public function setVars($vars = array(), $merge = true)	{		if ($merge)		{			$this->_vars = array_merge($this->_vars, $vars);		}		else		{			$this->_vars = $vars;		}	}	/**	 * Get a router variable	 *	 * @param   string  $key  The name of the variable	 *	 * @return  mixed  Value of the variable	 *	 * @since   11.1	 */	public function getVar($key)	{		$result = null;		if (isset($this->_vars[$key]))		{			$result = $this->_vars[$key];		}		return $result;	}	/**	 * Get the router variable array	 *	 * @return  array  An associative array of router variables	 *	 * @since   11.1	 */	public function getVars()	{		return $this->_vars;	}	/**	 * Attach a build rule	 *	 * @param   callback  $callback  The function to be called	 *	 * @return  void	 *	 * @since   11.1.	 */	public function attachBuildRule($callback)	{		$this->_rules['build'][] = $callback;	}	/**	 * Attach a parse rule	 *	 * @param   callback  $callback  The function to be called.	 *	 * @return  void	 *	 * @since   11.1	 */	public function attachParseRule($callback)	{		$this->_rules['parse'][] = $callback;	}	/**	 * Function to convert a raw route to an internal URI	 *	 * @param   JURI  $uri  The raw route	 *	 * @return  boolean	 *	 * @since   11.1	 */	protected function _parseRawRoute($uri)	{		return false;	}	/**	 * Function to convert a sef route to an internal URI	 *	 * @param   JURI  $uri  The sef URI	 *	 * @return  string  Internal URI	 *	 * @since   11.1	 */	protected function _parseSefRoute($uri)	{		return false;	}	/**	 * Function to build a raw route	 *	 * @param   JURI  $uri  The internal URL	 *	 * @return  string  Raw Route	 *	 * @since   11.1	 */	protected function _buildRawRoute($uri)	{	}	/**	 * Function to build a sef route	 *	 * @param   JURI  $uri  The uri	 *	 * @return  string  The SEF route	 *	 * @since   11.1	 */	protected function _buildSefRoute($uri)	{	}	/**	 * Process the parsed router variables based on custom defined rules	 *	 * @param   JURI  $uri  The URI to parse	 *	 * @return  array  The array of processed URI variables	 *	 * @since   11.1	 */	protected function _processParseRules($uri)	{		$vars = array();		foreach ($this->_rules['parse'] as $rule)		{			$vars += call_user_func_array($rule, array(&$this, &$uri));		}		return $vars;	}	/**	 * Process the build uri query data based on custom defined rules	 *	 * @param   JURI  $uri  The URI	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _processBuildRules($uri)	{		foreach ($this->_rules['build'] as $rule)		{			call_user_func_array($rule, array(&$this, &$uri));		}	}	/**	 * Create a uri based on a full or partial url string	 *	 * @param   string  $url  The URI	 *	 * @return  JURI	 *	 * @since   11.1	 */	protected function _createURI($url)	{		// Create full URL if we are only appending variables to it		if (substr($url, 0, 1) == '&')		{			$vars = array();			if (strpos($url, '&amp;') !== false)			{				$url = str_replace('&amp;', '&', $url);			}			parse_str($url, $vars);			$vars = array_merge($this->getVars(), $vars);			foreach ($vars as $key => $var)			{				if ($var == "")				{					unset($vars[$key]);				}			}			$url = 'index.php?' . JURI::buildQuery($vars);		}		// Decompose link into url component parts		return new JURI($url);	}	/**	 * Encode route segments	 *	 * @param   array  $segments  An array of route segments	 *	 * @return  array  Array of encoded route segments	 *	 * @since   11.1	 */	protected function _encodeSegments($segments)	{		$total = count($segments);		for ($i = 0; $i < $total; $i++)		{			$segments[$i] = str_replace(':', '-', $segments[$i]);		}		return $segments;	}	/**	 * Decode route segments	 *	 * @param   array  $segments  An array of route segments	 *	 * @return  array  Array of decoded route segments	 *	 * @since 11.1	 */	protected function _decodeSegments($segments)	{		$total = count($segments);		for ($i = 0; $i < $total; $i++)		{			$segments[$i] = preg_replace('/-/', ':', $segments[$i], 1);		}		return $segments;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');JHtml::_('bootstrap.tooltip');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><div id="installer-update">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=update');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty($this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif; ?>	<?php if ($this->showMessage) : ?>		<div class="alert alert-info">			<a class="close" data-dismiss="alert" href="#">&times;</a>			<?php echo $this->loadTemplate('message'); ?>		</div>	<?php endif; ?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<div id="filter-bar" class="btn-toolbar">		<div class="btn-group pull-right hidden-phone">			<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>			<?php echo $this->pagination->getLimitBox(); ?>		</div>		<div class="filter-search btn-group pull-left">			<input type="text" name="filter_search" placeholder="<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('JSEARCH_FILTER'); ?>" />		</div>		<div class="btn-group pull-left">			<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>			<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>		</div>	</div>	<div class="clearfix"> </div>	<!-- Begin Content -->		<?php if (count($this->items)) : ?>		<table class="table table-striped" >			<thead>				<tr>					<th width="20">						<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>					</th>					<th class="nowrap">						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_INSTALLTYPE', 'extension_id', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_TYPE', 'type', $listDirn, $listOrder); ?>					</th>					<th width="10%" class="center">						<?php echo JText::_('JVERSION'); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_FOLDER', 'folder', $listDirn, $listOrder); ?>					</th>					<th>						<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_CLIENT', 'client_id', $listDirn, $listOrder); ?>					</th>					<th width="25%">						<?php echo JText::_('COM_INSTALLER_HEADING_DETAILSURL'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="9">						<?php echo $this->pagination->getListFooter(); ?>					</td>				</tr>			</tfoot>			<tbody>			<?php				foreach ($this->items as $i => $item) :				$client = $item->client_id ? JText::_('JADMINISTRATOR') : JText::_('JSITE');			?>				<tr class="row<?php echo $i % 2; ?>">					<td>						<?php echo JHtml::_('grid.id', $i, $item->update_id); ?>					</td>					<td>						<span class="editlinktip hasTip" title="<?php echo JText::_('JGLOBAL_DESCRIPTION'); ?>::<?php echo $item->description ? $this->escape($item->description) : JText::_('COM_INSTALLER_MSG_UPDATE_NODESC'); ?>">						<?php echo $this->escape($item->name); ?>						</span>					</td>					<td class="center">						<?php echo $item->extension_id ? JText::_('COM_INSTALLER_MSG_UPDATE_UPDATE') : JText::_('COM_INSTALLER_NEW_INSTALL') ?>					</td>					<td>						<?php echo JText::_('COM_INSTALLER_TYPE_' . $item->type) ?>					</td>					<td class="center">						<?php echo $item->version ?>					</td>					<td class="center">						<?php echo @$item->folder != '' ? $item->folder : JText::_('COM_INSTALLER_TYPE_NONAPPLICABLE'); ?>					</td>					<td class="center">						<?php echo $client; ?>					</td>					<td><?php echo $item->detailsurl ?>						<?php if (isset($item->infourl)) : ?>							<br />							<a href="<?php echo $item->infourl; ?>" target="_blank">							<?php echo $this->escape($item->infourl); ?>							</a>						<?php endif; ?>					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>		<?php else : ?>			<div class="alert alert-info">				<a class="close" data-dismiss="alert" href="#">&times;</a>				<?php echo JText::_('COM_INSTALLER_MSG_UPDATE_NOUPDATES'); ?>			</div>		<?php endif; ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />			<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API User class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1*/class JOpenstreetmapUser extends JOpenstreetmapObject{	/**	 * Method to get user details	 *  	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function getDetails()	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/details';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters);		return $response->body;	}	/**	 * Method to get preferences	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function getPreferences()	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/preferences';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters);		return $response->body;	}	/**	 * Method to replace user preferences	 * 	 * @param   array  $preferences  array of new preferences	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function replacePreferences($preferences)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/preferences';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create a list of preferences		$preference_list = '';		if (!empty($preferences))		{			foreach ($preferences as $key => $value)			{				$preference_list .= '<preference k="' . $key . '" v="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>			<osm version="0.6" generator="JOpenstreetmap">				<preferences>'				. $preference_list .				'</preferences>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to change user preferences	 * 	 * @param   string  $key         key of the preference	 * @param   string  $preference  new value for preference	 * 	 * @return  array The xml response	 * 	 * @since   13.1	 */	public function changePreference($key, $preference)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'user/preferences/' . $key;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $preference);		return $response->body;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Table class supporting modified pre-order tree traversal behavior. * * @package     Joomla.Platform * @subpackage  Table * @link        http://docs.joomla.org/JTableNested * @since       11.1 */class JTableNested extends JTable{	/**	 * Object property holding the primary key of the parent node.  Provides	 * adjacency list data for nodes.	 *	 * @var    integer	 * @since  11.1	 */	public $parent_id;	/**	 * Object property holding the depth level of the node in the tree.	 *	 * @var    integer	 * @since  11.1	 */	public $level;	/**	 * Object property holding the left value of the node for managing its	 * placement in the nested sets tree.	 *	 * @var    integer	 * @since  11.1	 */	public $lft;	/**	 * Object property holding the right value of the node for managing its	 * placement in the nested sets tree.	 *	 * @var    integer	 * @since  11.1	 */	public $rgt;	/**	 * Object property holding the alias of this node used to constuct the	 * full text path, forward-slash delimited.	 *	 * @var    string	 * @since  11.1	 */	public $alias;	/**	 * Object property to hold the location type to use when storing the row.	 * Possible values are: ['before', 'after', 'first-child', 'last-child'].	 *	 * @var    string	 * @since  11.1	 */	protected $_location;	/**	 * Object property to hold the primary key of the location reference node to	 * use when storing the row.  A combination of location type and reference	 * node describes where to store the current node in the tree.	 *	 * @var    integer	 * @since  11.1	 */	protected $_location_id;	/**	 * An array to cache values in recursive processes.	 *	 * @var    array	 * @since  11.1	 */	protected $_cache = array();	/**	 * Debug level	 *	 * @var    integer	 * @since  11.1	 */	protected $_debug = 0;	/**	 * Sets the debug level on or off	 *	 * @param   integer  $level  0 = off, 1 = on	 *	 * @return  void	 *	 * @since   11.1	 */	public function debug($level)	{		$this->_debug = (int) $level;	}	/**	 * Method to get an array of nodes from a given node to its root.	 *	 * @param   integer  $pk          Primary key of the node for which to get the path.	 * @param   boolean  $diagnostic  Only select diagnostic data for the nested sets.	 *	 * @return  mixed    An array of node objects including the start node.	 *	 * @since   11.1	 * @throws  RuntimeException on database error	 */	public function getPath($pk = null, $diagnostic = false)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Get the path from the node to the root.		$query = $this->_db->getQuery(true);		$select = ($diagnostic) ? 'p.' . $k . ', p.parent_id, p.level, p.lft, p.rgt' : 'p.*';		$query->select($select)			->from($this->_tbl . ' AS n, ' . $this->_tbl . ' AS p')			->where('n.lft BETWEEN p.lft AND p.rgt')			->where('n.' . $k . ' = ' . (int) $pk)			->order('p.lft');		$this->_db->setQuery($query);		return $this->_db->loadObjectList();	}	/**	 * Method to get a node and all its child nodes.	 *	 * @param   integer  $pk          Primary key of the node for which to get the tree.	 * @param   boolean  $diagnostic  Only select diagnostic data for the nested sets.	 *	 * @return  mixed    Boolean false on failure or array of node objects on success.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function getTree($pk = null, $diagnostic = false)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Get the node and children as a tree.		$query = $this->_db->getQuery(true);		$select = ($diagnostic) ? 'n.' . $k . ', n.parent_id, n.level, n.lft, n.rgt' : 'n.*';		$query->select($select)			->from($this->_tbl . ' AS n, ' . $this->_tbl . ' AS p')			->where('n.lft BETWEEN p.lft AND p.rgt')			->where('p.' . $k . ' = ' . (int) $pk)			->order('n.lft');		return $this->_db->setQuery($query)->loadObjectList();	}	/**	 * Method to determine if a node is a leaf node in the tree (has no children).	 *	 * @param   integer  $pk  Primary key of the node to check.	 *	 * @return  boolean  True if a leaf node, false if not or null if the node does not exist.	 *	 * @note    Since 12.1 this method returns null if the node does not exist.	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function isLeaf($pk = null)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		$node = $this->_getNode($pk);		// Get the node by primary key.		if (empty($node))		{			// Error message set in getNode method.			return null;		}		// The node is a leaf node.		return (($node->rgt - $node->lft) == 1);	}	/**	 * Method to set the location of a node in the tree object.  This method does not	 * save the new location to the database, but will set it in the object so	 * that when the node is stored it will be stored in the new location.	 *	 * @param   integer  $referenceId  The primary key of the node to reference new location by.	 * @param   string   $position     Location type string. ['before', 'after', 'first-child', 'last-child']	 *	 * @return  void	 *	 * @note    Since 12.1 this method returns void and throws an InvalidArgumentException when an invalid position is passed.	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public function setLocation($referenceId, $position = 'after')	{		// Make sure the location is valid.		if (($position != 'before') && ($position != 'after') && ($position != 'first-child') && ($position != 'last-child'))		{			throw new InvalidArgumentException(sprintf('%s::setLocation(%d, *%s*)', get_class($this), $referenceId, $position));		}		// Set the location properties.		$this->_location = $position;		$this->_location_id = $referenceId;	}	/**	 * Method to move a row in the ordering sequence of a group of rows defined by an SQL WHERE clause.	 * Negative numbers move the row up in the sequence and positive numbers move it down.	 *	 * @param   integer  $delta  The direction and magnitude to move the row in the ordering sequence.	 * @param   string   $where  WHERE clause to use for limiting the selection of rows to compact the	 * ordering values.	 *	 * @return  mixed    Boolean true on success.	 *	 * @link    http://docs.joomla.org/JTable/move	 * @since   11.1	 */	public function move($delta, $where = '')	{		$k = $this->_tbl_key;		$pk = $this->$k;		$query = $this->_db->getQuery(true)			->select($k)			->from($this->_tbl)			->where('parent_id = ' . $this->parent_id);		if ($where)		{			$query->where($where);		}		$position = 'after';		if ($delta > 0)		{			$query->where('rgt > ' . $this->rgt)				->order('rgt ASC');			$position = 'after';		}		else		{			$query->where('lft < ' . $this->lft)				->order('lft DESC');			$position = 'before';		}		$this->_db->setQuery($query);		$referenceId = $this->_db->loadResult();		if ($referenceId)		{			return $this->moveByReference($referenceId, $position, $pk);		}		else		{			return false;		}	}	/**	 * Method to move a node and its children to a new location in the tree.	 *	 * @param   integer  $referenceId  The primary key of the node to reference new location by.	 * @param   string   $position     Location type string. ['before', 'after', 'first-child', 'last-child']	 * @param   integer  $pk           The primary key of the node to move.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTableNested/moveByReference	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function moveByReference($referenceId, $position = 'after', $pk = null)	{		// @codeCoverageIgnoreStart		if ($this->_debug)		{			echo "\nMoving ReferenceId:$referenceId, Position:$position, PK:$pk";		}		// @codeCoverageIgnoreEnd		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Get the node by id.		if (!$node = $this->_getNode($pk))		{			// Error message set in getNode method.			return false;		}		// Get the ids of child nodes.		$query = $this->_db->getQuery(true)			->select($k)			->from($this->_tbl)			->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);		$children = $this->_db->setQuery($query)->loadColumn();		// @codeCoverageIgnoreStart		if ($this->_debug)		{			$this->_logtable(false);		}		// @codeCoverageIgnoreEnd		// Cannot move the node to be a child of itself.		if (in_array($referenceId, $children))		{			$e = new UnexpectedValueException(				sprintf('%s::moveByReference(%d, %s, %d) parenting to child.', get_class($this), $referenceId, $position, $pk)			);			$this->setError($e);			return false;		}		// Lock the table for writing.		if (!$this->_lock())		{			return false;		}		/*		 * Move the sub-tree out of the nested sets by negating its left and right values.		 */		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('lft = lft * (-1), rgt = rgt * (-1)')			->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		/*		 * Close the hole in the tree that was opened by removing the sub-tree from the nested sets.		 */		// Compress the left values.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('lft = lft - ' . (int) $node->width)			->where('lft > ' . (int) $node->rgt);		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		// Compress the right values.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('rgt = rgt - ' . (int) $node->width)			->where('rgt > ' . (int) $node->rgt);		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		// We are moving the tree relative to a reference node.		if ($referenceId)		{			// Get the reference node by primary key.			if (!$reference = $this->_getNode($referenceId))			{				// Error message set in getNode method.				$this->_unlock();				return false;			}			// Get the reposition data for shifting the tree and re-inserting the node.			if (!$repositionData = $this->_getTreeRepositionData($reference, $node->width, $position))			{				// Error message set in getNode method.				$this->_unlock();				return false;			}		}		// We are moving the tree to be the last child of the root node		else		{			// Get the last root node as the reference node.			$query = $this->_db->getQuery(true)				->select($this->_tbl_key . ', parent_id, level, lft, rgt')				->from($this->_tbl)				->where('parent_id = 0')				->order('lft DESC');			$this->_db->setQuery($query, 0, 1);			$reference = $this->_db->loadObject();			// @codeCoverageIgnoreStart			if ($this->_debug)			{				$this->_logtable(false);			}			// @codeCoverageIgnoreEnd			// Get the reposition data for re-inserting the node after the found root.			if (!$repositionData = $this->_getTreeRepositionData($reference, $node->width, 'last-child'))			{				// Error message set in getNode method.				$this->_unlock();				return false;			}		}		/*		 * Create space in the nested sets at the new location for the moved sub-tree.		 */		// Shift left values.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('lft = lft + ' . (int) $node->width)			->where($repositionData->left_where);		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		// Shift right values.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('rgt = rgt + ' . (int) $node->width)			->where($repositionData->right_where);		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		/*		 * Calculate the offset between where the node used to be in the tree and		 * where it needs to be in the tree for left ids (also works for right ids).		 */		$offset = $repositionData->new_lft - $node->lft;		$levelOffset = $repositionData->new_level - $node->level;		// Move the nodes back into position in the tree using the calculated offsets.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('rgt = ' . (int) $offset . ' - rgt')			->set('lft = ' . (int) $offset . ' - lft')			->set('level = level + ' . (int) $levelOffset)			->where('lft < 0');		$this->_db->setQuery($query);		$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		// Set the correct parent id for the moved node if required.		if ($node->parent_id != $repositionData->new_parent_id)		{			$query = $this->_db->getQuery(true)				->update($this->_tbl);			// Update the title and alias fields if they exist for the table.			$fields = $this->getFields();			if (property_exists($this, 'title') && $this->title !== null)			{				$query->set('title = ' . $this->_db->quote($this->title));			}			if (array_key_exists('alias', $fields)  && $this->alias !== null)			{				$query->set('alias = ' . $this->_db->quote($this->alias));			}			$query->set('parent_id = ' . (int) $repositionData->new_parent_id)				->where($this->_tbl_key . ' = ' . (int) $node->$k);			$this->_db->setQuery($query);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_MOVE_FAILED');		}		// Unlock the table for writing.		$this->_unlock();		// Set the object values.		$this->parent_id = $repositionData->new_parent_id;		$this->level = $repositionData->new_level;		$this->lft = $repositionData->new_lft;		$this->rgt = $repositionData->new_rgt;		return true;	}	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function delete($pk = null, $children = true)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Lock the table for writing.		if (!$this->_lock())		{			// Error message set in lock method.			return false;		}		// If tracking assets, remove the asset first.		if ($this->_trackAssets)		{			$name = $this->_getAssetName();			$asset = JTable::getInstance('Asset');			// Lock the table for writing.			if (!$asset->_lock())			{				// Error message set in lock method.				return false;			}			if ($asset->loadByName($name))			{				// Delete the node in assets table.				if (!$asset->delete(null, $children))				{					$this->setError($asset->getError());					$asset->_unlock();					return false;				}				$asset->_unlock();			}			else			{				$this->setError($asset->getError());				$asset->_unlock();				return false;			}		}		// Get the node by id.		$node = $this->_getNode($pk);		if (empty($node))		{			// Error message set in getNode method.			$this->_unlock();			return false;		}		// Should we delete all children along with the node?		if ($children)		{			// Delete the node and all of its children.			$query = $this->_db->getQuery(true)				->delete($this->_tbl)				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Compress the left values.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('lft = lft - ' . (int) $node->width)				->where('lft > ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Compress the right values.			$query = $this->_db->getQuery(true)				->update($this->_tbl)				->set('rgt = rgt - ' . (int) $node->width)				->where('rgt > ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');		}		// Leave the children and move them up a level.		else		{			// Delete the node.			$query = $this->_db->getQuery(true)				->delete($this->_tbl)				->where('lft = ' . (int) $node->lft);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Shift all node's children up a level.			$query->clear()				->update($this->_tbl)				->set('lft = lft - 1')				->set('rgt = rgt - 1')				->set('level = level - 1')				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Adjust all the parent values for direct children of the deleted node.			$query->clear()				->update($this->_tbl)				->set('parent_id = ' . (int) $node->parent_id)				->where('parent_id = ' . (int) $node->$k);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Shift all of the left values that are right of the node.			$query->clear()				->update($this->_tbl)				->set('lft = lft - 2')				->where('lft > ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');			// Shift all of the right values that are right of the node.			$query->clear()				->update($this->_tbl)				->set('rgt = rgt - 2')				->where('rgt > ' . (int) $node->rgt);			$this->_runQuery($query, 'JLIB_DATABASE_ERROR_DELETE_FAILED');		}		// Unlock the table for writing.		$this->_unlock();		return true;	}	/**	 * Checks that the object is valid and able to be stored.	 *	 * This method checks that the parent_id is non-zero and exists in the database.	 * Note that the root node (parent_id = 0) cannot be manipulated with this class.	 *	 * @return  boolean  True if all checks pass.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function check()	{		$this->parent_id = (int) $this->parent_id;		// Set up a mini exception handler.		try		{			// Check that the parent_id field is valid.			if ($this->parent_id == 0)			{				throw new UnexpectedValueException(sprintf('Invalid `parent_id` [%d] in %s', $this->parent_id, get_class($this)));			}			$query = $this->_db->getQuery(true)				->select('COUNT(' . $this->_tbl_key . ')')				->from($this->_tbl)				->where($this->_tbl_key . ' = ' . $this->parent_id);			if (!$this->_db->setQuery($query)->loadResult())			{				throw new UnexpectedValueException(sprintf('Invalid `parent_id` [%d] in %s', $this->parent_id, get_class($this)));			}		}		catch (UnexpectedValueException $e)		{			// Validation error - record it and return false.			$this->setError($e);			return false;		}		// @codeCoverageIgnoreStart		catch (Exception $e)		{			// Database error - rethrow.			throw $e;		}		// @codeCoverageIgnoreEnd		return true;	}	/**	 * Method to store a node in the database table.	 *	 * @param   boolean  $updateNulls  True to update null values as well.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTableNested/store	 * @since   11.1	 */	public function store($updateNulls = false)	{		$k = $this->_tbl_key;		// @codeCoverageIgnoreStart		if ($this->_debug)		{			echo "\n" . get_class($this) . "::store\n";			$this->_logtable(true, false);		}		// @codeCoverageIgnoreEnd		/*		 * If the primary key is empty, then we assume we are inserting a new node into the		 * tree.  From this point we would need to determine where in the tree to insert it.		 */		if (empty($this->$k))		{			/*			 * We are inserting a node somewhere in the tree with a known reference			 * node.  We have to make room for the new node and set the left and right			 * values before we insert the row.			 */			if ($this->_location_id >= 0)			{				// Lock the table for writing.				if (!$this->_lock())				{					// Error message set in lock method.					return false;				}				// We are inserting a node relative to the last root node.				if ($this->_location_id == 0)				{					// Get the last root node as the reference node.					$query = $this->_db->getQuery(true)						->select($this->_tbl_key . ', parent_id, level, lft, rgt')						->from($this->_tbl)						->where('parent_id = 0')						->order('lft DESC');					$this->_db->setQuery($query, 0, 1);					$reference = $this->_db->loadObject();					// @codeCoverageIgnoreStart					if ($this->_debug)					{						$this->_logtable(false);					}					// @codeCoverageIgnoreEnd				}				// We have a real node set as a location reference.				else				{					// Get the reference node by primary key.					if (!$reference = $this->_getNode($this->_location_id))					{						// Error message set in getNode method.						$this->_unlock();						return false;					}				}				// Get the reposition data for shifting the tree and re-inserting the node.				if (!($repositionData = $this->_getTreeRepositionData($reference, 2, $this->_location)))				{					// Error message set in getNode method.					$this->_unlock();					return false;				}				// Create space in the tree at the new location for the new node in left ids.				$query = $this->_db->getQuery(true)					->update($this->_tbl)					->set('lft = lft + 2')					->where($repositionData->left_where);				$this->_runQuery($query, 'JLIB_DATABASE_ERROR_STORE_FAILED');				// Create space in the tree at the new location for the new node in right ids.				$query = $this->_db->getQuery(true)					->update($this->_tbl)					->set('rgt = rgt + 2')					->where($repositionData->right_where);				$this->_runQuery($query, 'JLIB_DATABASE_ERROR_STORE_FAILED');				// Set the object values.				$this->parent_id = $repositionData->new_parent_id;				$this->level = $repositionData->new_level;				$this->lft = $repositionData->new_lft;				$this->rgt = $repositionData->new_rgt;			}			else			{				// Negative parent ids are invalid				$e = new UnexpectedValueException(sprintf('%s::store() used a negative _location_id', get_class($this)));				$this->setError($e);				return false;			}		}		/*		 * If we have a given primary key then we assume we are simply updating this		 * node in the tree.  We should assess whether or not we are moving the node		 * or just updating its data fields.		 */		else		{			// If the location has been set, move the node to its new location.			if ($this->_location_id > 0)			{				if (!$this->moveByReference($this->_location_id, $this->_location, $this->$k))				{					// Error message set in move method.					return false;				}			}			// Lock the table for writing.			if (!$this->_lock())			{				// Error message set in lock method.				return false;			}		}		// Store the row to the database.		if (!parent::store($updateNulls))		{			$this->_unlock();			return false;		}		// @codeCoverageIgnoreStart		if ($this->_debug)		{			$this->_logtable();		}		// @codeCoverageIgnoreEnd		// Unlock the table for writing.		$this->_unlock();		return true;	}	/**	 * Method to set the publishing state for a node or list of nodes in the database	 * table.  The method respects rows checked out by other users and will attempt	 * to checkin rows that it can after adjustments are made. The method will not	 * allow you to set a publishing state higher than any ancestor node and will	 * not allow you to set a publishing state on a node with a checked out child.	 *	 * @param   mixed    $pks     An optional array of primary key values to update.  If not	 *                            set the instance property value is used.	 * @param   integer  $state   The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer  $userId  The user id of the user performing the operation.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTableNested/publish	 * @since   11.1	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state = (int) $state;		// If $state > 1, then we allow state changes even if an ancestor has lower state		// (for example, can change a child state to Archived (2) if an ancestor is Published (1)		$compareState = ($state > 1) ? 1 : $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = explode(',', $this->$k);			}			// Nothing to set publishing state on, return false.			else			{				$e = new UnexpectedValueException(sprintf(__CLASS__ . '::' . __FUNCTION__ . '(%s, %d, %d) empty.', get_class($this), $state, $userId));				$this->setError($e);				return false;			}		}		// Determine if there is checkout support for the table.		$checkoutSupport = (property_exists($this, 'checked_out') || property_exists($this, 'checked_out_time'));		// Iterate over the primary keys to execute the publish action if possible.		foreach ($pks as $pk)		{			// Get the node by primary key.			if (!$node = $this->_getNode($pk))			{				// Error message set in getNode method.				return false;			}			// If the table has checkout support, verify no children are checked out.			if ($checkoutSupport)			{				// Ensure that children are not checked out.				$query = $this->_db->getQuery(true)					->select('COUNT(' . $k . ')')					->from($this->_tbl)					->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt)					->where('(checked_out <> 0 AND checked_out <> ' . (int) $userId . ')');				$this->_db->setQuery($query);				// Check for checked out children.				if ($this->_db->loadResult())				{					// TODO Convert to a conflict exception when available.					$pksImploded = implode(',', $pks);					$e = new RuntimeException(sprintf(__CLASS__ . '::' . __FUNCTION__ . '(%s, %d, %d) checked-out conflict.', get_class($this), $implodedPks, $state, $userId));					$this->setError($e);					return false;				}			}			// If any parent nodes have lower published state values, we cannot continue.			if ($node->parent_id)			{				// Get any ancestor nodes that have a lower publishing state.				$query = $this->_db->getQuery(true)					->select('n.' . $k)					->from($this->_db->quoteName($this->_tbl) . ' AS n')					->where('n.lft < ' . (int) $node->lft)					->where('n.rgt > ' . (int) $node->rgt)					->where('n.parent_id > 0')					->where('n.published < ' . (int) $compareState);				// Just fetch one row (one is one too many).				$this->_db->setQuery($query, 0, 1);				$rows = $this->_db->loadColumn();					if (!empty($rows))					{						$pksImploded = implode(',', $pks);						throw new UnexpectedValueException(							sprintf(__CLASS__ . '::' . __FUNCTION__ . '(%s, %d, %d) ancestors have lower state.', $pksImploded, $state, $userId)						);					}			}			// Update and cascade the publishing state.			$query = $this->_db->getQuery(true)				->update($this->_db->quoteName($this->_tbl))				->set('published = ' . (int) $state)				->where('(lft > ' . (int) $node->lft . ' AND rgt < ' . (int) $node->rgt . ') OR ' . $k . ' = ' . (int) $pk);			$this->_db->setQuery($query)->execute();			// If checkout support exists for the object, check the row in.			if ($checkoutSupport)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->published = $state;		}		$this->setError('');		return true;	}	/**	 * Method to move a node one position to the left in the same level.	 *	 * @param   integer  $pk  Primary key of the node to move.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function orderUp($pk)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Lock the table for writing.		if (!$this->_lock())		{			// Error message set in lock method.			return false;		}		// Get the node by primary key.		$node = $this->_getNode($pk);		if (empty($node))		{			// Error message set in getNode method.			$this->_unlock();			return false;		}		// Get the left sibling node.		$sibling = $this->_getNode($node->lft - 1, 'right');		if (empty($sibling))		{			// Error message set in getNode method.			$this->_unlock();			return false;		}		try		{			// Get the primary keys of child nodes.			$query = $this->_db->getQuery(true)				->select($this->_tbl_key)				->from($this->_tbl)				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$children = $this->_db->setQuery($query)->loadColumn();			// Shift left and right values for the node and it's children.			$query->clear()				->update($this->_tbl)				->set('lft = lft - ' . (int) $sibling->width)				->set('rgt = rgt - ' . (int) $sibling->width)				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$this->_db->setQuery($query)->execute();			// Shift left and right values for the sibling and it's children.			$query->clear()				->update($this->_tbl)				->set('lft = lft + ' . (int) $node->width)				->set('rgt = rgt + ' . (int) $node->width)				->where('lft BETWEEN ' . (int) $sibling->lft . ' AND ' . (int) $sibling->rgt)				->where($this->_tbl_key . ' NOT IN (' . implode(',', $children) . ')');			$this->_db->setQuery($query)->execute();		}		catch (RuntimeException $e)		{			$this->_unlock();			throw $e;		}		// Unlock the table for writing.		$this->_unlock();		return true;	}	/**	 * Method to move a node one position to the right in the same level.	 *	 * @param   integer  $pk  Primary key of the node to move.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function orderDown($pk)	{		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Lock the table for writing.		if (!$this->_lock())		{			// Error message set in lock method.			return false;		}		// Get the node by primary key.		$node = $this->_getNode($pk);		if (empty($node))		{			// Error message set in getNode method.			$this->_unlock();			return false;		}		$query = $this->_db->getQuery(true);		// Get the right sibling node.		$sibling = $this->_getNode($node->rgt + 1, 'left');		if (empty($sibling))		{			// Error message set in getNode method.			$query->_unlock($this->_db);			$this->_locked = false;			return false;		}		try		{			// Get the primary keys of child nodes.			$query->clear()				->select($this->_tbl_key)				->from($this->_tbl)				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$this->_db->setQuery($query);			$children = $this->_db->loadColumn();			// Shift left and right values for the node and it's children.			$query->clear()				->update($this->_tbl)				->set('lft = lft + ' . (int) $sibling->width)				->set('rgt = rgt + ' . (int) $sibling->width)				->where('lft BETWEEN ' . (int) $node->lft . ' AND ' . (int) $node->rgt);			$this->_db->setQuery($query)->execute();			// Shift left and right values for the sibling and it's children.			$query->clear()				->update($this->_tbl)				->set('lft = lft - ' . (int) $node->width)				->set('rgt = rgt - ' . (int) $node->width)				->where('lft BETWEEN ' . (int) $sibling->lft . ' AND ' . (int) $sibling->rgt)				->where($this->_tbl_key . ' NOT IN (' . implode(',', $children) . ')');			$this->_db->setQuery($query)->execute();		}		catch (RuntimeException $e)		{			$this->_unlock();			throw $e;		}		// Unlock the table for writing.		$this->_unlock();		return true;	}	/**	 * Gets the ID of the root item in the tree	 *	 * @return  mixed  The primary id of the root row, or false if not found and the internal error is set.	 *	 * @since   11.1	 */	public function getRootId()	{		// Get the root item.		$k = $this->_tbl_key;		// Test for a unique record with parent_id = 0		$query = $this->_db->getQuery(true)			->select($k)			->from($this->_tbl)			->where('parent_id = 0');		$result = $this->_db->setQuery($query)->loadColumn();		if (count($result) == 1)		{			return $result[0];		}		// Test for a unique record with lft = 0		$query = $this->_db->getQuery(true)			->select($k)			->from($this->_tbl)			->where('lft = 0');		$result = $this->_db->setQuery($query)->loadColumn();		if (count($result) == 1)		{			return $result[0];		}		$fields = $this->getFields();		if (array_key_exists('alias', $fields))		{			// Test for a unique record alias = root			$query = $this->_db->getQuery(true)				->select($k)				->from($this->_tbl)				->where('alias = ' . $this->_db->quote('root'));			$result = $this->_db->setQuery($query)->loadColumn();			if (count($result) == 1)			{				return $result[0];			}		}		$e = new UnexpectedValueException(sprintf('%s::getRootId', get_class($this)));		$this->setError($e);		return false;	}	/**	 * Method to recursively rebuild the whole nested set tree.	 *	 * @param   integer  $parentId  The root of the tree to rebuild.	 * @param   integer  $leftId    The left id to start with in building the tree.	 * @param   integer  $level     The level to assign to the current nodes.	 * @param   string   $path      The path to the current nodes.	 *	 * @return  integer  1 + value of root rgt on success, false on failure	 *	 * @link    http://docs.joomla.org/JTableNested/rebuild	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function rebuild($parentId = null, $leftId = 0, $level = 0, $path = '')	{		// If no parent is provided, try to find it.		if ($parentId === null)		{			// Get the root item.			$parentId = $this->getRootId();			if ($parentId === false)			{				return false;			}		}		// Build the structure of the recursive query.		if (!isset($this->_cache['rebuild.sql']))		{			$query = $this->_db->getQuery(true)				->select($this->_tbl_key . ', alias')				->from($this->_tbl)				->where('parent_id = %d');			// If the table has an ordering field, use that for ordering.			if (property_exists($this, 'ordering'))			{				$query->order('parent_id, ordering, lft');			}			else			{				$query->order('parent_id, lft');			}			$this->_cache['rebuild.sql'] = (string) $query;		}		// Make a shortcut to database object.		// Assemble the query to find all children of this node.		$this->_db->setQuery(sprintf($this->_cache['rebuild.sql'], (int) $parentId));		$children = $this->_db->loadObjectList();		// The right value of this node is the left value + 1		$rightId = $leftId + 1;		// Execute this function recursively over all children		foreach ($children as $node)		{			/*			 * $rightId is the current right value, which is incremented on recursion return.			 * Increment the level for the children.			 * Add this item's alias to the path (but avoid a leading /)			 */			$rightId = $this->rebuild($node->{$this->_tbl_key}, $rightId, $level + 1, $path . (empty($path) ? '' : '/') . $node->alias);			// If there is an update failure, return false to break out of the recursion.			if ($rightId === false)			{				return false;			}		}		// We've got the left value, and now that we've processed		// the children of this node we also know the right value.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('lft = ' . (int) $leftId)			->set('rgt = ' . (int) $rightId)			->set('level = ' . (int) $level)			->set('path = ' . $this->_db->quote($path))			->where($this->_tbl_key . ' = ' . (int) $parentId);		$this->_db->setQuery($query)->execute();		// Return the right value of this node + 1.		return $rightId + 1;	}	/**	 * Method to rebuild the node's path field from the alias values of the	 * nodes from the current node to the root node of the tree.	 *	 * @param   integer  $pk  Primary key of the node for which to get the path.	 *	 * @return  boolean  True on success.	 *	 * @link    http://docs.joomla.org/JTableNested/rebuildPath	 * @since   11.1	 */	public function rebuildPath($pk = null)	{		$fields = $this->getFields();		// If there is no alias or path field, just return true.		if (!array_key_exists('alias', $fields) || !array_key_exists('path', $fields))		{			return true;		}		$k = $this->_tbl_key;		$pk = (is_null($pk)) ? $this->$k : $pk;		// Get the aliases for the path from the node to the root node.		$query = $this->_db->getQuery(true)			->select('p.alias')			->from($this->_tbl . ' AS n, ' . $this->_tbl . ' AS p')			->where('n.lft BETWEEN p.lft AND p.rgt')			->where('n.' . $this->_tbl_key . ' = ' . (int) $pk)			->order('p.lft');		$this->_db->setQuery($query);		$segments = $this->_db->loadColumn();		// Make sure to remove the root path if it exists in the list.		if ($segments[0] == 'root')		{			array_shift($segments);		}		// Build the path.		$path = trim(implode('/', $segments), ' /\\');		// Update the path field for the node.		$query = $this->_db->getQuery(true)			->update($this->_tbl)			->set('path = ' . $this->_db->quote($path))			->where($this->_tbl_key . ' = ' . (int) $pk);		$this->_db->setQuery($query)->execute();		// Update the current record's path to the new one:		$this->path = $path;		return true;	}	/**	 * Method to update order of table rows	 *	 * @param   array  $idArray    id numbers of rows to be reordered.	 * @param   array  $lft_array  lft values of rows to be reordered.	 *	 * @return  integer  1 + value of root rgt on success, false on failure.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	public function saveorder($idArray = null, $lft_array = null)	{		try		{			$query = $this->_db->getQuery(true);			// Validate arguments			if (is_array($idArray) && is_array($lft_array) && count($idArray) == count($lft_array))			{				for ($i = 0, $count = count($idArray); $i < $count; $i++)				{					// Do an update to change the lft values in the table for each id					$query->clear()						->update($this->_tbl)						->where($this->_tbl_key . ' = ' . (int) $idArray[$i])						->set('lft = ' . (int) $lft_array[$i]);					$this->_db->setQuery($query)->execute();					// @codeCoverageIgnoreStart					if ($this->_debug)					{						$this->_logtable();					}					// @codeCoverageIgnoreEnd				}				return $this->rebuild();			}			else			{				return false;			}		}		catch (Exception $e)		{			$this->_unlock();			throw $e;		}	}	/**	 * Method to get nested set properties for a node in the tree.	 *	 * @param   integer  $id   Value to look up the node by.	 * @param   string   $key  An optional key to look up the node by (parent | left | right).	 *                         If omitted, the primary key of the table is used.	 *	 * @return  mixed    Boolean false on failure or node object on success.	 *	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	protected function _getNode($id, $key = null)	{		// Determine which key to get the node base on.		switch ($key)		{			case 'parent':				$k = 'parent_id';				break;			case 'left':				$k = 'lft';				break;			case 'right':				$k = 'rgt';				break;			default:				$k = $this->_tbl_key;				break;		}		// Get the node data.		$query = $this->_db->getQuery(true)			->select($this->_tbl_key . ', parent_id, level, lft, rgt')			->from($this->_tbl)			->where($k . ' = ' . (int) $id);		$row = $this->_db->setQuery($query, 0, 1)->loadObject();		// Check for no $row returned		if (empty($row))		{			$e = new UnexpectedValueException(sprintf('%s::_getNode(%d, %s) failed.', get_class($this), $id, $key));			$this->setError($e);			return false;		}		// Do some simple calculations.		$row->numChildren = (int) ($row->rgt - $row->lft - 1) / 2;		$row->width = (int) $row->rgt - $row->lft + 1;		return $row;	}	/**	 * Method to get various data necessary to make room in the tree at a location	 * for a node and its children.  The returned data object includes conditions	 * for SQL WHERE clauses for updating left and right id values to make room for	 * the node as well as the new left and right ids for the node.	 *	 * @param   object   $referenceNode  A node object with at least a 'lft' and 'rgt' with	 *                                   which to make room in the tree around for a new node.	 * @param   integer  $nodeWidth      The width of the node for which to make room in the tree.	 * @param   string   $position       The position relative to the reference node where the room	 * should be made.	 *	 * @return  mixed    Boolean false on failure or data object on success.	 *	 * @since   11.1	 */	protected function _getTreeRepositionData($referenceNode, $nodeWidth, $position = 'before')	{		// Make sure the reference an object with a left and right id.		if (!is_object($referenceNode) || !(isset($referenceNode->lft) && isset($referenceNode->rgt)))		{			return false;		}		// A valid node cannot have a width less than 2.		if ($nodeWidth < 2)		{			return false;		}		$k = $this->_tbl_key;		$data = new stdClass;		// Run the calculations and build the data object by reference position.		switch ($position)		{			case 'first-child':				$data->left_where = 'lft > ' . $referenceNode->lft;				$data->right_where = 'rgt >= ' . $referenceNode->lft;				$data->new_lft = $referenceNode->lft + 1;				$data->new_rgt = $referenceNode->lft + $nodeWidth;				$data->new_parent_id = $referenceNode->$k;				$data->new_level = $referenceNode->level + 1;				break;			case 'last-child':				$data->left_where = 'lft > ' . ($referenceNode->rgt);				$data->right_where = 'rgt >= ' . ($referenceNode->rgt);				$data->new_lft = $referenceNode->rgt;				$data->new_rgt = $referenceNode->rgt + $nodeWidth - 1;				$data->new_parent_id = $referenceNode->$k;				$data->new_level = $referenceNode->level + 1;				break;			case 'before':				$data->left_where = 'lft >= ' . $referenceNode->lft;				$data->right_where = 'rgt >= ' . $referenceNode->lft;				$data->new_lft = $referenceNode->lft;				$data->new_rgt = $referenceNode->lft + $nodeWidth - 1;				$data->new_parent_id = $referenceNode->parent_id;				$data->new_level = $referenceNode->level;				break;			default:			case 'after':				$data->left_where = 'lft > ' . $referenceNode->rgt;				$data->right_where = 'rgt > ' . $referenceNode->rgt;				$data->new_lft = $referenceNode->rgt + 1;				$data->new_rgt = $referenceNode->rgt + $nodeWidth;				$data->new_parent_id = $referenceNode->parent_id;				$data->new_level = $referenceNode->level;				break;		}		// @codeCoverageIgnoreStart		if ($this->_debug)		{			echo "\nRepositioning Data for $position" . "\n-----------------------------------" . "\nLeft Where:    $data->left_where"				. "\nRight Where:   $data->right_where" . "\nNew Lft:       $data->new_lft" . "\nNew Rgt:       $data->new_rgt"				. "\nNew Parent ID: $data->new_parent_id" . "\nNew Level:     $data->new_level" . "\n";		}		// @codeCoverageIgnoreEnd		return $data;	}	/**	 * Method to create a log table in the buffer optionally showing the query and/or data.	 *	 * @param   boolean  $showData   True to show data	 * @param   boolean  $showQuery  True to show query	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	protected function _logtable($showData = true, $showQuery = true)	{		$sep = "\n" . str_pad('', 40, '-');		$buffer = '';		if ($showQuery)		{			$buffer .= "\n" . $this->_db->getQuery() . $sep;		}		if ($showData)		{			$query = $this->_db->getQuery(true)				->select($this->_tbl_key . ', parent_id, lft, rgt, level')				->from($this->_tbl)				->order($this->_tbl_key);			$this->_db->setQuery($query);			$rows = $this->_db->loadRowList();			$buffer .= sprintf("\n| %4s | %4s | %4s | %4s |", $this->_tbl_key, 'par', 'lft', 'rgt');			$buffer .= $sep;			foreach ($rows as $row)			{				$buffer .= sprintf("\n| %4s | %4s | %4s | %4s |", $row[0], $row[1], $row[2], $row[3]);			}			$buffer .= $sep;		}		echo $buffer;	}	/**	 * Runs a query and unlocks the database on an error.	 *	 * @param   mixed   $query         A string or JDatabaseQuery object.	 * @param   string  $errorMessage  Unused.	 *	 * @return  boolean  void	 *	 * @note    Since 12.1 this method returns void and will rethrow the database exception.	 * @since   11.1	 * @throws  RuntimeException on database error.	 */	protected function _runQuery($query, $errorMessage)	{		// Prepare to catch an exception.		try		{			$this->_db->setQuery($query)->execute();			// @codeCoverageIgnoreStart			if ($this->_debug)			{				$this->_logtable();			}			// @codeCoverageIgnoreEnd		}		catch (Exception $e)		{			// Unlock the tables and rethrow.			$this->_unlock();			throw $e;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tags Model * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsModelTags extends JModelList{	/**	 * Constructor.	 *	 * @param    array    An optional associative array of configuration settings.	 * @see        JController	 * @since      3.0.3	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'published', 'a.published',				'access', 'a.access', 'access_level',				'language', 'a.language',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'created_time', 'a.created_time',				'created_user_id', 'a.created_user_id',				'lft', 'a.lft',				'rgt', 'a.rgt',				'level', 'a.level',				'path', 'a.path',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return    void	 * @since    3.1	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$context = $this->context;		$search = $this->getUserStateFromRequest($context . '.search', 'filter_search');		$this->setState('filter.search', $search);		$level = $this->getUserStateFromRequest($context . '.filter.level', 'filter_level', 0, 'int');		$this->setState('filter.level', $level);		$access = $this->getUserStateFromRequest($context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$published = $this->getUserStateFromRequest($context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		$language = $this->getUserStateFromRequest($context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_tags');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   3.1	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Method to create a query for a list of items.	 *	 * @return  string	 *	 * @since  3.1	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.note, a.published, a.access' .					', a.checked_out, a.checked_out_time, a.created_user_id' .					', a.path, a.parent_id, a.level, a.lft, a.rgt' .					', a.language'			)		);		$query->from('#__tags AS a')			->where('a.alias <> ' . $db->quote('root'));		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the users for the author.		$query->select('ua.name AS author_name')			->join('LEFT', '#__users AS ua ON ua.id = a.created_user_id')			->select('ug.title AS access_title')			->join('LEFT', '#__usergroups AS ug on ug.id = a.access');		// Filter on the level.		if ($level = $this->getState('filter.level'))		{			$query->where('a.level <= ' . (int) $level);		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'author:') === 0)			{				$search = $db->quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(ua.name LIKE ' . $search . ' OR ua.username LIKE ' . $search . ')');			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ' OR a.note LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Add the list ordering clause		$listOrdering = $this->getState('list.ordering', 'a.lft');		$listDirn = $db->escape($this->getState('list.direction', 'ASC'));		if ($listOrdering == 'a.access')		{			$query->order('a.access ' . $listDirn . ', a.lft ' . $listDirn);		}		else		{			$query->order($db->escape($listOrdering) . ' ' . $listDirn);		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method override to check-in a record or an array of record	 *	 * @param   mixed  $pks  The ID of the primary key or an array of IDs	 *	 * @return  mixed  Boolean false if there is an error, otherwise the count of records checked in.	 *	 * @since   12.2	 */	public function checkin($pks = array())	{		$pks = (array) $pks;		$table = $this->getTable();		$count = 0;		if (empty($pks))		{			$pks = array((int) $this->getState($this->getName() . '.id'));		}		// Check in all items.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				if ($table->checked_out > 0)				{					// Only attempt to check the row in if it exists.					if ($pk)					{						$user = JFactory::getUser();						// Get an instance of the row to checkin.						$table = $this->getTable();						if (!$table->load($pk))						{							$this->setError($table->getError());							return false;						}						// Check if this is the user having previously checked out the row.						if ($table->checked_out > 0 && $table->checked_out != $user->get('id') && !$user->authorise('core.admin', 'com_checkin'))						{							$this->setError(JText::_('JLIB_APPLICATION_ERROR_CHECKIN_USER_MISMATCH'));							return false;						}						// Attempt to check the row in.						if (!$table->checkin($pk))						{							$this->setError($table->getError());							return false;						}					}					$count++;				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return $count;	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   3.1	 */	public function getTable($type = 'Tag', $prefix = 'TagsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract Form Field class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */abstract class JFormField{	/**	 * The description text for the form field.  Usually used in tooltips.	 *	 * @var    string	 * @since  11.1	 */	protected $description;	/**	 * The SimpleXMLElement object of the <field /> XML element that describes the form field.	 *	 * @var    SimpleXMLElement	 * @since  11.1	 */	protected $element;	/**	 * The JForm object of the form attached to the form field.	 *	 * @var    JForm	 * @since  11.1	 */	protected $form;	/**	 * The form control prefix for field names from the JForm object attached to the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $formControl;	/**	 * The hidden state for the form field.	 *	 * @var    boolean	 * @since  11.1	 */	protected $hidden = false;	/**	 * True to translate the field label string.	 *	 * @var    boolean	 * @since  11.1	 */	protected $translateLabel = true;	/**	 * True to translate the field description string.	 *	 * @var    boolean	 * @since  11.1	 */	protected $translateDescription = true;	/**	 * The document id for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $id;	/**	 * The input for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $input;	/**	 * The label for the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $label;	/**	 * The multiple state for the form field.  If true then multiple values are allowed for the	 * field.  Most often used for list field types.	 *	 * @var    boolean	 * @since  11.1	 */	protected $multiple = false;	/**	 * The name of the form field.	 *	 * @var    string	 * @since  11.1	 */	protected $name;	/**	 * The name of the field.	 *	 * @var    string	 * @since  11.1	 */	protected $fieldname;	/**	 * The group of the field.	 *	 * @var    string	 * @since  11.1	 */	protected $group;	/**	 * The required state for the form field.  If true then there must be a value for the field to	 * be considered valid.	 *	 * @var    boolean	 * @since  11.1	 */	protected $required = false;	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type;	/**	 * The validation method for the form field.  This value will determine which method is used	 * to validate the value for a field.	 *	 * @var    string	 * @since  11.1	 */	protected $validate;	/**	 * The value of the form field.	 *	 * @var    mixed	 * @since  11.1	 */	protected $value;	/**	 * The label's CSS class of the form field	 *	 * @var    mixed	 * @since  11.1	 */	protected $labelClass;	/**	 * The count value for generated name field	 *	 * @var    integer	 * @since  11.1	 */	protected static $count = 0;	/**	 * The string used for generated fields names	 *	 * @var    integer	 * @since  11.1	 */	protected static $generated_fieldname = '__field';	/**	 * Method to instantiate the form field object.	 *	 * @param   JForm  $form  The form to attach to the form field object.	 *	 * @since   11.1	 */	public function __construct($form = null)	{		// If there is a form passed into the constructor set the form and form control properties.		if ($form instanceof JForm)		{			$this->form = $form;			$this->formControl = $form->getFormControl();		}		// Detect the field type if not set		if (!isset($this->type))		{			$parts = JStringNormalise::fromCamelCase(get_called_class(), true);			if ($parts[0] == 'J')			{				$this->type = JString::ucfirst($parts[count($parts) - 1], '_');			}			else			{				$this->type = JString::ucfirst($parts[0], '_') . JString::ucfirst($parts[count($parts) - 1], '_');			}		}	}	/**	 * Method to get certain otherwise inaccessible properties from the form field object.	 *	 * @param   string  $name  The property name for which to the the value.	 *	 * @return  mixed  The property value or null.	 *	 * @since   11.1	 */	public function __get($name)	{		switch ($name)		{			case 'description':			case 'formControl':			case 'hidden':			case 'id':			case 'multiple':			case 'name':			case 'required':			case 'type':			case 'validate':			case 'value':			case 'labelClass':			case 'fieldname':			case 'group':				return $this->$name;			case 'input':				// If the input hasn't yet been generated, generate it.				if (empty($this->input))				{					$this->input = $this->getInput();				}				return $this->input;			case 'label':				// If the label hasn't yet been generated, generate it.				if (empty($this->label))				{					$this->label = $this->getLabel();				}				return $this->label;			case 'title':				return $this->getTitle();		}		return null;	}	/**	 * Method to attach a JForm object to the field.	 *	 * @param   JForm  $form  The JForm object to attach to the form field.	 *	 * @return  JFormField  The form field object so that the method can be used in a chain.	 *	 * @since   11.1	 */	public function setForm(JForm $form)	{		$this->form = $form;		$this->formControl = $form->getFormControl();		return $this;	}	/**	 * Method to attach a JForm object to the field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function setup(SimpleXMLElement $element, $value, $group = null)	{		// Make sure there is a valid JFormField XML element.		if ((string) $element->getName() != 'field')		{			return false;		}		// Reset the input and label values.		$this->input = null;		$this->label = null;		// Set the XML element object.		$this->element = $element;		// Get some important attributes from the form field element.		$class = (string) $element['class'];		$id = (string) $element['id'];		$multiple = (string) $element['multiple'];		$name = (string) $element['name'];		$required = (string) $element['required'];		// Set the required and validation options.		$this->required = ($required == 'true' || $required == 'required' || $required == '1');		$this->validate = (string) $element['validate'];		// Add the required class if the field is required.		if ($this->required)		{			if ($class)			{				if (strpos($class, 'required') === false)				{					$this->element['class'] = $class . ' required';				}			}			else			{				$this->element['class'] = 'required';			}		}		// Set the multiple values option.		$this->multiple = ($multiple == 'true' || $multiple == 'multiple');		// Allow for field classes to force the multiple values option.		if (isset($this->forceMultiple))		{			$this->multiple = (bool) $this->forceMultiple;		}		// Set the field description text.		$this->description = (string) $element['description'];		// Set the visibility.		$this->hidden = ((string) $element['type'] == 'hidden' || (string) $element['hidden'] == 'true');		// Determine whether to translate the field label and/or description.		$this->translateLabel = !((string) $this->element['translate_label'] == 'false' || (string) $this->element['translate_label'] == '0');		$this->translateDescription = !((string) $this->element['translate_description'] == 'false'			|| (string) $this->element['translate_description'] == '0');		// Set the group of the field.		$this->group = $group;		// Set the field name and id.		$this->fieldname = $this->getFieldName($name);		$this->name = $this->getName($this->fieldname);		$this->id = $this->getId($id, $this->fieldname);		// Set the field default value.		$this->value = $value;		// Set the CSS class of field label		$this->labelClass = (string) $element['labelclass'];		return true;	}	/**	 * Method to get the id used for the field input tag.	 *	 * @param   string  $fieldId    The field element id.	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The id to be used for the field input tag.	 *	 * @since   11.1	 */	protected function getId($fieldId, $fieldName)	{		$id = '';		// If there is a form control set for the attached form add it first.		if ($this->formControl)		{			$id .= $this->formControl;		}		// If the field is in a group add the group control to the field id.		if ($this->group)		{			// If we already have an id segment add the group control as another level.			if ($id)			{				$id .= '_' . str_replace('.', '_', $this->group);			}			else			{				$id .= str_replace('.', '_', $this->group);			}		}		// If we already have an id segment add the field id/name as another level.		if ($id)		{			$id .= '_' . ($fieldId ? $fieldId : $fieldName);		}		else		{			$id .= ($fieldId ? $fieldId : $fieldName);		}		// Clean up any invalid characters.		$id = preg_replace('#\W#', '_', $id);		return $id;	}	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	abstract protected function getInput();	/**	 * Method to get the field title.	 *	 * @return  string  The field title.	 *	 * @since   11.1	 */	protected function getTitle()	{		$title = '';		if ($this->hidden)		{			return $title;		}		// Get the label text from the XML element, defaulting to the element name.		$title = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$title = $this->translateLabel ? JText::_($title) : $title;		return $title;	}	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   11.1	 */	protected function getLabel()	{		$label = '';		if ($this->hidden)		{			return $label;		}		// Get the label text from the XML element, defaulting to the element name.		$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$text = $this->translateLabel ? JText::_($text) : $text;		// Build the class for the label.		$class = !empty($this->description) ? 'hasTip' : '';		$class = $this->required == true ? $class . ' required' : $class;		$class = !empty($this->labelClass) ? $class . ' ' . $this->labelClass : $class;		// Add the opening label tag and main attributes attributes.		$label .= '<label id="' . $this->id . '-lbl" for="' . $this->id . '" class="' . $class . '"';		// If a description is specified, use it to build a tooltip.		if (!empty($this->description))		{			$label .= ' title="'				. htmlspecialchars(				trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),				ENT_COMPAT, 'UTF-8'			) . '"';		}		// Add the label text and closing tag.		if ($this->required)		{			$label .= '>' . $text . '<span class="star">&#160;*</span></label>';		}		else		{			$label .= '>' . $text . '</label>';		}		return $label;	}	/**	 * Method to get the name used for the field input tag.	 *	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The name to be used for the field input tag.	 *	 * @since   11.1	 */	protected function getName($fieldName)	{		$name = '';		// If there is a form control set for the attached form add it first.		if ($this->formControl)		{			$name .= $this->formControl;		}		// If the field is in a group add the group control to the field name.		if ($this->group)		{			// If we already have a name segment add the group control as another level.			$groups = explode('.', $this->group);			if ($name)			{				foreach ($groups as $group)				{					$name .= '[' . $group . ']';				}			}			else			{				$name .= array_shift($groups);				foreach ($groups as $group)				{					$name .= '[' . $group . ']';				}			}		}		// If we already have a name segment add the field name as another level.		if ($name)		{			$name .= '[' . $fieldName . ']';		}		else		{			$name .= $fieldName;		}		// If the field should support multiple values add the final array segment.		if ($this->multiple)		{			switch (strtolower((string) $this->element['type']))			{				case 'text':				case 'textarea':				case 'email':				case 'password':				case 'radio':				case 'calendar':				case 'editor':				case 'hidden':					break;				default:					$name .= '[]';			}		}		return $name;	}	/**	 * Method to get the field name used.	 *	 * @param   string  $fieldName  The field element name.	 *	 * @return  string  The field name	 *	 * @since   11.1	 */	protected function getFieldName($fieldName)	{		if ($fieldName)		{			return $fieldName;		}		else		{			self::$count = self::$count + 1;			return self::$generated_fieldname . self::$count;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'tag.cancel' || document.formvalidator.isValid(document.id('item-form'))) {			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_tags&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_TAGS_FIELDSET_DETAILS', true)); ?>					<fieldset class="adminform">						<div class="control-group form-inline">							<?php echo $this->form->getLabel('title'); ?> <?php echo $this->form->getInput('title'); ?> <?php echo $this->form->getLabel('catid'); ?> <?php echo $this->form->getInput('catid'); ?>						</div>						<?php echo $this->form->getInput('description'); ?>					</fieldset>						<div class="row-fluid">							<div class="span6">								<h4><?php echo JText::_('COM_TAGS_FIELDSET_URLS_AND_IMAGES');?></h4>								<div class="control-group">									<?php echo $this->form->getLabel('images'); ?>									<div class="controls">										<?php echo $this->form->getInput('images'); ?>									</div>								</div>								<?php foreach ($this->form->getGroup('images') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>											<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>						</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_TAGS_FIELDSET_PUBLISHING', true)); ?>							<div class="row-fluid">								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('alias'); ?>										</div>									</div>									<div class="control-group">										<div class="control-label">											<?php echo $this->form->getLabel('id'); ?>										</div>										<div class="controls">											<?php echo $this->form->getInput('id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_user_id'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_user_id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by_alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by_alias'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_time'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_time'); ?>										</div>									</div>								</div>								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('publish_up'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_up'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('publish_down'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_down'); ?>										</div>									</div>									<?php if ($this->item->modified_user_id) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('modified_user_id'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_user_id'); ?>											</div>										</div>										<div class="control-group">											<?php echo $this->form->getLabel('modified_time'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_time'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->version) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('version'); ?>											<div class="controls">												<?php echo $this->form->getInput('version'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->hits) : ?>										<div class="control-group">											<div class="control-label">												<?php echo $this->form->getLabel('hits'); ?>											</div>											<div class="controls">												<?php echo $this->form->getInput('hits'); ?>											</div>										</div>									<?php endif; ?>								</div>							</div>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>							<?php echo $this->loadTemplate('metadata'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>									</div>				<input type="hidden" name="task" value="" />				<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_feed * * @package     Joomla.Administrator * @subpackage  mod_feed * @since       1.5 */class ModFeedHelper{	/**	 * Method to load a feed.	 *	 * @param   JRegisty  $params  The parameters object.	 *	 * @return  JFeedReader|string  Return a JFeedReader object or a string message if error.	 */	static function getFeed($params)	{		// Module params		$rssurl = $params->get('rssurl', '');		// Get RSS parsed object		$cache_time = 0;		if ($params->get('cache'))		{			$cache_time = $params->get('cache_time', 15) * 60;		}		try		{			jimport('joomla.feed.factory');			$feed   = new JFeedFactory;			$rssDoc = $feed->getFeed($rssurl);		}		catch (InvalidArgumentException $e)		{			$msg = JText::_('MOD_NEWSFEEDS_ERRORS_FEED_NOT_RETRIEVED');		}		catch (RunTimeException $e)		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');		}		if (empty($rssDoc))		{			$msg = JText::_('MOD_FEED_ERR_FEED_NOT_RETRIEVED');			return $msg;		}		$lists = array();		if ($rssDoc)		{			return $rssDoc;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?phpif (is_string($feed)){	echo $feed;}else{	$lang      = JFactory::getLanguage();	$myrtl     = $params->get('rssrtl');	$direction = '';	if ($lang->isRTL() && $myrtl == 0)	{		$direction = " redirect-rtl";	}	elseif ($lang->isRTL() && $myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($lang->isRTL() && $myrtl == 2)	{		$direction = " redirect-rtl";	}	elseif ($myrtl == 0)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 1)	{		$direction = " redirect-ltr";	}	elseif ($myrtl == 2)	{		$direction = " redirect-rtl";	}	?>	<?php if ($feed != false) : ?>	<?php	// Image handling	$iUrl   = isset($feed->image) ? $feed->image : null;	$iTitle = isset($feed->imagetitle) ? $feed->imagetitle : null;	?>	<div class="row-striped">	<div style="direction: <?php echo $rssrtl ? 'rtl' : 'ltr'; ?>; text-align: <?php echo $rssrtl ? 'right' : 'left'; ?> ! important"  class="feed<?php echo $moduleclass_sfx; ?>">	<?php if (!is_null($feed->title) && $params->get('rsstitle', 1)) : ?>		<h2 class="redirect-ltr">			<a href="<?php echo str_replace('&', '&amp', $feed->link); ?>" target="_blank">				<?php echo $feed->title; ?></a>		</h2>	<?php endif; ?>	<?php if ($params->get('rssdesc', 1)) : ?>		<?php echo $feed->description; ?>	<?php endif; ?>	<?php if ($params->get('rssimage', 1) && $iUrl) : ?>		<img src="<?php echo $iUrl; ?>" alt="<?php echo @$iTitle; ?>"/>	<?php endif; ?>	<ul class="newsfeed<?php echo $params->get('moduleclass_sfx'); ?>">	<?php if (!empty($feed)) : ?>		<?php for ($i = 0; $i < $params->get('rssitems', 5); $i++) : ?>			<?php			$uri  = (!empty($feed[$i]->guid) || !is_null($feed[$i]->guid)) ? $feed[$i]->guid : $feed[$i]->uri;			$uri  = substr($uri, 0, 4) != 'http' ? $params->get('rsslink') : $uri;			$text = !empty($feed[$i]->content) || !is_null($feed[$i]->content) ? $feed[$i]->content : $feed[$i]->description;			?>			<li>				<?php if (!empty($uri)) : ?>					<h5 class="feed-link">						<a href="<?php echo $uri; ?>" target="_blank">							<?php  echo $feed[$i]->title; ?></a></h5>				<?php else : ?>					<h5 class="feed-link"><?php  echo $feed[$i]->title; ?></h5>				<?php  endif; ?>				<?php if ($params->get('rssitemdesc') && !empty($text)) : ?>					<div class="feed-item-description">						<?php						// Strip the images.						$text = JFilterOutput::stripImages($text);						$text = JHtml::_('string.truncate', $text, $params->get('word_count'));						echo str_replace('&apos;', "'", $text);						?>					</div>				<?php endif; ?>			</li>		<?php endfor; ?>	</ul>	<?php endif; ?>	<?php endif; ?>	</div>	</div><?php}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :			if (!isset($this->items[$this->parent->id][$id + 1]))			{				$class = ' class="last"';			}			?>			<div <?php echo $class; ?> >			<?php $class = ''; ?>				<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($item->id));?>">					<?php echo $this->escape($item->title); ?></a>					<?php if ($this->params->get('show_cat_items_cat') == 1) :?>						<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_NEWSFEEDS_NUM_ITEMS'); ?>">							<?php echo $item->numitems; ?>						</span>					<?php endif; ?>					<?php if (count($item->getChildren()) > 0) : ?>						<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>					<?php endif;?>				</h3>				<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>					<?php if ($item->description) : ?>						<div class="category-desc">					<?php echo JHtml::_('content.prepare', $item->description, '', 'com_newsfeeds.categories'); ?>							<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>						</div>					<?php endif; ?>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) :?>					<div class="collapse fade" id="category-<?php echo $item->id;?>">					<?php					$this->items[$item->id] = $item->getChildren();					$this->parent = $item;					$this->maxLevelcat--;					echo $this->loadTemplate('items');					$this->parent = $item->getParent();					$this->maxLevelcat++;					?>					</div>				<?php endif; ?>			</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Linkedin * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Linkedin API People class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Linkedin * @since       13.1 */class JLinkedinPeople extends JLinkedinObject{	/**	 * Method to get a member's profile.	 *	 * @param   string  $id        Member id of the profile you want.	 * @param   string  $url       The public profile URL.	 * @param   string  $fields    Request fields beyond the default ones.	 * @param   string  $type      Choosing public or standard profile.	 * @param   string  $language  A comma separated list of locales ordered from highest to lowest preference.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getProfile($id = null, $url = null, $fields = null, $type = 'standard', $language = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/';		$data['format'] = 'json';		// Check if a member id is specified.		if ($id)		{			$base .= 'id=' . $id;		}		elseif (!$url)		{			$base .= '~';		}		// Check if profile url is specified.		if ($url)		{			$base .= 'url=' . $this->oauth->safeEncode($url);			// Choose public profile			if (!strcmp($type, 'public'))			{				$base .= ':public';			}		}		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if language is specified.		$header = array();		if ($language)		{			$header = array('Accept-Language' => $language);		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data, $header);		return json_decode($response->body);	}	/**	 * Method to get a list of connections for a user who has granted access to his/her account.	 *	 * @param   string   $fields          Request fields beyond the default ones.	 * @param   integer  $start           Starting location within the result set for paginated returns.	 * @param   integer  $count           The number of results returned.	 * @param   string   $modified        Values are updated or new.	 * @param   string   $modified_since  Value as a Unix time stamp of milliseconds since epoch.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function getConnections($fields = null, $start = 0, $count = 500, $modified = null, $modified_since = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people/~/connections';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 500)		{			$data['count'] = $count;		}		// Check if modified is specified.		if ($modified)		{			$data['modified'] = $modified;		}		// Check if modified_since is specified.		if ($modified_since)		{			$data['modified-since'] = $modified_since;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		return json_decode($response->body);	}	/**	 * Method to get information about people.	 *	 * @param   string   $fields           Request fields beyond the default ones. provide 'api-standard-profile-request'	 * 									   field for out of network profiles.	 * @param   string   $keywords         Members who have all the keywords anywhere in their profile.	 * @param   string   $first_name       Members with a matching first name. Matches must be exact.	 * @param   string   $last_name        Members with a matching last name. Matches must be exactly.	 * @param   string   $company_name     Members who have a matching company name on their profile.	 * @param   boolean  $current_company  A value of true matches members who currently work at the company specified in the company-name	 * 									   parameter.	 * @param   string   $title            Matches members with that title on their profile.	 * @param   boolean  $current_title    A value of true matches members whose title is currently the one specified in the title-name parameter.	 * @param   string   $school_name      Members who have a matching school name on their profile.	 * @param   string   $current_school   A value of true matches members who currently attend the school specified in the school-name parameter.	 * @param   string   $country_code     Matches members with a location in a specific country. Values are defined in by ISO 3166 standard.	 * 									   Country codes must be in all lower case.	 * @param   integer  $postal_code      Matches members centered around a Postal Code. Must be combined with the country-code parameter.	 * 									   Not supported for all countries.	 * @param   integer  $distance         Matches members within a distance from a central point. This is measured in miles.	 * @param   string   $facets           Facet buckets to return, e.g. location.	 * @param   array    $facet            Array of facet values to search over. Contains values for location, industry, network, language,	 * 									   current-company, past-company and school, in exactly this order, null must be specified for an element if no value.	 * @param   integer  $start            Starting location within the result set for paginated returns.	 * @param   integer  $count            The number of results returned.	 * @param   string   $sort             Controls the search result order. There are four options: connections, recommenders,	 * 									   distance and relevance.	 *	 * @return  array  The decoded JSON response	 *	 * @since   13.1	 */	public function search($fields = null, $keywords = null, $first_name = null, $last_name = null, $company_name = null,		$current_company = null, $title = null, $current_title = null, $school_name = null, $current_school = null, $country_code = null,		$postal_code = null, $distance = null, $facets = null, $facet = null, $start = 0, $count = 10, $sort = null)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(			'oauth_token' => $token['key']		);		// Set the API base		$base = '/v1/people-search';		$data['format'] = 'json';		// Check if fields is specified.		if ($fields)		{			$base .= ':' . $fields;		}		// Check if keywords is specified.		if ($keywords)		{			$data['keywords'] = $keywords;		}		// Check if first_name is specified.		if ($first_name)		{			$data['first-name'] = $first_name;		}		// Check if last_name is specified.		if ($last_name)		{			$data['last-name'] = $last_name;		}		// Check if company-name is specified.		if ($company_name)		{			$data['company-name'] = $company_name;		}		// Check if current_company is specified.		if ($current_company)		{			$data['current-company'] = $current_company;		}		// Check if title is specified.		if ($title)		{			$data['title'] = $title;		}		// Check if current_title is specified.		if ($current_title)		{			$data['current-title'] = $current_title;		}		// Check if school_name is specified.		if ($school_name)		{			$data['school-name'] = $school_name;		}		// Check if current_school is specified.		if ($current_school)		{			$data['current-school'] = $current_school;		}		// Check if country_code is specified.		if ($country_code)		{			$data['country-code'] = $country_code;		}		// Check if postal_code is specified.		if ($postal_code)		{			$data['postal-code'] = $postal_code;		}		// Check if distance is specified.		if ($distance)		{			$data['distance'] = $distance;		}		// Check if facets is specified.		if ($facets)		{			$data['facets'] = $facets;		}		// Check if facet is specified.		if ($facet)		{			$data['facet'] = array();			for ($i = 0; $i < count($facet); $i++)			{				if ($facet[$i])				{					if ($i == 0)					{						$data['facet'][] = 'location,' . $facet[$i];					}					if ($i == 1)					{						$data['facet'][] = 'industry,' . $facet[$i];					}					if ($i == 2)					{						$data['facet'][] = 'network,' . $facet[$i];					}					if ($i == 3)					{						$data['facet'][] = 'language,' . $facet[$i];					}					if ($i == 4)					{						$data['facet'][] = 'current-company,' . $facet[$i];					}					if ($i == 5)					{						$data['facet'][] = 'past-company,' . $facet[$i];					}					if ($i == 6)					{						$data['facet'][] = 'school,' . $facet[$i];					}				}			}		}		// Check if start is specified.		if ($start > 0)		{			$data['start'] = $start;		}		// Check if count is specified.		if ($count != 10)		{			$data['count'] = $count;		}		// Check if sort is specified.		if ($sort)		{			$data['sort'] = $sort;		}		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'GET', $parameters, $data);		if (strpos($fields, 'api-standard-profile-request') === false)		{			return json_decode($response->body);		}		// Get header name.		$name = explode('"name": "', $response->body);		$name = explode('"', $name[1]);		$name = $name[0];		// Get header value.		$value = explode('"value": "', $response->body);		$value = explode('"', $value[1]);		$value = $value[0];		// Get request url.		$url = explode('"url": "', $response->body);		$url = explode('"', $url[1]);		$url = $url[0];		// Build header for out of network profile.		$header[$name] = $value;		// Send the request.		$response = $this->oauth->oauthRequest($url, 'GET', $parameters, $data, $header);		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_SEO_SETTINGS'); ?></legend>	<?php	foreach ($this->form->getFieldset('seo') as $field):	?>		<div class="control-group">			<div class="control-label"><?php echo $field->label; ?></div>			<div class="controls"><?php echo $field->input; ?></div>		</div>	<?php	endforeach;	?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides a hidden field * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.hidden.html#input.hidden * @since       11.1 */class JFormFieldHidden extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Hidden';	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="' . (string) $this->element['class'] . '"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="hidden" name="' . $this->name . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $class . $disabled . $onchange . ' />';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banner model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelBanner extends JModelAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_BANNERS_BANNER';	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array   $commands   An array of commands to perform.	 * @param   array   $pks        An array of item ids.	 * @param   array   $contexts   An array of item contexts.	 *	 * @return  boolean   Returns true on success, false on failure.	 *	 * @since	2.5	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize user ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['category_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['category_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['category_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (strlen($commands['client_id']) > 0)		{			if (!$this->batchClient($commands['client_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch client changes for a group of banners.	 *	 * @param   string  $value     The new value matching a client.	 * @param   array   $pks       An array of row IDs.	 * @param   array   $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   2.5	 */	protected function batchClient($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->cid = (int) $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since	2.5	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$user = JFactory::getUser();		if (!$user->authorise('core.create', 'com_banners.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->name);			$table->name = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			//$table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i]	= $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 *	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->state != -2)			{				return;			}			$user = JFactory::getUser();			if (!empty($record->catid))			{				return $user->authorise('core.delete', 'com_banners.category.' . (int) $record->catid);			}			else			{				return parent::canDelete($record);			}		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 *	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		// Check against the category.		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_banners.category.' . (int) $record->catid);		}		// Default to component settings if category not known.		else		{			return parent::canEditState($record);		}	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   1.6	 */	public function getTable($type = 'Banner', $prefix = 'BannersTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array    $data      Data for the form. [optional]	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not. [optional]	 *	 * @return  mixed  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.banner', 'banner', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Determine correct permissions to check.		if ($this->getState('banner.id'))		{			// Existing record. Can only edit in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit');		}		else		{			// New record. Can only create in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.create');		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			$form->setFieldAttribute('state', 'disabled', 'true');			$form->setFieldAttribute('sticky', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');			$form->setFieldAttribute('state', 'filter', 'unset');			$form->setFieldAttribute('sticky', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$app  = JFactory::getApplication();		$data = $app->getUserState('com_banners.edit.banner.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('banner.id') == 0)			{				$data->set('catid', $app->input->getInt('catid', $app->getUserState('com_banners.banners.filter.category_id')));			}		}		$this->preprocessData('com_banners.banner', $data);		return $data;	}	/**	 * Method to stick records.	 *	 * @param   array    &$pks   The ids of the items to publish.	 * @param   integer  $value  The value of the published state	 *	 * @return  boolean  True on success.	 *	 * @since   1.6	 */	public function stick(&$pks, $value = 1)	{		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Access checks.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					JError::raiseWarning(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));				}			}		}		// Attempt to change the state of the records.		if (!$table->stick($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		return true;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   JTable  $table  A record object.	 *	 * @return  array  An array of conditions to add to add to ordering queries.	 *	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = '. (int) $table->catid;		$condition[] = 'state >= 0';		return $condition;	}	/**	 * @since  3.0	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		if (empty($table->id))		{			// Set the values			$table->created	= $date->toSql();			// Set ordering to the last item if not set			if (empty($table->ordering))			{				$db = JFactory::getDbo();				$db->setQuery('SELECT MAX(ordering) FROM #__banners');				$max = $db->loadResult();				$table->ordering = $max + 1;			}		}		else		{			// Set the values			$table->modified	= $date->toSql();			$table->modified_by	= $user->get('id');		}		// Increment the content version number.		$table->version++;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$app = JFactory::getApplication();		// Alter the name for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($name, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['name']);			$data['name']	= $name;			$data['alias']	= $alias;			$data['state']	= 0;		}		if (parent::save($data))		{			return true;		}		return false;	}}
