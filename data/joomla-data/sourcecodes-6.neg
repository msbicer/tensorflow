<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');JHtml::_('behavior.multiselect');JHtml::_('formbehavior.chosen', 'select');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canDo		= SearchHelper::getActions();?><form action="<?php echo JRoute::_('index.php?option=com_search&view=searches'); ?>" method="post" name="adminForm" id="adminForm">	<div id="filter-bar" class="btn-toolbar">		<div class="filter-search btn-group pull-left">			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('COM_SEARCH_SEARCH_IN_PHRASE'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_SEARCH_SEARCH_IN_PHRASE'); ?>" />		</div>		<div class="filter-search btn-group pull-left">			<button class="btn hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>			<button class="btn hasTooltip" type="button" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();"><i class="icon-remove"></i></button>		</div>		<div class="btn-group pull-right hidden-phone">			<label for="limit" class="element-invisible"><?php echo JText::_('JFIELD_PLG_SEARCH_SEARCHLIMIT_DESC');?></label>			<?php echo $this->pagination->getLimitBox(); ?>		</div>		<div class="filter-select btn-group pull-left">			<span class="adminlist-searchstatus">			<?php if ($this->state->get('filter.results')) : ?>				<a class="btn" href="<?php echo JRoute::_('index.php?option=com_search&filter_results=0');?>">					<i class="icon-zoom-out"></i> <?php echo JText::_('COM_SEARCH_HIDE_SEARCH_RESULTS'); ?></a>			<?php else : ?>				<a class="btn" href="<?php echo JRoute::_('index.php?option=com_search&filter_results=1');?>">					<i class="icon-zoom-in"></i> <?php echo JText::_('COM_SEARCH_SHOW_SEARCH_RESULTS'); ?></a>			<?php endif; ?>			</span>		</div>	</div>	<div class="clearfix"> </div>	<?php if ($this->enabled) : ?>	<div class="alert alert-info">		<a class="close" data-dismiss="alert"></a>		<span class="enabled"><?php echo JText::_('COM_SEARCH_LOGGING_ENABLED'); ?></span>	</div>	<?php else : ?>	<div class="alert alert-error">		<a class="close" data-dismiss="alert"></a>		<span class="disabled"><?php echo JText::_('COM_SEARCH_LOGGING_DISABLED'); ?></span>	</div>	<?php endif; ?>	<table class="table table-striped">		<thead>			<tr>				<th width="20">					<?php echo JText::_('JGRID_HEADING_ROW_NUMBER'); ?>				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'COM_SEARCH_HEADING_PHRASE', 'a.search_term', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="center">					<?php echo JText::_('COM_SEARCH_HEADING_RESULTS'); ?>				</th>				<th width="30%">					&#160;				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="11">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">					<td class="right">						<?php echo $i + 1 + $this->pagination->limitstart; ?>					</td>					<td>						<?php echo $this->escape($item->search_term); ?>					</td>					<td class="center">						<?php echo (int) $item->hits; ?>					</td>					<td class="center">					<?php if ($this->state->get('filter.results')) : ?>						<?php echo (int) $item->returns; ?>					<?php else: ?>						<?php echo JText::_('COM_SEARCH_NO_RESULTS'); ?>					<?php endif; ?>					</td>					<td>						&#160;					</td>				</tr>			<?php endforeach; ?>			</tbody>		</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'category.cancel' || document.formvalidator.isValid(document.id('item-form')))		{			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_categories&extension=' . $input->getCmd('extension', 'com_content') . '&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_CATEGORIES_FIELDSET_DETAILS', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('title'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('title'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('alias'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('alias'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('description'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('description'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('extension'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('extension'); ?>						</div>					</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_CATEGORIES_FIELDSET_PUBLISHING', true)); ?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('id'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('hits'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('hits'); ?>						</div>					</div>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('created_user_id'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('created_user_id'); ?>						</div>					</div>					<?php if (intval($this->item->created_time)) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('created_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('created_time'); ?>							</div>						</div>					<?php endif; ?>					<?php if ($this->item->modified_user_id) : ?>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_user_id'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_user_id'); ?>							</div>						</div>						<div class="control-group">							<div class="control-label">								<?php echo $this->form->getLabel('modified_time'); ?>							</div>							<div class="controls">								<?php echo $this->form->getInput('modified_time'); ?>							</div>						</div>					<?php endif; ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'options', JText::_('CATEGORIES_FIELDSET_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('options'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>					<fieldset>						<?php echo $this->loadTemplate('metadata'); ?>					</fieldset>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo $this->loadTemplate('extrafields'); ?>				<?php if ($this->assoc) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>						<fieldset>							<?php echo $this->loadTemplate('associations'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>				<?php if ($this->canDo->get('core.admin')) : ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'rules', JText::_('COM_CATEGORIES_FIELDSET_RULES', true)); ?>						<fieldset>							<?php echo $this->form->getInput('rules'); ?>						</fieldset>					<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php endif; ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>			<input type="hidden" name="task" value="" />			<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>				<div class="control-group">					<?php foreach ($this->form->getFieldset('jmetadata') as $field) : ?>						<?php if ($field->name == 'jform[metadata][tags][]') :?>						<div class="control-group">							<div class="control-label"><?php echo $field->label; ?></div>							<div class="controls"><?php echo $field->input; ?></div>						</div>						<?php endif; ?>					<?php endforeach; ?>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Set the available masks for the routing mode */const JROUTER_MODE_RAW = 0;const JROUTER_MODE_SEF = 1;/** * Class to create and parse routes * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 */class JRouter{	/**	 * The rewrite mode	 *	 * @var    integer	 * @since  11.1	 */	protected $mode = null;	/**	 * The rewrite mode	 *	 * @var    integer	 * @since  11.1	 * @deprecated use $mode declare as private	 */	protected $_mode = null;	/**	 * An array of variables	 *	 * @var     array	 * @since   11.1	 */	protected $vars = array();	/**	 * An array of variables	 *	 * @var     array	 * @since   11.1	 * @deprecated use $vars declare as private	 */	protected $_vars = array();	/**	 * An array of rules	 *	 * @var    array	 * @since  11.1	 */	protected $rules = array(		'build' => array(),		'parse' => array()	);	/**	 * An array of rules	 *	 * @var    array	 * @since  11.1	 * @deprecated use $rules declare as private	 */	protected $_rules = array(		'build' => array(),		'parse' => array()	);	/**	 * @var    array  JRouter instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor	 *	 * @param   array  $options  Array of options	 *	 * @since 11.1	 */	public function __construct($options = array())	{		if (array_key_exists('mode', $options))		{			$this->_mode = $options['mode'];		}		else		{			$this->_mode = JROUTER_MODE_RAW;		}	}	/**	 * Returns the global JRouter object, only creating it if it	 * doesn't already exist.	 *	 * @param   string  $client   The name of the client	 * @param   array   $options  An associative array of options	 *	 * @return  JRouter A JRouter object.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($client, $options = array())	{		if (empty(self::$instances[$client]))		{			// Create a JRouter object			$classname = 'JRouter' . ucfirst($client);			if (!class_exists($classname))			{				JLog::add('Non-autoloadable JRouter subclasses are deprecated.', JLog::WARNING, 'deprecated');				// Load the router object				$info = JApplicationHelper::getClientInfo($client, true);				if (is_object($info))				{					$path = $info->path . '/includes/router.php';					if (file_exists($path))					{						include_once $path;					}				}			}			if (class_exists($classname))			{				self::$instances[$client] = new $classname($options);			}			else			{				throw new RuntimeException(JText::sprintf('JLIB_APPLICATION_ERROR_ROUTER_LOAD', $client), 500);			}		}		return self::$instances[$client];	}	/**	 * Function to convert a route to an internal URI	 *	 * @param   JURI  $uri  The uri.	 *	 * @return  array	 *	 * @since   11.1	 */	public function parse($uri)	{		$vars = array();		// Process the parsed variables based on custom defined rules		$vars = $this->_processParseRules($uri);		// Parse RAW URL		if ($this->_mode == JROUTER_MODE_RAW)		{			$vars += $this->_parseRawRoute($uri);		}		// Parse SEF URL		if ($this->_mode == JROUTER_MODE_SEF)		{			$vars += $this->_parseSefRoute($uri);		}		return array_merge($this->getVars(), $vars);	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   11.1	 */	public function build($url)	{		// Create the URI object		$uri = $this->_createURI($url);		// Process the uri information based on custom defined rules		$this->_processBuildRules($uri);		// Build RAW URL		if ($this->_mode == JROUTER_MODE_RAW)		{			$this->_buildRawRoute($uri);		}		// Build SEF URL : mysite/route/index.php?var=x		if ($this->_mode == JROUTER_MODE_SEF)		{			$this->_buildSefRoute($uri);		}		return $uri;	}	/**	 * Get the router mode	 *	 * @return  integer	 *	 * @since   11.1	 */	public function getMode()	{		return $this->_mode;	}	/**	 * Set the router mode	 *	 * @param   integer  $mode  The routing mode.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setMode($mode)	{		$this->_mode = $mode;	}	/**	 * Set a router variable, creating it if it doesn't exist	 *	 * @param   string   $key     The name of the variable	 * @param   mixed    $value   The value of the variable	 * @param   boolean  $create  If True, the variable will be created if it doesn't exist yet	 *	 * @return  void	 *	 * @since   11.1	 */	public function setVar($key, $value, $create = true)	{		if ($create || array_key_exists($key, $this->_vars))		{			$this->_vars[$key] = $value;		}	}	/**	 * Set the router variable array	 *	 * @param   array    $vars   An associative array with variables	 * @param   boolean  $merge  If True, the array will be merged instead of overwritten	 *	 * @return  void	 *	 * @since   11.1	 */	public function setVars($vars = array(), $merge = true)	{		if ($merge)		{			$this->_vars = array_merge($this->_vars, $vars);		}		else		{			$this->_vars = $vars;		}	}	/**	 * Get a router variable	 *	 * @param   string  $key  The name of the variable	 *	 * @return  mixed  Value of the variable	 *	 * @since   11.1	 */	public function getVar($key)	{		$result = null;		if (isset($this->_vars[$key]))		{			$result = $this->_vars[$key];		}		return $result;	}	/**	 * Get the router variable array	 *	 * @return  array  An associative array of router variables	 *	 * @since   11.1	 */	public function getVars()	{		return $this->_vars;	}	/**	 * Attach a build rule	 *	 * @param   callback  $callback  The function to be called	 *	 * @return  void	 *	 * @since   11.1.	 */	public function attachBuildRule($callback)	{		$this->_rules['build'][] = $callback;	}	/**	 * Attach a parse rule	 *	 * @param   callback  $callback  The function to be called.	 *	 * @return  void	 *	 * @since   11.1	 */	public function attachParseRule($callback)	{		$this->_rules['parse'][] = $callback;	}	/**	 * Function to convert a raw route to an internal URI	 *	 * @param   JURI  $uri  The raw route	 *	 * @return  boolean	 *	 * @since   11.1	 */	protected function _parseRawRoute($uri)	{		return false;	}	/**	 * Function to convert a sef route to an internal URI	 *	 * @param   JURI  $uri  The sef URI	 *	 * @return  string  Internal URI	 *	 * @since   11.1	 */	protected function _parseSefRoute($uri)	{		return false;	}	/**	 * Function to build a raw route	 *	 * @param   JURI  $uri  The internal URL	 *	 * @return  string  Raw Route	 *	 * @since   11.1	 */	protected function _buildRawRoute($uri)	{	}	/**	 * Function to build a sef route	 *	 * @param   JURI  $uri  The uri	 *	 * @return  string  The SEF route	 *	 * @since   11.1	 */	protected function _buildSefRoute($uri)	{	}	/**	 * Process the parsed router variables based on custom defined rules	 *	 * @param   JURI  $uri  The URI to parse	 *	 * @return  array  The array of processed URI variables	 *	 * @since   11.1	 */	protected function _processParseRules($uri)	{		$vars = array();		foreach ($this->_rules['parse'] as $rule)		{			$vars += call_user_func_array($rule, array(&$this, &$uri));		}		return $vars;	}	/**	 * Process the build uri query data based on custom defined rules	 *	 * @param   JURI  $uri  The URI	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _processBuildRules($uri)	{		foreach ($this->_rules['build'] as $rule)		{			call_user_func_array($rule, array(&$this, &$uri));		}	}	/**	 * Create a uri based on a full or partial url string	 *	 * @param   string  $url  The URI	 *	 * @return  JURI	 *	 * @since   11.1	 */	protected function _createURI($url)	{		// Create full URL if we are only appending variables to it		if (substr($url, 0, 1) == '&')		{			$vars = array();			if (strpos($url, '&amp;') !== false)			{				$url = str_replace('&amp;', '&', $url);			}			parse_str($url, $vars);			$vars = array_merge($this->getVars(), $vars);			foreach ($vars as $key => $var)			{				if ($var == "")				{					unset($vars[$key]);				}			}			$url = 'index.php?' . JURI::buildQuery($vars);		}		// Decompose link into url component parts		return new JURI($url);	}	/**	 * Encode route segments	 *	 * @param   array  $segments  An array of route segments	 *	 * @return  array  Array of encoded route segments	 *	 * @since   11.1	 */	protected function _encodeSegments($segments)	{		$total = count($segments);		for ($i = 0; $i < $total; $i++)		{			$segments[$i] = str_replace(':', '-', $segments[$i]);		}		return $segments;	}	/**	 * Decode route segments	 *	 * @param   array  $segments  An array of route segments	 *	 * @return  array  Array of decoded route segments	 *	 * @since 11.1	 */	protected function _decodeSegments($segments)	{		$total = count($segments);		for ($i = 0; $i < $total; $i++)		{			$segments[$i] = preg_replace('/-/', ':', $segments[$i], 1);		}		return $segments;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Manage Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerControllerManage extends JControllerLegacy{	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unpublish', 'publish');		$this->registerTask('publish',   'publish');	}	/**	 * Enable/Disable an extension (if supported).	 *	 * @return  void	 *	 * @since   1.6	 */	public function publish()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('publish' => 1, 'unpublish' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_INSTALLER_ERROR_NO_EXTENSIONS_SELECTED'));		}		else		{			// Get the model.			$model	= $this->getModel('manage');			// Change the state of the records.			if (!$model->publish($ids, $value))			{				JError::raiseWarning(500, implode('<br />', $model->getErrors()));			}			else			{				if ($value == 1)				{					$ntext = 'COM_INSTALLER_N_EXTENSIONS_PUBLISHED';				}				elseif ($value == 0)				{					$ntext = 'COM_INSTALLER_N_EXTENSIONS_UNPUBLISHED';				}				$this->setMessage(JText::plural($ntext, count($ids)));			}		}		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}	/**	 * Remove an extension (Uninstall).	 *	 * @return  void	 *	 * @since   1.5	 */	public function remove()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$eid   = $this->input->get('cid', array(), 'array');		$model = $this->getModel('manage');		JArrayHelper::toInteger($eid, array());		$result = $model->remove($eid);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}	/**	 * Refreshes the cached metadata about an extension.	 *	 * Useful for debugging and testing purposes when the XML file might change.	 *	 * @return  void	 *	 * @since   1.6	 */	public function refresh()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$uid   = $this->input->get('cid', array(), 'array');		$model = $this->getModel('manage');		JArrayHelper::toInteger($uid, array());		$result = $model->refresh($uid);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=manage', false));	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class for categories * * @package     Joomla.Libraries * @subpackage  HTML * @since       1.5 */abstract class JHtmlCategory{	/**	 * Cached array of the category items.	 *	 * @var    array	 * @since  1.5	 */	protected static $items = array();	/**	 * Returns an array of categories for the given extension.	 *	 * @param   string  $extension  The extension option e.g. com_something.	 * @param   array   $config     An array of configuration options. By default, only	 *                              published and unpublished categories are returned.	 *	 * @return  array	 *	 * @since   1.5	 */	public static function options($extension, $config = array('filter.published' => array(0, 1)))	{		$hash = md5($extension . '.' . serialize($config));		if (!isset(self::$items[$hash]))		{			$config = (array) $config;			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id, a.title, a.level')				->from('#__categories AS a')				->where('a.parent_id > 0');			// Filter on extension.			$query->where('extension = ' . $db->quote($extension));			// Filter on the published state			if (isset($config['filter.published']))			{				if (is_numeric($config['filter.published']))				{					$query->where('a.published = ' . (int) $config['filter.published']);				}				elseif (is_array($config['filter.published']))				{					JArrayHelper::toInteger($config['filter.published']);					$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');				}			}			// Filter on the language			if (isset($config['filter.language']))			{				if (is_string($config['filter.language']))				{					$query->where('a.language = ' . $db->quote($config['filter.language']));				}				elseif (is_array($config['filter.language']))				{					foreach ($config['filter.language'] as &$language)					{						$language = $db->quote($language);					}					$query->where('a.language IN (' . implode(',', $config['filter.language']) . ')');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Assemble the list options.			self::$items[$hash] = array();			foreach ($items as &$item)			{				$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;				$item->title = str_repeat('- ', $repeat) . $item->title;				self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);			}		}		return self::$items[$hash];	}	/**	 * Returns an array of categories for the given extension.	 *	 * @param   string  $extension  The extension option.	 * @param   array   $config     An array of configuration options. By default, only published and unpublished categories are returned.	 *	 * @return  array   Categories for the extension	 *	 * @since   1.6	 */	public static function categories($extension, $config = array('filter.published' => array(0, 1)))	{		$hash = md5($extension . '.' . serialize($config));		if (!isset(self::$items[$hash]))		{			$config = (array) $config;			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id, a.title, a.level, a.parent_id')				->from('#__categories AS a')				->where('a.parent_id > 0');			// Filter on extension.			$query->where('extension = ' . $db->quote($extension));			// Filter on the published state			if (isset($config['filter.published']))			{				if (is_numeric($config['filter.published']))				{					$query->where('a.published = ' . (int) $config['filter.published']);				}				elseif (is_array($config['filter.published']))				{					JArrayHelper::toInteger($config['filter.published']);					$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Assemble the list options.			self::$items[$hash] = array();			foreach ($items as &$item)			{				$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;				$item->title = str_repeat('- ', $repeat) . $item->title;				self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);			}			// Special "Add to root" option:			self::$items[$hash][] = JHtml::_('select.option', '1', JText::_('JLIB_HTML_ADD_TO_ROOT'));		}		return self::$items[$hash];	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.response');/** * Base class for a Joomla! application. * * Acts as a Factory class for application specific objects and provides many * supporting API functions. Derived clases should supply the route(), dispatch() * and render() functions. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 */class JApplication extends JApplicationBase{	/**	 * The client identifier.	 *	 * @var    integer	 * @since  11.1	 */	protected $_clientId = null;	/**	 * The application message queue.	 *	 * @var    array	 * @since  11.1	 */	protected $_messageQueue = array();	/**	 * The name of the application.	 *	 * @var    array	 * @since  11.1	 */	protected $_name = null;	/**	 * The scope of the application.	 *	 * @var    string	 * @since  11.1	 */	public $scope = null;	/**	 * The time the request was made.	 *	 * @var    date	 * @since  11.1	 */	public $requestTime = null;	/**	 * The time the request was made as Unix timestamp.	 *	 * @var    integer	 * @since  11.1	 */	public $startTime = null;	/**	 * @var    JApplicationWebClient  The application client object.	 * @since  12.2	 */	public $client;	/**	 * @var    array  JApplication instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor.	 *	 * @param   array  $config  A configuration array including optional elements such as session	 * session_name, clientId and others. This is not exhaustive.	 *	 * @since   11.1	 */	public function __construct($config = array())	{		// Set the view name.		$this->_name = $this->getName();		// Only set the clientId if available.		if (isset($config['clientId']))		{			$this->_clientId = $config['clientId'];		}		// Enable sessions by default.		if (!isset($config['session']))		{			$config['session'] = true;		}		// Create the input object		$this->input = new JInput;		$this->client = new JApplicationWebClient;		$this->loadDispatcher();		// Set the session default name.		if (!isset($config['session_name']))		{			$config['session_name'] = $this->_name;		}		// Set the default configuration file.		if (!isset($config['config_file']))		{			$config['config_file'] = 'configuration.php';		}		// Create the configuration object.		if (file_exists(JPATH_CONFIGURATION . '/' . $config['config_file']))		{			$this->_createConfiguration(JPATH_CONFIGURATION . '/' . $config['config_file']);		}		// Create the session if a session name is passed.		if ($config['session'] !== false)		{			$this->_createSession(self::getHash($config['session_name']));		}		$this->requestTime = gmdate('Y-m-d H:i');		// Used by task system to ensure that the system doesn't go over time.		$this->startTime = JProfiler::getmicrotime();	}	/**	 * Returns the global JApplication object, only creating it if it	 * doesn't already exist.	 *	 * @param   mixed   $client  A client identifier or name.	 * @param   array   $config  An optional associative array of configuration settings.	 * @param   string  $prefix  A prefix for class names	 *	 * @return  JApplication A JApplication object.	 *	 * @since   11.1	 */	public static function getInstance($client, $config = array(), $prefix = 'J')	{		if (empty(self::$instances[$client]))		{			// Load the router object.			$info = JApplicationHelper::getClientInfo($client, true);			$path = $info->path . '/includes/application.php';			if (file_exists($path))			{				include_once $path;				// Create a JApplication object.				$classname = $prefix . ucfirst($client);				$instance = new $classname($config);			}			else			{				$error = JError::raiseError(500, JText::sprintf('JLIB_APPLICATION_ERROR_APPLICATION_LOAD', $client));				return $error;			}			self::$instances[$client] = $instance;		}		return self::$instances[$client];	}	/**	 * Initialise the application.	 *	 * @param   array  $options  An optional associative array of configuration settings.	 *	 * @return  void	 *	 * @since   11.1	 */	public function initialise($options = array())	{		// Set the language in the class.		$config = JFactory::getConfig();		// Check that we were given a language in the array (since by default may be blank).		if (isset($options['language']))		{			$config->set('language', $options['language']);		}		// Set user specific editor.		$user = JFactory::getUser();		$editor = $user->getParam('editor', $this->getCfg('editor'));		if (!JPluginHelper::isEnabled('editors', $editor))		{			$editor = $this->getCfg('editor');			if (!JPluginHelper::isEnabled('editors', $editor))			{				$editor = 'none';			}		}		$config->set('editor', $editor);		// Trigger the onAfterInitialise event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterInitialise');	}	/**	 * Route the application.	 *	 * Routing is the process of examining the request environment to determine which	 * component should receive the request. The component optional parameters	 * are then set in the request object to be processed when the application is being	 * dispatched.	 *	 * @return  void	 *	 * @since   11.1	 */	public function route()	{		// Get the full request URI.		$uri = clone JURI::getInstance();		$router = $this->getRouter();		$result = $router->parse($uri);		foreach ($result as $key => $value)		{			$this->input->def($key, $value);		}		// Trigger the onAfterRoute event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterRoute');	}	/**	 * Dispatch the application.	 *	 * Dispatching is the process of pulling the option from the request object and	 * mapping them to a component. If the component does not exist, it handles	 * determining a default component to dispatch.	 *	 * @param   string  $component  The component to dispatch.	 *	 * @return  void	 *	 * @since   11.1	 */	public function dispatch($component = null)	{		$document = JFactory::getDocument();		$contents = JComponentHelper::renderComponent($component);		$document->setBuffer($contents, 'component');		// Trigger the onAfterDispatch event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onAfterDispatch');	}	/**	 * Render the application.	 *	 * Rendering is the process of pushing the document buffers into the template	 * placeholders, retrieving data from the document and pushing it into	 * the JResponse buffer.	 *	 * @return  void	 *	 * @since   11.1	 */	public function render()	{		$params = array('template' => $this->getTemplate(), 'file' => 'index.php', 'directory' => JPATH_THEMES, 'params' => $template->params);		// Parse the document.		$document = JFactory::getDocument();		$document->parse($params);		// Trigger the onBeforeRender event.		JPluginHelper::importPlugin('system');		$this->triggerEvent('onBeforeRender');		// Render the document.		$caching = ($this->getCfg('caching') >= 2) ? true : false;		JResponse::setBody($document->render($caching, $params));		// Trigger the onAfterRender event.		$this->triggerEvent('onAfterRender');	}	/**	 * Redirect to another URL.	 *	 * Optionally enqueues a message in the system message queue (which will be displayed	 * the next time a page is loaded) using the enqueueMessage method. If the headers have	 * not been sent the redirect will be accomplished using a "301 Moved Permanently"	 * code in the header pointing to the new location. If the headers have already been	 * sent this will be accomplished using a JavaScript statement.	 *	 * @param   string   $url      The URL to redirect to. Can only be http/https URL	 * @param   string   $msg      An optional message to display on redirect.	 * @param   string   $msgType  An optional message type. Defaults to message.	 * @param   boolean  $moved    True if the page is 301 Permanently Moved, otherwise 303 See Other is assumed.	 *	 * @return  void  Calls exit().	 *	 * @since   11.1	 *	 * @see     JApplication::enqueueMessage()	 */	public function redirect($url, $msg = '', $msgType = 'message', $moved = false)	{		// Check for relative internal links.		if (preg_match('#^index2?\.php#', $url))		{			$url = JURI::base() . $url;		}		// Strip out any line breaks.		$url = preg_split("/[\r\n]/", $url);		$url = $url[0];		/*		 * If we don't start with a http we need to fix this before we proceed.		 * We could validly start with something else (e.g. ftp), though this would		 * be unlikely and isn't supported by this API.		 */		if (!preg_match('#^http#i', $url))		{			$uri = JURI::getInstance();			$prefix = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			if ($url[0] == '/')			{				// We just need the prefix since we have a path relative to the root.				$url = $prefix . $url;			}			else			{				// It's relative to where we are now, so lets add that.				$parts = explode('/', $uri->toString(array('path')));				array_pop($parts);				$path = implode('/', $parts) . '/';				$url = $prefix . $path . $url;			}		}		// If the message exists, enqueue it.		if (trim($msg))		{			$this->enqueueMessage($msg, $msgType);		}		// Persist messages if they exist.		if (count($this->_messageQueue))		{			$session = JFactory::getSession();			$session->set('application.queue', $this->_messageQueue);		}		// If the headers have been sent, then we cannot send an additional location header		// so we will output a javascript redirect statement.		if (headers_sent())		{			echo "<script>document.location.href='" . htmlspecialchars($url) . "';</script>\n";		}		else		{			$document = JFactory::getDocument();			jimport('phputf8.utils.ascii');			if (($this->client->engine == JApplicationWebClient::TRIDENT) && !utf8_is_ascii($url))			{				// MSIE type browser and/or server cause issues when url contains utf8 character,so use a javascript redirect method				echo '<html><head><meta http-equiv="content-type" content="text/html; charset=' . $document->getCharset() . '" />'					. '<script>document.location.href=\'' . htmlspecialchars($url) . '\';</script></head></html>';			}			else			{				// All other browsers, use the more efficient HTTP header method				header($moved ? 'HTTP/1.1 301 Moved Permanently' : 'HTTP/1.1 303 See other');				header('Location: ' . $url);				header('Content-Type: text/html; charset=' . $document->getCharset());			}		}		$this->close();	}	/**	 * Enqueue a system message.	 *	 * @param   string  $msg   The message to enqueue.	 * @param   string  $type  The message type. Default is message.	 *	 * @return  void	 *	 * @since   11.1	 */	public function enqueueMessage($msg, $type = 'message')	{		// For empty queue, if messages exists in the session, enqueue them first.		if (!count($this->_messageQueue))		{			$session = JFactory::getSession();			$sessionQueue = $session->get('application.queue');			if (count($sessionQueue))			{				$this->_messageQueue = $sessionQueue;				$session->set('application.queue', null);			}		}		// Enqueue the message.		$this->_messageQueue[] = array('message' => $msg, 'type' => strtolower($type));	}	/**	 * Get the system message queue.	 *	 * @return  array  The system message queue.	 *	 * @since   11.1	 */	public function getMessageQueue()	{		// For empty queue, if messages exists in the session, enqueue them.		if (!count($this->_messageQueue))		{			$session = JFactory::getSession();			$sessionQueue = $session->get('application.queue');			if (count($sessionQueue))			{				$this->_messageQueue = $sessionQueue;				$session->set('application.queue', null);			}		}		return $this->_messageQueue;	}	/**	 * Gets a configuration value.	 *	 * An example is in application/japplication-getcfg.php Getting a configuration	 *	 * @param   string  $varname  The name of the value to get.	 * @param   string  $default  Default value to return	 *	 * @return  mixed  The user state.	 *	 * @since   11.1	 */	public function getCfg($varname, $default = null)	{		$config = JFactory::getConfig();		return $config->get('' . $varname, $default);	}	/**	 * Method to get the application name.	 *	 * The dispatcher name is by default parsed using the classname, or it can be set	 * by passing a $config['name'] in the class constructor.	 *	 * @return  string  The name of the dispatcher.	 *	 * @since   11.1	 */	public function getName()	{		$name = $this->_name;		if (empty($name))		{			$r = null;			if (!preg_match('/J(.*)/i', get_class($this), $r))			{				JLog::add(JText::_('JLIB_APPLICATION_ERROR_APPLICATION_GET_NAME'), JLog::WARNING, 'jerror');			}			$name = strtolower($r[1]);		}		return $name;	}	/**	 * Gets a user state.	 *	 * @param   string  $key      The path of the state.	 * @param   mixed   $default  Optional default value, returned if the internal value is null.	 *	 * @return  mixed  The user state or null.	 *	 * @since   11.1	 */	public function getUserState($key, $default = null)	{		$session = JFactory::getSession();		$registry = $session->get('registry');		if (!is_null($registry))		{			return $registry->get($key, $default);		}		return $default;	}	/**	 * Sets the value of a user state variable.	 *	 * @param   string  $key    The path of the state.	 * @param   string  $value  The value of the variable.	 *	 * @return  mixed  The previous state, if one existed.	 *	 * @since   11.1	 */	public function setUserState($key, $value)	{		$session = JFactory::getSession();		$registry = $session->get('registry');		if (!is_null($registry))		{			return $registry->set($key, $value);		}		return null;	}	/**	 * Gets the value of a user state variable.	 *	 * @param   string  $key      The key of the user state variable.	 * @param   string  $request  The name of the variable passed in a request.	 * @param   string  $default  The default value for the variable if not found. Optional.	 * @param   string  $type     Filter for the variable, for valid values see {@link JFilterInput::clean()}. Optional.	 *	 * @return  The request user state.	 *	 * @since   11.1	 */	public function getUserStateFromRequest($key, $request, $default = null, $type = 'none')	{		$cur_state = $this->getUserState($key, $default);		$new_state = $this->input->get($request, null, $type);		// Save the new value only if it was set in this request.		if ($new_state !== null)		{			$this->setUserState($key, $new_state);		}		else		{			$new_state = $cur_state;		}		return $new_state;	}	/**	 * Login authentication function.	 *	 * Username and encoded password are passed the onUserLogin event which	 * is responsible for the user validation. A successful validation updates	 * the current session record with the user's details.	 *	 * Username and encoded password are sent as credentials (along with other	 * possibilities) to each observer (authentication plugin) for user	 * validation.  Successful validation will update the current session with	 * the user details.	 *	 * @param   array  $credentials  Array('username' => string, 'password' => string)	 * @param   array  $options      Array('remember' => boolean)	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function login($credentials, $options = array())	{		// Get the global JAuthentication object.		jimport('joomla.user.authentication');		$authenticate = JAuthentication::getInstance();		$response = $authenticate->authenticate($credentials, $options);		if ($response->status === JAuthentication::STATUS_SUCCESS)		{			// Validate that the user should be able to login (different to being authenticated).			// This permits authentication plugins blocking the user			$authorisations = $authenticate->authorise($response, $options);			foreach ($authorisations as $authorisation)			{				$denied_states = array(JAuthentication::STATUS_EXPIRED, JAuthentication::STATUS_DENIED);				if (in_array($authorisation->status, $denied_states))				{					// Trigger onUserAuthorisationFailure Event.					$this->triggerEvent('onUserAuthorisationFailure', array((array) $authorisation));					// If silent is set, just return false.					if (isset($options['silent']) && $options['silent'])					{						return false;					}					// Return the error.					switch ($authorisation->status)					{						case JAuthentication::STATUS_EXPIRED:							return JError::raiseWarning('102002', JText::_('JLIB_LOGIN_EXPIRED'));							break;						case JAuthentication::STATUS_DENIED:							return JError::raiseWarning('102003', JText::_('JLIB_LOGIN_DENIED'));							break;						default:							return JError::raiseWarning('102004', JText::_('JLIB_LOGIN_AUTHORISATION'));							break;					}				}			}			// Import the user plugin group.			JPluginHelper::importPlugin('user');			// OK, the credentials are authenticated and user is authorised.  Lets fire the onLogin event.			$results = $this->triggerEvent('onUserLogin', array((array) $response, $options));			/*			 * If any of the user plugins did not successfully complete the login routine			 * then the whole method fails.			 *			 * Any errors raised should be done in the plugin as this provides the ability			 * to provide much more information about why the routine may have failed.			 */			if (!in_array(false, $results, true))			{				// Set the remember me cookie if enabled.				if (isset($options['remember']) && $options['remember'])				{					// Create the encryption key, apply extra hardening using the user agent string.					$privateKey = self::getHash(@$_SERVER['HTTP_USER_AGENT']);					$key = new JCryptKey('simple', $privateKey, $privateKey);					$crypt = new JCrypt(new JCryptCipherSimple, $key);					$rcookie = $crypt->encrypt(json_encode($credentials));					$lifetime = time() + 365 * 24 * 60 * 60;					// Use domain and path set in config for cookie if it exists.					$cookie_domain = $this->getCfg('cookie_domain', '');					$cookie_path = $this->getCfg('cookie_path', '/');					$secure = $this->isSSLConnection();					setcookie(self::getHash('JLOGIN_REMEMBER'), $rcookie, $lifetime, $cookie_path, $cookie_domain, $secure, true);				}				return true;			}		}		// Trigger onUserLoginFailure Event.		$this->triggerEvent('onUserLoginFailure', array((array) $response));		// If silent is set, just return false.		if (isset($options['silent']) && $options['silent'])		{			return false;		}		// If status is success, any error will have been raised by the user plugin		if ($response->status !== JAuthentication::STATUS_SUCCESS)		{			JLog::add($response->error_message, JLog::WARNING, 'jerror');		}		return false;	}	/**	 * Logout authentication function.	 *	 * Passed the current user information to the onUserLogout event and reverts the current	 * session record back to 'anonymous' parameters.	 * If any of the authentication plugins did not successfully complete	 * the logout routine then the whole method fails. Any errors raised	 * should be done in the plugin as this provides the ability to give	 * much more information about why the routine may have failed.	 *	 * @param   integer  $userid   The user to load - Can be an integer or string - If string, it is converted to ID automatically	 * @param   array    $options  Array('clientid' => array of client id's)	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function logout($userid = null, $options = array())	{		// Get a user object from the JApplication.		$user = JFactory::getUser($userid);		// Build the credentials array.		$parameters['username'] = $user->get('username');		$parameters['id'] = $user->get('id');		// Set clientid in the options array if it hasn't been set already.		if (!isset($options['clientid']))		{			$options['clientid'] = $this->getClientId();		}		// Import the user plugin group.		JPluginHelper::importPlugin('user');		// OK, the credentials are built. Lets fire the onLogout event.		$results = $this->triggerEvent('onUserLogout', array($parameters, $options));		// Check if any of the plugins failed. If none did, success.		if (!in_array(false, $results, true))		{			// Use domain and path set in config for cookie if it exists.			$cookie_domain = $this->getCfg('cookie_domain', '');			$cookie_path = $this->getCfg('cookie_path', '/');			setcookie(self::getHash('JLOGIN_REMEMBER'), false, time() - 86400, $cookie_path, $cookie_domain);			return true;		}		// Trigger onUserLoginFailure Event.		$this->triggerEvent('onUserLogoutFailure', array($parameters));		return false;	}	/**	 * Gets the name of the current template.	 *	 * @param   array  $params  An optional associative array of configuration settings	 *	 * @return  string  System is the fallback.	 *	 * @since   11.1	 */	public function getTemplate($params = array())	{		return 'system';	}	/**	 * Returns the application JRouter object.	 *	 * @param   string  $name     The name of the application.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JRouter  A JRouter object	 *	 * @since   11.1	 */	static public function getRouter($name = null, array $options = array())	{		if (!isset($name))		{			$app = JFactory::getApplication();			$name = $app->getName();		}		jimport('joomla.application.router');		try		{			$router = JRouter::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $router;	}	/**	 * This method transliterates a string into an URL	 * safe string or returns a URL safe UTF-8 string	 * based on the global configuration	 *	 * @param   string  $string  String to process	 *	 * @return  string  Processed string	 *	 * @since   11.1	 */	static public function stringURLSafe($string)	{		if (JFactory::getConfig()->get('unicodeslugs') == 1)		{			$output = JFilterOutput::stringURLUnicodeSlug($string);		}		else		{			$output = JFilterOutput::stringURLSafe($string);		}		return $output;	}	/**	 * Returns the application JPathway object.	 *	 * @param   string  $name     The name of the application.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JPathway  A JPathway object	 *	 * @since   11.1	 */	public function getPathway($name = null, $options = array())	{		if (!isset($name))		{			$name = $this->_name;		}		try		{			$pathway = JPathway::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $pathway;	}	/**	 * Returns the application JPathway object.	 *	 * @param   string  $name     The name of the application/client.	 * @param   array   $options  An optional associative array of configuration settings.	 *	 * @return  JMenu  JMenu object.	 *	 * @since   11.1	 */	public function getMenu($name = null, $options = array())	{		if (!isset($name))		{			$name = $this->_name;		}		try		{			$menu = JMenu::getInstance($name, $options);		}		catch (Exception $e)		{			return null;		}		return $menu;	}	/**	 * Provides a secure hash based on a seed	 *	 * @param   string  $seed  Seed string.	 *	 * @return  string  A secure hash	 *	 * @since   11.1	 */	public static function getHash($seed)	{		return md5(JFactory::getConfig()->get('secret') . $seed);	}	/**	 * Create the configuration registry.	 *	 * @param   string  $file  The path to the configuration file	 *	 * @return  JConfig  A JConfig object	 *	 * @since   11.1	 */	protected function _createConfiguration($file)	{		JLoader::register('JConfig', $file);		// Create the JConfig object.		$config = new JConfig;		// Get the global configuration object.		$registry = JFactory::getConfig();		// Load the configuration values into the registry.		$registry->loadObject($config);		return $config;	}	/**	 * Create the user session.	 *	 * Old sessions are flushed based on the configuration value for the cookie	 * lifetime. If an existing session, then the last access time is updated.	 * If a new session, a session id is generated and a record is created in	 * the #__sessions table.	 *	 * @param   string  $name  The sessions name.	 *	 * @return  JSession  JSession on success. May call exit() on database error.	 *	 * @since   11.1	 */	protected function _createSession($name)	{		$options = array();		$options['name'] = $name;		switch ($this->_clientId)		{			case 0:				if ($this->getCfg('force_ssl') == 2)				{					$options['force_ssl'] = true;				}				break;			case 1:				if ($this->getCfg('force_ssl') >= 1)				{					$options['force_ssl'] = true;				}				break;		}		$this->registerEvent('onAfterSessionStart', array($this, 'afterSessionStart'));		$session = JFactory::getSession($options);		$session->initialise($this->input, $this->dispatcher);		$session->start();		// TODO: At some point we need to get away from having session data always in the db.		$db = JFactory::getDbo();		// Remove expired sessions from the database.		$time = time();		if ($time % 2)		{			// The modulus introduces a little entropy, making the flushing less accurate			// but fires the query less than half the time.			$query = $db->getQuery(true)				->delete($db->quoteName('#__session'))				->where($db->quoteName('time') . ' < ' . $db->quote((int) ($time - $session->getExpire())));			$db->setQuery($query);			$db->execute();		}		// Check to see the the session already exists.		$handler = $this->getCfg('session_handler');		if (($handler != 'database' && ($time % 2 || $session->isNew()))			|| ($handler == 'database' && $session->isNew()))		{			$this->checkSession();		}		return $session;	}	/**	 * Checks the user session.	 *	 * If the session record doesn't exist, initialise it.	 * If session is new, create session variables	 *	 * @return  void	 *	 * @since   11.1	 */	public function checkSession()	{		$db = JFactory::getDbo();		$session = JFactory::getSession();		$user = JFactory::getUser();		$query = $db->getQuery(true)			->select($db->quoteName('session_id'))			->from($db->quoteName('#__session'))			->where($db->quoteName('session_id') . ' = ' . $db->quote($session->getId()));		$db->setQuery($query, 0, 1);		$exists = $db->loadResult();		// If the session record doesn't exist initialise it.		if (!$exists)		{			$query->clear();			if ($session->isNew())			{				$query->insert($db->quoteName('#__session'))					->columns($db->quoteName('session_id') . ', ' . $db->quoteName('client_id') . ', ' . $db->quoteName('time'))					->values($db->quote($session->getId()) . ', ' . (int) $this->getClientId() . ', ' . $db->quote((int) time()));				$db->setQuery($query);			}			else			{				$query->insert($db->quoteName('#__session'))					->columns(						$db->quoteName('session_id') . ', ' . $db->quoteName('client_id') . ', ' . $db->quoteName('guest') . ', ' .						$db->quoteName('time') . ', ' . $db->quoteName('userid') . ', ' . $db->quoteName('username')					)					->values(						$db->quote($session->getId()) . ', ' . (int) $this->getClientId() . ', ' . (int) $user->get('guest') . ', ' .						$db->quote((int) $session->get('session.timer.start')) . ', ' . (int) $user->get('id') . ', ' . $db->quote($user->get('username'))					);				$db->setQuery($query);			}			// If the insert failed, exit the application.			try			{				$db->execute();			}			catch (RuntimeException $e)			{				jexit($e->getMessage());			}		}	}	/**	 * After the session has been started we need to populate it with some default values.	 *	 * @return  void	 *	 * @since   12.2	 */	public function afterSessionStart()	{		$session = JFactory::getSession();		if ($session->isNew())		{			$session->set('registry', new JRegistry('session'));			$session->set('user', new JUser);		}	}	/**	 * Gets the client id of the current running application.	 *	 * @return  integer  A client identifier.	 *	 * @since   11.1	 */	public function getClientId()	{		return $this->_clientId;	}	/**	 * Is admin interface?	 *	 * @return  boolean  True if this application is administrator.	 *	 * @since   11.1	 */	public function isAdmin()	{		return ($this->_clientId == 1);	}	/**	 * Is site interface?	 *	 * @return  boolean  True if this application is site.	 *	 * @since   11.1	 */	public function isSite()	{		return ($this->_clientId == 0);	}	/**	 * Method to determine if the host OS is  Windows	 *	 * @return  boolean  True if Windows OS	 *	 * @since   11.1	 * @deprecated  13.3 Use the IS_WIN constant instead.	 */	public static function isWinOS()	{		JLog::add('JApplication::isWinOS() is deprecated. Use the IS_WIN constant instead.', JLog::WARNING, 'deprecated');		return IS_WIN;	}	/**	 * Determine if we are using a secure (SSL) connection.	 *	 * @return  boolean  True if using SSL, false if not.	 *	 * @since   12.2	 */	public function isSSLConnection()	{		return ((isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) || getenv('SSL_PROTOCOL_VERSION'));	}	/**	 * Returns the response as a string.	 *	 * @return  string  The response	 *	 * @since   11.1	 */	public function __toString()	{		$compress = $this->getCfg('gzip', false);		return JResponse::toString($compress);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of users. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewDebugGroup extends JViewLegacy{	protected $actions;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Access check.		if (!JFactory::getUser()->authorise('core.manage', 'com_users') || !JFactory::getConfig()->get('debug'))		{			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));		}		$this->actions		= $this->get('DebugActions');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->group		= $this->get('Group');		$this->levels		= UsersHelperDebug::getLevelsOptions();		$this->components	= UsersHelperDebug::getComponents();		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::sprintf('COM_USERS_VIEW_DEBUG_GROUP_TITLE', $this->group->id, $this->group->title), 'groups');		JToolbarHelper::help('JHELP_USERS_DEBUG_GROUPS');		JHtmlSidebar::setAction('index.php?option=com_users&view=debuggroup&user_id=' . (int) $this->state->get('filter.user_id'));		$option = '';		if (!empty($this->components))		{			$option = JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));		}		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_COMPONENT'),			'filter_component',			$option		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'),			'filter_level_start',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'))		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'),			'filter_level_end',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'))		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform PDO Database Driver Class * * @package     Joomla.Platform * @subpackage  Database * @see         http://php.net/pdo * @since       12.1 */abstract class JDatabaseDriverPdo extends JDatabaseDriver{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'pdo';	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 * @since  12.1	 */	protected $nameQuote = "'";	/**	 * The null or zero representation of a timestamp for the database driver.  This should be	 * defined in child classes to hold the appropriate value for the engine.	 *	 * @var    string	 * @since  12.1	 */	protected $nullDate = '0000-00-00 00:00:00';	/**	 * @var    resource  The prepared statement.	 * @since  12.1	 */	protected $prepared;	/**	 * Contains the current query execution status	 *	 * @var array	 * @since 12.1	 */	protected $executed = false;	/**	 * Constructor.	 *	 * @param   array  $options  List of options used to configure the connection	 *	 * @since   12.1	 */	public function __construct($options)	{		// Get some basic values from the options.		$options['driver'] = (isset($options['driver'])) ? $options['driver'] : 'odbc';		$options['dsn'] = (isset($options['dsn'])) ? $options['dsn'] : '';		$options['host'] = (isset($options['host'])) ? $options['host'] : 'localhost';		$options['database'] = (isset($options['database'])) ? $options['database'] : '';		$options['user'] = (isset($options['user'])) ? $options['user'] : '';		$options['password'] = (isset($options['password'])) ? $options['password'] : '';		$options['driverOptions'] = (isset($options['driverOptions'])) ? $options['driverOptions'] : array();		// Finalize initialisation		parent::__construct($options);	}	/**	 * Destructor.	 *	 * @since   12.1	 */	public function __destruct()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Connects to the database if needed.	 *	 * @return  void  Returns void if the database connected successfully.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function connect()	{		if ($this->connection)		{			return;		}		// Initialize the connection string variable:		$connectionString = '';		$replace = array();		$with = array();		// Find the correct PDO DSN Format to use:		switch ($this->options['driver'])		{			case 'cubrid':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 33000;				$format = 'cubrid:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'dblib':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1433;				$format = 'dblib:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'firebird':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 3050;				$format = 'firebird:dbname=#DBNAME#';				$replace = array('#DBNAME#');				$with = array($this->options['database']);				break;			case 'ibm':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 56789;				if (!empty($this->options['dsn']))				{					$format = 'ibm:DSN=#DSN#';					$replace = array('#DSN#');					$with = array($this->options['dsn']);				}				else				{					$format = 'ibm:hostname=#HOST#;port=#PORT#;database=#DBNAME#';					$replace = array('#HOST#', '#PORT#', '#DBNAME#');					$with = array($this->options['host'], $this->options['port'], $this->options['database']);				}				break;			case 'informix':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1526;				$this->options['protocol'] = (isset($this->options['protocol'])) ? $this->options['protocol'] : 'onsoctcp';				if (!empty($this->options['dsn']))				{					$format = 'informix:DSN=#DSN#';					$replace = array('#DSN#');					$with = array($this->options['dsn']);				}				else				{					$format = 'informix:host=#HOST#;service=#PORT#;database=#DBNAME#;server=#SERVER#;protocol=#PROTOCOL#';					$replace = array('#HOST#', '#PORT#', '#DBNAME#', '#SERVER#', '#PROTOCOL#');					$with = array($this->options['host'], $this->options['port'], $this->options['database'], $this->options['server'], $this->options['protocol']);				}				break;			case 'mssql':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1433;				$format = 'mssql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'mysql':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 3306;				$format = 'mysql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'oci':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1521;				$this->options['charset'] = (isset($this->options['charset'])) ? $this->options['charset'] : 'AL32UTF8';				if (!empty($this->options['dsn']))				{					$format = 'oci:dbname=#DSN#';					$replace = array('#DSN#');					$with = array($this->options['dsn']);				}				else				{					$format = 'oci:dbname=//#HOST#:#PORT#/#DBNAME#';					$replace = array('#HOST#', '#PORT#', '#DBNAME#');					$with = array($this->options['host'], $this->options['port'], $this->options['database']);				}				$format .= ';charset=' . $this->options['charset'];				break;			case 'odbc':				$format = 'odbc:DSN=#DSN#;UID:#USER#;PWD=#PASSWORD#';				$replace = array('#DSN#', '#USER#', '#PASSWORD#');				$with = array($this->options['dsn'], $this->options['user'], $this->options['password']);				break;			case 'pgsql':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 5432;				$format = 'pgsql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;			case 'sqlite':				if (isset($this->options['version']) && $this->options['version'] == 2)				{					$format = 'sqlite2:#DBNAME#';				}				else				{					$format = 'sqlite:#DBNAME#';				}				$replace = array('#DBNAME#');				$with = array($this->options['database']);				break;			case 'sybase':				$this->options['port'] = (isset($this->options['port'])) ? $this->options['port'] : 1433;				$format = 'mssql:host=#HOST#;port=#PORT#;dbname=#DBNAME#';				$replace = array('#HOST#', '#PORT#', '#DBNAME#');				$with = array($this->options['host'], $this->options['port'], $this->options['database']);				break;		}		// Create the connection string:		$connectionString = str_replace($replace, $with, $format);		// Make sure the PDO extension for PHP is installed and enabled.		if (!self::isSupported())		{			throw new RuntimeException('PDO Extension is not available.', 1);		}		try		{			$this->connection = new PDO(				$connectionString,				$this->options['user'],				$this->options['password'],				$this->options['driverOptions']			);		}		catch (PDOException $e)		{			throw new RuntimeException('Could not connect to PDO: ' . $e->getMessage(), 2, $e);		}	}	/**	 * Disconnects the database.	 *	 * @return  void	 *	 * @since   12.1	 */	public function disconnect()	{		$this->freeResult();		unset($this->connection);	}	/**	 * Method to escape a string for usage in an SQL statement.	 *	 * Oracle escaping reference:	 * http://www.orafaq.com/wiki/SQL_FAQ#How_does_one_escape_special_characters_when_writing_SQL_queries.3F	 *	 * SQLite escaping notes:	 * http://www.sqlite.org/faq.html#q14	 *	 * Method body is as implemented by the Zend Framework	 *	 * Note: Using query objects with bound variables is	 * preferable to the below.	 *	 * @param   string   $text   The string to be escaped.	 * @param   boolean  $extra  Unused optional parameter to provide extra escaping.	 *	 * @return  string  The escaped string.	 *	 * @since   12.1	 */	public function escape($text, $extra = false)	{		if (is_int($text) || is_float($text))		{			return $text;		}		$text = str_replace("'", "''", $text);		return addcslashes($text, "\000\n\r\\\032");	}	/**	 * Execute the SQL statement.	 *	 * @return  mixed  A database cursor resource on success, boolean false on failure.	 *	 * @since   12.1	 * @throws  RuntimeException	 * @throws  Exception	 */	public function execute()	{		$this->connect();		if (!is_object($this->connection))		{			JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'database');			throw new RuntimeException($this->errorMsg, $this->errorNum);		}		// Take a local copy so that we don't modify the original query and cause issues later		$query = $this->replacePrefix((string) $this->sql);		if ($this->limit > 0 || $this->offset > 0)		{			// @TODO			$query .= ' LIMIT ' . $this->offset . ', ' . $this->limit;		}		// Increment the query counter.		$this->count++;		// If debugging is enabled then let's log the query.		if ($this->debug)		{			// Add the query to the object queue.			$this->log[] = $query;			JLog::add($query, JLog::DEBUG, 'databasequery');		}		// Reset the error values.		$this->errorNum = 0;		$this->errorMsg = '';		// Execute the query.		$this->executed = false;		if ($this->prepared instanceof PDOStatement)		{			// Bind the variables:			if ($this->sql instanceof JDatabaseQueryPreparable)			{				$bounded =& $this->sql->getBounded();				foreach ($bounded as $key => $obj)				{					$this->prepared->bindParam($key, $obj->value, $obj->dataType, $obj->length, $obj->driverOptions);				}			}			$this->executed = $this->prepared->execute();		}		// If an error occurred handle it.		if (!$this->executed)		{			// Get the error number and message before we execute any more queries.			$errorNum = (int) $this->connection->errorCode();			$errorMsg = (string) 'SQL: ' . implode(", ", $this->connection->errorInfo());			// Check if the server was disconnected.			if (!$this->connected())			{				try				{					// Attempt to reconnect.					$this->connection = null;					$this->connect();				}				// If connect fails, ignore that exception and throw the normal exception.				catch (RuntimeException $e)				{					// Get the error number and message.					$this->errorNum = (int) $this->connection->errorCode();					$this->errorMsg = (string) 'SQL: ' . implode(", ", $this->connection->errorInfo());					// Throw the normal query exception.					JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');					throw new RuntimeException($this->errorMsg, $this->errorNum);				}				// Since we were able to reconnect, run the query again.				return $this->execute();			}			// The server was not disconnected.			else			{				// Get the error number and message from before we tried to reconnect.				$this->errorNum = $errorNum;				$this->errorMsg = $errorMsg;				// Throw the normal query exception.				JLog::add(JText::sprintf('JLIB_DATABASE_QUERY_FAILED', $this->errorNum, $this->errorMsg), JLog::ERROR, 'databasequery');				throw new RuntimeException($this->errorMsg, $this->errorNum);			}		}		return $this->prepared;	}	/**	 * Retrieve a PDO database connection attribute	 * http://www.php.net/manual/en/pdo.getattribute.php	 *	 * Usage: $db->getOption(PDO::ATTR_CASE);	 *	 * @param   mixed  $key  One of the PDO::ATTR_* Constants	 *	 * @return mixed	 *	 * @since  12.1	 */	public function getOption($key)	{		$this->connect();		return $this->connection->getAttribute($key);	}	/**	 * Get a query to run and verify the database is operational.	 *	 * @return  string  The query to check the health of the DB.	 *	 * @since   12.2	 */	public function getConnectedQuery()	{		return 'SELECT 1';	}	/**	 * Sets an attribute on the PDO database handle.	 * http://www.php.net/manual/en/pdo.setattribute.php	 *	 * Usage: $db->setOption(PDO::ATTR_CASE, PDO::CASE_UPPER);	 *	 * @param   integer  $key    One of the PDO::ATTR_* Constants	 * @param   mixed    $value  One of the associated PDO Constants	 *                           related to the particular attribute	 *                           key.	 *	 * @return boolean	 *	 * @since  12.1	 */	public function setOption($key, $value)	{		$this->connect();		return $this->connection->setAttribute($key, $value);	}	/**	 * Test to see if the PDO extension is available.	 * Override as needed to check for specific PDO Drivers.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return defined('PDO::ATTR_DRIVER_NAME');	}	/**	 * Determines if the connection to the server is active.	 *	 * @return  boolean  True if connected to the database engine.	 *	 * @since   12.1	 */	public function connected()	{		// Flag to prevent recursion into this function.		static $checkingConnected = false;		if ($checkingConnected)		{			// Reset this flag and throw an exception.			$checkingConnected = true;			die('Recursion trying to check if connected.');		}		// Backup the query state.		$query = $this->sql;		$limit = $this->limit;		$offset = $this->offset;		$prepared = $this->prepared;		try		{			// Set the checking connection flag.			$checkingConnected = true;			// Run a simple query to check the connection.			$this->setQuery($this->getConnectedQuery());			$status = (bool) $this->loadResult();		}		// If we catch an exception here, we must not be connected.		catch (Exception $e)		{			$status = false;		}		// Restore the query state.		$this->sql = $query;		$this->limit = $limit;		$this->offset = $offset;		$this->prepared = $prepared;		$checkingConnected = false;		return $status;	}	/**	 * Get the number of affected rows for the previous executed SQL statement.	 * Only applicable for DELETE, INSERT, or UPDATE statements.	 *	 * @return  integer  The number of affected rows.	 *	 * @since   12.1	 */	public function getAffectedRows()	{		$this->connect();		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->rowCount();		}		else		{			return 0;		}	}	/**	 * Get the number of returned rows for the previous executed SQL statement.	 *	 * @param   resource  $cursor  An optional database cursor resource to extract the row count from.	 *	 * @return  integer   The number of returned rows.	 *	 * @since   12.1	 */	public function getNumRows($cursor = null)	{		$this->connect();		if ($cursor instanceof PDOStatement)		{			return $cursor->rowCount();		}		elseif ($this->prepared instanceof PDOStatement)		{			return $this->prepared->rowCount();		}		else		{			return 0;		}	}	/**	 * Method to get the auto-incremented value from the last INSERT statement.	 *	 * @return  integer  The value of the auto-increment field from the last inserted row.	 *	 * @since   12.1	 */	public function insertid()	{		$this->connect();		// Error suppress this to prevent PDO warning us that the driver doesn't support this operation.		return @$this->connection->lastInsertId();	}	/**	 * Select a database for use.	 *	 * @param   string  $database  The name of the database to select for use.	 *	 * @return  boolean  True if the database was successfully selected.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function select($database)	{		$this->connect();		return true;	}	/**	 * Sets the SQL statement string for later execution.	 *	 * @param   mixed    $query          The SQL statement to set either as a JDatabaseQuery object or a string.	 * @param   integer  $offset         The affected row offset to set.	 * @param   integer  $limit          The maximum affected rows to set.	 * @param   array    $driverOptions  The optional PDO driver options	 *	 * @return  JDatabaseDriver  This object to support method chaining.	 *	 * @since   12.1	 */	public function setQuery($query, $offset = null, $limit = null, $driverOptions = array())	{		$this->connect();		$this->freeResult();		if (is_string($query))		{			// Allows taking advantage of bound variables in a direct query:			$query = $this->getQuery(true)->setQuery($query);		}		if ($query instanceof JDatabaseQueryLimitable && !is_null($offset) && !is_null($limit))		{			$query->setLimit($limit, $offset);		}		$query = $this->replacePrefix((string) $query);		$this->prepared = $this->connection->prepare($query, $driverOptions);		// Store reference to the JDatabaseQuery instance:		parent::setQuery($query, $offset, $limit);		return $this;	}	/**	 * Set the connection to use UTF-8 character encoding.	 *	 * @return  boolean  True on success.	 *	 * @since   12.1	 */	public function setUTF()	{		return false;	}	/**	 * Method to commit a transaction.	 *	 * @return  bool	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionCommit()	{		$this->connect();		return $this->connection->commit();	}	/**	 * Method to roll back a transaction.	 *	 * @return  bool	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionRollback()	{		$this->connect();		return $this->connection->rollBack();	}	/**	 * Method to initialize a transaction.	 *	 * @return  bool	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function transactionStart()	{		$this->connect();		return $this->connection->beginTransaction();	}	/**	 * Method to fetch a row from the result set cursor as an array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchArray($cursor = null)	{		if (!empty($cursor) && $cursor instanceof PDOStatement)		{			return $cursor->fetch(PDO::FETCH_NUM);		}		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->fetch(PDO::FETCH_NUM);		}	}	/**	 * Method to fetch a row from the result set cursor as an associative array.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  mixed  Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchAssoc($cursor = null)	{		if (!empty($cursor) && $cursor instanceof PDOStatement)		{			return $cursor->fetch(PDO::FETCH_ASSOC);		}		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->fetch(PDO::FETCH_ASSOC);		}	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @param   mixed   $cursor  The optional result set cursor from which to fetch the row.	 * @param   string  $class   Unused, only necessary so method signature will be the same as parent.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject($cursor = null, $class = 'stdClass')	{		if (!empty($cursor) && $cursor instanceof PDOStatement)		{			return $cursor->fetchObject($class);		}		if ($this->prepared instanceof PDOStatement)		{			return $this->prepared->fetchObject($class);		}	}	/**	 * Method to free up the memory used for the result set.	 *	 * @param   mixed  $cursor  The optional result set cursor from which to fetch the row.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult($cursor = null)	{		$this->executed = false;		if ($cursor instanceof PDOStatement)		{			$cursor->closeCursor();			$cursor = null;		}		if ($this->prepared instanceof PDOStatement)		{			$this->prepared->closeCursor();			$this->prepared = null;		}	}	/**	 * Method to get the next row in the result set from the database query as an object.	 *	 * @param   string  $class  The class name to use for the returned row object.	 *	 * @return  mixed   The result of the query as an array, false if there are no more rows.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadNextObject($class = 'stdClass')	{		$this->connect();		// Execute the query and get the result set cursor.		if (!$this->executed)		{			if (!($this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchObject(null, $class))		{			return $row;		}		// Free up system resources and return.		$this->freeResult();		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadNextAssoc()	{		$this->connect();		// Execute the query and get the result set cursor.		if (!$this->executed)		{			if (!($this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchAssoc())		{			return $row;		}		// Free up system resources and return.		$this->freeResult();		return false;	}	/**	 * Method to get the next row in the result set from the database query as an array.	 *	 * @return  mixed  The result of the query as an array, false if there are no more rows.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function loadNextRow()	{		$this->connect();		// Execute the query and get the result set cursor.		if (!$this->executed)		{			if (!($this->execute()))			{				return $this->errorNum ? null : false;			}		}		// Get the next row from the result set as an object of type $class.		if ($row = $this->fetchArray())		{			return $row;		}		// Free up system resources and return.		$this->freeResult();		return false;	}	/**	 * PDO does not support serialize	 *	 * @return  array	 *	 * @since   12.3	 */	public function __sleep()	{		$serializedProperties = array();		$reflect = new ReflectionClass($this);		// Get properties of the current class		$properties = $reflect->getProperties();		foreach ($properties as $key => $property)		{			// Do not serialize properties that are PDO			if ($property->isStatic() == false && !($this->{$property->name} instanceof PDO))			{				array_push($serializedProperties, $property->name);			}		}		return $serializedProperties;	}	/**	 * Wake up after serialization	 *	 * @return  array	 *	 * @since   12.3	 */	public function __wakeup()	{		// Get connection back		$this->__construct($this->options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Color Form Field class for the Joomla Platform. * This implementation is designed to be compatible with HTML5's <input type="color"> * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.color.html * @since       11.3 */class JFormFieldColor extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.3	 */	protected $type = 'Color';	/**	 * Method to get the field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.3	 */	protected function getInput()	{		// Control value can be: hue (default), saturation, brightness, wheel or simpel		$control = (string) $this->element['control'];		// Position of the panel can be: right (default), left, top or bottom		$position = $this->element['position'] ? (string) $this->element['position'] : 'right';		$position = ' data-position="' . $position . '"';		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		$class = (string) $this->element['class'];		$color = strtolower($this->value);		if (!$color || in_array($color, array('none', 'transparent')))		{			$color = 'none';		}		elseif ($color['0'] != '#')		{			$color = '#' . $color;		}		if ($control == 'simple')		{			$class = ' class="' . trim('simplecolors chzn-done ' . $class) . '"';			JHtml::_('behavior.simplecolorpicker');			$colors = (string) $this->element['colors'];			if (empty($colors))			{				$colors = array(					'none',					'#049cdb',					'#46a546',					'#9d261d',					'#ffc40d',					'#f89406',					'#c3325f',					'#7a43b6',					'#FFFFFF',					'#999999',					'#555555',					'#000000'				);			}			else			{				$colors = explode(',', $colors);			}			$split = (int) $this->element['split'];			if (!$split)			{				$count = count($colors);				if ($count % 5 == 0)				{					$split = 5;				}				else				{					if ($count % 4 == 0)					{						$split = 4;					}				}			}			$split = $split ? $split : 3;			$html = array();			$html[] = '<select name="' . $this->name . '" id="' . $this->id . '"'				. $class . $position . $onchange . ' style="visibility:hidden;width:22px;height:1px">';			foreach ($colors as $i => $c)			{				$html[] = '<option' . ($c == $color ? ' selected="selected"' : '') . '>' . $c . '</option>';				if (($i + 1) % $split == 0)				{					$html[] = '<option>-</option>';				}			}			$html[] = '</select>';			return implode('', $html);		}		else		{			$class = ' class="' . trim('minicolors ' . $class) . '"';			$control = $control ? ' data-control="' . $control . '"' : '';			$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';			JHtml::_('behavior.colorpicker');			return '<input type="text" name="' . $this->name . '" id="' . $this->id . '"' . ' value="'				. htmlspecialchars($color, ENT_COMPAT, 'UTF-8') . '"' . $class . $position . $control . $disabled . $onchange . '/>';		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides radio button inputs * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/command.radio.html#command.radio * @since       11.1 */class JFormFieldRadio extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Radio';	/**	 * Method to get the radio button field input markup.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		$html = array();		// Initialize some field attributes.		$class = $this->element['class'] ? ' class="radio ' . (string) $this->element['class'] . '"' : ' class="radio"';		// Start the radio field output.		$html[] = '<fieldset id="' . $this->id . '"' . $class . '>';		// Get the field options.		$options = $this->getOptions();		// Build the radio field output.		foreach ($options as $i => $option)		{			// Initialize some option attributes.			$checked = ((string) $option->value == (string) $this->value) ? ' checked="checked"' : '';			$class = !empty($option->class) ? ' class="' . $option->class . '"' : '';			$disabled = !empty($option->disable) ? ' disabled="disabled"' : '';			$required = !empty($option->required) ? ' required="required" aria-required="true"' : '';			// Initialize some JavaScript option attributes.			$onclick = !empty($option->onclick) ? ' onclick="' . $option->onclick . '"' : '';			$html[] = '<input type="radio" id="' . $this->id . $i . '" name="' . $this->name . '" value="'				. htmlspecialchars($option->value, ENT_COMPAT, 'UTF-8') . '"' . $checked . $class . $onclick . $disabled . $required . '/>';			$html[] = '<label for="' . $this->id . $i . '"' . $class . '>'				. JText::alt($option->text, preg_replace('/[^a-zA-Z0-9_\-]/', '_', $this->fieldname)) . '</label>';		}		// End the radio field output.		$html[] = '</fieldset>';		return implode($html);	}	/**	 * Method to get the field options for radio buttons.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		foreach ($this->element->children() as $option)		{			// Only add <option /> elements.			if ($option->getName() != 'option')			{				continue;			}			// Create a new option object based on the <option /> element.			$tmp = JHtml::_(				'select.option', (string) $option['value'], trim((string) $option), 'value', 'text',				((string) $option['disabled'] == 'true')			);			// Set some option attributes.			$tmp->class = (string) $option['class'];			// Set some JavaScript option attributes.			$tmp->onclick = (string) $option['onclick'];			// Add the option object to the result set.			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelRegistration extends JModelForm{	/**	 * @var    object  The user registration data.	 * @since  1.6	 */	protected $data;	/**	 * Method to activate a user account.	 *	 * @param   string  $token  The activation token.	 *	 * @return  mixed    False on failure, user object on success.	 *	 * @since   1.6	 */	public function activate($token)	{		$config = JFactory::getConfig();		$userParams = JComponentHelper::getParams('com_users');		$db = $this->getDbo();		// Get the user id based on the token.		$query = $db->getQuery(true);		$query->select($db->quoteName('id'))			->from($db->quoteName('#__users'))			->where($db->quoteName('activation') . ' = ' . $db->quote($token))			->where($db->quoteName('block') . ' = ' . 1)			->where($db->quoteName('lastvisitDate') . ' = ' . $db->quote($db->getNullDate()));		$db->setQuery($query);		try		{			$userId = (int) $db->loadResult();		}		catch (RuntimeException $e)		{			$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);			return false;		}		// Check for a valid user id.		if (!$userId)		{			$this->setError(JText::_('COM_USERS_ACTIVATION_TOKEN_NOT_FOUND'));			return false;		}		// Load the users plugin group.		JPluginHelper::importPlugin('user');		// Activate the user.		$user = JFactory::getUser($userId);		// Admin activation is on and user is verifying their email		if (($userParams->get('useractivation') == 2) && !$user->getParam('activate', 0))		{			$uri = JUri::getInstance();			// Compile the admin notification mail values.			$data = $user->getProperties();			$data['activation'] = JApplication::getHash(JUserHelper::genRandomPassword());			$user->set('activation', $data['activation']);			$data['siteurl'] = JUri::base();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$data['fromname'] = $config->get('fromname');			$data['mailfrom'] = $config->get('mailfrom');			$data['sitename'] = $config->get('sitename');			$user->setParam('activate', 1);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATE_WITH_ADMIN_ACTIVATION_SUBJECT',				$data['name'],				$data['sitename']			);			$emailBody = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATE_WITH_ADMIN_ACTIVATION_BODY',				$data['sitename'],				$data['name'],				$data['email'],				$data['username'],				$data['activate']			);			// get all admin users			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail', 'id')))				->from($db->quoteName('#__users')				->where($db->quoteName('sendEmail') . ' = ' . 1));			$db->setQuery($query);			try			{				$rows = $db->loadObjectList();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			// Send mail to all users with users creating permissions and receiving system emails			foreach ($rows as $row)			{				$usercreator = JFactory::getUser($row->id);				if ($usercreator->authorise('core.create', 'com_users'))				{					$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $row->email, $emailSubject, $emailBody);					// Check for an error.					if ($return !== true)					{						$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));						return false;					}				}			}		}		// Admin activation is on and admin is activating the account		elseif (($userParams->get('useractivation') == 2) && $user->getParam('activate', 0))		{			$user->set('activation', '');			$user->set('block', '0');			// Compile the user activated notification mail values.			$data = $user->getProperties();			$user->setParam('activate', 0);			$data['fromname'] = $config->get('fromname');			$data['mailfrom'] = $config->get('mailfrom');			$data['sitename'] = $config->get('sitename');			$data['siteurl'] = JUri::base();			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATED_BY_ADMIN_ACTIVATION_SUBJECT',				$data['name'],				$data['sitename']			);			$emailBody = JText::sprintf(				'COM_USERS_EMAIL_ACTIVATED_BY_ADMIN_ACTIVATION_BODY',				$data['name'],				$data['siteurl'],				$data['username']			);			$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $data['email'], $emailSubject, $emailBody);			// Check for an error.			if ($return !== true)			{				$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));				return false;			}		}		else		{			$user->set('activation', '');			$user->set('block', '0');		}		// Store the user object.		if (!$user->save())		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_ACTIVATION_SAVE_FAILED', $user->getError()));			return false;		}		return $user;	}	/**	 * Method to get the registration form data.	 *	 * The base form data is loaded and then an event is fired	 * for users plugins to extend the data.	 *	 * @return  mixed  Data object on success, false on failure.	 *	 * @since   1.6	 */	public function getData()	{		if ($this->data === null)		{			$this->data = new stdClass;			$app = JFactory::getApplication();			$params = JComponentHelper::getParams('com_users');			// Override the base user data with any data in the session.			$temp = (array) $app->getUserState('com_users.registration.data', array());			foreach ($temp as $k => $v)			{				$this->data->$k = $v;			}			// Get the groups the user should be added to after registration.			$this->data->groups = array();			// Get the default new user group, Registered if not specified.			$system = $params->get('new_usertype', 2);			$this->data->groups[] = $system;			// Unset the passwords.			unset($this->data->password1);			unset($this->data->password2);			// Get the dispatcher and load the users plugins.			$dispatcher = JEventDispatcher::getInstance();			JPluginHelper::importPlugin('user');			// Trigger the data preparation event.			$results = $dispatcher->trigger('onContentPrepareData', array('com_users.registration', $this->data));			// Check for errors encountered while preparing the data.			if (count($results) && in_array(false, $results, true))			{				$this->setError($dispatcher->getError());				$this->data = false;			}		}		return $this->data;	}	/**	 * Method to get the registration form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array    $data      An optional array of data for the form to interogate.	 * @param   boolean  $loadData  True if the form is to load its own data (default case), false if not.	 *	 * @return  JForm  A JForm object on success, false on failure	 *	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.registration', 'registration', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 *	 * @since   1.6	 */	protected function loadFormData()	{		$data = $this->getData();		$this->preprocessData('com_users.registration', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		$userParams = JComponentHelper::getParams('com_users');		//Add the choice for site language at registration time		if ($userParams->get('site_language') == 1 && $userParams->get('frontend_userparams') == 1)		{			$form->loadFile('sitelang', false);		}		parent::preprocessForm($form, $data, $group);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$app = JFactory::getApplication();		$params = $app->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to save the form data.	 *	 * @param   array  $temp  The form data.	 *	 * @return  mixed  The user id on success, false on failure.	 *	 * @since   1.6	 */	public function register($temp)	{		$config = JFactory::getConfig();		$db = $this->getDbo();		$params = JComponentHelper::getParams('com_users');		// Initialise the table with JUser.		$user = new JUser;		$data = (array) $this->getData();		// Merge in the registration data.		foreach ($temp as $k => $v)		{			$data[$k] = $v;		}		// Prepare the data for the user object.		$data['email'] = $data['email1'];		$data['password'] = $data['password1'];		$useractivation = $params->get('useractivation');		$sendpassword = $params->get('sendpassword', 1);		// Check if the user needs to activate their account.		if (($useractivation == 1) || ($useractivation == 2))		{			$data['activation'] = JApplication::getHash(JUserHelper::genRandomPassword());			$data['block'] = 1;		}		// Bind the data.		if (!$user->bind($data))		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_BIND_FAILED', $user->getError()));			return false;		}		// Load the users plugin group.		JPluginHelper::importPlugin('user');		// Store the data.		if (!$user->save())		{			$this->setError(JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $user->getError()));			return false;		}		// Compile the notification mail values.		$data = $user->getProperties();		$data['fromname'] = $config->get('fromname');		$data['mailfrom'] = $config->get('mailfrom');		$data['sitename'] = $config->get('sitename');		$data['siteurl'] = JUri::root();		// Handle account activation/confirmation emails.		if ($useractivation == 2)		{			// Set the link to confirm the user email.			$uri = JUri::getInstance();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ADMIN_ACTIVATION_BODY',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ADMIN_ACTIVATION_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username']				);			}		}		elseif ($useractivation == 1)		{			// Set the link to activate the user account.			$uri = JUri::getInstance();			$base = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));			$data['activate'] = $base . JRoute::_('index.php?option=com_users&task=registration.activate&token=' . $data['activation'], false);			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ACTIVATION_BODY',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_WITH_ACTIVATION_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['activate'],					$data['siteurl'],					$data['username']				);			}		}		else		{			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			if ($sendpassword)			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_BODY',					$data['name'],					$data['sitename'],					$data['siteurl'],					$data['username'],					$data['password_clear']				);			}			else			{				$emailBody = JText::sprintf(					'COM_USERS_EMAIL_REGISTERED_BODY_NOPW',					$data['name'],					$data['sitename'],					$data['siteurl']				);			}		}		// Send the registration email.		$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $data['email'], $emailSubject, $emailBody);		// Send Notification mail to administrators		if (($params->get('useractivation') < 2) && ($params->get('mail_to_admin') == 1))		{			$emailSubject = JText::sprintf(				'COM_USERS_EMAIL_ACCOUNT_DETAILS',				$data['name'],				$data['sitename']			);			$emailBodyAdmin = JText::sprintf(				'COM_USERS_EMAIL_REGISTERED_NOTIFICATION_TO_ADMIN_BODY',				$data['name'],				$data['username'],				$data['siteurl']			);			// Get all admin users			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail')))				->from($db->quoteName('#__users')				->where($db->quoteName('sendEmail') . ' = ' . 1));			$db->setQuery($query);			try			{				$rows = $db->loadObjectList();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			// Send mail to all superadministrators id			foreach ($rows as $row)			{				$return = JFactory::getMailer()->sendMail($data['mailfrom'], $data['fromname'], $row->email, $emailSubject, $emailBodyAdmin);				// Check for an error.				if ($return !== true)				{					$this->setError(JText::_('COM_USERS_REGISTRATION_ACTIVATION_NOTIFY_SEND_MAIL_FAILED'));					return false;				}			}		}		// Check for an error.		if ($return !== true)		{			$this->setError(JText::_('COM_USERS_REGISTRATION_SEND_MAIL_FAILED'));			// Send a system message to administrators receiving system mails			$db = JFactory::getDbo();			$query = $db->getQuery(true);			$query->select($db->quoteName(array('name', 'email', 'sendEmail', 'id')))				->from($db->quoteName('#__users'))				->where($db->quoteName('block') . ' = ' . (int) 0)				->where($db->quoteName('sendEmail') . ' = ' . (int) 1);			$db->setQuery($query);			try			{				$sendEmail = $db->loadColumn();			}			catch (RuntimeException $e)			{				$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);				return false;			}			if (count($sendEmail) > 0)			{				$jdate = new JDate;				// Build the query to add the messages				foreach ($sendEmail as $userid)				{					$values = array($db->quote($userid), $db->quote($userid), $db->quote($jdate->toSql()), $db->quote(JText::_('COM_USERS_MAIL_SEND_FAILURE_SUBJECT')), $db->quote(JText::sprintf('COM_USERS_MAIL_SEND_FAILURE_BODY', $return, $data['username'])));					$query = $db->getQuery(true);					$query->insert($db->quoteName('#__messages'))						->columns($db->quoteName(array('user_id_from', 'user_id_to', 'date_time', 'subject', 'message')))						->values(implode(',', $values));					$db->setQuery($query);					try					{						$db->execute();					}					catch (RuntimeException $e)					{						$this->setError(JText::sprintf('COM_USERS_DATABASE_ERROR', $e->getMessage()), 500);						return false;					}				}			}			return false;		}		if ($useractivation == 1)		{			return "useractivate";		}		elseif ($useractivation == 2)		{			return "adminactivate";		}		else		{			return $user->id;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Components helper for com_config * * @package     Joomla.Administrator * @subpackage  com_config * @since       3.0 */class ConfigHelperComponent{	/**	 * Get an array of all enabled components.	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getAllComponents()	{		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('element')			->from('#__extensions')			->where('type = ' . $db->quote('component'))			->where('enabled = 1');		$db->setQuery($query);		$result = $db->loadColumn();		return $result;	}	/**	 * Returns true if the component has configuration options.	 *	 * @param   string  $components	 *	 * @return  boolean	 *	 * @since   3.0	 */	public static function hasComponentConfig($component)	{		return is_file(JPATH_ADMINISTRATOR . '/components/' . $component . '/config.xml');	}	/**	 * Returns an array of all components with configuration options. By only	 * components for which the current user has 'core.manage' rights are returned.	 *	 * @param   boolean  $authCheck	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getComponentsWithConfig($authCheck = true)	{		$result = array();		$components = self::getAllComponents();		$user = JFactory::getUser();		// Remove com_config from the array as that may have weird side effects		$components = array_diff($components, array('com_config'));		foreach ($components as $component)		{			if (self::hasComponentConfig($component) && (!$authCheck || $user->authorise('core.manage', $component)))			{				$result[] = $component;			}		}		return $result;	}	/**	 * Load the sys language for the given component.	 *	 * @param   string  $components	 *	 * @return  void	 *	 * @since   3.0	 */	public static function loadLanguageForComponents($components)	{		$lang = JFactory::getLanguage();		foreach ($components as $component)		{			if (!empty($component))				{					// Load the core file then					// Load extension-local file.					$lang->load($component . '.sys', JPATH_BASE, null, false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, null, false, false)				||	$lang->load($component . '.sys', JPATH_BASE, $lang->getDefault(), false, false)				||	$lang->load($component . '.sys', JPATH_ADMINISTRATOR . '/components/' . $component, $lang->getDefault(), false, false);			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of banner records. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelClients extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'name', 'a.name',				'contact', 'a.contact',				'state', 'a.state',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'nbanners',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.access');		$id .= ':' . $this->getState('filter.state');		return parent::getStoreId($id);	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id AS id,' .					'a.name AS name,' .					'a.contact AS contact,' .					'a.checked_out AS checked_out,' .					'a.checked_out_time AS checked_out_time, ' .					'a.state AS state,' .					'a.metakey AS metakey,' .					'a.purchase_type as purchase_type'			)		);		$query->from($db->quoteName('#__banner_clients') . ' AS a');		// Join over the banners for counting		$query->select('COUNT(b.id) as nbanners')			->join('LEFT', '#__banners AS b ON a.id = b.cid');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Filter by published state		$published = $this->getState('filter.state');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state IN (0, 1))');		}		$query->group('a.id, a.name, a.contact, a.checked_out, a.checked_out_time, a.state, a.metakey, a.purchase_type, editor');		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.name LIKE ' . $search);			}		}		$ordering_o = $this->getState('list.ordering', 'ordering');		if ($ordering_o == 'nbanners')		{			$ordering_o = 'COUNT(b.id)';		}		// Add the list ordering clause.		$query->order($db->escape($ordering_o) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class for tags * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.1 */abstract class JHtmlTag{	/**	 * Cached array of the tag items.	 *	 * @var    array	 * @since  3.1	 */	protected static $items = array();	/**	 * Returns an array of tags.	 *	 * @param   array  $config  An array of configuration options. By default, only	 *                          published and unpublished categories are returned.	 *	 * @return  array	 *	 * @since   3.1	 */	public static function options($config = array('filter.published' => array(0, 1)))	{		$hash = md5(serialize($config));		if (!isset(self::$items[$hash]))		{			$config = (array) $config;			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('a.id, a.title, a.level')				->from('#__tags AS a')				->where('a.parent_id > 0');			// Filter on the published state			if (isset($config['filter.published']))			{				if (is_numeric($config['filter.published']))				{					$query->where('a.published = ' . (int) $config['filter.published']);				}				elseif (is_array($config['filter.published']))				{					JArrayHelper::toInteger($config['filter.published']);					$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');				}			}			// Filter on the language			if (isset($config['filter.language']))			{				if (is_string($config['filter.language']))				{					$query->where('a.language = ' . $db->quote($config['filter.language']));				}				elseif (is_array($config['filter.language']))				{					foreach ($config['filter.language'] as &$language)					{						$language = $db->quote($language);					}					$query->where('a.language IN (' . implode(',', $config['filter.language']) . ')');				}			}			$query->order('a.lft');			$db->setQuery($query);			$items = $db->loadObjectList();			// Assemble the list options.			self::$items[$hash] = array();			foreach ($items as &$item)			{				$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;				$item->title = str_repeat('- ', $repeat) . $item->title;				self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);			}		}		return self::$items[$hash];	}	/**	 * Returns an array of tags.	 *	 * @param   array  $config  An array of configuration options. By default, only published and unpublished tags are returned.	 *	 * @return  array  Tag data	 *	 * @since   3.1	 */	public static function tags($config = array('filter.published' => array(0, 1)))	{		$hash = md5(serialize($config));		$config = (array) $config;		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('a.id, a.title, a.level, a.parent_id')			->from('#__tags AS a')			->where('a.parent_id > 0');		// Filter on the published state		if (isset($config['filter.published']))		{			if (is_numeric($config['filter.published']))			{				$query->where('a.published = ' . (int) $config['filter.published']);			}			elseif (is_array($config['filter.published']))			{				JArrayHelper::toInteger($config['filter.published']);				$query->where('a.published IN (' . implode(',', $config['filter.published']) . ')');			}		}		$query->order('a.lft');		$db->setQuery($query);		$items = $db->loadObjectList();		// Assemble the list options.		self::$items[$hash] = array();		foreach ($items as &$item)		{			$repeat = ($item->level - 1 >= 0) ? $item->level - 1 : 0;			$item->title = str_repeat('- ', $repeat) . $item->title;			self::$items[$hash][] = JHtml::_('select.option', $item->id, $item->title);		}		return self::$items[$hash];	}	/**	 * This is just a proxy for the formbehavior.ajaxchosen method	 *	 * @param   string   $selector     DOM id of the tag field	 * @param   boolean  $allowCustom  Flag to allow custom values	 *	 * @return  void	 *	 * @since   3.1	 */	public static function ajaxfield($selector='#jform_tags', $allowCustom = true)	{		// Tags field ajax		$chosenAjaxSettings = new JRegistry(			array(				'selector'    => $selector,				'type'        => 'GET',				'url'         => JURI::root() . 'index.php?option=com_tags&task=tags.searchAjax',				'dataType'    => 'json',				'jsonTermKey' => 'like'			)		);		JHtml::_('formbehavior.ajaxchosen', $chosenAjaxSettings);		// Allow custom values ?		if ($allowCustom)		{			JFactory::getDocument()->addScriptDeclaration("				(function($){					$(document).ready(function () {						var customTagPrefix = '#new#';						// Method to add tags pressing enter						$('" . $selector . "_chzn input').keydown(function(event) {							// Tag is greater than 3 chars and enter pressed							if (this.value.length >= 3 && (event.which === 13 || event.which === 188)) {								// Search an highlighted result								var highlighted = $('" . $selector . "_chzn').find('li.active-result.highlighted').first();								// Add the highlighted option								if (event.which === 13 && highlighted.text() !== '')								{									// Extra check. If we have added a custom tag with this text remove it									var customOptionValue = customTagPrefix + highlighted.text();									$('" . $selector . " option').filter(function () { return $(this).val() == customOptionValue; }).remove();									// Select the highlighted result									var tagOption = $('" . $selector . " option').filter(function () { return $(this).html() == highlighted.text(); });									tagOption.attr('selected', 'selected');								}								// Add the custom tag option								else								{									var customTag = this.value;									// Extra check. Search if the custom tag already exists (typed faster than AJAX ready)									var tagOption = $('" . $selector . " option').filter(function () { return $(this).html() == customTag; });									if (tagOption.text() !== '')									{										tagOption.attr('selected', 'selected');									}									else									{										var option = $('<option>');										option.text(this.value).val(customTagPrefix + this.value);										option.attr('selected','selected');										// Append the option an repopulate the chosen field										$('" . $selector . "').append(option);									}								}								this.value = '';								$('" . $selector . "').trigger('liszt:updated');								event.preventDefault();							}						});					});				})(jQuery);				"			);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules list controller class. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesControllerModules extends JControllerAdmin{	/**	 * Method to clone an existing module.	 * @since   1.6	 */	public function duplicate()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$pks = $this->input->post->get('cid', array(), 'array');		JArrayHelper::toInteger($pks);		try {			if (empty($pks))			{				throw new Exception(JText::_('COM_MODULES_ERROR_NO_MODULES_SELECTED'));			}			$model = $this->getModel();			$model->duplicate($pks);			$this->setMessage(JText::plural('COM_MODULES_N_MODULES_DUPLICATED', count($pks)));		} catch (Exception $e)		{			JError::raiseWarning(500, $e->getMessage());		}		$this->setRedirect('index.php?option=com_modules&view=modules');	}	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Module', $prefix = 'ModulesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$input = JFactory::getApplication()->input;		$pks   = $input->post->get('cid', array(), 'array');		$order = $input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tags Component Tags Model * * @package     Joomla.Administrator * @subpackage  com_tags * @since       3.1 */class TagsModelTags extends JModelList{	/**	 * Constructor.	 *	 * @param    array    An optional associative array of configuration settings.	 * @see        JController	 * @since      3.0.3	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'title', 'a.title',				'alias', 'a.alias',				'published', 'a.published',				'access', 'a.access', 'access_level',				'language', 'a.language',				'checked_out', 'a.checked_out',				'checked_out_time', 'a.checked_out_time',				'created_time', 'a.created_time',				'created_user_id', 'a.created_user_id',				'lft', 'a.lft',				'rgt', 'a.rgt',				'level', 'a.level',				'path', 'a.path',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return    void	 * @since    3.1	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$context = $this->context;		$search = $this->getUserStateFromRequest($context . '.search', 'filter_search');		$this->setState('filter.search', $search);		$level = $this->getUserStateFromRequest($context . '.filter.level', 'filter_level', 0, 'int');		$this->setState('filter.level', $level);		$access = $this->getUserStateFromRequest($context . '.filter.access', 'filter_access', 0, 'int');		$this->setState('filter.access', $access);		$published = $this->getUserStateFromRequest($context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		$language = $this->getUserStateFromRequest($context . '.filter.language', 'filter_language', '');		$this->setState('filter.language', $language);		// Load the parameters.		$params = JComponentHelper::getParams('com_tags');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   3.1	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.published');		$id .= ':' . $this->getState('filter.language');		return parent::getStoreId($id);	}	/**	 * Method to create a query for a list of items.	 *	 * @return  string	 *	 * @since  3.1	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		$app = JFactory::getApplication();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.title, a.alias, a.note, a.published, a.access' .					', a.checked_out, a.checked_out_time, a.created_user_id' .					', a.path, a.parent_id, a.level, a.lft, a.rgt' .					', a.language'			)		);		$query->from('#__tags AS a')			->where('a.alias <> ' . $db->quote('root'));		// Join over the language		$query->select('l.title AS language_title')			->join('LEFT', $db->quoteName('#__languages') . ' AS l ON l.lang_code = a.language');		// Join over the users for the checked out user.		$query->select('uc.name AS editor')			->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Join over the users for the author.		$query->select('ua.name AS author_name')			->join('LEFT', '#__users AS ua ON ua.id = a.created_user_id')			->select('ug.title AS access_title')			->join('LEFT', '#__usergroups AS ug on ug.id = a.access');		// Filter on the level.		if ($level = $this->getState('filter.level'))		{			$query->where('a.level <= ' . (int) $level);		}		// Filter by access level.		if ($access = $this->getState('filter.access'))		{			$query->where('a.access = ' . (int) $access);		}		// Implement View Level Access		if (!$user->authorise('core.admin'))		{			$groups = implode(',', $user->getAuthorisedViewLevels());			$query->where('a.access IN (' . $groups . ')');		}		// Filter by published state		$published = $this->getState('filter.published');		if (is_numeric($published))		{			$query->where('a.published = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.published IN (0, 1))');		}		// Filter by search in title		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'author:') === 0)			{				$search = $db->quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(ua.name LIKE ' . $search . ' OR ua.username LIKE ' . $search . ')');			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('(a.title LIKE ' . $search . ' OR a.alias LIKE ' . $search . ' OR a.note LIKE ' . $search . ')');			}		}		// Filter on the language.		if ($language = $this->getState('filter.language'))		{			$query->where('a.language = ' . $db->quote($language));		}		// Add the list ordering clause		$listOrdering = $this->getState('list.ordering', 'a.lft');		$listDirn = $db->escape($this->getState('list.direction', 'ASC'));		if ($listOrdering == 'a.access')		{			$query->order('a.access ' . $listDirn . ', a.lft ' . $listDirn);		}		else		{			$query->order($db->escape($listOrdering) . ' ' . $listDirn);		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method override to check-in a record or an array of record	 *	 * @param   mixed  $pks  The ID of the primary key or an array of IDs	 *	 * @return  mixed  Boolean false if there is an error, otherwise the count of records checked in.	 *	 * @since   12.2	 */	public function checkin($pks = array())	{		$pks = (array) $pks;		$table = $this->getTable();		$count = 0;		if (empty($pks))		{			$pks = array((int) $this->getState($this->getName() . '.id'));		}		// Check in all items.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				if ($table->checked_out > 0)				{					// Only attempt to check the row in if it exists.					if ($pk)					{						$user = JFactory::getUser();						// Get an instance of the row to checkin.						$table = $this->getTable();						if (!$table->load($pk))						{							$this->setError($table->getError());							return false;						}						// Check if this is the user having previously checked out the row.						if ($table->checked_out > 0 && $table->checked_out != $user->get('id') && !$user->authorise('core.admin', 'com_checkin'))						{							$this->setError(JText::_('JLIB_APPLICATION_ERROR_CHECKIN_USER_MISMATCH'));							return false;						}						// Attempt to check the row in.						if (!$table->checkin($pk))						{							$this->setError($table->getError());							return false;						}					}					$count++;				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return $count;	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $type    The table name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   3.1	 */	public function getTable($type = 'Tag', $prefix = 'TagsTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of template styles. * * @package     Joomla.Administrator * @subpackage  com_templates * @since       1.6 */class TemplatesViewTemplates extends JViewLegacy{	/**	 * @var		array	 * @since   1.6	 */	protected $items;	/**	 * @var		object	 * @since   1.6	 */	protected $pagination;	/**	 * @var		object	 * @since   1.6	 */	protected $state;	/**	 * Display the view.	 *	 * @param   string	 *	 * @return  void	 * @since   1.6	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->preview		= JComponentHelper::getParams('com_templates')->get('template_positions_display');		TemplatesHelper::addSubmenu('templates');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_TEMPLATES_MSG_MANAGE_NO_TEMPLATES'),				'warning'			);		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 * @since   1.6	 */	protected function addToolbar()	{		$state	= $this->get('State');		$canDo	= TemplatesHelper::getActions();		JToolbarHelper::title(JText::_('COM_TEMPLATES_MANAGER_TEMPLATES'), 'thememanager');		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_templates');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_TEMPLATE_MANAGER_TEMPLATES');		JHtmlSidebar::setAction('index.php?option=com_templates&view=templates');		JHtmlSidebar::addFilter(			JText::_('JGLOBAL_FILTER_CLIENT'),			'filter_client_id',			JHtml::_('select.options', TemplatesHelper::getClientOptions(), 'value', 'text', $this->state->get('filter.client_id'))		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Helper to render a JLayout object, storing a base path * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.1 */class JLayoutHelper{	/**	 * A default base path that will be used if none is provided when calling the render method.	 * Note that JLayoutFile itself will defaults to JPATH_ROOT . '/layouts' if no basePath is supplied at all	 *	 * @var    string	 * @since  3.1	 */	public static $defaultBasePath = '';	/**	 * Method to render the layout.	 *	 * @param   string  $layoutFile   Dot separated path to the layout file, relative to base path	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 * @param   string  $basePath     Base path to use when loading layout files	 *	 * @return  string	 *	 * @since   3.1	 */	public static function render($layoutFile, $displayData = null, $basePath = '')	{		$basePath = empty($basePath) ? self::$defaultBasePath : $basePath;		// Make sure we send null to JLayoutFile if no path set		$basePath = empty($basePath) ? null : $basePath;		$layout = new JLayoutFile($layoutFile, $basePath);		$renderedLayout = $layout->render($displayData);		return $renderedLayout;	}}
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;//Global definitions.//Joomla framework path definitions.$parts = explode(DIRECTORY_SEPARATOR, JPATH_BASE);array_pop($parts);//Defines.define('JPATH_ROOT',           implode(DIRECTORY_SEPARATOR, $parts));define('JPATH_SITE',          JPATH_ROOT);define('JPATH_CONFIGURATION', JPATH_ROOT);define('JPATH_ADMINISTRATOR', JPATH_ROOT . '/administrator');define('JPATH_LIBRARIES',     JPATH_ROOT . '/libraries');define('JPATH_PLUGINS',       JPATH_ROOT . '/plugins');define('JPATH_INSTALLATION',  JPATH_ROOT . '/installation');define('JPATH_THEMES',        JPATH_BASE . '/templates');define('JPATH_CACHE',         JPATH_ROOT . '/cache');define('JPATH_MANIFESTS',     JPATH_ADMINISTRATOR . '/manifests');
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.tooltip');?><form	action="<?php echo JRoute::_('index.php?option=com_banners&task=tracks.display&format=raw');?>"	method="post"	name="adminForm"	id="download-form"	class="form-validate">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_BANNERS_TRACKS_DOWNLOAD');?></legend>		<?php foreach ($this->form->getFieldset() as $field) : ?>			<?php if (!$field->hidden) : ?>				<?php echo $field->label; ?>			<?php endif; ?>			<?php echo $field->input; ?>		<?php endforeach; ?>		<div class="clr"></div>		<button type="button" onclick="this.form.submit();window.top.setTimeout('window.parent.SqueezeBox.close()', 700);"><?php echo JText::_('COM_BANNERS_TRACKS_EXPORT');?></button>		<button type="button" onclick="window.parent.SqueezeBox.close();"><?php echo JText::_('COM_BANNERS_CANCEL');?></button>	</fieldset></form>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Contacts component * * @package     Joomla.Site * @subpackage  com_contact * @since       1.5 */class ContactViewCategory extends JViewLegacy{	protected $state;	protected $items;	protected $category;	protected $categories;	protected $pagination;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$params		= $app->getParams();		// Get some data from the models		$state		= $this->get('State');		$items		= $this->get('Items');		$category	= $this->get('Category');		$children	= $this->get('Children');		$parent 	= $this->get('Parent');		$pagination	= $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		if ($category == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		if ($parent == false)		{			return JError::raiseError(404, JText::_('JGLOBAL_CATEGORY_NOT_FOUND'));		}		// Check whether category access level allows access.		$user	= JFactory::getUser();		$groups	= $user->getAuthorisedViewLevels();		if (!in_array($category->access, $groups))		{			return JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));		}		// Prepare the data.		// Compute the contact slug.		for ($i = 0, $n = count($items); $i < $n; $i++)		{			$item		= &$items[$i];			$item->slug	= $item->alias ? ($item->id.':'.$item->alias) : $item->id;			$temp		= new JRegistry;			$temp->loadString($item->params);			$item->params = clone($params);			$item->params->merge($temp);			if ($item->params->get('show_email', 0) == 1)			{				$item->email_to = trim($item->email_to);				if (!empty($item->email_to) && JMailHelper::isEmailAddress($item->email_to))				{					$item->email_to = JHtml::_('email.cloak', $item->email_to);				}				else {					$item->email_to = '';				}			}		}		// Setup the category parameters.		$cparams = $category->getParams();		$category->params = clone($params);		$category->params->merge($cparams);		$children = array($category->id => $children);		$maxLevel = $params->get('maxLevel', -1);		$this->maxLevel   = &$maxLevel;		$this->state      = &$state;		$this->items      = &$items;		$this->category   = &$category;		$this->children   = &$children;		$this->params     = &$params;		$this->parent     = &$parent;		$this->pagination = &$pagination;		$this->user       = &$user;		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active	= $app->getMenu()->getActive();		if ((!$active) || ((strpos($active->link, 'view=category') === false) || (strpos($active->link, '&id=' . (string) $this->category->id) === false)))		{			if ($layout = $category->params->get('category_layout'))			{				$this->setLayout($layout);			}		}		elseif (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$category->tags = new JHelperTags;		$category->tags->getItemTags('com_contact.category', $category->id);		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$pathway	= $app->getPathway();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_CONTACT_DEFAULT_PAGE_TITLE'));		}		$id = (int) @$menu->query['id'];		if ($menu && ($menu->query['option'] != 'com_contact' || $menu->query['view'] == 'contact' || $id != $this->category->id))		{			$path = array(array('title' => $this->category->title, 'link' => ''));			$category = $this->category->getParent();			while (($menu->query['option'] != 'com_contact' || $menu->query['view'] == 'contact' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => ContactHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->category->metadesc)		{			$this->document->setDescription($this->category->metadesc);		}		elseif (!$this->category->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->category->metakey)		{			$this->document->setMetadata('keywords', $this->category->metakey);		}		elseif (!$this->category->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->category->getMetadata()->get('author'));		}		$mdata = $this->category->getMetadata()->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}		// Add alternative feed link		if ($this->params->get('show_feed_link', 1) == 1)		{			$link	= '&format=feed&limitstart=';			$attribs = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$this->document->addHeadLink(JRoute::_($link.'&type=rss'), 'alternate', 'rel', $attribs);			$attribs = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$this->document->addHeadLink(JRoute::_($link.'&type=atom'), 'alternate', 'rel', $attribs);		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for form related behaviors * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlFormbehavior{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the Chosen JavaScript framework and supporting CSS into the document head	 *	 * If debugging mode is on an uncompressed version of Chosen is included for easier debugging.	 *	 * @param   string  $selector  Class for Chosen elements.	 * @param   mixed   $debug     Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function chosen($selector = '.advancedSelect', $debug = null)	{		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include jQuery		JHtml::_('jquery.framework');		// Add chosen.jquery.js language strings		JText::script('JGLOBAL_SELECT_SOME_OPTIONS');		JText::script('JGLOBAL_SELECT_AN_OPTION');		JText::script('JGLOBAL_SELECT_NO_RESULTS_MATCH');		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug  = (boolean) $config->get('debug');		}		JHtml::_('script', 'jui/chosen.jquery.min.js', false, true, false, false, $debug);		JHtml::_('stylesheet', 'jui/chosen.css', false, true);		JFactory::getDocument()->addScriptDeclaration("				jQuery(document).ready(function (){					jQuery('" . $selector . "').chosen({						disable_search_threshold : 10,						allow_single_deselect : true					});				});			"		);		self::$loaded[__METHOD__][$selector] = true;		return;	}	/**	 * Method to load the AJAX Chosen library	 *	 * If debugging mode is on an uncompressed version of AJAX Chosen is included for easier debugging.	 *	 * @param   JRegistry  $options  Options in a JRegistry object	 * @param   mixed      $debug    Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function ajaxchosen(JRegistry $options, $debug = null)	{		// Retrieve options/defaults		$selector       = $options->get('selector', '.tagfield');		$type           = $options->get('type', 'GET');		$url            = $options->get('url', null);		$dataType       = $options->get('dataType', 'json');		$jsonTermKey    = $options->get('jsonTermKey', 'term');		$afterTypeDelay = $options->get('afterTypeDelay', '500');		$minTermLength  = $options->get('minTermLength', '3');		JText::script('JGLOBAL_KEEP_TYPING');		JText::script('JGLOBAL_LOOKING_FOR');		// Ajax URL is mandatory		if (!empty($url))		{			if (isset(self::$loaded[__METHOD__][$selector]))			{				return;			}			// Include jQuery			JHtml::_('jquery.framework');			// Requires chosen to work			self::chosen($selector, $debug);			JHtml::_('script', 'jui/ajax-chosen.min.js', false, true, false, false, $debug);			JFactory::getDocument()->addScriptDeclaration("				(function($){					$(document).ready(function () {						$('" . $selector . "').ajaxChosen({							type: '" . $type . "',							url: '" . $url . "',							dataType: '" . $dataType . "',							jsonTermKey: '" . $jsonTermKey . "',							afterTypeDelay: '" . $afterTypeDelay . "',							minTermLength: '" . $minTermLength . "'						}, function (data) {							var results = [];							$.each(data, function (i, val) {								results.push({ value: val.value, text: val.text });							});							return results;						});					});				})(jQuery);				"			);			self::$loaded[__METHOD__][$selector] = true;		}		return;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');?><div class="remind <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<form id="user-registration" action="<?php echo JRoute::_('index.php?option=com_users&task=remind.remind'); ?>" method="post" class="form-validate form-horizontal">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		</fieldset>		<?php endforeach; ?>		<div class="form-actions">			<button type="submit" class="btn btn-primary validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" role="presentation" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_CONTENT_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_CONTENT_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_content');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('article.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$saveOrder	= $listOrder == 'a.ordering';$assoc		= isset($app->item_associations) ? $app->item_associations : 0;$n			= count($this->items);?><form action="<?php echo JRoute::_('index.php?option=com_content&view=articles'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true); ?>			</select>			<label class="selectlabel" for="filter_category_id"><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id')); ?>			</select>			<label class="selectlabel" for="filter_level"><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></label>			<select name="filter_level" class="inputbox" id="filter_level">				<option value=""><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></option>				<?php echo JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level')); ?>			</select>			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access')); ?>			</select>			<label class="selectlabel" for="filter_author_id"><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></label>			<select name="filter_author_id" class="inputbox"  id="filter_author_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_AUTHOR'); ?></option>				<?php echo JHtml::_('select.options', $this->authors, 'value', 'text', $this->state->get('filter.author_id')); ?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language')); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="nowrap featured-col">					<?php echo JHtml::_('grid.sort', 'JFEATURED', 'a.featured', $listDirn, $listOrder, null, 'desc'); ?>				</th>				<th class="title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'category_title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.ordering', $listDirn, $listOrder); ?>					<?php if ($saveOrder) : ?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'articles.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>				<th width="5%">					<?php echo JHtml::_('grid.sort', 'COM_CONTENT_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>				</th>				<?php endif;?>				<th class="title created-by-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th class="hits-col">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php foreach ($this->items as $i => $item) :			$item->max_ordering = 0; //??			$ordering   = ($listOrder == 'a.ordering');			$canCreate  = $user->authorise('core.create',     'com_content.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_content.article.' . $item->id);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;			$canEditOwn = $user->authorise('core.edit.own',   'com_content.article.' . $item->id) && $item->created_by == $userId;			$canChange  = $user->authorise('core.edit.state', 'com_content.article.' . $item->id) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'articles.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit || $canEditOwn) : ?>						<a href="<?php echo JRoute::_('index.php?option=com_content&task=article.edit&id='.$item->id); ?>">							<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias)); ?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'articles.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo JHtml::_('contentadministrator.featured', $item->featured, $i, $canChange); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) : ?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'articles.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'articles.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, ($item->catid == @$this->items[$i - 1]->catid), 'articles.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, ($item->catid == @$this->items[$i + 1]->catid), 'articles.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering; ?>" <?php echo $disabled; ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<?php if ($assoc) : ?>				<td class="center">					<?php if ($item->association):?>						<?php echo JHtml::_('contentadministrator.association', $item->id); ?>					<?php endif;?>				</td>				<?php endif;?>				<td class="center">					<?php if ($item->created_by_alias) : ?>						<?php echo $this->escape($item->author_name); ?>						<p class="smallsub"> <?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->created_by_alias)); ?></p>					<?php else : ?>						<?php echo $this->escape($item->author_name); ?>					<?php endif; ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->hits; ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Helper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for standard content style extensions. * * @package     Joomla.Libraries * @subpackage  Helper * @since       3.1 */class JHelperContent{	/**	 * Configure the Linkbar. Must be implemented by each extension.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   3.1	 */	public static function addSubmenu($vName)	{	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   integer  $categoryId  The category ID.	 * @param   integer  $id          The item ID.	 * @param   string   $assetName   The asset name	 *	 * @return  JObject	 *	 * @since   3.1	 */	public static function getActions($categoryId = 0, $id = 0, $assetName = '')	{		// Reverted a change for version 2.5.6		$user	= JFactory::getUser();		$result	= new JObject;		$actions = array(			'core.admin', 'core.manage', 'core.create', 'core.edit', 'core.edit.own', 'core.edit.state', 'core.delete'		);		foreach ($actions as $action)		{			$result->set($action, $user->authorise($action, $assetName));		}		return $result;	}	/**	 * Gets the current language	 *	 * @param   boolean  $detectBrowser  Flag indicating whether to use the browser language as a fallback.	 *	 * @return  string  The language string	 *	 * @since   3.1	 */	public static function getCurrentLanguage($detectBrowser = true)	{		$app = JFactory::getApplication();		$langCode = $app->input->cookie->getString(JApplication::getHash('language'));		// No cookie - let's try to detect browser language or use site default		if (!$langCode)		{			if ($detectBrowser)			{				$langCode = JLanguageHelper::detectLanguage();			}			else			{				$langCode = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');			}		}		return $langCode;	}	/**	* Gets the associated language ID	*	* @param   string  $langCode  The language code to look up	*	* @return  integer  The language ID	*	* @since   3.1	*/	public static function getLanguageId($langCode)	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true)			->select('lang_id')			->from('#__languages')			->where($db->quoteName('lang_code') . ' = ' . $db->quote($langCode));		$db->setQuery($query);		$id = $db->loadResult();		return $id;	}	/**	 * Gets a row of data from a table	 *	 * @param   JTable  $table  JTable instance for a row.	 *	 * @return  array  Associative array of all columns and values for a row in a table.	 *	 * @since   3.1	 */	public function getRowData($table)	{		$fields = $table->getFields();		$data = array();		foreach ($fields as &$field)		{			$columnName = $field->Field;			$value = $table->$columnName;			$data[$columnName] = $value;		}		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');$app = JFactory::getApplication();$input = $app->input;// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');// Create shortcut to parameters.$params = $this->state->get('params');$params = $params->toArray();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'tag.cancel' || document.formvalidator.isValid(document.id('item-form'))) {			<?php echo $this->form->getField('description')->save(); ?>			Joomla.submitform(task, document.getElementById('item-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_tags&layout=edit&id=' . (int) $this->item->id); ?>" method="post" name="adminForm" id="item-form" class="form-validate form-horizontal">	<div class="row-fluid">	<!-- Begin Content -->		<div class="span10 form-horizontal">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'general')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'general', JText::_('COM_TAGS_FIELDSET_DETAILS', true)); ?>					<fieldset class="adminform">						<div class="control-group form-inline">							<?php echo $this->form->getLabel('title'); ?> <?php echo $this->form->getInput('title'); ?> <?php echo $this->form->getLabel('catid'); ?> <?php echo $this->form->getInput('catid'); ?>						</div>						<?php echo $this->form->getInput('description'); ?>					</fieldset>						<div class="row-fluid">							<div class="span6">								<h4><?php echo JText::_('COM_TAGS_FIELDSET_URLS_AND_IMAGES');?></h4>								<div class="control-group">									<?php echo $this->form->getLabel('images'); ?>									<div class="controls">										<?php echo $this->form->getInput('images'); ?>									</div>								</div>								<?php foreach ($this->form->getGroup('images') as $field) : ?>									<div class="control-group">										<?php if (!$field->hidden) : ?>											<?php echo $field->label; ?>										<?php endif; ?>										<div class="controls">											<?php echo $field->input; ?>										</div>									</div>								<?php endforeach; ?>							</div>						</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>						<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('COM_TAGS_FIELDSET_PUBLISHING', true)); ?>							<div class="row-fluid">								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('alias'); ?>										</div>									</div>									<div class="control-group">										<div class="control-label">											<?php echo $this->form->getLabel('id'); ?>										</div>										<div class="controls">											<?php echo $this->form->getInput('id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_user_id'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_user_id'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_by_alias'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_by_alias'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('created_time'); ?>										<div class="controls">											<?php echo $this->form->getInput('created_time'); ?>										</div>									</div>								</div>								<div class="span6">									<div class="control-group">										<?php echo $this->form->getLabel('publish_up'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_up'); ?>										</div>									</div>									<div class="control-group">										<?php echo $this->form->getLabel('publish_down'); ?>										<div class="controls">											<?php echo $this->form->getInput('publish_down'); ?>										</div>									</div>									<?php if ($this->item->modified_user_id) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('modified_user_id'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_user_id'); ?>											</div>										</div>										<div class="control-group">											<?php echo $this->form->getLabel('modified_time'); ?>											<div class="controls">												<?php echo $this->form->getInput('modified_time'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->version) : ?>										<div class="control-group">											<?php echo $this->form->getLabel('version'); ?>											<div class="controls">												<?php echo $this->form->getInput('version'); ?>											</div>										</div>									<?php endif; ?>									<?php if ($this->item->hits) : ?>										<div class="control-group">											<div class="control-label">												<?php echo $this->form->getLabel('hits'); ?>											</div>											<div class="controls">												<?php echo $this->form->getInput('hits'); ?>											</div>										</div>									<?php endif; ?>								</div>							</div>						<?php echo JHtml::_('bootstrap.endTab'); ?>					<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>							<?php echo $this->loadTemplate('metadata'); ?>					<?php echo JHtml::_('bootstrap.endTab'); ?>									</div>				<input type="hidden" name="task" value="" />				<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Content -->		<!-- Begin Sidebar -->		<div class="span2">			<h4><?php echo JText::_('JDETAILS');?></h4>			<hr />			<fieldset class="form-vertical">				<div class="control-group">					<div class="controls">						<?php echo $this->form->getValue('title'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('parent_id'); ?>					<div class="controls">						<?php echo $this->form->getInput('parent_id'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('published'); ?>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('access'); ?>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>				</div>				<div class="control-group">					<?php echo $this->form->getLabel('language'); ?>					<div class="controls">						<?php echo $this->form->getInput('language'); ?>					</div>				</div>			</fieldset>		</div>		<!-- End Sidebar -->	</div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Mail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Email helper class, provides static methods to perform various tasks relevant * to the Joomla email routines. * * TODO: Test these methods as the regex work is first run and not tested thoroughly * * @package     Joomla.Platform * @subpackage  Mail * @since       11.1 */abstract class JMailHelper{	/**	 * Cleans single line inputs.	 *	 * @param   string  $value  String to be cleaned.	 *	 * @return  string  Cleaned string.	 *	 * @since   11.1	 */	public static function cleanLine($value)	{		return trim(preg_replace('/(%0A|%0D|\n+|\r+)/i', '', $value));	}	/**	 * Cleans multi-line inputs.	 *	 * @param   string  $value  Multi-line string to be cleaned.	 *	 * @return  string  Cleaned multi-line string.	 *	 * @since   11.1	 */	public static function cleanText($value)	{		return trim(preg_replace('/(%0A|%0D|\n+|\r+)(content-type:|to:|cc:|bcc:)/i', '', $value));	}	/**	 * Cleans any injected headers from the email body.	 *	 * @param   string  $body  email body string.	 *	 * @return  string  Cleaned email body string.	 *	 * @since   11.1	 */	public static function cleanBody($body)	{		// Strip all email headers from a string		return preg_replace("/((From:|To:|Cc:|Bcc:|Subject:|Content-type:) ([\S]+))/", "", $body);	}	/**	 * Cleans any injected headers from the subject string.	 *	 * @param   string  $subject  email subject string.	 *	 * @return  string  Cleaned email subject string.	 *	 * @since   11.1	 */	public static function cleanSubject($subject)	{		return preg_replace("/((From:|To:|Cc:|Bcc:|Content-type:) ([\S]+))/", "", $subject);	}	/**	 * Verifies that an email address does not have any extra headers injected into it.	 *	 * @param   string  $address  email address.	 *	 * @return  mixed   email address string or boolean false if injected headers are present.	 *	 * @since   11.1	 */	public static function cleanAddress($address)	{		if (preg_match("[\s;,]", $address))		{			return false;		}		return $address;	}	/**	 * Verifies that the string is in a proper email address format.	 *	 * @param   string  $email  String to be verified.	 *	 * @return  boolean  True if string has the correct format; false otherwise.	 *	 * @since   11.1	 */	public static function isEmailAddress($email)	{		// Split the email into a local and domain		$atIndex = strrpos($email, "@");		$domain = substr($email, $atIndex + 1);		$local = substr($email, 0, $atIndex);		// Check Length of domain		$domainLen = strlen($domain);		if ($domainLen < 1 || $domainLen > 255)		{			return false;		}		/*		 * Check the local address		 * We're a bit more conservative about what constitutes a "legal" address, that is, A-Za-z0-9!#$%&\'*+/=?^_`{|}~-		 * Also, the last character in local cannot be a period ('.')		 */		$allowed = 'A-Za-z0-9!#&*+=?_-';		$regex = "/^[$allowed][\.$allowed]{0,63}$/";		if (!preg_match($regex, $local) || substr($local, -1) == '.')		{			return false;		}		// No problem if the domain looks like an IP address, ish		$regex = '/^[0-9\.]+$/';		if (preg_match($regex, $domain))		{			return true;		}		// Check Lengths		$localLen = strlen($local);		if ($localLen < 1 || $localLen > 64)		{			return false;		}		// Check the domain		$domain_array = explode(".", rtrim($domain, '.'));		$regex = '/^[A-Za-z0-9-]{0,63}$/';		foreach ($domain_array as $domain)		{			// Must be something			if (!$domain)			{				return false;			}			// Check for invalid characters			if (!preg_match($regex, $domain))			{				return false;			}			// Check for a dash at the beginning of the domain			if (strpos($domain, '-') === 0)			{				return false;			}			// Check for a dash at the end of the domain			$length = strlen($domain) - 1;			if (strpos($domain, '-', $length) === $length)			{				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content categories view. * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewCategories extends JViewLegacy{	protected $state = null;	protected $item = null;	protected $items = null;	/**	 * Display the view	 *	 * @return  mixed  False on error, null otherwise.	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		$parent		= $this->get('Parent');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		if ($items === false)		{			JError::raiseError(404, JText::_('COM_CONTENT_ERROR_CATEGORY_NOT_FOUND'));			return false;		}		if ($parent == false)		{			JError::raiseError(404, JText::_('COM_CONTENT_ERROR_PARENT_CATEGORY_NOT_FOUND'));			return false;		}		$params = &$state->params;		$items = array($parent->id => $items);		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		$this->maxLevelcat = $params->get('maxLevelcat', -1);		$this->params = &$params;		$this->parent = &$parent;		$this->items  = &$items;		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$title	= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_login * * @package     Joomla.Site * @subpackage  mod_login * @since       1.5 */class ModLoginHelper{	public static function getReturnURL($params, $type)	{		$app	= JFactory::getApplication();		$router = $app->getRouter();		$url = null;		if ($itemid = $params->get($type))		{			$db		= JFactory::getDbo();			$query	= $db->getQuery(true)				->select($db->quoteName('link'))				->from($db->quoteName('#__menu'))				->where($db->quoteName('published') . '=1')				->where($db->quoteName('id') . '=' . $db->quote($itemid));			$db->setQuery($query);			if ($link = $db->loadResult())			{				if ($router->getMode() == JROUTER_MODE_SEF)				{					$url = 'index.php?Itemid='.$itemid;				}				else {					$url = $link.'&Itemid='.$itemid;				}			}		}		if (!$url)		{			// Stay on the same page			$uri = clone JURI::getInstance();			$vars = $router->parse($uri);			unset($vars['lang']);			if ($router->getMode() == JROUTER_MODE_SEF)			{				if (isset($vars['Itemid']))				{					$itemid = $vars['Itemid'];					$menu = $app->getMenu();					$item = $menu->getItem($itemid);					unset($vars['Itemid']);					if (isset($item) && $vars == $item->query)					{						$url = 'index.php?Itemid='.$itemid;					}					else {						$url = 'index.php?'.JURI::buildQuery($vars).'&Itemid='.$itemid;					}				}				else				{					$url = 'index.php?'.JURI::buildQuery($vars);				}			}			else			{				$url = 'index.php?'.JURI::buildQuery($vars);			}		}		return base64_encode($url);	}	public static function getType()	{		$user = JFactory::getUser();		return (!$user->get('guest')) ? 'logout' : 'login';	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML Article View class for the Content component * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentViewArticle extends JViewLegacy{	protected $item;	protected $params;	protected $print;	protected $state;	protected $user;	public function display($tpl = null)	{		$app		= JFactory::getApplication();		$user		= JFactory::getUser();		$userId		= $user->get('id');		$dispatcher	= JEventDispatcher::getInstance();		$this->item  = $this->get('Item');		$this->print = $app->input->getBool('print');		$this->state = $this->get('State');		$this->user  = $user;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseWarning(500, implode("\n", $errors));			return false;		}		// Create a shortcut for $item.		$item = $this->item;		$item->tagLayout      = new JLayoutFile('joomla.content.tags');		// Add router helpers.		$item->slug			= $item->alias ? ($item->id.':'.$item->alias) : $item->id;		$item->catslug		= $item->category_alias ? ($item->catid.':'.$item->category_alias) : $item->catid;		$item->parent_slug = $item->parent_alias ? ($item->parent_id . ':' . $item->parent_alias) : $item->parent_id;		// No link for ROOT category		if ($item->parent_alias == 'root')		{			$item->parent_slug = null;		}		// TODO: Change based on shownoauth		$item->readmore_link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug));		// Merge article params. If this is single-article view, menu params override article params		// Otherwise, article params override menu item params		$this->params	= $this->state->get('params');		$active	= $app->getMenu()->getActive();		$temp	= clone ($this->params);		// Check to see which parameters should take priority		if ($active)		{			$currentLink = $active->link;			// If the current view is the active item and an article view for this article, then the menu item params take priority			if (strpos($currentLink, 'view=article') && (strpos($currentLink, '&id='.(string) $item->id)))			{				// $item->params are the article params, $temp are the menu item params				// Merge so that the menu item params take priority				$item->params->merge($temp);				// Load layout from active query (in case it is an alternative menu item)				if (isset($active->query['layout']))				{					$this->setLayout($active->query['layout']);				}			}			else {				// Current view is not a single article, so the article params take priority here				// Merge the menu item params with the article params so that the article params take priority				$temp->merge($item->params);				$item->params = $temp;				// Check for alternative layouts (since we are not in a single-article menu item)				// Single-article menu item layout takes priority over alt layout for an article				if ($layout = $item->params->get('article_layout'))				{					$this->setLayout($layout);				}			}		}		else		{			// Merge so that article params take priority			$temp->merge($item->params);			$item->params = $temp;			// Check for alternative layouts (since we are not in a single-article menu item)			// Single-article menu item layout takes priority over alt layout for an article			if ($layout = $item->params->get('article_layout'))			{				$this->setLayout($layout);			}		}		$offset = $this->state->get('list.offset');		// Check the view access to the article (the model has already computed the values).		if ($item->params->get('access-view') != true && (($item->params->get('show_noauth') != true &&  $user->get('guest') ))) {						JError::raiseWarning(403, JText::_('JERROR_ALERTNOAUTHOR'));				return;		}		if ($item->params->get('show_intro', '1') == '1')		{			$item->text = $item->introtext.' '.$item->fulltext;		}		elseif ($item->fulltext)		{			$item->text = $item->fulltext;		}		else  {			$item->text = $item->introtext;		}		$item->tags = new JHelperTags;		$item->tags->getItemTags('com_content.article', $this->item->id);		// Process the content plugins.		JPluginHelper::importPlugin('content');		$results = $dispatcher->trigger('onContentPrepare', array ('com_content.article', &$item, &$this->params, $offset));		$item->event = new stdClass;		$results = $dispatcher->trigger('onContentAfterTitle', array('com_content.article', &$item, &$this->params, $offset));		$item->event->afterDisplayTitle = trim(implode("\n", $results));		$results = $dispatcher->trigger('onContentBeforeDisplay', array('com_content.article', &$item, &$this->params, $offset));		$item->event->beforeDisplayContent = trim(implode("\n", $results));		$results = $dispatcher->trigger('onContentAfterDisplay', array('com_content.article', &$item, &$this->params, $offset));		$item->event->afterDisplayContent = trim(implode("\n", $results));		// Increment the hit counter of the article.		if (!$this->params->get('intro_only') && $offset == 0)		{			$model = $this->getModel();			$model->hit();		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->item->params->get('pageclass_sfx'));		$this->_prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document	 */	protected function _prepareDocument()	{		$app	= JFactory::getApplication();		$menus	= $app->getMenu();		$pathway = $app->getPathway();		$title = null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('JGLOBAL_ARTICLES'));		}		$title = $this->params->get('page_title', '');		$id = (int) @$menu->query['id'];		// if the menu item does not concern this article		if ($menu && ($menu->query['option'] != 'com_content' || $menu->query['view'] != 'article' || $id != $this->item->id))		{			// If this is not a single article menu item, set the page title to the article title			if ($this->item->title)			{				$title = $this->item->title;			}			$path = array(array('title' => $this->item->title, 'link' => ''));			$category = JCategories::getInstance('Content')->get($this->item->catid);			while ($category && ($menu->query['option'] != 'com_content' || $menu->query['view'] == 'article' || $id != $category->id) && $category->id > 1)			{				$path[] = array('title' => $category->title, 'link' => ContentHelperRoute::getCategoryRoute($category->id));				$category = $category->getParent();			}			$path = array_reverse($path);			foreach ($path as $item)			{				$pathway->addItem($item['title'], $item['link']);			}		}		// Check for empty title and add site name if param is set		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		if (empty($title))		{			$title = $this->item->title;		}		$this->document->setTitle($title);		if ($this->item->metadesc)		{			$this->document->setDescription($this->item->metadesc);		}		elseif (!$this->item->metadesc && $this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->item->metakey)		{			$this->document->setMetadata('keywords', $this->item->metakey);		}		elseif (!$this->item->metakey && $this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		if ($app->getCfg('MetaAuthor') == '1')		{			$this->document->setMetaData('author', $this->item->author);		}		$mdata = $this->item->metadata->toArray();		foreach ($mdata as $k => $v)		{			if ($v)			{				$this->document->setMetadata($k, $v);			}		}		// If there is a pagebreak heading or title, add it to the page title		if (!empty($this->item->page_title))		{			$this->item->title = $this->item->title . ' - ' . $this->item->page_title;			$this->document->setTitle($this->item->page_title . ' - ' . JText::sprintf('PLG_CONTENT_PAGEBREAK_PAGE_NUM', $this->state->get('list.offset') + 1));		}		if ($this->print)		{			$this->document->setMetaData('robots', 'noindex, nofollow');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$langs  = ModLoginHelper::getLanguageList();$return = ModLoginHelper::getReturnURI();require JModuleHelper::getLayoutPath('mod_login', $params->get('layout', 'default'));
