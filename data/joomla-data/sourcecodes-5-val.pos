<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JSON format handler for JRegistry. * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistryFormatJSON extends JRegistryFormat{	/**	 * Converts an object into a JSON formatted string.	 *	 * @param   object  $object   Data source object.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  string  JSON formatted string.	 *	 * @since   11.1	 */	public function objectToString($object, $options = array())	{		return json_encode($object);	}	/**	 * Parse a JSON formatted string and convert it into an object.	 *	 * If the string is not in JSON format, this method will attempt to parse it as INI format.	 *	 * @param   string  $data     JSON formatted string to convert.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  object   Data object.	 *	 * @since   11.1	 */	public function stringToObject($data, array $options = array('processSections' => false))	{		$data = trim($data);		if ((substr($data, 0, 1) != '{') && (substr($data, -1, 1) != '}'))		{			$ini = JRegistryFormat::getInstance('INI');			$obj = $ini->stringToObject($data, $options);		}		else		{			$obj = json_decode($data);		}		return $obj;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base Application Class * * @package     Joomla.Platform * @subpackage  Application * @since       12.1 */abstract class JApplicationBase{	/**	 * The application dispatcher object.	 *	 * @var    JEventDispatcher	 * @since  12.1	 */	protected $dispatcher;	/**	 * The application identity object.	 *	 * @var    JUser	 * @since  12.1	 */	protected $identity;	/**	 * The application input object.	 *	 * @var    JInput	 * @since  12.1	 */	public $input = null;	/**	 * Method to close the application.	 *	 * @param   integer  $code  The exit code (optional; default is 0).	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   12.1	 */	public function close($code = 0)	{		exit($code);	}	/**	 * Get the application identity.	 *	 * @return  mixed  A JUser object or null.	 *	 * @since   12.1	 */	public function getIdentity()	{		return $this->identity;	}	/**	 * Registers a handler to a particular event group.	 *	 * @param   string    $event    The event name.	 * @param   callback  $handler  The handler, a function or an instance of a event object.	 *	 * @return  JApplicationBase  The application to allow chaining.	 *	 * @since   12.1	 */	public function registerEvent($event, $handler)	{		if ($this->dispatcher instanceof JEventDispatcher)		{			$this->dispatcher->register($event, $handler);		}		return $this;	}	/**	 * Calls all handlers associated with an event group.	 *	 * @param   string  $event  The event name.	 * @param   array   $args   An array of arguments (optional).	 *	 * @return  array   An array of results from each function call, or null if no dispatcher is defined.	 *	 * @since   12.1	 */	public function triggerEvent($event, array $args = null)	{		if ($this->dispatcher instanceof JEventDispatcher)		{			return $this->dispatcher->trigger($event, $args);		}		return null;	}	/**	 * Allows the application to load a custom or default dispatcher.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create event	 * dispatchers, if required, based on more specific needs.	 *	 * @param   JEventDispatcher  $dispatcher  An optional dispatcher object. If omitted, the factory dispatcher is created.	 *	 * @return  JApplicationBase This method is chainable.	 *	 * @since   12.1	 */	public function loadDispatcher(JEventDispatcher $dispatcher = null)	{		$this->dispatcher = ($dispatcher === null) ? JEventDispatcher::getInstance() : $dispatcher;		return $this;	}	/**	 * Allows the application to load a custom or default identity.	 *	 * The logic and options for creating this object are adequately generic for default cases	 * but for many applications it will make sense to override this method and create an identity,	 * if required, based on more specific needs.	 *	 * @param   JUser  $identity  An optional identity object. If omitted, the factory user is created.	 *	 * @return  JApplicationBase This method is chainable.	 *	 * @since   12.1	 */	public function loadIdentity(JUser $identity = null)	{		$this->identity = ($identity === null) ? JFactory::getUser() : $identity;		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Logger Base Class * * This class is used to be the basis of logger classes to allow for defined functions * to exist regardless of the child class. * * @package     Joomla.Platform * @subpackage  Log * @since       12.2 */abstract class JLogLogger{	/**	 * Options array for the JLog instance.	 * @var    array	 * @since  12.2	 */	protected $options = array();	/**	 * @var    array  Translation array for JLogEntry priorities to text strings.	 * @since  12.2	 */	protected $priorities = array(		JLog::EMERGENCY => 'EMERGENCY',		JLog::ALERT => 'ALERT',		JLog::CRITICAL => 'CRITICAL',		JLog::ERROR => 'ERROR',		JLog::WARNING => 'WARNING',		JLog::NOTICE => 'NOTICE',		JLog::INFO => 'INFO',		JLog::DEBUG => 'DEBUG');	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   12.2	 */	public function __construct(array &$options)	{		// Set the options for the class.		$this->options = & $options;	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   12.2	 */	abstract public function addEntry(JLogEntry $entry);}/** * Deprecated class placeholder.  You should use JAccessRule instead. * * @package     Joomla.Platform * @subpackage  Access * @since       11.1 * @deprecated  13.3 */abstract class JLogger extends JLogLogger{	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 * @deprecated  13.3	 */	public function __construct(array &$options)	{		JLog::add('JLogger is deprecated. Use JLogLogger instead.', JLog::WARNING, 'deprecated');		parent::__construct($options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Manage View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewManage extends InstallerViewDefault{	protected $items;	protected $pagination;	protected $form;	protected $state;	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  mixed|void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		// Get data from the model		$this->state      = $this->get('State');		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_INSTALLER_MSG_MANAGE_NOEXTENSION'),				'warning'			);		}		// Include the component HTML helpers.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Display the view		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= InstallerHelper::getActions();		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('manage.publish', 'JTOOLBAR_ENABLE', true);			JToolbarHelper::unpublish('manage.unpublish', 'JTOOLBAR_DISABLE', true);			JToolbarHelper::divider();		}		JToolbarHelper::custom('manage.refresh', 'refresh', 'refresh', 'JTOOLBAR_REFRESH_CACHE', true);		JToolbarHelper::divider();		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'manage.remove', 'JTOOLBAR_UNINSTALL');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_MANAGE');		JHtmlSidebar::setAction('index.php?option=com_installer&view=manage');		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_CLIENT_SELECT'),			'filter_client_id',			JHtml::_('select.options', array('0' => 'JSITE', '1' => 'JADMINISTRATOR'), 'value', 'text', $this->state->get('filter.client_id'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_STATE_SELECT'),			'filter_status',			JHtml::_('select.options', array('0' => 'JDISABLED', '1' => 'JENABLED', '2' => 'JPROTECTED'), 'value', 'text', $this->state->get('filter.status'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_TYPE_SELECT'),			'filter_type',			JHtml::_('select.options', InstallerHelper::getExtensionTypes(), 'value', 'text', $this->state->get('filter.type'), true)		);		JHtmlSidebar::addFilter(			JText::_('COM_INSTALLER_VALUE_FOLDER_SELECT'),			'filter_group',			JHtml::_('select.options', array_merge(InstallerHelper::getExtensionGroupes(), array('*' => JText::_('COM_INSTALLER_VALUE_FOLDER_NONAPPLICABLE'))), 'value', 'text', $this->state->get('filter.group'), true)		);		parent::addToolbar();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_ADMINISTRATOR . '/components/com_templates/helpers/templates.php';JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$clientId       = $this->item->client_id;$state          = 1;$templates      = array_keys(ModulesHelper::getTemplates($clientId, $state));$templateGroups = array();// Add an empty value to be able to deselect a module position$option = ModulesHelper::createOption();$templateGroups[''] = ModulesHelper::createOptionGroup('', array($option));// Add positions from templates$isTemplatePosition = false;foreach ($templates as $template){	$options = array();	$positions = TemplatesHelper::getPositions($clientId, $template);	foreach ($positions as $position)	{		$text = ModulesHelper::getTranslatedModulePosition($clientId, $template, $position) . ' [' . $position . ']';		$options[] = ModulesHelper::createOption($position, $text);		if (!$isTemplatePosition && $this->item->position === $position)		{			$isTemplatePosition = true;		}	}	$templateGroups[$template] = ModulesHelper::createOptionGroup(ucfirst($template), $options);}// Add custom position to options$customGroupText = JText::_('COM_MODULES_CUSTOM_POSITION');$editPositions = true;$customPositions = ModulesHelper::getPositions($clientId, $editPositions);$templateGroups[$customGroupText] = ModulesHelper::createOptionGroup($customGroupText, $customPositions);// Build field$attr = array(	'id'          => 'jform_position',	'list.select' => $this->item->position,	'list.attr'   => 'class="chzn-custom-value input-xlarge" '		. 'data-custom_group_text="' . $customGroupText . '" '		. 'data-no_results_text="' . JText::_('COM_MODULES_ADD_CUSTOM_POSITION') . '" '		. 'data-placeholder="' . JText::_('COM_MODULES_TYPE_OR_SELECT_POSITION') . '" ');echo JHtml::_('select.groupedlist', $templateGroups, 'jform[position]', $attr);
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_xhtmlid($module, &$params, &$attribs){	if ($module->content)	{		?>		<div id="<?php echo (int) $attribs['id'] ?>">				<?php echo $module->content; ?>				<div class="clr"></div>		</div>		<?php	} elseif ($attribs['id'] == "submenu-box")	{		?>		<div id="no-submenu"></div>		<?php	}}?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Admin component * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminViewHelp extends JViewLegacy{	/**	 * @var string the search string	 */	protected $help_search = null;	/**	 * @var string the page to be viewed	 */	protected $page = null;	/**	 * @var string the iso language tag	 */	protected $lang_tag = null;	/**	 * @var array Table of contents	 */	protected $toc = null;	/**	 * @var string url for the latest version check	 */	protected $latest_version_check = 'http://www.joomla.org/download.html';	/**	 * @var string url for the start here link.	 */	protected $start_here = null;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->help_search			= $this->get('HelpSearch');		$this->page					= $this->get('Page');		$this->toc					= $this->get('Toc');		$this->lang_tag				= $this->get('LangTag');		$this->latest_version_check	= $this->get('LatestVersionCheck');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Setup the Toolbar	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_ADMIN_HELP'), 'help_header.png');	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Request * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Create the request global object */$GLOBALS['_JREQUEST'] = array();/** * Set the available masks for cleaning variables */const JREQUEST_NOTRIM    = 1;const JREQUEST_ALLOWRAW  = 2;const JREQUEST_ALLOWHTML = 4;JLog::add('JRequest is deprecated.', JLog::WARNING, 'deprecated');/** * JRequest Class * * This class serves to provide the Joomla Platform with a common interface to access * request variables.  This includes $_POST, $_GET, and naturally $_REQUEST.  Variables * can be passed through an input filter to avoid injection or returned raw. * * @package     Joomla.Legacy * @subpackage  Request * @since       11.1 * @deprecated  12.1  Get the JInput object from the application instead */class JRequest{	/**	 * Gets the full request path.	 *	 * @return  string	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getURI()	{		$uri = JURI::getInstance();		return $uri->toString(array('path', 'query'));	}	/**	 * Gets the request method.	 *	 * @return  string	 *	 * @since   11.1	 *	 * @deprecated   12.1 Use JInput::getMethod() instead	 */	public static function getMethod()	{		$method = strtoupper($_SERVER['REQUEST_METHOD']);		return $method;	}	/**	 * Fetches and returns a given variable.	 *	 * The default behaviour is fetching variables depending on the	 * current request method: GET and HEAD will result in returning	 * an entry from $_GET, POST and PUT will result in returning an	 * entry from $_POST.	 *	 * You can force the source by setting the $hash parameter:	 *	 * post    $_POST	 * get     $_GET	 * files   $_FILES	 * cookie  $_COOKIE	 * env     $_ENV	 * server  $_SERVER	 * method  via current $_SERVER['REQUEST_METHOD']	 * default $_REQUEST	 *	 * @param   string   $name     Variable name.	 * @param   string   $default  Default value if the variable does not exist.	 * @param   string   $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 * @param   string   $type     Return type for the variable, for valid values see {@link JFilterInput::clean()}.	 * @param   integer  $mask     Filter mask for the variable.	 *	 * @return  mixed  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1  Use JInput::Get	 */	public static function getVar($name, $default = null, $hash = 'default', $type = 'none', $mask = 0)	{		// Ensure hash and type are uppercase		$hash = strtoupper($hash);		if ($hash === 'METHOD')		{			$hash = strtoupper($_SERVER['REQUEST_METHOD']);		}		$type = strtoupper($type);		$sig = $hash . $type . $mask;		// Get the input hash		switch ($hash)		{			case 'GET':				$input = &$_GET;				break;			case 'POST':				$input = &$_POST;				break;			case 'FILES':				$input = &$_FILES;				break;			case 'COOKIE':				$input = &$_COOKIE;				break;			case 'ENV':				$input = &$_ENV;				break;			case 'SERVER':				$input = &$_SERVER;				break;			default:				$input = &$_REQUEST;				$hash = 'REQUEST';				break;		}		if (isset($GLOBALS['_JREQUEST'][$name]['SET.' . $hash]) && ($GLOBALS['_JREQUEST'][$name]['SET.' . $hash] === true))		{			// Get the variable from the input hash			$var = (isset($input[$name]) && $input[$name] !== null) ? $input[$name] : $default;			$var = self::_cleanVar($var, $mask, $type);		}		elseif (!isset($GLOBALS['_JREQUEST'][$name][$sig]))		{			if (isset($input[$name]) && $input[$name] !== null)			{				// Get the variable from the input hash and clean it				$var = self::_cleanVar($input[$name], $mask, $type);				$GLOBALS['_JREQUEST'][$name][$sig] = $var;			}			elseif ($default !== null)			{				// Clean the default value				$var = self::_cleanVar($default, $mask, $type);			}			else			{				$var = $default;			}		}		else		{			$var = $GLOBALS['_JREQUEST'][$name][$sig];		}		return $var;	}	/**	 * Fetches and returns a given filtered variable. The integer	 * filter will allow only digits and the - sign to be returned. This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  integer  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getInt($name, $default = 0, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'int');	}	/**	 * Fetches and returns a given filtered variable. The unsigned integer	 * filter will allow only digits to be returned. This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  integer  Requested variable.	 *	 * @deprecated  12.1	 * @since       11.1	 */	public static function getUInt($name, $default = 0, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'uint');	}	/**	 * Fetches and returns a given filtered variable.  The float	 * filter only allows digits and periods.  This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  float  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getFloat($name, $default = 0.0, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'float');	}	/**	 * Fetches and returns a given filtered variable. The bool	 * filter will only return true/false bool values. This is	 * currently only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  boolean  Requested variable.	 *	 * @deprecated  12.1	 * @since       11.1	 */	public static function getBool($name, $default = false, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'bool');	}	/**	 * Fetches and returns a given filtered variable. The word	 * filter only allows the characters [A-Za-z_]. This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  string  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getWord($name, $default = '', $hash = 'default')	{		return self::getVar($name, $default, $hash, 'word');	}	/**	 * Cmd (Word and Integer0 filter	 *	 * Fetches and returns a given filtered variable. The cmd	 * filter only allows the characters [A-Za-z0-9.-_]. This is	 * currently only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name	 * @param   string  $default  Default value if the variable does not exist	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD)	 *	 * @return  string  Requested variable	 *	 * @deprecated  12.1	 * @since       11.1	 */	public static function getCmd($name, $default = '', $hash = 'default')	{		return self::getVar($name, $default, $hash, 'cmd');	}	/**	 * Fetches and returns a given filtered variable. The string	 * filter deletes 'bad' HTML code, if not overridden by the mask.	 * This is currently only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string   $name     Variable name	 * @param   string   $default  Default value if the variable does not exist	 * @param   string   $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD)	 * @param   integer  $mask     Filter mask for the variable	 *	 * @return  string   Requested variable	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getString($name, $default = '', $hash = 'default', $mask = 0)	{		// Cast to string, in case JREQUEST_ALLOWRAW was specified for mask		return (string) self::getVar($name, $default, $hash, 'string', $mask);	}	/**	 * Set a variable in one of the request variables.	 *	 * @param   string   $name       Name	 * @param   string   $value      Value	 * @param   string   $hash       Hash	 * @param   boolean  $overwrite  Boolean	 *	 * @return  string   Previous value	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function setVar($name, $value = null, $hash = 'method', $overwrite = true)	{		// If overwrite is true, makes sure the variable hasn't been set yet		if (!$overwrite && array_key_exists($name, $_REQUEST))		{			return $_REQUEST[$name];		}		// Clean global request var		$GLOBALS['_JREQUEST'][$name] = array();		// Get the request hash value		$hash = strtoupper($hash);		if ($hash === 'METHOD')		{			$hash = strtoupper($_SERVER['REQUEST_METHOD']);		}		$previous = array_key_exists($name, $_REQUEST) ? $_REQUEST[$name] : null;		switch ($hash)		{			case 'GET':				$_GET[$name] = $value;				$_REQUEST[$name] = $value;				break;			case 'POST':				$_POST[$name] = $value;				$_REQUEST[$name] = $value;				break;			case 'COOKIE':				$_COOKIE[$name] = $value;				$_REQUEST[$name] = $value;				break;			case 'FILES':				$_FILES[$name] = $value;				break;			case 'ENV':				$_ENV['name'] = $value;				break;			case 'SERVER':				$_SERVER['name'] = $value;				break;		}		// Mark this variable as 'SET'		$GLOBALS['_JREQUEST'][$name]['SET.' . $hash] = true;		$GLOBALS['_JREQUEST'][$name]['SET.REQUEST'] = true;		return $previous;	}	/**	 * Fetches and returns a request array.	 *	 * The default behaviour is fetching variables depending on the	 * current request method: GET and HEAD will result in returning	 * $_GET, POST and PUT will result in returning $_POST.	 *	 * You can force the source by setting the $hash parameter:	 *	 * post     $_POST	 * get      $_GET	 * files    $_FILES	 * cookie   $_COOKIE	 * env      $_ENV	 * server   $_SERVER	 * method   via current $_SERVER['REQUEST_METHOD']	 * default  $_REQUEST	 *	 * @param   string   $hash  to get (POST, GET, FILES, METHOD).	 * @param   integer  $mask  Filter mask for the variable.	 *	 * @return  mixed    Request hash.	 *	 * @deprecated  12.1   User JInput::get	 * @see         JInput	 * @since       11.1	 */	public static function get($hash = 'default', $mask = 0)	{		$hash = strtoupper($hash);		if ($hash === 'METHOD')		{			$hash = strtoupper($_SERVER['REQUEST_METHOD']);		}		switch ($hash)		{			case 'GET':				$input = $_GET;				break;			case 'POST':				$input = $_POST;				break;			case 'FILES':				$input = $_FILES;				break;			case 'COOKIE':				$input = $_COOKIE;				break;			case 'ENV':				$input = &$_ENV;				break;			case 'SERVER':				$input = &$_SERVER;				break;			default:				$input = $_REQUEST;				break;		}		$result = self::_cleanVar($input, $mask);		return $result;	}	/**	 * Sets a request variable.	 *	 * @param   array    $array      An associative array of key-value pairs.	 * @param   string   $hash       The request variable to set (POST, GET, FILES, METHOD).	 * @param   boolean  $overwrite  If true and an existing key is found, the value is overwritten, otherwise it is ignored.	 *	 * @return  void	 *	 * @deprecated  12.1  Use JInput::Set	 * @see         JInput::Set	 * @since       11.1	 */	public static function set($array, $hash = 'default', $overwrite = true)	{		foreach ($array as $key => $value)		{			self::setVar($key, $value, $hash, $overwrite);		}	}	/**	 * Checks for a form token in the request.	 *	 * Use in conjunction with JHtml::_('form.token').	 *	 * @param   string  $method  The request method in which to look for the token key.	 *	 * @return  boolean  True if found and valid, false otherwise.	 *	 * @deprecated  12.1 Use JSession::checkToken() instead. Note that 'default' has to become 'request'.	 * @since       11.1	 */	public static function checkToken($method = 'post')	{		if ($method == 'default')		{			$method = 'request';		}		return JSession::checkToken($method);	}	/**	 * Clean up an input variable.	 *	 * @param   mixed    $var   The input variable.	 * @param   integer  $mask  Filter bit mask.	 *                           1 = no trim: If this flag is cleared and the input is a string, the string will have leading and trailing	 *                               whitespace trimmed.	 *                           2 = allow_raw: If set, no more filtering is performed, higher bits are ignored.	 *                           4 = allow_html: HTML is allowed, but passed through a safe HTML filter first. If set, no more filtering	 *                               is performed. If no bits other than the 1 bit is set, a strict filter is applied.	 * @param   string   $type  The variable type {@see JFilterInput::clean()}.	 *	 * @return  mixed  Same as $var	 *	 * @deprecated  12.1	 * @since       11.1	 */	protected static function _cleanVar($var, $mask = 0, $type = null)	{		// If the no trim flag is not set, trim the variable		if (!($mask & 1) && is_string($var))		{			$var = trim($var);		}		// Now we handle input filtering		if ($mask & 2)		{			// If the allow raw flag is set, do not modify the variable			$var = $var;		}		elseif ($mask & 4)		{			// If the allow HTML flag is set, apply a safe HTML filter to the variable			$safeHtmlFilter = JFilterInput::getInstance(null, null, 1, 1);			$var = $safeHtmlFilter->clean($var, $type);		}		else		{			// Since no allow flags were set, we will apply the most strict filter to the variable			// $tags, $attr, $tag_method, $attr_method, $xss_auto use defaults.			$noHtmlFilter = JFilterInput::getInstance();			$var = $noHtmlFilter->clean($var, $type);		}		return $var;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * Utility class to render a list view sidebar * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlSidebar{	/**	 * Menu entries	 *	 * @var    array	 * @since  3.0	 */	protected static $entries = array();	/**	 * Filters	 *	 * @var    array	 * @since  3.0	 */	protected static $filters = array();	/**	 * Value for the action attribute of the form.	 *	 * @var    string	 * @since  3.0	 */	protected static $action = '';	/**	 * Render the sidebar.	 *	 * @return  string  The necessary HTML to display the sidebar	 *	 * @since   3.0	 */	public static function render()	{		// Collect display data		$data                 = new stdClass;		$data->list           = self::getEntries();		$data->filters        = self::getFilters();		$data->action         = self::getAction();		$data->displayMenu    = count($data->list);		$data->displayFilters = count($data->filters);		$data->hide           = JFactory::getApplication()->input->getBool('hidemainmenu');		// Create a layout object and ask it to render the sidebar		$layout      = new JLayoutFile('joomla.sidebars.submenu');		$sidebarHtml = $layout->render($data);		return $sidebarHtml;	}	/**	 * Method to add a menu item to submenu.	 *	 * @param   string  $name    Name of the menu item.	 * @param   string  $link    URL of the menu item.	 * @param   bool    $active  True if the item is active, false otherwise.	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addEntry($name, $link = '', $active = false)	{		array_push(self::$entries, array($name, $link, $active));	}	/**	 * Returns an array of all submenu entries	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getEntries()	{		return self::$entries;	}	/**	 * Method to add a filter to the submenu	 *	 * @param   string  $label      Label for the menu item.	 * @param   string  $name       Name for the filter. Also used as id.	 * @param   string  $options    Options for the select field.	 * @param   bool    $noDefault  Don't the label as the empty option	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addFilter($label, $name, $options, $noDefault = false)	{		array_push(self::$filters, array('label' => $label, 'name' => $name, 'options' => $options, 'noDefault' => $noDefault));	}	/**	 * Returns an array of all filters	 *	 * @return  array	 *	 * @since   3.0	 */	public static function getFilters()	{		return self::$filters;	}	/**	 * Set value for the action attribute of the filter form	 *	 * @param   string  $action  Value for the action attribute of the form	 *	 * @return  void	 *	 * @since   3.0	 */	public static function setAction($action)	{		self::$action = $action;	}	/**	 * Get value for the action attribute of the filter form	 *	 * @return  string	 *	 * @since   3.0	 */	public static function getAction()	{		return self::$action;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $menu JAdminCSSMenu */$shownew = (boolean) $params->get('shownew', 1);$showhelp = $params->get('showhelp', 1);$user = JFactory::getUser();$lang = JFactory::getLanguage();//// Site SubMenu//$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_CONTROL_PANEL'), 'index.php', 'class:cpanel'), true);$menu->getParent();//// Users Submenu//if ($user->authorise('core.manage', 'com_users')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USERS'), '#'), true	);	$createUser = $shownew && $user->authorise('core.create', 'com_users');	$createGrp = $user->authorise('core.admin', 'com_users');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USER_MANAGER'), 'index.php?option=com_users&view=users', 'class:user'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_USER'), 'index.php?option=com_users&task=user.add', 'class:newarticle')		);		$menu->getParent();	}	if ($createGrp)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_GROUPS'), 'index.php?option=com_users&view=groups', 'class:groups'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_GROUP'), 'index.php?option=com_users&task=group.add', 'class:newarticle')			);			$menu->getParent();		}		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_LEVELS'), 'index.php?option=com_users&view=levels', 'class:levels'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_LEVEL'), 'index.php?option=com_users&task=level.add', 'class:newarticle')			);			$menu->getParent();		}	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTES'), 'index.php?option=com_users&view=notes', 'class:user-note'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_NOTE'), 'index.php?option=com_users&task=note.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTE_CATEGORIES'), 'index.php?option=com_categories&view=categories&extension=com_users.notes', 'class:category'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_users.notes', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MASS_MAIL_USERS'), 'index.php?option=com_users&view=mail', 'class:massmail')	);	$menu->getParent();}//// Menus Submenu//if ($user->authorise('core.manage', 'com_menus')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENUS'), '#'), true	);	$createMenu = $shownew && $user->authorise('core.create', 'com_menus');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER'), 'index.php?option=com_menus&view=menus', 'class:menumgr'), $createMenu	);	if ($createMenu)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU'), 'index.php?option=com_menus&view=menu&layout=edit', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	// Menu Types	foreach (ModMenuHelper::getMenus() as $menuType)	{		$alt = '*' .$menuType->sef. '*';		if ($menuType->home == 0)		{			$titleicon = '';		}		elseif ($menuType->home == 1 && $menuType->language == '*')		{			$titleicon = ' <i class="icon-home"></i>';		}		elseif ($menuType->home > 1)		{			$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $menuType->home, array('title' => JText::_('MOD_MENU_HOME_MULTIPLE')), true).'</span>';		}		else		{			$image = JHtml::_('image', 'mod_languages/'.$menuType->image.'.gif', null, null, true, true);			if (!$image)			{				$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $alt, array('title' => $menuType->title_native), true).'</span>';			}			else			{				$titleicon = ' <span>' . JHtml::_('image', 'mod_languages/' . $menuType->image . '.gif', $alt, array('title' => $menuType->title_native), true) . '</span>';			}		}		$menu->addChild(			new JMenuNode($menuType->title,	'index.php?option=com_menus&view=items&menutype='.$menuType->menutype, 'class:menu', null, null, $titleicon), $createMenu		);		if ($createMenu)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU_ITEM'), 'index.php?option=com_menus&view=item&layout=edit&menutype='.$menuType->menutype, 'class:newarticle')			);			$menu->getParent();		}	}	$menu->getParent();}//// Content Submenu//if ($user->authorise('core.manage', 'com_content')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT'), '#'), true	);	$createContent = $shownew && $user->authorise('core.create', 'com_content');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_ARTICLE_MANAGER'), 'index.php?option=com_content', 'class:article'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_ARTICLE'), 'index.php?option=com_content&task=article.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_CATEGORY_MANAGER'), 'index.php?option=com_categories&extension=com_content', 'class:category'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_content', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_FEATURED'), 'index.php?option=com_content&view=featured', 'class:featured')	);	$menu->addSeparator();	if ($user->authorise('core.manage', 'com_media'))	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_MEDIA_MANAGER'), 'index.php?option=com_media', 'class:media'));	}	$menu->getParent();}//// Components Submenu//// Get the authorised components and sub-menus.$components = ModMenuHelper::getComponents(true);// Check if there are any components, otherwise, don't render the menuif ($components){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COMPONENTS'), '#'), true);	foreach ($components as &$component)	{		if (!empty($component->submenu))		{			// This component has a db driven submenu.			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img), true);			foreach ($component->submenu as $sub)			{				$menu->addChild(new JMenuNode($sub->text, $sub->link, $sub->img));			}			$menu->getParent();		}		else		{			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img));		}	}	$menu->getParent();}//// Extensions Submenu//$im = $user->authorise('core.manage', 'com_installer');$mm = $user->authorise('core.manage', 'com_modules');$pm = $user->authorise('core.manage', 'com_plugins');$tm = $user->authorise('core.manage', 'com_templates');$lm = $user->authorise('core.manage', 'com_languages');if ($im || $mm || $pm || $tm || $lm){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSIONS'), '#'), true);	if ($im)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSION_MANAGER'), 'index.php?option=com_installer', 'class:install'));		$menu->addSeparator();	}	if ($mm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_MODULE_MANAGER'), 'index.php?option=com_modules', 'class:module'));	}	if ($pm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_PLUGIN_MANAGER'), 'index.php?option=com_plugins', 'class:plugin'));	}	if ($tm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_TEMPLATE_MANAGER'), 'index.php?option=com_templates', 'class:themes'));	}	if ($lm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_LANGUAGE_MANAGER'), 'index.php?option=com_languages', 'class:language'));	}	$menu->getParent();}//// Help Submenu//if ($showhelp == 1){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP'), '#'), true	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_JOOMLA'), 'index.php?option=com_admin&view=help', 'class:help')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_FORUM'), 'http://forum.joomla.org', 'class:help-forum', false, '_blank')	);	if ($forum_url = $params->get('forum_url'))	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_CUSTOM_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$debug = $lang->setDebug(false);	if ($lang->hasKey('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') && JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') != '')	{		$forum_url = 'http://forum.joomla.org/viewforum.php?f=' . (int) JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE');		$lang->setDebug($debug);		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$lang->setDebug($debug);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DOCUMENTATION'), 'http://docs.joomla.org', 'class:help-docs', false, '_blank')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_EXTENSIONS'), 'http://extensions.joomla.org', 'class:help-jed', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_TRANSLATIONS'), 'http://community.joomla.org/translations.html', 'class:help-trans', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_RESOURCES'), 'http://resources.joomla.org', 'class:help-jrd', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_COMMUNITY'), 'http://community.joomla.org', 'class:help-community', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SECURITY'), 'http://developer.joomla.org/security.html', 'class:help-security', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DEVELOPER'), 'http://developer.joomla.org', 'class:help-dev', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SHOP'), 'http://shop.joomla.org', 'class:help-shop', false, '_blank')	);	$menu->getParent();}//// Admin Settingss Submenu//$su = $user->authorise('core.admin');$cam = $user->authorise('core.manage', 'com_cache');$cim = $user->authorise('core.manage', 'com_checkin');	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_SETTINGS'), '#'), true);	if ($su):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_CONFIGURATION'), 'index.php?option=com_config', 'class:config')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_SYSTEM_INFORMATION'), 'index.php?option=com_admin&view=sysinfo', 'class:info')	);	endif;	if  ($cam):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_CLEAR_CACHE'), 'index.php?option=com_cache', 'class:clear')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_PURGE_EXPIRED_CACHE'), 'index.php?option=com_cache&view=purge', 'class:purge')		);	endif;	if  ($cim):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_GLOBAL_CHECKIN'), 'index.php?option=com_checkin', 'class:checkin')		);	endif;		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_USER_PROFILE'), 'index.php?option=com_admin&task=profile.edit&id='. $user->id, 'class:profile')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_LOGOUT'), 'index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1', 'class:logout')		);	$menu->getParent();
<?php/** * @package     Joomla.Platform * @subpackage  Data * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * An interface to define if an object is dumpable. * * @package     Joomla.Platform * @subpackage  Data * @since       12.3 */interface JDataDumpable{	/**	 * Dumps the object properties into a stdClass object, recursively if appropriate.	 *	 * @param   integer           $depth   The maximum depth of recursion.	 *                                     For example, a depth of 0 will return a stdClass with all the properties in native	 *                                     form. A depth of 1 will recurse into the first level of properties only.	 * @param   SplObjectStorage  $dumped  An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  stdClass  The data properties as a simple PHP stdClass object.	 *	 * @since   12.3	 */	public function dump($depth = 3, SplObjectStorage $dumped = null);}
<?php/** * Generic_Sniffs_Formatting_NoSpaceAfterCastSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: NoSpaceAfterCastSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Ensures there is no space after cast tokens. * * Example: * <b class="bad">(int) $foo;</b> * <b class="good">(int)$foo;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SpaceAfterCastSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns an array of tokens this test wants to listen for.	 *	 * @return array	 */	public function register()	{		return PHP_CodeSniffer_Tokens::$castTokens;	}//function	/**	 * Processes this test, when one of its tokens is encountered.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.	 * @param integer                  $stackPtr  The position of the current token in	 *                                        the stack passed in $tokens.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		if ($tokens[($stackPtr + 1)]['code'] === T_WHITESPACE)		{			$content       = $tokens[($stackPtr + 1)]['content'];			$contentLength = strlen($content);			if ($contentLength !== 1)			{				$error = 'Cast statements must be followed by a single space; expected 1 space but found %s';				$data  = array($contentLength);				$phpcsFile->addError($error, $stackPtr, 'IncorrectSingle', $data);			}		}		else		{			$error = 'Cast statements must be followed by a single space; expected "%s" but found "%s"';			$data  = array(					$tokens[$stackPtr]['content'].' '.$tokens[($stackPtr + 1)]['content'],					$tokens[$stackPtr]['content'].$tokens[($stackPtr + 1)]['content'],			);			$phpcsFile->addError($error, $stackPtr, 'Incorrect', $data);		}// 		if ($tokens[($stackPtr + 1)]['code'] === T_WHITESPACE)// 		{// 			$error = 'A cast statement must not be followed by a space';// 			$phpcsFile->addError($error, $stackPtr, 'SpaceFound');// 		}	}//function}//class
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Maps controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerMaps extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Maps', $prefix = 'FinderModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License, see LICENSE.php */defined('_JEXEC') or die;/** * Languages Installer Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.7 */class InstallerControllerLanguages extends JControllerLegacy{	/**	 * Finds new Languages.	 *	 * @return  void	 *	 * @since   2.5.7	 */	public function find()	{		// Purge the updates list		$model = $this->getModel('update');		$model->purge();		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the caching duration		$component = JComponentHelper::getComponent('com_installer');		$params = $component->params;		$cache_timeout = $params->get('cachetimeout', 6, 'int');		$cache_timeout = 3600 * $cache_timeout;		// Find updates		$model	= $this->getModel('languages');		$model->findLanguages($cache_timeout);		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=languages', false));	}	/**	 * Purge the updates list.	 *	 * @return  void	 *	 * @since   2.5.7	 */	public function purge()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Purge updates		$model = $this->getModel('update');		$model->purge();		$model->enableSites();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=languages', false), $model->_message);	}	/**	 * Install languages.	 *	 * @return  void	 *	 * @since   2.5.7	 */	public function install()	{		$model = $this->getModel('languages');		// Get array of selected languages		$lids = $this->input->get('cid', array(), 'array');		JArrayHelper::toInteger($lids, array());		if (!$lids)		{			// No languages have been selected			$app = JFactory::getApplication();			$app->enqueueMessage(JText::_('COM_INSTALLER_MSG_DISCOVER_NOEXTENSIONSELECTED'));		}		else		{			// Install selected languages			$model->install($lids);		}		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=languages', false));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Helper class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderHelper{	/**	 * @var		string	The extension name.	 * @since	2.5	 */	public static $extension = 'com_finder';	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_INDEX'),			'index.php?option=com_finder&view=index',			$vName == 'index'		);		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_MAPS'),			'index.php?option=com_finder&view=maps',			$vName == 'maps'		);		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_FILTERS'),			'index.php?option=com_finder&view=filters',			$vName == 'filters'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject  A JObject containing the allowed actions.	 *	 * @since   2.5	 */	public static function getActions()	{		$user = JFactory::getUser();		$result = new JObject;		$assetName = 'com_finder';		$actions = JAccess::getActions($assetName, 'component');		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for Tabs elements. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.2 */abstract class JHtmlTabs{	/**	 * Creates a panes and creates the JavaScript object for it.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  An array of option.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function start($group = 'tabs', $params = array())	{		self::_loadBehavior($group, $params);		return '<dl class="tabs" id="' . $group . '"><dt style="display:none;"></dt><dd style="display:none;">';	}	/**	 * Close the current pane	 *	 * @return  string  HTML to close the pane	 *	 * @since   11.1	 */	public static function end()	{		return '</dd></dl>';	}	/**	 * Begins the display of a new panel.	 *	 * @param   string  $text  Text to display.	 * @param   string  $id    Identifier of the panel.	 *	 * @return  string  HTML to start a new panel	 *	 * @since   11.1	 */	public static function panel($text, $id)	{		return '</dd><dt class="tabs ' . $id . '"><span><h3><a href="javascript:void(0);">' . $text . '</a></h3></span></dt><dd class="tabs">';	}	/**	 * Load the JavaScript behavior.	 *	 * @param   string  $group   The pane identifier.	 * @param   array   $params  Array of options.	 *	 * @return  void	 *	 * @since   11.1	 */	protected static function _loadBehavior($group, $params = array())	{		static $loaded = array();		if (!array_key_exists((string) $group, $loaded))		{			// Include MooTools framework			JHtml::_('behavior.framework', true);			$opt['onActive']            = (isset($params['onActive'])) ? '\\' . $params['onActive'] : null;			$opt['onBackground']        = (isset($params['onBackground'])) ? '\\' . $params['onBackground'] : null;			$opt['display']             = (isset($params['startOffset'])) ? (int) $params['startOffset'] : null;			$opt['useStorage']          = (isset($params['useCookie']) && $params['useCookie']) ? 'true' : 'false';			$opt['titleSelector']       = "dt.tabs";			$opt['descriptionSelector'] = "dd.tabs";			$options = JHtml::getJSObject($opt);			$js = '	window.addEvent(\'domready\', function(){						$$(\'dl#' . $group . '.tabs\').each(function(tabs){							new JTabs(tabs, ' . $options . ');						});					});';			$document = JFactory::getDocument();			$document->addScriptDeclaration($js);			JHtml::_('script', 'system/tabs.js', false, true);			$loaded[(string) $group] = true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_whosonline * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($showmode == 0 || $showmode == 2) : ?>	<?php $guest = JText::plural('MOD_WHOSONLINE_GUESTS', $count['guest']); ?>	<?php $member = JText::plural('MOD_WHOSONLINE_MEMBERS', $count['user']); ?>	<p><?php echo JText::sprintf('MOD_WHOSONLINE_WE_HAVE', $guest, $member); ?></p><?php endif; ?><?php if (($showmode > 0) && count($names)) : ?>	<ul  class="whosonline<?php echo $moduleclass_sfx ?>" >	<?php if ($params->get('filter_groups')):?>		<p><?php echo JText::_('MOD_WHOSONLINE_SAME_GROUP_MESSAGE'); ?></p>	<?php endif;?>	<?php foreach ($names as $name) : ?>		<li>			<?php echo $name->username; ?>		</li>	<?php endforeach;  ?>	</ul><?php endif;
<?php/** * @package     Joomla.Administrator * @subpackage  mod_multilangstatus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.modal');?><div class="btn-group multilanguage"><a class="modal" href="<?php echo JRoute::_('index.php?option=com_languages&view=multilangstatus&tmpl=component');?>" rel="{handler:'iframe', size:{x:700,y:400}}"><i class="icon-comment"></i> <?php echo JText::_('MOD_MULTILANGSTATUS');?></a></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! update helper. * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateHelper{	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since	2.5.4	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_joomlaupdate';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Cache callback type object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheControllerCallback extends JCacheController{	/**	 * Executes a cacheable callback if not found in cache else returns cached output and result	 *	 * Since arguments to this function are read with func_get_args you can pass any number of	 * arguments to this method	 * as long as the first argument passed is the callback definition.	 *	 * The callback definition can be in several forms:	 * - Standard PHP Callback array see <http://php.net/callback> [recommended]	 * - Function name as a string eg. 'foo' for function foo()	 * - Static method name as a string eg. 'MyClass::myMethod' for method myMethod() of class MyClass	 *	 * @return  mixed  Result of the callback	 *	 * @since   11.1	 */	public function call()	{		// Get callback and arguments		$args = func_get_args();		$callback = array_shift($args);		return $this->get($callback, $args);	}	/**	 * Executes a cacheable callback if not found in cache else returns cached output and result	 *	 * @param   mixed    $callback    Callback or string shorthand for a callback	 * @param   array    $args        Callback arguments	 * @param   string   $id          Cache id	 * @param   boolean  $wrkarounds  True to use wrkarounds	 * @param   array    $woptions    Workaround options	 *	 * @return  mixed  Result of the callback	 *	 * @since   11.1	 */	public function get($callback, $args = array(), $id = false, $wrkarounds = false, $woptions = array())	{		// Normalize callback		if (is_array($callback))		{			// We have a standard php callback array -- do nothing		}		elseif (strstr($callback, '::'))		{			// This is shorthand for a static method callback classname::methodname			list ($class, $method) = explode('::', $callback);			$callback = array(trim($class), trim($method));		}		elseif (strstr($callback, '->'))		{			/*			 * This is a really not so smart way of doing this... we provide this for backward compatability but this			 * WILL! disappear in a future version.  If you are using this syntax change your code to use the standard			 * PHP callback array syntax: <http://php.net/callback>			 *			 * We have to use some silly global notation to pull it off and this is very unreliable			 */			list ($object_123456789, $method) = explode('->', $callback);			global $$object_123456789;			$callback = array($$object_123456789, $method);		}		else		{			// We have just a standard function -- do nothing		}		if (!$id)		{			// Generate an ID			$id = $this->_makeId($callback, $args);		}		$data = $this->cache->get($id);		$locktest = new stdClass;		$locktest->locked = null;		$locktest->locklooped = null;		if ($data === false)		{			$locktest = $this->cache->lock($id);			if ($locktest->locked == true && $locktest->locklooped == true)			{				$data = $this->cache->get($id);			}		}		$coptions = array();		if ($data !== false)		{			$cached = unserialize(trim($data));			$coptions['mergehead'] = isset($woptions['mergehead']) ? $woptions['mergehead'] : 0;			$output = ($wrkarounds == false) ? $cached['output'] : JCache::getWorkarounds($cached['output'], $coptions);			$result = $cached['result'];			if ($locktest->locked == true)			{				$this->cache->unlock($id);			}		}		else		{			if (!is_array($args))			{				$Args = !empty($args) ? array(&$args) : array();			}			else			{				$Args = &$args;			}			if ($locktest->locked == false)			{				$locktest = $this->cache->lock($id);			}			if (isset($woptions['modulemode']) && $woptions['modulemode'] == 1)			{				$document = JFactory::getDocument();				$coptions['modulemode'] = 1;				$coptions['headerbefore'] = $document->getHeadData();			}			else			{				$coptions['modulemode'] = 0;			}			ob_start();			ob_implicit_flush(false);			$result = call_user_func_array($callback, $Args);			$output = ob_get_contents();			ob_end_clean();			$cached = array();			$coptions['nopathway'] = isset($woptions['nopathway']) ? $woptions['nopathway'] : 1;			$coptions['nohead'] = isset($woptions['nohead']) ? $woptions['nohead'] : 1;			$coptions['nomodules'] = isset($woptions['nomodules']) ? $woptions['nomodules'] : 1;			$cached['output'] = ($wrkarounds == false) ? $output : JCache::setWorkarounds($output, $coptions);			$cached['result'] = $result;			// Store the cache data			$this->cache->store(serialize($cached), $id);			if ($locktest->locked == true)			{				$this->cache->unlock($id);			}		}		echo $output;		return $result;	}	/**	 * Generate a callback cache id	 *	 * @param   callback  $callback  Callback to cache	 * @param   array     $args      Arguments to the callback method to cache	 *	 * @return  string  MD5 Hash : function cache id	 *	 * @since   11.1	 */	protected function _makeId($callback, $args)	{		if (is_array($callback) && is_object($callback[0]))		{			$vars = get_object_vars($callback[0]);			$vars[] = strtolower(get_class($callback[0]));			$callback[0] = $vars;		}		return md5(serialize(array($callback, $args)));	}}
<?php/** * Joomla_Sniffs_ControlStructures_MultiLineConditionSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MultiLineConditionSniff.php 289839 2009-10-21 23:11:33Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_ControlStructures_MultiLineConditionSniff. * * Ensure multi-line IF conditions are defined correctly. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_MultiLineConditionSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_IF);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // We need to work out how far indented the if statement        // itself is, so we can work out how far to indent conditions.        $statementIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($i >= 0 && $tokens[$i]['code'] === T_WHITESPACE) {            $statementIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces        // and start with an operator, unless the line is inside a        // function call, in which case it is ignored.        $openBracket  = $tokens[$stackPtr]['parenthesis_opener'];        $closeBracket = $tokens[$stackPtr]['parenthesis_closer'];        $lastLine = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i <= $closeBracket; $i++) {            if ($tokens[$i]['line'] !== $lastLine) {                if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {                    $next = $phpcsFile->findNext(T_WHITESPACE, $i, null, true);                    if ($next == $closeBracket) {	                    $error = 'Closing parenthesis of a multi-line IF statement must be on the same line';	                    $phpcsFile->addError($error, $i, 'CloseBracketNewLine');	                    $i ++;	                    continue;                    }                }                    $expectedIndent = ($statementIndent + 1);                // We changed lines, so this should be a whitespace indent token.                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {                    $error = 'Multi-line IF statement not indented correctly; expected %s spaces but found %s';                    $data  = array(                              $expectedIndent,                              $foundIndent,                             );                    $phpcsFile->addError($error, $i, 'Alignment', $data);                }                $next = $phpcsFile->findNext(T_WHITESPACE, $i, null, true);                if (in_array($tokens[$next]['code'], PHP_CodeSniffer_Tokens::$booleanOperators) === false) {                    $error = 'Each line in a multi-line IF statement must begin with a boolean operator';                    $phpcsFile->addError($error, $i, 'StartWithBoolean');                }                $lastLine = $tokens[$i]['line'];            }//end if            if ($tokens[$i]['code'] === T_STRING) {                $next = $phpcsFile->findNext(T_WHITESPACE, ($i + 1), null, true);                if ($tokens[$next]['code'] === T_OPEN_PARENTHESIS) {                    // This is a function call, so skip to the end as they                    // have their own indentation rules.                    $i        = $tokens[$next]['parenthesis_closer'];                    $lastLine = $tokens[$i]['line'];                    continue;                }            }        }//end for    }//end process()}//end class?>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform class for interacting with a GitHub server instance. * * @property-read  JGithubGists    $gists    GitHub API object for gists. * @property-read  JGithubIssues   $issues   GitHub API object for issues. * @property-read  JGithubPulls    $pulls    GitHub API object for pulls. * @property-read  JGithubRefs     $refs     GitHub API object for referencess. * @property-read  JGithubForks    $forks    GitHub API object for forks. * @property-read  JGithubCommits  $commits  GitHub API object for commits. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithub{	/**	 * @var    JRegistry  Options for the GitHub object.	 * @since  11.3	 */	protected $options;	/**	 * @var    JGithubHttp  The HTTP client object to use in sending HTTP requests.	 * @since  11.3	 */	protected $client;	/**	 * @var    JGithubGists  GitHub API object for gists.	 * @since  11.3	 */	protected $gists;	/**	 * @var    JGithubIssues  GitHub API object for issues.	 * @since  11.3	 */	protected $issues;	/**	 * @var    JGithubPulls  GitHub API object for pulls.	 * @since  11.3	 */	protected $pulls;	/**	 * @var    JGithubRefs  GitHub API object for referencess.	 * @since  11.3	 */	protected $refs;	/**	 * @var    JGithubForks  GitHub API object for forks.	 * @since  11.3	 */	protected $forks;	/**	 * @var    JGithubCommits  GitHub API object for commits.	 * @since  12.1	 */	protected $commits;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  GitHub options object.	 * @param   JGithubHttp  $client   The HTTP client object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JGithubHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JGithubHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'https://api.github.com');	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JGithubObject  GitHub API object (gists, issues, pulls, etc).	 *	 * @since   11.3	 */	public function __get($name)	{		if ($name == 'gists')		{			if ($this->gists == null)			{				$this->gists = new JGithubGists($this->options, $this->client);			}			return $this->gists;		}		if ($name == 'issues')		{			if ($this->issues == null)			{				$this->issues = new JGithubIssues($this->options, $this->client);			}			return $this->issues;		}		if ($name == 'pulls')		{			if ($this->pulls == null)			{				$this->pulls = new JGithubPulls($this->options, $this->client);			}			return $this->pulls;		}		if ($name == 'refs')		{			if ($this->refs == null)			{				$this->refs = new JGithubRefs($this->options, $this->client);			}			return $this->refs;		}		if ($name == 'forks')		{			if ($this->forks == null)			{				$this->forks = new JGithubForks($this->options, $this->client);			}			return $this->forks;		}		if ($name == 'commits')		{			if ($this->commits == null)			{				$this->commits = new JGithubCommits($this->options, $this->client);			}			return $this->commits;		}	}	/**	 * Get an option from the JGitHub instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   11.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGitHub instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGitHub  This object for method chaining.	 *	 * @since   11.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->showMessage) : ?><?php echo $this->loadTemplate('message'); ?><?php endif; ?><?php echo $this->loadTemplate('form'); ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form target="_parent" action="index.php?option=com_media&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>" method="post" id="mediamanager-form" name="mediamanager-form">	<ul class="manager thumbnails">		<?php		echo $this->loadTemplate('up');		?>		<?php for ($i = 0, $n = count($this->folders); $i < $n; $i++) :			$this->setFolder($i);			echo $this->loadTemplate('folder');		endfor; ?>		<?php for ($i = 0, $n = count($this->documents); $i < $n; $i++) :			$this->setDoc($i);			echo $this->loadTemplate('doc');		endfor; ?>		<?php for ($i = 0, $n = count($this->images); $i < $n; $i++) :			$this->setImage($i);			echo $this->loadTemplate('img');		endfor; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="username" value="" />		<input type="hidden" name="password" value="" />		<?php echo JHtml::_('form.token'); ?>	</ul></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_search * * @package     Joomla.Site * @subpackage  mod_search * @since       1.5 */class ModSearchHelper{	/**	 * Display the search button as an image.	 *	 * @param   string	$button_text	The alt text for the button.	 *	 * @return  string	The HTML for the image.	 * @since   1.5	 */	public static function getSearchImage($button_text)	{		$img = JHtml::_('image', 'searchButton.gif', $button_text, null, true, true);		return $img;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_breadcrumbs * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';// Get the breadcrumbs$list	= ModBreadCrumbsHelper::getList($params);$count	= count($list);// Set the default separator$separator = ModBreadCrumbsHelper::setSeparator($params->get('separator'));$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_breadcrumbs', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Log Class * * This class hooks into the global log configuration settings to allow for user configured * logging events to be sent to where the user wishes them to be sent. On high load sites * Syslog is probably the best (pure PHP function), then the text file based loggers (CSV, W3c * or plain Formattedtext) and finally MySQL offers the most features (e.g. rapid searching) * but will incur a performance hit due to INSERT being issued. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLog{	/**	 * All log priorities.	 * @var    integer	 * @since  11.1	 */	const ALL = 30719;	/**	 * The system is unusable.	 * @var    integer	 * @since  11.1	 */	const EMERGENCY = 1;	/**	 * Action must be taken immediately.	 * @var    integer	 * @since  11.1	 */	const ALERT = 2;	/**	 * Critical conditions.	 * @var    integer	 * @since  11.1	 */	const CRITICAL = 4;	/**	 * Error conditions.	 * @var    integer	 * @since  11.1	 */	const ERROR = 8;	/**	 * Warning conditions.	 * @var    integer	 * @since  11.1	 */	const WARNING = 16;	/**	 * Normal, but significant condition.	 * @var    integer	 * @since  11.1	 */	const NOTICE = 32;	/**	 * Informational message.	 * @var    integer	 * @since  11.1	 */	const INFO = 64;	/**	 * Debugging message.	 * @var    integer	 * @since  11.1	 */	const DEBUG = 128;	/**	 * The global JLog instance.	 * @var    JLog	 * @since  11.1	 */	protected static $instance;	/**	 * Container for JLogLogger configurations.	 * @var    array	 * @since  11.1	 */	protected $configurations = array();	/**	 * Container for JLogLogger objects.	 * @var    array	 * @since  11.1	 */	protected $loggers = array();	/**	 * Lookup array for loggers.	 * @var    array	 * @since  11.1	 */	protected $lookup = array();	/**	 * Constructor.	 *	 * @since   11.1	 */	protected function __construct()	{	}	/**	 * Method to add an entry to the log.	 *	 * @param   mixed    $entry     The JLogEntry object to add to the log or the message for a new JLogEntry object.	 * @param   integer  $priority  Message priority.	 * @param   string   $category  Type of entry	 * @param   string   $date      Date of entry (defaults to now if not specified or blank)	 *	 * @return  void	 *	 * @since   11.1	 */	public static function add($entry, $priority = self::INFO, $category = '', $date = null)	{		// Automatically instantiate the singleton object if not already done.		if (empty(self::$instance))		{			self::setInstance(new JLog);		}		// If the entry object isn't a JLogEntry object let's make one.		if (!($entry instanceof JLogEntry))		{			$entry = new JLogEntry((string) $entry, $priority, $category, $date);		}		self::$instance->addLogEntry($entry);	}	/**	 * Add a logger to the JLog instance.  Loggers route log entries to the correct files/systems to be logged.	 *	 * @param   array    $options     The object configuration array.	 * @param   integer  $priorities  Message priority	 * @param   array    $categories  Types of entry	 *	 * @return  void	 *	 * @since   11.1	 */	public static function addLogger(array $options, $priorities = self::ALL, $categories = array())	{		// Automatically instantiate the singleton object if not already done.		if (empty(self::$instance))		{			self::setInstance(new JLog);		}		// The default logger is the formatted text log file.		if (empty($options['logger']))		{			$options['logger'] = 'formattedtext';		}		$options['logger'] = strtolower($options['logger']);		// Special case - if a Closure object is sent as the callback (in case of JLoggerCallback)		// Closure objects are not serializable so swap it out for a unique id first then back again later		if (isset($options['callback']) && is_a($options['callback'], 'closure'))		{			$callback = $options['callback'];			$options['callback'] = spl_object_hash($options['callback']);		}		// Generate a unique signature for the JLog instance based on its options.		$signature = md5(serialize($options));		// Now that the options array has been serialized, swap the callback back in		if (isset($callback))		{			$options['callback'] = $callback;		}		// Register the configuration if it doesn't exist.		if (empty(self::$instance->configurations[$signature]))		{			self::$instance->configurations[$signature] = $options;		}		self::$instance->lookup[$signature] = (object) array(			'priorities' => $priorities,			'categories' => array_map('strtolower', (array) $categories));	}	/**	 * Returns a reference to the a JLog object, only creating it if it doesn't already exist.	 * Note: This is principally made available for testing and internal purposes.	 *	 * @param   JLog  $instance  The logging object instance to be used by the static methods.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setInstance($instance)	{		if (($instance instanceof JLog) || $instance === null)		{			self::$instance = & $instance;		}	}	/**	 * Method to add an entry to the appropriate loggers.	 *	 * @param   JLogEntry  $entry  The JLogEntry object to send to the loggers.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function addLogEntry(JLogEntry $entry)	{		// Find all the appropriate loggers based on priority and category for the entry.		$loggers = $this->findLoggers($entry->priority, $entry->category);		foreach ((array) $loggers as $signature)		{			// Attempt to instantiate the logger object if it doesn't already exist.			if (empty($this->loggers[$signature]))			{				$class = 'JLogLogger' . ucfirst($this->configurations[$signature]['logger']);				if (class_exists($class))				{					$this->loggers[$signature] = new $class($this->configurations[$signature]);				}				else				{					throw new RuntimeException('Unable to create a JLogLogger instance: ' . $class);				}			}			// Add the entry to the logger.			$this->loggers[$signature]->addEntry(clone($entry));		}	}	/**	 * Method to find the loggers to use based on priority and category values.	 *	 * @param   integer  $priority  Message priority.	 * @param   string   $category  Type of entry	 *	 * @return  array  The array of loggers to use for the given priority and category values.	 *	 * @since   11.1	 */	protected function findLoggers($priority, $category)	{		$loggers = array();		// Sanitize inputs.		$priority = (int) $priority;		$category = strtolower($category);		// Let's go iterate over the loggers and get all the ones we need.		foreach ((array) $this->lookup as $signature => $rules)		{			// Check to make sure the priority matches the logger.			if ($priority & $rules->priorities)			{				// If either there are no set categories (meaning all) or the specific category is set, add this logger.				if (empty($category) || empty($rules->categories) || in_array($category, $rules->categories))				{					$loggers[] = $signature;				}			}		}		return $loggers;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Component Language Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.5 */class LanguagesModelLanguage extends JModelAdmin{	/**	 * Override to get the table	 *	 * @return  JTable	 * @since   1.6	 */	public function getTable($name = '', $prefix = '', $options = array())	{		return JTable::getInstance('Language');	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState()	{		$app    = JFactory::getApplication('administrator');		$params = JComponentHelper::getParams('com_languages');		// Load the User state.		$langId = $app->input->getInt('lang_id');		$this->setState('language.id', $langId);		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get a member item.	 *	 * @param   integer	The id of the member to get.	 *	 * @return  mixed  User data object on success, false on failure.	 * @since   1.0	 */	public function getItem($langId = null)	{		$langId	= (!empty($langId)) ? $langId : (int) $this->getState('language.id');		$false  = false;		// Get a member row instance.		$table = $this->getTable();		// Attempt to load the row.		$return = $table->load($langId);		// Check for a table object error.		if ($return === false && $table->getError())		{			$this->setError($table->getError());			return $false;		}		$properties = $table->getProperties(1);		$value = JArrayHelper::toObject($properties, 'JObject');		return $value;	}	/**	 * Method to get the group form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_languages.language', 'language', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_languages.edit.language.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_languages.language', $data);		return $data;	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 *	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		$langId	= (int) $this->getState('language.id');		$isNew	= true;		$dispatcher = JEventDispatcher::getInstance();		JPluginHelper::importPlugin('extension');		$table = $this->getTable();		// Load the row if saving an existing item.		if ($langId > 0)		{			$table->load($langId);			$isNew = false;		}		// Bind the data		if (!$table->bind($data))		{			$this->setError($table->getError());			return false;		}		// Check the data		if (!$table->check())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionBeforeSave event.		$result = $dispatcher->trigger('onExtensionBeforeSave', array('com_languages.language', &$table, $isNew));		// Check the event responses.		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Store the data		if (!$table->store())		{			$this->setError($table->getError());			return false;		}		// Trigger the onExtensionAfterSave event.		$dispatcher->trigger('onExtensionAfterSave', array('com_languages.language', &$table, $isNew));		$this->setState('language.id', $table->lang_id);		// Clean the cache.		$this->cleanCache();		return true;	}	/**	 * Custom clean cache method	 *	 * @since   1.6	 */	protected function cleanCache($group = null, $client_id = 0)	{		parent::cleanCache('_system');		parent::cleanCache('com_languages');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_submenu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="sidebar">	<div class="sidebar-nav">		<?php if ($displayMenu) : ?>		<ul id="submenu" class="nav nav-list">			<?php foreach ($list as $item) : ?>			<?php if (isset ($item[2]) && $item[2] == 1) :				?><li class="active"><?php			else :				?><li><?php			endif;			?>			<?php			if ($hide) :					?><a class="nolink"><?php echo $item[0]; ?></a><?php			else :				if (strlen($item[1])) :					?><a href="<?php echo JFilterOutput::ampReplace($item[1]); ?>"><?php echo $item[0]; ?></a><?php				else :					?><?php echo $item[0]; ?><?php				endif;			endif;			?>			</li>			<?php endforeach; ?>		</ul>		<?php endif; ?>		<?php if ($displayMenu && $displayFilters) : ?>		<hr />		<?php endif; ?>		<?php if ($displayFilters) : ?>		<div class="filter-select hidden-phone">			<h4 class="page-header"><?php echo JText::_('JSEARCH_FILTER_LABEL');?></h4>			<form action="<?php echo JRoute::_($action);?>" method="post">				<?php foreach ($filters as $filter) : ?>					<label for="<?php echo $filter['name']; ?>" class="element-invisible"><?php echo $filter['label']; ?></label>					<select name="<?php echo $filter['name']; ?>" id="<?php echo $filter['name']; ?>" class="span12 small" onchange="this.form.submit()">						<?php if (!$filter['noDefault']) : ?>							<option value=""><?php echo $filter['label']; ?></option>						<?php endif; ?>						<?php echo $filter['options']; ?>					</select>					<hr class="hr-condensed" />				<?php endforeach; ?>			</form>		</div>		<?php endif; ?>	</div></div>
